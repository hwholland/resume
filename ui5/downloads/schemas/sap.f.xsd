<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.f" xmlns:n3="sap.f" xmlns:n1="sap.ui.unified" xmlns:n0="sap.ui.core" xmlns:n2="sap.m">
<xsd:import namespace="sap.ui.unified"/>
<xsd:import namespace="sap.ui.core"/>
<xsd:import namespace="sap.m"/>
<xsd:element name="Avatar" type="n3:_AvatarType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>An image-like control that has different display options for representing images, initials,
and icons.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;Avatar&lt;/code&gt; control allows the usage of different content, shapes, and sizes
depending on the use case.

The content types that can be displayed are either images, icons, or initials. The shape
can be circular or square. There are several predefined sizes, as well as an option to
set a custom size.

&lt;h3&gt;Usage&lt;/h3&gt;

Up to two Latin letters can be displayed as initials in an &lt;code&gt;Avatar&lt;/code&gt;. If there
are more than two letters, or if there's a non-Latin character present, a default image
placeholder will be created.

There are two options for how the displayed image can fit inside the
available area:
&lt;ul&gt;
&lt;li&gt;Cover - the image is scaled to cover all of the available area&lt;/li&gt;
&lt;li&gt;Contain - the image is scaled as large as possible while both
its height and width fit inside the avalable area&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Note:&lt;/b&gt; To set a custom size for the &lt;code&gt;Avatar&lt;/code&gt;, you have to choose the &lt;code&gt;Custom&lt;/code&gt;
value for the &lt;code&gt;displaySize&lt;/code&gt; property. Then, you have to set both the
&lt;code&gt;customDisplaySize&lt;/code&gt; and &lt;code&gt;customFontSize&lt;/code&gt; properties.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DynamicPage" type="n3:_DynamicPageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout control, representing a web page, consisting of a title, header with dynamic behavior, a content area, and an optional floating footer.

&lt;h3&gt;Overview&lt;/h3&gt;

The control consist of several components:

&lt;ul&gt;&lt;li&gt;{@link sap.f.DynamicPageTitle DynamicPageTitle} - consists of a heading
on the left side, content in the middle, and actions on the right. The displayed
content changes based on the current mode of the {@link sap.f.DynamicPageHeader
DynamicPageHeader}.&lt;/li&gt;
&lt;li&gt;{@link sap.f.DynamicPageHeader DynamicPageHeader} - a generic container, which
can contain a single layout control and does not care about the content alignment
and responsiveness. The header works in two modes - expanded and snapped and its
behavior can be adjusted with the help of different properties.&lt;/li&gt;
&lt;li&gt;Content area - a generic container, which can have a single UI5 layout control
and does not care about the content alignment and responsiveness.&lt;/li&gt;
&lt;li&gt;Footer - positioned at the bottom with a small offset and used for additional
actions, the footer floats above the content. It can be any {@link sap.m.IBar}
control.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

Use the &lt;code&gt;DynamicPage&lt;/code&gt; if you need to have a title, that is always visible
and a header, that has configurable Expanding/Snapping functionality.
If you don't need the Expanding/Snapping functionality it is better to use the
{@link sap.m.Page} as a lighter control.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;li&gt;If you're displaying a {@link sap.m.FlexBox} with non-adaptive content
(doesn't stretch to fill the available space), it is recommended to set the
&lt;code&gt;fitContainer&lt;/code&gt; property of the {@link sap.m.FlexBox FlexBox} to
&lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are displaying a {@link sap.ui.table.Table}, keep in mind that it is
non-adaptive and may cause unpredicted behavior for the &lt;code&gt;DynamicPage&lt;/code&gt;
on smaller screen sizes, such as mobile.&lt;/li&gt;
&lt;li&gt;Snapping of the {@link sap.f.DynamicPageTitle DynamicPageTitle} is not supported in the following case:
When the &lt;code&gt;DynamicPage&lt;/code&gt; has a scroll bar, the control usually scrolls to the snapping point - the point,
where the {@link sap.f.DynamicPageHeader DynamicPageHeader} is scrolled out completely.
However, when there is a scroll bar, but not enough content to reach the snapping point,
the snapping is not possible using scrolling.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPage&lt;/code&gt; depends on the behavior of
the content that is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DynamicPageHeader" type="n3:_DynamicPageHeaderType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Header of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; control is part of the {@link sap.f.DynamicPage} family
and is used to serve as header of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageHeader&lt;/code&gt; can hold any layout control and has  two states - expanded
and collapsed (snapped). The switching between these states happens when:

&lt;ul&gt;&lt;li&gt;the user scrolls below its bottom margin&lt;/li&gt;
&lt;li&gt;the user clicks on the {@link sap.f.DynamicPageTitle DynamicPageTitle}&lt;/li&gt;
&lt;li&gt;through the {@link sap.f.DynamicPage DynamicPage} property &lt;code&gt;headerExpanded&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageHeader&lt;/code&gt; depends on the behavior of the
content that is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DynamicPageTitle" type="n3:_DynamicPageTitleType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Title of the {@link sap.f.DynamicPage}.

&lt;h3&gt;Overview&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; control is part of the {@link sap.f.DynamicPage}
family and is used to serve as title of the {@link sap.f.DynamicPage DynamicPage}.

&lt;h3&gt;Usage&lt;/h3&gt;

The &lt;code&gt;DynamicPageTitle&lt;/code&gt; can hold any control and displays the most important
information regarding the object that will always remain visible while scrolling.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s
recommended to use controls, suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.

If the &lt;code&gt;toggleHeaderOnTitleClick&lt;/code&gt; property of the {@link sap.f.DynamicPage DynamicPage}
is set to &lt;code&gt;true&lt;/code&gt;, the user can switch between the expanded/collapsed states of the
{@link sap.f.DynamicPageHeader DynamicPageHeader} by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt;
or by using the expand/collapse visual indicators, positioned at the bottom of the
&lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable,
the visual indicators are not available, and the app must provide other means for
expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; depends on the behavior of the
content that is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlexibleColumnLayout" type="n3:_FlexibleColumnLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Implements the master-detail-detail paradigm by displaying up to three pages in separate columns.

&lt;h3&gt;Overview&lt;/h3&gt;

The control is logically similar to {@link sap.m.SplitContainer} with the difference that it capable of handling
three columns (referred to as &lt;code&gt;Begin&lt;/code&gt;, &lt;code&gt;Mid&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt;) rather than two
(&lt;code&gt;Master&lt;/code&gt;, &lt;code&gt;Detail&lt;/code&gt;). The width of the three columns is variable.

There are several possible layouts that can be changed either with the control's API, or by the user with the help of layout arrows.

Internally the control makes use of three instances of {@link sap.m.NavContainer}, thus forming the three columns.

&lt;h3&gt;Usage&lt;/h3&gt;

Use this control for applications that need to display several logical levels of related information side by side (e.g. list of items, item, sub-item, etc.).
The control is flexible in a sense that the application can focus the user's attention on one particular column by making it larger or even fullscreen.

The columns are accessible with the &lt;code&gt;beginColumnPages&lt;/code&gt;, &lt;code&gt;midColumnPages&lt;/code&gt; and &lt;code&gt;endColumnPages&lt;/code&gt; aggregations.

The relative sizes and the visibility of the three columns are determined based on the value of the {@link sap.f.LayoutType layout} property.

Changes to the layout due to user interaction are communicated to the app with the &lt;code&gt;stateChange&lt;/code&gt; event.

&lt;ul&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;li&gt;To easily implement the recommended UX design of a &lt;code&gt;sap.f.FlexibleColumnLayout&lt;/code&gt;-based app,
you can use the &lt;code&gt;sap.f.FlexibleColumnLayoutSemanticHelper&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;To facilitate the navigation and view loading, you can use the {@link sap.f.routing.Router} &lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Responsive Behavior&lt;/h3&gt;

The control automatically displays the maximum possible number of columns based on the device size and current &lt;code&gt;layout&lt;/code&gt;.
The app does not need to take into consideration the current device/screen size, but only to add content to the
columns and change the value of the &lt;code&gt;layout&lt;/code&gt; property.

For detailed information, see {@link sap.f.LayoutType LayoutType} enumeration.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AddAction" type="n3:_AddActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;addAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CloseAction" type="n3:_CloseActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;closeAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CopyAction" type="n3:_CopyActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;copyAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DeleteAction" type="n3:_DeleteActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;deleteAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DiscussInJamAction" type="n3:_DiscussInJamActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;discussInJamAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in the share menu within its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EditAction" type="n3:_EditActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;editAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ExitFullScreenAction" type="n3:_ExitFullScreenActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;exitFullScreenAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FavoriteAction" type="n3:_FavoriteActionType" substitutionGroup="n3:SemanticToggleButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;favoriteAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlagAction" type="n3:_FlagActionType" substitutionGroup="n3:SemanticToggleButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;flagAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FooterMainAction" type="n3:_FooterMainActionType" substitutionGroup="n3:MainAction">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;footerMainAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FullScreenAction" type="n3:_FullScreenActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;fullScreenAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MainAction" type="n3:_MainActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>Serves as a base class for the {@link sap.f.semantic.TitleMainAction} and {@link sap.f.semantic.FooterMainAction} controls.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MessagesIndicator" type="n3:_MessagesIndicatorType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;messagesIndicator&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NegativeAction" type="n3:_NegativeActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;negativeAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PositiveAction" type="n3:_PositiveActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;positiveAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PrintAction" type="n3:_PrintActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;printAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in the share menu within its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticButton" type="n3:_SemanticButtonType" substitutionGroup="n3:SemanticControl">
<xsd:annotation>
<xsd:documentation>A base class for the available semantic actions, such as {@link sap.f.semantic.AddAction AddAction},
{@link sap.f.semantic.CloseAction CloseAction}, etc.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticControl" type="n3:_SemanticControlType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The base class for the {@link sap.f.semantic.SemanticButton}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticPage" type="n3:_SemanticPageType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>An enhanced {@link sap.f.DynamicPage}, that contains controls with semantic-specific meaning.

&lt;h3&gt;Overview&lt;/h3&gt;

Content specified in the &lt;code&gt;sap.f.semantic.SemanticPage&lt;/code&gt; aggregations is automatically
positioned in dedicated sections of the title or the footer of the page, depending on
the control's semantics.

The actions in the &lt;code&gt;SemanticPage&lt;/code&gt; title are grouped to text actions or icon actions.
When an aggregation is set, the actions appear in the following predefined order (from left to right):

&lt;ul&gt;Text actions:
&lt;li&gt;The main semantic text action - &lt;code&gt;titleMainAction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Any custom text actions - &lt;code&gt;titleCustomTextActions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The semantic text actions - &lt;code&gt;editAction&lt;/code&gt;, &lt;code&gt;deleteAction&lt;/code&gt;, &lt;code&gt;copyAction&lt;/code&gt; and &lt;code&gt;addAction&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;Icon actions:
&lt;li&gt;Any custom icon actions - &lt;code&gt;titleCustomIconActions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The simple semantic icon actions - &lt;code&gt;favoriteAction&lt;/code&gt; and &lt;code&gt;flagAction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The share menu semantic icon actions as a drop-down list with the following order:
	&lt;ul&gt;&lt;li&gt;&lt;code&gt;sendEmailAction&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;discussInJamAction&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;shareInJamAction&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;sendMessageAction&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;printAction&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Any &lt;code&gt;customShareActions&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The navigation semantic actions - &lt;code&gt;fullScreenAction&lt;/code&gt;, &lt;code&gt;exitFullScreenAction&lt;/code&gt;,
and &lt;code&gt;closeAction&lt;/li&gt;&lt;/code&gt;&lt;/ul&gt;

The actions in the &lt;code&gt;SemanticPage&lt;/code&gt; footer are positioned either on its left or right area and have the following predefined order:

&lt;ul&gt;Footer left area:
&lt;li&gt;The semantic text action - &lt;code&gt;messagesIndicator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The semantic label - &lt;code&gt;draftIndicator&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;Footer right area:
&lt;li&gt;The main semantic text action - &lt;code&gt;footerMainAction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The semantic text actions - &lt;code&gt;positiveAction&lt;/code&gt; and &lt;code&gt;negativeAction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Any custom text actions - &lt;code&gt;footerCustomActions&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

Using the &lt;code&gt;SemanticPage&lt;/code&gt; facilitates the implementation of the SAP Fiori 2.0 design guidelines.

&lt;h3&gt;Responsive behavior&lt;/h3&gt;

The responsive behavior of the &lt;code&gt;SemanticPage&lt;/code&gt; depends on the behavior of the content that is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticToggleButton" type="n3:_SemanticToggleButtonType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A base class for the {@link sap.f.semantic.FavoriteAction} and {@link sap.f.semantic.FlagAction}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SendEmailAction" type="n3:_SendEmailActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;sendEmailAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in the share menu within its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SendMessageAction" type="n3:_SendMessageActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;sendMessageAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in the share menu within its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ShareInJamAction" type="n3:_ShareInJamActionType" substitutionGroup="n3:SemanticButton">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;shareInJamAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in the share menu within its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TitleMainAction" type="n3:_TitleMainActionType" substitutionGroup="n3:MainAction">
<xsd:annotation>
<xsd:documentation>A semantic-specific button, eligible for the &lt;code&gt;titleMainAction&lt;/code&gt; aggregation of the
{@link sap.f.semantic.SemanticPage} to be placed in its title.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.f.Avatar'-->
<xsd:complexType name="_AvatarType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="detailBox" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A &lt;code&gt;sap.m.LightBox&lt;/code&gt; instance, that will be opened automatically when the user interacts with the &lt;code&gt;Avatar&lt;/code&gt; control.

The &lt;code&gt;press&lt;/code&gt; event will still be fired.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:LightBox"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="src" type="n0:_URIType">
<xsd:annotation>
<xsd:documentation>Determines the path to the desired image or icon.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initials" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the displayed initials.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayShape" type="n3:_AvatarShapeType">
<xsd:annotation>
<xsd:documentation>Defines the shape of the &lt;code&gt;Avatar&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displaySize" type="n3:_AvatarSizeType">
<xsd:annotation>
<xsd:documentation>Sets a predefined display size of the &lt;code&gt;Avatar&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customDisplaySize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies custom display size of the &lt;code&gt;Avatar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It takes effect if the &lt;code&gt;displaySize&lt;/code&gt; property is set to &lt;code&gt;Custom&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customFontSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Specifies custom font size of the &lt;code&gt;Avatar&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It takes effect if the &lt;code&gt;displaySize&lt;/code&gt; property is set to &lt;code&gt;Custom&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imageFitType" type="n3:_AvatarImageFitTypeType">
<xsd:annotation>
<xsd:documentation>Specifies how an image would fit in the &lt;code&gt;Avatar&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the user selects the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.DynamicPage'-->
<xsd:complexType name="_DynamicPageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:DynamicPageTitle"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="header" minOccurs="0">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; header.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:DynamicPageHeader"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; content.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;DynamicPage&lt;/code&gt; floating footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="preserveHeaderStateOnScroll" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Preserves the current header state when scrolling.
For example, if the user expands the header by clicking on the title and then scrolls down the page, the header will remain expanded.

&lt;b&gt;Note:&lt;/b&gt; Based on internal rules, the value of the property is not always taken into account - for example,
when the control is rendered on tablet or mobile and the control`s title and header
are with height larger than the given threshold.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header is expanded.

The header can be also expanded/collapsed by user interaction,
which requires the property to be internally mutated by the control to reflect the changed state.

&lt;b&gt;Note:&lt;/b&gt; As of version 1.48, you can initialize the control in collapsed header state by setting this property to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toggleHeaderOnTitleClick" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can switch between the expanded/collapsed states of the
&lt;code&gt;DynamicPageHeader&lt;/code&gt; by clicking on the &lt;code&gt;DynamicPageTitle&lt;/code&gt;
or by using the expand/collapse visual indicators,
positioned at the bottom of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; and the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.
If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;DynamicPageTitle&lt;/code&gt; is not clickable,
the visual indicators are not available and the application
must provide other means for expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;, if necessary.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFooter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the footer is visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fitContent" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optimizes &lt;code&gt;DynamicPage&lt;/code&gt; responsiveness on small screens and behavior
when expanding/collapsing the &lt;code&gt;DynamicPageHeader&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; It is recommended to use this property when displaying content
of adaptive controls that stretch to fill the available space,
such as {@link sap.ui.table.Table} and  {@link sap.ui.table.AnalyticalTable}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.DynamicPageHeader'-->
<xsd:complexType name="_DynamicPageHeaderType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the header.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="pinnable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header is pinnable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.DynamicPageTitle'-->
<xsd:complexType name="_DynamicPageTitleType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="heading" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;heading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed in both expanded and collapsed (snapped) states of the header.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in both expanded and collapsed states of the header.

&lt;b&gt;Note:&lt;/b&gt; &lt;code&gt;heading&lt;/code&gt; is mutually exclusive with &lt;code&gt;snappedHeading&lt;/code&gt;
and &lt;code&gt;expandedHeading&lt;/code&gt;. If &lt;code&gt;heading&lt;/code&gt; is provided, both
&lt;code&gt;snappedHeading&lt;/code&gt; and &lt;code&gt;expandedHeading&lt;/code&gt; are ignored.
&lt;code&gt;heading&lt;/code&gt; is useful when the content of &lt;code&gt;snappedHeading&lt;/code&gt; and
&lt;code&gt;expandedHeading&lt;/code&gt; needs to be the same as it replaces them both.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="snappedHeading" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;snappedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed when the header is in collapsed (snapped) state only.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in collapsed state only.

&lt;b&gt;Note:&lt;/b&gt; In order for &lt;code&gt;snappedHeading&lt;/code&gt; to be taken into account,
&lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;snappedHeading&lt;/code&gt; with
&lt;code&gt;expandedHeading&lt;/code&gt; to switch content when the header switches state.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="expandedHeading" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;expandedHeading&lt;/code&gt; is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; left area
and is displayed when the header is in expanded state only.
Use this aggregation to display a title (or any other UI5 control that serves
as a heading) that has to be present in expanded state only.

&lt;b&gt;Note:&lt;/b&gt; In order for &lt;code&gt;expandedHeading&lt;/code&gt; to be taken into account,
&lt;code&gt;heading&lt;/code&gt; has to be empty. Combine &lt;code&gt;expandedHeading&lt;/code&gt; with
&lt;code&gt;snappedHeading&lt;/code&gt; to switch content when the header switches state.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="actions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;DynamicPageTitle&lt;/code&gt; actions.
&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;actions&lt;/code&gt; aggregation accepts any UI5 control, but it`s recommended to use controls,
suitable for {@link sap.m.Toolbar} and {@link sap.m.OverflowToolbar}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="navigationActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;DynamicPageTitle&lt;/code&gt; navigation actions.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;navigationActions&lt;/code&gt; position depends on the control size.
If the control size is 1280px or bigger, they are rendered right next to the &lt;code&gt;actions&lt;/code&gt;.
Otherwise, they are rendered in the top-right area, above the &lt;code&gt;actions&lt;/code&gt;.
If a large number of elements(buttons) are used, there could be visual degradations
as the space for the &lt;code&gt;navigationActions&lt;/code&gt; is limited.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n2:Button"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content is positioned in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; middle area
and displayed in both expanded and collapsed (snapped) states.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="snappedContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in collapsed (snapped) state.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="expandedContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content that is displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; in expanded state.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="breadcrumbs" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The breadcrumbs displayed in the &lt;code&gt;DynamicPageTitle&lt;/code&gt; top-left area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="primaryArea" type="n3:_DynamicPageTitleAreaType">
<xsd:annotation>
<xsd:documentation>Determines which of the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Begin, Middle) is primary.

&lt;b&gt;Note:&lt;/b&gt; The primary area is shrinking at lower rate, remaining visible as much as it can.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="areaShrinkRatio" type="n3:_DynamicPageTitleShrinkRatioType">
<xsd:annotation>
<xsd:documentation>Assigns shrinking ratio to the &lt;code&gt;DynamicPageTitle&lt;/code&gt; areas (Heading, Content, Actions).
The greater value a section has the faster it shrinks when the screen size is being reduced.

The value must be set in &lt;code&gt;Heading:Content:Actions&lt;/code&gt; format where Title, Content and Actions
are numbers greater than or equal to 0. If set to 0, the respective area will not shrink.

For example, if &lt;code&gt;2:7:1&lt;/code&gt; is set, the Content area will shrink seven times faster than
the Actions area. So, when all three areas have width of 500px and the available space is reduced by 100px
the Title area will reduced by 20px, the Content area - by 70px and the Actions area - by 10px.

If all the areas have assigned values greater than 1, the numbers are scaled so that at least one of them
is equal to 1. For example, value of &lt;code&gt;2:4:8&lt;/code&gt; is equal to &lt;code&gt;1:2:4&lt;/code&gt;.

&lt;Note:&gt; When this property is set the &lt;code&gt;primaryArea&lt;/code&gt; property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stateChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the title state (expanded/collapsed) is toggled by user interaction.
For example, scrolling, title clicking/tapping, using expand/collapse button.

Also fired when the developer toggles the title state by programmatically
changing the scroll position of the scrollbar of &lt;code&gt;DynamicPage&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.FlexibleColumnLayout'-->
<xsd:complexType name="_FlexibleColumnLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="beginColumnPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;Begin&lt;/code&gt; column.

These should be any control with page semantics.
These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="midColumnPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;Mid&lt;/code&gt; column.

These should be any control with page semantics.
These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="endColumnPages" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content entities between which the &lt;code&gt;FlexibleColumnLayout&lt;/code&gt; navigates in the &lt;code&gt;End&lt;/code&gt; column.

These should be any control with page semantics.
These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="layout" type="n3:_LayoutTypeType">
<xsd:annotation>
<xsd:documentation>Determines the layout of the control - number of visible columns and their relative sizes.

For more details, see {@link topic:3b9f760da5b64adf8db7f95247879086 Types of Layout} in the documentation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionNameBeginColumn" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;Begin&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the
transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionNameMidColumn" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;Mid&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the
transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultTransitionNameEndColumn" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the type of the transition/animation to apply for the &lt;code&gt;End&lt;/code&gt; column when &lt;code&gt;to()&lt;/code&gt; is called without defining the
transition to use. The default is &lt;code&gt;slide&lt;/code&gt;, other options are &lt;code&gt;fade&lt;/code&gt;, &lt;code&gt;flip&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and the names of any registered custom transitions.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n2:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Specifies the background color of the content. The visualization of the different options depends on the used theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialBeginColumnPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial &lt;code&gt;Begin&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialMidColumnPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial &lt;code&gt;Mid&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialEndColumnPage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the initial &lt;code&gt;End&lt;/code&gt; column page, which is displayed on application launch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="stateChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when there is a change in the &lt;code&gt;layout&lt;/code&gt; property or in the maximum number of columns that can be displayed at once.
&lt;br/&gt;&lt;/br&gt;
&lt;ul&gt;The interactions that may lead to a state change are:
 &lt;li&gt;the property &lt;code&gt;layout&lt;/code&gt; was changed indirectly by the user clicking a layout arrow&lt;/li&gt;
 &lt;li&gt;the user resized the browser beyond a breakpoint, thus changing the maximum number of columns that can be displayed at once.&lt;/li&gt;&lt;/ul&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;b&gt;Note: &lt;/b&gt;The event is suppressed while the control has zero width and will be fired the first time it gets a non-zero width</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beginColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Begin&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterBeginColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Begin&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="midColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Mid&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterMidColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;Mid&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="endColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;End&lt;/code&gt; column has been triggered. The transition (if any) to the new page has not started yet.
This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterEndColumnNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when navigation between two pages in the &lt;code&gt;End&lt;/code&gt; column has completed.

NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.AddAction'-->
<xsd:complexType name="_AddActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.CloseAction'-->
<xsd:complexType name="_CloseActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.CopyAction'-->
<xsd:complexType name="_CopyActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.DeleteAction'-->
<xsd:complexType name="_DeleteActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.DiscussInJamAction'-->
<xsd:complexType name="_DiscussInJamActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.EditAction'-->
<xsd:complexType name="_EditActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.ExitFullScreenAction'-->
<xsd:complexType name="_ExitFullScreenActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.FavoriteAction'-->
<xsd:complexType name="_FavoriteActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticToggleButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.FlagAction'-->
<xsd:complexType name="_FlagActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticToggleButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.FooterMainAction'-->
<xsd:complexType name="_FooterMainActionType">
<xsd:complexContent>
<xsd:extension base="n3:_MainActionType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.FullScreenAction'-->
<xsd:complexType name="_FullScreenActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.MainAction'-->
<xsd:complexType name="_MainActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines &lt;code&gt;MainAction&lt;/code&gt; text</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.MessagesIndicator'-->
<xsd:complexType name="_MessagesIndicatorType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.NegativeAction'-->
<xsd:complexType name="_NegativeActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines &lt;code&gt;NegativeAction&lt;/code&gt; text.
&lt;b&gt;Note:&lt;/b&gt; the default text is "Reject"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.PositiveAction'-->
<xsd:complexType name="_PositiveActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines &lt;code&gt;PositiveAction&lt;/code&gt; text.
&lt;b&gt;Note:&lt;/b&gt; the default text is "Accept"</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.PrintAction'-->
<xsd:complexType name="_PrintActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SemanticButton'-->
<xsd:complexType name="_SemanticButtonType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticControlType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the &lt;code&gt;SemanticButton&lt;/code&gt; is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the user selects the &lt;code&gt;SemanticButton&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SemanticControl'-->
<xsd:complexType name="_SemanticControlType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence/>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the &lt;code&gt;SemanticControl&lt;/code&gt; is visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SemanticPage'-->
<xsd:complexType name="_SemanticPageType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="titleHeading" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SemanticPage&lt;/code&gt; heading.

A typical usage is the &lt;code&gt;sap.m.Title&lt;/code&gt; or any other UI5 control,
that serves as a heading for an object.

&lt;b&gt;Note:&lt;/b&gt; The control will be placed in the title`s leftmost area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleBreadcrumbs" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SemanticPage&lt;/code&gt; breadcrumbs.

A typical usage is the &lt;code&gt;sap.m.Breadcrumbs&lt;/code&gt; control or any other UI5 control,
that implements the &lt;code&gt;sap.m.IBreadcrumbs&lt;/code&gt; interface.

&lt;b&gt;Note:&lt;/b&gt; The control will be placed in the title`s top-left area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleSnappedContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content, displayed in the title, when the header is in collapsed state.

&lt;b&gt;Note:&lt;/b&gt; The controls will be placed in the title`s left area,
under the &lt;code&gt;titleHeading&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleExpandedContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content,displayed in the title, when the header is in expanded state.

&lt;b&gt;Note:&lt;/b&gt; The controls will be placed in the title`s left area,
under the &lt;code&gt;titleHeading&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content, displayed in the title.

&lt;b&gt;Note:&lt;/b&gt; The controls will be placed in the middle area.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleMainAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;SemanticPage&lt;/code&gt; title as first action.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:TitleMainAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="editAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;TextActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:EditAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="deleteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;TextActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:DeleteAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="copyAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;TextActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:CopyAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="addAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;TextActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:AddAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="flagAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:FlagAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="favoriteAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:FavoriteAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="fullScreenAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:FullScreenAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="exitFullScreenAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:ExitFullScreenAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="closeAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:CloseAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleCustomTextActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;titleCustomTextActions&lt;/code&gt; are placed in the &lt;code&gt;TextActions&lt;/code&gt; area of the
&lt;code&gt;SemanticPage&lt;/code&gt; title, right before the semantic text action.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n2:Button"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleCustomIconActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;titleCustomIconActions&lt;/code&gt; are placed in the &lt;code&gt;IconActions&lt;/code&gt; area of the
&lt;code&gt;SemanticPage&lt;/code&gt; title, right before the semantic icon action.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n2:OverflowToolbarButton"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="headerContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The header content.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SemanticPage&lt;/code&gt; content.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footerMainAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;FooterRight&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt;
footer with default text value set to &lt;code&gt;Save&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:FooterMainAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="messagesIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;FooterLeft&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt;
footer as a first action.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:MessagesIndicator"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="draftIndicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;FooterLeft&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt;
footer as a second action.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:DraftIndicator"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="positiveAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;FooterRight&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt;
footer with default text value set to &lt;code&gt;Accept&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:PositiveAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="negativeAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;FooterRight&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt;
footer with default text value set to &lt;code&gt;Reject&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:NegativeAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footerCustomActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;footerCustomActions&lt;/code&gt; are placed in the &lt;code&gt;FooterRight&lt;/code&gt; area of the
&lt;code&gt;SemanticPage&lt;/code&gt; footer, right after the semantic footer actions.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n2:Button"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="discussInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:DiscussInJamAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="saveAsTileAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:Button"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="shareInJamAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:ShareInJamAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendMessageAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:SendMessageAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sendEmailAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:SendEmailAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="printAction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A semantic-specific button which is placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the &lt;code&gt;SemanticPage&lt;/code&gt; title.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n3:PrintAction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customShareActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;customShareActions&lt;/code&gt; are placed in the &lt;code&gt;ShareMenu&lt;/code&gt; area of the
&lt;code&gt;SemanticPage&lt;/code&gt; title, right after the semantic actions.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n2:Button"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="headerExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header is expanded.

The header can be also expanded/collapsed by user interaction,
which requires the property to be internally mutated by the control to reflect the changed state.

&lt;b&gt;Note:&lt;/b&gt; Please be aware, that initially collapsed header state is not supported,
so &lt;code&gt;headerExpanded&lt;/code&gt; should not be set to &lt;code&gt;false&lt;/code&gt; when initializing the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="headerPinnable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the header is pinnable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preserveHeaderStateOnScroll" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Preserves the current header state when scrolling.

For example, if the user expands the header by clicking on the title
and then scrolls down the page, the header will remain expanded.

&lt;b&gt;Note:&lt;/b&gt; Based on internal rules, the value of the property is not always taken into account - for example,
when the control is rendered on tablet or mobile and the title and the header
are with height larger than a given threshold.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toggleHeaderOnTitleClick" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the user can switch between the expanded/collapsed states of the
header by clicking on the title.

If set to &lt;code&gt;false&lt;/code&gt;, the title is not clickable and the application
must provide other means for expanding/collapsing the header, if necessary.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFooter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the footer is visible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titlePrimaryArea" type="n3:_DynamicPageTitleAreaType">
<xsd:annotation>
<xsd:documentation>Determines which of the title areas (Begin, Middle) is primary.

&lt;b&gt;Note:&lt;/b&gt; The primary area is shrinking at a lower rate, remaining visible as long as it can.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SemanticToggleButton'-->
<xsd:complexType name="_SemanticToggleButtonType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType">
<xsd:attribute name="pressed" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines the &lt;code&gt;SemanticToggleButton&lt;/code&gt; pressed state.

The property is set to &lt;code&gt;true&lt;/code&gt; when the control is toggled (default is &lt;code&gt;false&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SendEmailAction'-->
<xsd:complexType name="_SendEmailActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.SendMessageAction'-->
<xsd:complexType name="_SendMessageActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.ShareInJamAction'-->
<xsd:complexType name="_ShareInJamActionType">
<xsd:complexContent>
<xsd:extension base="n3:_SemanticButtonType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.f.semantic.TitleMainAction'-->
<xsd:complexType name="_TitleMainActionType">
<xsd:complexContent>
<xsd:extension base="n3:_MainActionType"/>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_AvatarImageFitTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Cover">
<xsd:annotation>
<xsd:documentation>The image is scaled to be large enough so that the control area is completely covered.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Contain">
<xsd:annotation>
<xsd:documentation>The image is scaled to the largest size so that both its width and height can fit in the control area.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_AvatarShapeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Circle">
<xsd:annotation>
<xsd:documentation>Circular shape.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Square">
<xsd:annotation>
<xsd:documentation>Square shape.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_AvatarSizeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="XS">
<xsd:annotation>
<xsd:documentation>Control size - 2rem
Font size - 0.75rem</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="S">
<xsd:annotation>
<xsd:documentation>Control size - 3rem
Font size - 1.125rem</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="M">
<xsd:annotation>
<xsd:documentation>Control size - 4rem
Font size - 1.625rem</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="L">
<xsd:annotation>
<xsd:documentation>Control size - 5rem
Font size - 2rem</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="XL">
<xsd:annotation>
<xsd:documentation>Control size - 7rem
Font size - 2.75rem</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Custom">
<xsd:annotation>
<xsd:documentation>Custom size</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_AvatarTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Icon">
<xsd:annotation>
<xsd:documentation>The displayed content is an icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Image">
<xsd:annotation>
<xsd:documentation>The displayed content is an image.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Initials">
<xsd:annotation>
<xsd:documentation>The displayed content is initials.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DynamicPageTitleAreaType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Begin">
<xsd:annotation>
<xsd:documentation>The area includes the &lt;code&gt;heading&lt;/code&gt;, &lt;code&gt;expandedContent&lt;/code&gt; and &lt;code&gt;snappedContent&lt;/code&gt; aggregations,
positioned in the beginning area of the {@link sap.f.DynamicPageTitle}.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Middle">
<xsd:annotation>
<xsd:documentation>The area includes the &lt;code&gt;content&lt;/code&gt; aggregation,
positioned in the middle part of the {@link sap.f.DynamicPageTitle}.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DynamicPageTitleShrinkRatioType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="([0-9]\d*)(\.\d)?:([0-9]\d*)(\.\d)?:([0-9]\d*)(\.\d)?"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_LayoutTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="OneColumn">
<xsd:annotation>
<xsd:documentation>Desktop: 100/-/-  only the Begin column is displayed

Tablet:  100/-/-  only the Begin column is displayed

Phone:   100/-/-  only the Begin column is displayed

Use to start with a master page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TwoColumnsBeginExpanded">
<xsd:annotation>
<xsd:documentation>Desktop: 67/33/-  Begin (expanded) and Mid columns are displayed

Tablet:  67/33/-  Begin (expanded) and Mid columns are displayed

Phone:   -/100/-  only the Mid column is displayed

Use to display both a master and a detail page when the user should focus on the master page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TwoColumnsMidExpanded">
<xsd:annotation>
<xsd:documentation>Desktop: 33/67/-  Begin and Mid (expanded) columns are displayed

Tablet:  33/67/-  Begin and Mid (expanded) columns are displayed

Phone:   -/100/-  only the Mid column is displayed

Use to display both a master and a detail page when the user should focus on the detail page.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MidColumnFullScreen">
<xsd:annotation>
<xsd:documentation>Desktop: -/100/-  only the Mid column is displayed

Tablet:  -/100/-  only the Mid column is displayed

Phone:   -/100/-  only the Mid column is displayed

Use to display a detail page only, when the user should focus entirely on it.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ThreeColumnsMidExpanded">
<xsd:annotation>
<xsd:documentation>Desktop: 25/50/25 Begin, Mid (expanded) and End columns are displayed

Tablet:  0/67/33  Mid (expanded) and End columns are displayed, Begin is accessible by a layout arrow

Phone:   -/-/100  only the End column is displayed

Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ThreeColumnsEndExpanded">
<xsd:annotation>
<xsd:documentation>Desktop: 25/25/50 Begin, Mid and End (expanded) columns are displayed

Tablet:  0/33/67  Mid and End (expanded) columns are displayed, Begin is accessible by layout arrows

Phone:   -/-/100  (only the End column is displayed)

Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail-detail.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ThreeColumnsMidExpandedEndHidden">
<xsd:annotation>
<xsd:documentation>Desktop: 33/67/0  Begin and Mid (expanded) columns are displayed, End is accessible by a layout arrow

Tablet:  33/67/0  Begin and Mid (expanded) columns are displayed, End is accessible by a layout arrow

Phone:   -/-/100  only the End column is displayed

Use to display the master and detail pages when the user should focus on the detail.
The detail-detail is still loaded and easily accessible with a layout arrow.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ThreeColumnsBeginExpandedEndHidden">
<xsd:annotation>
<xsd:documentation>Desktop: 67/33/0  Begin (expanded) and Mid columns are displayed, End is accessible by layout arrows

Tablet:  67/33/0  Begin (expanded) and Mid columns are displayed, End is accessible by layout arrows

Phone:   -/-/100  only the End column is displayed

Use to display the master and detail pages when the user should focus on the master.
The detail-detail is still loaded and easily accessible with layout arrows.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="EndColumnFullScreen">
<xsd:annotation>
<xsd:documentation>Desktop: -/-/100  only the End column is displayed

Tablet:  -/-/100  only the End column is displayed

Phone:   -/-/100  only the End column is displayed

Use to display a detail-detail page only, when the user should focus entirely on it.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
