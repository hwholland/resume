{"!define":{"sap.ui.layout.form.GridElementData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridElementData"},"sap.ui.layout.Grid_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Grid"},"sap.ui.layout.BlockLayoutCell":{"setTitleLevel":{"!description":"Sets a new value for property {@link #getTitleLevel titleLevel}.\n\nDefines the aria level of the title This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Auto<\/code>.","!type":"fn(sTitleLevel: sap.ui.core.TitleLevel) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"sTitleLevel":"type: sap.ui.core.TitleLevel, description: New value for property <code>titleLevel<\/code>"},"!static":false},"getBackgroundColorSet":{"!description":"Gets current value of property {@link #getBackgroundColorSet backgroundColorSet}.\n\nThe Background color set from which the background color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorSet should be used only in combination with backgroundColorShade.","!type":"fn() -> sap.ui.layout.BlockLayoutCellColorSet","!category":"function","!static":false},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"},"!static":false},"!module":"sap/ui/layout/BlockLayoutCell","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.BlockLayoutCell","!category":"function","!static":false},"!category":"class","getTitle":{"!description":"Gets current value of property {@link #getTitle title}.\n\nDefines the title of the cell","!type":"fn() -> String","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nDefines the width of the cell. Depending on the context of the cell - whether it's in scrollable, or non scrollable row, this property is interpreted in two different ways. If the cell is placed inside a scrollable row - this property defines the width of the cell in percentages. If no value is provided - the default is 40%. If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell compared to the whole row. <b>For example:<\/b> If you have 2 cells, each with width of 1, this means that they should be of equal size, and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells, one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first cell will have a width of 25%, the second - 75%. According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nDefines the width of the cell. Depending on the context of the cell - whether it's in scrollable, or non scrollable row, this property is interpreted in two different ways. If the cell is placed inside a scrollable row - this property defines the width of the cell in percentages. If no value is provided - the default is 40%. If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell compared to the whole row. <b>For example:<\/b> If you have 2 cells, each with width of 1, this means that they should be of equal size, and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells, one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first cell will have a width of 25%, the second - 75%. According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iWidth: Number) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"iWidth":"type: int, description: New value for property <code>width<\/code>"},"!static":false},"setBackgroundColorSet":{"!description":"Sets a new value for property {@link #getBackgroundColorSet backgroundColorSet}.\n\nThe Background color set from which the background color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorSet should be used only in combination with backgroundColorShade.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sBackgroundColorSet: sap.ui.layout.BlockLayoutCellColorSet) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"sBackgroundColorSet":"type: sap.ui.layout.BlockLayoutCellColorSet, description: New value for property <code>backgroundColorSet<\/code>"},"!static":false},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"},"!static":false},"setBackgroundColorShade":{"!description":"Sets a new value for property {@link #getBackgroundColorShade backgroundColorShade}.\n\nThe index of the background color in the color set from which the color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorShade should be used only in combination with backgroundColorSet.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sBackgroundColorShade: sap.ui.layout.BlockLayoutCellColorShade) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"sBackgroundColorShade":"type: sap.ui.layout.BlockLayoutCellColorShade, description: New value for property <code>backgroundColorShade<\/code>"},"!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nThe content to be included inside the cell","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new BlockLayoutCell.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTitle title} : string<\/li>\n<li>{@link #getTitleAlignment titleAlignment} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: Auto)<\/li>\n<li>{@link #getWidth width} : int (default: 0)<\/li>\n<li>{@link #getBackgroundColorSet backgroundColorSet} : sap.ui.layout.BlockLayoutCellColorSet<\/li>\n<li>{@link #getBackgroundColorShade backgroundColorShade} : sap.ui.layout.BlockLayoutCellColorShade<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getTitleLevel":{"!description":"Gets current value of property {@link #getTitleLevel titleLevel}.\n\nDefines the aria level of the title This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\n\nDefault value is <code>Auto<\/code>.","!type":"fn() -> sap.ui.core.TitleLevel","!category":"function","!static":false},"getTitleAlignment":{"!description":"Gets current value of property {@link #getTitleAlignment titleAlignment}.\n\nDefines the alignment of the cell title\n\nDefault value is <code>Begin<\/code>.","!type":"fn() -> sap.ui.core.HorizontalAlign","!category":"function","!static":false},"getBackgroundColorShade":{"!description":"Gets current value of property {@link #getBackgroundColorShade backgroundColorShade}.\n\nThe index of the background color in the color set from which the color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorShade should be used only in combination with backgroundColorSet.","!type":"fn() -> sap.ui.layout.BlockLayoutCellColorShade","!category":"function","!static":false},"!description":"The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls. The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.","insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"setTitle":{"!description":"Sets a new value for property {@link #getTitle title}.\n\nDefines the title of the cell\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sTitle: String) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"sTitle":"type: string, description: New value for property <code>title<\/code>"},"!static":false},"setTitleAlignment":{"!description":"Sets a new value for property {@link #getTitleAlignment titleAlignment}.\n\nDefines the alignment of the cell title\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Begin<\/code>.","!type":"fn(sTitleAlignment: sap.ui.core.HorizontalAlign) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"sTitleAlignment":"type: sap.ui.core.HorizontalAlign, description: New value for property <code>titleAlignment<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayoutCell.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Control","!helpDescription":"The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls. The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow."},"sap.ui.layout.form.Form_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.Form"},"sap.ui.layout.Grid":{"getDefaultIndent":{"!description":"Gets current value of property {@link #getDefaultIndent defaultIndent}.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL0 L0 M0 S0<\/code>.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function","!static":false},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"},"!static":false},"!module":"sap/ui/layout/Grid","getPosition":{"!description":"Gets current value of property {@link #getPosition position}.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nDefault value is <code>Left<\/code>.","!type":"fn() -> sap.ui.layout.GridPosition","!category":"function","!static":false},"setHSpacing":{"!description":"Sets a new value for property {@link #getHSpacing hSpacing}.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(fHSpacing: Number) -> sap.ui.layout.Grid","!category":"function","parameters":{"fHSpacing":"type: float, description: New value for property <code>hSpacing<\/code>"},"!static":false},"getContainerQuery":{"!description":"Gets current value of property {@link #getContainerQuery containerQuery}.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.Grid","!category":"function","!static":false},"setDefaultSpan":{"!description":"Sets a new value for property {@link #getDefaultSpan defaultSpan}.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>XL3 L3 M6 S12<\/code>.","!type":"fn(sDefaultSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.Grid","!category":"function","parameters":{"sDefaultSpan":"type: sap.ui.layout.GridSpan, description: New value for property <code>defaultSpan<\/code>"},"!static":false},"setContainerQuery":{"!description":"Sets a new value for property {@link #getContainerQuery containerQuery}.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.Grid","!category":"function","parameters":{"bContainerQuery":"type: boolean, description: New value for property <code>containerQuery<\/code>"},"!static":false},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Grid","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"getAccessibilityInfo":{"!type":"fn()","!category":"function","!static":false},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.Grid","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"},"!static":false},"setVSpacing":{"!description":"Sets a new value for property {@link #getVSpacing vSpacing}.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(fVSpacing: Number) -> sap.ui.layout.Grid","!category":"function","parameters":{"fVSpacing":"type: float, description: New value for property <code>vSpacing<\/code>"},"!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nControls that are placed into Grid layout.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setPosition":{"!description":"Sets a new value for property {@link #getPosition position}.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Left<\/code>.","!type":"fn(sPosition: sap.ui.layout.GridPosition) -> sap.ui.layout.Grid","!category":"function","parameters":{"sPosition":"type: sap.ui.layout.GridPosition, description: New value for property <code>position<\/code>"},"!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Grid.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getVSpacing vSpacing} : float (default: 1)<\/li>\n<li>{@link #getHSpacing hSpacing} : float (default: 1)<\/li>\n<li>{@link #getPosition position} : sap.ui.layout.GridPosition (default: Left)<\/li>\n<li>{@link #getDefaultSpan defaultSpan} : sap.ui.layout.GridSpan (default: XL3 L3 M6 S12)<\/li>\n<li>{@link #getDefaultIndent defaultIndent} : sap.ui.layout.GridIndent (default: XL0 L0 M0 S0)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getHSpacing":{"!description":"Gets current value of property {@link #getHSpacing hSpacing}.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getVSpacing":{"!description":"Gets current value of property {@link #getVSpacing vSpacing}.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.Grid","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"!description":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Grid","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"getDefaultSpan":{"!description":"Gets current value of property {@link #getDefaultSpan defaultSpan}.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL3 L3 M6 S12<\/code>.","!type":"fn() -> sap.ui.layout.GridSpan","!category":"function","!static":false},"setDefaultIndent":{"!description":"Sets a new value for property {@link #getDefaultIndent defaultIndent}.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>XL0 L0 M0 S0<\/code>.","!type":"fn(sDefaultIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.Grid","!category":"function","parameters":{"sDefaultIndent":"type: sap.ui.layout.GridIndent, description: New value for property <code>defaultIndent<\/code>"},"!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Grid.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.BlockLayout":{"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow) -> sap.ui.layout.BlockLayout","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: The content to add; if empty, nothing is inserted"},"!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nThe Rows to be included in the content of the control","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.layout.BlockLayoutRow<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.layout.BlockLayoutRow) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.layout.BlockLayoutRow, description: The content to remove or its index or id"},"!static":false},"!constructorDescription":"Constructor for a new BlockLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackground background} : sap.ui.layout.BlockBackgroundType (default: Default)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutRow[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/BlockLayout","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.BlockLayout","!category":"function","!static":false},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.layout.BlockLayoutRow, iIndex: Number) -> sap.ui.layout.BlockLayout","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutRow, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"!description":"The BlockLayout is used to display several objects in a section-based manner. <h3>Overview<\/h3> The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements. By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements. <h3>Structure<\/h3> The BlockLayout comes in five predefined types for background colors: <ul> <li>Layout only (default) - a layout scheme and no background colors<\/li> <li>Bright - a layout scheme with bright colors<\/li> <li>Accent - a layout scheme with four pre-defined color sets<\/li> <li>Dashboard - a layout scheme with additional borders and no background colors<\/li> <li>Mixed - a layout scheme with a mix of light and dark colors<\/li> <\/ul> Background colors are attached directly to the blocks of the layout.\n\nSpecial full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\n\n<b>Note:<\/b> With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 10 pre-defined color sets, each with 4 different shades. The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set <code>backgroundColorSet<\/code> (main color) and <code>backgroundColorShade<\/code> (shade).\n\n<h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>You want to create a catalogue-like page with sections of blocks.<\/li> <li>The BlockLayout is intended for developing administrative tools and applications.<\/li> <\/ul> <h4>When not to use<\/h4> <ul> <li>You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPageLayout object page} or {@link sap.f.DynamicPage dynamic page} instead.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.<\/li> <li> On small screens all blocks will wrap to a single scrollable column<\/li> <\/ul>","setBackground":{"!description":"Changes background type","!type":"fn(sNewBackground: String) -> sap.ui.layout.BlockLayout","!category":"function","parameters":{"sNewBackground":"type: string, description: Background's style of type sap.ui.layout.BlockBackgroundType"},"!static":false},"!category":"class","getBackground":{"!description":"Gets current value of property {@link #getBackground background}.\n\nDetermines the background used for the Layout\n\nDefault value is <code>Default<\/code>.","!type":"fn() -> sap.ui.layout.BlockBackgroundType","!category":"function","!static":false},"!helpDescription":"The BlockLayout is used to display several objects in a section-based manner. <h3>Overview<\/h3> The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements. By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements. <h3>Structure<\/h3> The BlockLayout comes in five predefined types for background colors: <ul> <li>Layout only (default) - a layout scheme and no background colors<\/li> <li>Bright - a layout scheme with bright colors<\/li> <li>Accent - a layout scheme with four pre-defined color sets<\/li> <li>Dashboard - a layout scheme with additional borders and no background colors<\/li> <li>Mixed - a layout scheme with a mix of light and dark colors<\/li> <\/ul> Background colors are attached directly to the blocks of the layout.\n\nSpecial full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\n\n<b>Note:<\/b> With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 10 pre-defined color sets, each with 4 different shades. The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set <code>backgroundColorSet<\/code> (main color) and <code>backgroundColorShade<\/code> (shade).\n\n<h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>You want to create a catalogue-like page with sections of blocks.<\/li> <li>The BlockLayout is intended for developing administrative tools and applications.<\/li> <\/ul> <h4>When not to use<\/h4> <ul> <li>You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPageLayout object page} or {@link sap.f.DynamicPage dynamic page} instead.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.<\/li> <li> On small screens all blocks will wrap to a single scrollable column<\/li> <\/ul>","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.SplitPane_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.SplitPane"},"sap.ui.layout.VerticalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.VerticalLayout"},"sap.ui.layout.form.FormLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormLayout"},"sap.ui.layout.SideContentPosition":{"End":{"!description":"The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode.","!type":"String","!category":"enum"},"!description":"The position of the side content - End (default) and Begin.","!category":"static class","!module":"sap/ui/layout/library","Begin":{"!description":"The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode.","!type":"String","!category":"enum"}},"sap.ui.layout.form.ResponsiveLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveLayout"},"sap.ui.layout.form.SimpleForm":{"getBreakpointL":{"!description":"Gets current value of property {@link #getBreakpointL breakpointL}.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>1024<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"getBreakpointM":{"!description":"Gets current value of property {@link #getBreakpointM breakpointM}.\n\nBreakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>600<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!module":"sap/ui/layout/form/SimpleForm","setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content. If set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"},"!static":false},"setColumnsM":{"!description":"Sets a new value for property {@link #getColumnsM columnsM}.\n\nForm columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iColumnsM":"type: int, description: New value for property <code>columnsM<\/code>"},"!static":false},"getColumnsL":{"!description":"Gets current value of property {@link #getColumnsL columnsL}.\n\nForm columns for large size. The number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setColumnsL":{"!description":"Sets a new value for property {@link #getColumnsL columnsL}.\n\nForm columns for large size. The number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iColumnsL":"type: int, description: New value for property <code>columnsL<\/code>"},"!static":false},"getColumnsM":{"!description":"Gets current value of property {@link #getColumnsM columnsM}.\n\nForm columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getAdjustLabelSpan":{"!description":"Gets current value of property {@link #getAdjustLabelSpan adjustLabelSpan}.\n\nIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row. If only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label. This is the same for medium and large <code>Forms<\/code>. This is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code> (because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size. The number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getTitle":{"!description":"Gets content of aggregation {@link #getTitle title}.\n\nTitle element of the <code>SimpleForm<\/code>. Can either be a <code>Title<\/code> element, or a string.","!type":"fn() -> sap.ui.core.Title | String","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of the form.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setBreakpointXL":{"!description":"Sets a new value for property {@link #getBreakpointXL breakpointXL}.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1440<\/code>.","!type":"fn(iBreakpointXL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iBreakpointXL":"type: int, description: New value for property <code>breakpointXL<\/code>"},"!static":false},"getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content. If set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!type":"fn() -> Boolean","!category":"function","!static":false},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Element) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"oContent":"type: sap.ui.core.Element, description: The content to add; if empty, nothing is inserted"},"!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nThe content of the form is structured in the following way: <ul> <li>Add a <code>Title<\/code> or <code>Toolbar<\/code> control to start a new group (<code>FormContainer<\/code>).<\/li> <li>Add a <code>Label<\/code> control to start a new row (<code>FormElement<\/code>).<\/li> <li>Add controls as input fields, text fields or other as needed.<\/li> <li>Use <code>LayoutData<\/code> to influence the layout for special cases in the single controls. For example, if a <code>ResponsiveLayout<\/code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide. If your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData<\/code> to them via <code>setLayoutData<\/code> method. Ensure that the sum of the weights in the <code>ResponsiveFlowLayoutData<\/code> is not more than 5, as this is the total width of the input control part of each form row.<\/li> <\/ul> Example for a row where the <code>Input<\/code> weight 4 and the second <code>Input<\/code> weight 1 (using <code>ResponsiveLayout<\/code>): <pre>\nnew sap.m.Label({text:\"Label\"});\nnew sap.m.Input({value:\"Weight 4\", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),\nnew sap.m.Input({value:\"Weight 1\", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),\n<\/pre>\n\nFor example, if a <code>ResponsiveGridLayout<\/code> is used as a layout, there are 12 cells in one row. Depending on the screen size the labels use the defined <code>labelSpan<\/code>. The remaining cells are used for the fields (and <code>emptySpan<\/code> if defined). The available cells are distributed to all fields in the row. If one field should use a fixed number of cells you can add <code>sap.ui.layout.GridData<\/code> to them via <code>setLayoutData<\/code> method. If there are additional fields in the row they will get the remaining cells. <\/ul> Example for a row with two <code>Input<\/code> controls where one uses four cells on small screens, one cell on medium screens and 2 cells on larger screens (using <code>ResponsiveGridLayout<\/code>): <pre>\nnew sap.m.Label({text:\"Label\"});\nnew sap.m.Input({value:\"auto size\"}),\nnew sap.m.Input({value:\"fix size\", layoutData: new sap.ui.layout.GridData({span: \"XL1 L1 M2 S4\"})}),\n<\/pre>\n\n<b>Note:<\/b> Do not put any layout controls in here. This could destroy the visual layout, keyboard support and screen-reader support.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getColumnsXL":{"!description":"Gets current value of property {@link #getColumnsXL columnsXL}.\n\nForm columns for extra large size. The number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setBackgroundDesign":{"!description":"Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.\n\nSpecifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Translucent<\/code>.","!type":"fn(sBackgroundDesign: sap.ui.layout.BackgroundDesign) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"sBackgroundDesign":"type: sap.ui.layout.BackgroundDesign, description: New value for property <code>backgroundDesign<\/code>"},"!static":false},"getMinWidth":{"!description":"Gets current value of property {@link #getMinWidth minWidth}.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>.\n\nIf the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>). The default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setBreakpointM":{"!description":"Sets a new value for property {@link #getBreakpointM breakpointM}.\n\nBreakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>600<\/code>.","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iBreakpointM":"type: int, description: New value for property <code>breakpointM<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new sap.ui.layout.form.SimpleForm.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMaxContainerCols maxContainerCols} : int (default: 2)<\/li>\n<li>{@link #getMinWidth minWidth} : int (default: -1)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean<\/li>\n<li>{@link #getLabelMinWidth labelMinWidth} : int (default: 192)<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.SimpleFormLayout (default: ResponsiveLayout)<\/li>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Element[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getToolbar":{"!description":"Gets content of aggregation {@link #getToolbar toolbar}.\n\nToolbar of the <code>SimpleForm<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored. If a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>. In this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!type":"fn() -> sap.ui.core.Toolbar","!category":"function","!static":false},"setBreakpointL":{"!description":"Sets a new value for property {@link #getBreakpointL breakpointL}.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1024<\/code>.","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iBreakpointL":"type: int, description: New value for property <code>breakpointL<\/code>"},"!static":false},"setToolbar":{"!description":"Sets the aggregated {@link #getToolbar toolbar}.","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"},"!static":false},"destroyTitle":{"!description":"Destroys the title in the aggregation {@link #getTitle title}.","!type":"fn() -> sap.ui.layout.form.SimpleForm","!category":"function","!static":false},"setMaxContainerCols":{"!description":"Sets a new value for property {@link #getMaxContainerCols maxContainerCols}.\n\nThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iMaxContainerCols: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iMaxContainerCols":"type: int, description: New value for property <code>maxContainerCols<\/code>"},"!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"getLabelSpanS":{"!description":"Gets current value of property {@link #getLabelSpanS labelSpanS}.\n\nDefault span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>12<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setTitle":{"!description":"Sets the aggregated {@link #getTitle title}.","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"},"!static":false},"getLabelSpanL":{"!description":"Gets current value of property {@link #getLabelSpanL labelSpanL}.\n\nDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>4<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getLabelSpanM":{"!description":"Gets current value of property {@link #getLabelSpanM labelSpanM}.\n\nDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!helpDescription":"The <code>SimpleForm<\/code> provides an easy-to-use API to create simple forms. Inside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed. <ul> <li>A new <code>Title<\/code> or <code>Toolbar<\/code> starts a new group (<code>FormContainer<\/code>) in the form.<\/li> <li>A new <code>Label<\/code> starts a new row (<code>FormElement<\/code>) in the form.<\/li> <li>All other controls will be assigned to the row (<code>FormElement<\/code>) that started with the last label.<\/li> <\/ul> Use <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","!proto":"sap.ui.core.Control","getSingleContainerFullSize":{"!description":"Gets current value of property {@link #getSingleContainerFullSize singleContainerFullSize}.\n\nIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set, the <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>. In this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setSingleContainerFullSize":{"!description":"Sets a new value for property {@link #getSingleContainerFullSize singleContainerFullSize}.\n\nIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set, the <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>. In this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bSingleContainerFullSize: Boolean) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"bSingleContainerFullSize":"type: boolean, description: New value for property <code>singleContainerFullSize<\/code>"},"!static":false},"getMaxContainerCols":{"!description":"Gets current value of property {@link #getMaxContainerCols maxContainerCols}.\n\nThe maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setEmptySpanL":{"!description":"Sets a new value for property {@link #getEmptySpanL emptySpanL}.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iEmptySpanL":"type: int, description: New value for property <code>emptySpanL<\/code>"},"!static":false},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Element) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Element, description: The content whose index is looked for"},"!static":false},"setEmptySpanXL":{"!description":"Sets a new value for property {@link #getEmptySpanXL emptySpanXL}.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iEmptySpanXL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iEmptySpanXL":"type: int, description: New value for property <code>emptySpanXL<\/code>"},"!static":false},"getBreakpointXL":{"!description":"Gets current value of property {@link #getBreakpointXL breakpointXL}.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>1440<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.core.Element) -> sap.ui.core.Element","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.core.Element, description: The content to remove or its index or id"},"!static":false},"setMinWidth":{"!description":"Sets a new value for property {@link #getMinWidth minWidth}.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm<\/code>.\n\nIf the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>). The default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iMinWidth: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iMinWidth":"type: int, description: New value for property <code>minWidth<\/code>"},"!static":false},"setLayout":{"!description":"Sets a new value for property {@link #getLayout layout}.\n\nThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>ResponsiveLayout<\/code>.","!type":"fn(sLayout: sap.ui.layout.form.SimpleFormLayout) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"sLayout":"type: sap.ui.layout.form.SimpleFormLayout, description: New value for property <code>layout<\/code>"},"!static":false},"setEmptySpanM":{"!description":"Sets a new value for property {@link #getEmptySpanM emptySpanM}.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iEmptySpanM":"type: int, description: New value for property <code>emptySpanM<\/code>"},"!static":false},"setEmptySpanS":{"!description":"Sets a new value for property {@link #getEmptySpanS emptySpanS}.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iEmptySpanS":"type: int, description: New value for property <code>emptySpanS<\/code>"},"!static":false},"setColumnsXL":{"!description":"Sets a new value for property {@link #getColumnsXL columnsXL}.\n\nForm columns for extra large size. The number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iColumnsXL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iColumnsXL":"type: int, description: New value for property <code>columnsXL<\/code>"},"!static":false},"getLabelMinWidth":{"!description":"Gets current value of property {@link #getLabelMinWidth labelMinWidth}.\n\nSpecifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nDefault value is <code>192<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.form.SimpleForm","!category":"function","!static":false},"setLabelSpanM":{"!description":"Sets a new value for property {@link #getLabelSpanM labelSpanM}.\n\nDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iLabelSpanM":"type: int, description: New value for property <code>labelSpanM<\/code>"},"!static":false},"!category":"class","setLabelSpanL":{"!description":"Sets a new value for property {@link #getLabelSpanL labelSpanL}.\n\nDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>4<\/code>.","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iLabelSpanL":"type: int, description: New value for property <code>labelSpanL<\/code>"},"!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of the form.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"setLabelMinWidth":{"!description":"Sets a new value for property {@link #getLabelMinWidth labelMinWidth}.\n\nSpecifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>192<\/code>.","!type":"fn(iLabelMinWidth: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iLabelMinWidth":"type: int, description: New value for property <code>labelMinWidth<\/code>"},"!static":false},"getEmptySpanXL":{"!description":"Gets current value of property {@link #getEmptySpanXL emptySpanXL}.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setLabelSpanS":{"!description":"Sets a new value for property {@link #getLabelSpanS labelSpanS}.\n\nDefault span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>12<\/code>.","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iLabelSpanS":"type: int, description: New value for property <code>labelSpanS<\/code>"},"!static":false},"getLabelSpanXL":{"!description":"Gets current value of property {@link #getLabelSpanXL labelSpanXL}.\n\nDefault span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getEmptySpanS":{"!description":"Gets current value of property {@link #getEmptySpanS emptySpanS}.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setAdjustLabelSpan":{"!description":"Sets a new value for property {@link #getAdjustLabelSpan adjustLabelSpan}.\n\nIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row. If only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label. This is the same for medium and large <code>Forms<\/code>. This is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code> (because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size. The number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bAdjustLabelSpan: Boolean) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"bAdjustLabelSpan":"type: boolean, description: New value for property <code>adjustLabelSpan<\/code>"},"!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.","!type":"fn() -> sap.ui.layout.form.SimpleForm","!category":"function","!static":false},"!description":"The <code>SimpleForm<\/code> provides an easy-to-use API to create simple forms. Inside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed. <ul> <li>A new <code>Title<\/code> or <code>Toolbar<\/code> starts a new group (<code>FormContainer<\/code>) in the form.<\/li> <li>A new <code>Label<\/code> starts a new row (<code>FormElement<\/code>) in the form.<\/li> <li>All other controls will be assigned to the row (<code>FormElement<\/code>) that started with the last label.<\/li> <\/ul> Use <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Element, iIndex: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"oContent":"type: sap.ui.core.Element, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"setLabelSpanXL":{"!description":"Sets a new value for property {@link #getLabelSpanXL labelSpanXL}.\n\nDefault span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iLabelSpanXL: Number) -> sap.ui.layout.form.SimpleForm","!category":"function","parameters":{"iLabelSpanXL":"type: int, description: New value for property <code>labelSpanXL<\/code>"},"!static":false},"getEmptySpanM":{"!description":"Gets current value of property {@link #getEmptySpanM emptySpanM}.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getLayout":{"!description":"Gets current value of property {@link #getLayout layout}.\n\nThe <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.\n\nDefault value is <code>ResponsiveLayout<\/code>.","!type":"fn() -> sap.ui.layout.form.SimpleFormLayout","!category":"function","!static":false},"getEmptySpanL":{"!description":"Gets current value of property {@link #getEmptySpanL emptySpanL}.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getBackgroundDesign":{"!description":"Gets current value of property {@link #getBackgroundDesign backgroundDesign}.\n\nSpecifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.\n\nDefault value is <code>Translucent<\/code>.","!type":"fn() -> sap.ui.layout.BackgroundDesign","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.SimpleForm.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.ResponsiveFlowLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayoutData"},"sap.ui":{"layout":"sap.ui.layout","!category":"namespace"},"sap.ui.layout.form.SimpleForm_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.SimpleForm"},"sap.ui.layout.GridIndent":{"!description":"A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large medium small.","!category":"namespace","!module":"sap/ui/layout/library","!helpDescription":"A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large medium small."},"sap.ui.layout.form.ResponsiveGridLayout":{"getSingleContainerFullSize":{"!description":"Gets current value of property {@link #getSingleContainerFullSize singleContainerFullSize}.\n\nIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set, the <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>. In this case the properties <code>columnsXL<\/code>, <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setSingleContainerFullSize":{"!description":"Sets a new value for property {@link #getSingleContainerFullSize singleContainerFullSize}.\n\nIf the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set, the <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>. In this case the properties <code>columnsXL<\/code>, <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bSingleContainerFullSize: Boolean) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"bSingleContainerFullSize":"type: boolean, description: New value for property <code>singleContainerFullSize<\/code>"},"!static":false},"setEmptySpanL":{"!description":"Sets a new value for property {@link #getEmptySpanL emptySpanL}.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iEmptySpanL":"type: int, description: New value for property <code>emptySpanL<\/code>"},"!static":false},"getBreakpointL":{"!description":"Gets current value of property {@link #getBreakpointL breakpointL}.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nDefault value is <code>1024<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getBreakpointM":{"!description":"Gets current value of property {@link #getBreakpointM breakpointM}.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nDefault value is <code>600<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setEmptySpanXL":{"!description":"Sets a new value for property {@link #getEmptySpanXL emptySpanXL}.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iEmptySpanXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iEmptySpanXL":"type: int, description: New value for property <code>emptySpanXL<\/code>"},"!static":false},"getBreakpointXL":{"!description":"Gets current value of property {@link #getBreakpointXL breakpointXL}.\n\nBreakpoint (in pixel) between large size and extra large (XL) size.\n\nDefault value is <code>1440<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setEmptySpanM":{"!description":"Sets a new value for property {@link #getEmptySpanM emptySpanM}.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iEmptySpanM":"type: int, description: New value for property <code>emptySpanM<\/code>"},"!static":false},"!module":"sap/ui/layout/form/ResponsiveGridLayout","setEmptySpanS":{"!description":"Sets a new value for property {@link #getEmptySpanS emptySpanS}.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iEmptySpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iEmptySpanS":"type: int, description: New value for property <code>emptySpanS<\/code>"},"!static":false},"setColumnsXL":{"!description":"Sets a new value for property {@link #getColumnsXL columnsXL}.\n\nNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size. <b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iColumnsXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iColumnsXL":"type: int, description: New value for property <code>columnsXL<\/code>"},"!static":false},"setColumnsM":{"!description":"Sets a new value for property {@link #getColumnsM columnsM}.\n\nNumber of columns for medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iColumnsM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iColumnsM":"type: int, description: New value for property <code>columnsM<\/code>"},"!static":false},"getColumnsL":{"!description":"Gets current value of property {@link #getColumnsL columnsL}.\n\nNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setColumnsL":{"!description":"Sets a new value for property {@link #getColumnsL columnsL}.\n\nNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iColumnsL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iColumnsL":"type: int, description: New value for property <code>columnsL<\/code>"},"!static":false},"getColumnsM":{"!description":"Gets current value of property {@link #getColumnsM columnsM}.\n\nNumber of columns for medium size.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setLabelSpanM":{"!description":"Sets a new value for property {@link #getLabelSpanM labelSpanM}.\n\nDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>2<\/code>.","!type":"fn(iLabelSpanM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iLabelSpanM":"type: int, description: New value for property <code>labelSpanM<\/code>"},"!static":false},"!category":"class","setLabelSpanL":{"!description":"Sets a new value for property {@link #getLabelSpanL labelSpanL}.\n\nDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>4<\/code>.","!type":"fn(iLabelSpanL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iLabelSpanL":"type: int, description: New value for property <code>labelSpanL<\/code>"},"!static":false},"getAdjustLabelSpan":{"!description":"Gets current value of property {@link #getAdjustLabelSpan adjustLabelSpan}.\n\nIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row. If only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label. This is the same for medium and large <code>Forms<\/code>. This is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code> (because every <code>FormContainer<\/code> has its own <code>Grid<\/code> inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size. The number of <code>FormContainers<\/code> doesn't matter in this case.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setBreakpointXL":{"!description":"Sets a new value for property {@link #getBreakpointXL breakpointXL}.\n\nBreakpoint (in pixel) between large size and extra large (XL) size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1440<\/code>.","!type":"fn(iBreakpointXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iBreakpointXL":"type: int, description: New value for property <code>breakpointXL<\/code>"},"!static":false},"getEmptySpanXL":{"!description":"Gets current value of property {@link #getEmptySpanXL emptySpanXL}.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setLabelSpanS":{"!description":"Sets a new value for property {@link #getLabelSpanS labelSpanS}.\n\nDefault span for labels in small size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>12<\/code>.","!type":"fn(iLabelSpanS: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iLabelSpanS":"type: int, description: New value for property <code>labelSpanS<\/code>"},"!static":false},"getLabelSpanXL":{"!description":"Gets current value of property {@link #getLabelSpanXL labelSpanXL}.\n\nDefault span for labels in extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getColumnsXL":{"!description":"Gets current value of property {@link #getColumnsXL columnsXL}.\n\nNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size. <b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getEmptySpanS":{"!description":"Gets current value of property {@link #getEmptySpanS emptySpanS}.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setBreakpointM":{"!description":"Sets a new value for property {@link #getBreakpointM breakpointM}.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>600<\/code>.","!type":"fn(iBreakpointM: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iBreakpointM":"type: int, description: New value for property <code>breakpointM<\/code>"},"!static":false},"setAdjustLabelSpan":{"!description":"Sets a new value for property {@link #getAdjustLabelSpan adjustLabelSpan}.\n\nIf set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row. If only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label. This is the same for medium and large <code>Forms<\/code>. This is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code> (because every <code>FormContainer<\/code> has its own <code>Grid<\/code> inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size. The number of <code>FormContainers<\/code> doesn't matter in this case.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bAdjustLabelSpan: Boolean) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"bAdjustLabelSpan":"type: boolean, description: New value for property <code>adjustLabelSpan<\/code>"},"!static":false},"setBreakpointL":{"!description":"Sets a new value for property {@link #getBreakpointL breakpointL}.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1024<\/code>.","!type":"fn(iBreakpointL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iBreakpointL":"type: int, description: New value for property <code>breakpointL<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well.","!description":"The <code>ResponsiveGridLayout<\/code> control renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering. Using this layout, the <code>Form<\/code> is rendered in a responsive way. Depending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields. This behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering. <code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","getLabelSpanS":{"!description":"Gets current value of property {@link #getLabelSpanS labelSpanS}.\n\nDefault span for labels in small size.\n\nDefault value is <code>12<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setLabelSpanXL":{"!description":"Sets a new value for property {@link #getLabelSpanXL labelSpanXL}.\n\nDefault span for labels in extra large size.\n\n<b>Note:<\/b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iLabelSpanXL: Number) -> sap.ui.layout.form.ResponsiveGridLayout","!category":"function","parameters":{"iLabelSpanXL":"type: int, description: New value for property <code>labelSpanXL<\/code>"},"!static":false},"getEmptySpanM":{"!description":"Gets current value of property {@link #getEmptySpanM emptySpanM}.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getLabelSpanL":{"!description":"Gets current value of property {@link #getLabelSpanL labelSpanL}.\n\nDefault span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\nDefault value is <code>4<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getEmptySpanL":{"!description":"Gets current value of property {@link #getEmptySpanL emptySpanL}.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getLabelSpanM":{"!description":"Gets current value of property {@link #getLabelSpanM labelSpanM}.\n\nDefault span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\nDefault value is <code>2<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!proto":"sap.ui.layout.form.FormLayout","!helpDescription":"The <code>ResponsiveGridLayout<\/code> control renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering. Using this layout, the <code>Form<\/code> is rendered in a responsive way. Depending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields. This behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering. <code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveGridLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.GridElementData":{"!description":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields.","setHCells":{"!description":"Sets a new value for property {@link #getHCells hCells}.\n\nNumber of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sHCells: sap.ui.layout.form.GridElementCells) -> sap.ui.layout.form.GridElementData","!category":"function","parameters":{"sHCells":"type: sap.ui.layout.form.GridElementCells, description: New value for property <code>hCells<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getHCells":{"!description":"Gets current value of property {@link #getHCells hCells}.\n\nNumber of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.layout.form.GridElementCells","!category":"function","!static":false},"!category":"class","getVCells":{"!description":"Gets current value of property {@link #getVCells vCells}.\n\nNumber of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!constructorDescription":"Constructor for a new sap.ui.layout.form.GridElementData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHCells hCells} : sap.ui.layout.form.GridElementCells (default: auto)<\/li>\n<li>{@link #getVCells vCells} : int (default: 1)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","setVCells":{"!description":"Sets a new value for property {@link #getVCells vCells}.\n\nNumber of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iVCells: Number) -> sap.ui.layout.form.GridElementData","!category":"function","parameters":{"iVCells":"type: int, description: New value for property <code>vCells<\/code>"},"!static":false},"!module":"sap/ui/layout/form/GridElementData","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridElementData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.LayoutData","!helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields."},"sap.ui.layout.BlockLayoutCellData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCellData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayoutCellData"},"sap.ui.layout.FixFlex":{"destroyFlexContent":{"!description":"Destroys the flexContent in the aggregation {@link #getFlexContent flexContent}.","!type":"fn() -> sap.ui.layout.FixFlex","!category":"function","!static":false},"setMinFlexSize":{"!description":"Sets a new value for property {@link #getMinFlexSize minFlexSize}.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger than the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iMinFlexSize: Number) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"iMinFlexSize":"type: int, description: New value for property <code>minFlexSize<\/code>"},"!static":false},"!module":"sap/ui/layout/FixFlex","removeFixContent":{"!description":"Removes a fixContent from the aggregation {@link #getFixContent fixContent}.","!type":"fn(vFixContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vFixContent":"type: int|string|sap.ui.core.Control, description: The fixContent to remove or its index or id"},"!static":false},"getFixContent":{"!description":"Gets content of aggregation {@link #getFixContent fixContent}.\n\nControls in the fixed part of the layout.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"addFixContent":{"!description":"Adds some fixContent to the aggregation {@link #getFixContent fixContent}.","!type":"fn(oFixContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"oFixContent":"type: sap.ui.core.Control, description: The fixContent to add; if empty, nothing is inserted"},"!static":false},"!category":"class","getFixContentSize":{"!description":"Gets current value of property {@link #getFixContentSize fixContentSize}.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getFlexContent":{"!description":"Gets content of aggregation {@link #getFlexContent flexContent}.\n\nControl in the stretching part of the layout.","!type":"fn() -> sap.ui.core.Control","!category":"function","!static":false},"getMinFlexSize":{"!description":"Gets current value of property {@link #getMinFlexSize minFlexSize}.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger than the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setVertical":{"!description":"Sets a new value for property {@link #getVertical vertical}.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVertical: Boolean) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"bVertical":"type: boolean, description: New value for property <code>vertical<\/code>"},"!static":false},"setFixFirst":{"!description":"Sets a new value for property {@link #getFixFirst fixFirst}.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or end/bottom ( if the value is \"false\").\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bFixFirst: Boolean) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"bFixFirst":"type: boolean, description: New value for property <code>fixFirst<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getFixFirst":{"!description":"Gets current value of property {@link #getFixFirst fixFirst}.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or end/bottom ( if the value is \"false\").\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new FixFlex.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVertical vertical} : boolean (default: true)<\/li>\n<li>{@link #getFixFirst fixFirst} : boolean (default: true)<\/li>\n<li>{@link #getFixContentSize fixContentSize} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinFlexSize minFlexSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFixContent fixContent} : sap.ui.core.Control[]<\/li>\n<li>{@link #getFlexContent flexContent} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","destroyFixContent":{"!description":"Destroys all the fixContent in the aggregation {@link #getFixContent fixContent}.","!type":"fn() -> sap.ui.layout.FixFlex","!category":"function","!static":false},"removeAllFixContent":{"!description":"Removes all the controls from the aggregation {@link #getFixContent fixContent}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"indexOfFixContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getFixContent fixContent}. and returns its index if found or -1 otherwise.","!type":"fn(oFixContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oFixContent":"type: sap.ui.core.Control, description: The fixContent whose index is looked for"},"!static":false},"!description":"A layout container with a fixed and a flexible part. <h3>Overview<\/h3> The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. <h4>Guidelines:<\/h4> <ul> <li>The fix container can hold any number of controls, while the flexible container can hold only one<\/li> <li>In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.<\/li> <li>Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.<\/li> <\/ul> <h3>Structure<\/h3> The behavior of the FixFlex is controlled by the following properties: <ul> <li><code>fixContentSize<\/code> - The width/height of the fix part of the control<\/li> <li><code>fixFirst<\/code> - The ordering of the fix and flex part<\/li> <li><code>minFlexSize<\/code> - Scrolling inside the flex part, if its contents are large<\/li> <li><code>vertical<\/code> - Alignment of the FixFlex control<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.<\/li> <li>If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the <code>vertical<\/code> property.<\/li> <\/ul>","getVertical":{"!description":"Gets current value of property {@link #getVertical vertical}.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"insertFixContent":{"!description":"Inserts a fixContent into the aggregation {@link #getFixContent fixContent}.","!type":"fn(oFixContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"iIndex":"type: int, description: The <code>0<\/code>-based index the fixContent should be inserted at; for a negative value of <code>iIndex<\/code>, the fixContent is inserted at position 0; for a value greater than the current size of the aggregation, the fixContent is inserted at the last position","oFixContent":"type: sap.ui.core.Control, description: The fixContent to insert; if empty, nothing is inserted"},"!static":false},"setFlexContent":{"!description":"Sets the aggregated {@link #getFlexContent flexContent}.","!type":"fn(oFlexContent: sap.ui.core.Control) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"oFlexContent":"type: sap.ui.core.Control, description: The flexContent to set"},"!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"A layout container with a fixed and a flexible part. <h3>Overview<\/h3> The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. <h4>Guidelines:<\/h4> <ul> <li>The fix container can hold any number of controls, while the flexible container can hold only one<\/li> <li>In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.<\/li> <li>Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.<\/li> <\/ul> <h3>Structure<\/h3> The behavior of the FixFlex is controlled by the following properties: <ul> <li><code>fixContentSize<\/code> - The width/height of the fix part of the control<\/li> <li><code>fixFirst<\/code> - The ordering of the fix and flex part<\/li> <li><code>minFlexSize<\/code> - Scrolling inside the flex part, if its contents are large<\/li> <li><code>vertical<\/code> - Alignment of the FixFlex control<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.<\/li> <li>If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the <code>vertical<\/code> property.<\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.FixFlex.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"setFixContentSize":{"!description":"Sets a new value for property {@link #getFixContentSize fixContentSize}.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sFixContentSize: sap.ui.core.CSSSize) -> sap.ui.layout.FixFlex","!category":"function","parameters":{"sFixContentSize":"type: sap.ui.core.CSSSize, description: New value for property <code>fixContentSize<\/code>"},"!static":false}},"sap.ui.layout.form.GridContainerData":{"!description":"The <code>GridLayout<\/code>-specific layout data for <code>FormContainers<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new sap.ui.layout.form.GridContainerData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHalfGrid halfGrid} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","getHalfGrid":{"!description":"Gets current value of property {@link #getHalfGrid halfGrid}.\n\nIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells). If the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/layout/form/GridContainerData","setHalfGrid":{"!description":"Sets a new value for property {@link #getHalfGrid halfGrid}.\n\nIf set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells). If the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bHalfGrid: Boolean) -> sap.ui.layout.form.GridContainerData","!category":"function","parameters":{"bHalfGrid":"type: boolean, description: New value for property <code>halfGrid<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridContainerData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.LayoutData","!helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormContainers<\/code>."},"sap.ui.layout.HorizontalLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.HorizontalLayout"},"sap.ui.layout.SideContentFallDown":{"!description":"Types of the DynamicSideContent FallDown options","BelowM":{"!description":"Side content falls down on breakpoints below M","!type":"String","!category":"enum"},"!category":"static class","BelowXL":{"!description":"Side content falls down on breakpoints below XL","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library","OnMinimumWidth":{"!description":"Side content falls down on breakpoint M and the minimum width for the side content","!type":"String","!category":"enum"},"BelowL":{"!description":"Side content falls down on breakpoints below L","!type":"String","!category":"enum"}},"sap.ui.layout.form.FormLayout":{"!description":"Base layout to render a <code>Form<\/code>. Other layouts to render a <code>Form<\/code> must inherit from this one.\n\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any design guidelines and usability standards.","setBackgroundDesign":{"!description":"Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.\n\nSpecifies the background color of the <code>Form<\/code> content.\n\n<b>Note:<\/b> The visualization of the different options depends on the theme used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Translucent<\/code>.","!type":"fn(sBackgroundDesign: sap.ui.layout.BackgroundDesign) -> sap.ui.layout.form.FormLayout","!category":"function","parameters":{"sBackgroundDesign":"type: sap.ui.layout.BackgroundDesign, description: New value for property <code>backgroundDesign<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new sap.ui.layout.form.FormLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/form/FormLayout","getBackgroundDesign":{"!description":"Gets current value of property {@link #getBackgroundDesign backgroundDesign}.\n\nSpecifies the background color of the <code>Form<\/code> content.\n\n<b>Note:<\/b> The visualization of the different options depends on the theme used.\n\nDefault value is <code>Translucent<\/code>.","!type":"fn() -> sap.ui.layout.BackgroundDesign","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Control","!helpDescription":"Base layout to render a <code>Form<\/code>. Other layouts to render a <code>Form<\/code> must inherit from this one.\n\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any design guidelines and usability standards."},"sap.ui.layout.GridPosition":{"Right":{"!description":"Grid is aligned to the right.","!type":"String","!category":"enum"},"!description":"The position of the Grid. Can be \"Left\", \"Center\" or \"Right\". \"Left\" is default.","!category":"static class","Center":{"!description":"Grid is centered on the screen.","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library","Left":{"!description":"Grid is aligned left.","!type":"String","!category":"enum"}},"sap.ui.layout.BlockLayoutCellColorSet":{"ColorSet1":{"!description":"Color Set 1","!type":"String","!category":"enum"},"ColorSet2":{"!description":"Color Set 2","!type":"String","!category":"enum"},"ColorSet5":{"!description":"Color Set 5","!type":"String","!category":"enum"},"ColorSet6":{"!description":"Color Set 6","!type":"String","!category":"enum"},"ColorSet3":{"!description":"Color Set 3","!type":"String","!category":"enum"},"ColorSet4":{"!description":"Color Set 4","!type":"String","!category":"enum"},"ColorSet9":{"!description":"Color Set 9","!type":"String","!category":"enum"},"ColorSet10":{"!description":"Color Set 10","!type":"String","!category":"enum"},"ColorSet7":{"!description":"Color Set 7","!type":"String","!category":"enum"},"ColorSet11":{"!description":"Color Set 11","!type":"String","!category":"enum"},"ColorSet8":{"!description":"Color Set 8","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library","!description":"A string type that is used inside the BlockLayoutCell to set a predefined set of colors for the cells.","!category":"static class"},"sap.ui.layout.GridData":{"getVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Gets current value of property {@link #getVisibleOnMedium visibleOnMedium}.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getIndentS":{"!description":"Gets current value of property {@link #getIndentS indentS}.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"getIndent":{"!description":"Gets current value of property {@link #getIndent indent}.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function","!static":false},"!module":"sap/ui/layout/GridData","getSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Gets current value of property {@link #getSpanLarge spanLarge}.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"getVisibleXL":{"!description":"Gets current value of property {@link #getVisibleXL visibleXL}.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setIndentM":{"!description":"Sets a new value for property {@link #getIndentM indentM}.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentM: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentM":"type: int, description: New value for property <code>indentM<\/code>"},"!static":false},"setIndentL":{"!description":"Sets a new value for property {@link #getIndentL indentL}.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentL: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentL":"type: int, description: New value for property <code>indentL<\/code>"},"!static":false},"getVisibleL":{"!description":"Gets current value of property {@link #getVisibleL visibleL}.\n\nDefines if this Control is visible on Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getMoveForward":{"!description":"Gets current value of property {@link #getMoveForward moveForward}.\n\nOptional. Moves a cell forwards so many columns as specified.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function","!static":false},"getVisibleM":{"!description":"Gets current value of property {@link #getVisibleM visibleM}.\n\nDefines if this Control is visible on Medium size screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Sets a new value for property {@link #getVisibleOnLarge visibleOnLarge}.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnLarge: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleOnLarge":"type: boolean, description: New value for property <code>visibleOnLarge<\/code>"},"!static":false},"setIndentXL":{"!description":"Sets a new value for property {@link #getIndentXL indentXL}.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentXL: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentXL":"type: int, description: New value for property <code>indentXL<\/code>"},"!static":false},"getVisibleS":{"!description":"Gets current value of property {@link #getVisibleS visibleS}.\n\nDefines if this Control is visible on small screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getIndentM":{"!description":"Gets current value of property {@link #getIndentM indentM}.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"setVisibleS":{"!description":"Sets a new value for property {@link #getVisibleS visibleS}.\n\nDefines if this Control is visible on small screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleS: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleS":"type: boolean, description: New value for property <code>visibleS<\/code>"},"!static":false},"getIndentL":{"!description":"Gets current value of property {@link #getIndentL indentL}.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"setIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Sets a new value for property {@link #getIndentSmall indentSmall}.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentSmall: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentSmall":"type: int, description: New value for property <code>indentSmall<\/code>"},"!static":false},"setVisibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Sets a new value for property {@link #getVisibleOnMedium visibleOnMedium}.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnMedium: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleOnMedium":"type: boolean, description: New value for property <code>visibleOnMedium<\/code>"},"!static":false},"setSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Sets a new value for property {@link #getSpanSmall spanSmall}.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanSmall: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanSmall":"type: int, description: New value for property <code>spanSmall<\/code>"},"!static":false},"getSpanXL":{"!description":"Gets current value of property {@link #getSpanXL spanXL}.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"setVisibleM":{"!description":"Sets a new value for property {@link #getVisibleM visibleM}.\n\nDefines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleM: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleM":"type: boolean, description: New value for property <code>visibleM<\/code>"},"!static":false},"getMoveBackwards":{"!description":"Gets current value of property {@link #getMoveBackwards moveBackwards}.\n\nOptional. Moves a cell backwards so many columns as specified.","!type":"fn() -> sap.ui.layout.GridIndent","!category":"function","!static":false},"setVisibleL":{"!description":"Sets a new value for property {@link #getVisibleL visibleL}.\n\nDefines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleL: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleL":"type: boolean, description: New value for property <code>visibleL<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new GridData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSpan span} : sap.ui.layout.GridSpan<\/li>\n<li>{@link #getSpanXL spanXL} : int<\/li>\n<li>{@link #getSpanL spanL} : int<\/li>\n<li>{@link #getSpanM spanM} : int<\/li>\n<li>{@link #getSpanS spanS} : int<\/li>\n<li>{@link #getIndent indent} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getIndentXL indentXL} : int<\/li>\n<li>{@link #getIndentL indentL} : int<\/li>\n<li>{@link #getIndentM indentM} : int<\/li>\n<li>{@link #getIndentS indentS} : int<\/li>\n<li>{@link #getVisibleXL visibleXL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleL visibleL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleM visibleM} : boolean (default: true)<\/li>\n<li>{@link #getVisibleS visibleS} : boolean (default: true)<\/li>\n<li>{@link #getMoveBackwards moveBackwards} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getMoveForward moveForward} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakXL linebreakXL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakL linebreakL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakM linebreakM} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakS linebreakS} : boolean (default: false)<\/li>\n<li>{@link #getSpanLarge spanLarge} : int<\/li>\n<li>{@link #getSpanMedium spanMedium} : int<\/li>\n<li>{@link #getSpanSmall spanSmall} : int<\/li>\n<li>{@link #getIndentLarge indentLarge} : int<\/li>\n<li>{@link #getIndentMedium indentMedium} : int<\/li>\n<li>{@link #getIndentSmall indentSmall} : int<\/li>\n<li>{@link #getVisibleOnLarge visibleOnLarge} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnMedium visibleOnMedium} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnSmall visibleOnSmall} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","getLinebreakXL":{"!description":"Gets current value of property {@link #getLinebreakXL linebreakXL}.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getLinebreakM":{"!description":"Gets current value of property {@link #getLinebreakM linebreakM}.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSpanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Gets current value of property {@link #getSpanSmall spanSmall}.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"getLinebreakS":{"!description":"Gets current value of property {@link #getLinebreakS linebreakS}.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setIndentS":{"!description":"Sets a new value for property {@link #getIndentS indentS}.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentS: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentS":"type: int, description: New value for property <code>indentS<\/code>"},"!static":false},"setIndent":{"!description":"Sets a new value for property {@link #getIndent indent}.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sIndent: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function","parameters":{"sIndent":"type: sap.ui.layout.GridIndent, description: New value for property <code>indent<\/code>"},"!static":false},"setSpanS":{"!description":"Sets a new value for property {@link #getSpanS spanS}.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanS: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanS":"type: int, description: New value for property <code>spanS<\/code>"},"!static":false},"setIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Sets a new value for property {@link #getIndentMedium indentMedium}.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentMedium: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentMedium":"type: int, description: New value for property <code>indentMedium<\/code>"},"!static":false},"setSpanM":{"!description":"Sets a new value for property {@link #getSpanM spanM}.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanM: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanM":"type: int, description: New value for property <code>spanM<\/code>"},"!static":false},"setSpanL":{"!description":"Sets a new value for property {@link #getSpanL spanL}.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanL: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanL":"type: int, description: New value for property <code>spanL<\/code>"},"!static":false},"getLinebreakL":{"!description":"Gets current value of property {@link #getLinebreakL linebreakL}.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"Grid layout data","!proto":"sap.ui.core.LayoutData","getIndentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Gets current value of property {@link #getIndentMedium indentMedium}.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"getIndentXL":{"!description":"Gets current value of property {@link #getIndentXL indentXL}.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"getSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Gets current value of property {@link #getSpanMedium spanMedium}.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"setMoveBackwards":{"!description":"Sets a new value for property {@link #getMoveBackwards moveBackwards}.\n\nOptional. Moves a cell backwards so many columns as specified.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMoveBackwards: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function","parameters":{"sMoveBackwards":"type: sap.ui.layout.GridIndent, description: New value for property <code>moveBackwards<\/code>"},"!static":false},"getLinebreak":{"!description":"Gets current value of property {@link #getLinebreak linebreak}.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setSpanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Sets a new value for property {@link #getSpanMedium spanMedium}.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanMedium: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanMedium":"type: int, description: New value for property <code>spanMedium<\/code>"},"!static":false},"setSpanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Sets a new value for property {@link #getSpanLarge spanLarge}.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanLarge: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanLarge":"type: int, description: New value for property <code>spanLarge<\/code>"},"!static":false},"setLinebreakXL":{"!description":"Sets a new value for property {@link #getLinebreakXL linebreakXL}.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakXL: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bLinebreakXL":"type: boolean, description: New value for property <code>linebreakXL<\/code>"},"!static":false},"getVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Gets current value of property {@link #getVisibleOnSmall visibleOnSmall}.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setLinebreakS":{"!description":"Sets a new value for property {@link #getLinebreakS linebreakS}.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakS: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bLinebreakS":"type: boolean, description: New value for property <code>linebreakS<\/code>"},"!static":false},"setVisibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Sets a new value for property {@link #getVisibleOnSmall visibleOnSmall}.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleOnSmall: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleOnSmall":"type: boolean, description: New value for property <code>visibleOnSmall<\/code>"},"!static":false},"!category":"class","setLinebreakM":{"!description":"Sets a new value for property {@link #getLinebreakM linebreakM}.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakM: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bLinebreakM":"type: boolean, description: New value for property <code>linebreakM<\/code>"},"!static":false},"setLinebreakL":{"!description":"Sets a new value for property {@link #getLinebreakL linebreakL}.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreakL: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bLinebreakL":"type: boolean, description: New value for property <code>linebreakL<\/code>"},"!static":false},"getIndentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Gets current value of property {@link #getIndentSmall indentSmall}.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"setSpanXL":{"!description":"Sets a new value for property {@link #getSpanXL spanXL}.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iSpanXL: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iSpanXL":"type: int, description: New value for property <code>spanXL<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setSpan":{"!description":"Sets a new value for property {@link #getSpan span}.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSpan: sap.ui.layout.GridSpan) -> sap.ui.layout.GridData","!category":"function","parameters":{"sSpan":"type: sap.ui.layout.GridSpan, description: New value for property <code>span<\/code>"},"!static":false},"setIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Sets a new value for property {@link #getIndentLarge indentLarge}.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iIndentLarge: Number) -> sap.ui.layout.GridData","!category":"function","parameters":{"iIndentLarge":"type: int, description: New value for property <code>indentLarge<\/code>"},"!static":false},"getSpanS":{"!description":"Gets current value of property {@link #getSpanS spanS}.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"setVisibleXL":{"!description":"Sets a new value for property {@link #getVisibleXL visibleXL}.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisibleXL: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bVisibleXL":"type: boolean, description: New value for property <code>visibleXL<\/code>"},"!static":false},"!description":"Grid layout data","setLinebreak":{"!description":"Sets a new value for property {@link #getLinebreak linebreak}.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.GridData","!category":"function","parameters":{"bLinebreak":"type: boolean, description: New value for property <code>linebreak<\/code>"},"!static":false},"getSpanM":{"!description":"Gets current value of property {@link #getSpanM spanM}.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"getVisibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Gets current value of property {@link #getVisibleOnLarge visibleOnLarge}.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSpanL":{"!description":"Gets current value of property {@link #getSpanL spanL}.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"fn() -> Number","!category":"function","!static":false},"getIndentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Gets current value of property {@link #getIndentLarge indentLarge}.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"fn() -> Number","!category":"function","!static":false},"setMoveForward":{"!description":"Sets a new value for property {@link #getMoveForward moveForward}.\n\nOptional. Moves a cell forwards so many columns as specified.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMoveForward: sap.ui.layout.GridIndent) -> sap.ui.layout.GridData","!category":"function","parameters":{"sMoveForward":"type: sap.ui.layout.GridIndent, description: New value for property <code>moveForward<\/code>"},"!static":false},"getSpan":{"!description":"Gets current value of property {@link #getSpan span}.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"fn() -> sap.ui.layout.GridSpan","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.GridData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.GridData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.GridData"},"sap.ui.layout.DynamicSideContent":{"setSideContentPosition":{"!description":"Sets a new value for property {@link #getSideContentPosition sideContentPosition}.\n\nDetermines whether the side content is on the left or on the right side of the main content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>End<\/code>.","!type":"fn(sSideContentPosition: sap.ui.layout.SideContentPosition) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"sSideContentPosition":"type: sap.ui.layout.SideContentPosition, description: New value for property <code>sideContentPosition<\/code>"},"!static":false},"getEqualSplit":{"!description":"Gets current value of property {@link #getEqualSplit equalSplit}.\n\nDefines whether the control is in equal split mode. In this mode, the side and the main content take 50:50 percent of the container on all screen sizes except for phone, where the main and side contents are switching visibility using the toggle method.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"addMainContent":{"!description":"Adds a control to the main content area. Only the main content part in the aggregation is re-rendered.","!type":"fn(oControl: Object) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"oControl":"type: object, description: Object to be added in the aggregation"},"!static":false},"insertMainContent":{"!description":"Inserts a mainContent into the aggregation {@link #getMainContent mainContent}.","!type":"fn(oMainContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"oMainContent":"type: sap.ui.core.Control, description: The mainContent to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the mainContent should be inserted at; for a negative value of <code>iIndex<\/code>, the mainContent is inserted at position 0; for a value greater than the current size of the aggregation, the mainContent is inserted at the last position"},"!static":false},"!module":"sap/ui/layout/DynamicSideContent","getSideContentPosition":{"!description":"Gets current value of property {@link #getSideContentPosition sideContentPosition}.\n\nDetermines whether the side content is on the left or on the right side of the main content.\n\nDefault value is <code>End<\/code>.","!type":"fn() -> sap.ui.layout.SideContentPosition","!category":"function","!static":false},"detachBreakpointChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:breakpointChanged breakpointChanged} event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getContainerQuery":{"!description":"Gets current value of property {@link #getContainerQuery containerQuery}.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"toggle":{"!description":"Used for the toggle button functionality. When the control is on a phone screen size only, one control area is visible. This helper method is used to implement a button/switch for changing between the main and side content areas. Only works if the current breakpoint is \"S\".","!type":"fn() -> sap.ui.layout.DynamicSideContent","!category":"function","!static":false},"setShowMainContent":{"!description":"Sets the showMainContent property.","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"bVisible":"type: boolean, description: Determines if the main content part is visible","bSuppressVisualUpdate":"type: boolean, description: Determines if the visual state is updated"},"!static":false},"setEqualSplit":{"!description":"Sets or unsets the page in equalSplit mode.","!type":"fn(bState?: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"bState":"type: boolean, description: Determines if the page is set to equalSplit mode"},"!static":false},"setContainerQuery":{"!description":"Sets a new value for property {@link #getContainerQuery containerQuery}.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bContainerQuery: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"bContainerQuery":"type: boolean, description: New value for property <code>containerQuery<\/code>"},"!static":false},"indexOfMainContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getMainContent mainContent}. and returns its index if found or -1 otherwise.","!type":"fn(oMainContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oMainContent":"type: sap.ui.core.Control, description: The mainContent whose index is looked for"},"!static":false},"removeAllMainContent":{"!description":"Removes all the controls from the aggregation {@link #getMainContent mainContent}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"indexOfSideContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getSideContent sideContent}. and returns its index if found or -1 otherwise.","!type":"fn(oSideContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oSideContent":"type: sap.ui.core.Control, description: The sideContent whose index is looked for"},"!static":false},"!category":"class","removeAllSideContent":{"!description":"Removes all the controls from the aggregation {@link #getSideContent sideContent}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getCurrentBreakpoint":{"!description":"Returns the breakpoint for the current state of the control.","!type":"fn() -> String","!category":"function","!static":false},"setSideContentFallDown":{"!description":"Sets a new value for property {@link #getSideContentFallDown sideContentFallDown}.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>OnMinimumWidth<\/code>.","!type":"fn(sSideContentFallDown: sap.ui.layout.SideContentFallDown) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"sSideContentFallDown":"type: sap.ui.layout.SideContentFallDown, description: New value for property <code>sideContentFallDown<\/code>"},"!static":false},"getShowSideContent":{"!description":"Gets the value of showSideContent property.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSideContent":{"!description":"Gets content of aggregation {@link #getSideContent sideContent}.\n\nSide content controls.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setShowSideContent":{"!description":"Sets the showSideContent property.","!type":"fn(bVisible: Boolean, bSuppressVisualUpdate: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"bVisible":"type: boolean, description: Determines if the side content part is visible","bSuppressVisualUpdate":"type: boolean, description: Determines if the visual state is updated"},"!static":false},"getSideContentVisibility":{"!description":"Gets current value of property {@link #getSideContentVisibility sideContentVisibility}.\n\nDetermines on which breakpoints the side content is visible.\n\nDefault value is <code>ShowAboveS<\/code>.","!type":"fn() -> sap.ui.layout.SideContentVisibility","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"destroySideContent":{"!description":"Destroys all the sideContent in the aggregation {@link #getSideContent sideContent}.","!type":"fn() -> sap.ui.layout.DynamicSideContent","!category":"function","!static":false},"destroyMainContent":{"!description":"Destroys all the mainContent in the aggregation {@link #getMainContent mainContent}.","!type":"fn() -> sap.ui.layout.DynamicSideContent","!category":"function","!static":false},"setSideContentVisibility":{"!description":"Sets the sideContentVisibility property.","!type":"fn(sVisibility: sap.ui.layout.SideContentVisibility, bSuppressVisualUpdate: Boolean) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"sVisibility":"type: sap.ui.layout.SideContentVisibility, description: Determines on which breakpoints the side content is visible.","bSuppressVisualUpdate":"type: boolean, description: Determines if the visual state is updated"},"!static":false},"getMainContent":{"!description":"Gets content of aggregation {@link #getMainContent mainContent}.\n\nMain content controls.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new <code>DynamicSideContent<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getShowSideContent showSideContent} : boolean (default: true)<\/li>\n<li>{@link #getShowMainContent showMainContent} : boolean (default: true)<\/li>\n<li>{@link #getSideContentVisibility sideContentVisibility} : sap.ui.layout.SideContentVisibility (default: ShowAboveS)<\/li>\n<li>{@link #getSideContentFallDown sideContentFallDown} : sap.ui.layout.SideContentFallDown (default: OnMinimumWidth)<\/li>\n<li>{@link #getEqualSplit equalSplit} : boolean (default: false)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<li>{@link #getSideContentPosition sideContentPosition} : sap.ui.layout.SideContentPosition (default: End)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getMainContent mainContent} : sap.ui.core.Control[] (default)<\/li>\n<li>{@link #getSideContent sideContent} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:breakpointChanged breakpointChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","removeMainContent":{"!description":"Removes a mainContent from the aggregation {@link #getMainContent mainContent}.","!type":"fn(vMainContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vMainContent":"type: int|string|sap.ui.core.Control, description: The mainContent to remove or its index or id"},"!static":false},"getShowMainContent":{"!description":"Gets the value of showMainContent property.","!type":"fn() -> Boolean","!category":"function","!static":false},"fireBreakpointChanged":{"!description":"Fires event {@link #event:breakpointChanged breakpointChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachBreakpointChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:breakpointChanged breakpointChanged} event of this <code>sap.ui.layout.DynamicSideContent<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.layout.DynamicSideContent<\/code> itself.\n\nFires when the current breakpoint has been changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.layout.DynamicSideContent<\/code> itself"},"!static":false},"insertSideContent":{"!description":"Inserts a sideContent into the aggregation {@link #getSideContent sideContent}.","!type":"fn(oSideContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"oSideContent":"type: sap.ui.core.Control, description: The sideContent to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the sideContent should be inserted at; for a negative value of <code>iIndex<\/code>, the sideContent is inserted at position 0; for a value greater than the current size of the aggregation, the sideContent is inserted at the last position"},"!static":false},"!description":"Layout control that allows additional (side) content to be displayed dynamically.\n\n<h3>Overview<\/h3>\n\n<code>DynamicSideContent<\/code> is a layout control that allows additional content to be displayed in a way that flexibly adapts to different screen sizes. The side content appears in a container next to or directly below the main content (it doesn't overlay). When the side content is triggered, the main content becomes narrower (if appearing side-by-side). The side content contains a separate scrollbar when appearing next to the main content.\n\n<h3>Usage<\/h3>\n\n<i>When to use?<\/i>\n\nUse this control if you want to display relevant information that is not critical for users to complete a task. Users should have access to all the key functions and critical information in the app even if they do not see the side content. This is important because on smaller screen sizes it may be difficult to display the side content in a way that is easily accessible for the user.\n\n<i>When not to use?<\/i>\n\nDon't use it if you want to display navigation or critical information that prevents users from completing a task when they have no access to the side content.\n\n<h3>Responsive Behavior<\/h3>\n\nScreen width > 1440 px\n\n<ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px each).<\/li> <li>If the application defines a trigger, the side content can be hidden.<\/li><\/ul>\n\nScreen width <= 1440 px and > 720px\n\n<ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of 320px each). If the side content width falls below 320 px, it automatically slides under the main content, unless the app development team specifies that it should disappear.<\/li><\/ul>\n\nScreen width <= 720 px (for example on a mobile device)\n\n<ul><li>In this case, the side content automatically disappears from the screen (unless specified to stay under the content) and can be triggered from a pre-set trigger (specified within the app). When the side content is triggered, it replaces the main content. We recommend that you always place the trigger for the side content in the same location, such as in the app footer.<\/li><\/ul>\n\nA special case, allows for comparison mode between the main and side content. In this case, the screen is split into 50:50 percent for main vs. side content. The responsive behavior of the equal split is the same as in the standard view - the side content disappears on screen widths of less than 720 px and can only be viewed by triggering it.","removeSideContent":{"!description":"Removes a sideContent from the aggregation {@link #getSideContent sideContent}.","!type":"fn(vSideContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vSideContent":"type: int|string|sap.ui.core.Control, description: The sideContent to remove or its index or id"},"!static":false},"addSideContent":{"!description":"Adds a control to the side content area. Only the side content part in the aggregation is re-rendered.","!type":"fn(oControl: Object) -> sap.ui.layout.DynamicSideContent","!category":"function","parameters":{"oControl":"type: object, description: Object to be added in the aggregation"},"!static":false},"getSideContentFallDown":{"!description":"Gets current value of property {@link #getSideContentFallDown sideContentFallDown}.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nDefault value is <code>OnMinimumWidth<\/code>.","!type":"fn() -> sap.ui.layout.SideContentFallDown","!category":"function","!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"Layout control that allows additional (side) content to be displayed dynamically.\n\n<h3>Overview<\/h3>\n\n<code>DynamicSideContent<\/code> is a layout control that allows additional content to be displayed in a way that flexibly adapts to different screen sizes. The side content appears in a container next to or directly below the main content (it doesn't overlay). When the side content is triggered, the main content becomes narrower (if appearing side-by-side). The side content contains a separate scrollbar when appearing next to the main content.\n\n<h3>Usage<\/h3>\n\n<i>When to use?<\/i>\n\nUse this control if you want to display relevant information that is not critical for users to complete a task. Users should have access to all the key functions and critical information in the app even if they do not see the side content. This is important because on smaller screen sizes it may be difficult to display the side content in a way that is easily accessible for the user.\n\n<i>When not to use?<\/i>\n\nDon't use it if you want to display navigation or critical information that prevents users from completing a task when they have no access to the side content.\n\n<h3>Responsive Behavior<\/h3>\n\nScreen width > 1440 px\n\n<ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px each).<\/li> <li>If the application defines a trigger, the side content can be hidden.<\/li><\/ul>\n\nScreen width <= 1440 px and > 720px\n\n<ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of 320px each). If the side content width falls below 320 px, it automatically slides under the main content, unless the app development team specifies that it should disappear.<\/li><\/ul>\n\nScreen width <= 720 px (for example on a mobile device)\n\n<ul><li>In this case, the side content automatically disappears from the screen (unless specified to stay under the content) and can be triggered from a pre-set trigger (specified within the app). When the side content is triggered, it replaces the main content. We recommend that you always place the trigger for the side content in the same location, such as in the app footer.<\/li><\/ul>\n\nA special case, allows for comparison mode between the main and side content. In this case, the screen is split into 50:50 percent for main vs. side content. The responsive behavior of the equal split is the same as in the standard view - the side content disappears on screen widths of less than 720 px and can only be viewed by triggering it.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.DynamicSideContent.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui.layout.ResponsiveFlowLayoutData":{"setMargin":{"!description":"Sets a new value for property {@link #getMargin margin}.\n\nPrevents any margin of the element if set to false.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bMargin: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function","parameters":{"bMargin":"type: boolean, description: New value for property <code>margin<\/code>"},"!static":false},"setWeight":{"!description":"Sets a new value for property {@link #getWeight weight}.\n\nDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iWeight: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function","parameters":{"iWeight":"type: int, description: New value for property <code>weight<\/code>"},"!static":false},"getLinebreak":{"!description":"Gets current value of property {@link #getLinebreak linebreak}.\n\nIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getMinWidth":{"!description":"Gets current value of property {@link #getMinWidth minWidth}.\n\nDefines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.\n\nDefault value is <code>100<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setMinWidth":{"!description":"Sets a new value for property {@link #getMinWidth minWidth}.\n\nDefines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100<\/code>.","!type":"fn(iMinWidth: Number) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function","parameters":{"iMinWidth":"type: int, description: New value for property <code>minWidth<\/code>"},"!static":false},"setLinebreakable":{"!description":"Sets a new value for property {@link #getLinebreakable linebreakable}.\n\nShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bLinebreakable: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function","parameters":{"bLinebreakable":"type: boolean, description: New value for property <code>linebreakable<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new ResponsiveFlowLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMinWidth minWidth} : int (default: 100)<\/li>\n<li>{@link #getWeight weight} : int (default: 1)<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getMargin margin} : boolean (default: true)<\/li>\n<li>{@link #getLinebreakable linebreakable} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveFlowLayoutData","getWeight":{"!description":"Gets current value of property {@link #getWeight weight}.\n\nDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!description":"This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.","setLinebreak":{"!description":"Sets a new value for property {@link #getLinebreak linebreak}.\n\nIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bLinebreak: Boolean) -> sap.ui.layout.ResponsiveFlowLayoutData","!category":"function","parameters":{"bLinebreak":"type: boolean, description: New value for property <code>linebreak<\/code>"},"!static":false},"getLinebreakable":{"!description":"Gets current value of property {@link #getLinebreakable linebreakable}.\n\nShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!category":"class","getMargin":{"!description":"Gets current value of property {@link #getMargin margin}.\n\nPrevents any margin of the element if set to false.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.","!proto":"sap.ui.core.LayoutData","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayoutData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.Form":{"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"removeAllFormContainers":{"!description":"Removes all the controls from the aggregation {@link #getFormContainers formContainers}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"addFormContainer":{"!description":"Adds some formContainer to the aggregation {@link #getFormContainers formContainers}.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.Form","!category":"function","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: The formContainer to add; if empty, nothing is inserted"},"!static":false},"setLayout":{"!description":"Sets the aggregated {@link #getLayout layout}.","!type":"fn(oLayout: sap.ui.layout.form.FormLayout) -> sap.ui.layout.form.Form","!category":"function","parameters":{"oLayout":"type: sap.ui.layout.form.FormLayout, description: The layout to set"},"!static":false},"!module":"sap/ui/layout/form/Form","setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content. If set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEditable: Boolean) -> sap.ui.layout.form.Form","!category":"function","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"},"!static":false},"removeFormContainer":{"!description":"Removes a formContainer from the aggregation {@link #getFormContainers formContainers}.","!type":"fn(vFormContainer: Number | String | sap.ui.layout.form.FormContainer) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"vFormContainer":"type: int|string|sap.ui.layout.form.FormContainer, description: The formContainer to remove or its index or id"},"!static":false},"!category":"class","getTitle":{"!description":"Gets content of aggregation {@link #getTitle title}.\n\nTitle of the <code>Form<\/code>. Can either be a <code>Title<\/code> element or a string. If a <code>Title<\/code> element it used, the style of the title can be set.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.","!type":"fn() -> sap.ui.core.Title | String","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of the <code>Form<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of the <code>Form<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.form.Form","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"getFormContainers":{"!description":"Gets content of aggregation {@link #getFormContainers formContainers}.\n\nContainers with the content of the form. A <code>FormContainer<\/code> represents a group inside the <code>Form<\/code>.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"destroyFormContainers":{"!description":"Destroys all the formContainers in the aggregation {@link #getFormContainers formContainers}.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function","!static":false},"getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content. If set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new sap.ui.layout.form.Form.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormContainers formContainers} : sap.ui.layout.form.FormContainer[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.FormLayout<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getToolbar":{"!description":"Gets content of aggregation {@link #getToolbar toolbar}.\n\nToolbar of the <code>Form<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored. If a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>. In this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!type":"fn() -> sap.ui.core.Toolbar","!category":"function","!static":false},"setToolbar":{"!description":"Sets the aggregated {@link #getToolbar toolbar}.","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.Form","!category":"function","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"},"!static":false},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function","!static":false},"destroyTitle":{"!description":"Destroys the title in the aggregation {@link #getTitle title}.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function","!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.Form","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"!description":"A <code>Form<\/code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.\n\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>. The <code>FormElements<\/code> consists of a label and the form fields. A <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>. This is so that the rendering can be adopted to new UI requirements without changing the <code>Form<\/code> itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>. <code>LayoutData<\/code> on the content can be used to overwrite the default layout of the <code>Form<\/code>.\n\nThe <code>Form<\/code> (and its sub-controls) automatically add label and field assignment to enable screen reader support. It also adds keyboard support to navigate between the fields and groups inside the form.\n\n<b>Note:<\/b> Do not put any layout controls into the <code>FormElements<\/code>. This could destroy the visual layout, keyboard support and screen-reader support.","setTitle":{"!description":"Sets the aggregated {@link #getTitle title}.","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.Form","!category":"function","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"},"!static":false},"getLayout":{"!description":"Gets content of aggregation {@link #getLayout layout}.\n\nLayout of the <code>Form<\/code>. The assigned <code>Layout<\/code> renders the <code>Form<\/code>. We recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>Form<\/code>, as its responsiveness allows the available space to be used in the best way possible.","!type":"fn() -> sap.ui.layout.form.FormLayout","!category":"function","!static":false},"insertFormContainer":{"!description":"Inserts a formContainer into the aggregation {@link #getFormContainers formContainers}.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer, iIndex: Number) -> sap.ui.layout.form.Form","!category":"function","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: The formContainer to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the formContainer should be inserted at; for a negative value of <code>iIndex<\/code>, the formContainer is inserted at position 0; for a value greater than the current size of the aggregation, the formContainer is inserted at the last position"},"!static":false},"indexOfFormContainer":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormContainer<\/code> in the aggregation {@link #getFormContainers formContainers}. and returns its index if found or -1 otherwise.","!type":"fn(oFormContainer: sap.ui.layout.form.FormContainer) -> Number","!category":"function","parameters":{"oFormContainer":"type: sap.ui.layout.form.FormContainer, description: The formContainer whose index is looked for"},"!static":false},"destroyLayout":{"!description":"Destroys the layout in the aggregation {@link #getLayout layout}.","!type":"fn() -> sap.ui.layout.form.Form","!category":"function","!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"A <code>Form<\/code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.\n\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>. The <code>FormElements<\/code> consists of a label and the form fields. A <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>. This is so that the rendering can be adopted to new UI requirements without changing the <code>Form<\/code> itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>. <code>LayoutData<\/code> on the content can be used to overwrite the default layout of the <code>Form<\/code>.\n\nThe <code>Form<\/code> (and its sub-controls) automatically add label and field assignment to enable screen reader support. It also adds keyboard support to navigate between the fields and groups inside the form.\n\n<b>Note:<\/b> Do not put any layout controls into the <code>FormElements<\/code>. This could destroy the visual layout, keyboard support and screen-reader support.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.Form.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.SideContentVisibility":{"NeverShow":{"!description":"Don't show the side content on any breakpoints","!type":"String","!category":"enum"},"!description":"Types of the DynamicSideContent Visibility options","ShowAboveS":{"!description":"Show the side content on M, L and XL breakpoints","!type":"String","!category":"enum"},"!category":"static class","AlwaysShow":{"!description":"Show the side content on any breakpoint","!type":"String","!category":"enum"},"ShowAboveL":{"!description":"Show the side content on XL breakpoint","!type":"String","!category":"enum"},"ShowAboveM":{"!description":"Show the side content on L and XL breakpoints","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library"},"sap.ui.layout.SplitPane":{"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nContent of the SplitPane","!type":"fn() -> sap.ui.core.Control","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new SplitPane.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getDemandPane demandPane} : boolean (default: true)<\/li>\n<li>{@link #getRequiredParentWidth requiredParentWidth} : int (default: 800)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/layout/SplitPane","setContent":{"!description":"Sets the aggregated {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.SplitPane","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to set"},"!static":false},"getRequiredParentWidth":{"!description":"Gets current value of property {@link #getRequiredParentWidth requiredParentWidth}.\n\nDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\n\nDefault value is <code>800<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getDemandPane":{"!description":"Gets current value of property {@link #getDemandPane demandPane}.\n\nDetermines whether the pane will be moved to the pagination\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"destroyContent":{"!description":"Destroys the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.SplitPane","!category":"function","!static":false},"!description":"SplitPane is a container of a single control in a responsive splitter. Could be used as an aggregation of a {@link sap.ui.layout.PaneContainer PaneContainer}.\n\nThe behavior of the Split Panes is handled by the following properties: <ul> <li><code>requiredParentWidth<\/code> - determines the minimum width of the parent container (in pixels). When it is reached, the pane will be hidden from the screen.<\/li> <li><code>demandPane<\/code> - determines if the pane is reachable via the pagination bar after it has been hidden from the screen.<\/li> <\/ul","setDemandPane":{"!description":"Sets a new value for property {@link #getDemandPane demandPane}.\n\nDetermines whether the pane will be moved to the pagination\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bDemandPane: Boolean) -> sap.ui.layout.SplitPane","!category":"function","parameters":{"bDemandPane":"type: boolean, description: New value for property <code>demandPane<\/code>"},"!static":false},"!category":"class","setRequiredParentWidth":{"!description":"Sets a new value for property {@link #getRequiredParentWidth requiredParentWidth}.\n\nDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>800<\/code>.","!type":"fn(iRequiredParentWidth: Number) -> sap.ui.layout.SplitPane","!category":"function","parameters":{"iRequiredParentWidth":"type: int, description: New value for property <code>requiredParentWidth<\/code>"},"!static":false},"!helpDescription":"SplitPane is a container of a single control in a responsive splitter. Could be used as an aggregation of a {@link sap.ui.layout.PaneContainer PaneContainer}.\n\nThe behavior of the Split Panes is handled by the following properties: <ul> <li><code>requiredParentWidth<\/code> - determines the minimum width of the parent container (in pixels). When it is reached, the pane will be hidden from the screen.<\/li> <li><code>demandPane<\/code> - determines if the pane is reachable via the pagination bar after it has been hidden from the screen.<\/li> <\/ul","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.SplitPane.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.FormContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormContainer"},"sap.ui.layout.form.GridContainerData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridContainerData"},"sap.ui.layout.PaneContainer":{"removeAllPanes":{"!description":"Removes all the controls from the aggregation {@link #getPanes panes}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"destroyPanes":{"!description":"Destroys all the panes in the aggregation {@link #getPanes panes}.","!type":"fn() -> sap.ui.layout.PaneContainer","!category":"function","!static":false},"getOrientation":{"!description":"Gets current value of property {@link #getOrientation orientation}.\n\nThe orientation of the Splitter\n\nDefault value is <code>Horizontal<\/code>.","!type":"fn() -> sap.ui.core.Orientation","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new PaneContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getPanes panes} : sap.ui.core.Element[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/layout/PaneContainer","setLayoutData":{"!description":"Setter for property layoutData.","!type":"fn(oLayoutData: sap.ui.core.LayoutData) -> sap.ui.layout.PaneContainer","!category":"function","parameters":{"oLayoutData":"type: sap.ui.core.LayoutData, description: The LayoutData object."},"!static":false},"addPane":{"!description":"Adds some pane to the aggregation {@link #getPanes panes}.","!type":"fn(oPane: sap.ui.core.Element) -> sap.ui.layout.PaneContainer","!category":"function","parameters":{"oPane":"type: sap.ui.core.Element, description: The pane to add; if empty, nothing is inserted"},"!static":false},"!description":"PaneContainer is an abstraction of Splitter.\n\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.","getPanes":{"!description":"Gets content of aggregation {@link #getPanes panes}.\n\nThe Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removePane":{"!description":"Pane removal","!type":"fn(oObject: undefined) -> sap.ui.base.ManagedObject","!category":"function","parameters":{"oObject":"type: undefined, description: undefined"},"!static":false},"!category":"class","setOrientation":{"!description":"Setter for property orientation. Default value is sap.ui.core.Orientation.Horizontal","!type":"fn(sOrientation: sap.ui.core.Orientation) -> sap.ui.layout.PaneContainer","!category":"function","parameters":{"sOrientation":"type: sap.ui.core.Orientation, description: The Orientation type."},"!static":false},"indexOfPane":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation {@link #getPanes panes}. and returns its index if found or -1 otherwise.","!type":"fn(oPane: sap.ui.core.Element) -> Number","!category":"function","parameters":{"oPane":"type: sap.ui.core.Element, description: The pane whose index is looked for"},"!static":false},"insertPane":{"!description":"Pane insertion","!type":"fn(oObject: undefined, iIndex: undefined) -> sap.ui.base.ManagedObject","!category":"function","parameters":{"iIndex":"type: undefined, description: undefined","oObject":"type: undefined, description: undefined"},"!static":false},"!helpDescription":"PaneContainer is an abstraction of Splitter.\n\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.PaneContainer.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.GridLayout":{"setSingleColumn":{"!description":"Sets a new value for property {@link #getSingleColumn singleColumn}.\n\nIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSingleColumn: Boolean) -> sap.ui.layout.form.GridLayout","!category":"function","parameters":{"bSingleColumn":"type: boolean, description: New value for property <code>singleColumn<\/code>"},"!static":false},"!description":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using an HTML-table based grid. This can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>. Only the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code> and <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","getSingleColumn":{"!description":"Gets current value of property {@link #getSingleColumn singleColumn}.\n\nIf set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new sap.ui.layout.form.GridLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSingleColumn singleColumn} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well.","!module":"sap/ui/layout/form/GridLayout","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.GridLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.layout.form.FormLayout","!helpDescription":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using an HTML-table based grid. This can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>. Only the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code> and <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation."},"sap.ui.layout.PaneContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.PaneContainer"},"sap.ui.layout.ResponsiveSplitter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveSplitter"},"sap.ui.layout.BlockLayoutCellColorShade":{"!description":"A string type that is used inside the BlockLayoutCell to set a predefined set of color shades for the cells. The colors are defined with sap.ui.layout.BlockLayoutCellColorSet. And this is for the shades only.","ShadeB":{"!description":"Shade B","!type":"String","!category":"enum"},"!category":"static class","ShadeA":{"!description":"Shade A","!type":"String","!category":"enum"},"ShadeD":{"!description":"Shade D","!type":"String","!category":"enum"},"ShadeC":{"!description":"Shade C","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library"},"sap.ui.layout.VerticalLayout":{"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.VerticalLayout","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"},"!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nContent controls within the layout.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nIf not enabled, all controls inside are not enabled automatically.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"},"!static":false},"!constructorDescription":"Constructor for a new VerticalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/VerticalLayout","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.VerticalLayout","!category":"function","!static":false},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.VerticalLayout","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"!description":"In this layout the content controls are rendered one below the other.","!category":"class","setEnabled":{"!description":"Sets a new value for property {@link #getEnabled enabled}.\n\nIf not enabled, all controls inside are not enabled automatically.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnabled: Boolean) -> sap.ui.layout.VerticalLayout","!category":"function","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"},"!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used. If the content of the layout has a larger width than the layout, it is cut off. There is no scrolling inside the layout.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setWidth":{"!description":"Sets the width of the Vertical Layout without rerendering of the whole control, and everything inside it.","!type":"fn(width: sap.ui.core.CSSSize) -> sap.ui.layout.VerticalLayout","!category":"function","parameters":{"width":"type: sap.ui.core.CSSSize, description: The new width"},"!static":false},"!helpDescription":"In this layout the content controls are rendered one below the other.","!proto":"sap.ui.core.Control","getAccessibilityInfo":{"!type":"fn() -> Object","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.VerticalLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.BackgroundDesign":{"Solid":{"!description":"A solid background color dependent on the theme.","!type":"String","!category":"enum"},"!description":"Available Background Design.","Transparent":{"!description":"Transparent background.","!type":"String","!category":"enum"},"Translucent":{"!description":"A translucent background depending on the opacity value of the theme.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/layout/library"},"sap.ui.layout.DynamicSideContent_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.DynamicSideContent"},"sap.ui.layout.BlockRowColorSets":{"ColorSet1":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A sap.ui.layout.BlockBackgroundType.Light: Color Set 1 sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1 sap.ui.layout.BlockBackgroundType.Accent: Color Set 1 sap.ui.layout.BlockBackgroundType.Dashboard: N/A","!type":"String","!category":"enum"},"ColorSet2":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A sap.ui.layout.BlockBackgroundType.Light: Color Set 2 sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2 sap.ui.layout.BlockBackgroundType.Accent: Color Set 2 sap.ui.layout.BlockBackgroundType.Dashboard: N/A","!type":"String","!category":"enum"},"!description":"A string type that is used inside the BlockLayoutRow to set predefined set of colors the cells inside the control. Color sets depend on sap.ui.layout.BlockBackgroundType","ColorSet3":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A sap.ui.layout.BlockBackgroundType.Light: Color Set 1 sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1 sap.ui.layout.BlockBackgroundType.Accent: Color Set 3 sap.ui.layout.BlockBackgroundType.Dashboard: N/A","!type":"String","!category":"enum"},"ColorSet4":{"!description":"sap.ui.layout.BlockBackgroundType.Default: N/A sap.ui.layout.BlockBackgroundType.Light: Color Set 2 sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2 sap.ui.layout.BlockBackgroundType.Accent: Color Set 4 sap.ui.layout.BlockBackgroundType.Dashboard: N/A","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/layout/library"},"sap.ui.layout.BlockBackgroundType":{"Default":{"!description":"Background is transparent","!type":"String","!category":"enum"},"Accent":{"!description":"Background with pre-defined accent colors","!type":"String","!category":"enum"},"!description":"A string type that is used inside the BlockLayout to set predefined background color to the cells inside the control.","Dashboard":{"!description":"For applications that want to make use of e.g. charts in the Blocks, this layout type has spacings around the Blocks","!type":"String","!category":"enum"},"!category":"static class","Mixed":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.50 undefined<br>Background with bright and dark background colors","!type":"String","!category":"enum"},"Light":{"!description":"Background is with predefined light colors","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library"},"sap.ui.layout":{"moveForward":{"!description":"Optional. Moves a cell forwards so many columns as specified.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"PaneContainer":"sap.ui.layout.PaneContainer_obj","!module":"sap/ui/layout/library","defaultIndent":{"!description":"Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"visibleL":{"!description":"Defines if this Control is visible on Large screens.","!type":"Boolean","!category":"enum"},"visibleM":{"!description":"Defines if this Control is visible on Medium size screens.","!type":"Boolean","!category":"enum"},"ResponsiveFlowLayoutData":"sap.ui.layout.ResponsiveFlowLayoutData_obj","resizable":{"!description":"Determines whether the control in the splitter can be resized or not.","!type":"Boolean","!category":"enum"},"margin":{"!description":"Prevents any margin of the element if set to false.","!type":"Boolean","!category":"enum"},"SplitterLayoutData":"sap.ui.layout.SplitterLayoutData_obj","indentSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"orientation":{"!description":"Whether to split the contents horizontally (default) or vertically.","!type":"sap.ui.core.Orientation","!category":"enum"},"form":"sap.ui.layout.form","visibleS":{"!description":"Defines if this Control is visible on small screens.","!type":"Boolean","!category":"enum"},"mSize":{"!description":"Sets the width of the cell for M size of the BlockLayout.","!type":"Number","!category":"enum"},"spanS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"HorizontalLayout":"sap.ui.layout.HorizontalLayout_obj","lSize":{"!description":"Sets the width of the cell for L size of the BlockLayout.","!type":"Number","!category":"enum"},"spanL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"spanM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"!helpDescription":"SAPUI5 library with layout controls.","position":{"!description":"Optional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".","!type":"sap.ui.layout.GridPosition","!category":"enum"},"Splitter":"sap.ui.layout.Splitter_obj","demandPane":{"!description":"Determines whether the pane will be moved to the pagination","!type":"Boolean","!category":"enum"},"linebreak":{"!description":"If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.","!type":"Boolean","!category":"enum"},"indentMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"showSideContent":{"!description":"Determines whether the side content is visible or hidden.","!type":"Boolean","!category":"enum"},"visibleOnSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleS instead.<br>Deprecated. Defines if this Control is visible on small screens.","!type":"Boolean","!category":"enum"},"containerQuery":{"!description":"If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).","!type":"Boolean","!category":"enum"},"title":{"!description":"Defines the title of the cell","!type":"String","!category":"enum"},"Grid":"sap.ui.layout.Grid_obj","!category":"namespace","BlockLayoutRow":"sap.ui.layout.BlockLayoutRow_obj","GridData":"sap.ui.layout.GridData_obj","GridPosition":"sap.ui.layout.GridPosition","titleLevel":{"!description":"Defines the aria level of the title This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.","!type":"sap.ui.core.TitleLevel","!category":"enum"},"defaultSpan":{"!description":"Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridSpan","!category":"enum"},"visibleOnLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleL instead.<br>Deprecated. Defines if this Control is visible on Large screens.","!type":"Boolean","!category":"enum"},"spanMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanM instead.<br>Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"hSpacing":{"!description":"Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.","!type":"Number","!category":"enum"},"backgroundColorSet":{"!description":"The Background color set from which the background color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorSet should be used only in combination with backgroundColorShade.","!type":"sap.ui.layout.BlockLayoutCellColorSet","!category":"enum"},"!description":"SAPUI5 library with layout controls.","ResponsiveSplitter":"sap.ui.layout.ResponsiveSplitter_obj","linebreakS":{"!description":"Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"background":{"!description":"Determines the background used for the Layout","!type":"sap.ui.layout.BlockBackgroundType","!category":"enum"},"sideContentPosition":{"!description":"Determines whether the side content is on the left or on the right side of the main content.","!type":"sap.ui.layout.SideContentPosition","!category":"enum"},"fixContentSize":{"!description":"Determines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.","!type":"sap.ui.core.CSSSize","!category":"enum"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!type":"[String]","!category":"enum"},"indentLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use indentL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"sideContentVisibility":{"!description":"Determines on which breakpoints the side content is visible.","!type":"sap.ui.layout.SideContentVisibility","!category":"enum"},"linebreakL":{"!description":"Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"linebreakM":{"!description":"Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"vertical":{"!description":"Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.","!type":"Boolean","!category":"enum"},"spanXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nSee {@link sap.ui.core.RenderManager#writeInvisiblePlaceholderData RenderManager#writeInvisiblePlaceholderData} for details.","!type":"Boolean","!category":"enum"},"minWidth":{"!description":"Defines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.","!type":"Number","!category":"enum"},"sSize":{"!description":"Sets the width of the cell for S size of the BlockLayout.","!type":"Number","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"sideContentFallDown":{"!description":"Determines on which breakpoints the side content falls down below the main content.","!type":"sap.ui.layout.SideContentFallDown","!category":"enum"},"height":{"!description":"The height of the control","!type":"sap.ui.core.CSSSize","!category":"enum"},"indentS":{"!description":"Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"indentL":{"!description":"Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"indentM":{"!description":"Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"BlockLayoutCellColorSet":"sap.ui.layout.BlockLayoutCellColorSet","xlSize":{"!description":"Sets the width of the cell for XL size of the BlockLayout.","!type":"Number","!category":"enum"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"BlockBackgroundType":"sap.ui.layout.BlockBackgroundType","titleAlignment":{"!description":"Defines the alignment of the cell title","!type":"sap.ui.core.HorizontalAlign","!category":"enum"},"showMainContent":{"!description":"Determines whether the main content is visible or hidden.","!type":"Boolean","!category":"enum"},"SideContentVisibility":"sap.ui.layout.SideContentVisibility","visibleOnMedium":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use visibleM instead.<br>Deprecated. Defines if this Control is visible on Medium size screens.","!type":"Boolean","!category":"enum"},"enabled":{"!description":"If not enabled, all controls inside are not enabled automatically.","!type":"Boolean","!category":"enum"},"equalSplit":{"!description":"Defines whether the control is in equal split mode. In this mode, the side and the main content take 50:50 percent of the container on all screen sizes except for phone, where the main and side contents are switching visibility using the toggle method.","!type":"Boolean","!category":"enum"},"indent":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"width":{"!description":"Width of the <code>VerticalLayout<\/code>. If no width is set, the width of the content is used. If the content of the layout has a larger width than the layout, it is cut off. There is no scrolling inside the layout.","!type":"sap.ui.core.CSSSize","!category":"enum"},"indentXL":{"!description":"Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".","!type":"Number","!category":"enum"},"rowColorSet":{"!description":"Defines background type for that row. There might be several rows with the same type","!type":"sap.ui.layout.BlockRowColorSets","!category":"enum"},"size":{"!description":"Sets the size of the splitter content.","!type":"sap.ui.core.CSSSize","!category":"enum"},"SplitPane":"sap.ui.layout.SplitPane_obj","minSize":{"!description":"Sets the minimum size of the splitter content in px.","!type":"Number","!category":"enum"},"requiredParentWidth":{"!description":"Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.","!type":"Number","!category":"enum"},"GridSpan":"sap.ui.layout.GridSpan","spanLarge":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanL instead.<br>Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"span":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.","!type":"sap.ui.layout.GridSpan","!category":"enum"},"ResponsiveFlowLayout":"sap.ui.layout.ResponsiveFlowLayout_obj","weight":{"!description":"Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.","!type":"Number","!category":"enum"},"BackgroundDesign":"sap.ui.layout.BackgroundDesign","DynamicSideContent":"sap.ui.layout.DynamicSideContent_obj","scrollable":{"!description":"Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get aligned side by side, with horizontal scroll bar for the row.","!type":"Boolean","!category":"enum"},"fixFirst":{"!description":"Determines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or end/bottom ( if the value is \"false\").","!type":"Boolean","!category":"enum"},"BlockRowColorSets":"sap.ui.layout.BlockRowColorSets","visibleXL":{"!description":"Defines if this Control is visible on XL - extra Large screens.","!type":"Boolean","!category":"enum"},"BlockLayoutCellColorShade":"sap.ui.layout.BlockLayoutCellColorShade","vSpacing":{"!description":"Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.","!type":"Number","!category":"enum"},"linebreakable":{"!description":"Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.","!type":"Boolean","!category":"enum"},"BlockLayoutCellData":"sap.ui.layout.BlockLayoutCellData_obj","spanSmall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.1 Use spanS instead.<br>Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".","!type":"Number","!category":"enum"},"GridIndent":"sap.ui.layout.GridIndent","BlockLayout":"sap.ui.layout.BlockLayout_obj","moveBackwards":{"!description":"Optional. Moves a cell backwards so many columns as specified.","!type":"sap.ui.layout.GridIndent","!category":"enum"},"SideContentFallDown":"sap.ui.layout.SideContentFallDown","backgroundColorShade":{"!description":"The index of the background color in the color set from which the color will be selected. By using background colors from the predefined sets your colors could later be customized from the Theme Designer. <b>Note:<\/b> backgroundColorShade should be used only in combination with backgroundColorSet.","!type":"sap.ui.layout.BlockLayoutCellColorShade","!category":"enum"},"VerticalLayout":"sap.ui.layout.VerticalLayout_obj","responsive":{"!description":"If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.","!type":"Boolean","!category":"enum"},"FixFlex":"sap.ui.layout.FixFlex_obj","minFlexSize":{"!description":"Enables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger than the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.","!type":"Number","!category":"enum"},"linebreakXL":{"!description":"Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.","!type":"Boolean","!category":"enum"},"SideContentPosition":"sap.ui.layout.SideContentPosition","BlockLayoutCell":"sap.ui.layout.BlockLayoutCell_obj","allowWrapping":{"!description":"Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.","!type":"Boolean","!category":"enum"}},"sap.ui.layout.GridSpan":{"!description":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large medium small.","!category":"namespace","!module":"sap/ui/layout/library","!helpDescription":"A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large medium small."},"sap.ui.layout.form.SimpleFormLayout":{"ResponsiveGridLayout":{"!description":"Uses the <code>ResponsiveGridLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"},"!description":"Available <code>FormLayouts<\/code> used to render a <code>SimpleForm<\/code>.","ResponsiveLayout":{"!description":"Uses the <code>ResponsiveLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"},"!category":"static class","GridLayout":{"!description":"Uses the <code>GridLayout<\/code> to render the <code>SimpleForm<\/code>","!type":"String","!category":"enum"},"!module":"sap/ui/layout/library"},"sap.ui.layout.BlockLayoutRow_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayoutRow"},"sap.ui.layout.ResponsiveSplitter":{"getDefaultPane":{"!description":"ID of the element which is the current target of the association {@link #getDefaultPane defaultPane}, or <code>null<\/code>.","!type":"fn() -> sap.ui.core.ID","!category":"function","!static":false},"setRootPaneContainer":{"!description":"Sets the aggregated {@link #getRootPaneContainer rootPaneContainer}.","!type":"fn(oRootPaneContainer: sap.ui.layout.PaneContainer) -> sap.ui.layout.ResponsiveSplitter","!category":"function","parameters":{"oRootPaneContainer":"type: sap.ui.layout.PaneContainer, description: The rootPaneContainer to set"},"!static":false},"destroyRootPaneContainer":{"!description":"Destroys the rootPaneContainer in the aggregation {@link #getRootPaneContainer rootPaneContainer}.","!type":"fn() -> sap.ui.layout.ResponsiveSplitter","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new ResponsiveSplitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getRootPaneContainer rootPaneContainer} : sap.ui.layout.PaneContainer (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getDefaultPane defaultPane} : (sap.ui.core.ID | sap.ui.layout.SplitPane)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveSplitter","setDefaultPane":{"!description":"Sets the associated {@link #getDefaultPane defaultPane}.","!type":"fn(oDefaultPane: sap.ui.core.ID | sap.ui.layout.SplitPane) -> sap.ui.layout.ResponsiveSplitter","!category":"function","parameters":{"oDefaultPane":"type: sap.ui.core.ID|sap.ui.layout.SplitPane, description: ID of an element which becomes the new target of this defaultPane association; alternatively, an element instance may be given"},"!static":false},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThe height of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"!description":"A responsive splitter which divides the application into several areas. <h3>Overview<\/h3> The responsive splitter layout structures complex applications into defined areas. These areas may be resizable and are either distributed across one or multiple screen areas, some of which may also be off-canvas.\n\nThe control is intended for developing administrative tools and applications. <h3>Structure<\/h3> The responsive splitter holds the following hierarchy of containers and controls: <ul> <li>{@link sap.ui.layout.PaneContainer Pane Container} - holds one or more Split Panes and determines the pane orientation. The pane which is stored in <code>rootPaneContainer<\/code> holds all other pane containers and split panes.<\/li> <li>{@link sap.ui.layout.SplitPane Split Pane} - independent containers that may interact with one another. Each pane can hold only one control.<\/li> <\/ul> <h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>The application has to display several areas side by side that must be resizable.<\/li> <li>The application must work on a range of different devices in a responsive manner.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>As soon as views are in the off-canvas mode, the pagination bar at the bottom of the application allows the user to switch between them.<\/li> <li>On touch-enabled devices, the splitters show explicit handles with larger touch areas.<\/li> <li>Double-clicking on a splitter will collapse or expand it back to its original position.<\/li> <\/ul>\n\n<b>Note:<\/b> We don't recommend dynamically inserting/removing panes into/from the PaneContainer since this might lead to inconsistent layout. If it is necessary, you need to ensure the sum of all sizes of the SplitPanes doesn't exceed the width of the PaneContainer.","getRootPaneContainer":{"!description":"Gets content of aggregation {@link #getRootPaneContainer rootPaneContainer}.\n\nThe root PaneContainer of the ResponsiveSplitter","!type":"fn() -> sap.ui.layout.PaneContainer","!category":"function","!static":false},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThe height of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.layout.ResponsiveSplitter","!category":"function","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"},"!static":false},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThe width of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThe width of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.ResponsiveSplitter","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"!helpDescription":"A responsive splitter which divides the application into several areas. <h3>Overview<\/h3> The responsive splitter layout structures complex applications into defined areas. These areas may be resizable and are either distributed across one or multiple screen areas, some of which may also be off-canvas.\n\nThe control is intended for developing administrative tools and applications. <h3>Structure<\/h3> The responsive splitter holds the following hierarchy of containers and controls: <ul> <li>{@link sap.ui.layout.PaneContainer Pane Container} - holds one or more Split Panes and determines the pane orientation. The pane which is stored in <code>rootPaneContainer<\/code> holds all other pane containers and split panes.<\/li> <li>{@link sap.ui.layout.SplitPane Split Pane} - independent containers that may interact with one another. Each pane can hold only one control.<\/li> <\/ul> <h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>The application has to display several areas side by side that must be resizable.<\/li> <li>The application must work on a range of different devices in a responsive manner.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>As soon as views are in the off-canvas mode, the pagination bar at the bottom of the application allows the user to switch between them.<\/li> <li>On touch-enabled devices, the splitters show explicit handles with larger touch areas.<\/li> <li>Double-clicking on a splitter will collapse or expand it back to its original position.<\/li> <\/ul>\n\n<b>Note:<\/b> We don't recommend dynamically inserting/removing panes into/from the PaneContainer since this might lead to inconsistent layout. If it is necessary, you need to ensure the sum of all sizes of the SplitPanes doesn't exceed the width of the PaneContainer.","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveSplitter.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.Splitter":{"addContentArea":{"!description":"Adds some contentArea to the aggregation {@link #getContentAreas contentAreas}.","!type":"fn(oContentArea: sap.ui.core.Control) -> sap.ui.layout.Splitter","!category":"function","parameters":{"oContentArea":"type: sap.ui.core.Control, description: The contentArea to add; if empty, nothing is inserted"},"!static":false},"removeContentArea":{"!description":"Removes a contentArea from the aggregation {@link #getContentAreas contentAreas}.","!type":"fn(vContentArea: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vContentArea":"type: int|string|sap.ui.core.Control, description: The contentArea to remove or its index or id"},"!static":false},"disableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables recalculation and resize of the splitter contents while dragging the splitter bar. This means that the contents are resized only once after moving the splitter bar.","!type":"fn()","!category":"function","!static":false},"disableKeyboardSupport":{"!description":"Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars to non-focussable elements.","!type":"fn()","!category":"function","!static":false},"!module":"sap/ui/layout/Splitter","insertContentArea":{"!description":"Inserts a contentArea into the aggregation {@link #getContentAreas contentAreas}.","!type":"fn(oContentArea: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.Splitter","!category":"function","parameters":{"oContentArea":"type: sap.ui.core.Control, description: The contentArea to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the contentArea should be inserted at; for a negative value of <code>iIndex<\/code>, the contentArea is inserted at position 0; for a value greater than the current size of the aggregation, the contentArea is inserted at the last position"},"!static":false},"enableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables the resize handler for this control, this leads to an automatic resize of the contents whenever the control changes its size. The resize handler is enabled in every control instance by default. For performance reasons this behavior can be disabled by calling disableAutoResize()","!type":"fn(bTemporarily?: Boolean)","!category":"function","parameters":{"bTemporarily":"type: boolean, description: Only enables autoResize if it was previously disabled temporarily (used for live resize)"},"!static":false},"getCalculatedSizes":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Returns the current actual content sizes as pixel value - these values can change with every resize.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThe height of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"!category":"class","setOrientation":{"!description":"Sets a new value for property {@link #getOrientation orientation}.\n\nWhether to split the contents horizontally (default) or vertically.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Horizontal<\/code>.","!type":"fn(sOrientation: sap.ui.core.Orientation) -> sap.ui.layout.Splitter","!category":"function","parameters":{"sOrientation":"type: sap.ui.core.Orientation, description: New value for property <code>orientation<\/code>"},"!static":false},"disableAutoResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Disables the resize handler for this control, this leads to an automatic resize of the contents whenever the control changes its size. The resize handler is enabled in every control instance by default. For performance reasons this behavior can be disabled by calling disableAutoResize()","!type":"fn(bTemporarily?: Boolean)","!category":"function","parameters":{"bTemporarily":"type: boolean, description: Only disable autoResize temporarily (used for live resize), so that the previous status can be restored afterwards"},"!static":false},"destroyContentAreas":{"!description":"Destroys all the contentAreas in the aggregation {@link #getContentAreas contentAreas}.","!type":"fn() -> sap.ui.layout.Splitter","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThe width of the control\n\nDefault value is <code>100%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThe width of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"triggerResize":{"!description":"This method triggers a resize on the Splitter - meaning it forces the Splitter to recalculate all sizes. This method should only be used in rare cases, for example when the CSS that defines the sizes of the splitter bars changes without triggering a rerendering of the splitter.","!type":"fn(forceDirectly?: Boolean)","!category":"function","parameters":{"forceDirectly":"type: boolean, description: Do not delay the resize, trigger it right now."},"!static":false},"fireResize":{"!description":"Fires event {@link #event:resize resize} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.layout.Splitter","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getOrientation":{"!description":"Gets current value of property {@link #getOrientation orientation}.\n\nWhether to split the contents horizontally (default) or vertically.\n\nDefault value is <code>Horizontal<\/code>.","!type":"fn() -> sap.ui.core.Orientation","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getContentAreas":{"!description":"Gets content of aggregation {@link #getContentAreas contentAreas}.\n\nThe content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Splitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContentAreas contentAreas} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:resize resize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","attachResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:resize resize} event of this <code>sap.ui.layout.Splitter<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.layout.Splitter<\/code> itself.\n\nEvent is fired when contents are resized.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.layout.Splitter","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.layout.Splitter<\/code> itself"},"!static":false},"!description":"A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","enableLiveResize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface<br>Enables recalculation and resize of the splitter contents while dragging the splitter bar. This means that the contents are resized several times per second when moving the splitter bar.","!type":"fn()","!category":"function","!static":false},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThe height of the control\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.layout.Splitter","!category":"function","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"},"!static":false},"removeAllContentAreas":{"!description":"Removes all the controls from the aggregation {@link #getContentAreas contentAreas}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"detachResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:resize resize} event of this <code>sap.ui.layout.Splitter<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.layout.Splitter","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"enableKeyboardSupport":{"!description":"Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars focussable elements.","!type":"fn()","!category":"function","!static":false},"indexOfContentArea":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContentAreas contentAreas}. and returns its index if found or -1 otherwise.","!type":"fn(oContentArea: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContentArea":"type: sap.ui.core.Control, description: The contentArea whose index is looked for"},"!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.Splitter.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.ResponsiveLayout":{"!description":"The <code>ResponsiveLayout<\/code> renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used. The responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new sap.ui.layout.form.ResponsiveLayout.","!module":"sap/ui/layout/form/ResponsiveLayout","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.ResponsiveLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.layout.form.FormLayout","!helpDescription":"The <code>ResponsiveLayout<\/code> renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used. The responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation."},"sap.ui.layout.form":{"columnsXL":{"!description":"Form columns for extra large size. The number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>columnsL<\/code> value is used (from the backward compatibility reasons).","!type":"Number","!category":"enum"},"emptySpanXL":{"!description":"Number of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL<\/code> value is used (from the backward compatibility reasons).","!type":"Number","!category":"enum"},"breakpointXL":{"!description":"Breakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nSee {@link sap.ui.core.RenderManager#writeInvisiblePlaceholderData RenderManager#writeInvisiblePlaceholderData} for details.","!type":"Boolean","!category":"enum"},"halfGrid":{"!description":"If set, the container takes half the width of the <code>Form<\/code> (8 cells), if not it takes the full width (16 cells). If the <code>GridLayout<\/code> is set to <code>singleColumn<\/code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.","!type":"Boolean","!category":"enum"},"minWidth":{"!description":"The overall minimum width in pixels that is used for the <code>SimpleForm<\/code>.\n\nIf the available width is below the given <code>minWidth<\/code> the <code>SimpleForm<\/code> will create a new row for the next group (<code>FormContainer<\/code>). The default value is -1, meaning that inner groups (<code>FormContainers<\/code>) will be stacked until <code>maxContainerCols<\/code> is reached, irrespective of whether a <code>width<\/code> is reached or the available parents width is reached.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"vCells":{"!description":"Number of cells in vertical direction.\n\n<b>Note:<\/b> This property has no effect on labels.","!type":"Number","!category":"enum"},"labelMinWidth":{"!description":"Specifies the min-width in pixels of the label in all form rows.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"labelSpanXL":{"!description":"Default span for labels in extra large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL<\/code> value is used (from the backward compatibility reasons).","!type":"Number","!category":"enum"},"GridLayout":"sap.ui.layout.form.GridLayout_obj","FormContainer":"sap.ui.layout.form.FormContainer_obj","GridContainerData":"sap.ui.layout.form.GridContainerData_obj","columnsM":{"!description":"Form columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"columnsL":{"!description":"Form columns for large size. The number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"ResponsiveGridLayout":"sap.ui.layout.form.ResponsiveGridLayout_obj","singleColumn":{"!description":"If set, the grid renders only one <code>FormContainer<\/code> per column. That means one <code>FormContainer<\/code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer<\/code> can use the full width of the grid or two <code>FormContainers<\/code> can be placed beside each other. In this case the whole grid has 16 cells per row.","!type":"Boolean","!category":"enum"},"Form":"sap.ui.layout.form.Form_obj","layout":{"!description":"The <code>FormLayout<\/code> that is used to render the <code>SimpleForm<\/code>.\n\nWe recommend using the <code>ResponsiveGridLayout<\/code> for rendering a <code>SimpleForm<\/code>, as its responsiveness uses the space available in the best way possible.","!type":"sap.ui.layout.form.SimpleFormLayout","!category":"enum"},"!category":"namespace","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"FormLayout":"sap.ui.layout.form.FormLayout_obj","emptySpanL":{"!description":"Number of grid cells that are empty at the end of each line on large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"backgroundDesign":{"!description":"Specifies the background color of the <code>SimpleForm<\/code> content.\n\nThe visualization of the different options depends on the used theme.","!type":"sap.ui.layout.BackgroundDesign","!category":"enum"},"singleContainerFullSize":{"!description":"If the <code>Form<\/code> contains only one single <code>FormContainer<\/code> and this property is set, the <code>FormContainer<\/code> is displayed using the full size of the <code>Form<\/code>. In this case the properties <code>columnsL<\/code> and <code>columnsM<\/code> are ignored.\n\nIn all other cases the <code>FormContainer<\/code> is displayed in the size of one column.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Boolean","!category":"enum"},"emptySpanM":{"!description":"Number of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"hCells":{"!description":"Number of cells in horizontal direction.\n\nIf set to <code>auto<\/code>, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\n\nIf set to <code>full<\/code>, only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above.\n\n<b>Note:<\/b> For labels, the full size setting has no effect.","!type":"sap.ui.layout.form.GridElementCells","!category":"enum"},"labelSpanM":{"!description":"Default span for labels in medium size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is used for full-size <code>FormContainers<\/code>. If more than one <code>FormContainer<\/code> is in one line, <code>labelSpanL<\/code> is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"maxContainerCols":{"!description":"The maximum amount of groups (<code>FormContainers<\/code>) per row that is used before a new row is started.\n\n<b>Note:<\/b> If a <code>ResponsiveGridLayout<\/code> is used as a <code>layout<\/code>, this property is not used. Please use the properties <code>ColumnsL<\/code> and <code>ColumnsM<\/code> in this case.","!type":"Number","!category":"enum"},"labelSpanL":{"!description":"Default span for labels in large size.\n\n<b>Note:<\/b> If <code>adjustLabelSpanThis<\/code> is set, this property is only used if more than 1 <code>FormContainer<\/code> is in one line. If only 1 <code>FormContainer<\/code> is in the line, then the <code>labelSpanM<\/code> value is used.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"ResponsiveLayout":"sap.ui.layout.form.ResponsiveLayout_obj","width":{"!description":"Width of the form.","!type":"sap.ui.core.CSSSize","!category":"enum"},"emptySpanS":{"!description":"Number of grid cells that are empty at the end of each line on small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"breakpointL":{"!description":"Breakpoint between Medium size and Large size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"GridElementData":"sap.ui.layout.form.GridElementData_obj","breakpointM":{"!description":"Breakpoint between Small size and Medium size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"expanded":{"!description":"Container is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.","!type":"Boolean","!category":"enum"},"SimpleFormLayout":"sap.ui.layout.form.SimpleFormLayout","editable":{"!description":"Applies a device-specific and theme-specific line-height to the form rows if the form has editable content. If set, all (not only the editable) rows of the form will get the line height of editable fields.\n\nThe accessibility <code>aria-readonly<\/code> attribute is set according to this property.\n\n<b>Note:<\/b> The setting of the property has no influence on the editable functionality of the form's content.","!type":"Boolean","!category":"enum"},"GridElementCells":"sap.ui.layout.form.GridElementCells","adjustLabelSpan":{"!description":"If set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the number of <code>FormContainers<\/code> in one row. If only one <code>FormContainer<\/code> is displayed in one row, <code>labelSpanM<\/code> is used to define the size of the label. This is the same for medium and large <code>Forms<\/code>. This is done to align the labels on forms where full-size <code>FormContainers<\/code> and multiple-column rows are used in the same <code>Form<\/code> (because every <code>FormContainer<\/code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL<\/code> and <code>labelSpanM<\/code> are dependent on the <code>Form<\/code> size. The number of <code>FormContainers<\/code> doesn't matter in this case.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Boolean","!category":"enum"},"FormElement":"sap.ui.layout.form.FormElement_obj","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!type":"[String]","!category":"enum"},"SimpleForm":"sap.ui.layout.form.SimpleForm_obj","labelSpanS":{"!description":"Default span for labels in small size.\n\n<b>Note:<\/b> This property is only used if a <code>ResponsiveGridLayout<\/code> is used as a layout.","!type":"Number","!category":"enum"},"expandable":{"!description":"Defines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.","!type":"Boolean","!category":"enum"}},"sap.ui.layout.SplitterLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.SplitterLayoutData"},"sap.ui.layout.SplitterLayoutData":{"setSize":{"!description":"Sets a new value for property {@link #getSize size}.\n\nSets the size of the splitter content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sSize: sap.ui.core.CSSSize) -> sap.ui.layout.SplitterLayoutData","!category":"function","parameters":{"sSize":"type: sap.ui.core.CSSSize, description: New value for property <code>size<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new SplitterLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getSize size} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinSize minSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/layout/SplitterLayoutData","getMinSize":{"!description":"Gets current value of property {@link #getMinSize minSize}.\n\nSets the minimum size of the splitter content in px.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getResizable":{"!description":"Gets current value of property {@link #getResizable resizable}.\n\nDetermines whether the control in the splitter can be resized or not.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setMinSize":{"!description":"Sets a new value for property {@link #getMinSize minSize}.\n\nSets the minimum size of the splitter content in px.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iMinSize: Number) -> sap.ui.layout.SplitterLayoutData","!category":"function","parameters":{"iMinSize":"type: int, description: New value for property <code>minSize<\/code>"},"!static":false},"!category":"class","setResizable":{"!description":"Sets a new value for property {@link #getResizable resizable}.\n\nDetermines whether the control in the splitter can be resized or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResizable: Boolean) -> sap.ui.layout.SplitterLayoutData","!category":"function","parameters":{"bResizable":"type: boolean, description: New value for property <code>resizable<\/code>"},"!static":false},"getSize":{"!description":"Gets current value of property {@link #getSize size}.\n\nSets the size of the splitter content.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.LayoutData","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.SplitterLayoutData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.FormElement_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.FormElement"},"sap.ui.layout.form.ResponsiveGridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.ResponsiveGridLayout"},"sap.ui.layout.BlockLayoutCell_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayoutCell"},"sap.ui.layout.BlockLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.BlockLayout"},"sap.ui.layout.FixFlex_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.FixFlex"},"sap.ui.layout.form.FormContainer":{"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"insertFormElement":{"!description":"Inserts a formElement into the aggregation {@link #getFormElements formElements}.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement, iIndex: Number) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: The formElement to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the formElement should be inserted at; for a negative value of <code>iIndex<\/code>, the formElement is inserted at position 0; for a value greater than the current size of the aggregation, the formElement is inserted at the last position"},"!static":false},"getExpanded":{"!description":"Gets current value of property {@link #getExpanded expanded}.\n\nContainer is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/layout/form/FormContainer","isVisible":{"!description":"Determines if the <code>FormContainer<\/code> is visible or not. Per default it just returns the value of the <code>visible<\/code> property. But this might be overwritten by inherited elements.\n\nFor rendering by <code>FormLayouts<\/code> this function has to be used instead of <code>getVisible<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!category":"class","getTitle":{"!description":"Gets content of aggregation {@link #getTitle title}.\n\nTitle of the <code>FormContainer<\/code>. Can either be a <code>Title<\/code> element or a string. If a <code>Title<\/code> element is used, the style of the title can be set.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored.","!type":"fn() -> sap.ui.core.Title | String","!category":"function","!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setExpandable":{"!description":"Sets a new value for property {@link #getExpandable expandable}.\n\nDefines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bExpandable: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"bExpandable":"type: boolean, description: New value for property <code>expandable<\/code>"},"!static":false},"destroyFormElements":{"!description":"Destroys all the formElements in the aggregation {@link #getFormElements formElements}.","!type":"fn() -> sap.ui.layout.form.FormContainer","!category":"function","!static":false},"indexOfFormElement":{"!description":"Checks for the provided <code>sap.ui.layout.form.FormElement<\/code> in the aggregation {@link #getFormElements formElements}. and returns its index if found or -1 otherwise.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> Number","!category":"function","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: The formElement whose index is looked for"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"},"!static":false},"addFormElement":{"!description":"Adds some formElement to the aggregation {@link #getFormElements formElements}.","!type":"fn(oFormElement: sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"oFormElement":"type: sap.ui.layout.form.FormElement, description: The formElement to add; if empty, nothing is inserted"},"!static":false},"getExpandable":{"!description":"Gets current value of property {@link #getExpandable expandable}.\n\nDefines if the <code>FormContainer<\/code> is expandable.\n\n<b>Note:<\/b> The expander icon will only be shown if a <code>title<\/code> is set for the <code>FormContainer<\/code>.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new sap.ui.layout.form.FormContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpanded expanded} : boolean (default: true)<\/li>\n<li>{@link #getExpandable expandable} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormElements formElements} : sap.ui.layout.form.FormElement[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getToolbar":{"!description":"Gets content of aggregation {@link #getToolbar toolbar}.\n\nToolbar of the <code>FormContainer<\/code>.\n\n<b>Note:<\/b> If a <code>Toolbar<\/code> is used, the <code>Title<\/code> is ignored. If a title is needed inside the <code>Toolbar<\/code> it must be added at content to the <code>Toolbar<\/code>. In this case add the <code>Title<\/code> to the <code>ariaLabelledBy<\/code> association.","!type":"fn() -> sap.ui.core.Toolbar","!category":"function","!static":false},"setToolbar":{"!description":"Sets the aggregated {@link #getToolbar toolbar}.","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"},"!static":false},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.","!type":"fn() -> sap.ui.layout.form.FormContainer","!category":"function","!static":false},"destroyTitle":{"!description":"Destroys the title in the aggregation {@link #getTitle title}.","!type":"fn() -> sap.ui.layout.form.FormContainer","!category":"function","!static":false},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nIf set to <code>false<\/code>, the <code>FormContainer<\/code> is not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"!description":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>. The rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","setTitle":{"!description":"Sets the aggregated {@link #getTitle title}.","!type":"fn(vTitle: sap.ui.core.Title | String) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"vTitle":"type: sap.ui.core.Title|string, description: The title to set"},"!static":false},"setExpanded":{"!description":"Sets a new value for property {@link #getExpanded expanded}.\n\nContainer is expanded.\n\n<b>Note:<\/b> This property only works if <code>expandable<\/code> is set to <code>true<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bExpanded: Boolean) -> sap.ui.layout.form.FormContainer","!category":"function","parameters":{"bExpanded":"type: boolean, description: New value for property <code>expanded<\/code>"},"!static":false},"removeAllFormElements":{"!description":"Removes all the controls from the aggregation {@link #getFormElements formElements}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeFormElement":{"!description":"Removes a formElement from the aggregation {@link #getFormElements formElements}.","!type":"fn(vFormElement: Number | String | sap.ui.layout.form.FormElement) -> sap.ui.layout.form.FormElement","!category":"function","parameters":{"vFormElement":"type: int|string|sap.ui.layout.form.FormElement, description: The formElement to remove or its index or id"},"!static":false},"getFormElements":{"!description":"Gets content of aggregation {@link #getFormElements formElements}.\n\nThe <code>FormElements<\/code> contain the content (labels and fields) of the <code>FormContainers<\/code>.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!proto":"sap.ui.core.Element","!helpDescription":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>. The rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormContainer.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.GridElementCells":{"!description":"A string that defines the number of used cells in a <code>GridLayout<\/code>. This can be a number from 1 to 16, \"auto\" or \"full\". If set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells. If set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect.","!category":"namespace","!module":"sap/ui/layout/library","!helpDescription":"A string that defines the number of used cells in a <code>GridLayout<\/code>. This can be a number from 1 to 16, \"auto\" or \"full\". If set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells. If set to \"full\" only one field is allowed within the <code>FormElement<\/code>. It gets the full width of the row and the label is displayed above. <b>Note:<\/b> For labels full size has no effect."},"sap.ui.layout.BlockLayoutRow":{"addAccentCell":{"!description":"Adds some accentCell into the association {@link #getAccentCells accentCells}.","!type":"fn(vAccentCell: sap.ui.core.ID | sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"vAccentCell":"type: sap.ui.core.ID|sap.ui.layout.BlockLayoutCell, description: The accentCells to add; if empty, nothing is inserted"},"!static":false},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: The content to add; if empty, nothing is inserted"},"!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nThe content cells to be included in the row.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setScrollable":{"!description":"Sets a new value for property {@link #getScrollable scrollable}.\n\nSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get aligned side by side, with horizontal scroll bar for the row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bScrollable: Boolean) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"bScrollable":"type: boolean, description: New value for property <code>scrollable<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.layout.BlockLayoutCell<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.layout.BlockLayoutCell) -> sap.ui.layout.BlockLayoutCell","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.layout.BlockLayoutCell, description: The content to remove or its index or id"},"!static":false},"getAccentCells":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAccentCells accentCells}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new BlockLayoutRow.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getScrollable scrollable} : boolean (default: false)<\/li>\n<li>{@link #getRowColorSet rowColorSet} : sap.ui.layout.BlockRowColorSets<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutCell[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAccentCells accentCells} : (sap.ui.core.ID | sap.ui.layout.BlockLayoutCell)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/BlockLayoutRow","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.BlockLayoutRow","!category":"function","!static":false},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.layout.BlockLayoutCell, iIndex: Number) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"oContent":"type: sap.ui.layout.BlockLayoutCell, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"!description":"The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout cells. The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.","removeAllAccentCells":{"!description":"Removes all the controls in the association named {@link #getAccentCells accentCells}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeAccentCell":{"!description":"Removes an accentCell from the association named {@link #getAccentCells accentCells}.","!type":"fn(vAccentCell: Number | sap.ui.core.ID | sap.ui.layout.BlockLayoutCell) -> sap.ui.core.ID","!category":"function","parameters":{"vAccentCell":"type: int|sap.ui.core.ID|sap.ui.layout.BlockLayoutCell, description: The accentCell to be removed or its index or ID"},"!static":false},"!category":"class","getRowColorSet":{"!description":"Gets current value of property {@link #getRowColorSet rowColorSet}.\n\nDefines background type for that row. There might be several rows with the same type","!type":"fn() -> sap.ui.layout.BlockRowColorSets","!category":"function","!static":false},"getScrollable":{"!description":"Gets current value of property {@link #getScrollable scrollable}.\n\nSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get aligned side by side, with horizontal scroll bar for the row.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setRowColorSet":{"!description":"Changes dynamically row's color set Note: this might invalidate cells inside and also change color sets of the other BlockLayoutRow-s below it.","!type":"fn(sType: sap.ui.layout.BlockRowColorSets) -> sap.ui.layout.BlockLayoutRow","!category":"function","parameters":{"sType":"type: sap.ui.layout.BlockRowColorSets, description: undefined"},"!static":false},"!helpDescription":"The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout cells. The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayoutRow.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.form.FormElement":{"getLabelControl":{"!description":"Returns the <code>Label<\/code> of the <code>FormElement<\/code>, even if the <code>Label<\/code> is assigned as string. The <code>FormLayout<\/code> needs the information of the label to render the <code>Form<\/code>.","!type":"fn() -> sap.ui.core.Label","!category":"function","!static":false},"removeField":{"!description":"Removes a field from the aggregation {@link #getFields fields}.","!type":"fn(vField: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vField":"type: int|string|sap.ui.core.Control, description: The field to remove or its index or id"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.layout.form.FormElement","!category":"function","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"},"!static":false},"addField":{"!description":"Adds some field to the aggregation {@link #getFields fields}.","!type":"fn(oField: sap.ui.core.Control) -> sap.ui.layout.form.FormElement","!category":"function","parameters":{"oField":"type: sap.ui.core.Control, description: The field to add; if empty, nothing is inserted"},"!static":false},"getFields":{"!description":"Gets content of aggregation {@link #getFields fields}.\n\nFormular controls that belong together to be displayed in one row of a <code>Form<\/code>.\n\n<b>Note:<\/b> Do not put any layout controls in here. This could destroy the visual layout, keyboard support and screen-reader support.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeAllFields":{"!description":"Removes all the controls from the aggregation {@link #getFields fields}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setLabel":{"!description":"Sets the aggregated {@link #getLabel label}.","!type":"fn(vLabel: sap.ui.core.Label | String) -> sap.ui.layout.form.FormElement","!category":"function","parameters":{"vLabel":"type: sap.ui.core.Label|string, description: The label to set"},"!static":false},"!constructorDescription":"Constructor for a new sap.ui.layout.form.FormElement.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Label|string<\/li>\n<li>{@link #getFields fields} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/layout/form/FormElement","getLabel":{"!description":"Gets content of aggregation {@link #getLabel label}.\n\nLabel of the fields. Can either be a <code>Label<\/code> control or a string. If a <code>Label<\/code> control is used, the properties of the <code>Label<\/code> can be set. If no assignment between <code>Label<\/code> and the fields is set via (<code>labelFor<\/code> property of the <code>Label<\/code>), it will be done automatically by the <code>FormElement<\/code>. In this case the <code>Label<\/code> is assigned to the fields of the <code>FormElement<\/code>.","!type":"fn() -> sap.ui.core.Label | String","!category":"function","!static":false},"destroyLabel":{"!description":"Destroys the label in the aggregation {@link #getLabel label}.","!type":"fn() -> sap.ui.layout.form.FormElement","!category":"function","!static":false},"destroyFields":{"!description":"Destroys all the fields in the aggregation {@link #getFields fields}.","!type":"fn() -> sap.ui.layout.form.FormElement","!category":"function","!static":false},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nIf set to <code>false<\/code>, the <code>FormElement<\/code> is not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"isVisible":{"!description":"Determines if the <code>FormElement<\/code> is visible or not. Per default it just returns the value of the <code>visible<\/code> property. But this might be overwritten by inherited elements.\n\nFor rendering by <code>FormLayouts<\/code> this function has to be used instead of <code>getVisible<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!description":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>. A <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","!category":"class","indexOfField":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getFields fields}. and returns its index if found or -1 otherwise.","!type":"fn(oField: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oField":"type: sap.ui.core.Control, description: The field whose index is looked for"},"!static":false},"insertField":{"!description":"Inserts a field into the aggregation {@link #getFields fields}.","!type":"fn(oField: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.form.FormElement","!category":"function","parameters":{"oField":"type: sap.ui.core.Control, description: The field to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the field should be inserted at; for a negative value of <code>iIndex<\/code>, the field is inserted at position 0; for a value greater than the current size of the aggregation, the field is inserted at the last position"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.form.FormElement.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!helpDescription":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>. A <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","!proto":"sap.ui.core.Element"},"sap.ui.layout.ResponsiveFlowLayout":{"addContent":{"!description":"Adds content. This function needs to be overridden to prevent any rendering while some content is still being added.","!type":"fn(oContent: sap.ui.core.Control)","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content that should be added to the layout"},"!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nAdded content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setResponsive":{"!description":"Sets a new value for property {@link #getResponsive responsive}.\n\nIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResponsive: Boolean) -> sap.ui.layout.ResponsiveFlowLayout","!category":"function","parameters":{"bResponsive":"type: boolean, description: New value for property <code>responsive<\/code>"},"!static":false},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes content. This function needs to be overridden to prevent any rendering while some content is still being added.","!type":"fn(oContent: Number | String | sap.ui.core.Control)","!category":"function","parameters":{"oContent":"type: int|string|sap.ui.core.Control, description: The content that should be removed from the layout"},"!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new ResponsiveFlowLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResponsive responsive} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/ResponsiveFlowLayout","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.ResponsiveFlowLayout","!category":"function","!static":false},"insertContent":{"!description":"Inserts content. This function needs to be overridden to prevent any rendering while some content is still being added.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number)","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content that should be inserted to the layout","iIndex":"type: int, description: The index where the content should be inserted into"},"!static":false},"!description":"This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.","addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.layout.ResponsiveFlowLayout","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"!category":"class","getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getResponsive":{"!description":"Gets current value of property {@link #getResponsive responsive}.\n\nIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.HorizontalLayout":{"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.layout.HorizontalLayout","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"},"!static":false},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nThe controls inside this layout","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!type":"fn(oContent: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"},"!static":false},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"},"!static":false},"!constructorDescription":"Constructor for a new HorizontalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAllowWrapping allowWrapping} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/layout/HorizontalLayout","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!type":"fn() -> sap.ui.layout.HorizontalLayout","!category":"function","!static":false},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.layout.HorizontalLayout","!category":"function","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"},"!static":false},"!description":"A layout that provides support for horizontal alignment of controls","setAllowWrapping":{"!description":"Sets a new value for property {@link #getAllowWrapping allowWrapping}.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bAllowWrapping: Boolean) -> sap.ui.layout.HorizontalLayout","!category":"function","parameters":{"bAllowWrapping":"type: boolean, description: New value for property <code>allowWrapping<\/code>"},"!static":false},"!category":"class","getAllowWrapping":{"!description":"Gets current value of property {@link #getAllowWrapping allowWrapping}.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"A layout that provides support for horizontal alignment of controls","!proto":"sap.ui.core.Control","getAccessibilityInfo":{"!type":"fn() -> Object","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.HorizontalLayout.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.BlockLayoutCellData":{"getMSize":{"!description":"Gets current value of property {@link #getMSize mSize}.\n\nSets the width of the cell for M size of the BlockLayout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setSSize":{"!description":"Sets a new value for property {@link #getSSize sSize}.\n\nSets the width of the cell for S size of the BlockLayout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iSSize: Number) -> sap.ui.layout.BlockLayoutCellData","!category":"function","parameters":{"iSSize":"type: int, description: New value for property <code>sSize<\/code>"},"!static":false},"setSize":{"!description":"Sets width of the cell to all sizes if the width is specified.","!type":"fn(iValue: undefined) -> sap.ui.layout.BlockLayoutCellData","!category":"function","parameters":{"iValue":"type: undefined, description: undefined"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.layout.BlockLayoutCellData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getXlSize":{"!description":"Gets current value of property {@link #getXlSize xlSize}.\n\nSets the width of the cell for XL size of the BlockLayout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setMSize":{"!description":"Sets a new value for property {@link #getMSize mSize}.\n\nSets the width of the cell for M size of the BlockLayout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iMSize: Number) -> sap.ui.layout.BlockLayoutCellData","!category":"function","parameters":{"iMSize":"type: int, description: New value for property <code>mSize<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new BlockLayoutCellData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSSize sSize} : int (default: 1)<\/li>\n<li>{@link #getMSize mSize} : int (default: 1)<\/li>\n<li>{@link #getLSize lSize} : int (default: 1)<\/li>\n<li>{@link #getXlSize xlSize} : int (default: 1)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/layout/BlockLayoutCellData","getLSize":{"!description":"Gets current value of property {@link #getLSize lSize}.\n\nSets the width of the cell for L size of the BlockLayout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setLSize":{"!description":"Sets a new value for property {@link #getLSize lSize}.\n\nSets the width of the cell for L size of the BlockLayout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iLSize: Number) -> sap.ui.layout.BlockLayoutCellData","!category":"function","parameters":{"iLSize":"type: int, description: New value for property <code>lSize<\/code>"},"!static":false},"getSSize":{"!description":"Gets current value of property {@link #getSSize sSize}.\n\nSets the width of the cell for S size of the BlockLayout.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!description":"Holds layout data for the BlockLayoutCells contents.","setXlSize":{"!description":"Sets a new value for property {@link #getXlSize xlSize}.\n\nSets the width of the cell for XL size of the BlockLayout.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(iXlSize: Number) -> sap.ui.layout.BlockLayoutCellData","!category":"function","parameters":{"iXlSize":"type: int, description: New value for property <code>xlSize<\/code>"},"!static":false},"!category":"class","!helpDescription":"Holds layout data for the BlockLayoutCells contents.","!proto":"sap.ui.core.LayoutData","getMetadata":{"!description":"Returns a metadata object for class sap.ui.layout.BlockLayoutCellData.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.layout.Splitter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.Splitter"},"sap.ui.layout.form.GridLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.form.GridLayout"},"sap.ui.layout.ResponsiveFlowLayout_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.layout.ResponsiveFlowLayout"}},"!name":"sap.ui.layout","!version":"1.18.0"}