{"!version":"1.18.0","Templates":[{"template":"new sap.ui.layout.BlockLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tbackground: ${sap.ui.layout.BlockBackgroundType.Default}, // sap.ui.layout.BlockBackgroundType\n\t\tcontent: [${content}] // sap.ui.layout.BlockLayoutRow[]\n\t}\n)\n","module":"sap/ui/layout/BlockLayout","static":"true","extends":"sap.ui.core.Control","helpDescription":"The BlockLayout is used to display several objects in a section-based manner. <h3>Overview<\/h3> The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements. By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements. <h3>Structure<\/h3> The BlockLayout comes in five predefined types for background colors: <ul> <li>Layout only (default) - a layout scheme and no background colors<\/li> <li>Bright - a layout scheme with bright colors<\/li> <li>Accent - a layout scheme with four pre-defined color sets<\/li> <li>Dashboard - a layout scheme with additional borders and no background colors<\/li> <li>Mixed - a layout scheme with a mix of light and dark colors<\/li> <\/ul> Background colors are attached directly to the blocks of the layout.\n\nSpecial full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\n\n<b>Note:<\/b> With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 10 pre-defined color sets, each with 4 different shades. The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set <code>backgroundColorSet<\/code> (main color) and <code>backgroundColorShade<\/code> (shade).\n\n<h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>You want to create a catalogue-like page with sections of blocks.<\/li> <li>The BlockLayout is intended for developing administrative tools and applications.<\/li> <\/ul> <h4>When not to use<\/h4> <ul> <li>You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPageLayout object page} or {@link sap.f.DynamicPage dynamic page} instead.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.<\/li> <li> On small screens all blocks will wrap to a single scrollable column<\/li> <\/ul>","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"BlockLayout(sId?, mSettings?) : sap.ui.layout.BlockLayout","name":"sap.ui.layout.BlockLayout","prefix":"BlockLayout","Experimental":false,"constructorDescription":"Constructor for a new BlockLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackground background} : sap.ui.layout.BlockBackgroundType (default: Default)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutRow[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.BlockLayoutCell(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\ttitle: \"${title}\", // string\n\t\ttitleAlignment: ${sap.ui.core.HorizontalAlign.Begin}, // sap.ui.core.HorizontalAlign\n\t\ttitleLevel: ${sap.ui.core.TitleLevel.Auto}, // sap.ui.core.TitleLevel\n\t\twidth: ${0}, // int\n\t\tbackgroundColorSet: ${backgroundColorSet}, // sap.ui.layout.BlockLayoutCellColorSet\n\t\tbackgroundColorShade: ${backgroundColorShade}, // sap.ui.layout.BlockLayoutCellColorShade\n\t\tcontent: [${content}] // sap.ui.core.Control[]\n\t}\n)\n","module":"sap/ui/layout/BlockLayoutCell","static":"true","extends":"sap.ui.core.Control","helpDescription":"The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls. The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"BlockLayoutCell(sId?, mSettings?) : sap.ui.layout.BlockLayoutCell","name":"sap.ui.layout.BlockLayoutCell","prefix":"BlockLayoutCell","Experimental":false,"constructorDescription":"Constructor for a new BlockLayoutCell.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTitle title} : string<\/li>\n<li>{@link #getTitleAlignment titleAlignment} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: Auto)<\/li>\n<li>{@link #getWidth width} : int (default: 0)<\/li>\n<li>{@link #getBackgroundColorSet backgroundColorSet} : sap.ui.layout.BlockLayoutCellColorSet<\/li>\n<li>{@link #getBackgroundColorShade backgroundColorShade} : sap.ui.layout.BlockLayoutCellColorShade<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.BlockLayoutCellData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tsSize: ${1}, // int\n\t\tmSize: ${1}, // int\n\t\tlSize: ${1}, // int\n\t\txlSize: ${1} // int\n\t}\n)\n","module":"sap/ui/layout/BlockLayoutCellData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"Holds layout data for the BlockLayoutCells contents.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"BlockLayoutCellData(sId?, mSettings?) : sap.ui.layout.BlockLayoutCellData","name":"sap.ui.layout.BlockLayoutCellData","prefix":"BlockLayoutCellData","Experimental":false,"constructorDescription":"Constructor for a new BlockLayoutCellData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSSize sSize} : int (default: 1)<\/li>\n<li>{@link #getMSize mSize} : int (default: 1)<\/li>\n<li>{@link #getLSize lSize} : int (default: 1)<\/li>\n<li>{@link #getXlSize xlSize} : int (default: 1)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.BlockLayoutRow(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tscrollable: ${bScrollable}, // boolean\n\t\trowColorSet: ${rowColorSet}, // sap.ui.layout.BlockRowColorSets\n\t\tcontent: [${content}], // sap.ui.layout.BlockLayoutCell[]\n\t\taccentCells: [${accentCells}] // (sap.ui.layout.BlockLayoutCell|string)[]\n\t}\n)\n","module":"sap/ui/layout/BlockLayoutRow","static":"true","extends":"sap.ui.core.Control","helpDescription":"The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout cells. The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"BlockLayoutRow(sId?, mSettings?) : sap.ui.layout.BlockLayoutRow","name":"sap.ui.layout.BlockLayoutRow","prefix":"BlockLayoutRow","Experimental":false,"constructorDescription":"Constructor for a new BlockLayoutRow.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getScrollable scrollable} : boolean (default: false)<\/li>\n<li>{@link #getRowColorSet rowColorSet} : sap.ui.layout.BlockRowColorSets<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.layout.BlockLayoutCell[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAccentCells accentCells} : (sap.ui.core.ID | sap.ui.layout.BlockLayoutCell)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.DynamicSideContent(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tshowSideContent: ${bShowSideContent}, // boolean\n\t\tshowMainContent: ${bShowMainContent}, // boolean\n\t\tsideContentVisibility: ${sap.ui.layout.SideContentVisibility.ShowAboveS}, // sap.ui.layout.SideContentVisibility\n\t\tsideContentFallDown: ${sap.ui.layout.SideContentFallDown.OnMinimumWidth}, // sap.ui.layout.SideContentFallDown\n\t\tequalSplit: ${bEqualSplit}, // boolean\n\t\tcontainerQuery: ${bContainerQuery}, // boolean\n\t\tsideContentPosition: ${sap.ui.layout.SideContentPosition.End}, // sap.ui.layout.SideContentPosition\n\t\tmainContent: [${mainContent}], // sap.ui.core.Control[]\n\t\tsideContent: [${sideContent}], // sap.ui.core.Control[]\n\t\tbreakpointChanged: [function (oEvent) {}, this] // function|array\n\t}\n)\n","module":"sap/ui/layout/DynamicSideContent","static":"true","extends":"sap.ui.core.Control","helpDescription":"Layout control that allows additional (side) content to be displayed dynamically.\n\n<h3>Overview<\/h3>\n\n<code>DynamicSideContent<\/code> is a layout control that allows additional content to be displayed in a way that flexibly adapts to different screen sizes. The side content appears in a container next to or directly below the main content (it doesn't overlay). When the side content is triggered, the main content becomes narrower (if appearing side-by-side). The side content contains a separate scrollbar when appearing next to the main content.\n\n<h3>Usage<\/h3>\n\n<i>When to use?<\/i>\n\nUse this control if you want to display relevant information that is not critical for users to complete a task. Users should have access to all the key functions and critical information in the app even if they do not see the side content. This is important because on smaller screen sizes it may be difficult to display the side content in a way that is easily accessible for the user.\n\n<i>When not to use?<\/i>\n\nDon't use it if you want to display navigation or critical information that prevents users from completing a task when they have no access to the side content.\n\n<h3>Responsive Behavior<\/h3>\n\nScreen width > 1440 px\n\n<ul><li>Main vs. side content ratio is 75 vs. 25 percent (with a minimum of 320px each).<\/li> <li>If the application defines a trigger, the side content can be hidden.<\/li><\/ul>\n\nScreen width <= 1440 px and > 720px\n\n<ul><li>Main vs. side content ratio is 66.666 vs. 33.333 percent (with a minimum of 320px each). If the side content width falls below 320 px, it automatically slides under the main content, unless the app development team specifies that it should disappear.<\/li><\/ul>\n\nScreen width <= 720 px (for example on a mobile device)\n\n<ul><li>In this case, the side content automatically disappears from the screen (unless specified to stay under the content) and can be triggered from a pre-set trigger (specified within the app). When the side content is triggered, it replaces the main content. We recommend that you always place the trigger for the side content in the same location, such as in the app footer.<\/li><\/ul>\n\nA special case, allows for comparison mode between the main and side content. In this case, the screen is split into 50:50 percent for main vs. side content. The responsive behavior of the equal split is the same as in the standard view - the side content disappears on screen widths of less than 720 px and can only be viewed by triggering it.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"DynamicSideContent(sId?, mSettings?) : sap.ui.layout.DynamicSideContent","name":"sap.ui.layout.DynamicSideContent","prefix":"DynamicSideContent","Experimental":false,"constructorDescription":"Constructor for a new <code>DynamicSideContent<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getShowSideContent showSideContent} : boolean (default: true)<\/li>\n<li>{@link #getShowMainContent showMainContent} : boolean (default: true)<\/li>\n<li>{@link #getSideContentVisibility sideContentVisibility} : sap.ui.layout.SideContentVisibility (default: ShowAboveS)<\/li>\n<li>{@link #getSideContentFallDown sideContentFallDown} : sap.ui.layout.SideContentFallDown (default: OnMinimumWidth)<\/li>\n<li>{@link #getEqualSplit equalSplit} : boolean (default: false)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<li>{@link #getSideContentPosition sideContentPosition} : sap.ui.layout.SideContentPosition (default: End)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getMainContent mainContent} : sap.ui.core.Control[] (default)<\/li>\n<li>{@link #getSideContent sideContent} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:breakpointChanged breakpointChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"fireBreakpointChanged(\n\t{\n\t\tcurrentBreakpoint: \"${currentBreakpoint}\" // string\n\t}\n)\n","Deprecated":false,"helpDescription":"Fires event {@link #event:breakpointChanged breakpointChanged} to attached listeners.","category":"method","DeprecatedInfo":{"isDeprecated":false},"description":"fireBreakpointChanged(mParameters?) : sap.ui.layout.DynamicSideContent","Experimental":false,"prefix":"^withoutprefix","name":"sap.ui.layout.DynamicSideContent.fireBreakpointChanged"},{"template":"new sap.ui.layout.FixFlex(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tvertical: ${bVertical}, // boolean\n\t\tfixFirst: ${bFixFirst}, // boolean\n\t\tfixContentSize: ${\"auto\"}, // sap.ui.core.CSSSize\n\t\tminFlexSize: ${0}, // int\n\t\tfixContent: [${fixContent}], // sap.ui.core.Control[]\n\t\tflexContent: ${flexContent} // sap.ui.core.Control\n\t}\n)\n","module":"sap/ui/layout/FixFlex","static":"true","extends":"sap.ui.core.Control","helpDescription":"A layout container with a fixed and a flexible part. <h3>Overview<\/h3> The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. <h4>Guidelines:<\/h4> <ul> <li>The fix container can hold any number of controls, while the flexible container can hold only one<\/li> <li>In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.<\/li> <li>Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.<\/li> <\/ul> <h3>Structure<\/h3> The behavior of the FixFlex is controlled by the following properties: <ul> <li><code>fixContentSize<\/code> - The width/height of the fix part of the control<\/li> <li><code>fixFirst<\/code> - The ordering of the fix and flex part<\/li> <li><code>minFlexSize<\/code> - Scrolling inside the flex part, if its contents are large<\/li> <li><code>vertical<\/code> - Alignment of the FixFlex control<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.<\/li> <li>If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the <code>vertical<\/code> property.<\/li> <\/ul>","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"FixFlex(sId?, mSettings?) : sap.ui.layout.FixFlex","name":"sap.ui.layout.FixFlex","prefix":"FixFlex","Experimental":false,"constructorDescription":"Constructor for a new FixFlex.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVertical vertical} : boolean (default: true)<\/li>\n<li>{@link #getFixFirst fixFirst} : boolean (default: true)<\/li>\n<li>{@link #getFixContentSize fixContentSize} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinFlexSize minFlexSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFixContent fixContent} : sap.ui.core.Control[]<\/li>\n<li>{@link #getFlexContent flexContent} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.Grid(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\twidth: ${\"100%\"}, // sap.ui.core.CSSSize\n\t\tvSpacing: ${1}, // float\n\t\thSpacing: ${1}, // float\n\t\tposition: ${sap.ui.layout.GridPosition.Left}, // sap.ui.layout.GridPosition\n\t\tdefaultSpan: ${\"XL3 L3 M6 S12\"}, // sap.ui.layout.GridSpan\n\t\tdefaultIndent: ${\"XL0 L0 M0 S0\"}, // sap.ui.layout.GridIndent\n\t\tcontainerQuery: ${bContainerQuery}, // boolean\n\t\tcontent: [${content}], // sap.ui.core.Control[]\n\t\tariaLabelledBy: [${ariaLabelledBy}] // (sap.ui.core.Control|string)[]\n\t}\n)\n","module":"sap/ui/layout/Grid","static":"true","extends":"sap.ui.core.Control","helpDescription":"The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"Grid(sId?, mSettings?) : sap.ui.layout.Grid","name":"sap.ui.layout.Grid","prefix":"Grid","Experimental":false,"constructorDescription":"Constructor for a new Grid.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getVSpacing vSpacing} : float (default: 1)<\/li>\n<li>{@link #getHSpacing hSpacing} : float (default: 1)<\/li>\n<li>{@link #getPosition position} : sap.ui.layout.GridPosition (default: Left)<\/li>\n<li>{@link #getDefaultSpan defaultSpan} : sap.ui.layout.GridSpan (default: XL3 L3 M6 S12)<\/li>\n<li>{@link #getDefaultIndent defaultIndent} : sap.ui.layout.GridIndent (default: XL0 L0 M0 S0)<\/li>\n<li>{@link #getContainerQuery containerQuery} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.GridData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tspan: ${span}, // sap.ui.layout.GridSpan\n\t\tspanXL: ${spanXL}, // int\n\t\tspanL: ${spanL}, // int\n\t\tspanM: ${spanM}, // int\n\t\tspanS: ${spanS}, // int\n\t\tindent: ${indent}, // sap.ui.layout.GridIndent\n\t\tindentXL: ${indentXL}, // int\n\t\tindentL: ${indentL}, // int\n\t\tindentM: ${indentM}, // int\n\t\tindentS: ${indentS}, // int\n\t\tvisibleXL: ${bVisibleXL}, // boolean\n\t\tvisibleL: ${bVisibleL}, // boolean\n\t\tvisibleM: ${bVisibleM}, // boolean\n\t\tvisibleS: ${bVisibleS}, // boolean\n\t\tmoveBackwards: ${moveBackwards}, // sap.ui.layout.GridIndent\n\t\tmoveForward: ${moveForward}, // sap.ui.layout.GridIndent\n\t\tlinebreak: ${bLinebreak}, // boolean\n\t\tlinebreakXL: ${bLinebreakXL}, // boolean\n\t\tlinebreakL: ${bLinebreakL}, // boolean\n\t\tlinebreakM: ${bLinebreakM}, // boolean\n\t\tlinebreakS: ${bLinebreakS}, // boolean\n\t\tspanLarge: ${spanLarge}, // int\n\t\tspanMedium: ${spanMedium}, // int\n\t\tspanSmall: ${spanSmall}, // int\n\t\tindentLarge: ${indentLarge}, // int\n\t\tindentMedium: ${indentMedium}, // int\n\t\tindentSmall: ${indentSmall}, // int\n\t\tvisibleOnLarge: ${bVisibleOnLarge}, // boolean\n\t\tvisibleOnMedium: ${bVisibleOnMedium}, // boolean\n\t\tvisibleOnSmall: ${bVisibleOnSmall} // boolean\n\t}\n)\n","module":"sap/ui/layout/GridData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"Grid layout data","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"GridData(sId?, mSettings?) : sap.ui.layout.GridData","name":"sap.ui.layout.GridData","prefix":"GridData","Experimental":false,"constructorDescription":"Constructor for a new GridData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSpan span} : sap.ui.layout.GridSpan<\/li>\n<li>{@link #getSpanXL spanXL} : int<\/li>\n<li>{@link #getSpanL spanL} : int<\/li>\n<li>{@link #getSpanM spanM} : int<\/li>\n<li>{@link #getSpanS spanS} : int<\/li>\n<li>{@link #getIndent indent} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getIndentXL indentXL} : int<\/li>\n<li>{@link #getIndentL indentL} : int<\/li>\n<li>{@link #getIndentM indentM} : int<\/li>\n<li>{@link #getIndentS indentS} : int<\/li>\n<li>{@link #getVisibleXL visibleXL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleL visibleL} : boolean (default: true)<\/li>\n<li>{@link #getVisibleM visibleM} : boolean (default: true)<\/li>\n<li>{@link #getVisibleS visibleS} : boolean (default: true)<\/li>\n<li>{@link #getMoveBackwards moveBackwards} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getMoveForward moveForward} : sap.ui.layout.GridIndent<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakXL linebreakXL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakL linebreakL} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakM linebreakM} : boolean (default: false)<\/li>\n<li>{@link #getLinebreakS linebreakS} : boolean (default: false)<\/li>\n<li>{@link #getSpanLarge spanLarge} : int<\/li>\n<li>{@link #getSpanMedium spanMedium} : int<\/li>\n<li>{@link #getSpanSmall spanSmall} : int<\/li>\n<li>{@link #getIndentLarge indentLarge} : int<\/li>\n<li>{@link #getIndentMedium indentMedium} : int<\/li>\n<li>{@link #getIndentSmall indentSmall} : int<\/li>\n<li>{@link #getVisibleOnLarge visibleOnLarge} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnMedium visibleOnMedium} : boolean (default: true)<\/li>\n<li>{@link #getVisibleOnSmall visibleOnSmall} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.HorizontalLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tallowWrapping: ${bAllowWrapping}, // boolean\n\t\tcontent: [${content}] // sap.ui.core.Control[]\n\t}\n)\n","module":"sap/ui/layout/HorizontalLayout","static":"true","extends":"sap.ui.core.Control","helpDescription":"A layout that provides support for horizontal alignment of controls","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"HorizontalLayout(sId?, mSettings?) : sap.ui.layout.HorizontalLayout","name":"sap.ui.layout.HorizontalLayout","prefix":"HorizontalLayout","Experimental":false,"constructorDescription":"Constructor for a new HorizontalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAllowWrapping allowWrapping} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.PaneContainer(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\torientation: ${sap.ui.core.Orientation.Horizontal}, // sap.ui.core.Orientation\n\t\tpanes: [${panes}] // sap.ui.core.Element[]\n\t}\n)\n","module":"sap/ui/layout/PaneContainer","static":"true","extends":"sap.ui.core.Element","helpDescription":"PaneContainer is an abstraction of Splitter.\n\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"PaneContainer(sId?, mSettings?) : sap.ui.layout.PaneContainer","name":"sap.ui.layout.PaneContainer","prefix":"PaneContainer","Experimental":false,"constructorDescription":"Constructor for a new PaneContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getPanes panes} : sap.ui.core.Element[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well."},{"template":"new sap.ui.layout.ResponsiveFlowLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tresponsive: ${bResponsive}, // boolean\n\t\tcontent: [${content}], // sap.ui.core.Control[]\n\t\tariaLabelledBy: [${ariaLabelledBy}] // (sap.ui.core.Control|string)[]\n\t}\n)\n","module":"sap/ui/layout/ResponsiveFlowLayout","static":"true","extends":"sap.ui.core.Control","helpDescription":"This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"ResponsiveFlowLayout(sId?, mSettings?) : sap.ui.layout.ResponsiveFlowLayout","name":"sap.ui.layout.ResponsiveFlowLayout","prefix":"ResponsiveFlowLayout","Experimental":false,"constructorDescription":"Constructor for a new ResponsiveFlowLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResponsive responsive} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.ResponsiveFlowLayoutData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tminWidth: ${100}, // int\n\t\tweight: ${1}, // int\n\t\tlinebreak: ${bLinebreak}, // boolean\n\t\tmargin: ${bMargin}, // boolean\n\t\tlinebreakable: ${bLinebreakable} // boolean\n\t}\n)\n","module":"sap/ui/layout/ResponsiveFlowLayoutData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"ResponsiveFlowLayoutData(sId?, mSettings?) : sap.ui.layout.ResponsiveFlowLayoutData","name":"sap.ui.layout.ResponsiveFlowLayoutData","prefix":"ResponsiveFlowLayoutData","Experimental":false,"constructorDescription":"Constructor for a new ResponsiveFlowLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMinWidth minWidth} : int (default: 100)<\/li>\n<li>{@link #getWeight weight} : int (default: 1)<\/li>\n<li>{@link #getLinebreak linebreak} : boolean (default: false)<\/li>\n<li>{@link #getMargin margin} : boolean (default: true)<\/li>\n<li>{@link #getLinebreakable linebreakable} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.ResponsiveSplitter(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\twidth: ${\"100%\"}, // sap.ui.core.CSSSize\n\t\theight: ${\"100%\"}, // sap.ui.core.CSSSize\n\t\trootPaneContainer: ${rootPaneContainer}, // sap.ui.layout.PaneContainer\n\t\tdefaultPane: ${defaultPane} // (sap.ui.layout.SplitPane|string)\n\t}\n)\n","module":"sap/ui/layout/ResponsiveSplitter","static":"true","extends":"sap.ui.core.Control","helpDescription":"A responsive splitter which divides the application into several areas. <h3>Overview<\/h3> The responsive splitter layout structures complex applications into defined areas. These areas may be resizable and are either distributed across one or multiple screen areas, some of which may also be off-canvas.\n\nThe control is intended for developing administrative tools and applications. <h3>Structure<\/h3> The responsive splitter holds the following hierarchy of containers and controls: <ul> <li>{@link sap.ui.layout.PaneContainer Pane Container} - holds one or more Split Panes and determines the pane orientation. The pane which is stored in <code>rootPaneContainer<\/code> holds all other pane containers and split panes.<\/li> <li>{@link sap.ui.layout.SplitPane Split Pane} - independent containers that may interact with one another. Each pane can hold only one control.<\/li> <\/ul> <h3>Usage<\/h3> <h4>When to use<\/h4> <ul> <li>The application has to display several areas side by side that must be resizable.<\/li> <li>The application must work on a range of different devices in a responsive manner.<\/li> <\/ul> <h3>Responsive Behavior<\/h3> <ul> <li>As soon as views are in the off-canvas mode, the pagination bar at the bottom of the application allows the user to switch between them.<\/li> <li>On touch-enabled devices, the splitters show explicit handles with larger touch areas.<\/li> <li>Double-clicking on a splitter will collapse or expand it back to its original position.<\/li> <\/ul>\n\n<b>Note:<\/b> We don't recommend dynamically inserting/removing panes into/from the PaneContainer since this might lead to inconsistent layout. If it is necessary, you need to ensure the sum of all sizes of the SplitPanes doesn't exceed the width of the PaneContainer.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"ResponsiveSplitter(sId?, mSettings?) : sap.ui.layout.ResponsiveSplitter","name":"sap.ui.layout.ResponsiveSplitter","prefix":"ResponsiveSplitter","Experimental":false,"constructorDescription":"Constructor for a new ResponsiveSplitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getRootPaneContainer rootPaneContainer} : sap.ui.layout.PaneContainer (default)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getDefaultPane defaultPane} : (sap.ui.core.ID | sap.ui.layout.SplitPane)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.SplitPane(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tdemandPane: ${bDemandPane}, // boolean\n\t\trequiredParentWidth: ${800}, // int\n\t\tcontent: ${content} // sap.ui.core.Control\n\t}\n)\n","module":"sap/ui/layout/SplitPane","static":"true","extends":"sap.ui.core.Element","helpDescription":"SplitPane is a container of a single control in a responsive splitter. Could be used as an aggregation of a {@link sap.ui.layout.PaneContainer PaneContainer}.\n\nThe behavior of the Split Panes is handled by the following properties: <ul> <li><code>requiredParentWidth<\/code> - determines the minimum width of the parent container (in pixels). When it is reached, the pane will be hidden from the screen.<\/li> <li><code>demandPane<\/code> - determines if the pane is reachable via the pagination bar after it has been hidden from the screen.<\/li> <\/ul","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"SplitPane(sId?, mSettings?) : sap.ui.layout.SplitPane","name":"sap.ui.layout.SplitPane","prefix":"SplitPane","Experimental":false,"constructorDescription":"Constructor for a new SplitPane.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getDemandPane demandPane} : boolean (default: true)<\/li>\n<li>{@link #getRequiredParentWidth requiredParentWidth} : int (default: 800)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well."},{"template":"new sap.ui.layout.Splitter(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\torientation: ${sap.ui.core.Orientation.Horizontal}, // sap.ui.core.Orientation\n\t\twidth: ${\"100%\"}, // sap.ui.core.CSSSize\n\t\theight: ${\"100%\"}, // sap.ui.core.CSSSize\n\t\tcontentAreas: [${contentAreas}], // sap.ui.core.Control[]\n\t\tresize: [function (oEvent) {}, this] // function|array\n\t}\n)\n","module":"sap/ui/layout/Splitter","static":"true","extends":"sap.ui.core.Control","helpDescription":"A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"Splitter(sId?, mSettings?) : sap.ui.layout.Splitter","name":"sap.ui.layout.Splitter","prefix":"Splitter","Experimental":false,"constructorDescription":"Constructor for a new Splitter.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContentAreas contentAreas} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:resize resize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"fireResize(\n\t{\n\t\tid: \"${id}\", // string\n\t\toldSizes: [${oldSizes}], // [object Object][]\n\t\tnewSizes: [${newSizes}] // [object Object][]\n\t}\n)\n","Deprecated":false,"helpDescription":"Fires event {@link #event:resize resize} to attached listeners.","category":"method","DeprecatedInfo":{"isDeprecated":false},"description":"fireResize(mParameters?) : sap.ui.layout.Splitter","Experimental":false,"prefix":"^withoutprefix","name":"sap.ui.layout.Splitter.fireResize"},{"template":"new sap.ui.layout.SplitterLayoutData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tresizable: ${bResizable}, // boolean\n\t\tsize: ${\"auto\"}, // sap.ui.core.CSSSize\n\t\tminSize: ${0} // int\n\t}\n)\n","module":"sap/ui/layout/SplitterLayoutData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"SplitterLayoutData(sId?, mSettings?) : sap.ui.layout.SplitterLayoutData","name":"sap.ui.layout.SplitterLayoutData","prefix":"SplitterLayoutData","Experimental":true,"constructorDescription":"Constructor for a new SplitterLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getSize size} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getMinSize minSize} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.VerticalLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\twidth: ${width}, // sap.ui.core.CSSSize\n\t\tenabled: ${bEnabled}, // boolean\n\t\tcontent: [${content}] // sap.ui.core.Control[]\n\t}\n)\n","module":"sap/ui/layout/VerticalLayout","static":"true","extends":"sap.ui.core.Control","helpDescription":"In this layout the content controls are rendered one below the other.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"VerticalLayout(sId?, mSettings?) : sap.ui.layout.VerticalLayout","name":"sap.ui.layout.VerticalLayout","prefix":"VerticalLayout","Experimental":false,"constructorDescription":"Constructor for a new VerticalLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.form.Form(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\twidth: ${width}, // sap.ui.core.CSSSize\n\t\teditable: ${bEditable}, // boolean\n\t\tformContainers: [${formContainers}], // sap.ui.layout.form.FormContainer[]\n\t\ttitle: ${title}, // sap.ui.core.Title\n\t\ttoolbar: ${toolbar}, // sap.ui.core.Toolbar\n\t\tlayout: ${layout}, // sap.ui.layout.form.FormLayout\n\t\tariaLabelledBy: [${ariaLabelledBy}] // (sap.ui.core.Control|string)[]\n\t}\n)\n","module":"sap/ui/layout/form/Form","static":"true","extends":"sap.ui.core.Control","helpDescription":"A <code>Form<\/code> control arranges labels and fields (like input fields) into groups and rows. There are different ways to visualize forms for different screen sizes.\n\nA <code>Form<\/code> is structured into <code>FormContainers<\/code>. Each <code>FormContainer<\/code> consists of <code>FormElements<\/code>. The <code>FormElements<\/code> consists of a label and the form fields. A <code>Form<\/code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout<\/code>. This is so that the rendering can be adopted to new UI requirements without changing the <code>Form<\/code> itself.\n\nFor the content of a <code>Form<\/code>, <code>VariantLayoutData<\/code> are supported to allow simple switching of the <code>FormLayout<\/code>. <code>LayoutData<\/code> on the content can be used to overwrite the default layout of the <code>Form<\/code>.\n\nThe <code>Form<\/code> (and its sub-controls) automatically add label and field assignment to enable screen reader support. It also adds keyboard support to navigate between the fields and groups inside the form.\n\n<b>Note:<\/b> Do not put any layout controls into the <code>FormElements<\/code>. This could destroy the visual layout, keyboard support and screen-reader support.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"Form(sId?, mSettings?) : sap.ui.layout.form.Form","name":"sap.ui.layout.form.Form","prefix":"Form","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.Form.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormContainers formContainers} : sap.ui.layout.form.FormContainer[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.FormLayout<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.form.FormContainer(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\texpanded: ${bExpanded}, // boolean\n\t\texpandable: ${bExpandable}, // boolean\n\t\tvisible: ${bVisible}, // boolean\n\t\tformElements: [${formElements}], // sap.ui.layout.form.FormElement[]\n\t\ttitle: ${title}, // sap.ui.core.Title\n\t\ttoolbar: ${toolbar}, // sap.ui.core.Toolbar\n\t\tariaLabelledBy: [${ariaLabelledBy}] // (sap.ui.core.Control|string)[]\n\t}\n)\n","module":"sap/ui/layout/form/FormContainer","static":"true","extends":"sap.ui.core.Element","helpDescription":"A <code>FormContainer<\/code> represents a group inside a <code>Form<\/code>. It consists of <code>FormElements<\/code>. The rendering of the <code>FormContainer<\/code> is done by the <code>FormLayout<\/code> assigned to the <code>Form<\/code>.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"FormContainer(sId?, mSettings?) : sap.ui.layout.form.FormContainer","name":"sap.ui.layout.form.FormContainer","prefix":"FormContainer","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.FormContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpanded expanded} : boolean (default: true)<\/li>\n<li>{@link #getExpandable expandable} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getFormElements formElements} : sap.ui.layout.form.FormElement[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well."},{"template":"new sap.ui.layout.form.FormElement(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tvisible: ${bVisible}, // boolean\n\t\tlabel: ${label}, // sap.ui.core.Label\n\t\tfields: [${fields}] // sap.ui.core.Control[]\n\t}\n)\n","module":"sap/ui/layout/form/FormElement","static":"true","extends":"sap.ui.core.Element","helpDescription":"A <code>FormElement<\/code> represents a row in a <code>FormContainer<\/code>. A <code>FormElement<\/code> is a combination of one label and different controls associated to this label.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"FormElement(sId?, mSettings?) : sap.ui.layout.form.FormElement","name":"sap.ui.layout.form.FormElement","prefix":"FormElement","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.FormElement.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Label|string<\/li>\n<li>{@link #getFields fields} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well."},{"template":"new sap.ui.layout.form.FormLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tbackgroundDesign: ${sap.ui.layout.BackgroundDesign.Translucent} // sap.ui.layout.BackgroundDesign\n\t}\n)\n","module":"sap/ui/layout/form/FormLayout","static":"true","extends":"sap.ui.core.Control","helpDescription":"Base layout to render a <code>Form<\/code>. Other layouts to render a <code>Form<\/code> must inherit from this one.\n\n<b>Note:<\/b> This control must not be used to render a <code>Form<\/code> in productive applications as it does not fulfill any design guidelines and usability standards.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"FormLayout(sId?, mSettings?) : sap.ui.layout.form.FormLayout","name":"sap.ui.layout.form.FormLayout","prefix":"FormLayout","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.FormLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."},{"template":"new sap.ui.layout.form.GridContainerData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\thalfGrid: ${bHalfGrid} // boolean\n\t}\n)\n","module":"sap/ui/layout/form/GridContainerData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormContainers<\/code>.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"GridContainerData(sId?, mSettings?) : sap.ui.layout.form.GridContainerData","name":"sap.ui.layout.form.GridContainerData","prefix":"GridContainerData","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.GridContainerData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHalfGrid halfGrid} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.form.GridElementData(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\thCells: ${sap.ui.layout.form.GridElementCells.auto}, // sap.ui.layout.form.GridElementCells\n\t\tvCells: ${1} // int\n\t}\n)\n","module":"sap/ui/layout/form/GridElementData","static":"true","extends":"sap.ui.core.LayoutData","helpDescription":"The <code>GridLayout<\/code>-specific layout data for <code>FormElement<\/code> fields.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"GridElementData(sId?, mSettings?) : sap.ui.layout.form.GridElementData","name":"sap.ui.layout.form.GridElementData","prefix":"GridElementData","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.GridElementData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHCells hCells} : sap.ui.layout.form.GridElementCells (default: auto)<\/li>\n<li>{@link #getVCells vCells} : int (default: 1)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well."},{"template":"new sap.ui.layout.form.GridLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tbackgroundDesign: ${sap.ui.layout.BackgroundDesign.Translucent}, // sap.ui.layout.BackgroundDesign\n\t\tsingleColumn: ${bSingleColumn} // boolean\n\t}\n)\n","module":"sap/ui/layout/form/GridLayout","static":"true","extends":"sap.ui.layout.form.FormLayout","helpDescription":"This <code>FormLayout<\/code> renders a <code>Form<\/code> using an HTML-table based grid. This can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form<\/code>. Only the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout<\/code>, you can use <code>GridContainerData<\/code> for <code>FormContainers<\/code> and <code>GridElementData<\/code> for content fields.\n\n<b>Note:<\/b> If content fields have a <code>width<\/code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"GridLayout(sId?, mSettings?) : sap.ui.layout.form.GridLayout","name":"sap.ui.layout.form.GridLayout","prefix":"GridLayout","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.GridLayout.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSingleColumn singleColumn} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well."},{"template":"new sap.ui.layout.form.ResponsiveGridLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tbackgroundDesign: ${sap.ui.layout.BackgroundDesign.Translucent}, // sap.ui.layout.BackgroundDesign\n\t\tlabelSpanXL: ${-1}, // int\n\t\tlabelSpanL: ${4}, // int\n\t\tlabelSpanM: ${2}, // int\n\t\tlabelSpanS: ${12}, // int\n\t\tadjustLabelSpan: ${bAdjustLabelSpan}, // boolean\n\t\temptySpanXL: ${-1}, // int\n\t\temptySpanL: ${0}, // int\n\t\temptySpanM: ${0}, // int\n\t\temptySpanS: ${0}, // int\n\t\tcolumnsXL: ${-1}, // int\n\t\tcolumnsL: ${2}, // int\n\t\tcolumnsM: ${1}, // int\n\t\tsingleContainerFullSize: ${bSingleContainerFullSize}, // boolean\n\t\tbreakpointXL: ${1440}, // int\n\t\tbreakpointL: ${1024}, // int\n\t\tbreakpointM: ${600} // int\n\t}\n)\n","module":"sap/ui/layout/form/ResponsiveGridLayout","static":"true","extends":"sap.ui.layout.form.FormLayout","helpDescription":"The <code>ResponsiveGridLayout<\/code> control renders a <code>Form<\/code> using a responsive grid. Internally the <code>Grid<\/code> control is used for rendering. Using this layout, the <code>Form<\/code> is rendered in a responsive way. Depending on the available space, the <code>FormContainers<\/code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields. This behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers<\/code>, labels and content fields, <code>GridData<\/code> can be used to change the default rendering. <code>GridData<\/code> is not supported for <code>FormElements<\/code>.\n\n<b>Note:<\/b> If <code>GridData<\/code> is used, this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>GridData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"ResponsiveGridLayout(sId?, mSettings?) : sap.ui.layout.form.ResponsiveGridLayout","name":"sap.ui.layout.form.ResponsiveGridLayout","prefix":"ResponsiveGridLayout","Experimental":false,"constructorDescription":"Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}\ncan be used as well."},{"template":"new sap.ui.layout.form.ResponsiveLayout(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tbackgroundDesign: ${sap.ui.layout.BackgroundDesign.Translucent} // sap.ui.layout.BackgroundDesign\n\t}\n)\n","module":"sap/ui/layout/form/ResponsiveLayout","static":"true","extends":"sap.ui.layout.form.FormLayout","helpDescription":"The <code>ResponsiveLayout<\/code> renders a <code>Form<\/code> with a responsive layout. Internally the <code>ResponsiveFlowLayout<\/code> is used. The responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers<\/code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers<\/code>, <code>FormElements<\/code>, labels and content fields, <code>ResponsiveFlowLayoutData<\/code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout<\/code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:<\/b> If <code>ResponsiveFlowLayoutData<\/code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result. In such cases, <code>ResponsiveFlowLayoutData<\/code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand-alone, it just renders a <code>Form<\/code>, so it must be assigned to a <code>Form<\/code> using the <code>layout<\/code> aggregation.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"ResponsiveLayout(sId?, mSettings?) : sap.ui.layout.form.ResponsiveLayout","name":"sap.ui.layout.form.ResponsiveLayout","prefix":"ResponsiveLayout","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.ResponsiveLayout."},{"template":"new sap.ui.layout.form.SimpleForm(\n\t\"${sId}\", // string\n\t{\n\t\tid: ${id}, // sap.ui.core.ID\n\t\tmodels: ${models}, // object\n\t\tbindingContexts: ${bindingContexts}, // object\n\t\tobjectBindings: ${objectBindings}, // object\n\t\tmetadataContexts: ${metadataContexts}, // object\n\t\tvalidationSuccess: [function (oEvent) {}, this], // function|array\n\t\tvalidationError: [function (oEvent) {}, this], // function|array\n\t\tparseError: [function (oEvent) {}, this], // function|array\n\t\tformatError: [function (oEvent) {}, this], // function|array\n\t\tmodelContextChange: [function (oEvent) {}, this], // function|array\n\t\ttooltip: ${tooltip}, // sap.ui.core.TooltipBase\n\t\tcustomData: [${customData}], // sap.ui.core.CustomData[]\n\t\tlayoutData: ${layoutData}, // sap.ui.core.LayoutData\n\t\tdependents: [${dependents}], // sap.ui.core.Element[]\n\t\tbusy: ${bBusy}, // boolean\n\t\tbusyIndicatorDelay: ${1000}, // int\n\t\tvisible: ${bVisible}, // boolean\n\t\tfieldGroupIds: ${[]}, // string[]\n\t\tvalidateFieldGroup: [function (oEvent) {}, this], // function|array\n\t\tmaxContainerCols: ${2}, // int\n\t\tminWidth: ${-1}, // int\n\t\twidth: ${width}, // sap.ui.core.CSSSize\n\t\teditable: ${bEditable}, // boolean\n\t\tlabelMinWidth: ${192}, // int\n\t\tlayout: ${sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout}, // sap.ui.layout.form.SimpleFormLayout\n\t\tlabelSpanXL: ${-1}, // int\n\t\tlabelSpanL: ${4}, // int\n\t\tlabelSpanM: ${2}, // int\n\t\tlabelSpanS: ${12}, // int\n\t\tadjustLabelSpan: ${bAdjustLabelSpan}, // boolean\n\t\temptySpanXL: ${-1}, // int\n\t\temptySpanL: ${0}, // int\n\t\temptySpanM: ${0}, // int\n\t\temptySpanS: ${0}, // int\n\t\tcolumnsXL: ${-1}, // int\n\t\tcolumnsL: ${2}, // int\n\t\tcolumnsM: ${1}, // int\n\t\tsingleContainerFullSize: ${bSingleContainerFullSize}, // boolean\n\t\tbreakpointXL: ${1440}, // int\n\t\tbreakpointL: ${1024}, // int\n\t\tbreakpointM: ${600}, // int\n\t\tbackgroundDesign: ${sap.ui.layout.BackgroundDesign.Translucent}, // sap.ui.layout.BackgroundDesign\n\t\tcontent: [${content}], // sap.ui.core.Element[]\n\t\ttitle: ${title}, // sap.ui.core.Title\n\t\ttoolbar: ${toolbar}, // sap.ui.core.Toolbar\n\t\tariaLabelledBy: [${ariaLabelledBy}] // (sap.ui.core.Control|string)[]\n\t}\n)\n","module":"sap/ui/layout/form/SimpleForm","static":"true","extends":"sap.ui.core.Control","helpDescription":"The <code>SimpleForm<\/code> provides an easy-to-use API to create simple forms. Inside a <code>SimpleForm<\/code>, a <code>Form<\/code> control is created along with its <code>FormContainers<\/code> and <code>FormElements<\/code>, but the complexity in the API is removed. <ul> <li>A new <code>Title<\/code> or <code>Toolbar<\/code> starts a new group (<code>FormContainer<\/code>) in the form.<\/li> <li>A new <code>Label<\/code> starts a new row (<code>FormElement<\/code>) in the form.<\/li> <li>All other controls will be assigned to the row (<code>FormElement<\/code>) that started with the last label.<\/li> <\/ul> Use <code>LayoutData<\/code> to influence the layout for special cases in the Input/Display controls.\n\n<b>Note:<\/b> If a more complex form is needed, use <code>Form<\/code> instead.","Deprecated":false,"category":"constructor","DeprecatedInfo":{"isDeprecated":false},"description":"SimpleForm(sId?, mSettings?) : sap.ui.layout.form.SimpleForm","name":"sap.ui.layout.form.SimpleForm","prefix":"SimpleForm","Experimental":false,"constructorDescription":"Constructor for a new sap.ui.layout.form.SimpleForm.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMaxContainerCols maxContainerCols} : int (default: 2)<\/li>\n<li>{@link #getMinWidth minWidth} : int (default: -1)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditable editable} : boolean<\/li>\n<li>{@link #getLabelMinWidth labelMinWidth} : int (default: 192)<\/li>\n<li>{@link #getLayout layout} : sap.ui.layout.form.SimpleFormLayout (default: ResponsiveLayout)<\/li>\n<li>{@link #getLabelSpanXL labelSpanXL} : int (default: -1)<\/li>\n<li>{@link #getLabelSpanL labelSpanL} : int (default: 4)<\/li>\n<li>{@link #getLabelSpanM labelSpanM} : int (default: 2)<\/li>\n<li>{@link #getLabelSpanS labelSpanS} : int (default: 12)<\/li>\n<li>{@link #getAdjustLabelSpan adjustLabelSpan} : boolean (default: true)<\/li>\n<li>{@link #getEmptySpanXL emptySpanXL} : int (default: -1)<\/li>\n<li>{@link #getEmptySpanL emptySpanL} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanM emptySpanM} : int (default: 0)<\/li>\n<li>{@link #getEmptySpanS emptySpanS} : int (default: 0)<\/li>\n<li>{@link #getColumnsXL columnsXL} : int (default: -1)<\/li>\n<li>{@link #getColumnsL columnsL} : int (default: 2)<\/li>\n<li>{@link #getColumnsM columnsM} : int (default: 1)<\/li>\n<li>{@link #getSingleContainerFullSize singleContainerFullSize} : boolean (default: true)<\/li>\n<li>{@link #getBreakpointXL breakpointXL} : int (default: 1440)<\/li>\n<li>{@link #getBreakpointL breakpointL} : int (default: 1024)<\/li>\n<li>{@link #getBreakpointM breakpointM} : int (default: 600)<\/li>\n<li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.layout.BackgroundDesign (default: Translucent)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Element[] (default)<\/li>\n<li>{@link #getTitle title} : sap.ui.core.Title|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well."}]}