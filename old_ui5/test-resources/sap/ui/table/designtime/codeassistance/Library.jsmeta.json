{"!define":{"sap.ui.table.RowActionItem":{"setType":{"!description":"Sets a new value for property {@link #getType type}.\n\nThe type of the item. Setting the type ensures default values for the properties <code>icon<\/code> and <code>text<\/code>. If an icon or text is set explicitly this setting is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Custom<\/code>.","!type":"fn(sType: sap.ui.table.RowActionType) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"sType":"type: sap.ui.table.RowActionType, description: New value for property <code>type<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.RowActionItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"firePress":{"!description":"Fires event {@link #event:press press} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nWhether the item should be visible on the screen.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new RowActionItem.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getIcon icon} : sap.ui.core.URI<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getText text} : string (default: )<\/li>\n<li>{@link #getType type} : sap.ui.table.RowActionType (default: Custom)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text of the item. It is used as tooltip and for accessibility purposes.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!type":"fn(sText: String) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"},"!static":false},"!module":"sap/ui/table/RowActionItem","attachPress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:press press} event of this <code>sap.ui.table.RowActionItem<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.RowActionItem<\/code> itself.\n\nThe <code>press<\/code> is fired when the user triggers the corresponding action.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.RowActionItem<\/code> itself"},"!static":false},"getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nThe icon of the item.","!type":"fn() -> sap.ui.core.URI","!category":"function","!static":false},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text of the item. It is used as tooltip and for accessibility purposes.\n\nDefault value is <code>empty string<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nWhether the item should be visible on the screen.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getType":{"!description":"Gets current value of property {@link #getType type}.\n\nThe type of the item. Setting the type ensures default values for the properties <code>icon<\/code> and <code>text<\/code>. If an icon or text is set explicitly this setting is used.\n\nDefault value is <code>Custom<\/code>.","!type":"fn() -> sap.ui.table.RowActionType","!category":"function","!static":false},"!description":"An action items to be displayed in a <code>RowAction<\/code> control. This element must only be used in the context of the <code>sap.ui.table.Table<\/code> control to define row actions.","!category":"class","setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nThe icon of the item.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sIcon: sap.ui.core.URI) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"sIcon":"type: sap.ui.core.URI, description: New value for property <code>icon<\/code>"},"!static":false},"detachPress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:press press} event of this <code>sap.ui.table.RowActionItem<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"!helpDescription":"An action items to be displayed in a <code>RowAction<\/code> control. This element must only be used in the context of the <code>sap.ui.table.Table<\/code> control to define row actions.","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.RowActionItem.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalTable"},"sap.ui.table.RowAction_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.RowAction with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.RowAction"},"sap.ui.table.TablePersoController_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TablePersoController"},"sap.ui.table.TreeAutoExpandMode":{"!description":"Different modes for setting the auto expand mode on tree or analytical bindings.","!category":"static class","!module":"sap/ui/table/library"},"sap.ui.table.GroupEventType":{"ungroupAll":{"!description":"Ungroup All Columns","!type":"String","!category":"enum"},"showGroupedColumn":{"!description":"Show grouped column also as a column, not just as group header","!type":"String","!category":"enum"},"!description":"Details about the group event to distinguish between different actions associated with grouping","moveDown":{"!description":"Change the group order of the columns. Move column one position down in the group sequence","!type":"String","!category":"enum"},"!category":"static class","ungroup":{"!description":"Ungroup Column","!type":"String","!category":"enum"},"moveUp":{"!description":"Change the group order of the columns. Move column one position up in the group sequence","!type":"String","!category":"enum"},"hideGroupedColumn":{"!description":"Show grouped column only as group header","!type":"String","!category":"enum"},"group":{"!description":"Group Column","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.Column":{"getTemplateClone":{"!description":"Returns a column template clone. It either finds an unused clone or clones a new one from the column template.","!type":"fn(iIndex: Number) -> sap.ui.core.Control | null","!category":"function","parameters":{"iIndex":"type: int, description: Index of the column in the column aggregation of the table"},"!static":false},"setDefaultFilterOperator":{"!description":"Sets a new value for property {@link #getDefaultFilterOperator defaultFilterOperator}.\n\nIf this property is set, the default filter operator of the column is overridden. By default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sDefaultFilterOperator: String) -> sap.ui.table.Column","!category":"function","parameters":{"sDefaultFilterOperator":"type: string, description: New value for property <code>defaultFilterOperator<\/code>"},"!static":false},"toggleSort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>Toggles the sort order of the column.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getFilterType":{"!description":"Gets current value of property {@link #getFilterType filterType}.\n\nType of Filter. This is used to transform the search term to the specified type, to make sure that the right columns are displayed. This should be the same as defined in binding for this column. As an alternative you can pass a function which does the conversion. The function receives the entered filter value as parameter and returns the proper value for the filter expression. Another option is to pass the class name of the type, e.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax, e.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: \\{\\} \\}\"<\/code>. Here the escaping is mandatory to avoid handling by the binding parser. By default the filter type is <code>sap.ui.model.type.String<\/code>.","!type":"fn() -> Object","!category":"function","!static":false},"removeMultiLabel":{"!description":"Removes a multiLabel from the aggregation {@link #getMultiLabels multiLabels}.","!type":"fn(vMultiLabel: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vMultiLabel":"type: int|string|sap.ui.core.Control, description: The multiLabel to remove or its index or id"},"!static":false},"destroyMultiLabels":{"!description":"Destroys all the multiLabels in the aggregation {@link #getMultiLabels multiLabels}.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getShowSortMenuEntry":{"!description":"Gets current value of property {@link #getShowSortMenuEntry showSortMenuEntry}.\n\nDefines if the sort menu entries are displayed\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/Column","getResizable":{"!description":"Gets current value of property {@link #getResizable resizable}.\n\nIf set to true, the column can be resized either using the resize bar (by mouse) or using the keyboard (SHIFT + Left/Right Arrow keys)\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setShowSortMenuEntry":{"!description":"Sets a new value for property {@link #getShowSortMenuEntry showSortMenuEntry}.\n\nDefines if the sort menu entries are displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowSortMenuEntry: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bShowSortMenuEntry":"type: boolean, description: New value for property <code>showSortMenuEntry<\/code>"},"!static":false},"getGrouped":{"!description":"Gets current value of property {@link #getGrouped grouped}.\n\nIndicates if the column is grouped.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSortOrder":{"!description":"Gets current value of property {@link #getSortOrder sortOrder}.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be rendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nDefault value is <code>Ascending<\/code>.","!type":"fn() -> sap.ui.table.SortOrder","!category":"function","!static":false},"setFiltered":{"!description":"Sets a new value for property {@link #getFiltered filtered}.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bFiltered: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bFiltered":"type: boolean, description: New value for property <code>filtered<\/code>"},"!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of the column in CSS units. Default value is <code>auto<\/code>, see <a href=\"https://www.w3.org/TR/CSS2/tables.html#width-layout\"><\/a> <p>Minimal column width is device-dependent, for example on desktop devices the column will not be smaller than 48px. <p>This property can be changed by the user or by the application configuration/personalization. <p>If a user adjusts the column width manually, the resulting value is always set in pixels. In addition, other columns with width <code>auto<\/code> get a fixed minimum width and do not shrink after the resizing.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getFlexible":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44 this property has no effect. Use the property <code>minWidth<\/code> in combination with the property <code>width=\"auto\"<\/code> instead.<br>Gets current value of property {@link #getFlexible flexible}.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the original width. If all columns are set to not be flexible, an extra \"dummy\" column will be created at the end of the table.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setFilterType":{"!description":"Sets a new value for property {@link #getFilterType filterType}.\n\nType of Filter. This is used to transform the search term to the specified type, to make sure that the right columns are displayed. This should be the same as defined in binding for this column. As an alternative you can pass a function which does the conversion. The function receives the entered filter value as parameter and returns the proper value for the filter expression. Another option is to pass the class name of the type, e.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax, e.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: \\{\\} \\}\"<\/code>. Here the escaping is mandatory to avoid handling by the binding parser. By default the filter type is <code>sap.ui.model.type.String<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oFilterType: Object) -> sap.ui.table.Column","!category":"function","parameters":{"oFilterType":"type: any, description: New value for property <code>filterType<\/code>"},"!static":false},"setHAlign":{"!description":"Sets a new value for property {@link #getHAlign hAlign}.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit the horizontal alignment. You have to set the text align directly on the template.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Begin<\/code>.","!type":"fn(sHAlign: sap.ui.core.HorizontalAlign) -> sap.ui.table.Column","!category":"function","parameters":{"sHAlign":"type: sap.ui.core.HorizontalAlign, description: New value for property <code>hAlign<\/code>"},"!static":false},"detachColumnMenuOpen":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnMenuOpen columnMenuOpen} event of this <code>sap.ui.table.Column<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Column","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"shouldRender":{"!description":"Returns whether the column should be rendered.","!type":"fn() -> Boolean","!category":"function","!static":false},"getMinWidth":{"!description":"Gets current value of property {@link #getMinWidth minWidth}.\n\nDefines the minimum width of a column in pixels. <p>This property only has an effect if the given column width is flexible, for example with width <code>auto<\/code>. <p>This property only influences the automatic behavior. If a user adjusts the column width manually, the column width can become smaller. <p>Minimal column width is device-dependent, for example on desktop devices the column will not be smaller than 48px.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getFiltered":{"!description":"Gets current value of property {@link #getFiltered filtered}.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Column.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getMinWidth minWidth} : int (default: 0)<\/li>\n<li>{@link #getFlexible flexible} : boolean (default: true)<\/li>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getHAlign hAlign} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getSorted sorted} : boolean (default: false)<\/li>\n<li>{@link #getSortOrder sortOrder} : sap.ui.table.SortOrder (default: Ascending)<\/li>\n<li>{@link #getSortProperty sortProperty} : string<\/li>\n<li>{@link #getFiltered filtered} : boolean (default: false)<\/li>\n<li>{@link #getFilterProperty filterProperty} : string<\/li>\n<li>{@link #getFilterValue filterValue} : string<\/li>\n<li>{@link #getFilterOperator filterOperator} : string<\/li>\n<li>{@link #getDefaultFilterOperator defaultFilterOperator} : string<\/li>\n<li>{@link #getFilterType filterType} : any<\/li>\n<li>{@link #getGrouped grouped} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getShowFilterMenuEntry showFilterMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getShowSortMenuEntry showSortMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getHeaderSpan headerSpan} : any (default: 1)<\/li>\n<li>{@link #getAutoResizable autoResizable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Control|string (default)<\/li>\n<li>{@link #getMultiLabels multiLabels} : sap.ui.core.Control[]<\/li>\n<li>{@link #getTemplate template} : sap.ui.core.Control|string<\/li>\n<li>{@link #getMenu menu} : sap.ui.unified.Menu<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:columnMenuOpen columnMenuOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","indexOfMultiLabel":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getMultiLabels multiLabels}. and returns its index if found or -1 otherwise.","!type":"fn(oMultiLabel: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: The multiLabel whose index is looked for"},"!static":false},"getHeaderSpan":{"!description":"Gets current value of property {@link #getHeaderSpan headerSpan}.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns which are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of integers (if you use the multi header feature of the table). If you only specify an integer, this span is applied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Object","!category":"function","!static":false},"setShowFilterMenuEntry":{"!description":"Sets a new value for property {@link #getShowFilterMenuEntry showFilterMenuEntry}.\n\nDefines if the filter menu entry is displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowFilterMenuEntry: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bShowFilterMenuEntry":"type: boolean, description: New value for property <code>showFilterMenuEntry<\/code>"},"!static":false},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nInvisible controls are not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setFilterValue":{"!description":"Sets a new value for property {@link #getFilterValue filterValue}.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible to provide a filterOperator as string, as shown here: <pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterValue: String) -> sap.ui.table.Column","!category":"function","parameters":{"sFilterValue":"type: string, description: New value for property <code>filterValue<\/code>"},"!static":false},"setSortOrder":{"!description":"Sets a new value for property {@link #getSortOrder sortOrder}.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be rendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Ascending<\/code>.","!type":"fn(sSortOrder: sap.ui.table.SortOrder) -> sap.ui.table.Column","!category":"function","parameters":{"sSortOrder":"type: sap.ui.table.SortOrder, description: New value for property <code>sortOrder<\/code>"},"!static":false},"setTemplate":{"!description":"Sets the aggregated {@link #getTemplate template}.","!type":"fn(vTemplate: sap.ui.core.Control | String) -> sap.ui.table.Column","!category":"function","parameters":{"vTemplate":"type: sap.ui.core.Control|string, description: The template to set"},"!static":false},"setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nThe name of the column which is used in the column visibility menu item as text. If not set as a fallback the column menu tries to get the text from the nested Label.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sName: String) -> sap.ui.table.Column","!category":"function","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"},"!static":false},"setHeaderSpan":{"!description":"Sets a new value for property {@link #getHeaderSpan headerSpan}.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns which are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of integers (if you use the multi header feature of the table). If you only specify an integer, this span is applied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(oHeaderSpan: Object) -> sap.ui.table.Column","!category":"function","parameters":{"oHeaderSpan":"type: any, description: New value for property <code>headerSpan<\/code>"},"!static":false},"getHAlign":{"!description":"Gets current value of property {@link #getHAlign hAlign}.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit the horizontal alignment. You have to set the text align directly on the template.\n\nDefault value is <code>Begin<\/code>.","!type":"fn() -> sap.ui.core.HorizontalAlign","!category":"function","!static":false},"!helpDescription":"The column allows you to define column specific properties that will be applied when rendering the table.","!proto":"sap.ui.core.Element","getSortProperty":{"!description":"Gets current value of property {@link #getSortProperty sortProperty}.\n\nSpecifies the binding property on which the column will sort. Since the column template may have composite bindings, it's not possible to figure out on which binding property the sort shall be applied. Therefore the binding property for sorting must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!type":"fn() -> String","!category":"function","!static":false},"sort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>sorts the current column ascending or descending","!type":"fn(bDescending: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bDescending":"type: boolean, description: sort order of the column (if undefined the default will be ascending)"},"!static":false},"setSorted":{"!description":"Sets a new value for property {@link #getSorted sorted}.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSorted: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bSorted":"type: boolean, description: New value for property <code>sorted<\/code>"},"!static":false},"setMinWidth":{"!description":"Sets a new value for property {@link #getMinWidth minWidth}.\n\nDefines the minimum width of a column in pixels. <p>This property only has an effect if the given column width is flexible, for example with width <code>auto<\/code>. <p>This property only influences the automatic behavior. If a user adjusts the column width manually, the column width can become smaller. <p>Minimal column width is device-dependent, for example on desktop devices the column will not be smaller than 48px.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iMinWidth: Number) -> sap.ui.table.Column","!category":"function","parameters":{"iMinWidth":"type: int, description: New value for property <code>minWidth<\/code>"},"!static":false},"setLabel":{"!description":"Sets the aggregated {@link #getLabel label}.","!type":"fn(vLabel: sap.ui.core.Control | String) -> sap.ui.table.Column","!category":"function","parameters":{"vLabel":"type: sap.ui.core.Control|string, description: The label to set"},"!static":false},"insertMultiLabel":{"!description":"Inserts a multiLabel into the aggregation {@link #getMultiLabels multiLabels}.","!type":"fn(oMultiLabel: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Column","!category":"function","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: The multiLabel to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the multiLabel should be inserted at; for a negative value of <code>iIndex<\/code>, the multiLabel is inserted at position 0; for a value greater than the current size of the aggregation, the multiLabel is inserted at the last position"},"!static":false},"destroyLabel":{"!description":"Destroys the label in the aggregation {@link #getLabel label}.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getFilterValue":{"!description":"Gets current value of property {@link #getFilterValue filterValue}.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible to provide a filterOperator as string, as shown here: <pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!type":"fn() -> String","!category":"function","!static":false},"fireColumnMenuOpen":{"!description":"Fires event {@link #event:columnMenuOpen columnMenuOpen} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"destroyMenu":{"!description":"Destroys the menu in the aggregation {@link #getMenu menu}.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getDefaultFilterOperator":{"!description":"Gets current value of property {@link #getDefaultFilterOperator defaultFilterOperator}.\n\nIf this property is set, the default filter operator of the column is overridden. By default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!type":"fn() -> String","!category":"function","!static":false},"getFilterProperty":{"!description":"Gets current value of property {@link #getFilterProperty filterProperty}.\n\nSpecifies the binding property on which the column shall be filtered. Since the column template may have composite bindings, it's not possible to figure out on which binding property the filter shall be applied. Therefore the binding property for filtering must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The default menu entry is a text input field.","!type":"fn() -> String","!category":"function","!static":false},"!category":"class","setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of the column in CSS units. Default value is <code>auto<\/code>, see <a href=\"https://www.w3.org/TR/CSS2/tables.html#width-layout\"><\/a> <p>Minimal column width is device-dependent, for example on desktop devices the column will not be smaller than 48px. <p>This property can be changed by the user or by the application configuration/personalization. <p>If a user adjusts the column width manually, the resulting value is always set in pixels. In addition, other columns with width <code>auto<\/code> get a fixed minimum width and do not shrink after the resizing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Column","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"getMultiLabels":{"!description":"Gets content of aggregation {@link #getMultiLabels multiLabels}.\n\nLabels of the column which are displayed in the column header. Define a control for each header row in the table. Use this aggregation if you want to use multiple headers per column.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getSorted":{"!description":"Gets current value of property {@link #getSorted sorted}.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getTemplate":{"!description":"Gets content of aggregation {@link #getTemplate template}.\n\nTemplate (cell renderer) of this column. A template is decoupled from the column. Each time the template's properties or aggregations have been changed, the template has to be applied again via <code>setTemplate<\/code> for the changes to take effect. If a string is defined, a default text control will be created with its text property bound to the value of the string. The default template depends on the libraries loaded. If there is no template, the column will not be rendered in the table. The set of supported controls is limited. See section \"{@link topic:148892ff9aea4a18b912829791e38f3e Tables: Which One Should I Choose?}\" in the documentation for more details. While it is technically possible to also use other controls, doing so might lead to issues with regards to scrolling, alignment, condensed mode, screen reader support, and keyboard support.","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"destroyTemplate":{"!description":"Destroys the template in the aggregation {@link #getTemplate template}.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setGrouped":{"!description":"Sets a new value for property {@link #getGrouped grouped}.\n\nIndicates if the column is grouped.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bGrouped: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bGrouped":"type: boolean, description: New value for property <code>grouped<\/code>"},"!static":false},"getFilterOperator":{"!description":"Gets current value of property {@link #getFilterOperator filterOperator}.\n\nFilter operator to use when filtering this column.","!type":"fn() -> String","!category":"function","!static":false},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nInvisible controls are not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"},"!static":false},"setMenu":{"!description":"Sets the aggregated {@link #getMenu menu}.","!type":"fn(oMenu: sap.ui.unified.Menu) -> sap.ui.table.Column","!category":"function","parameters":{"oMenu":"type: sap.ui.unified.Menu, description: The menu to set"},"!static":false},"removeAllMultiLabels":{"!description":"Removes all the controls from the aggregation {@link #getMultiLabels multiLabels}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getLabel":{"!description":"Gets content of aggregation {@link #getLabel label}.\n\nLabel of the column which is displayed in the column header. This aggregation is for the standard behavior, where you only want to display one single row header. If a string is supplied, a default label control will be created. Which control this is depends on the loaded libraries.","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"setAutoResizable":{"!description":"Sets a new value for property {@link #getAutoResizable autoResizable}.\n\nEnables auto-resizing of the column on double clicking the resize bar. The width is determined on the widest currently displayed content. It does not consider rows which are currently not scrolled into view. Currently only implemented to work with the following controls: <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input, sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField, sap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bAutoResizable: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bAutoResizable":"type: boolean, description: New value for property <code>autoResizable<\/code>"},"!static":false},"setFlexible":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44 this property has no effect. Use the property <code>minWidth<\/code> in combination with the property <code>width=\"auto\"<\/code> instead.<br>Sets a new value for property {@link #getFlexible flexible}.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the original width. If all columns are set to not be flexible, an extra \"dummy\" column will be created at the end of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bFlexible: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bFlexible":"type: boolean, description: New value for property <code>flexible<\/code>"},"!static":false},"addMultiLabel":{"!description":"Adds some multiLabel to the aggregation {@link #getMultiLabels multiLabels}.","!type":"fn(oMultiLabel: sap.ui.core.Control) -> sap.ui.table.Column","!category":"function","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: The multiLabel to add; if empty, nothing is inserted"},"!static":false},"!description":"The column allows you to define column specific properties that will be applied when rendering the table.","setSortProperty":{"!description":"Sets a new value for property {@link #getSortProperty sortProperty}.\n\nSpecifies the binding property on which the column will sort. Since the column template may have composite bindings, it's not possible to figure out on which binding property the sort shall be applied. Therefore the binding property for sorting must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSortProperty: String) -> sap.ui.table.Column","!category":"function","parameters":{"sSortProperty":"type: string, description: New value for property <code>sortProperty<\/code>"},"!static":false},"getAutoResizable":{"!description":"Gets current value of property {@link #getAutoResizable autoResizable}.\n\nEnables auto-resizing of the column on double clicking the resize bar. The width is determined on the widest currently displayed content. It does not consider rows which are currently not scrolled into view. Currently only implemented to work with the following controls: <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input, sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField, sap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe name of the column which is used in the column visibility menu item as text. If not set as a fallback the column menu tries to get the text from the nested Label.","!type":"fn() -> String","!category":"function","!static":false},"setResizable":{"!description":"Sets a new value for property {@link #getResizable resizable}.\n\nIf set to true, the column can be resized either using the resize bar (by mouse) or using the keyboard (SHIFT + Left/Right Arrow keys)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResizable: Boolean) -> sap.ui.table.Column","!category":"function","parameters":{"bResizable":"type: boolean, description: New value for property <code>resizable<\/code>"},"!static":false},"setFilterOperator":{"!description":"Sets a new value for property {@link #getFilterOperator filterOperator}.\n\nFilter operator to use when filtering this column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterOperator: String) -> sap.ui.table.Column","!category":"function","parameters":{"sFilterOperator":"type: string, description: New value for property <code>filterOperator<\/code>"},"!static":false},"getMenu":{"!description":"Gets content of aggregation {@link #getMenu menu}.\n\nThe menu used by the column. By default the {@link sap.ui.table.ColumnMenu} is used.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of a column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>. To add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of <code>sap.ui.unified.Menu<\/code>.","!type":"fn() -> sap.ui.unified.Menu","!category":"function","!static":false},"setFilterProperty":{"!description":"Sets a new value for property {@link #getFilterProperty filterProperty}.\n\nSpecifies the binding property on which the column shall be filtered. Since the column template may have composite bindings, it's not possible to figure out on which binding property the filter shall be applied. Therefore the binding property for filtering must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The default menu entry is a text input field.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterProperty: String) -> sap.ui.table.Column","!category":"function","parameters":{"sFilterProperty":"type: string, description: New value for property <code>filterProperty<\/code>"},"!static":false},"getShowFilterMenuEntry":{"!description":"Gets current value of property {@link #getShowFilterMenuEntry showFilterMenuEntry}.\n\nDefines if the filter menu entry is displayed\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachColumnMenuOpen":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnMenuOpen columnMenuOpen} event of this <code>sap.ui.table.Column<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Column<\/code> itself.\n\nFires before the column menu is opened.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Column","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Column<\/code> itself"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Column.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalTable":{"getNumberOfExpandedLevels":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>numberOfExpandedLevels<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Gets current value of property {@link #getNumberOfExpandedLevels numberOfExpandedLevels}.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setSelectionInterval":{"!description":"Sets the selection of the <code>AnalyticalTable<\/code> control to the given range (including boundaries).\n\n<b>Note:<\/b> The previous selection will be lost/overridden. If this is not the required behavior, please use <code>addSelectionInterval<\/code> and <code>removeSelectionIntervall<\/code>.","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"iFromIndex":"type: int, description: the start index of the selection range","iToIndex":"type: int, description: the end index of the selection range"},"!static":false},"setDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 replaced by {@link sap.ui.table.Table#setShowOverlay}<br>Sets a new value for property {@link #getDirty dirty}.\n\nIf dirty the content of the Table will be overlayed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(bDirty: Boolean) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"bDirty":"type: boolean, description: New value for property <code>dirty<\/code>"},"!static":false},"getDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 replaced by {@link sap.ui.table.Table#setShowOverlay}<br>Gets current value of property {@link #getDirty dirty}.\n\nIf dirty the content of the Table will be overlayed.","!type":"fn() -> Boolean","!category":"function","!static":false},"getCollapseRecursive":{"!description":"Gets current value of property {@link #getCollapseRecursive collapseRecursive}.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\n\nCalling the setter of this property only has an effect when the tables <code>rows<\/code> aggregation is already bound and the binding supports this feature.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/AnalyticalTable","setEnableGrouping":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The property <code>enableGrouping<\/code> is not supported by the <code>AnalyticalTable<\/code> control.","!type":"fn() -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"getTotalSize":{"!description":"Returns the total size of the data entries.","!type":"fn() -> Number","!category":"function","!static":false},"getContextByIndex":{"!description":"Returns the context of a row by its index.","!type":"fn(iIndex: Number) -> Object","!category":"function","parameters":{"iIndex":"type: int, description: Index of the row to return the context from."},"!static":false},"getEnableGrouping":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The property <code>enableGrouping<\/code> is not supported by the <code>AnalyticalTable<\/code> control.","!type":"fn()","!category":"function","!static":false},"suspendUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to avoid updating the AnalyticalInfo when several column are added to the table. In order to finally update the AnalyticalInfo and request data, resumeUpdateAnalyticalInfo must be called.","!type":"fn()","!category":"function","!static":false},"setGroupBy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The <code>groupBy<\/code> association is not supported by the <code>AnalyticalTable<\/code> control.","!type":"fn() -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"!category":"class","setNumberOfExpandedLevels":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>numberOfExpandedLevels<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Sets a new value for property {@link #getNumberOfExpandedLevels numberOfExpandedLevels}.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iNumberOfExpandedLevels: Number) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"iNumberOfExpandedLevels":"type: int, description: New value for property <code>numberOfExpandedLevels<\/code>"},"!static":false},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected. The nodes are referenced with their absolute row index. Please be aware that the absolute row index only applies to the tree which is visualized by the <code>AnalyticalTable<\/code> control. Invisible nodes (collapsed child nodes) will not be taken into account.","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"iFromIndex":"type: int, description: The starting index of the range which will be deselected.","iToIndex":"type: int, description: The starting index of the range which will be deselected."},"!static":false},"setColumnVisibilityMenuSorter":{"!description":"Sets a new value for property {@link #getColumnVisibilityMenuSorter columnVisibilityMenuSorter}.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oColumnVisibilityMenuSorter: Object) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"oColumnVisibilityMenuSorter":"type: any, description: New value for property <code>columnVisibilityMenuSorter<\/code>"},"!static":false},"getColumnVisibilityMenuSorter":{"!description":"Gets current value of property {@link #getColumnVisibilityMenuSorter columnVisibilityMenuSorter}.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!type":"fn() -> Object","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getGroupBy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The <code>groupBy<\/code> association is not supported by the <code>AnalyticalTable<\/code> control.","!type":"fn()","!category":"function","!static":false},"clearSelection":{"!description":"Clears the complete selection (all analytical table rows/nodes will be deselected).","!type":"fn() -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (in ascending order).\n\nPlease be aware of the following: Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices of actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be returned.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getSumOnTop":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>sumOnTop<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        sumOnTop: true\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Gets current value of property {@link #getSumOnTop sumOnTop}.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affect the total sum.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new AnalyticalTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSumOnTop sumOnTop} : boolean (default: false)<\/li>\n<li>{@link #getNumberOfExpandedLevels numberOfExpandedLevels} : int (default: 0)<\/li>\n<li>{@link #getAutoExpandMode autoExpandMode} : string (default: Bundled)<\/li>\n<li>{@link #getColumnVisibilityMenuSorter columnVisibilityMenuSorter} : any<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getDirty dirty} : boolean<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","selectAll":{"!description":"Selects all available nodes/rows.\n\nExplanation of the SelectAll function and what to expect from its behavior: All rows/nodes stored locally on the client are selected. In addition all subsequent rows/tree nodes, which will be paged into view are also immediately selected. However, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.","!type":"fn() -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"setSumOnTop":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>sumOnTop<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        sumOnTop: true\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Sets a new value for property {@link #getSumOnTop sumOnTop}.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affect the total sum.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSumOnTop: Boolean) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"bSumOnTop":"type: boolean, description: New value for property <code>sumOnTop<\/code>"},"!static":false},"!description":"Table which handles analytical OData backends. The AnalyticalTable only works with an AnalyticalBinding and correctly annotated OData services. Please check on the SAP Annotations for OData Version 2.0 documentation for further details.","getAutoExpandMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>autoExpandMode<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        autoExpandMode: \"Bundled\"\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Gets current value of property {@link #getAutoExpandMode autoExpandMode}.\n\nThe kind of auto expansion algorithm, e.g. optimized filter conditions, per level requests, ... Must be a value of <code>sap.ui.table.TreeAutoExpandMode<\/code>.\n\nDefault value is <code>Bundled<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","parameters":{"iRowIndex":"type: int, description: The row index for which the selection state should be retrieved"},"!static":false},"resumeUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to force updating the AnalyticalInfo","!type":"fn(bSuppressRefresh: Boolean, bForceChange: Boolean)","!category":"function","parameters":{"bForceChange":"type: boolean, description: forces the binding to fire a change event","bSuppressRefresh":"type: boolean, description: binding shall not refresh data"},"!static":false},"setSelectedIndex":{"!description":"In an <code>AnalyticalTable<\/code> control you can only select indices, which correspond to the currently visualized tree. Invisible nodes (e.g. collapsed child nodes) cannot be selected via Index, because they do not correspond to an <code>AnalyticalTable<\/code> row.","!type":"fn(iRowIndex: Number) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"iRowIndex":"type: int, description: The row index which will be selected (in case it exists)"},"!static":false},"setCollapseRecursive":{"!description":"Sets a new value for property {@link #getCollapseRecursive collapseRecursive}.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\n\nCalling the setter of this property only has an effect when the tables <code>rows<\/code> aggregation is already bound and the binding supports this feature.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bCollapseRecursive: Boolean) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"bCollapseRecursive":"type: boolean, description: New value for property <code>collapseRecursive<\/code>"},"!static":false},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex. The nodes are referenced via their absolute row index. Please be aware that the absolute row index only applies to the tree which is visualized by the <code>AnalyticalTable<\/code> control. Invisible nodes (collapsed child nodes) will not be taken into account.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection. To override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"iFromIndex":"type: int, description: The starting index of the range which will be selected.","iToIndex":"type: int, description: The starting index of the range which will be selected."},"!static":false},"getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the start/end of a selection range, when using Shift-Click to select multiple entries at once.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setAutoExpandMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>autoExpandMode<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        autoExpandMode: \"Bundled\"\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Sets a new value for property {@link #getAutoExpandMode autoExpandMode}.\n\nThe kind of auto expansion algorithm, e.g. optimized filter conditions, per level requests, ... Must be a value of <code>sap.ui.table.TreeAutoExpandMode<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Bundled<\/code>.","!type":"fn(sAutoExpandMode: String) -> sap.ui.table.AnalyticalTable","!category":"function","parameters":{"sAutoExpandMode":"type: string, description: New value for property <code>autoExpandMode<\/code>"},"!static":false},"!proto":"sap.ui.table.Table","!helpDescription":"Table which handles analytical OData backends. The AnalyticalTable only works with an AnalyticalBinding and correctly annotated OData services. Please check on the SAP Annotations for OData Version 2.0 documentation for further details.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalTable.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table":{"visibleRowCountMode":{"!description":"This defines how the table handles the visible rows in the table. The default behavior is, that a fixed row count is defined. If you change it to auto the visibleRowCount property is changed by the table automatically. It will then adjust its maximum row count to the space it is allowed to cover (limited by the surrounding container) and its minimum row count to the value of the property minAutoRowCount (default value : 5) In manual mode the user can change the visibleRowCount interactively.","!type":"sap.ui.table.VisibleRowCountMode","!category":"enum"},"selectionBehavior":{"!description":"Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both can be clicked to select a row. <b>Note:<\/b> Since the group header visualization relies on the row selectors, the row selectors are always shown if the grouping functionality (depends on table type) is enabled, even if <code>sap.ui.table.SelectionBehavior.RowOnly<\/code> is set.","!type":"sap.ui.table.SelectionBehavior","!category":"enum"},"sumOnTop":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>sumOnTop<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        sumOnTop: true\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affect the total sum.","!type":"Boolean","!category":"enum"},"filtered":{"!description":"Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>","!type":"Boolean","!category":"enum"},"GroupEventType":"sap.ui.table.GroupEventType","showOverlay":{"!description":"Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.","!type":"Boolean","!category":"enum"},"enableSelectAll":{"!description":"Specifies if a select all button should be displayed in the top left corner. This button is only displayed if the row selector is visible and the selection mode is set to any kind of multi selection.","!type":"Boolean","!category":"enum"},"highlight":{"!description":"The highlight state of the rows. If the highlight is set to {@link sap.ui.core.MessageType.None} (default), no highlights are visible.","!type":"sap.ui.core.MessageType","!category":"enum"},"!module":"sap/ui/table/library","groupHeaderFormatter":{"!description":"If the column is grouped, this formatter is used to format the value in the group header","!type":"Object","!category":"enum"},"enableCellFilter":{"!description":"Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.","!type":"Boolean","!category":"enum"},"collapseAll":{"!description":"Collapses all nodes (and their child nodes if collapseRecursive is activated).","!type":"String","!category":"enum"},"maxVisibleItems":{"!description":"The maximum number of items which are displayed before an overflow mechanism takes effect. A value smaller than 1 means an infinite number of visible items. The overall height of the menu is limited by the height of the screen. If the maximum possible height is reached, an overflow takes effect, even if the maximum number of visible items is not yet reached.","!type":"Number","!category":"enum"},"columnHeaderHeight":{"!description":"Height of the column header of the Table in pixel.","!type":"Number","!category":"enum"},"resizable":{"!description":"If set to true, the column can be resized either using the resize bar (by mouse) or using the keyboard (SHIFT + Left/Right Arrow keys)","!type":"Boolean","!category":"enum"},"AnalyticalColumn":"sap.ui.table.AnalyticalColumn_obj","sortOrder":{"!description":"This property indicates the sort direction (Ascending or Descending). The corresponding icon will be rendered if the property <code>sorted<\/code> is <code>true<\/code>","!type":"sap.ui.table.SortOrder","!category":"enum"},"AnalyticalColumnMenu":"sap.ui.table.AnalyticalColumnMenu_obj","busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!type":"sap.ui.core.BusyIndicatorSize","!category":"enum"},"pageSize":{"!description":"The keyboard can be used to navigate through the items of a menu. Beside the arrow keys for single steps and the <i>Home<\/i> / <i>End<\/i> keys for jumping to the first / last item, the <i>Page Up<\/i> / <i>Page Down<\/i> keys can be used to jump an arbitrary number of items up or down. This number can be defined via the <code>pageSize<\/code> property. For values smaller than 1, paging behaves in a similar way to when using the <i>Home<\/i> / <i>End<\/i> keys. If the value equals 1, the paging behavior is similar to that of the arrow keys.","!type":"Number","!category":"enum"},"visibleRowCount":{"!description":"Number of visible rows of the table.","!type":"Number","!category":"enum"},"navigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 undefined<br>This property has been deprecated and must not be used anymore, since <code>Scrollbar<\/code> is the only supported option.","!type":"sap.ui.table.NavigationMode","!category":"enum"},"flexible":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44 this property has no effect. Use the property <code>minWidth<\/code> in combination with the property <code>width=\"auto\"<\/code> instead.<br>If the table is wider than the sum of widths of the visible columns, the columns will be resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the original width. If all columns are set to not be flexible, an extra \"dummy\" column will be created at the end of the table.","!type":"Boolean","!category":"enum"},"SharedDomRef":"sap.ui.table.SharedDomRef","rowHeight":{"!description":"The height of the row content in pixel. The actual row height is also influenced by other factors, such as the border width. If no value is set, a default height is applied based on the content density configuration.","!type":"Number","!category":"enum"},"TreeAutoExpandMode":"sap.ui.table.TreeAutoExpandMode","alternateRowColors":{"!description":"Enables alternating table row colors. Alternate row coloring is not available for the tree mode.","!type":"Boolean","!category":"enum"},"NavigationMode":"sap.ui.table.NavigationMode","Row":"sap.ui.table.Row_obj","rootLevel":{"!description":"The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services. This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations. This property is only supported with sap.ui.model.odata.v2.ODataModel The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.","!type":"Number","!category":"enum"},"RowSettings":"sap.ui.table.RowSettings_obj","TreeTable":"sap.ui.table.TreeTable_obj","fixedColumnCount":{"!description":"Number of columns that are fix on the left. When you use a horizontal scrollbar, only the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work. Please note that the aggregated width of all fixed columns must not exceed the table width since there will be no scrollbar for fixed columns.","!type":"Number","!category":"enum"},"filterType":{"!description":"Type of Filter. This is used to transform the search term to the specified type, to make sure that the right columns are displayed. This should be the same as defined in binding for this column. As an alternative you can pass a function which does the conversion. The function receives the entered filter value as parameter and returns the proper value for the filter expression. Another option is to pass the class name of the type, e.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax, e.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: \\{\\} \\}\"<\/code>. Here the escaping is mandatory to avoid handling by the binding parser. By default the filter type is <code>sap.ui.model.type.String<\/code>.","!type":"Object","!category":"enum"},"!helpDescription":"Table-like controls, mainly for desktop scenarios.","filterProperty":{"!description":"Specifies the binding property on which the column shall be filtered. Since the column template may have composite bindings, it's not possible to figure out on which binding property the filter shall be applied. Therefore the binding property for filtering must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The default menu entry is a text input field.","!type":"String","!category":"enum"},"enableGrouping":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"Boolean","!category":"enum"},"persoService":{"!description":"Personalization Service object. Needs to have the following methods: <ul> <li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <\/ul>","!type":"Object","!category":"enum"},"groupHeaderProperty":{"!description":"The property name of the rows data which will be displayed as a group header if the group mode is enabled","!type":"String","!category":"enum"},"columnVisibilityMenuSorter":{"!description":"Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!type":"Object","!category":"enum"},"Table":"sap.ui.table.Table_obj","showFilterMenuEntry":{"!description":"Defines if the filter menu entry is displayed","!type":"Boolean","!category":"enum"},"!category":"namespace","enableColumnFreeze":{"!description":"Flag whether to show or hide the column menu item to freeze or unfreeze a column.","!type":"Boolean","!category":"enum"},"headerSpan":{"!description":"If this property is set, a span is applied for the header. When moving columns, all columns which are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of integers (if you use the multi header feature of the table). If you only specify an integer, this span is applied for all header rows, with multiple integers you can specify a separate span for each header row.","!type":"Object","!category":"enum"},"autoResizable":{"!description":"Enables auto-resizing of the column on double clicking the resize bar. The width is determined on the widest currently displayed content. It does not consider rows which are currently not scrolled into view. Currently only implemented to work with the following controls: <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input, sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField, sap.ui.commons.Checkbox, sap.m.Checkbox<\/code>","!type":"Boolean","!category":"enum"},"VisibleRowCountMode":"sap.ui.table.VisibleRowCountMode","sortProperty":{"!description":"Specifies the binding property on which the column will sort. Since the column template may have composite bindings, it's not possible to figure out on which binding property the sort shall be applied. Therefore the binding property for sorting must be specified. For example, if the first name and last name are displayed in the same column, only one of the two can be defined as <code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!type":"String","!category":"enum"},"RowActionType":"sap.ui.table.RowActionType","defaultFilterOperator":{"!description":"If this property is set, the default filter operator of the column is overridden. By default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!type":"String","!category":"enum"},"showColumnVisibilityMenu":{"!description":"Flag to show or hide the column visibility menu. This menu will get displayed in each generated column header menu. It allows to show or hide columns","!type":"Boolean","!category":"enum"},"SelectionBehavior":"sap.ui.table.SelectionBehavior","!description":"Table-like controls, mainly for desktop scenarios.","numberOfExpandedLevels":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>numberOfExpandedLevels<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Number of levels, which should be opened initially (on first load of data).","!type":"Number","!category":"enum"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!type":"[String]","!category":"enum"},"useGroupMode":{"!description":"If group mode is enabled nodes with subitems are rendered as if they were group headers. This can be used to do the grouping for an OData service on the backend and visualize this in a table.","!type":"Boolean","!category":"enum"},"fixedRowCount":{"!description":"Number of rows that are fix on the top. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.","!type":"Number","!category":"enum"},"SelectionMode":"sap.ui.table.SelectionMode","rowActionCount":{"!description":"Number of row actions made visible which determines the width of the row action column. The values <code>0<\/code>, <code>1<\/code> and <code>2<\/code> are possible.","!type":"Number","!category":"enum"},"expandFirstLevel":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.46.3 replaced by the corresponding binding parameter <code>numberOfExpandedLevels<\/code>.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter <code>numberOfExpandedLevels<\/code> is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Specifies whether the first level is expanded.","!type":"Boolean","!category":"enum"},"autoExpandMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44.0 please use the corresponding binding parameter <code>autoExpandMode<\/code> instead.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        autoExpandMode: \"Bundled\"\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>The kind of auto expansion algorithm, e.g. optimized filter conditions, per level requests, ... Must be a value of <code>sap.ui.table.TreeAutoExpandMode<\/code>.","!type":"String","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nSee {@link sap.ui.core.RenderManager#writeInvisiblePlaceholderData RenderManager#writeInvisiblePlaceholderData} for details.","!type":"Boolean","!category":"enum"},"enableBusyIndicator":{"!description":"If set to <code>true<\/code>, the table changes its busy state, resulting in showing or hiding the busy indicator. The table will switch to busy as soon as data is retrieved to be displayed in the currently visible rows. This happens, for example, during scrolling, filtering, or sorting. As soon as the data has been retrieved, the table switches back to not busy. The busy state of the table can still be set manually by calling {@link sap.ui.core.Control#setBusy}.","!type":"Boolean","!category":"enum"},"minWidth":{"!description":"Defines the minimum width of a column in pixels. <p>This property only has an effect if the given column width is flexible, for example with width <code>auto<\/code>. <p>This property only influences the automatic behavior. If a user adjusts the column width manually, the column width can become smaller. <p>Minimal column width is device-dependent, for example on desktop devices the column will not be smaller than 48px.","!type":"Number","!category":"enum"},"SortOrder":"sap.ui.table.SortOrder","columnHeaderVisible":{"!description":"Flag whether the column header is visible or not.","!type":"Boolean","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"type":{"!description":"The type of the item. Setting the type ensures default values for the properties <code>icon<\/code> and <code>text<\/code>. If an icon or text is set explicitly this setting is used.","!type":"sap.ui.table.RowActionType","!category":"enum"},"Column":"sap.ui.table.Column_obj","selectionMode":{"!description":"Selection mode of the Table. This property controls whether single or multiple rows can be selected and how the selection can be extended. It may also influence the visual appearance. When the selection mode is changed, the current selection is removed. <b>Note:<\/b> Since the group header visualization relies on the row selectors, the row selectors are always shown if the grouping functionality (depends on table type) is enabled, even if <code>sap.ui.table.SelectionMode.None<\/code> is set.","!type":"sap.ui.table.SelectionMode","!category":"enum"},"grouped":{"!description":"Indicates if the column is grouped.","!type":"Boolean","!category":"enum"},"showIfGrouped":{"!description":"Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.","!type":"Boolean","!category":"enum"},"expand":{"!description":"Expands one or more rows.","!type":"String","!category":"enum"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"AnalyticalTable":"sap.ui.table.AnalyticalTable_obj","collapse":{"!description":"Collapses one or more rows.","!type":"String","!category":"enum"},"enabled":{"!description":"When a menu is disabled none of its items can be selected by the user. The enabled property of an item (@link sap.ui.unified.MenuItemBase#getEnabled) has no effect when the menu of the item is disabled.","!type":"Boolean","!category":"enum"},"text":{"!description":"The text of the item. It is used as tooltip and for accessibility purposes.","!type":"String","!category":"enum"},"inResult":{"!description":"Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.","!type":"Boolean","!category":"enum"},"ariaDescription":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.0 replaced by <code>ariaLabelledBy<\/code> association<br>Accessible label / description of the menu for assistive technologies like screenreaders.","!type":"String","!category":"enum"},"minAutoRowCount":{"!description":"This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive. For any other visibleRowCountMode, it is ignored.","!type":"Number","!category":"enum"},"width":{"!description":"Width of the Table.","!type":"sap.ui.core.CSSSize","!category":"enum"},"editable":{"!description":"Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)","!type":"Boolean","!category":"enum"},"TablePersoController":"sap.ui.table.TablePersoController_obj","enableColumnReordering":{"!description":"Flag to enable or disable column reordering","!type":"Boolean","!category":"enum"},"showSortMenuEntry":{"!description":"Defines if the sort menu entries are displayed","!type":"Boolean","!category":"enum"},"customDataKey":{"!description":"By defining a custom data key the <code>TablePersoController<\/code> will try to get the key for saving the perso data from the custom data of the Table and Column instead of creating it by concatenating the ID of the Table and the Column. Basically this will be more stable than using the auto IDs.","!type":"String","!category":"enum"},"autoSave":{"!description":"Auto save state","!type":"Boolean","!category":"enum"},"hAlign":{"!description":"Horizontal alignment of the column content. Controls with a text align do not inherit the horizontal alignment. You have to set the text align directly on the template.","!type":"sap.ui.core.HorizontalAlign","!category":"enum"},"filterValue":{"!description":"Specifies the value of the filter as string (will be converted into the proper data type). It is possible to provide a filterOperator as string, as shown here: <pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\n*something    ends with\nsomething*    starts with\n*something*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!type":"String","!category":"enum"},"filterOperator":{"!description":"Filter operator to use when filtering this column.","!type":"String","!category":"enum"},"name":{"!description":"The name of the column which is used in the column visibility menu item as text. If not set as a fallback the column menu tries to get the text from the nested Label.","!type":"String","!category":"enum"},"dirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 replaced by {@link sap.ui.table.Table#setShowOverlay}<br>If dirty the content of the Table will be overlayed.","!type":"Boolean","!category":"enum"},"isExpanded":{"!description":"Checks whether the row is expanded or collapsed.","!type":"String","!category":"enum"},"icon":{"!description":"The icon of the item.","!type":"sap.ui.core.URI","!category":"enum"},"selectedIndex":{"!description":"Zero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the lead selected item. Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.","!type":"Number","!category":"enum"},"firstVisibleRow":{"!description":"First visible row.","!type":"Number","!category":"enum"},"sorted":{"!description":"Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>","!type":"Boolean","!category":"enum"},"RowActionItem":"sap.ui.table.RowActionItem_obj","showNoData":{"!description":"Flag whether to show the no data overlay or not once the table is empty. If set to false the table will just show a grid of empty cells","!type":"Boolean","!category":"enum"},"fixedBottomRowCount":{"!description":"Number of rows that are fix on the bottom. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.","!type":"Number","!category":"enum"},"collapseRecursive":{"!description":"Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed. This property is only supported with sap.ui.model.odata.v2.ODataModel. <b>Note:<\/b> collapseRecursive is currently <b>not<\/b> supported if your OData service exposes the hierarchy annotation <code>hierarchy-descendant-count-for<\/code>. In this case the value of the collapseRecursive property is ignored. For more information about the OData hierarchy annotations, please see the <b>SAP Annotations for OData Version 2.0<\/b> specification.","!type":"Boolean","!category":"enum"},"threshold":{"!description":"The <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth scrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the <code>threshold<\/code> is 100, there will be 110 records fetched with the initial load. If the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as the <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.","!type":"Number","!category":"enum"},"RowAction":"sap.ui.table.RowAction_obj","summed":{"!description":"If defined a sum for this column is calculated","!type":"Boolean","!category":"enum"},"enableCustomFilter":{"!description":"Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button will be rendered for which' press event (customFilter) you can register an event handler.","!type":"Boolean","!category":"enum"},"ColumnMenu":"sap.ui.table.ColumnMenu_obj","leadingProperty":{"!description":"Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!type":"String","!category":"enum"}},"sap.ui.table.AnalyticalColumn":{"setSummed":{"!description":"Sets a new value for property {@link #getSummed summed}.\n\nIf defined a sum for this column is calculated\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSummed: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","parameters":{"bSummed":"type: boolean, description: New value for property <code>summed<\/code>"},"!static":false},"setLeadingProperty":{"!description":"Sets a new value for property {@link #getLeadingProperty leadingProperty}.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sLeadingProperty: String) -> sap.ui.table.AnalyticalColumn","!category":"function","parameters":{"sLeadingProperty":"type: string, description: New value for property <code>leadingProperty<\/code>"},"!static":false},"getShowIfGrouped":{"!description":"Gets current value of property {@link #getShowIfGrouped showIfGrouped}.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setInResult":{"!description":"Sets a new value for property {@link #getInResult inResult}.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bInResult: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","parameters":{"bInResult":"type: boolean, description: New value for property <code>inResult<\/code>"},"!static":false},"isGroupable":{"!description":"Returns the information whether the column is groupable.\n\nThe column is groupable only if the following conditions are fulfilled: <ul> <li>The column must be child of an <code>AnalyticalTable<\/code>.<\/li> <li>The <code>rows<\/code> aggregation of the table must be bound.<\/li> <li>The metadata of the model must be loaded.<\/li> <li>The column's <code>leadingProperty<\/code> must be a sortable and filterable dimension.<\/li> <\/ul>","!type":"fn() -> Boolean","!category":"function","!static":false},"getGroupHeaderFormatter":{"!description":"Gets current value of property {@link #getGroupHeaderFormatter groupHeaderFormatter}.\n\nIf the column is grouped, this formatter is used to format the value in the group header","!type":"fn() -> Object","!category":"function","!static":false},"!constructorDescription":"Constructor for a new AnalyticalColumn.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLeadingProperty leadingProperty} : string<\/li>\n<li>{@link #getSummed summed} : boolean (default: false)<\/li>\n<li>{@link #getInResult inResult} : boolean (default: false)<\/li>\n<li>{@link #getShowIfGrouped showIfGrouped} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderFormatter groupHeaderFormatter} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Column#constructor sap.ui.table.Column}\ncan be used as well.","!module":"sap/ui/table/AnalyticalColumn","getLeadingProperty":{"!description":"Gets current value of property {@link #getLeadingProperty leadingProperty}.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!type":"fn() -> String","!category":"function","!static":false},"getSummed":{"!description":"Gets current value of property {@link #getSummed summed}.\n\nIf defined a sum for this column is calculated\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setGroupHeaderFormatter":{"!description":"Sets a new value for property {@link #getGroupHeaderFormatter groupHeaderFormatter}.\n\nIf the column is grouped, this formatter is used to format the value in the group header\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oGroupHeaderFormatter: Object) -> sap.ui.table.AnalyticalColumn","!category":"function","parameters":{"oGroupHeaderFormatter":"type: any, description: New value for property <code>groupHeaderFormatter<\/code>"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getInResult":{"!description":"Gets current value of property {@link #getInResult inResult}.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!category":"class","setShowIfGrouped":{"!description":"Sets a new value for property {@link #getShowIfGrouped showIfGrouped}.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowIfGrouped: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","parameters":{"bShowIfGrouped":"type: boolean, description: New value for property <code>showIfGrouped<\/code>"},"!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.table.Column","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumn.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.SortOrder":{"!description":"Sort order of a column","Descending":{"!description":"Sort Order: descending.","!type":"String","!category":"enum"},"!category":"static class","Ascending":{"!description":"Sort Order: ascending.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.SelectionBehavior":{"!description":"Selection behavior of the table","RowOnly":{"!description":"Rows can only be selected on the row (and the selector is hidden).","!type":"String","!category":"enum"},"Row":{"!description":"Rows can be selected on the complete row.","!type":"String","!category":"enum"},"!category":"static class","RowSelector":{"!description":"Rows can only be selected on the row selector.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.NavigationMode":{"!description":"Navigation mode of the table","!category":"static class","Paginator":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.NavigationMode.Scrollbar}<br>Uses the paginator control. This option must no longer be used. Using a scrollbar is the only navigation mode which is supported by the <code>sap.ui.table<\/code> library. The <code>navigationMode<\/code> property has always been a visual representation. No matter which navigation mode is used, data fetched from an OData service is loaded page-wise.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library","Scrollbar":{"!description":"Uses the scrollbar control.","!type":"String","!category":"enum"}},"sap.ui.table.RowActionItem_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.RowActionItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.RowActionItem"},"sap.ui.table.ColumnMenu":{"!description":"The column menu provides all common actions that can be performed on a column.","extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new ColumnMenu.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of\na column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>.\nTo add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of\n<code>sap.ui.unified.Menu<\/code>.","!module":"sap/ui/table/ColumnMenu","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.ColumnMenu.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.unified.Menu","!helpDescription":"The column menu provides all common actions that can be performed on a column."},"sap.ui.table.RowSettings":{"!description":"The <code>RowSettings<\/code> control allows you to configure a row. You can only use this control in the context of the <code>sap.ui.table.Table<\/code> control to define row settings.","extend":{"!description":"Creates a new subclass of class sap.ui.table.RowSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setHighlight":{"!description":"Sets a new value for property {@link #getHighlight highlight}.\n\nThe highlight state of the rows. If the highlight is set to {@link sap.ui.core.MessageType.None} (default), no highlights are visible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>None<\/code>.","!type":"fn(sHighlight: sap.ui.core.MessageType) -> sap.ui.table.RowSettings","!category":"function","parameters":{"sHighlight":"type: sap.ui.core.MessageType, description: New value for property <code>highlight<\/code>"},"!static":false},"!category":"class","!constructorDescription":"Constructor for new RowSettings.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHighlight highlight} : sap.ui.core.MessageType (default: None)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getHighlight":{"!description":"Gets current value of property {@link #getHighlight highlight}.\n\nThe highlight state of the rows. If the highlight is set to {@link sap.ui.core.MessageType.None} (default), no highlights are visible.\n\nDefault value is <code>None<\/code>.","!type":"fn() -> sap.ui.core.MessageType","!category":"function","!static":false},"!module":"sap/ui/table/RowSettings","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.RowSettings.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Element","!helpDescription":"The <code>RowSettings<\/code> control allows you to configure a row. You can only use this control in the context of the <code>sap.ui.table.Table<\/code> control to define row settings."},"sap.ui":{"!category":"namespace","table":"sap.ui.table"},"sap.ui.table.SharedDomRef":{"!description":"Shared DOM Reference IDs of the table.\n\nContains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.","VerticalScrollBar":{"!description":"The element id of the Vertical Scroll Bar of the sap.ui.table.Table.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/table/library","HorizontalScrollBar":{"!description":"The element id of the Horizontal Scroll Bar of the sap.ui.table.Table.","!type":"String","!category":"enum"}},"sap.ui.table.TreeTable":{"setRootLevel":{"!description":"Sets a new value for property {@link #getRootLevel rootLevel}.\n\nThe root level is the level of the topmost tree nodes, which will be used as an entry point for OData services. This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations. This property is only supported with sap.ui.model.odata.v2.ODataModel The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iRootLevel: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iRootLevel":"type: int, description: New value for property <code>rootLevel<\/code>"},"!static":false},"setSelectionInterval":{"!description":"Sets the selection of the TreeTable to the given range (including boundaries). Beware: The previous selection will be lost/overriden. If this is not wanted, please use \"addSelectionInterval\" and \"removeSelectionIntervall\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iFromIndex":"type: int, description: the start index of the selection range","iToIndex":"type: int, description: the end index of the selection range"},"!static":false},"getCollapseRecursive":{"!description":"Gets current value of property {@link #getCollapseRecursive collapseRecursive}.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed. This property is only supported with sap.ui.model.odata.v2.ODataModel. <b>Note:<\/b> collapseRecursive is currently <b>not<\/b> supported if your OData service exposes the hierarchy annotation <code>hierarchy-descendant-count-for<\/code>. In this case the value of the collapseRecursive property is ignored. For more information about the OData hierarchy annotations, please see the <b>SAP Annotations for OData Version 2.0<\/b> specification.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/TreeTable","setFixedRowCount":{"!description":"Setter for property <code>fixedRowCount<\/code>.\n\n<b>This property is not supportd for the TreeTable and will be ignored!<\/b>\n\nDefault value is <code>0<\/code>","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iFixedRowCount":"type: int, description: new value for property <code>fixedRowCount<\/code>"},"!static":false},"setEnableGrouping":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 To get a group-like visualization the <code>useGroupMode<\/code> property can be used.<br>The property <code>enableGrouping<\/code> is not supported by the <code>TreeTable<\/code> control.","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"setExpandFirstLevel":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.46.3 replaced by the corresponding binding parameter <code>numberOfExpandedLevels<\/code>.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter <code>numberOfExpandedLevels<\/code> is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Sets a new value for property {@link #getExpandFirstLevel expandFirstLevel}.\n\nSpecifies whether the first level is expanded.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bExpandFirstLevel: Boolean) -> sap.ui.table.TreeTable","!category":"function","parameters":{"bExpandFirstLevel":"type: boolean, description: New value for property <code>expandFirstLevel<\/code>"},"!static":false},"collapseAll":{"!description":"Collapses all nodes (and lower if collapseRecursive is activated)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"getEnableGrouping":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The property <code>enableGrouping<\/code> is not supported by the <code>TreeTable<\/code> control.","!type":"fn()","!category":"function","!static":false},"setGroupBy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The <code>groupBy<\/code> association is not supported by the <code>TreeTable<\/code> control.","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"!category":"class","expand":{"!description":"Expands one or more rows.","!type":"fn(vRowIndex: [Number | [object Object]]) -> sap.ui.table.TreeTable","!category":"function","parameters":{"vRowIndex":"type: int|[object Object][], description: A single index or an array of indices of the rows to be expanded"},"!static":false},"isExpanded":{"!description":"Checks whether the row is expanded or collapsed.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","parameters":{"iRowIndex":"type: int, description: The index of the row to be checked"},"!static":false},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected. Tree nodes are referenced with theit absolute row index inside the tree- Please be aware, that the absolute row index only applies to the tree which is visualized by the TreeTable. Invisible nodes (collapsed child nodes) will not be regarded.","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iFromIndex":"type: int, description: The starting index of the range which will be deselected.","iToIndex":"type: int, description: The starting index of the range which will be deselected."},"!static":false},"collapse":{"!description":"Collapses one or more rows.","!type":"fn(vRowIndex: [Number | [object Object]]) -> sap.ui.table.TreeTable","!category":"function","parameters":{"vRowIndex":"type: int|[object Object][], description: A single index or an array of indices of the rows to be collapsed"},"!static":false},"getGroupHeaderProperty":{"!description":"Gets current value of property {@link #getGroupHeaderProperty groupHeaderProperty}.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled","!type":"fn() -> String","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getGroupBy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 undefined<br>The <code>groupBy<\/code> association is not supported by the <code>TreeTable<\/code> control.","!type":"fn()","!category":"function","!static":false},"clearSelection":{"!description":"Clears the complete selection (all tree table rows/nodes will lose their selection)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"fireToggleOpenState":{"!description":"Fires event {@link #event:toggleOpenState toggleOpenState} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.TreeTable","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (ordered ascending).\n\nPlease be aware of the following: Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices of actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be returned.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new TreeTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpandFirstLevel expandFirstLevel} : boolean (default: false)<\/li>\n<li>{@link #getUseGroupMode useGroupMode} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderProperty groupHeaderProperty} : string<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getRootLevel rootLevel} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:toggleOpenState toggleOpenState} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","selectAll":{"!description":"Selects all available nodes/rows.\n\nAll rows/tree nodes that are locally stored on the client and that are part of the currently visible tree are selected. Additional rows or tree nodes that come into view through scrolling or paging are also selected immediately as soon as they get visible. However, <code>SelectAll<\/code> does not retrieve any data from the back end in order to improve performance and reduce the network traffic.","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"setGroupHeaderProperty":{"!description":"Sets a new value for property {@link #getGroupHeaderProperty groupHeaderProperty}.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sGroupHeaderProperty: String) -> sap.ui.table.TreeTable","!category":"function","parameters":{"sGroupHeaderProperty":"type: string, description: New value for property <code>groupHeaderProperty<\/code>"},"!static":false},"detachToggleOpenState":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:toggleOpenState toggleOpenState} event of this <code>sap.ui.table.TreeTable<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.TreeTable","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setUseFlatMode":{"!description":"Allows to hide the tree structure (tree icons, indentation) in tree mode (property <code>useGroupMode<\/code> is set to <code>false<\/code>).\n\nThis option might be useful in some scenarios when actually a tree table must be used but under certain conditions the data is not hierarchical, because it contains leafs only.\n\n<b>Note:<\/b> In flat mode the user of the table cannot expand or collapse certain nodes and the hierarchy is not visible to the user. The caller of this function has to ensure to use this option only with non-hierarchical data.","!type":"fn(bFlat: Boolean) -> sap.ui.table.TreeTable","!category":"function","parameters":{"bFlat":"type: boolean, description: If set to <code>true<\/code>, the flat mode is enabled"},"!static":false},"getUseGroupMode":{"!description":"Gets current value of property {@link #getUseGroupMode useGroupMode}.\n\nIf group mode is enabled nodes with subitems are rendered as if they were group headers. This can be used to do the grouping for an OData service on the backend and visualize this in a table.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getRootLevel":{"!description":"Gets current value of property {@link #getRootLevel rootLevel}.\n\nThe root level is the level of the topmost tree nodes, which will be used as an entry point for OData services. This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations. This property is only supported with sap.ui.model.odata.v2.ODataModel The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!description":"The TreeTable control provides a comprehensive set of features to display hierarchical data.","expandToLevel":{"!description":"Expands all nodes starting from the root level to the given level 'iLevel'.\n\nOnly supported with ODataModel v2, when running in OperationMode.Client or OperationMode.Auto. Fully supported for <code>sap.ui.model.ClientTreeBinding<\/code>, e.g. if you are using a <code>sap.ui.model.json.JSONModel<\/code>.\n\nPlease also see <code>sap.ui.model.odata.OperationMode<\/code>.","!type":"fn(iLevel: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iLevel":"type: int, description: the level to which the trees shall be expanded"},"!static":false},"isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","parameters":{"iRowIndex":"type: int, description: The row index for which the selection state should be retrieved"},"!static":false},"getExpandFirstLevel":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.46.3 replaced by the corresponding binding parameter <code>numberOfExpandedLevels<\/code>.\n\nExample: <pre>\n  oTable.bindRows({\n     path: \"...\",\n     parameters: {\n        numberOfExpandedLevels: 1\n     }\n  });\n<\/pre>\n\nThe value of the property is only taken into account if no parameter <code>numberOfExpandedLevels<\/code> is given in the binding information. Changes to this property after the table is bound do not have any effect unless an explicit (re-)bind of the <code>rows<\/code> aggregation is done.<br>Gets current value of property {@link #getExpandFirstLevel expandFirstLevel}.\n\nSpecifies whether the first level is expanded.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachToggleOpenState":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:toggleOpenState toggleOpenState} event of this <code>sap.ui.table.TreeTable<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.TreeTable<\/code> itself.\n\nFired when a row has been expanded or collapsed by user interaction. Only available in hierarchical mode.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.TreeTable","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.TreeTable<\/code> itself"},"!static":false},"setSelectedIndex":{"!description":"Overridden from Table.js base class. In a TreeTable you can only select indices, which correspond to the currently visualized tree. Invisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not correspond to a TreeTable row.","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iRowIndex":"type: int, description: The row index which will be selected (if existing)"},"!static":false},"setCollapseRecursive":{"!description":"Sets a new value for property {@link #getCollapseRecursive collapseRecursive}.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed. This property is only supported with sap.ui.model.odata.v2.ODataModel. <b>Note:<\/b> collapseRecursive is currently <b>not<\/b> supported if your OData service exposes the hierarchy annotation <code>hierarchy-descendant-count-for<\/code>. In this case the value of the collapseRecursive property is ignored. For more information about the OData hierarchy annotations, please see the <b>SAP Annotations for OData Version 2.0<\/b> specification.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bCollapseRecursive: Boolean) -> sap.ui.table.TreeTable","!category":"function","parameters":{"bCollapseRecursive":"type: boolean, description: New value for property <code>collapseRecursive<\/code>"},"!static":false},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex. The TreeNodes are referenced via their absolute row index. Please be aware, that the absolute row index only applies to the tree which is visualized by the TreeTable. Invisible nodes (collapsed child nodes) will not be regarded.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection. To override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","parameters":{"iFromIndex":"type: int, description: The starting index of the range which will be selected.","iToIndex":"type: int, description: The starting index of the range which will be selected."},"!static":false},"getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the start/end of a selection range, when using Shift-Click to select multiple entries at once.","!type":"fn() -> Number","!category":"function","!static":false},"setUseGroupMode":{"!description":"Sets a new value for property {@link #getUseGroupMode useGroupMode}.\n\nIf group mode is enabled nodes with subitems are rendered as if they were group headers. This can be used to do the grouping for an OData service on the backend and visualize this in a table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bUseGroupMode: Boolean) -> sap.ui.table.TreeTable","!category":"function","parameters":{"bUseGroupMode":"type: boolean, description: New value for property <code>useGroupMode<\/code>"},"!static":false},"!proto":"sap.ui.table.Table","!helpDescription":"The TreeTable control provides a comprehensive set of features to display hierarchical data.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TreeTable.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.Table":{"detachColumnVisibility":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnVisibility columnVisibility} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireColumnResize":{"!description":"Fires event {@link #event:columnResize columnResize} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setFooter":{"!description":"Sets the aggregated {@link #getFooter footer}.","!type":"fn(vFooter: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","parameters":{"vFooter":"type: sap.ui.core.Control|string, description: The footer to set"},"!static":false},"removeAllColumns":{"!description":"Removes all the controls from the aggregation {@link #getColumns columns}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getShowOverlay":{"!description":"Gets current value of property {@link #getShowOverlay showOverlay}.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"destroyContextMenu":{"!description":"Destroys the contextMenu in the aggregation {@link #getContextMenu contextMenu}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"!module":"sap/ui/table/Table","getColumns":{"!description":"Gets content of aggregation {@link #getColumns columns}.\n\nColumns of the Table","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"fireColumnSelect":{"!description":"Fires event {@link #event:columnSelect columnSelect} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"destroyColumns":{"!description":"Destroys all the columns in the aggregation {@link #getColumns columns}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:filter filter} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is filtered.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"setSelectionMode":{"!description":"Sets the selection mode. The current selection is lost.","!type":"fn(sSelectionMode: String)","!category":"function","parameters":{"sSelectionMode":"type: string, description: the selection mode, see sap.ui.table.SelectionMode"},"!static":false},"setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEditable: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"},"!static":false},"getEnableGrouping":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn() -> Boolean","!category":"function","!static":false},"getThreshold":{"!description":"Gets current value of property {@link #getThreshold threshold}.\n\nThe <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth scrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the <code>threshold<\/code> is 100, there will be 110 records fetched with the initial load. If the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as the <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.\n\nDefault value is <code>100<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 undefined<br>Gets current value of property {@link #getNavigationMode navigationMode}.\n\nThis property has been deprecated and must not be used anymore, since <code>Scrollbar<\/code> is the only supported option.\n\nDefault value is <code>Scrollbar<\/code>.","!type":"fn() -> sap.ui.table.NavigationMode","!category":"function","!static":false},"destroyRowSettingsTemplate":{"!description":"Destroys the rowSettingsTemplate in the aggregation {@link #getRowSettingsTemplate rowSettingsTemplate}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"setEnableSelectAll":{"!description":"Sets a new value for property {@link #getEnableSelectAll enableSelectAll}.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed if the row selector is visible and the selection mode is set to any kind of multi selection.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnableSelectAll: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableSelectAll":"type: boolean, description: New value for property <code>enableSelectAll<\/code>"},"!static":false},"getTitle":{"!description":"Gets content of aggregation {@link #getTitle title}.\n\nControl or text of title section of the Table (if not set it will be hidden)","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"setThreshold":{"!description":"Sets the threshold value, which will be added to all data requests in case the Table is bound against an OData service.","!type":"fn()","!category":"function","!static":false},"setColumnHeaderVisible":{"!description":"Sets a new value for property {@link #getColumnHeaderVisible columnHeaderVisible}.\n\nFlag whether the column header is visible or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bColumnHeaderVisible: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bColumnHeaderVisible":"type: boolean, description: New value for property <code>columnHeaderVisible<\/code>"},"!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"removeRow":{"!description":"Removes a row from the aggregation {@link #getRows rows}.","!type":"fn(vRow: Number | String | sap.ui.table.Row) -> sap.ui.table.Row","!category":"function","parameters":{"vRow":"type: int|string|sap.ui.table.Row, description: The row to remove or its index or id"},"!static":false},"addRow":{"!description":"Adds some row to the aggregation {@link #getRows rows}.","!type":"fn(oRow: sap.ui.table.Row) -> sap.ui.table.Table","!category":"function","parameters":{"oRow":"type: sap.ui.table.Row, description: The row to add; if empty, nothing is inserted"},"!static":false},"getContextMenu":{"!description":"Gets content of aggregation {@link #getContextMenu contextMenu}.\n\nDefines the context menu for the table.\n\n<b>Note:<\/b> The context menu will also be available for the row selectors as well as in the row actions cell of the table control.\n\nThe custom context menu will not be shown in the group header rows and the sum row of the <code>AnalyticalTable<\/code> control.\n\nIf this aggregation is set, then the <code>enableCellFilter<\/code> property will have no effect.","!type":"fn() -> sap.ui.core.IContextMenu","!category":"function","!static":false},"setFirstVisibleRow":{"!description":"Sets a new value for property {@link #getFirstVisibleRow firstVisibleRow}.\n\nFirst visible row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFirstVisibleRow: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iFirstVisibleRow":"type: int, description: New value for property <code>firstVisibleRow<\/code>"},"!static":false},"getFooter":{"!description":"Gets content of aggregation {@link #getFooter footer}.\n\nControl or text of footer section of the Table (if not set it will be hidden)","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"indexOfDragDropConfig":{"!description":"Checks for the provided <code>sap.ui.core.dnd.DragDropBase<\/code> in the aggregation {@link #getDragDropConfig dragDropConfig}. and returns its index if found or -1 otherwise.","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase) -> Number","!category":"function","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig whose index is looked for"},"!static":false},"removeAllExtension":{"!description":"Removes all the controls from the aggregation {@link #getExtension extension}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"getSelectedIndices":{"!description":"Zero-based indices of selected items, wrapped in an array. An empty array means \"no selection\".","!type":"fn()","!category":"function","!static":false},"setAlternateRowColors":{"!description":"Sets a new value for property {@link #getAlternateRowColors alternateRowColors}.\n\nEnables alternating table row colors. Alternate row coloring is not available for the tree mode.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bAlternateRowColors: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bAlternateRowColors":"type: boolean, description: New value for property <code>alternateRowColors<\/code>"},"!static":false},"getShowNoData":{"!description":"Gets current value of property {@link #getShowNoData showNoData}.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false the table will just show a grid of empty cells\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"detachBusyStateChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:busyStateChanged busyStateChanged} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setEnableCellFilter":{"!description":"Sets a new value for property {@link #getEnableCellFilter enableCellFilter}.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableCellFilter: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableCellFilter":"type: boolean, description: New value for property <code>enableCellFilter<\/code>"},"!static":false},"fireGroup":{"!description":"Fires event {@link #event:group group} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setToolbar":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 This aggregation is deprecated, use the <code>extension<\/code> aggregation instead.<br>Sets the aggregated {@link #getToolbar toolbar}.","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.table.Table","!category":"function","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"},"!static":false},"setNoData":{"!description":"Sets the aggregated {@link #getNoData noData}.","!type":"fn(vNoData: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","parameters":{"vNoData":"type: sap.ui.core.Control|string, description: The noData to set"},"!static":false},"setVisibleRowCount":{"!description":"Sets a new value for property {@link #getVisibleRowCount visibleRowCount}.\n\nNumber of visible rows of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>10<\/code>.","!type":"fn(iVisibleRowCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iVisibleRowCount":"type: int, description: New value for property <code>visibleRowCount<\/code>"},"!static":false},"setFixedColumnCount":{"!description":"Sets a new value for property {@link #getFixedColumnCount fixedColumnCount}.\n\nNumber of columns that are fix on the left. When you use a horizontal scrollbar, only the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work. Please note that the aggregated width of all fixed columns must not exceed the table width since there will be no scrollbar for fixed columns.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedColumnCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iFixedColumnCount":"type: int, description: New value for property <code>fixedColumnCount<\/code>"},"!static":false},"setEnableBusyIndicator":{"!description":"Sets a new value for property {@link #getEnableBusyIndicator enableBusyIndicator}.\n\nIf set to <code>true<\/code>, the table changes its busy state, resulting in showing or hiding the busy indicator. The table will switch to busy as soon as data is retrieved to be displayed in the currently visible rows. This happens, for example, during scrolling, filtering, or sorting. As soon as the data has been retrieved, the table switches back to not busy. The busy state of the table can still be set manually by calling {@link sap.ui.core.Control#setBusy}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableBusyIndicator: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableBusyIndicator":"type: boolean, description: New value for property <code>enableBusyIndicator<\/code>"},"!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.table.Table","!category":"function","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"},"!static":false},"insertColumn":{"!description":"Inserts a column into the aggregation {@link #getColumns columns}.","!type":"fn(oColumn: sap.ui.table.Column, iIndex: Number) -> sap.ui.table.Table","!category":"function","parameters":{"oColumn":"type: sap.ui.table.Column, description: The column to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the column should be inserted at; for a negative value of <code>iIndex<\/code>, the column is inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted at the last position"},"!static":false},"addColumn":{"!description":"Adds some column to the aggregation {@link #getColumns columns}.","!type":"fn(oColumn: sap.ui.table.Column) -> sap.ui.table.Table","!category":"function","parameters":{"oColumn":"type: sap.ui.table.Column, description: The column to add; if empty, nothing is inserted"},"!static":false},"destroyExtension":{"!description":"Destroys all the extension in the aggregation {@link #getExtension extension}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachBusyStateChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:busyStateChanged busyStateChanged} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the busy state of the table changes. It should only be used by composite controls.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"getFixedBottomRowCount":{"!description":"Gets current value of property {@link #getFixedBottomRowCount fixedBottomRowCount}.\n\nNumber of rows that are fix on the bottom. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setRowSettingsTemplate":{"!description":"Sets the aggregated {@link #getRowSettingsTemplate rowSettingsTemplate}.","!type":"fn(oRowSettingsTemplate: sap.ui.table.RowSettings) -> sap.ui.table.Table","!category":"function","parameters":{"oRowSettingsTemplate":"type: sap.ui.table.RowSettings, description: The rowSettingsTemplate to set"},"!static":false},"attachSort":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:sort sort} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is sorted.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"getExtension":{"!description":"Gets content of aggregation {@link #getExtension extension}.\n\nExtension section of the Table. If not set, no extension area will be rendered. Note: In case a <code>sap.m.Toolbar<\/code> is used as header the CSS class sapMTBHeader-CTX should be applied on this toolbar via <code>addStyleClass<\/code>.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"attachColumnSelect":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnSelect columnSelect} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table has been selected","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"destroyDragDropConfig":{"!description":"Destroys all the dragDropConfig in the aggregation {@link #getDragDropConfig dragDropConfig}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"getEnableCustomFilter":{"!description":"Gets current value of property {@link #getEnableCustomFilter enableCustomFilter}.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button will be rendered for which' press event (customFilter) you can register an event handler.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSelectedIndex":{"!description":"Gets current value of property {@link #getSelectedIndex selectedIndex}.\n\nZero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the lead selected item. Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"<p> Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns and rows due to the limited performance of some devices. <\/p> <p> In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows. When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used control for column templates also has a big influence on the performance. <\/p> <p> The Table control relies completely on data binding, and its supported feature set is tightly coupled to the data model and binding being used. <\/p>","sort":{"!description":"Sorts the given column ascending or descending.","!type":"fn(oColumn: sap.ui.table.Column | undefined, oSortOrder: sap.ui.table.SortOrder, bAdd: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"oSortOrder":"type: sap.ui.table.SortOrder, description: sort order of the column (if undefined the default will be ascending)","oColumn":"type: sap.ui.table.Column|undefined, description: column to be sorted or undefined to clear sorting","bAdd":"type: Boolean, description: Set to true to add the new sort criterion to the existing sort criteria"},"!static":false},"fireCustomFilter":{"!description":"Fires event {@link #event:customFilter customFilter} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setSelectionInterval":{"!description":"Sets the given selection interval as selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iIndexTo":"type: int, description: Indices of the items that shall additionally be selected.","iIndexFrom":"type: int, description: Index from which ."},"!static":false},"getVisibleRowCountMode":{"!description":"Gets current value of property {@link #getVisibleRowCountMode visibleRowCountMode}.\n\nThis defines how the table handles the visible rows in the table. The default behavior is, that a fixed row count is defined. If you change it to auto the visibleRowCount property is changed by the table automatically. It will then adjust its maximum row count to the space it is allowed to cover (limited by the surrounding container) and its minimum row count to the value of the property minAutoRowCount (default value : 5) In manual mode the user can change the visibleRowCount interactively.\n\nDefault value is <code>Fixed<\/code>.","!type":"fn() -> sap.ui.table.VisibleRowCountMode","!category":"function","!static":false},"detachRowSelectionChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:rowSelectionChange rowSelectionChange} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setShowColumnVisibilityMenu":{"!description":"Sets a new value for property {@link #getShowColumnVisibilityMenu showColumnVisibilityMenu}.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each generated column header menu. It allows to show or hide columns\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowColumnVisibilityMenu: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bShowColumnVisibilityMenu":"type: boolean, description: New value for property <code>showColumnVisibilityMenu<\/code>"},"!static":false},"attachCellContextmenu":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.54 replaced by <code>beforeOpenContextMenu<\/code>.<br>Attaches event handler <code>fnFunction<\/code> to the {@link #event:cellContextmenu cellContextmenu} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"bindRows":{"!description":"Binds aggregation {@link #getRows rows} to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description of the possible properties of <code>oBindingInfo<\/code>.","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","!category":"function","parameters":{"oBindingInfo":"type: object, description: The binding information"},"!static":false},"getShowColumnVisibilityMenu":{"!description":"Gets current value of property {@link #getShowColumnVisibilityMenu showColumnVisibilityMenu}.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each generated column header menu. It allows to show or hide columns\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"insertRow":{"!description":"Inserts a row into the aggregation {@link #getRows rows}.","!type":"fn(oRow: sap.ui.table.Row, iIndex: Number) -> sap.ui.table.Table","!category":"function","parameters":{"oRow":"type: sap.ui.table.Row, description: The row to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the row should be inserted at; for a negative value of <code>iIndex<\/code>, the row is inserted at position 0; for a value greater than the current size of the aggregation, the row is inserted at the last position"},"!static":false},"getColumnHeaderVisible":{"!description":"Gets current value of property {@link #getColumnHeaderVisible columnHeaderVisible}.\n\nFlag whether the column header is visible or not.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeDragDropConfig":{"!description":"Removes a dragDropConfig from the aggregation {@link #getDragDropConfig dragDropConfig}.","!type":"fn(vDragDropConfig: Number | String | sap.ui.core.dnd.DragDropBase) -> sap.ui.core.dnd.DragDropBase","!category":"function","parameters":{"vDragDropConfig":"type: int|string|sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to remove or its index or id"},"!static":false},"autoResizeColumn":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(iColIndex: Number)","!category":"function","parameters":{"iColIndex":"type: int, description: The index of the column in the list of visible columns."},"!static":false},"setGroupBy":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(oGroupBy: sap.ui.core.ID | sap.ui.table.Column) -> sap.ui.table.Table","!category":"function","parameters":{"oGroupBy":"type: sap.ui.core.ID|sap.ui.table.Column, description: ID of an element which becomes the new target of this groupBy association; alternatively, an element instance may be given"},"!static":false},"getVisibleRowCount":{"!description":"Gets current value of property {@link #getVisibleRowCount visibleRowCount}.\n\nNumber of visible rows of the table.\n\nDefault value is <code>10<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!category":"class","addExtension":{"!description":"Adds some extension to the aggregation {@link #getExtension extension}.","!type":"fn(oExtension: sap.ui.core.Control) -> sap.ui.table.Table","!category":"function","parameters":{"oExtension":"type: sap.ui.core.Control, description: The extension to add; if empty, nothing is inserted"},"!static":false},"fireFilter":{"!description":"Fires event {@link #event:filter filter} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setEnableColumnReordering":{"!description":"Sets a new value for property {@link #getEnableColumnReordering enableColumnReordering}.\n\nFlag to enable or disable column reordering\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnableColumnReordering: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableColumnReordering":"type: boolean, description: New value for property <code>enableColumnReordering<\/code>"},"!static":false},"getEnableColumnFreeze":{"!description":"Gets current value of property {@link #getEnableColumnFreeze enableColumnFreeze}.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeAllRows":{"!description":"Removes all the controls from the aggregation {@link #getRows rows}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"exportData":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(mSettings: Object) -> Promise","!category":"function","parameters":{"mSettings":"type: object, description: settings for the new Export, see {@link sap.ui.core.util.Export} <code>constructor<\/code>"},"!static":false},"detachSort":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:sort sort} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getMinAutoRowCount":{"!description":"Gets current value of property {@link #getMinAutoRowCount minAutoRowCount}.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive. For any other visibleRowCountMode, it is ignored.\n\nDefault value is <code>5<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"clearSelection":{"!description":"Removes complete selection.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"detachCustomFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:customFilter customFilter} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getNoData":{"!description":"Gets content of aggregation {@link #getNoData noData}.\n\nThe value for the noData aggregation can be either a string value or a control instance. The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no data text.","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"destroyToolbar":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 This aggregation is deprecated, use the <code>extension<\/code> aggregation instead.<br>Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"!description":"<p> Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns and rows due to the limited performance of some devices. <\/p> <p> In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows. When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used control for column templates also has a big influence on the performance. <\/p> <p> The Table control relies completely on data binding, and its supported feature set is tightly coupled to the data model and binding being used. <\/p>","fireRowSelectionChange":{"!description":"Fires event {@link #event:rowSelectionChange rowSelectionChange} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setRowActionTemplate":{"!description":"Sets the aggregated {@link #getRowActionTemplate rowActionTemplate}.","!type":"fn(oRowActionTemplate: sap.ui.table.RowAction) -> sap.ui.table.Table","!category":"function","parameters":{"oRowActionTemplate":"type: sap.ui.table.RowAction, description: The rowActionTemplate to set"},"!static":false},"getEnableBusyIndicator":{"!description":"Gets current value of property {@link #getEnableBusyIndicator enableBusyIndicator}.\n\nIf set to <code>true<\/code>, the table changes its busy state, resulting in showing or hiding the busy indicator. The table will switch to busy as soon as data is retrieved to be displayed in the currently visible rows. This happens, for example, during scrolling, filtering, or sorting. As soon as the data has been retrieved, the table switches back to not busy. The busy state of the table can still be set manually by calling {@link sap.ui.core.Control#setBusy}.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setRowActionCount":{"!description":"Sets a new value for property {@link #getRowActionCount rowActionCount}.\n\nNumber of row actions made visible which determines the width of the row action column. The values <code>0<\/code>, <code>1<\/code> and <code>2<\/code> are possible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iRowActionCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iRowActionCount":"type: int, description: New value for property <code>rowActionCount<\/code>"},"!static":false},"getAlternateRowColors":{"!description":"Gets current value of property {@link #getAlternateRowColors alternateRowColors}.\n\nEnables alternating table row colors. Alternate row coloring is not available for the tree mode.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setSelectedIndex":{"!description":"Sets a new value for property {@link #getSelectedIndex selectedIndex}.\n\nZero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the lead selected item. Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iSelectedIndex: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iSelectedIndex":"type: int, description: New value for property <code>selectedIndex<\/code>"},"!static":false},"setRowHeight":{"!description":"Sets a new value for property {@link #getRowHeight rowHeight}.\n\nThe height of the row content in pixel. The actual row height is also influenced by other factors, such as the border width. If no value is set, a default height is applied based on the content density configuration.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iRowHeight: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iRowHeight":"type: int, description: New value for property <code>rowHeight<\/code>"},"!static":false},"addSelectionInterval":{"!description":"Adds the given selection interval to the selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iIndexTo":"type: int, description: Indices of the items that shall additionally be selected.","iIndexFrom":"type: int, description: Index from which ."},"!static":false},"detachColumnResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnResize columnResize} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Table.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"detachCellContextmenu":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.54 replaced by <code>beforeOpenContextMenu<\/code>.<br>Detaches event handler <code>fnFunction<\/code> from the {@link #event:cellContextmenu cellContextmenu} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachBeforeOpenContextMenu":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeOpenContextMenu beforeOpenContextMenu} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nFired when the user requests the context menu for a table cell.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"detachFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:filter filter} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setContextMenu":{"!description":"Sets the aggregated {@link #getContextMenu contextMenu}.","!type":"fn(oContextMenu: sap.ui.core.IContextMenu) -> sap.ui.table.Table","!category":"function","parameters":{"oContextMenu":"type: sap.ui.core.IContextMenu, description: The contextMenu to set"},"!static":false},"attachColumnFreeze":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnFreeze columnFreeze} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table should be freezed","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"fireBeforeOpenContextMenu":{"!description":"Fires event {@link #event:beforeOpenContextMenu beforeOpenContextMenu} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"},"!static":false},"attachRowSelectionChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:rowSelectionChange rowSelectionChange} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the row selection of the table has been changed (the event parameters can be used to determine selection changes - to find out the selected rows you should better use the table selection API)","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"removeExtension":{"!description":"Removes a extension from the aggregation {@link #getExtension extension}.","!type":"fn(vExtension: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vExtension":"type: int|string|sap.ui.core.Control, description: The extension to remove or its index or id"},"!static":false},"getRowActionCount":{"!description":"Gets current value of property {@link #getRowActionCount rowActionCount}.\n\nNumber of row actions made visible which determines the width of the row action column. The values <code>0<\/code>, <code>1<\/code> and <code>2<\/code> are possible.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setFixedRowCount":{"!description":"Sets a new value for property {@link #getFixedRowCount fixedRowCount}.\n\nNumber of rows that are fix on the top. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iFixedRowCount":"type: int, description: New value for property <code>fixedRowCount<\/code>"},"!static":false},"removeColumn":{"!description":"Removes a column from the aggregation {@link #getColumns columns}.","!type":"fn(vColumn: Number | String | sap.ui.table.Column) -> sap.ui.table.Column","!category":"function","parameters":{"vColumn":"type: int|string|sap.ui.table.Column, description: The column to remove or its index or id"},"!static":false},"getSelectionBehavior":{"!description":"Gets current value of property {@link #getSelectionBehavior selectionBehavior}.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both can be clicked to select a row. <b>Note:<\/b> Since the group header visualization relies on the row selectors, the row selectors are always shown if the grouping functionality (depends on table type) is enabled, even if <code>sap.ui.table.SelectionBehavior.RowOnly<\/code> is set.\n\nDefault value is <code>RowSelector<\/code>.","!type":"fn() -> sap.ui.table.SelectionBehavior","!category":"function","!static":false},"attachCellClick":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:cellClick cellClick} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table (experimental!).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"getCellControl":{"!description":"Returns the control inside the cell with the given row index (in the <code>rows<\/code> aggregation) and column index (in the <code>columns<\/code> aggregation or in the list of visible columns only, depending on parameter <code>bVisibleColumnIndex<\/code>).","!type":"fn(iRowIndex: Number, iColumnIndex: Number, bVisibleColumnIndex: Boolean) -> sap.ui.core.Control","!category":"function","parameters":{"bVisibleColumnIndex":"type: boolean, description: If set to <code>true<\/code>, the given column index is interpreted as index in the list of visible columns, otherwise as index in the <code>columns<\/code> aggregation","iRowIndex":"type: int, description: Index of row in the table's <code>rows<\/code> aggregation","iColumnIndex":"type: int, description: Index of column in the list of visible columns or in the <code>columns<\/code> aggregation, as indicated with <code>bVisibleColumnIndex<\/code>"},"!static":false},"getContextByIndex":{"!description":"Returns the context of a row by its index. Please note that for server-based models like OData, the supplied index might not have been loaded yet. If the context is not available at the client, the binding will trigger a backend request and request this single context. Although this API looks synchronous it may not return a context but load it and fire a change event on the binding.\n\nFor server-based models you should consider to only make this API call when the index is within the currently visible scroll area.","!type":"fn(iIndex: Number) -> Object","!category":"function","parameters":{"iIndex":"type: int, description: Index of the row to return the context from."},"!static":false},"setTooltip":{"!description":"Sets a new tooltip for this object. The tooltip can either be a simple string (which in most cases will be rendered as the <code>title<\/code> attribute of this Element) or an instance of {@link sap.ui.core.TooltipBase}.\n\nIf a new tooltip is set, any previously set tooltip is deactivated.\n\nPlease note that tooltips are not rendered for the table. The tooltip property will be set but it won't effect the DOM.","!type":"fn(vTooltip: String | sap.ui.core.TooltipBase) -> sap.ui.table.Table","!category":"function","parameters":{"vTooltip":"type: string|sap.ui.core.TooltipBase, description: undefined"},"!static":false},"setVisibleRowCountMode":{"!description":"Sets a new value for property {@link #getVisibleRowCountMode visibleRowCountMode}.\n\nThis defines how the table handles the visible rows in the table. The default behavior is, that a fixed row count is defined. If you change it to auto the visibleRowCount property is changed by the table automatically. It will then adjust its maximum row count to the space it is allowed to cover (limited by the surrounding container) and its minimum row count to the value of the property minAutoRowCount (default value : 5) In manual mode the user can change the visibleRowCount interactively.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Fixed<\/code>.","!type":"fn(sVisibleRowCountMode: sap.ui.table.VisibleRowCountMode) -> sap.ui.table.Table","!category":"function","parameters":{"sVisibleRowCountMode":"type: sap.ui.table.VisibleRowCountMode, description: New value for property <code>visibleRowCountMode<\/code>"},"!static":false},"destroyRowActionTemplate":{"!description":"Destroys the rowActionTemplate in the aggregation {@link #getRowActionTemplate rowActionTemplate}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of the Table.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setEnableColumnFreeze":{"!description":"Sets a new value for property {@link #getEnableColumnFreeze enableColumnFreeze}.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableColumnFreeze: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableColumnFreeze":"type: boolean, description: New value for property <code>enableColumnFreeze<\/code>"},"!static":false},"unbindRows":{"!description":"Unbinds aggregation {@link #getRows rows} from model data.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachColumnVisibility":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnVisibility columnVisibility} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the visibility of a table column is changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"getEnableColumnReordering":{"!description":"Gets current value of property {@link #getEnableColumnReordering enableColumnReordering}.\n\nFlag to enable or disable column reordering\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachColumnMove":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnMove columnMove} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is moved.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"fireBusyStateChanged":{"!description":"Fires event {@link #event:busyStateChanged busyStateChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"detachColumnSelect":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnSelect columnSelect} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getSortedColumns":{"!description":"Gets sorted columns in the order of which the sort API at the table or column was called. Sorting on binding level is not reflected here.","!type":"fn()","!category":"function","!static":false},"attachCustomFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:customFilter customFilter} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event is triggered when the custom filter item of the column menu is pressed. The column on which the event was triggered is passed as parameter.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"setShowOverlay":{"!description":"Sets a new value for property {@link #getShowOverlay showOverlay}.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowOverlay: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bShowOverlay":"type: boolean, description: New value for property <code>showOverlay<\/code>"},"!static":false},"getToolbar":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 This aggregation is deprecated, use the <code>extension<\/code> aggregation instead.<br>Gets content of aggregation {@link #getToolbar toolbar}.\n\nToolbar of the Table If not set, no toolbar area will be rendered. Note: The CSS class sapMTBHeader-CTX is applied on the given toolbar.","!type":"fn() -> sap.ui.core.Toolbar","!category":"function","!static":false},"getRowSettingsTemplate":{"!description":"Gets content of aggregation {@link #getRowSettingsTemplate rowSettingsTemplate}.\n\nTemplate for row settings. A template is decoupled from the row or table. Each time the template's properties or aggregations are changed, the template has to be applied again via <code>setRowSettingsTemplate<\/code> for the changes to take effect.","!type":"fn() -> sap.ui.table.RowSettings","!category":"function","!static":false},"detachColumnMove":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnMove columnMove} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"!constructorDescription":"Constructor for a new Table.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getRowHeight rowHeight} : int<\/li>\n<li>{@link #getColumnHeaderHeight columnHeaderHeight} : int<\/li>\n<li>{@link #getColumnHeaderVisible columnHeaderVisible} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCount visibleRowCount} : int (default: 10)<\/li>\n<li>{@link #getFirstVisibleRow firstVisibleRow} : int (default: 0)<\/li>\n<li>{@link #getSelectionMode selectionMode} : sap.ui.table.SelectionMode (default: MultiToggle)<\/li>\n<li>{@link #getSelectionBehavior selectionBehavior} : sap.ui.table.SelectionBehavior (default: RowSelector)<\/li>\n<li>{@link #getSelectedIndex selectedIndex} : int (default: -1)<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<li>{@link #getNavigationMode navigationMode} : sap.ui.table.NavigationMode (default: Scrollbar)<\/li>\n<li>{@link #getThreshold threshold} : int (default: 100)<\/li>\n<li>{@link #getEnableColumnReordering enableColumnReordering} : boolean (default: true)<\/li>\n<li>{@link #getEnableGrouping enableGrouping} : boolean (default: false)<\/li>\n<li>{@link #getShowColumnVisibilityMenu showColumnVisibilityMenu} : boolean (default: false)<\/li>\n<li>{@link #getShowNoData showNoData} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCountMode visibleRowCountMode} : sap.ui.table.VisibleRowCountMode (default: Fixed)<\/li>\n<li>{@link #getMinAutoRowCount minAutoRowCount} : int (default: 5)<\/li>\n<li>{@link #getFixedColumnCount fixedColumnCount} : int (default: 0)<\/li>\n<li>{@link #getFixedRowCount fixedRowCount} : int (default: 0)<\/li>\n<li>{@link #getFixedBottomRowCount fixedBottomRowCount} : int (default: 0)<\/li>\n<li>{@link #getEnableColumnFreeze enableColumnFreeze} : boolean (default: false)<\/li>\n<li>{@link #getEnableCellFilter enableCellFilter} : boolean (default: false)<\/li>\n<li>{@link #getShowOverlay showOverlay} : boolean (default: false)<\/li>\n<li>{@link #getEnableSelectAll enableSelectAll} : boolean (default: true)<\/li>\n<li>{@link #getEnableCustomFilter enableCustomFilter} : boolean (default: false)<\/li>\n<li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: false)<\/li>\n<li>{@link #getRowActionCount rowActionCount} : int (default: 0)<\/li>\n<li>{@link #getAlternateRowColors alternateRowColors} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getTitle title} : sap.ui.core.Control|string<\/li>\n<li>{@link #getFooter footer} : sap.ui.core.Control|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getExtension extension} : sap.ui.core.Control[]<\/li>\n<li>{@link #getColumns columns} : sap.ui.table.Column[] (default)<\/li>\n<li>{@link #getRows rows} : sap.ui.table.Row[]<\/li>\n<li>{@link #getNoData noData} : sap.ui.core.Control|string<\/li>\n<li>{@link #getRowActionTemplate rowActionTemplate} : sap.ui.table.RowAction<\/li>\n<li>{@link #getRowSettingsTemplate rowSettingsTemplate} : sap.ui.table.RowSettings<\/li>\n<li>{@link #getDragDropConfig dragDropConfig} : sap.ui.core.dnd.DragDropBase[]<\/li>\n<li>{@link #getContextMenu contextMenu} : sap.ui.core.IContextMenu<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getGroupBy groupBy} : (sap.ui.core.ID | sap.ui.table.Column)<\/li>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:rowSelectionChange rowSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnSelect columnSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnResize columnResize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnMove columnMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:sort sort} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:filter filter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:group group} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnVisibility columnVisibility} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellClick cellClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellContextmenu cellContextmenu} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeOpenContextMenu beforeOpenContextMenu} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnFreeze columnFreeze} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:customFilter customFilter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:firstVisibleRowChanged firstVisibleRowChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:busyStateChanged busyStateChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","addDragDropConfig":{"!description":"Adds some dragDropConfig to the aggregation {@link #getDragDropConfig dragDropConfig}.","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase) -> sap.ui.table.Table","!category":"function","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to add; if empty, nothing is inserted"},"!static":false},"fireFirstVisibleRowChanged":{"!description":"Fires event {@link #event:firstVisibleRowChanged firstVisibleRowChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"fireCellContextmenu":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.54 replaced by <code>beforeOpenContextMenu<\/code>.<br>Fires event {@link #event:cellContextmenu cellContextmenu} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"indexOfColumn":{"!description":"Checks for the provided <code>sap.ui.table.Column<\/code> in the aggregation {@link #getColumns columns}. and returns its index if found or -1 otherwise.","!type":"fn(oColumn: sap.ui.table.Column) -> Number","!category":"function","parameters":{"oColumn":"type: sap.ui.table.Column, description: The column whose index is looked for"},"!static":false},"destroyTitle":{"!description":"Destroys the title in the aggregation {@link #getTitle title}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"fireColumnMove":{"!description":"Fires event {@link #event:columnMove columnMove} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"detachFirstVisibleRowChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:firstVisibleRowChanged firstVisibleRowChanged} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setTitle":{"!description":"Sets the aggregated {@link #getTitle title}.","!type":"fn(vTitle: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","parameters":{"vTitle":"type: sap.ui.core.Control|string, description: The title to set"},"!static":false},"setFixedBottomRowCount":{"!description":"Sets a new value for property {@link #getFixedBottomRowCount fixedBottomRowCount}.\n\nNumber of rows that are fix on the bottom. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedBottomRowCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iFixedBottomRowCount":"type: int, description: New value for property <code>fixedBottomRowCount<\/code>"},"!static":false},"isIndexSelected":{"!description":"Returns whether the given index is selected.","!type":"fn(iIndex: Number) -> Boolean","!category":"function","parameters":{"iIndex":"type: int, description: Index which is checked for selection state."},"!static":false},"setColumnHeaderHeight":{"!description":"Sets a new value for property {@link #getColumnHeaderHeight columnHeaderHeight}.\n\nHeight of the column header of the Table in pixel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iColumnHeaderHeight: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iColumnHeaderHeight":"type: int, description: New value for property <code>columnHeaderHeight<\/code>"},"!static":false},"getFixedColumnCount":{"!description":"Gets current value of property {@link #getFixedColumnCount fixedColumnCount}.\n\nNumber of columns that are fix on the left. When you use a horizontal scrollbar, only the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work. Please note that the aggregated width of all fixed columns must not exceed the table width since there will be no scrollbar for fixed columns.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"filter":{"!description":"Filter the given column by the given value.","!type":"fn(oColumn: sap.ui.table.Column, sValue: String) -> sap.ui.table.Table","!category":"function","parameters":{"oColumn":"type: sap.ui.table.Column, description: column to be filtered","sValue":"type: string, description: filter value as string (will be converted)"},"!static":false},"getRowActionTemplate":{"!description":"Gets content of aggregation {@link #getRowActionTemplate rowActionTemplate}.\n\nTemplate for row actions. A template is decoupled from the row or table. Each time the template's properties or aggregations are changed, the template has to be applied again via <code>setRowActionTemplate<\/code> for the changes to take effect.","!type":"fn() -> sap.ui.table.RowAction","!category":"function","!static":false},"unbindColumns":{"!description":"Unbinds aggregation {@link #getColumns columns} from model data.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"setEnableGrouping":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(bEnableGrouping: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableGrouping":"type: boolean, description: New value for property <code>enableGrouping<\/code>"},"!static":false},"fireSort":{"!description":"Fires event {@link #event:sort sort} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"detachGroup":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:group group} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setShowNoData":{"!description":"Sets a new value for property {@link #getShowNoData showNoData}.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false the table will just show a grid of empty cells\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowNoData: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bShowNoData":"type: boolean, description: New value for property <code>showNoData<\/code>"},"!static":false},"getSelectionMode":{"!description":"Gets current value of property {@link #getSelectionMode selectionMode}.\n\nSelection mode of the Table. This property controls whether single or multiple rows can be selected and how the selection can be extended. It may also influence the visual appearance. When the selection mode is changed, the current selection is removed. <b>Note:<\/b> Since the group header visualization relies on the row selectors, the row selectors are always shown if the grouping functionality (depends on table type) is enabled, even if <code>sap.ui.table.SelectionMode.None<\/code> is set.\n\nDefault value is <code>MultiToggle<\/code>.","!type":"fn() -> sap.ui.table.SelectionMode","!category":"function","!static":false},"detachCellClick":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:cellClick cellClick} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"destroyFooter":{"!description":"Destroys the footer in the aggregation {@link #getFooter footer}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"setNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 undefined<br>Sets a new value for property {@link #getNavigationMode navigationMode}.\n\nThis property has been deprecated and must not be used anymore, since <code>Scrollbar<\/code> is the only supported option.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Scrollbar<\/code>.","!type":"fn(sNavigationMode: sap.ui.table.NavigationMode) -> sap.ui.table.Table","!category":"function","parameters":{"sNavigationMode":"type: sap.ui.table.NavigationMode, description: New value for property <code>navigationMode<\/code>"},"!static":false},"indexOfExtension":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getExtension extension}. and returns its index if found or -1 otherwise.","!type":"fn(oExtension: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oExtension":"type: sap.ui.core.Control, description: The extension whose index is looked for"},"!static":false},"attachGroup":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:group group} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is grouped (experimental!).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"getRows":{"!description":"Gets content of aggregation {@link #getRows rows}.\n\nRows of the Table","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setSelectionBehavior":{"!description":"Sets a new value for property {@link #getSelectionBehavior selectionBehavior}.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both can be clicked to select a row. <b>Note:<\/b> Since the group header visualization relies on the row selectors, the row selectors are always shown if the grouping functionality (depends on table type) is enabled, even if <code>sap.ui.table.SelectionBehavior.RowOnly<\/code> is set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>RowSelector<\/code>.","!type":"fn(sSelectionBehavior: sap.ui.table.SelectionBehavior) -> sap.ui.table.Table","!category":"function","parameters":{"sSelectionBehavior":"type: sap.ui.table.SelectionBehavior, description: New value for property <code>selectionBehavior<\/code>"},"!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of the Table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Table","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"destroyNoData":{"!description":"Destroys the noData in the aggregation {@link #getNoData noData}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"removeSelectionInterval":{"!description":"Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the \"indexTo\" value.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iIndexTo":"type: int, description: Indices of the items that shall additionally be selected.","iIndexFrom":"type: int, description: Index from which ."},"!static":false},"fireCellClick":{"!description":"Fires event {@link #event:cellClick cellClick} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getRowHeight":{"!description":"Gets current value of property {@link #getRowHeight rowHeight}.\n\nThe height of the row content in pixel. The actual row height is also influenced by other factors, such as the border width. If no value is set, a default height is applied based on the content density configuration.","!type":"fn() -> Number","!category":"function","!static":false},"getFixedRowCount":{"!description":"Gets current value of property {@link #getFixedRowCount fixedRowCount}.\n\nNumber of rows that are fix on the top. When you use a vertical scrollbar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getEnableCellFilter":{"!description":"Gets current value of property {@link #getEnableCellFilter enableCellFilter}.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"destroyRows":{"!description":"Destroys all the rows in the aggregation {@link #getRows rows}.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"getGroupBy":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn() -> sap.ui.core.ID","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"detachColumnFreeze":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:columnFreeze columnFreeze} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getEnableSelectAll":{"!description":"Gets current value of property {@link #getEnableSelectAll enableSelectAll}.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed if the row selector is visible and the selection mode is set to any kind of multi selection.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachFirstVisibleRowChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:firstVisibleRowChanged firstVisibleRowChanged} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the first visible row is changed. It should only be used by composite controls. The event even is fired when setFirstVisibleRow is called programmatically.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"fireColumnVisibility":{"!description":"Fires event {@link #event:columnVisibility columnVisibility} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"selectAll":{"!description":"Add all rows to the selection. Please note that for server based models like OData the indices which are considered to be selected might not be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip to request this single entity.","!type":"fn()","!category":"function","!static":false},"removeAllDragDropConfig":{"!description":"Removes all the controls from the aggregation {@link #getDragDropConfig dragDropConfig}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"indexOfRow":{"!description":"Checks for the provided <code>sap.ui.table.Row<\/code> in the aggregation {@link #getRows rows}. and returns its index if found or -1 otherwise.","!type":"fn(oRow: sap.ui.table.Row) -> Number","!category":"function","parameters":{"oRow":"type: sap.ui.table.Row, description: The row whose index is looked for"},"!static":false},"fireColumnFreeze":{"!description":"Fires event {@link #event:columnFreeze columnFreeze} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getColumnHeaderHeight":{"!description":"Gets current value of property {@link #getColumnHeaderHeight columnHeaderHeight}.\n\nHeight of the column header of the Table in pixel.","!type":"fn() -> Number","!category":"function","!static":false},"attachColumnResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:columnResize columnResize} event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is resized.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself"},"!static":false},"setMinAutoRowCount":{"!description":"Sets a new value for property {@link #getMinAutoRowCount minAutoRowCount}.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive. For any other visibleRowCountMode, it is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>5<\/code>.","!type":"fn(iMinAutoRowCount: Number) -> sap.ui.table.Table","!category":"function","parameters":{"iMinAutoRowCount":"type: int, description: New value for property <code>minAutoRowCount<\/code>"},"!static":false},"detachBeforeOpenContextMenu":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeOpenContextMenu beforeOpenContextMenu} event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"insertExtension":{"!description":"Inserts a extension into the aggregation {@link #getExtension extension}.","!type":"fn(oExtension: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Table","!category":"function","parameters":{"oExtension":"type: sap.ui.core.Control, description: The extension to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the extension should be inserted at; for a negative value of <code>iIndex<\/code>, the extension is inserted at position 0; for a value greater than the current size of the aggregation, the extension is inserted at the last position"},"!static":false},"insertDragDropConfig":{"!description":"Inserts a dragDropConfig into the aggregation {@link #getDragDropConfig dragDropConfig}.","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase, iIndex: Number) -> sap.ui.table.Table","!category":"function","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the dragDropConfig should be inserted at; for a negative value of <code>iIndex<\/code>, the dragDropConfig is inserted at position 0; for a value greater than the current size of the aggregation, the dragDropConfig is inserted at the last position"},"!static":false},"getDragDropConfig":{"!description":"Gets content of aggregation {@link #getDragDropConfig dragDropConfig}.\n\nDefines the drag-and-drop configuration via {@link sap.ui.core.dnd.DragDropInfo}\n\nThe following restrictions apply: <ul> <li>Drag and drop is not supported on mobile devices and there is no accessible alternative.<\/li> <li>Columns cannot be configured to be draggable.<\/li> <li>The following rows are not draggable: <ul> <li>Empty rows<\/li> <li>Group header rows<\/li> <li>Sum rows<\/li> <\/ul> <\/li> <li>Columns cannot be configured to be droppable.<\/li> <li>The following rows are not droppable: <ul> <li>The dragged row itself<\/li> <li>Empty rows<\/li> <li>Group header rows<\/li> <li>Sum rows<\/li> <\/ul> <\/li> <li>Texts in draggable rows cannot be selected.<\/li> <li>The text of input fields in draggable rows can be selected, but not dragged.<\/li> <\/ul>","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setEnableCustomFilter":{"!description":"Sets a new value for property {@link #getEnableCustomFilter enableCustomFilter}.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button will be rendered for which' press event (customFilter) you can register an event handler.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableCustomFilter: Boolean) -> sap.ui.table.Table","!category":"function","parameters":{"bEnableCustomFilter":"type: boolean, description: New value for property <code>enableCustomFilter<\/code>"},"!static":false},"bindColumns":{"!description":"Binds aggregation {@link #getColumns columns} to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description of the possible properties of <code>oBindingInfo<\/code>.","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","!category":"function","parameters":{"oBindingInfo":"type: object, description: The binding information"},"!static":false},"getFirstVisibleRow":{"!description":"Gets current value of property {@link #getFirstVisibleRow firstVisibleRow}.\n\nFirst visible row.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false}},"sap.ui.table.Row":{"indexOfCell":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getCells cells}. and returns its index if found or -1 otherwise.","!type":"fn(oCell: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oCell":"type: sap.ui.core.Control, description: The cell whose index is looked for"},"!static":false},"getCells":{"!description":"Gets content of aggregation {@link #getCells cells}.\n\nThe controls for the cells.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"insertCell":{"!description":"Inserts a cell into the aggregation {@link #getCells cells}.","!type":"fn(oCell: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Row","!category":"function","parameters":{"oCell":"type: sap.ui.core.Control, description: The cell to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the cell should be inserted at; for a negative value of <code>iIndex<\/code>, the cell is inserted at position 0; for a value greater than the current size of the aggregation, the cell is inserted at the last position"},"!static":false},"destroyCells":{"!description":"Destroys all the cells in the aggregation {@link #getCells cells}.","!type":"fn() -> sap.ui.table.Row","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"addCell":{"!description":"Adds some cell to the aggregation {@link #getCells cells}.","!type":"fn(oCell: sap.ui.core.Control) -> sap.ui.table.Row","!category":"function","parameters":{"oCell":"type: sap.ui.core.Control, description: The cell to add; if empty, nothing is inserted"},"!static":false},"getIndex":{"!description":"Returns the index of the row in the table or -1 if not added to a table. This function considers the scroll position of the table and also takes fixed rows and fixed bottom rows into account.","!type":"fn() -> Number","!category":"function","!static":false},"removeAllCells":{"!description":"Removes all the controls from the aggregation {@link #getCells cells}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Row.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getCells cells} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/table/Row","!description":"The row.","!category":"class","removeCell":{"!description":"Removes a cell from the aggregation {@link #getCells cells}.","!type":"fn(vCell: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vCell":"type: int|string|sap.ui.core.Control, description: The cell to remove or its index or id"},"!static":false},"!helpDescription":"The row.","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Row.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.RowActionType":{"!description":"Row Action types.","!category":"static class","Delete":{"!description":"Delete Row Action.","!type":"String","!category":"enum"},"Navigation":{"!description":"Navigation Row Action.","!type":"String","!category":"enum"},"Custom":{"!description":"Custom defined Row Action.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.Table_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Table"},"sap.ui.table.ColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.ColumnMenu"},"sap.ui.table.AnalyticalColumnMenu":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new AnalyticalColumnMenu.","!module":"sap/ui/table/AnalyticalColumnMenu","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumnMenu.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.table.ColumnMenu","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.table.SelectionMode":{"MultiToggle":{"!description":"Select multiple rows at a time (toggle behavior).","!type":"String","!category":"enum"},"Multi":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.SelectionMode.MultiToggle}<br>Select multiple rows at a time.","!type":"String","!category":"enum"},"!description":"Selection mode of the table","!category":"static class","None":{"!description":"No rows can be selected.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library","Single":{"!description":"Select one row at a time.","!type":"String","!category":"enum"}},"sap.ui.table.Column_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Column"},"sap.ui.table.RowAction":{"removeItem":{"!description":"Removes a item from the aggregation {@link #getItems items}.","!type":"fn(vItem: Number | String | sap.ui.table.RowActionItem) -> sap.ui.table.RowActionItem","!category":"function","parameters":{"vItem":"type: int|string|sap.ui.table.RowActionItem, description: The item to remove or its index or id"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.RowAction with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nWhether the control should be visible on the screen. If set to <code>false<\/code>, the control is hidden.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.table.RowAction","!category":"function","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new RowAction.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getItems items} : sap.ui.table.RowActionItem[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/table/RowAction","addItem":{"!description":"Adds some item to the aggregation {@link #getItems items}.","!type":"fn(oItem: sap.ui.table.RowActionItem) -> sap.ui.table.RowAction","!category":"function","parameters":{"oItem":"type: sap.ui.table.RowActionItem, description: The item to add; if empty, nothing is inserted"},"!static":false},"indexOfItem":{"!description":"Checks for the provided <code>sap.ui.table.RowActionItem<\/code> in the aggregation {@link #getItems items}. and returns its index if found or -1 otherwise.","!type":"fn(oItem: sap.ui.table.RowActionItem) -> Number","!category":"function","parameters":{"oItem":"type: sap.ui.table.RowActionItem, description: The item whose index is looked for"},"!static":false},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nWhether the control should be visible on the screen. If set to <code>false<\/code>, the control is hidden.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!description":"The <code>RowAction<\/code> control allows to display multiple action items which can be selected by the user. If more action items are available as the available space allows to display an overflow mechanism is provided. This control must only be used in the context of the <code>sap.ui.table.Table<\/code> control to define row actions.","getItems":{"!description":"Gets content of aggregation {@link #getItems items}.\n\nThe action items which should be displayed.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!category":"class","destroyItems":{"!description":"Destroys all the items in the aggregation {@link #getItems items}.","!type":"fn() -> sap.ui.table.RowAction","!category":"function","!static":false},"removeAllItems":{"!description":"Removes all the controls from the aggregation {@link #getItems items}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"insertItem":{"!description":"Inserts a item into the aggregation {@link #getItems items}.","!type":"fn(oItem: sap.ui.table.RowActionItem, iIndex: Number) -> sap.ui.table.RowAction","!category":"function","parameters":{"iIndex":"type: int, description: The <code>0<\/code>-based index the item should be inserted at; for a negative value of <code>iIndex<\/code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position","oItem":"type: sap.ui.table.RowActionItem, description: The item to insert; if empty, nothing is inserted"},"!static":false},"!helpDescription":"The <code>RowAction<\/code> control allows to display multiple action items which can be selected by the user. If more action items are available as the available space allows to display an overflow mechanism is provided. This control must only be used in the context of the <code>sap.ui.table.Table<\/code> control to define row actions.","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.RowAction.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalColumn_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumn"},"sap.ui.table.Row_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Row"},"sap.ui.table.RowSettings_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.RowSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.RowSettings"},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui.table.TablePersoController":{"getAutoSave":{"!description":"Gets current value of property {@link #getAutoSave autoSave}.\n\nAuto save state\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getTable":{"!description":"ID of the element which is the current target of the association {@link #getTable table}, or <code>null<\/code>.","!type":"fn() -> sap.ui.core.ID","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new TablePersoController.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAutoSave autoSave} : boolean (default: true)<\/li>\n<li>{@link #getPersoService persoService} : any<\/li>\n<li>{@link #getCustomDataKey customDataKey} : string (default: persoKey)<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getTable table} : (sap.ui.core.ID | sap.ui.table.Table)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","setTable":{"!description":"Sets the associated {@link #getTable table}.","!type":"fn(oTable: sap.ui.core.ID | sap.ui.table.Table) -> sap.ui.table.TablePersoController","!category":"function","parameters":{"oTable":"type: sap.ui.core.ID|sap.ui.table.Table, description: ID of an element which becomes the new target of this table association; alternatively, an element instance may be given"},"!static":false},"!module":"sap/ui/table/TablePersoController","setPersoService":{"!description":"Sets a new value for property {@link #getPersoService persoService}.\n\nPersonalization Service object. Needs to have the following methods: <ul> <li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oPersoService: Object) -> sap.ui.table.TablePersoController","!category":"function","parameters":{"oPersoService":"type: any, description: New value for property <code>persoService<\/code>"},"!static":false},"setCustomDataKey":{"!description":"Sets a new value for property {@link #getCustomDataKey customDataKey}.\n\nBy defining a custom data key the <code>TablePersoController<\/code> will try to get the key for saving the perso data from the custom data of the Table and Column instead of creating it by concatenating the ID of the Table and the Column. Basically this will be more stable than using the auto IDs.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>persoKey<\/code>.","!type":"fn(sCustomDataKey: String) -> sap.ui.table.TablePersoController","!category":"function","parameters":{"sCustomDataKey":"type: string, description: New value for property <code>customDataKey<\/code>"},"!static":false},"savePersonalizations":{"!description":"Saves the current personalization state.","!type":"fn() -> jQuery.Promise","!category":"function","!static":false},"setAutoSave":{"!description":"Sets a new value for property {@link #getAutoSave autoSave}.\n\nAuto save state\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bAutoSave: Boolean) -> sap.ui.table.TablePersoController","!category":"function","parameters":{"bAutoSave":"type: boolean, description: New value for property <code>autoSave<\/code>"},"!static":false},"!description":"The TablePersoController can be used to connect a table with a persistence service.","getPersoService":{"!description":"Gets current value of property {@link #getPersoService persoService}.\n\nPersonalization Service object. Needs to have the following methods: <ul> <li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li> <\/ul>","!type":"fn() -> Object","!category":"function","!static":false},"!category":"class","getCustomDataKey":{"!description":"Gets current value of property {@link #getCustomDataKey customDataKey}.\n\nBy defining a custom data key the <code>TablePersoController<\/code> will try to get the key for saving the perso data from the custom data of the Table and Column instead of creating it by concatenating the ID of the Table and the Column. Basically this will be more stable than using the auto IDs.\n\nDefault value is <code>persoKey<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"refresh":{"!description":"Refresh the personalizations (reloads data from service).","!type":"fn() -> jQuery.Promise","!category":"function","!static":false},"openDialog":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(mSettings: Object)","!category":"function","parameters":{"mSettings":"type: object, description: undefined"},"!static":false},"!helpDescription":"The TablePersoController can be used to connect a table with a persistence service.","!proto":"sap.ui.base.ManagedObject","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TablePersoController.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumnMenu"},"sap.ui.table.TreeTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TreeTable"},"sap.ui.table.VisibleRowCountMode":{"!description":"VisibleRowCountMode of the table","Interactive":{"!description":"After rendering the table has as many rows as defined in visibleRowCount property. The user is able to change the visible rows by moving a grip with the mouse. The visibleRowCount property is changed accordingly.","!type":"String","!category":"enum"},"Auto":{"!description":"The table automatically fills the height of the surrounding container. The visibleRowCount property is automatically changed accordingly. All rows need the same height, otherwise the auto mode doesn't always work as expected. The height of all siblings within the same layout container of the table will be subtracted from the available height. For performance reasons, it is recommended to add no siblings in the table's parent container.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/table/library","Fixed":{"!description":"The table always has as many rows as defined in the visibleRowCount property.","!type":"String","!category":"enum"}}},"!name":"sap.ui.table","!version":"1.18.0"}