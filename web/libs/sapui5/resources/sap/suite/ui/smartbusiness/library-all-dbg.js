// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.association.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.association', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.authorization.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.authorization', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.drilldown.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.drilldown', this);
	}
});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.evaluation.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.evaluation', this);
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/view/thresholdAndTargetBar.css");

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput", {

	onBeforeRendering : function(){

		var that = this;

		this.parentController = this.getView().getViewData().controller;
		this.oApplicationFacade = this.parentController.oApplicationFacade;
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle(); 

		this.getView().getModel().getData().VALUES_SOURCE = this.getView().byId("valueTypeSelect").getSelectedKey();

		this.createTrendThresholdLayout();

	},
	
	onAfterRendering : function() {
		this.byId("valueTypeSelect").setTooltip(this.byId("valueTypeSelect").getSelectedItem().getText());
	},

	openMeasureSelectDialog : function(oEvent){

		var that=this;
		this.valueType = oEvent.getSource().getCustomData()[0].getKey();
		var oDataUrl = this.parentController.getView().getModel().getData().ODATA_URL;
		var oDataEntitySet = this.parentController.getView().getModel().getData().ODATA_ENTITYSET;


		if(!(oDataUrl && oDataEntitySet)){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"));
			that.parentController.errorMessages.push({
				"type" : "Error",
				"title" : that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that.parentController);
			return;
		}
		else{
			var measureModel = this.populateMeasure(oDataUrl,oDataEntitySet);
			var oMeasure = this.getView().getModel().getData().COLUMN_NAME;
			var oFilterMeasure = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.NE,oMeasure);
			var measureSelectDialog = new sap.m.SelectDialog({
				title: that.oResourceBundle.getText("SELECT_MEASURE"),
				noDataText: that.oResourceBundle.getText("NO_DATA_FOUND"),
				items: {
					path: "/measures",
					template: new sap.m.StandardListItem({
						title:"{measureName}",

					})},
					confirm: function(oEvent){

						switch(that.valueType){
						case "REFERENCE_VALUE" : 
							that.getView().getModel().setProperty("/REFERENCE_VALUE",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "CRITICALHIGH" : 
							that.getView().getModel().setProperty("/CRITICALHIGH",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "WARNINGHIGH" : 
							that.getView().getModel().setProperty("/WARNINGHIGH",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "TARGET" : 
							that.getView().getModel().setProperty("/TARGET",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "WARNINGLOW" : 
							that.getView().getModel().setProperty("/WARNINGLOW",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "CRITICALLOW" : 
							that.getView().getModel().setProperty("/CRITICALLOW",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						case "TREND" : 
							that.getView().getModel().setProperty("/TREND",oEvent.getParameter("selectedItem").getProperty("title"));
							break;
						};

					},
					liveChange: function(oEvent){
						var searchValue = oEvent.getParameter("value");
						var oFilter = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.Contains, searchValue);
						var oBinding = oEvent.getSource().getBinding("items");
						oBinding.filter([oFilter],false);
					}
			});           
			measureSelectDialog.setModel(measureModel);
			measureSelectDialog.getBinding("items").filter([oFilterMeasure],false);
			measureSelectDialog.open();
		}
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	populateMeasure : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var measures = [], measureDataArray = [], obj = {};
		var i;

		measures = sap.suite.ui.smartbusiness.lib.OData.getAllMeasures(dataSource, entitySet);

		for (i = 0; i < measures.length; i++) {
			obj = {};
			obj.measureName = measures[i];
			measureDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			measures : measureDataArray
		});
		return oModel;
	},

	createTrendThresholdLayout : function(){

		var that = this;

		var viewModelData = this.getView().getModel().getData();
		this.byId('targetThresholdBar').removeAllItems();


		if(viewModelData){
			switch(viewModelData.GOAL_TYPE){

			case "MA" :
				that.createLayoutForMaximizingKPI();

				//this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Maximizing.png");
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_MAXIMIZING"));
				this.getView().byId('criticalLowLabel').setText(that.oResourceBundle.getText("CRITICAL_NUM",1));
				this.getView().byId('warningLowLabel').setText(that.oResourceBundle.getText("WARNING_2"));
				this.getView().byId('targetLabel').setText(that.oResourceBundle.getText("TARGET_NUM",3));
				this.getView().byId('criticalHighLabel').setVisible(false);
				this.getView().byId('warningHighLabel').setVisible(false);
				this.getView().byId('evaluationCriticalHigh').setVisible(false);
				this.getView().byId('evaluationWarningHigh').setVisible(false);
				this.getView().byId('relativeCriticalHighText').setVisible(false);
				this.getView().byId('relativeWarningHighText').setVisible(false);
				break;

			case "MI" : 
				that.createLayoutForMinimizingKPI();

				//this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Minimizing.png");
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_MINIMIZING"));                                                
				this.getView().byId('criticalHighLabel').setText(that.oResourceBundle.getText("CRITICAL_NUM",3));
				this.getView().byId('warningHighLabel').setText(that.oResourceBundle.getText("WARNING_2"));
				this.getView().byId('targetLabel').setText(that.oResourceBundle.getText("TARGET_NUM",1));
				this.getView().byId('criticalLowLabel').setVisible(false);
				this.getView().byId('warningLowLabel').setVisible(false);
				this.getView().byId('evaluationCriticalLow').setVisible(false);
				this.getView().byId('evaluationWarningLow').setVisible(false);
				this.getView().byId('relativeWarningLowText').setVisible(false);
				this.getView().byId('relativeCriticalLowText').setVisible(false);
				break;

			case "RA" :
				that.createLayoutForRangeKPI();

				//this.getView().byId('kpiGoalTypeImage').setSrc("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/img/Range.png");
				this.getView().byId('criticalLowLabel').setText(that.oResourceBundle.getText("CRITICAL_LOW_1"));
				this.getView().byId('warningLowLabel').setText(that.oResourceBundle.getText("WARNING_LOW_2"));
				this.getView().byId('criticalHighLabel').setText(that.oResourceBundle.getText("CRITICAL_HIGH_5"));
				this.getView().byId('warningHighLabel').setText(that.oResourceBundle.getText("WARNING_HIGH_4"));
				this.getView().byId('targetLabel').setText(that.oResourceBundle.getText("TARGET_NUM",3));
				this.getView().byId('kpiGoalTypeLabel').setText(that.oResourceBundle.getText("KPI_GOAL_TYPE_RANGE"));
				break;
			};
		}
	},

	createLayoutForMaximizingKPI : function(){

		var that = this;
		var thresholdBarHBox = new sap.m.HBox({
			width : "100%",
			items:[
			       new sap.m.HBox().addStyleClass('thresholdbar critical'),
			       new sap.m.HBox().addStyleClass('thresholdline critical'),
			       new sap.m.HBox().addStyleClass('thresholdbar neutral'),
			       new sap.m.HBox().addStyleClass('thresholdline neutral'),
			       new sap.m.HBox().addStyleClass('thresholdbar positive'),
			       new sap.m.HBox().addStyleClass('thresholdline positive'),
			       new sap.m.HBox({
			    	   width : "10%"
			       }).addStyleClass('thresholdbar positive'),
			       ]
		});

		var thresholdTextHBox = new sap.m.HBox({
			width : "100%",
			items : [
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_1")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexMax'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_2")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexMax'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_3")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexMax'),					
			         ]
		});
		this.byId('targetThresholdBar').addItem(thresholdBarHBox);
		this.byId('targetThresholdBar').addItem(thresholdTextHBox);

		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);
			that.getView().byId('relativeWarningLowText').setVisible(false);
			that.getView().byId('relativeCriticalLowText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"})).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"})).setValueHelpOnly(true);
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "FIXED" : 

			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTarget').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE")).setShowValueHelp(false);
			that.getView().byId('relativeWarningLowText').setVisible(false);
			that.getView().byId('relativeCriticalLowText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "RELATIVE" :
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MAXIMIZING"));
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MAXIMIZING"));
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);
			that.getView().byId('relativeWarningLowText').setVisible(true);
			that.getView().byId('relativeCriticalLowText').setVisible(true);
			that.getView().byId('thresholdExample').setVisible(true);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		};
	},

	createLayoutForMinimizingKPI : function(){

		var that = this;
		var thresholdBarHBox = new sap.m.HBox({
			width : "100%",
			items:[
					new sap.m.HBox({
						   width : "10%"
					}).addStyleClass('thresholdbar positive'),
			       new sap.m.HBox().addStyleClass('thresholdline positive'),
			       new sap.m.HBox().addStyleClass('thresholdbar positive'),
			       new sap.m.HBox().addStyleClass('thresholdline neutral'),
			       new sap.m.HBox().addStyleClass('thresholdbar neutral'),
			       new sap.m.HBox().addStyleClass('thresholdline critical'),
			       new sap.m.HBox().addStyleClass('thresholdbar critical')
			       ]
		});

		var thresholdTextHBox = new sap.m.HBox({
			width : "100%",
			items : [
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_1")
			        	          }),
			        	          ]
			         }).addStyleClass('positiveThresholdBarForMin'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_2")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexMin'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_3")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexMin'),					
			         ]
		});
		this.byId('targetThresholdBar').addItem(thresholdBarHBox);
		this.byId('targetThresholdBar').addItem(thresholdTextHBox);

		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);
			that.getView().byId('relativeCriticalHighText').setVisible(false);
			that.getView().byId('relativeWarningHighText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"})).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"})).setValueHelpOnly(true);
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "FIXED" : 
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTarget').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE")).setShowValueHelp(false);
			that.getView().byId('relativeCriticalHighText').setVisible(false);
			that.getView().byId('relativeWarningHighText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "RELATIVE" : 
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MINIMIZING"));
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MINIMIZING"));
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);
			that.getView().byId('relativeCriticalHighText').setVisible(true);
			that.getView().byId('relativeWarningHighText').setVisible(true);
			that.getView().byId('thresholdExample').setVisible(true);

			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;
		};
	},

	createLayoutForRangeKPI : function(){

		var that = this;
		var thresholdBarHBox = new sap.m.HBox({
			width : "100%",
			items:[
			       new sap.m.HBox().addStyleClass('thresholdbarRange critical'),
			       new sap.m.HBox().addStyleClass('thresholdline critical'),
			       new sap.m.HBox().addStyleClass('thresholdbarRange neutral'),
			       new sap.m.HBox().addStyleClass('thresholdline neutral'),
			       new sap.m.HBox().addStyleClass('thresholdbarRange positive'),
			       new sap.m.HBox().addStyleClass('thresholdline positive'),
			       new sap.m.HBox().addStyleClass('thresholdbarRange positive'),
			       new sap.m.HBox().addStyleClass('thresholdline neutral'),
			       new sap.m.HBox().addStyleClass('thresholdbarRange neutral'),
			       new sap.m.HBox().addStyleClass('thresholdline critical'),
			       new sap.m.HBox().addStyleClass('thresholdbarRange critical')
			       ]
		});

		var thresholdTextHBox = new sap.m.HBox({
			width : "100%",
			items : [
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_1")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexRange'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_2")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexRange'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_3")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexRange'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_4")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexRange'),
			         new sap.m.HBox({
			        	 items : [
			        	          new sap.m.Text({
			        	        	  text : that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_TEXT_5")
			        	          }),
			        	          ]
			         }).addStyleClass('thresholdIndexRange'),

			         ]
		});
		this.byId('targetThresholdBar').addItem(thresholdBarHBox);
		this.byId('targetThresholdBar').addItem(thresholdTextHBox);

		switch(this.getView().byId('valueTypeSelect').getSelectedKey()){

		case "MEASURE" : 
			var measureSelectFunction = jQuery.proxy(that.openMeasureSelectDialog,that);
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationWarningLow').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);

			that.getView().byId('relativeWarningLowText').setVisible(false);
			that.getView().byId('relativeCriticalLowText').setVisible(false);
			that.getView().byId('relativeCriticalHighText').setVisible(false);
			that.getView().byId('relativeWarningHighText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "FIXED" : 
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTarget').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE"));
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_VALUE")).setShowValueHelp(false);

			that.getView().byId('relativeWarningLowText').setVisible(false);
			that.getView().byId('relativeCriticalLowText').setVisible(false);
			that.getView().byId('relativeCriticalHighText').setVisible(false);
			that.getView().byId('relativeWarningHighText').setVisible(false);
			that.getView().byId('thresholdExample').setVisible(false);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L7 M7 S7"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;

		case "RELATIVE" : 
			var measureSelectFunction = jQuery.proxy(that.openMeasureSelectDialog,that);
			that.getView().byId('evaluationCriticalHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MINIMIZING"));
			that.getView().byId('evaluationWarningHigh').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MINIMIZING"));
			that.getView().byId('evaluationCriticalLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MAXIMIZING"));
			that.getView().byId('evaluationWarningLow').setShowValueHelp(false).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MAXIMIZING"));
			that.getView().byId('evaluationTarget').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationReferenceValue').setShowValueHelp(true).setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setValueHelpOnly(true);
			that.getView().byId('evaluationTrend').setPlaceholder(that.oApplicationFacade.getResourceBundle().getText("SELECT_MEASURE")).setShowValueHelp(true).setValueHelpOnly(true);

			that.getView().byId('relativeWarningLowText').setVisible(true);
			that.getView().byId('relativeCriticalLowText').setVisible(true);
			that.getView().byId('relativeCriticalHighText').setVisible(true);
			that.getView().byId('relativeWarningHighText').setVisible(true);
			that.getView().byId('thresholdExample').setVisible(true);

			that.getView().byId('evaluationCriticalLow').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('evaluationWarningLow').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('evaluationCriticalHigh').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('evaluationWarningHigh').setLayoutData(new sap.ui.layout.GridData({span : "L3 M3 S3"}));
			that.getView().byId('EvaluationTargetThresholdTrendInputForm2').rerender();
			break;
		};
	},

	valueTypeSelectChange : function(evt){
		evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
		this.getView().getModel().getData().REFERENCE_VALUE = "";
		this.getView().getModel().getData().CRITICALLOW = "";
		this.getView().getModel().getData().WARNINGLOW = "";
		this.getView().getModel().getData().TARGET = "";
		this.getView().getModel().getData().WARNINGHIGH = "";
		this.getView().getModel().getData().CRITICALHIGH = "";
		this.getView().getModel().getData().TREND = "";

		this.getView().getModel().updateBindings();

		this.createTrendThresholdLayout();
	},
	
	validateThresholdValue : function(oEvent){
		var that = this;
		oValue = oEvent.getSource().getValue();
		oPlaceHolderValue = oEvent.getSource().getPlaceholder();
		if(oPlaceHolderValue === that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MAXIMIZING")){
			if(oValue > 100){
				oEvent.getSource().setValueState("Error");
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("THRESHOLD_VALUE_LESS"));
				that.parentController.errorMessages.push({
					"type" : "Error",
					"title" : that.oResourceBundle.getText("THRESHOLD_VALUE_LESS"),
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that.parentController);
			}
			else{
				oEvent.getSource().setValueState("None");
			}
		}
		else if(oPlaceHolderValue === that.oApplicationFacade.getResourceBundle().getText("ENTER_PERCENTAGE_VALUE_MINIMIZING")){
			if(oValue < 100){
				oEvent.getSource().setValueState("Error");
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("THRESHOLD_VALUE_MORE"));			
				that.parentController.errorMessages.push({
					"type" : "Error",
					"title" : that.oResourceBundle.getText("THRESHOLD_VALUE_MORE"),
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that.parentController);

			}
			else{
				oEvent.getSource().setValueState("None");
			}
		}
	},
	
	openThersholdExample: function(oEvent){
		var that=this;
		var oCustomHeader = new sap.m.Bar({
			width:"100%",
			contentMiddle:
				[new sap.m.Label({
					text:that.oResourceBundle.getText("THRESHOLD_INFO")
				})],
				contentRight :
					[new sap.m.Button({
						icon:"sap-icon://decline",
						press : function() {
							infoPopOver.close();
						}
					})]
		});
		var oExampleText = new sap.m.Text({
			width:"100%",
       		textAlign: "Left",
		}).addStyleClass("evaluationThresholdInfoHeader");
		var viewModelData = this.getView().getModel().getData()
		if(viewModelData.GOAL_TYPE === "MA") {
			oExampleText.setText(that.oResourceBundle.getText("INFO_TEXT_MAXIMIZING"));
		} else if(viewModelData.GOAL_TYPE === "MI") {
			oExampleText.setText(that.oResourceBundle.getText("INFO_TEXT_MINIMIZING"));
		} else if(viewModelData.GOAL_TYPE === "RA"){
			oExampleText.setText(that.oResourceBundle.getText("INFO_TEXT_RANGE"));
		}
		var infoPopOver = new sap.m.ResponsivePopover({

			showHeader:true,
			customHeader:oCustomHeader,
			contentWidth: "20%",
			contentHeight : "25%",
			verticalScrolling : true,
			horizontalScrolling : false,
			placement: sap.m.PlacementType.Right,
			content:[oExampleText]
		});
		infoPopOver.openBy(oEvent.getSource());

	},
});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

sap.ui.controller("sap.suite.ui.smartbusiness.designtime.kpi.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");				
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.kpi', this);
	}
});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
//jQuery.sap.includeStyleSheet("sap/suite/ui/smartbusiness/kpi/resources/KpiParametersCss.css");
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.tools.migration.Main", {

	onInit: function() {
		
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.tools.migration', this);
	
	
		
			

	}


});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.visualization.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.visualization', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.designtime.workspace.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.designtime.workspace', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

sap.ui.controller("sap.suite.ui.smartbusiness.drilldown.view.Main", {
    onInit : function() {
        jQuery.sap.require("sap.ca.scfld.md.Startup");
        sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.drilldown', this);
    }
});
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.controller("sap.suite.ui.smartbusiness.mpt.Main", {

	onInit : function() {
		jQuery.sap.require("sap.ca.scfld.md.Startup");
		sap.ca.scfld.md.Startup.init('sap.suite.ui.smartbusiness.mpt', this);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf MainXML
	 */
	onExit : function() {
		//exit cleanup code here
	}

});
jQuery.sap.declare('sap.suite.ui.smartbusiness.library-all');
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.js.util'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.kpi.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.tools.migration.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.smartbusiness.mpt.Main.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.abap.CatalogServicesAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.abap.CatalogServicesAdapter");
sap.suite.ui.smartbusiness.adapter.abap.CatalogServicesAdapter = function() {
       var that = this;
       var cache={};
       var chipIdByType={
    		   'NT' : 'X-SAP-UI2-CHIP:/SSB/NUMERIC_TILE',
    		   'CT' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_TILE',
    		   'TT' : 'X-SAP-UI2-CHIP:/SSB/TREND_TILE',
    		   'AT' : 'X-SAP-UI2-CHIP:/SSB/DEVIATION_TILE',
    		   'CM' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_MM_TILE',
    		   'DT-CT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON',
    		   'DT-CM' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON_MM',
    		   'DT-AT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_DEVIATION',
    		   'DT-TT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_TREND'
       };
       var getEvaluationValues = function(evaluation, oEvaluationValues) {
              if(oEvaluationValues) {
                     return oEvaluationValues.evaluationValues;
              } else {
                     var values = [];
                     evaluation.VALUES.forEach(function(jsonObject) {
                           delete jsonObject.__metadata;
                           var obj = {};
                           for(var prop in jsonObject) {
                                  if(jsonObject.hasOwnProperty(prop)) {
                                         obj[prop] = jsonObject[prop];
                                  }
                           }
                           values.push(obj);
                     });
                     return values;
              }
       };
       var _getAdditionFilters = function(filters) {
              var finalArray=  [];
              if(filters && filters.length) {
                     filters.forEach(function(eachArray) {
                           var object = {};
                           object["NAME"] = eachArray[0];
                           object["OPERATOR"] = eachArray[1];
                           object["VALUE_1"] = eachArray[2];
                           object["VALUE_2"] = eachArray[3];
                           object["TYPE"] = "FI";
                           finalArray.push(object);
                     });
              }
              return finalArray;
       };
       var _appendSystemAlias = function(uri, sysAlias) {
              if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
                     var urlParsingService = sap.ushell.Container.getService("URLParsing");
                     if(urlParsingService) {
                           uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
                     }
              }
              return uri;
       };
       var getUI2Factory=function() {
              if(!(cache.ui2Factory)) {
                     var sScope = "PERS";
                     jQuery.sap.log.info("Abap Adapter --> Creating UI2 Factory with Scope - " + sScope);
                     if(sap.ushell && sap.ushell.Container) {
                           cache.ui2Factory = sap.ushell.Container.getService("PageBuilding", sScope).getFactory();
                     }
              }
              else {
                     jQuery.sap.log.info("Abap Adapter --> Picking UI2 Factory from cache");
              }
              return cache.ui2Factory;
       };
       
       function _createTile(payload, succ, err) {
              if(!(sap.ushell && sap.ushell.Container)) {
                     jQuery.sap.require(sap.ushell.Container);
              }
              var oFactory = getUI2Factory();
              var oPB = getUI2Factory().getPageBuildingService();
              var chipId = chipIdByType[payload.tileType];
              payload.id = chipId;
              payload.chipId = chipId;
              //oPB.createPageChipInstanceFromRawData({chipId:chipId, configuration:payload.configuration, pageId:payload.catalogId, title:payload.title, description:payload.description}, publishToUI2CallBack, publishToUI2ErrCallBack);
              var oChipStub = new sap.ui2.srvc.Chip(payload,oFactory);
              var oPageStub = new sap.ui2.srvc.Page(oFactory,payload.catalogId);
              var oChip = null;
              var oPage = null;
              var newChipId = null;
              
              function writeToBagCallBack(d) {
                     jQuery.sap.log.info("Abap Adapter --> Bag updated successfully for the Chip Instance");
              }
              
              function writeToBagErrCallBack(d,s,x) {
                     jQuery.sap.log.error("Abap Adapter --> Error while writing into the Bag of the Chip Instance");
                     err(d,s,x);
              }
              
              function writeConfigCallBack(d) {
                     jQuery.sap.log.info("Abap Adapter --> Configuration updated successfully for the Chip Instance");
                     if(succ) {
                           succ({response:{chipId:newChipId}});
                     }
              }
              
              function writeConfigErrCallBack(d,s,x) {
                     jQuery.sap.log.error("Abap Adapter --> Error while writing Configuration to the Chip Instance");
                     err(d,s,x);
              }
              
              function publishToUI2CallBack(d) {
                     jQuery.sap.log.info("Abap Adapter --> Chip Instance created successfully");
                     var UI2_PAGE = 'X-SAP-UI2-PAGE';
                     var oChipInstance = d;
                     var instanceId = oChipInstance.getId();
                     payload.ID = instanceId;
                     payload.configuration = payload.configuration.replace(/___CHIPINSTID______CHIPINSTID___/g, instanceId);
                     payload.configuration = payload.configuration.replace(/_____CHIPID__________CHIPID_____/g, UI2_PAGE +":" + payload.catalogId + ":" + instanceId);
                     newChipId = UI2_PAGE +":" + payload.catalogId + ":" + instanceId;
                     oChipInstance.getApi().writeConfiguration.setParameterValues(payload.configuration, writeConfigCallBack, writeConfigErrCallBack);
                     oChipInstance.setTitle(payload.title);
                     var tilePropertiesBag = oChipInstance.getBag("sb_tileProperties");
                     tilePropertiesBag.setText("title",payload.title);
                     tilePropertiesBag.setText("description",payload.description);
                     tilePropertiesBag.save(writeToBagCallBack, writeToBagErrCallBack);
              }
              
              function publishToUI2ErrCallBack(d,s,x) {
                     jQuery.sap.log.error("Abap Adapter --> Error in creating a Chip Instance in the UI2 Catalog");
                     err(d,s,x);
              }
              
              function chipLoadCallBack() {
                     jQuery.sap.log.info("Abap Adapter --> Chip Stub loaded successfully");
                     oChip = oChipStub;
                     oPage.addChipInstance(oChip, publishToUI2CallBack, publishToUI2ErrCallBack);
              }
              
              function chipLoadErrCallBack(d,s,x) {
                     jQuery.sap.log.error("Abap Adapter --> Error while loading the Chip Stub");
                     err(d,s,x);
              }
              
              function pageLoadCallBack() {
                     jQuery.sap.log.info("Abap Adapter --> Page Stub loaded successfully");
                     oPage = oPageStub;
                     oChipStub.load(chipLoadCallBack,chipLoadErrCallBack);
              }
              
              function pageLoadErrCallBack(d,s,x) {
                     jQuery.sap.log.error("Abap Adapter --> Error while loading the Page Stub");
                     err(d,s,x);
              }
              
              oPageStub.load(pageLoadCallBack,pageLoadErrCallBack);
       };

       this.publishChip = function(payload, mode, succ, err) {
              if(mode == "create") {
                     jQuery.sap.log.info("Abap Adapter --> Calling Chip create");
                     _createTile(payload, succ, err);
              }
              else {
                     jQuery.sap.log.info("Abap Adapter --> Calling Chip update");
                     //_updateTile(payload, succ, err);
              }
       };
       
       this.savePersonalizedTile = function(oParam) {
              var response = {}, oRuntimeService, oStartupParameters, sChipId, oChip;
              /**
              * oParam {
              *         title : '',
              *         description:''
              *         evaluationId : '',//Mandatory
              *         tileType : '' , //Mandatory - PossibleValues : NT, TT, CT, AT
              *         semanticObject : '',
              *         semanticAction : '',
              *         additionalFilters : [
              *              ["COUNTRY","EQ","INDIA",""],
              *              ["TIME","BT","10:20","11:20"]
              *          ],
              *          additionalAppParameters : {
              *              StoryId : '',
              *              
               *          },
              *          evaluationValues : [
              *              //for Maximizing Kpi
              *              {"TYPE" : "TA", FIXED : 2000},
              *              {"TYPE" : "CL", FIXED : 3000},
              *              {"TYPE" : "WL", FIXED : 2500}
              *              //For MINiMIZING KPI
              *              {"TYPE" : "TA", FIXED : 2000},
              *              {"TYPE" : "CH", FIXED : 3000},
              *              {"TYPE" : "WH", FIXED : 2500}

              *              //for Target Kpi
              *              {"TYPE" : "CL", FIXED : 3000},
              *              {"TYPE" : "WL", FIXED : 2500}
              *              {"TYPE" : "TA", FIXED : 2000},
              *              {"TYPE" : "CH", FIXED : 3000},
              *              {"TYPE" : "WH", FIXED : 2500}
              *              
               *          ] 
               * }
              */
              if(oParam.evaluationId && oParam.tileType) {
                     oRuntimeService = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices");
                     var evaluationData = oRuntimeService.getEvaluationById({
                           id  : oParam.evaluationId,
                           ID  : oParam.evaluationId,
                           cache : true,
                           filters : true,
                           values : true,
                           thresholds : true,
                           useRuntimeService : true,
                           sapSystem : oParam.sapSystem
                     });
                     if(evaluationData.EVALUATION && evaluationData.EVALUATION.ID) {
                           var TIMESTAMP = Date.now()+"";
                           var MASTER_OBJECT = {};
                           //MASTER_OBJECT["id"] = CHIP_ID;
                           
                           function fetchChipCallBack(oChip) {
                                  var oChipConfiguration = JSON.parse(oChip.configuration);

                                  oChipConfiguration.isSufficient = "1";
                                  oChipConfiguration.timestamp = TIMESTAMP;

                                  var oChipTileConfiguration = JSON.parse(oChipConfiguration.tileConfiguration);

                                  var tileProperties = JSON.parse(oChipTileConfiguration.TILE_PROPERTIES);
                                  tileProperties.id = "_____CHIPID__________CHIPID_____";
                                  tileProperties.instanceId = "___CHIPINSTID______CHIPINSTID___";
                                  tileProperties.catalogId = "/UI2/Fiori2LaunchpadHome";
                                  oChipTileConfiguration.TILE_PROPERTIES = JSON.stringify(tileProperties);

                                   oChipTileConfiguration.ADDITIONAL_FILTERS = JSON.stringify(_getAdditionFilters(oParam.additionalFilters));
                                  oChipTileConfiguration.EVALUATION_VALUES = JSON.stringify(getEvaluationValues(evaluationData, oParam.evaluationValues));

                                  oChipConfiguration.tileConfiguration= JSON.stringify(oChipTileConfiguration);
                                  oChipConfiguration=JSON.stringify(oChipConfiguration);
                                  oChip.configuration = oChipConfiguration;
                                  oChip.tileType = oParam.tileType;
                                  oChip.catalogId = "/UI2/Fiori2LaunchpadHome";
                                  oChip.title = oChip.title || evaluationData.INDICATOR_TITLE;
                                  oChip.description = oParam.title || evaluationData.TITLE;
                                  that.publishChip(oChip, "create", oParam.success, oParam.error);
                                  //var oPB = getUI2Factory().getPageBuildingService();
//                                oPB.createPageChipInstanceFromRawData({
//                                       chipId:chipIdByType[oParam.tileType],
//                                       configuration: oChipConfiguration,
//                                       pageId: "/UI2/Fiori2LaunchpadHome",
//                                       title: oParam.title,
//                                }, function(responseObject) {
//                                       response.status = "Success",
//                                       response.message="Tile Created Successfully";
//                                }, function(errorObject) {
//                                       response.status="Failed",
//                                       response.message="Error Creating Tile";
//                                       response.errorDescription = errorObject;
//                                });
                           }
                           
                           function fetchChipErrCallBack(d,s,x) {
                                  
                           }
                           
                           try {
                                  oStartupParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
                                  sChipId = oStartupParameters["chipId"][0];
                                  sChipId = decodeURIComponent(sChipId);
                                  sChipId = decodeURIComponent(sChipId);
                                  oChip = oRuntimeService.getChipById({
                                         id : sChipId,
                                         success : fetchChipCallBack,
                                         error : fetchChipErrCallBack
                                  });
                           } catch(e) {
                                  return  {
                                         status : "Failed",
                                         message : e.message
                                  };
                           }

                     } else {
                           response.status="Failed",
                           response.message="Invalid Evaluation Id : "+oParam.evaluationId;
                     }
              } else {
                     response.status="Failed",
                     response.message="Mandatory Param evaluationId or TileType is Missing";
              }
              return response;
       };

};


}; // end of sap/suite/ui/smartbusiness/adapter/abap/CatalogServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.abap.DrilldownServicesAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.abap.DrilldownServicesAdapter");
sap.suite = sap.suite || {};
sap.suite.ui=sap.suite.ui||{};
/**
 * SAP Smart Business Analytical Library. Namespace contains Platform adapters, Drill Down objects, design time service objects,
 * Chip and Tile components, Modeler Application Components
 */
sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
sap.suite.ui.smartbusiness.adapter = sap.suite.ui.smartbusiness.adapter || {};
sap.suite.ui.smartbusiness.adapter.abap=sap.suite.ui.smartbusiness.adapter.abap||{};
sap.suite.ui.smartbusiness.adapter.abap.DrilldownServicesAdapter={
		fetchXSRFToken:function(fnS,fnE){
			jQuery.ajax({
      		  type: "HEAD",
      		  async: false,
      		  dataType: "json",
      		  url: "/sap/hba/r/sb/core/logic/__token.xsjs",
      		  headers: {"X-CSRF-Token": "Fetch"},
      		  success: function(d, s, x) {
      			  if(fnS)fnS(d,s,x);
      		  },
      		  error: function() {
      			  if(fnE)fnE(d,s,x);
      		  }
      	  });
		},
		constants:{
			"write":{fn:"getWritePayload"},
			"delete":{fn:"getDeletePayload"},
			"update":{fn:"getUpdatePayload"},
			"viewServiceUrl":"/sap/hba/r/sb/core/logic/ddaViewConfiguration_cud.xsjs",
			"evalServiceUrl":"/sap/hba/r/sb/core/logic/ddaEvaluation_cud.xsjs"
		},
        doUpdate:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"PUT",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doWrite:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"POST",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doDelete:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"DELETE",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                   }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
            
        },
        doServiceCall:function(oConfig){
            var that=this;
            if(oConfig.type=="POST"){
                  this.doWrite(oConfig);
            }else if(oConfig.type=="PUT"){
                  this.doUpdate(oConfig);
            }else if(oConfig.type="DELETE"){
                  this.doDelete(oConfig);
            }
        },

        saveEvalConfiguration:function(evalId,data,action,fnS,fnE){
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data),
                         url:this.constants.evalServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
        saveViewConfiguration:function(evalId,data,action,fnS,fnE){
            action=data.ID_EDITABLE?"write":action;
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data,true),
                         url:this.constants.viewServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
		getUpdatePayload:function(evalId,data,isView){
			return {
				payload:this.getWritePayload(evalId,data,isView),
				keys:this.getDeletePayload(evalId,data,isView)
			};
		},
		getWritePayload:function(evalId,data,isView){
			var configId=data.SELECTED_VIEW,oReturn;
			if(isView){
				oReturn={
						DDA_COLUMNS:this.getColumnsPayload(data,evalId,configId),
						DDA_CHART:this.getChartPayload(data,evalId,configId),
						DDA_MASTER_TEXT:this.getViewTextPayload(data,evalId,configId)
				};
				if(data.ID_EDITABLE){
					oReturn.DDA_MASTER=this.getNewViewPayload(data.ALL_VIEWS,evalId,configId);
				}
			}else{
				oReturn={
						DDA_FILTERS:this.getFilterPayload(data.CURRENT_FILTERS,evalId,configId),
						DDA_HEADER:this.getHeaderPayload(data.HEADERS_VISIBLE,evalId,configId),
						DDA_CONFIGURATION:this.getConfigurationPayload(data,evalId,configId)						
				};
				var viewOrderPayload=this.getViewOrderPayload(data.ALL_VIEWS,evalId,configId);
				if(viewOrderPayload.length){
					oReturn.DDA_MASTER=viewOrderPayload;
				}
			}
			return oReturn;
		},
		getDeletePayload:function(evalId,data,isView){
			return {"EVALUATION_ID":evalId,"CONFIGURATION_ID":data.ID};
		},
		getViewTextPayload:function(data,evalId,configId){
			var viewTexts=[];
			var curL=data.CURRENT_LANGUAGE,viewText=data.TITLE;
			data=data.ADDITIONAL_LANGUAGE_TITLES||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SAP_LANGUAGE_KEY==curL)
					continue;
				viewTexts.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
     				"SAP_LANGUAGE_KEY": data[i].SAP_LANGUAGE_KEY,
     				"TEXT": data[i].TEXT,
					"IS_ACTIVE":1
				});
			}
			viewTexts.push({
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
 				"SAP_LANGUAGE_KEY": curL,
 				"TEXT": viewText,
				"IS_ACTIVE":1
			});
			return viewTexts;
		},
		getChartPayload:function(data,evalId,configId){
			return [{
				"EVALUATION_ID":evalId,
				"CONFIGURATION_ID":configId,
				"VALUE_TYPE":data.VALUE_TYPE,
				"AXIS_TYPE":data.AXIS_TYPE,
				"CHART_TYPE":data.CHART_TYPE,	
				"DATA_LIMIT":data.DATA_LIMITATIONS?data.DATA_LIMIT:-1,		
				"COLOR_SCHEME":data.COLOR_SCHEME,
				"IS_ACTIVE":1,
				"THRESHOLD_MEASURE":data.THRESHOLD_MEASURE
			}];
		},
		getColumnsPayload:function(data,evalId,configId){
			var columns=[];
			var colorScheme=data.COLOR_SCHEME;
			data=data.items||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SELECTED)
				columns.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"NAME":data[i].NAME,	
					"TYPE":data[i].TYPE.toUpperCase(),
					"SORT_BY":data[i].SORT_BY,
					"VISIBILITY":data[i].VISIBILITY,
					"COLOR":(colorScheme=="MANUAL_NON_SEMANTIC"? data[i].COLOR1:colorScheme=="MANUAL_SEMANTIC"?data[i].COLOR2:"")||"",
					"STACKING":data[i].STACKING,		
					"AXIS":data[i].AXIS,
					"SORT_ORDER":data[i].SORT_ORDER,	
					"COLUMNS_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return columns;
		},
		getFilterPayload:function(data,evalId,configId){
			var filters=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				filters.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"DIMENSION":data[i],	
					"VISIBILITY":1,
					"IS_ACTIVE":1
				});
			}
			return filters;
		},
		_getHeaderConfiguration:function(header){
			var data;
			switch (header.VISUALIZATION_TYPE) {
			    case "CM":
			        data = [{
			            name: header.MEASURE1,
			            color: header.COLOR1
			        }, {
			            name: header.MEASURE2,
			            color: header.COLOR2
			        }];
			        (header.MEASURE3 && header.MEASURE3!="_none^") ? data.push({

			            name: header.MEASURE3,
			            color: header.COLOR3
			        }) : "";
			        data = JSON.stringify({MEASURES: JSON.stringify(data)});
			        break;
			    case "CT":
			        data = {
			            order: header.SORT_ORDER[1] == "D" ? "desc" : "asc",
			            by: header.SORT_ORDER[0],
			            dimension_color: header.DIMENSION_COLOR
			        };
			        data = JSON.stringify({SORTING: JSON.stringify(data)});
			        break;
			}
			return data;
		},
		getHeaderPayload:function(data,evalId,configId){
			var headers=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				if(data[i])//.visible)
				headers.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
					"VISUALIZATION_TYPE":data[i].VISUALIZATION_TYPE,
					"VISIBILITY":1,
					"REFERENCE_EVALUATION_ID":data[i].REFERENCE_EVALUATION_ID,
					"VISUALIZATION_ORDER":i,
					"DIMENSION":data[i].DIMENSION,
					"IS_ACTIVE":1,
					"CONFIGURATION":this._getHeaderConfiguration(data[i])
				});
			}
			return headers;			
		},
		getConfigurationPayload:function(data,evalId,configId){
			var config={
					"SAP_FILTER":{value:"",visibility:1},
					"SAP_AGGREGATE_VALUE":{value:"",visibility:(data.CONFIG.SAP_AGGREGATE_VALUE?1:0)},
					"SAP_HEADER":{value:"",visibility:1},
					"QUERY_SERVICE_URI":{value:data.QUERY_SERVICE_URI,visibility:1},
					"QUERY_ENTITY_SET":{value:data.QUERY_ENTITY_SET,visibility:1},
			};
			var configs=[];
			for(var each in config){
				configs.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"PROPERTY_TYPE":each,
					"PROPERTY_VALUE":config[each].value,		
					"VISIBILITY":config[each].visibility,
					"IS_ACTIVE":1
				});
			}
			return configs;
		},
		getNewViewPayload:function(data,evalId,configId){
			return [{
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
				"CONFIG_ORDER":(data.length+1),
				"IS_ACTIVE":1
			}];
		},
		getViewOrderPayload:function(data,evalId,configId){
			var configOrder=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				configOrder.push({
					"CONFIGURATION_ID":data[i].ID,
					"EVALUATION_ID":evalId,
					"CONFIG_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return configOrder;	
		}

};
}; // end of sap/suite/ui/smartbusiness/adapter/abap/DrilldownServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.abap.ModelerServicesAdapter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.abap.ModelerServicesAdapter");
sap.suite.ui.smartbusiness.adapter.abap.ModelerServicesAdapter = function() {
	
	var that = this;
	this.cache = this.cache || {};
	
	var _ENTITYKEYS={
			DDA_COLUMN : ["EVALUATION_ID",{name:"IS_ACTIVE",formatter:function(s){return parseInt(s);}},"CONFIGURATION_ID","NAME","TYPE"],
			DDA_CHART : ["EVALUATION_ID","IS_ACTIVE","CONFIGURATION_ID"],
			EVALUATIONS : ["ID","IS_ACTIVE"],
			EvaluationTexts : ["ID","IS_ACTIVE","LANGUAGE"],
			IndicatorTexts : ["ID","IS_ACTIVE","LANGUAGE"],
			INDICATORS : ["ID","IS_ACTIVE"],
			IndicatorTexts : ["ID","IS_ACTIVE","LANGUAGE"],
			EVALUATION_FILTERS : ["ID","IS_ACTIVE","TYPE","NAME","VALUE_1","OPERATOR","VALUE_2"],
			FILTERS : ["ID","IS_ACTIVE","TYPE","NAME","VALUE_1","OPERATOR","VALUE_2"],
			EVALUATION_VALUES : ["ID","IS_ACTIVE","TYPE"],
			TAGS : ["ID","IS_ACTIVE","TYPE","TAG"],
			PROPERTIES : ["ID","IS_ACTIVE","TYPE","NAME","VALUE"],
			CHIPS: ["ID","IS_ACTIVE"],
			INDICATOR : [],
			EVALUATION : [],
			CHIPS: [],
			ACTIVATE_INDICATOR: [],
			ACTIVATE_EVALUATION: [],
			INDICATOR_FAVOURITE: [],
			EVALUATION_FAVOURITE: [],
			ASSOCIATION: [],
			ACTIVATE_ASSOCIATION: [],
			ACTIVATE_CHIP: [],
			AUTHORIZATION: []
	}
	_ENTITYSETMAP={
			EVALUATION:"EVALUATIONS",
			CHIP:"CHIPS",
			INDICATOR:"INDICATORS",
			FILTERS : "EVALUATION_FILTERS",
			TEXTS : "EVALUATION_TEXTS",
			VALUES : "EVALUATION_VALUES"
	}
	_DATATYPE={
			IS_ACTIVE:"int"
	}
	
	function entityNavigationDictionary(entity) {
		var entityNavDict = {
				"INDICATORS":{
					"indicator": {"entity":"INDICATORS", "type":"INDICATOR"},
					"texts": {"entity":"TEXTS", "type":"INDICATOR_TEXT"},
					"evaluations": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"associations": {"entity":"ASSOCIATIONS", "type":"ASSOCIATION"},
					"association_source": {"entity":"ASSOCIATION_SOURCE", "type":"ASSOCIATION"},
					"association_target": {"entity":"ASSOCIATION_TARGET", "type":"ASSOCIATION"}
				},
				"INDICATORS_MODELER":{
					"indicator": {"entity":"INDICATORS_MODELER", "type":"INDICATOR"},
					"texts": {"entity":"TEXTS", "type":"INDICATOR_TEXT"},
					"evaluations": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"associations": {"entity":"ASSOCIATIONS", "type":"ASSOCIATION"},
					"association_source": {"entity":"ASSOCIATION_SOURCE", "type":"ASSOCIATION"},
					"association_target": {"entity":"ASSOCIATION_TARGET", "type":"ASSOCIATION"}
				},
				"EVALUATIONS":{
					"evaluation": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"texts": {"entity":"TEXTS", "type":"EVALUATION_TEXT"},
					"chips": {"entity":"CHIPS", "type":"CHIP"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"indicator": {"entity":"INDICATOR_INFO", "type":"INDICATOR"},
					"filters": {"entity":"FILTERS", "type":"FILTER"},
					"values": {"entity":"VALUES", "type":"VALUE"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"},
					"dda_header_tiles": {"entity":"DDA_HEADER_TILES", "type":"DDA_HEADER"}
				},
				"EVALUATIONS_MODELER":{
					"evaluation": {"entity":"EVALUATIONS_MODELER", "type":"EVALUATION"},
					"texts": {"entity":"TEXTS", "type":"EVALUATION_TEXT"},
					"chips": {"entity":"CHIPS", "type":"CHIP"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"indicator": {"entity":"INDICATOR_INFO", "type":"INDICATOR"},
					"filters": {"entity":"FILTERS", "type":"FILTER"},
					"values": {"entity":"VALUES", "type":"VALUE"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"},
					"dda_header_tiles": {"entity":"DDA_HEADER_TILES", "type":"DDA_HEADER"},
					"texts_for_chip": {"entity":"TEXTS_FOR_CHIP", "type":"EVALUATION_TEXT"}
				},
				"CHIPS":{
					"texts": {"entity":"TEXTS", "type":"CHIP_TEXT"},
					"evaluation": {"entity":"EVALUATION_INFO", "type":"EVALUATION"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"}
				}
		};
		return entityNavDict[entity];
	};
	
	function beanDictionary(entity) {
		return beans = {
				"INDICATOR": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "TYPE":"TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "EVALUATION_COUNT":"EVALUATION_COUNT", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "ASSOCIATION_SOURCE_COUNT":"ASSOCIATION_SOURCE_COUNT", "ASSOCIATION_TARGET_COUNT":"ASSOCIATION_TARGET_COUNT"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "TYPE":"TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "EVALUATION_COUNT":"EVALUATION_COUNT", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "ASSOCIATION_SOURCE_COUNT":"ASSOCIATION_SOURCE_COUNT", "ASSOCIATION_TARGET_COUNT":"ASSOCIATION_TARGET_COUNT"
					}
				},
				"EVALUATION": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "INDICATOR":"INDICATOR", "SCALING":"SCALING", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "VALUES_SOURCE":"VALUES_SOURCE", "INDICATOR_TYPE":"INDICATOR_TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "CHIPS_COUNT":"CHIPS_COUNT", "INDICATOR_TITLE":"INDICATOR_TITLE", "VIEWS_COUNT":"VIEWS_COUNT", "NAMESPACE":"NAMESPACE"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "INDICATOR":"INDICATOR", "SCALING":"SCALING", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "VALUES_SOURCE":"VALUES_SOURCE", "INDICATOR_TYPE":"INDICATOR_TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "CHIPS_COUNT":"CHIPS_COUNT", "INDICATOR_TITLE":"INDICATOR_TITLE", "VIEWS_COUNT":"VIEWS_COUNT"
					}
				},
				"CHIP": {
					"bean": { 
						"ID":"id", "IS_ACTIVE":"isActive", "EVALUATION_ID":"evaluationId", "CATALOG_ID":"catalogId", "TYPE":"tileType", "COUNTER":"COUNTER", "CREATED_BY":"createdBy", "CHANGED_BY":"changedBy", "CREATED_ON":"createdOn", "CHANGED_ON":"changedOn"
					},
					"reverseBean": {
						"id":"ID", "isActive":"IS_ACTIVE", "evaluationId":"EVALUATION_ID", "catalogId":"CATALOG_ID", "tileType":"TYPE", "COUNTER":"COUNTER", "createdBy":"CREATED_BY", "changedBy":"CHANGED_BY", "createdOn":"CREATED_ON", "changedOn":"CHANGED_ON"
					}
				},
				"ASSOCIATION": {
					"bean": {
						"NAMESPACE":"NAMESPACE", "TYPE":"TYPE", "SOURCE_INDICATOR":"SOURCE_INDICATOR", "TARGET_INDICATOR":"TARGET_INDICATOR", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "SOURCE_INDICATOR_TITLE":"SOURCE_INDICATOR_TITLE", "TARGET_INDICATOR_TITLE":"TARGET_INDICATOR_TITLE"
					},
					"reverseBean": {
						"NAMESPACE":"NAMESPACE", "TYPE":"TYPE", "SOURCE_INDICATOR":"SOURCE_INDICATOR", "TARGET_INDICATOR":"TARGET_INDICATOR", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "SOURCE_INDICATOR_TITLE":"SOURCE_INDICATOR_TITLE", "TARGET_INDICATOR_TITLE":"TARGET_INDICATOR_TITLE"
					}
				},
				"TAG": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "TAG":"TAG"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "TAG":"TAG"
					}
				},
				"PROPERTY": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE":"VALUE"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE":"VALUE"
					}
				},
				"FILTER": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE_1":"VALUE_1", "OPERATOR":"OPERATOR", "VALUE_2":"VALUE_2"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE_1":"VALUE_1", "OPERATOR":"OPERATOR", "VALUE_2":"VALUE_2"
					}
				},
				"VALUE": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "FIXED":"FIXED", "COLUMN_NAME":"COLUMN_NAME", "ODATA_PROPERTY":"ODATA_PROPERTY"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "FIXED":"FIXED", "COLUMN_NAME":"COLUMN_NAME", "ODATA_PROPERTY":"ODATA_PROPERTY"
					}
				},
				"DDA_MASTER": {
					"bean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "CONFIG_ORDER":"CONFIG_ORDER", "TEXT":"TEXT", "IS_ACTIVE":"IS_ACTIVE"
					},
					"reverseBean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "CONFIG_ORDER":"CONFIG_ORDER", "TEXT":"TEXT", "IS_ACTIVE":"IS_ACTIVE"
					}
				},
				"DDA_HEADER": {
					"bean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "REFERENCE_EVALUATION_ID":"REFERENCE_EVALUATION_ID", "VISUALIZATION_TYPE":"VISUALIZATION_TYPE", "VISUALIZATION_ORDER":"VISUALIZATION_ORDER", "VISIBILITY":"VISIBILITY", "DIMENSION":"DIMENSION", "IS_ACTIVE":"IS_ACTIVE", "CONFIGURATION":"CONFIGURATION"
					},
					"reverseBean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "REFERENCE_EVALUATION_ID":"REFERENCE_EVALUATION_ID", "VISUALIZATION_TYPE":"VISUALIZATION_TYPE", "VISUALIZATION_ORDER":"VISUALIZATION_ORDER", "VISIBILITY":"VISIBILITY", "DIMENSION":"DIMENSION", "IS_ACTIVE":"IS_ACTIVE", "CONFIGURATION":"CONFIGURATION"
					}
				},
				"LANGUAGE": {
					"bean": {
						"SPRAS":"SPRAS", "LAISO":"LAISO", "SPTXT":"SPTXT"
					},
					"reverseBean": {
						"SPRAS":"SPRAS", "LAISO":"LAISO", "SPTXT":"SPTXT"
					}
				},
				"INDICATOR_TEXT": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					}
				},
				"EVALUATION_TEXT": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					}
				},
				"CHIP_TEXT": {
					"bean": {
						"ID":"id", "IS_ACTIVE":"isActive", "LANGUAGE":"language", "CATALOG_ID":"catalogId", "TITLE":"title", "DESCRIPTION":"description"
					},
					"reverseBean": {
						"id":"ID", "isActive":"IS_ACTIVE", "language":"LANGUAGE", "catalogId":"CATALOG_ID", "title":"TITLE", "description":"DESCRIPTION"
					}
				}
		};
	};
	
	this.formBean = function(data, entity, isBean) {
	    var bean = {};
	    var outputs = [];
	    var output = {};
	    var datum = {};
	    var isArray = false;
	    if(isBean) {
	        bean = beans[entity].bean;
	    }
	    else {
	        bean = beans[entity].reverseBean;
	    }
	    if(data instanceof Array) {
	        isArray = true;
	    }
	    else {
	        data = [data];
	    }
	    for(var i=0,l=data.length; i<l; i++) {
	        output = {};
	        datum = data[i];
	        for(var col in bean) {
	            if(bean.hasOwnProperty(col)) {
	                if(datum[col] !== undefined && datum[col] !== null) {
	                    output[bean[col]] = datum[col];
	                }
	            }
	        }
	        outputs.push(output);
	    }
	    if(!isArray) {
	        outputs = outputs[0];
	    }
	    return outputs;
	};
	
	function getDesigntimeModel() {
		that.cache.designtimeModel = that.cache.designtimeModel || new sap.ui.model.odata.ODataModel(that.getDesigntimeServiceUrl(), true);
		return that.cache.designtimeModel; 
	};
	
	function getRuntimeModel() {
		that.cache.runtimeModel = that.cache.runtimeModel || new sap.ui.model.odata.ODataModel(that.getRuntimeServiceUrl(), true);
		return that.cache.runtimeModel; 
	};
	
	function getDesigntimeServiceUrl() {
		return "/sap/opu/odata/SSB/SMART_BUSINESS_MODELER_SRV";
	};

	this.getDesigntimeServiceUrl = function() {
		jQuery.sap.log.info("Abap Adapter --> Designtime Service URI");
		return "/sap/opu/odata/SSB/SMART_BUSINESS_MODELER_SRV";
	};

	this.getRuntimeServiceUrl = function() {
		jQuery.sap.log.info("Abap Adapter --> Runtime Service URI");
		return "/sap/opu/odata/SSB/SMART_BUSINESS_RUNTIME_SRV";
	};

	function _encodeURL(uRi) {
		return jQuery.sap.encodeURL(uRi);
	};

	this.getSessionUser = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Session User");
		/*
		 *            Implement Fetching Session User
		 */
		var username = null;
		var succ = obj.success;
		var err = obj.error;
		
		if(that.cache.sessionUser) {
			username = that.cache.sessionUser;
			jQuery.sap.log.info("Abap Adapter --> Current Session User From Cache - " + that.cache.sessionUser);
			if(succ) {
				succ(username);
			}
		}
		else {
			try {
				if(!(sap.ushell && sap.ushell.Container)) {
					jQuery.sap.require(sap.ushell.Container);
				}
				username = sap.ushell.Container.getUser().getId();
				that.cache.sessionUser = username;
				jQuery.sap.log.info("Abap Adapter --> Current Session User - " + that.cache.sessionUser);
				if(succ) {
					succ(username);
				}
			}
			catch(e) {
				jQuery.sap.log.error("Abap Adapter --> Fetching Session User Failed");
				if(err) {
					err(d,s,x);
				}
			}
		}
		return that.cache.sessionUser;
	};

	this.getSystemInfo = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Fetching System Info");
		
		var env = null;
		var succ = obj.success;
		var err = obj.error;
		
		function sysInfoFetchCallBack(d) {
			if(d === null || d === undefined) {
				d = {};
				d.SYSFLAG = 1;
			}
			if(d.length && d[0]) {
				env = parseInt(d[0].SYSFLAG,10);
			}
			// This should not exist
			// Purely for testing purposes only => For testing customer scenario overriding env with url parameter 
			if(jQuery.sap.getUriParameters().get("env") == "cust") {
				env = 0;
			}
			that.cache.env = env;
			jQuery.sap.log.info("Abap Adapter --> System Environment - " + ((that.cache.env) ? "SAP" : "Non-SAP"));
			if(succ) {
				succ(env);
			}
		}
		
		function sysInfoFetchErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Fetching System Info Failed");
			if(err) {
				err(d,s,x);
			}
		}
		
		if(that.cache.env == undefined) {
			that.getDataByEntity({entity:"SysInfoSet",async:obj.async || false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:obj.model});
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> System Environment From Cache - " + ((that.cache.env) ? "SAP" : "Non-SAP"));
			if(succ) {
				succ(that.cache.env);
			}
		}
		return that.cache.env;
	};
	
	this.getAllLanguages = function(obj) {
		/*
		 *            Implement Fetching All SAP Languages
		 */
		var localLanguage = undefined;
		var succ = obj.success;
		var err = obj.error;

		var langSuccessHandler = function(data) {
			data = (data.results) ? data.results : data;
			if(data.length) {
				if(data.length == 1) {
					var SAP_LANGUAGES = {LAISO:{},SPRAS:{}};
					SAP_LANGUAGES.LAISO[data[0]["LAISO"]] = data[0]["SPRAS"]; SAP_LANGUAGES.SPRAS[data[0]["SPRAS"]] = data[0]["LAISO"];
				}
				else {
					SAP_LANGUAGES = data.reduce(function(p,c,i,a) { SAP_LANGUAGES = SAP_LANGUAGES || {}; SAP_LANGUAGES.LAISO = SAP_LANGUAGES.LAISO || {}; SAP_LANGUAGES.SPRAS = SAP_LANGUAGES.SPRAS || {}; if(i == 1){ SAP_LANGUAGES.LAISO[a[0]["LAISO"]] = a[0]["SPRAS"]; SAP_LANGUAGES.SPRAS[a[0]["SPRAS"]] = a[0]["LAISO"]; }  SAP_LANGUAGES.LAISO[a[i]["LAISO"]] = a[i]["SPRAS"]; SAP_LANGUAGES.SPRAS[a[i]["SPRAS"]] = a[i]["LAISO"]; return SAP_LANGUAGES;});
				}
				var SAP_LANGUAGE_ARRAY = data;
				that.cache.SAP_LANGUAGES = SAP_LANGUAGES;
				that.cache.SAP_LANGUAGE_ARRAY = SAP_LANGUAGE_ARRAY;
				that.cache.localeIsoLanguage = sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase();
				localLanguage = SAP_LANGUAGES.LAISO[that.cache.localeIsoLanguage];
				that.cache.localLanguage = localLanguage;
				that.cache.localeSapLanguage = localLanguage;
				
				jQuery.sap.log.info("Abap Adapter --> Logon Language - " + that.cache.localeIsoLanguage + " - " + that.cache.localeSapLanguage);
			}
			if(succ) {
				succ(SAP_LANGUAGES, SAP_LANGUAGE_ARRAY, localLanguage);
			}
		};

		var langErrorHandler = function(d,s,x) {
			if(err) {
				err(d,s,x);
			}
		};

		if(that.cache.SAP_LANGUAGE_ARRAY && that.cache.SAP_LANGUAGES) {
			jQuery.sap.log.info("Abap Adapter --> Picking All Languages from cache");
			that.cache.localeIsoLanguage = sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase();
			that.cache.localLanguage = that.cache.SAP_LANGUAGES.LAISO[that.cache.localeIsoLanguage];
			that.cache.localeSapLanguage = that.cache.localLanguage;
			if(succ) {
				succ(that.cache.SAP_LANGUAGES, that.cache.SAP_LANGUAGE_ARRAY, that.cache.localLanguage);
			}
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Calling All Languages");
			this.getDataByEntity({entity:"LANGUAGE",async:(obj.async || false), success:langSuccessHandler, error:langErrorHandler, model:obj.model});
		}
		
	};

	this.getKPIById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling KPI Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Indicator Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getDesigntimeServiceUrl();
		var model = obj.model || getDesigntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
				obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
			obj.entity = obj.entity || "/INDICATORS_MODELER";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noIndicator)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.INDICATOR = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("INDICATOR");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.evaluations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATIONS","GET"));
			referenceObject.push("EVALUATIONS");
		}
		if(obj.associations && obj.associationProperties) {
			batchRequests.push(model.createBatchOperation("/ASSOCIATIONS_MODELER?$filter=" + _encodeURL("SOURCE_INDICATOR eq '" + obj.ID + "' or TARGET_INDICATOR eq '" + obj.ID + "'") + "&$expand=PROPERTIES","GET"));
			referenceObject.push("ASSOCIATIONS");
		}
		else if(obj.associations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_SOURCE","GET"));
			batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_TARGET","GET"));
			referenceObject.push("ASSOCIATION_SOURCE");
			referenceObject.push("ASSOCIATION_TARGET");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data) ? ((A[i].data.results) ? A[i].data.results : A[i].data) : null;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Indicator details");
		},obj.async);
		if(obj.associations && obj.associationProperties) {
			for(var i=0,l=dataBean.ASSOCIATIONS.length; i<l; i++) {
				if(dataBean.ASSOCIATIONS[i].PROPERTIES) {
					if(dataBean.ASSOCIATIONS[i].PROPERTIES.results && dataBean.ASSOCIATIONS[i].PROPERTIES.results.length) {
						dataBean.ASSOCIATIONS[i].PROPERTIES = dataBean.ASSOCIATIONS[i].PROPERTIES.results;
					}
					else {
						dataBean.ASSOCIATIONS[i].PROPERTIES = [];
					}
				}
				else {
					dataBean.ASSOCIATIONS[i].PROPERTIES = [];
				}
			}
		}
		else {
			dataBean.ASSOCIATIONS = [].concat(dataBean.ASSOCIATION_SOURCE).concat(dataBean.ASSOCIATION_TARGET);               
		}

		return dataBean;

	};

	this.getEvaluationById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Evaluation Data");

		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Evaluation Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getDesigntimeServiceUrl();
		var model = obj.model || getDesigntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
				obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE='0'") != -1) || (contextPath.indexOf("IS_ACTIVE='1'") != -1)) ? ((contextPath.indexOf("IS_ACTIVE='0'") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
			obj.entity = obj.entity || "/EVALUATIONS_MODELER";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noEvaluation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.EVALUATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("EVALUATION");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.indicator_tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/INDICATOR_TAGS","GET"));
			referenceObject.push("INDICATOR_TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.filters) {
			batchRequests.push(model.createBatchOperation(contextPath+"/FILTERS","GET"));
			referenceObject.push("FILTERS");
		}
		if(obj.values) {
			batchRequests.push(model.createBatchOperation(contextPath+"/VALUES","GET"));
			referenceObject.push("VALUES");
		}
		if(obj.chips) {
			batchRequests.push(model.createBatchOperation(contextPath+"/CHIPS","GET"));
			referenceObject.push("CHIPS");
		}
		if(obj.dda_configurations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
			referenceObject.push("DDA_CONFIGURATIONS");
		}
		if(obj.dda_header_tiles) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_HEADER_TILES","GET"));
			referenceObject.push("DDA_HEADER_TILES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data) ? ((A[i].data.results) ? A[i].data.results : A[i].data) : null;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Evaluation details");
		},obj.async);

		return dataBean;

	};

	this.getAssociationById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Association Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */

		var that = this;
//		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
//			throw new Error("Failed to get Indicator Id or Status for data fetch");
//			return null;
//		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getDesigntimeServiceUrl();
		var model = obj.model || getDesigntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
//			if(obj.context.getObject()) {
//			obj.ID = obj.context.getObject().ID;
//			obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
//			}
//			else {
//			obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
//			obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
//			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
//			obj.entity = obj.entity || "/INDICATORS_MODELER";
//			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
//			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
//			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noAssociation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.ASSOCIATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("ASSOCIATION");
			}
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.source) {
			batchRequests.push(model.createBatchOperation(contextPath+"/SOURCE_INDICATOR_INFO","GET"));
			referenceObject.push("SOURCE_INDICATOR_INFO");
		}
		if(obj.target) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TARGET_INDICATOR_INFO","GET"));
			referenceObject.push("TARGET_INDICATOR_INFO");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data) ? ((A[i].data.results) ? A[i].data.results : A[i].data) : null;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Association details");
		},obj.async);
		return dataBean;
	};

	this.getChipById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Chip Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */

		var that = this;
		if(!(obj.id && obj.isActive !== null && obj.isActive !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Chip Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getDesigntimeServiceUrl();
		var model = obj.model || getDesigntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.id = obj.context.getObject().ID;
				obj.isActive = obj.context.getObject().IS_ACTIVE;
			}
			else {
				obj.id = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.isActive = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.id && obj.isActive !== null && obj.isActive !== undefined) {
			obj.entity = obj.entity || "/CHIPS";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(ID='" + obj.id + "',IS_ACTIVE=" + obj.isActive + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noChip)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.CHIP = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("CHIP");
			}
		}
		if(obj.evaluation) {
			batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATION_INFO","GET"));
			referenceObject.push("EVALUATION_INFO");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.dda_configurations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
			referenceObject.push("DDA_CONFIGURATIONS");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data) ? ((A[i].data.results) ? A[i].data.results : A[i].data) : null;
			}
			if(s) {
				s(dataBean);
			}

		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Chip details");
		},obj.async);

		return dataBean;

	};

	this.getChipByEvaluation = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Chips for Evaluation");
		obj.async = false;
		obj.chips= true;
		var finalSuccessHandler = obj.success;
		var finalErrorHandler = obj.error;
		that.chipObj = {};
		
		function evaluationFetchCallBack(evaluationObj) {
			var evaluation = evaluationObj.EVALUATION;
			if(obj.partial) {
				that.chipObj = {EVALUATION:evaluationObj.EVALUATION, CHIPS:evaluationObj.CHIPS, CATALOGS:[]};
				finalSuccessHandler(that.chipObj);
				return;
			}
			that.chipObj = {EVALUATION:evaluationObj.EVALUATION, CHIPS:[], CATALOGS:[]};
			var catalogObj = _fetchCatalogChipsForEvaluation(evaluationObj);
			var chips = _fetchChipsFromUI2(finalSuccessHandler, finalErrorHandler);
		}
		
		function evaluationFetchErrCallBack(d,s,x) {	
			if(finalErrorHandler) {
				finalErrorHandler(d,s,x);
			}
		}
		
		obj.success = evaluationFetchCallBack;
		obj.error = evaluationFetchErrCallBack;
		var evaluationObj = this.getEvaluationById(obj);
		return null;
	};

	this.getDataByEntity = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Data");
		/*
		 * Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		var url = obj.uri;
		var model = obj.model || (url ? new sap.ui.model.odata.ODataModel(url,true) : getDesigntimeModel());
		var expand = "";
		var expandArr = [];
		var filter = "";
		var select = "";
		var orderby = "";
		var top = null;
		var skip = null;
		var data = null;
		var succHandler = obj.success;
		var errHandler = obj.error;
		if(!(obj.entity)) {
			jQuery.sap.log.error("Entity or Context is missing for getDataByEntity call");
			throw Error("Entity or Context is missing for getDataByEntity call");
		}
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Data - " + obj.entity);
		entity = obj.entity;
		entity = (entity.indexOf("/") == 0) ? entity : ("/" + entity);
		if(obj.select) {
			if(typeof(obj.select) == "string") {
				select = obj.select;
			}
			else {
				select = obj.select;
			}
		}
		if(obj.expand) {
			if(obj.expand instanceof Array) {
				for(var i=0,l=obj.expand.length; i<l; i++) {
					expand += (expand) ? "," : "";
					expand += obj.expand[i];
				}
				expandArr = obj.expand;
			}
			else if(typeof(obj.expand) == "string") {
				expand = obj.expand;
				expandArr = obj.expand.split(",");
			}
		}
		if(obj.filter) {
			if(typeof(obj.filter) == "string") {
				filter = obj.filter;
			}
			else {
				filter = obj.filter;
			}
		}
		if(obj.orderby) {
			if(typeof(obj.orderby) == "string") {
				orderby = obj.orderby;
			}
			else {
				orderby = obj.orderby;
			}
		}
		obj.async = (obj.async) ? true : false;
		if(entity.indexOf("$select") == -1) {
			if(select) {
				entity += (entity.indexOf("?") == -1) ? ("?$select=" + select) : ("&$select=" + select); 
			}
		}
		if(entity.indexOf("$expand") == -1) {
			if(expand) {
				entity += (entity.indexOf("?") == -1) ? ("?$expand=" + expand) : ("&$expand=" + expand); 
			}
		}
		if(entity.indexOf("$filter") == -1) {
			if(filter) {
				entity += (entity.indexOf("?") == -1) ? ("?$filter=" + filter) : ("&$filter=" + filter); 
			}
		}
		if(entity.indexOf("$orderby") == -1) {
			if(orderby) {
				entity += (entity.indexOf("?") == -1) ? ("?$orderby=" + orderby) : ("&$orderby=" + orderby); 
			}
		}
		if(entity.indexOf("$top") == -1) {
			if(Number(top)) {
				entity += (entity.indexOf("?") == -1) ? ("?$top=" + Number(top)) : ("&$top=" + Number(top)); 
			}
		}
		if(entity.indexOf("$skip") == -1) {
			if(Number(skip)) {
				entity += (entity.indexOf("?") == -1) ? ("?$skip=" + Number(skip)) : ("&$skip=" + Number(skip)); 
			}
		}

		var success = function(d,s,x) {
			data = (d && d.results) ? d.results : d;
			if(succHandler) {
				succHandler(data);
			}
		}
		var error = function(d,s,x) {
			jQuery.sap.log.error(d);
			jQuery.sap.log.error(s);
			jQuery.sap.log.error(x);
			if(errHandler) {
				data = {d:d,s:s,x:x};
				errHandler(d,s,x);
			}
		}

		model.read(entity, null, null, obj.async, success, error);
		return data;
	};

	this.getDataByBatch = function() {
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Batch Data");
	};

	this.populateRelevantEntitySet = function(dialog, modelData, controller) {
		jQuery.sap.log.info("Abap Adapter --> Calling for Relevant Entity Sets");
		/*
		 * Implement the abap service to fetch the relevant entity set given the cds view and odata uri
		 */
	};

	this.getAllViews = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling for All Views");
		/*
		 * Implement the abap service to fetch all the CDS views in the system
		 */
	};

	this.getPlatform = function() {
		jQuery.sap.log.info("Abap Adapter --> Fetching Platform");
		that.cache.platform = that.cache.platform || "abap";
		jQuery.sap.log.info("Abap Adapter --> Platform - " + that.cache.platform);
		return that.cache.platform;
	};
	
	function _getContextPath(entity, keys, oContext, ignoreContext) {
		entity=entity.replace(/\/$/g,"");
		var context=(_ENTITYSETMAP[entity]||entity);
		//var context=(_ENTITYSETMAP[entity]||entity)+"/";
		if (!ignoreContext) {
			try {
				var allKeys = (_ENTITYKEYS[entity] && _ENTITYKEYS[entity].length) ? _ENTITYKEYS[entity] : Object.keys(keys);
			} catch (e) {
				var allKeys = keys instanceof Object?Object.keys(keys):[];
			}
			if (allKeys.length) {
				context += "(";
				for (var i = 0,encloser; i < allKeys.length; i++) {
					var curKey = allKeys[i];
					encloser=_DATATYPE[curKey]=="int"?"":"'";//values to be enclosed by single quote(') in case of string,and by nothing in case of integer
					var contextValue = (keys[curKey] == undefined) ? oContext[curKey] : keys[curKey];
					context += allKeys[i] + "="+encloser+ contextValue + encloser+",";
				}
				context = context.replace(/,$/g, "") + ")";
			}
		}
		return context;
	}

	function _addBatchChangeOperations(oDataModel, entity, payload, keys, method, fnS, fnE) {
		var that = this, contextPath, aRequests = [];
		if (!(payload instanceof Array)) {
			payload = [payload];
		}
		for (var i = 0; i < payload.length; i++) {
			if (Object.keys(payload[i]).length == 0)
				continue;
			for (var each in keys) {
				payload[i][each] = keys[each];
			}
			contextPath = _getContextPath(entity, keys, payload[i], method == "POST");
			if (method == "DELETE") {
				aRequests.push(oDataModel.createBatchOperation(contextPath, method));
			} else {
				aRequests.push(oDataModel.createBatchOperation(contextPath, method, payload[i]));
			}
		}
		if (aRequests.length) {
			oDataModel.addBatchChangeOperations(aRequests);
		} else {
			fnS();
		}
	}
	function _serviceRequest(getRequest, onError,fnS,fnE) {
		var requestPool = getRequest()
		if (requestPool && requestPool.length) {
			var that = this;
			var serviceUri=getDesigntimeServiceUrl();
			var oDataModel=sap.suite.ui.smartbusiness.lib.Util.odata?sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri):new sap.ui.model.odata.ODataModel(serviceUri, true);
			for (var i = 0, request; i < requestPool.length && ((request = requestPool[i])); i++) {
				_addBatchChangeOperations(oDataModel, request.entity, request.payload, request.keys, request.method,fnS,fnE);
			}

			oDataModel.submitBatch(function(data, response) {
				_serviceRequest(getRequest, onError,fnS,fnE);
			}, onError, true);
		}
	}
	function _registerRequests(aPayload, entity) {
		var remove = [], update = [], defaultMethod = "POST", tmp = aPayload;
		var aReturn = [];
		if (!(tmp instanceof Array)) {
			tmp = [tmp];
		}
		for (var i = 0, cur; i < tmp.length; i++) {
			var cur = tmp[i].payload || tmp[i];
			var curKeys = tmp[i].keys || null;
			for (var each in cur) {
				var curItem = cur[each] || {};
				if (curItem.remove) {
					remove.push({
						keys: curKeys,
						payload: curItem.remove,
						method: "DELETE",
						entity: each
					});
				}
				if (curItem.update) {
					update.push({
						keys: curKeys,
						payload: curItem.update,
						method: "PUT",
						entity: each
					});
				}
				if (curItem.create) {
					update.push({
						keys: curKeys,
						payload: curItem.create,
						method: "POST",
						entity: each
					});
				}
				if (!(curItem.remove || curItem.create || curItem.update)) {
					update.push({
						keys: curKeys,
						payload: curItem,
						method: defaultMethod,
						entity: each
					});
				}

			}
		}
		if (remove.length)
			aReturn.push(remove);
		if (update.length)
			aReturn.push(update);
		return aReturn;

	}
	function _registerDeleteRequests(aPayload, entity) {
		var remove = [], tmp = aPayload;
		var defaultMethod = "DELETE";
		if (!(aPayload instanceof Array)) {
			tmp = aPayload.payload || aPayload;
			tmp = [tmp];
		}
		for (var i = 0, cur; i < tmp.length; i++) {
			cur = tmp[i];
			remove.push({
				keys: cur,
				payload: cur,
				method: defaultMethod,
				entity: entity
			})
		}
		return remove.length ? [remove] : [];
	}
	function _save(action, data, fnS, fnE, entity) {
		var requestQueue = [], i = 0;
		function onError() {
			delete requestQueue;
			fnE();
		}
		function getNextRequest() {
			var request = requestQueue[i++];
			if (!request) {
				fnS();
			}
			return request;
		}
		if (action == 'remove') {
			requestQueue = _registerDeleteRequests(data, entity);
		} else {
			requestQueue = _registerRequests(data, entity);
		}
		_serviceRequest(getNextRequest, onError,fnS,fnE);
	}
	this.create= function(entity, payload, parameters, fnS, fnE, async, urlParameters) {
		_save("create", payload, fnS, fnE, entity);
	};
	this.update= function(entity, payload, parameters, fnS, fnE, merge, eTag, async, urlParameters) {
		_save("update", payload, fnS, fnE, entity);
	};
	this.remove= function(entity, payload, fnS, fnE, eTag, additionalPayload, async, urlParameters) {
		_save("remove", payload, fnS, fnE, entity);
	};

	this.addSystemToServiceUrl = function(url) {
		jQuery.sap.log.info("Abap Adapter --> Add System to Service Url");
		return url;
	};

	this.getUI2Scope = function() {
		if(!(that.cache.ui2Scope)) {
			jQuery.sap.log.info("Abap Adapter --> Fetching UI2 Scope from URL");
			var scope = "CUST";
			var sysInfo = that.getSystemInfo({async:false, model:getDesigntimeModel()});
			if(sysInfo) {
				scope = "CONF";
				var urlScope = jQuery.sap.getUriParameters().get("scope");
				if(urlScope === "CUST") {
					scope = urlScope;
				}
			}
			else {
				scope = "CUST";
			}
			that.cache.ui2Scope = scope;
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Fetching UI2 Scope from cache");
		}
		jQuery.sap.log.info("Abap Adapter --> Current UI2 Scope - " + that.cache.ui2Scope);
		return that.cache.ui2Scope;
	};
	
	this.getUI2Factory = function() {
		if(!(that.cache.ui2Factory)) {
			var sScope = sScope || this.getUI2Scope();
			jQuery.sap.log.info("Abap Adapter --> Creating UI2 Factory with Scope - " + sScope);
			if(sap.ushell && sap.ushell.Container) {
				that.cache.ui2Factory = sap.ushell.Container.getService("PageBuilding", sScope).getFactory();
			}
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Picking UI2 Factory from cache");
		}
		return that.cache.ui2Factory;
	};
	
	this.getUI2PageBuildingService = function() {
		if(!(that.cache.ui2PageBuildeingService)) {
			if(sap.ushell && sap.ushell.Container) {
				jQuery.sap.log.info("Abap Adapter --> Creating UI2 PageBuildingService");
				var factory = this.getUI2Factory();
				that.cache.ui2PageBuildeingService = factory.getPageBuildingService();
			}
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Picking UI2 PageBuildingService from cache");
		}
		return that.cache.ui2PageBuildeingService;
	};
	
	function _fetchCatalogChipsForEvaluation(eval) {
		var chip = eval.CHIPS;
		var fChips = [];
		var fChip = {};
		var catalogObj = {};
		var getObjByChip = {};
		var chipId = null;
		if(chip && chip.length) {
			for(var i=0,l=chip.length; i<l; i++) {
				// chip bean until the service is fixed
				fChip = {};
				fChip.id = chip[i].ID;
				fChip.isActive = 1; //chip[i].IS_ACTIVE;
				fChip.catalogId = chip[i].CATALOG_ID;
				fChip.evaluationId = chip[i].EVALUATION_ID;
				fChip.tileType = chip[i].TYPE;
				fChip.COUNTER = 1; //|| chip[i].COUNTER;
				getObjByChip[fChip.id] = fChip;
				catalogObj[chip[i].CATALOG_ID] = catalogObj[chip[i].CATALOG_ID] || {};
				catalogObj[chip[i].CATALOG_ID][chip[i].ID] = catalogObj[chip[i].CATALOG_ID][chip[i].ID] || false; 
			}
		}
		that.chipObj.getObjByChip = getObjByChip;
		that.chipObj.catalogObj = catalogObj;
		return catalogObj;
	};
	
	function _fetchChipsFromUI2(succ, err) {
		var catalogs = that.chipObj.catalogObj;
		var oDeferred = jQuery.Deferred();
		if(!(sap.ushell && sap.ushell.Container)) {
			jQuery.sap.require(sap.ushell.Container);
		}
		var oFactory = that.getUI2Factory();
		var oPBService = that.getUI2PageBuildingService(oFactory);
		var catalogCount = 0;
		var errorState = false;
		
		function _pageFetchSucc(page) {
			var chips = [];
			var chip = {};
			var bagObj = {};
			var tilePropertiesArr = [];
			if(!errorState) {
				chips = (page.Chips && page.Chips.results) ? page.Chips.results : [];
				that.chipObj.CATALOGS.push(page);
				for(var i=0,l=chips.length; i<l; i++) {
					if(that.chipObj.getObjByChip[chips[i].catalogPageChipInstanceId]) {
						that.chipObj.catalogObj[page.id][chips[i].catalogPageChipInstanceId] = true;
						chip = that.chipObj.getObjByChip[chips[i].catalogPageChipInstanceId] || {};
						chip.catalogName = page.title;
						chip.title = chips[i].title;
						// fetching chip title and description from bag
						if(chips[i].ChipBags && chips[i].ChipBags.results && chips[i].ChipBags.results.length) {
							bagObj = chips[i].ChipBags.results[0];
							if(bagObj.ChipProperties && bagObj.ChipProperties.results && bagObj.ChipProperties.results.length) {
								tilePropertiesArr = bagObj.ChipProperties.results;
								for(var j=0,m=tilePropertiesArr.length; j<m; j++) {
									if(tilePropertiesArr[j].name == "title") {
										chip.title = tilePropertiesArr[j].value;
									}
									if(tilePropertiesArr[j].name == "description") {
										chip.description = tilePropertiesArr[j].value;
									}
								}
							}
						}
						chip.url = chips[i].url;
						chip.configuration = chips[i].configuration;
						that.chipObj.CHIPS.push(chip);
					}
				}
				var currentCatalogObj = that.chipObj.catalogObj[page.id];
				for(var chipReference in currentCatalogObj) {
					if(!(currentCatalogObj[chipReference])) {
						that.chipObj.affectedTiles = that.chipObj.affectedTiles || [];
						that.chipObj.affectedTiles.push(chipReference);
						var affectedChip = that.chipObj.getObjByChip[chipReference];
						affectedChip.catalogName = "-NA-" + affectedChip.catalogId;
						affectedChip.configuration = JSON.stringify({});
						affectedChip.title = that.chipObj.EVALUATION.INDICATOR_TITLE;
						affectedChip.description = that.chipObj.EVALUATION.TITLE;
						affectedChip.isAffected = true;
						that.chipObj.CHIPS.push(affectedChip);
					}
				}
				if(catalogCount == 0) {
					if(!errorState) {
						succ(that.chipObj);
					}
					
				}
				else {
					catalogCount--;
				}
				//succ(that.chipObj);
			}
		}
		
		function _pageFetchErr(d,s,x) {
			errorState = true;
			if(err) {
				jQuery.sap.log.error("Catalog " + this.Catalog + " does not exist");
				err(d,s,x);
			}
		}
		
//		function readCatalog(currCatalog) {
//			var currentCatalog = currCatalog;
//			function _pageFetchErr(d,s,x) {
//				errorState = true;
//				if(err) {
//					err(d,s,x);
//				}
//			}
//			oPBService.readCatalog(currCatalog,_pageFetchSucc, _pageFetchErr, false, false);
//		}
		
		catalogCount = (catalogs) ? Object.keys(catalogs).length-1: 0;
		for(var catalog in catalogs) {
			//readCatalog(catalog);
			oPBService.readCatalog(catalog,_pageFetchSucc, jQuery.proxy(_pageFetchErr,{Catalog:catalog}), false, false);
		}
		if(!(Object.keys(catalogs).length)) {
			succ(that.chipObj);
		}
		return oDeferred.promise();
	};
	
	this.readChipFromUI2ById = function(catalogId, chipInstanceId, succ, err) {
		var UI2_PAGE = 'X-SAP-UI2-PAGE';
		var chipId = UI2_PAGE + ":" + catalogId + ":" + chipInstanceId;
		var oPBService = this.getUI2PageBuildingService();
		oPBService.readChip(chipId, succ, err);
	};
	
	this.readAllUI2Catalogs = function(succ, err, filter) {
		var oPBService = this.getUI2PageBuildingService();
		oPBService.readCatalogs(succ, err, filter);
	};
	
	function getUI2ChipIdByTileType(type) {
		var chipId = {
				'NT' : 'X-SAP-UI2-CHIP:/SSB/NUMERIC_TILE',
				'CT' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_TILE',
				'TT' : 'X-SAP-UI2-CHIP:/SSB/TREND_TILE',
				'AT' : 'X-SAP-UI2-CHIP:/SSB/DEVIATION_TILE',
				'CM' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_MM_TILE',
				'DT-CT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON',
				'DT-CM' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON_MM',
				'DT-AT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_DEVIATION',
				'DT-TT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_TREND'
		}
		return chipId[type];
	}
	
	this.removeTile = function(payload, controllerRef, succ, err) {
		jQuery.sap.log.info("Abap Adapter --> Calling Chip delete");
		if(!(sap.ushell && sap.ushell.Container)) {
			jQuery.sap.require(sap.ushell.Container);
		}
		
		if(payload.isAffected) {
			removeFromUI2CallBack();
			return;
		}
		
		var oFactory = that.getUI2Factory();
		var oPB = that.getUI2PageBuildingService(oFactory);
		var oPageStub = new sap.ui2.srvc.Page(oFactory,payload.catalogId);
		
		function removeFromUI2CallBack() {
			jQuery.sap.log.info("Abap Adapter --> Chip Instance removed successfully");
			var finalPayload = {ID:payload.id, IS_ACTIVE:payload.isActive};
			that.remove("CHIP", finalPayload, succ, err);
		}
		
		function removeFromUI2ErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while removing the Chip Instance");
			err(d,s,x);
		}
		
		function chipLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Chip Stub loaded successfully");
			oChip = oChipStub;
			oChip.remove(removeFromUI2CallBack, removeFromUI2ErrCallBack);
		}
		
		function chipLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Chip Stub");
			err(d,s,x);
		}
		
		function pageLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Page Stub loaded successfully");
			oPage = oPageStub;
			oChips = oPage.getChipInstances();
			for(var i=0,l=oChips.length; i<l; i++) {
				if(oChips[i].getId() == payload.id) {
					oChipStub = oChips[i];
				}
			}
			oChipStub.remove(removeFromUI2CallBack, removeFromUI2ErrCallBack);
			//oChipStub.load(chipLoadCallBack,chipLoadErrCallBack);
		}
		
		function pageLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Page Stub");
			err(d,s,x);
		}
		
		oPageStub.load(pageLoadCallBack,pageLoadErrCallBack);
		
	};
	
	function _createTile(payload, controllerRef, succ, err) {
		if(!(sap.ushell && sap.ushell.Container)) {
			jQuery.sap.require(sap.ushell.Container);
		}
		var oFactory = that.getUI2Factory();
		var oPB = that.getUI2PageBuildingService(oFactory);
		var chipId = getUI2ChipIdByTileType(payload.tileType);
		payload.id = chipId;
		payload.chipId = chipId;
		//oPB.createPageChipInstanceFromRawData({chipId:chipId, configuration:payload.configuration, pageId:payload.catalogId, title:payload.title, description:payload.description}, publishToUI2CallBack, publishToUI2ErrCallBack);
		var oChipStub = new sap.ui2.srvc.Chip(payload,oFactory);
		var oPageStub = new sap.ui2.srvc.Page(oFactory,payload.catalogId);
		var oChip = null;
		var oPage = null;
		
		function publishToMappingTable(d) {
			var chipPayload = {payload:{CHIP:{ID:payload.ID,IS_ACTIVE:1,EVALUATION_ID:payload.evaluationId,TYPE:payload.tileType,CATALOG_ID:payload.catalogId}}};
			that.create('CHIP', chipPayload, null, succ, err);
		}
		
		function writeToBagCallBack(d) {
			jQuery.sap.log.info("Abap Adapter --> Bag updated successfully for the Chip Instance");
		}
		
		function writeToBagErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while writing into the Bag of the Chip Instance");
			err(d,s,x);
		}
		
		function writeConfigCallBack(d) {
			jQuery.sap.log.info("Abap Adapter --> Configuration updated successfully for the Chip Instance");
			publishToMappingTable(d);
		}
		
		function writeConfigErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while writing Configuration to the Chip Instance");
			err(d,s,x);
		}
		
		function publishToUI2CallBack(d) {
			var UI2_PAGE = 'X-SAP-UI2-PAGE';
			jQuery.sap.log.info("Abap Adapter --> Chip Instance created successfully");
			var oChipInstance = d;
			var instanceId = oChipInstance.getId();
			payload.ID = instanceId;
			payload.configuration = payload.configuration.replace(/___CHIPINSTID______CHIPINSTID___/g, instanceId);
			payload.configuration = payload.configuration.replace(/_____CHIPID__________CHIPID_____/g, UI2_PAGE +":" + payload.catalogId + ":" + instanceId);
			oChipInstance.getApi().writeConfiguration.setParameterValues(payload.configuration, writeConfigCallBack, writeConfigErrCallBack);
			oChipInstance.setTitle(payload.title);
			var tilePropertiesBag = oChipInstance.getBag("sb_tileProperties");
			tilePropertiesBag.setText("title",payload.title);
			tilePropertiesBag.setText("description",payload.description);
			tilePropertiesBag.save(writeToBagCallBack, writeToBagErrCallBack);
		}
		
		function publishToUI2ErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error in creating a Chip Instance in the UI2 Catalog");
			err(d,s,x);
		}
		
		function chipLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Chip Stub loaded successfully");
			oChip = oChipStub;
			oPage.addChipInstance(oChip, publishToUI2CallBack, publishToUI2ErrCallBack);
		}
		
		function chipLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Chip Stub");
			err(d,s,x);
		}
		
		function pageLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Page Stub loaded successfully");
			oPage = oPageStub;
			oChipStub.load(chipLoadCallBack,chipLoadErrCallBack);
		}
		
		function pageLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Page Stub");
			err(d,s,x);
		}
		
		oPageStub.load(pageLoadCallBack,pageLoadErrCallBack);
	};
	
	function _updateTile(payload, controllerRef, succ, err) {
		if(!(sap.ushell && sap.ushell.Container)) {
			jQuery.sap.require(sap.ushell.Container);
		}
		var oFactory = that.getUI2Factory();
		var oPB = that.getUI2PageBuildingService(oFactory);
		
		var chipId = getUI2ChipIdByTileType(payload.tileType);
		//payload.id = chipId;
		//payload.chipId = chipId;
		//oPB.createPageChipInstanceFromRawData({chipId:chipId, configuration:payload.configuration, pageId:payload.catalogId, title:payload.title, description:payload.description}, publishToUI2CallBack, publishToUI2ErrCallBack);
		var oChips = [];
		var oChipStub = new sap.ui2.srvc.Chip(payload,oFactory);
		var oPageStub = new sap.ui2.srvc.Page(oFactory,payload.catalogId);
		var oChip = null;
		var oPage = null;
		
		function publishToMappingTable(d) {
			var chipPayload = {keys:{ID:payload.ID,IS_ACTIVE:1},payload:{CHIP:{update:[{ID:payload.ID,IS_ACTIVE:1,EVALUATION_ID:payload.evaluationId,TYPE:payload.tileType,CATALOG_ID:payload.catalogId}]}}};
			controllerRef.metadataRef.update('CHIP', chipPayload, null, succ, err);
		}
		
		function writeToBagCallBack(d) {
			jQuery.sap.log.info("Abap Adapter --> Bag updated successfully for the Chip Instance");
		}
		
		function writeToBagErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while writing into the Bag of the Chip Instance");
			err(d,s,x);
		}
		
		function writeConfigCallBack(d) {
			jQuery.sap.log.info("Abap Adapter --> Configuration updated successfully for the Chip Instance");
			publishToMappingTable(d);
		}
		
		function writeConfigErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while writing Configuration to the Chip Instance");
			err(d,s,x);
		}
		
		function publishToUI2CallBack(d) {
			jQuery.sap.log.info("Abap Adapter --> Chip Instance created successfully");
			var oChipInstance = d;
			payload.ID = oChipInstance.getId();
			oChipInstance.getApi().writeConfiguration.setParameterValues(payload.configuration, writeConfigCallBack, writeConfigErrCallBack);
			oChipInstance.setTitle(payload.title);
			var tilePropertiesBag = oChipInstance.getBag("sb_tileProperties");
			tilePropertiesBag.setText("title",payload.title);
			tilePropertiesBag.setText("description",payload.description);
			tilePropertiesBag.save(writeToBagCallBack, writeToBagErrCallBack);
		}
		
		function publishToUI2ErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error in creating a Chip Instance in the UI2 Catalog");
			err(d,s,x);
		}
		
		function chipLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Chip Stub loaded successfully");
			oChip = oChipStub;
			publishToUI2CallBack(oChip);
			//oPage.addChipInstance(oChip, publishToUI2CallBack, publishToUI2ErrCallBack);
		}
		
		function chipLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Chip Stub");
			err(d,s,x);
		}
		
		function pageLoadCallBack() {
			jQuery.sap.log.info("Abap Adapter --> Page Stub loaded successfully");
			oPage = oPageStub;
			oChips = oPage.getChipInstances();
			for(var i=0,l=oChips.length; i<l; i++) {
				if(oChips[i].getId() == payload.id) {
					oChipStub = oChips[i];
				}
			}
			oChipStub.load(chipLoadCallBack,chipLoadErrCallBack);
		}
		
		function pageLoadErrCallBack(d,s,x) {
			jQuery.sap.log.error("Abap Adapter --> Error while loading the Page Stub");
			err(d,s,x);
		}
		
		oPageStub.load(pageLoadCallBack,pageLoadErrCallBack);
	};
	
	this.publishChip = function(payload, mode, controllerRef, succ, err) {
		if(mode == "create") {
			jQuery.sap.log.info("Abap Adapter --> Calling Chip create");
			_createTile(payload, controllerRef, succ, err);
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Calling Chip update");
			_updateTile(payload, controllerRef, succ, err);
		}
	};
	
	this.isTokenHandlingEnabledForODataRead = function() {
		return true;
	};

};

}; // end of sap/suite/ui/smartbusiness/adapter/abap/ModelerServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.abap.NavigationAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.abap.NavigationAdapter");
sap.suite.ui.smartbusiness.adapter.abap.NavigationAdapter = function() {
	var _cache={};
	function _getUriForFetchingLinks(so, arr, businessParamMap/*Key value Pair*/){
		var strSemanticObjectLink = "/GetLinksForSemanticObject?semanticObject='"+so+"'";
		var strBusinessParams="";
		if(businessParamMap && Object.keys(businessParamMap).length) {
		    //var strBusinessParams = "";
		    for(var key in businessParamMap) {
		        strBusinessParams += key+"="+businessParamMap[key]+"&";
		    }
		}
		if(arr && arr.length) {
            for(var i=0;i<arr.length;i++){
                strBusinessParams += arr[i]+"=1&";
            }   
		}
        strBusinessParams=encodeURIComponent(strBusinessParams.replace(/&$/g,""));
        strBusinessParams="&businessParams='"+strBusinessParams+"'";
		return strSemanticObjectLink + strBusinessParams;
	};
	this.getLinksBySemanticObject = function(oParam) {
    	var that=this;
    	var serviceUri = null;
    	var batchArray = [];
        var oDataModel = new sap.ui.model.odata.ODataModel("/sap/opu/odata/UI2/INTEROP",true);
        oParam.businessParam=oParam.businessParam||{};
        oParam.businessParam["formFactor"]=sap.ui2.srvc.getFormFactor();
        for(var i=0,l=oParam.semanticObject.length;i<l;i++){
            serviceUri = _getUriForFetchingLinks(oParam.semanticObject[i],oParam.dimensions, oParam.businessParam);
            request = oDataModel.createBatchOperation(serviceUri,"GET");
            batchArray.push(request);
        }
        oDataModel.addBatchReadOperations(batchArray);
      
        var callReference = oDataModel.submitBatch(function(data) {
        	var dataResponse = [];
        	for(var i=0;i<data.__batchResponses.length;i++){
        		if(data.__batchResponses[i].data && data.__batchResponses[i].data.results && data.__batchResponses[i].data.results.length){
        			dataResponse = dataResponse.concat(data.__batchResponses[i].data.results);
        		}
        	}
        	oParam.success.call(oParam.context || null, dataResponse);
        }, function() {
            jQuery.sap.log.error("Error fetching getLinksBySemanticObject : "+oParam.semanticObject);
            oParam.success.call(oParam.context || null, []);
        });
        return callReference ;
	};
	
	
	//Version 1
	
	
	/*this.getLinksByContext = function(oParam) {
	    var aODataCallReference = [];
	    if(oParam.viewId && _cache[oParam.viewId]) {
			oParam.success.call(oParam.context || null,_cache[oParam.viewId]);
		} else {	
    		var soArray=[oParam.semanticObject],links=[];
    		oParam.dimensions=oParam.dimensions||[];
    		soArray=soArray.concat(oParam.dimensions);
    		var semaphore=soArray.length;
    		if(semaphore){
    			for(var i=0;i<soArray.length;i++){
    				var callReference = this.getLinksBySemanticObject({
    				    async : true,
    				    semanticObject : soArray[i],
    				    dimensions : oParam.dimensions,
    				    success : function(data) {
        					links = links.concat(data);
        					if(--semaphore == 0){
        						_cache[oParam.viewId]=links;
        						oParam.success.call(oParam.context || null, links);
        					}
    				    },error:function() {
    				        if(--semaphore == 0){
    						_cache[oParam.viewId] = links;
    						oParam.success.call(oParam.context || null, links);
    				        }
    				    }
    				});
    				aODataCallReference.push(callReference);
    				
    			}
    		}else{
    			oParam.success.call(oParam.context || null,[]);
    		}
		}
	    return aODataCallReference;
	};*/
	
	
	//Version 2
	
/*	this.getLinksByContext = function(oParam) {
		var aODataCallReference = [];
		var that = this;
		if(!_cache[oParam.viewId]) {
			_cache[oParam.viewId] = new jQuery.Deferred(function(deferred) {
				var soArray=[oParam.semanticObject], links=[];
				oParam.dimensions=oParam.dimensions||[];
				soArray=soArray.concat(oParam.dimensions);
				var semaphore = soArray.length;
				if(semaphore) {
					for(var i=0;i<soArray.length;i++){
						var callReference = that.getLinksBySemanticObject({
							async : true,
							semanticObject : soArray[i],
							dimensions : oParam.dimensions,
							success : function(data) {
								links = links.concat(data);
								if(--semaphore == 0){
									deferred.resolve(links);
								}
							},error:function() {
								if(--semaphore == 0) {
									deferred.resolve(links);
								}
							}
						});
						aODataCallReference.push(callReference);
					}
				} else {
					deferred.resolve([]);
				}
			});
		}
		return _cache[oParam.viewId].promise();
	};*/
	

	
	//version 2 with batch request

	this.getLinksByContext = function(oParam) {
		var aODataCallReference = [];
		var that = this;
		if(!_cache[oParam.viewId]) {
			_cache[oParam.viewId] = new jQuery.Deferred(function(deferred) {
				var links=[];
				var soArray=[oParam.semanticObject], links=[];
				oParam.dimensions=oParam.dimensions||[];
				soArray=soArray.concat(oParam.dimensions);
				var callReference = that.getLinksBySemanticObject({
					async : true,
					semanticObject : soArray,
					dimensions : oParam.dimensions,
					success : function(data) {
						links = links.concat(data);
						deferred.resolve(links);
					},error:function() {
						deferred.resolve(links);
					}
				});
				aODataCallReference.push(callReference);
			});
		}
		return _cache[oParam.viewId].promise();
	};
	this.reset =function() {
		_cache = {};
	}
};
}; // end of sap/suite/ui/smartbusiness/adapter/abap/NavigationAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.abap.RuntimeServicesAdapter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.abap.RuntimeServicesAdapter");
sap.suite.ui.smartbusiness.adapter.abap.RuntimeServicesAdapter = function() {
	
	var that = this;
	this.cache = this.cache || {};
		
	function getRuntimeModel() {
		that.cache.runtimeModel = that.cache.runtimeModel || new sap.ui.model.odata.ODataModel(that.getRuntimeServiceUrl(), true);
		return that.cache.runtimeModel; 
	};

	this.getRuntimeServiceUrl = function() {
		jQuery.sap.log.info("Abap Adapter --> Runtime Service URI");
		return "/sap/opu/odata/SSB/SMART_BUSINESS_RUNTIME_SRV";
	};

	function _encodeURL(uRi) {
		return jQuery.sap.encodeURL(uRi);
	};

	this.getKPIById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling KPI Data");
		var that = this;
		if(!(obj.ID) && !(obj.context)) {
			throw new Error("Failed to get Indicator Id for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getRuntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
			}
			else {
				obj.ID = contextPath.split("'")[1].split("'")[0];
			}
		}
		else if(obj.ID) {
			obj.entity = obj.entity || "/INDICATORS";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.ID + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noIndicator)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.INDICATOR = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("INDICATOR");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Indicator details");
		},obj.async);
		return dataBean;
	};

	this.getEvaluationById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Evaluation Data");

		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		if(!(obj.ID) && !(obj.context)) {
			throw new Error("Failed to get Evaluation Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getRuntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
			}
		}
		else if(obj.ID) {
			obj.entity = obj.entity || "/EVALUATIONS";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.ID + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noEvaluation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.EVALUATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("EVALUATION");
			}
		}
		if(obj.indicator) {
			batchRequests.push(model.createBatchOperation(contextPath+"/INDICATOR_PROPERTIES","GET"));
			referenceObject.push("INDICATOR_PROPERTIES");
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.filters) {
			batchRequests.push(model.createBatchOperation(contextPath+"/FILTERS","GET"));
			referenceObject.push("FILTERS");
		}
		if(obj.values) {
			batchRequests.push(model.createBatchOperation(contextPath+"/VALUES","GET"));
			referenceObject.push("VALUES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Evaluation details");
		},obj.async);

		return dataBean;

	};

	this.getUI2Scope = function() {
		if(!(that.cache.ui2Scope)) {
			jQuery.sap.log.info("Abap Adapter --> Fetching UI2 Scope from URL");
			var scope = "PERS";
			that.cache.ui2Scope = scope;
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Fetching UI2 Scope from cache");
		}
		jQuery.sap.log.info("Abap Adapter --> Current UI2 Scope - " + that.cache.ui2Scope);
		return that.cache.ui2Scope;
	};

	this.getUI2Factory = function() {
		if(!(that.cache.ui2Factory)) {
			var sScope = sScope || this.getUI2Scope();
			jQuery.sap.log.info("Abap Adapter --> Creating UI2 Factory with Scope - " + sScope);
			if(sap.ushell && sap.ushell.Container) {
				that.cache.ui2Factory = sap.ushell.Container.getService("PageBuilding", sScope).getFactory();
			}
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Picking UI2 Factory from cache");
		}
		return that.cache.ui2Factory;
	};

	this.getUI2PageBuildingService = function() {
		if(!(that.cache.ui2PageBuildeingService)) {
			if(sap.ushell && sap.ushell.Container) {
				jQuery.sap.log.info("Abap Adapter --> Creating UI2 PageBuildingService");
				var factory = this.getUI2Factory();
				that.cache.ui2PageBuildeingService = factory.getPageBuildingService();
			}
		}
		else {
			jQuery.sap.log.info("Abap Adapter --> Picking UI2 PageBuildingService from cache");
		}
		return that.cache.ui2PageBuildeingService;
	};

	this.getChipById = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Chip Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var evalObj = {};
		var chipObj = {};
		var that = this;
		if(!(obj.id) && !(obj.context)) {
			throw new Error("Failed to get Chip Id for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getRuntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.id = obj.context.getObject().id;
			}
			else {
				obj.id = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
			}
		}
		else if(obj.id) {
			obj.entity = obj.entity || "/Chips";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.id + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		obj.entity =  obj.entity + "('" + obj.id + "')";
		var chipSuccess = obj.success;
		var chipError = obj.error;
		var oPBService = that.getUI2PageBuildingService();
		var chipId = obj.id;
		
		function readChipCallBack(d) {
			if(d.ChipBags && d.ChipBags.results && d.ChipBags.results.length) {
				var bagObj = d.ChipBags.results[0];
				if(bagObj.ChipProperties && bagObj.ChipProperties.results && bagObj.ChipProperties.results.length) {
					tilePropertiesArr = bagObj.ChipProperties.results;
					for(var j=0,m=tilePropertiesArr.length; j<m; j++) {
						if(tilePropertiesArr[j].name == "title") {
							d.title = tilePropertiesArr[j].value;
						}
						if(tilePropertiesArr[j].name == "description") {
							d.description = tilePropertiesArr[j].value;
						}
					}
				}
			}
			chipSuccess(d);
		}
		
		function readChipErrCallBack(d,s,x) {
			chipError(d,s,x);
		} 
		
		oPBService.readChip(chipId, readChipCallBack, readChipErrCallBack);
		obj.async = false;
		return dataBean;
	};

	function getUI2ChipIdByTileType(type) {
		var chipId = {
				'NT' : 'X-SAP-UI2-CHIP:/SSB/NUMERIC_TILE',
				'CT' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_TILE',
				'TT' : 'X-SAP-UI2-CHIP:/SSB/TREND_TILE',
				'AT' : 'X-SAP-UI2-CHIP:/SSB/DEVIATION_TILE',
				'CM' : 'X-SAP-UI2-CHIP:/SSB/COMPARISON_MM_TILE',
				'DT-CT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON',
				'DT-CM' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_COMPARISON_MM',
				'DT-AT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_DEVIATION',
				'DT-TT' : 'X-SAP-UI2-CHIP:/SSB/DUAL_NUMERIC_TREND'
		}
		return chipId[type];
	}

	this.getDataByEntity = function(obj) {
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Data");
		/*
		 * Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		var url = obj.uri;
		var model = obj.model || (url ? new sap.ui.model.odata.ODataModel(url,true) : getRuntimeModel());
		var expand = "";
		var expandArr = [];
		var filter = "";
		var select = "";
		var orderby = "";
		var top = null;
		var skip = null;
		var data = null;
		var succHandler = obj.success;
		var errHandler = obj.error;
		if(!(obj.entity)) {
			jQuery.sap.log.error("Entity or Context is missing for getDataByEntity call");
			throw Error("Entity or Context is missing for getDataByEntity call");
		}
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Data - " + obj.entity);
		entity = obj.entity;
		entity = (entity.indexOf("/") == 0) ? entity : ("/" + entity);
		if(obj.select) {
			if(typeof(obj.select) == "string") {
				select = obj.select;
			}
			else {
				select = obj.select;
			}
		}
		if(obj.expand) {
			if(obj.expand instanceof Array) {
				for(var i=0,l=obj.expand.length; i<l; i++) {
					expand += (expand) ? "," : "";
					expand += obj.expand[i];
				}
				expandArr = obj.expand;
			}
			else if(typeof(obj.expand) == "string") {
				expand = obj.expand;
				expandArr = obj.expand.split(",");
			}
		}
		if(obj.filter) {
			if(typeof(obj.filter) == "string") {
				filter = obj.filter;
			}
			else {
				filter = obj.filter;
			}
		}
		if(obj.orderby) {
			if(typeof(obj.orderby) == "string") {
				orderby = obj.orderby;
			}
			else {
				orderby = obj.orderby;
			}
		}
		obj.async = (obj.async) ? true : false;
		if(entity.indexOf("$select") == -1) {
			if(select) {
				entity += (entity.indexOf("?") == -1) ? ("?$select=" + select) : ("&$select=" + select); 
			}
		}
		if(entity.indexOf("$expand") == -1) {
			if(expand) {
				entity += (entity.indexOf("?") == -1) ? ("?$expand=" + expand) : ("&$expand=" + expand); 
			}
		}
		if(entity.indexOf("$filter") == -1) {
			if(filter) {
				entity += (entity.indexOf("?") == -1) ? ("?$filter=" + filter) : ("&$filter=" + filter); 
			}
		}
		if(entity.indexOf("$orderby") == -1) {
			if(orderby) {
				entity += (entity.indexOf("?") == -1) ? ("?$orderby=" + orderby) : ("&$orderby=" + orderby); 
			}
		}
		if(entity.indexOf("$top") == -1) {
			if(Number(top)) {
				entity += (entity.indexOf("?") == -1) ? ("?$top=" + Number(top)) : ("&$top=" + Number(top)); 
			}
		}
		if(entity.indexOf("$skip") == -1) {
			if(Number(skip)) {
				entity += (entity.indexOf("?") == -1) ? ("?$skip=" + Number(skip)) : ("&$skip=" + Number(skip)); 
			}
		}

		var success = function(d,s,x) {
			data = (d && d.results) ? d.results : d;
			if(succHandler) {
				succHandler(data);
			}
		}
		var error = function(d,s,x) {
			jQuery.sap.log.error(d);
			jQuery.sap.log.error(s);
			jQuery.sap.log.error(x);
			if(errHandler) {
				data = {d:d,s:s,x:x};
				errHandler(d,s,x);
			}
		}

		model.read(entity, null, null, obj.async, success, error);
		return data;
	};

	this.getDataByBatch = function() {
		jQuery.sap.log.info("Abap Adapter --> Calling Entity Batch Data");
	};

	this.getPlatform = function() {
		jQuery.sap.log.info("Abap Adapter --> Fetching Platform");
		that.cache.platform = that.cache.platform || "abap";
		jQuery.sap.log.info("Abap Adapter --> Platform - " + that.cache.platform);
		return that.cache.platform;
	};

	this.addSystemToServiceUrl = function(url) {
		jQuery.sap.log.info("Abap Adapter --> Add System to Service Url");
		return url;
	};
	
	this.isTokenHandlingEnabledForODataRead = function() {
		return true;
	};

};

}; // end of sap/suite/ui/smartbusiness/adapter/abap/RuntimeServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.hana.CatalogServicesAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.hana.CatalogServicesAdapter");
sap.suite.ui.smartbusiness.adapter.hana.CatalogServicesAdapter = function() {
    var getEvaluationValues = function(evaluation, oEvaluationValues) {
        if(oEvaluationValues) {
            return oEvaluationValues.evaluationValues;
        } else {
            var values = [];
            evaluation.VALUES["results"].forEach(function(jsonObject) {
                delete jsonObject.__metadata;
                var obj = {};
                for(var prop in jsonObject) {
                    if(jsonObject.hasOwnProperty(prop)) {
                        obj[prop] = jsonObject[prop];
                    }
                }
                values.push(obj);
            });
            return values;
        }
    };
    var _getAdditionFilters = function(filters) {
        var finalArray=  [];
        if(filters && filters.length) {
            filters.forEach(function(eachArray) {
                var object = {};
                object["NAME"] = eachArray[0];
                object["OPERATOR"] = eachArray[1];
                object["VALUE_1"] = eachArray[2];
                object["VALUE_2"] = eachArray[3];
                object["TYPE"] = "FI";
                finalArray.push(object);
            });
        }
        return finalArray;
    };
    var _appendSystemAlias = function(uri, sysAlias) {
    	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
    		var urlParsingService = sap.ushell.Container.getService("URLParsing");
    		if(urlParsingService) {
    			uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
    		}
    	}
    	return uri;
    };
    var publishTileODataWrite = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        var ODataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
        ODataModel.create("/CHIPS_USER", payload, null, function() {
            sCallback.call();
        }, function(err) {
            fCallback.call(null,err);
        }, false);
    };
    var publishTileXsjsService = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/logic/__token.xsjs";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
    	jQuery.ajax({
    		url : serviceUri,
    		type : "HEAD",
    		async : false,
    		headers : {
    			"X-CSRF-Token" : "Fetch"
    		},
    		success : function(data, status, xhr) {
    	    	serviceUri = "/sap/hba/r/sb/core/logic/addToCatalog.xsjs";
    	    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        		var token = xhr.getResponseHeader("x-csrf-token");
        		jQuery.ajax({
        			url : serviceUri,
        			type : "POST",
        			async : false,
        			data : encodeURIComponent(JSON.stringify(payload)),
        			dataType : "json",
        			headers : {
        				"x-csrf-token" : token
        			},
        			success : function(data) {
        				sCallback.call(null, data);
        			},
        			error : function(err) {
        				fCallback.call(null, err);
        			}
        		});
    		},
    		error : function(err) {
    			fCallback.call(null, err);
    		}
    	});
    };
	this.savePersonalizedTile = function(oParam) {
        var response = {}, oRuntimeService, oStartupParameters, sChipId, oChip;
        /**
         * oParam {
         *         title : '',
         *         description:''
         *         evaluationId : '',//Mandatory
         *         tileType : '' , //Mandatory - PossibleValues : NT, TT, CT, AT
         *         semanticObject : '',
         *         semanticAction : '',
         *         additionalFilters : [
         *              ["COUNTRY","EQ","INDIA",""],
         *              ["TIME","BT","10:20","11:20"]
         *          ],
         *          additionalAppParameters : {
         *              StoryId : '',
         *              
         *          },
         *          evaluationValues : [
         *              //for Maximizing Kpi
         *              {"TYPE" : "TA", FIXED : 2000},
         *              {"TYPE" : "CL", FIXED : 3000},
         *              {"TYPE" : "WL", FIXED : 2500}
         *              //For MINiMIZING KPI
         *              {"TYPE" : "TA", FIXED : 2000},
         *              {"TYPE" : "CH", FIXED : 3000},
         *              {"TYPE" : "WH", FIXED : 2500}

         *              //for Target Kpi
         *              {"TYPE" : "CL", FIXED : 3000},
         *              {"TYPE" : "WL", FIXED : 2500}
         *              {"TYPE" : "TA", FIXED : 2000},
         *              {"TYPE" : "CH", FIXED : 3000},
         *              {"TYPE" : "WH", FIXED : 2500}
         *              
         *          ] 
         * }
         */
        if(oParam.evaluationId && oParam.tileType) {
            var evaluationData = sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
                id  : oParam.evaluationId,
                cache : true,
                filters : true,
                thresholds : true,
                useRuntimeService : true,
                sapSystem : oParam.sapSystem
            });
            if(evaluationData && evaluationData.ID) {
                var TIMESTAMP = Date.now()+"";
                var MASTER_OBJECT = {};
                //MASTER_OBJECT["id"] = CHIP_ID;
                try {
                	oRuntimeService = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices");
                	oStartupParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
                	sChipId = oStartupParameters["chipId"][0];
                	oChip = oRuntimeService.getChipById({
                		id : sChipId,
                		isActive : 1
                	});
                	oChip = oChip.CHIP;
                } catch(e) {
                	return  {
                		status : "Failed",
                		message : e.message
                	};
                }
                MASTER_OBJECT["tileType"] = oChip.tileType;
                MASTER_OBJECT["url"] = oChip.url;
                MASTER_OBJECT["description"] = oParam.title || evaluationData.TITLE;
                MASTER_OBJECT["title"] = evaluationData.INDICATOR_TITLE;
                MASTER_OBJECT["catalogId"] = "HANA_CATALOG";
                MASTER_OBJECT["configuration"] = { 
                };
                MASTER_OBJECT["evaluationId"] = oChip.evaluationId
                MASTER_OBJECT["keywords"] = oChip.keywords;
                
                oChipConfiguration = JSON.parse(oChip.configuration);
                oChipConfiguration.isSufficient = "1";
                oChipConfiguration.timestamp = TIMESTAMP;
                
                oChipTileConfiguration = JSON.parse(oChipConfiguration.tileConfiguration);
                
                var tileProperties = JSON.parse(oChipTileConfiguration.TILE_PROPERTIES);
                tileProperties.id = "_____CHIPID__________CHIPID_____";
                oChipTileConfiguration.TILE_PROPERTIES = JSON.stringify(tileProperties);
                
                oChipTileConfiguration.ADDITIONAL_FILTERS = JSON.stringify(_getAdditionFilters(oParam.additionalFilters));
                var EVALUATION_VALUES = getEvaluationValues(evaluationData, oParam.evaluationValues);
                oChipTileConfiguration.EVALUATION_VALUES = JSON.stringify(EVALUATION_VALUES);
                
                MASTER_OBJECT.configuration = {
                	tileConfiguration : JSON.stringify(oChipTileConfiguration)	
                };
                var masterConfiguration = JSON.stringify(MASTER_OBJECT.configuration);
                if(masterConfiguration.length > 4096) {
                	oChipTileConfiguration.EVALUATION_FILTERS = JSON.stringify([]);
                	MASTER_OBJECT.configuration.isSufficient = "0";
                    MASTER_OBJECT.configuration = {
                    	tileConfiguration : JSON.stringify(oChipTileConfiguration)	
                    };
                    masterConfiguration = JSON.stringify(MASTER_OBJECT.configuration);
                    if(masterConfiguration.length > 4096) {
                    	oChipTileConfiguration.EVALUATION_VALUES = JSON.stringify([]);
                    }
                }
                MASTER_OBJECT.configuration = masterConfiguration;
                /*
                var TILE_PROPERTIES  =  getTileProperties(evaluationData, oParam.tileType, oParam.semanticObject, oParam.semanticAction);
                TILE_PROPERTIES["id"] = CHIP_ID;
                TILE_PROPERTIES["dimension"] = oParam.dimension;
                var EVALUATION_FILTERS = JSON.stringify(getEvaluationFilters(evaluationData));
                var EVALUATION_VALUES = getEvaluationValues(evaluationData, oParam.evaluationValues);
                var EVALUATION = JSON.stringify(getEvaluationDetails(evaluationData));
                MASTER_OBJECT.configuration.tileConfiguration["TILE_PROPERTIES"] = JSON.stringify(TILE_PROPERTIES);
                MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_VALUES"] = JSON.stringify(EVALUATION_VALUES);
                MASTER_OBJECT.configuration.tileConfiguration["EVALUATION"] = EVALUATION;
                MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_FILTERS"] = JSON.stringify(_getAdditionFilters(oParam.additionalFilters));
                MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_APP_PARAMETERS"] = JSON.stringify(oParam.additionalAppParameters || {});
                MASTER_OBJECT.configuration.tileConfiguration["timestamp"] = TIMESTAMP;
                MASTER_OBJECT.configuration["isSufficient"] = "0";
                MASTER_OBJECT["evaluationId"] = evaluationData.ID;
                MASTER_OBJECT["keywords"] = oParam.keywords || null;
                var configurationLength = JSON.stringify(MASTER_OBJECT.configuration).length;
                if(configurationLength > 4096) {
                    MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_FILTERS"] = JSON.stringify([]);
                    MASTER_OBJECT.configuration["isSufficient"] = "0";
                }
                MASTER_OBJECT["configuration"].tileConfiguration = JSON.stringify(MASTER_OBJECT["configuration"].tileConfiguration);
                MASTER_OBJECT["configuration"] = JSON.stringify(MASTER_OBJECT["configuration"]);
                */
                publishTileXsjsService(MASTER_OBJECT, oParam.sapSystem, function(responseObject) {
                    response.status = "Success",
                    response.chipId = responseObject.chipId,
                    response.message="Tile Created Successfully";
                }, function(errorObject) {
                    response.status="Failed",
                    response.message="Error Creating Tile";
                    response.errorDescription = errorObject;
                });
            } else {
                response.status="Failed",
                response.message="Invalid Evaluation Id : "+oParam.evaluationId;
            }
        } else {
            response.status="Failed",
            response.message="Mandatory Param evaluationId or TileType is Missing";
        }
        if(response.status == 'Success') {
        	oParam.success(response);
        } else {
        	oParam.error(response);
        }
        return response;
	};
};

}; // end of sap/suite/ui/smartbusiness/adapter/hana/CatalogServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.hana.DrilldownServicesAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.hana.DrilldownServicesAdapter");
sap.suite = sap.suite || {};
sap.suite.ui=sap.suite.ui||{};
/**
 * SAP Smart Business Analytical Library. Namespace contains Platform adapters, Drill Down objects, design time service objects,
 * Chip and Tile components, Modeler Application Components
 */
sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
sap.suite.ui.smartbusiness.adapter = sap.suite.ui.smartbusiness.adapter || {};
sap.suite.ui.smartbusiness.adapter.hana=sap.suite.ui.smartbusiness.adapter.hana||{};
sap.suite.ui.smartbusiness.adapter.hana.DrilldownServicesAdapter={
		fetchXSRFToken:function(fnS,fnE){
			jQuery.ajax({
      		  type: "HEAD",
      		  async: false,
      		  dataType: "json",
      		  url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters("/sap/hba/r/sb/core/logic/__token.xsjs"),
      		  headers: {"X-CSRF-Token": "Fetch"},
      		  success: function(d, s, x) {
      			  if(fnS)fnS(d,s,x);
      		  },
      		  error: function() {
      			  if(fnE)fnE(d,s,x);
      		  }
      	  });
		},
		constants:{
			"write":{fn:"getWritePayload"},
			"delete":{fn:"getDeletePayload"},
			"update":{fn:"getUpdatePayload"},
			"viewServiceUrl":"/sap/hba/r/sb/core/logic/ddaViewConfiguration_cud.xsjs",
			"evalServiceUrl":"/sap/hba/r/sb/core/logic/ddaEvaluation_cud.xsjs"
		},
        doUpdate:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"PUT",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doWrite:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"POST",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doDelete:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"DELETE",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                   }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
            
        },
        doServiceCall:function(oConfig){
            var that=this;
            if(oConfig.type=="POST"){
                  this.doWrite(oConfig);
            }else if(oConfig.type=="PUT"){
                  this.doUpdate(oConfig);
            }else if(oConfig.type="DELETE"){
                  this.doDelete(oConfig);
            }
        },

        saveEvalConfiguration:function(evalId,data,action,fnS,fnE){
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data),
                         url:this.constants.evalServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
        saveViewConfiguration:function(evalId,data,action,fnS,fnE){
            action=data.ID_EDITABLE?"write":action;
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data,true),
                         url:this.constants.viewServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
		getUpdatePayload:function(evalId,data,isView){
			return {
				payload:this.getWritePayload(evalId,data,isView),
				keys:this.getDeletePayload(evalId,data,isView)
			};
		},
		getWritePayload:function(evalId,data,isView){
			var configId=data.SELECTED_VIEW,oReturn;
			if(isView){
				oReturn={
						DDA_COLUMNS:this.getColumnsPayload(data,evalId,configId),
						DDA_CHART:this.getChartPayload(data,evalId,configId),
						DDA_MASTER_TEXT:this.getViewTextPayload(data,evalId,configId)
				};
				if(data.ID_EDITABLE){
					oReturn.DDA_MASTER=this.getNewViewPayload(data.ALL_VIEWS,evalId,configId);
				}
			}else{
				oReturn={
						DDA_FILTERS:this.getFilterPayload(data.CURRENT_FILTERS,evalId,configId),
						DDA_HEADER:this.getHeaderPayload(data.HEADERS_VISIBLE,evalId,configId),
						DDA_CONFIGURATION:this.getConfigurationPayload(data,evalId,configId)						
				};
				var viewOrderPayload=this.getViewOrderPayload(data.ALL_VIEWS,evalId,configId);
				if(viewOrderPayload.length){
					oReturn.DDA_MASTER=viewOrderPayload;
				}
			}
			return oReturn;
		},
		getDeletePayload:function(evalId,data,isView){
			return {"EVALUATION_ID":evalId,"CONFIGURATION_ID":data.ID};
		},
		getViewTextPayload:function(data,evalId,configId){
			var viewTexts=[];
			var curL=data.CURRENT_LANGUAGE,viewText=data.TITLE;
			data=data.ADDITIONAL_LANGUAGE_TITLES||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SAP_LANGUAGE_KEY==curL)
					continue;
				viewTexts.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
     				"SAP_LANGUAGE_KEY": data[i].SAP_LANGUAGE_KEY,
     				"TEXT": data[i].TEXT,
					"IS_ACTIVE":1
				});
			}
			viewTexts.push({
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
 				"SAP_LANGUAGE_KEY": curL,
 				"TEXT": viewText,
				"IS_ACTIVE":1
			});
			return viewTexts;
		},
		getChartPayload:function(data,evalId,configId){
			return [{
				"EVALUATION_ID":evalId,
				"CONFIGURATION_ID":configId,
				"VALUE_TYPE":data.VALUE_TYPE,
				"AXIS_TYPE":data.AXIS_TYPE,
				"CHART_TYPE":data.CHART_TYPE,	
				"DATA_LIMIT":data.DATA_LIMITATIONS?data.DATA_LIMIT:-1,		
				"COLOR_SCHEME":data.COLOR_SCHEME,
				"IS_ACTIVE":1,
				"THRESHOLD_MEASURE":data.THRESHOLD_MEASURE
			}];
		},
		getColumnsPayload:function(data,evalId,configId){
			var columns=[];
			var colorScheme=data.COLOR_SCHEME;
			data=data.items||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SELECTED)
				columns.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"NAME":data[i].NAME,	
					"TYPE":data[i].TYPE.toUpperCase(),
					"SORT_BY":data[i].SORT_BY,
					"VISIBILITY":data[i].VISIBILITY,
					"COLOR":(colorScheme=="MANUAL_NON_SEMANTIC"? data[i].COLOR1:colorScheme=="MANUAL_SEMANTIC"?data[i].COLOR2:"")||"",
					"STACKING":data[i].STACKING,		
					"AXIS":data[i].AXIS,
					"SORT_ORDER":data[i].SORT_ORDER,	
					"COLUMNS_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return columns;
		},
		getFilterPayload:function(data,evalId,configId){
			var filters=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				filters.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"DIMENSION":data[i],	
					"VISIBILITY":1,
					"IS_ACTIVE":1
				});
			}
			return filters;
		},
		_getHeaderConfiguration:function(header){
			var data;
			switch (header.VISUALIZATION_TYPE) {
			    case "CM":
			        data = [{
			            name: header.MEASURE1,
			            color: header.COLOR1
			        }, {
			            name: header.MEASURE2,
			            color: header.COLOR2
			        }];
			        (header.MEASURE3 && header.MEASURE3!="_none^") ? data.push({

			            name: header.MEASURE3,
			            color: header.COLOR3
			        }) : "";
			        data = JSON.stringify({MEASURES: JSON.stringify(data)});
			        break;
			    case "CT":
			        data = {
			            order: header.SORT_ORDER[1] == "D" ? "desc" : "asc",
			            by: header.SORT_ORDER[0],
			            dimension_color: header.DIMENSION_COLOR
			        };
			        data = JSON.stringify({SORTING: JSON.stringify(data)});			        
			        break;
			    case "HT":
			    	data = {
			    		IS_HARVEY_FRACTION_KPIMEASURE : header.IS_HARVEY_FRACTION_KPIMEASURE
			    	};
		    		if(header.IS_HARVEY_FRACTION_KPIMEASURE){
		    			data.HARVEY_TOTAL_MEASURE = header.HARVEY_TOTAL_MEASURE;
		    		}else{
		    			data.HARVEY_FILTERS = JSON.stringify(header.HARVEY_FILTERS);
		    		}
	    			data = JSON.stringify(data);
		    		break;			        
			}
			return data;
		},
		getHeaderPayload:function(data,evalId,configId){
			var headers=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				if(data[i])//.visible)
				headers.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
					"VISUALIZATION_TYPE":data[i].VISUALIZATION_TYPE,
					"VISIBILITY":1,
					"REFERENCE_EVALUATION_ID":data[i].REFERENCE_EVALUATION_ID,
					"VISUALIZATION_ORDER":i,
					"DIMENSION":data[i].DIMENSION,
					"IS_ACTIVE":1,
					"CONFIGURATION":this._getHeaderConfiguration(data[i])
				});
			}
			return headers;			
		},
		getConfigurationPayload:function(data,evalId,configId){
			var config={
					"SAP_FILTER":{value:"",visibility:1},
					"SAP_AGGREGATE_VALUE":{value:"",visibility:(data.CONFIG.SAP_AGGREGATE_VALUE?1:0)},
					"SAP_HEADER":{value:"",visibility:1},
					"QUERY_SERVICE_URI":{value:data.QUERY_SERVICE_URI,visibility:1},
					"QUERY_ENTITY_SET":{value:data.QUERY_ENTITY_SET,visibility:1},
			};
			var configs=[];
			for(var each in config){
				configs.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"PROPERTY_TYPE":each,
					"PROPERTY_VALUE":config[each].value,		
					"VISIBILITY":config[each].visibility,
					"IS_ACTIVE":1
				});
			}
			return configs;
		},
		getNewViewPayload:function(data,evalId,configId){
			return [{
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
				"CONFIG_ORDER":(data.length+1),
				"IS_ACTIVE":1
			}];
		},
		getViewOrderPayload:function(data,evalId,configId){
			var configOrder=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				configOrder.push({
					"CONFIGURATION_ID":data[i].ID,
					"EVALUATION_ID":evalId,
					"CONFIG_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return configOrder;	
		}

};
}; // end of sap/suite/ui/smartbusiness/adapter/hana/DrilldownServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.hana.ModelerServicesAdapter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.hana.ModelerServicesAdapter");
sap.suite.ui.smartbusiness.adapter.hana.ModelerServicesAdapter = function() {
	
	var that = this;
	this.cache = this.cache || {};
	function getChipsWithoutHarveyBall(aChips){// to prevent harvey ball from appearing if already configured
		var tmp=[];
		for(var i=0,l=(aChips?aChips.length:0);i<l;i++){
			if(aChips[i].tileType!="HT"){
				tmp.push(aChips[i]);
			}
		}
		return tmp;
	}
	function entityNavigationDictionary(entity) {
		var entityNavDict = {
				"INDICATORS":{
					"indicator": {"entity":"INDICATORS", "type":"INDICATOR"},
					"texts": {"entity":"TEXTS", "type":"INDICATOR_TEXT"},
					"evaluations": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"associations": {"entity":"ASSOCIATIONS", "type":"ASSOCIATION"},
					"association_source": {"entity":"ASSOCIATION_SOURCE", "type":"ASSOCIATION"},
					"association_target": {"entity":"ASSOCIATION_TARGET", "type":"ASSOCIATION"}
				},
				"INDICATORS_MODELER":{
					"indicator": {"entity":"INDICATORS_MODELER", "type":"INDICATOR"},
					"texts": {"entity":"TEXTS", "type":"INDICATOR_TEXT"},
					"evaluations": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"associations": {"entity":"ASSOCIATIONS", "type":"ASSOCIATION"},
					"association_source": {"entity":"ASSOCIATION_SOURCE", "type":"ASSOCIATION"},
					"association_target": {"entity":"ASSOCIATION_TARGET", "type":"ASSOCIATION"}
				},
				"EVALUATIONS":{
					"evaluation": {"entity":"EVALUATIONS", "type":"EVALUATION"},
					"texts": {"entity":"TEXTS", "type":"EVALUATION_TEXT"},
					"chips": {"entity":"CHIPS", "type":"CHIP"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"indicator": {"entity":"INDICATOR_INFO", "type":"INDICATOR"},
					"filters": {"entity":"FILTERS", "type":"FILTER"},
					"values": {"entity":"VALUES", "type":"VALUE"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"},
					"dda_header_tiles": {"entity":"DDA_HEADER_TILES", "type":"DDA_HEADER"}
				},
				"EVALUATIONS_MODELER":{
					"evaluation": {"entity":"EVALUATIONS_MODELER", "type":"EVALUATION"},
					"texts": {"entity":"TEXTS", "type":"EVALUATION_TEXT"},
					"chips": {"entity":"CHIPS", "type":"CHIP"},
					"tags": {"entity":"TAGS", "type":"TAG"},
					"properties": {"entity":"PROPERTIES", "type":"PROPERTY"},
					"indicator": {"entity":"INDICATOR_INFO", "type":"INDICATOR"},
					"filters": {"entity":"FILTERS", "type":"FILTER"},
					"values": {"entity":"VALUES", "type":"VALUE"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"},
					"dda_header_tiles": {"entity":"DDA_HEADER_TILES", "type":"DDA_HEADER"},
					"texts_for_chip": {"entity":"TEXTS_FOR_CHIP", "type":"EVALUATION_TEXT"}
				},
				"CHIPS":{
					"texts": {"entity":"TEXTS", "type":"CHIP_TEXT"},
					"evaluation": {"entity":"EVALUATION_INFO", "type":"EVALUATION"},
					"dda_configurations": {"entity":"DDA_CONFIGURATIONS", "type":"DDA_MASTER"}
				}
		};
		return entityNavDict[entity];
	};
	
	function beanDictionary(entity) {
		return beans = {
				"INDICATOR": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "TYPE":"TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "EVALUATION_COUNT":"EVALUATION_COUNT", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "ASSOCIATION_SOURCE_COUNT":"ASSOCIATION_SOURCE_COUNT", "ASSOCIATION_TARGET_COUNT":"ASSOCIATION_TARGET_COUNT"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "TYPE":"TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "EVALUATION_COUNT":"EVALUATION_COUNT", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "ASSOCIATION_SOURCE_COUNT":"ASSOCIATION_SOURCE_COUNT", "ASSOCIATION_TARGET_COUNT":"ASSOCIATION_TARGET_COUNT"
					}
				},
				"EVALUATION": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "INDICATOR":"INDICATOR", "SCALING":"SCALING", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "VALUES_SOURCE":"VALUES_SOURCE", "INDICATOR_TYPE":"INDICATOR_TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "CHIPS_COUNT":"CHIPS_COUNT", "INDICATOR_TITLE":"INDICATOR_TITLE", "VIEWS_COUNT":"VIEWS_COUNT","DECIMAL_PRECISION":"DECIMAL_PRECISION"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION", "INDICATOR":"INDICATOR", "SCALING":"SCALING", "ODATA_URL":"ODATA_URL", "ODATA_ENTITYSET":"ODATA_ENTITYSET", "VIEW_NAME":"VIEW_NAME", "COLUMN_NAME":"COLUMN_NAME", "OWNER_NAME":"OWNER_NAME", "OWNER_E_MAIL":"OWNER_E_MAIL", "OWNER_ID":"OWNER_ID", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "ENTITY_TYPE":"ENTITY_TYPE", "ODATA_PROPERTY":"ODATA_PROPERTY", "SEMANTIC_OBJECT":"SEMANTIC_OBJECT", "ACTION":"ACTION", "VALUES_SOURCE":"VALUES_SOURCE", "INDICATOR_TYPE":"INDICATOR_TYPE", "DATA_SPECIFICATION":"DATA_SPECIFICATION", "GOAL_TYPE":"GOAL_TYPE", "MANUAL_ENTRY":"MANUAL_ENTRY", "LAST_WORKED_ON":"LAST_WORKED_ON", "CHIPS_COUNT":"CHIPS_COUNT", "INDICATOR_TITLE":"INDICATOR_TITLE", "VIEWS_COUNT":"VIEWS_COUNT","DECIMAL_PRECISION":"DECIMAL_PRECISION"
					}
				},
				"CHIP": {
					"bean": { 
						"id":"id", "isActive":"isActive", "evaluationId":"evaluationId", "catalogId":"catalogId", "tileType":"tileType", "COUNTER":"COUNTER", "createdBy":"createdBy", "changedBy":"changedBy", "createdOn":"createdOn", "changedOn":"changedOn"
					},
					"reverseBean": {
						"id":"id", "isActive":"isActive", "evaluationId":"evaluationId", "catalogId":"catalogId", "tileType":"tileType", "COUNTER":"COUNTER", "createdBy":"createdBy", "changedBy":"changedBy", "createdOn":"createdOn", "changedOn":"changedOn"
					}
				},
				"ASSOCIATION": {
					"bean": {
						"NAMESPACE":"NAMESPACE", "TYPE":"TYPE", "SOURCE_INDICATOR":"SOURCE_INDICATOR", "TARGET_INDICATOR":"TARGET_INDICATOR", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "SOURCE_INDICATOR_TITLE":"SOURCE_INDICATOR_TITLE", "TARGET_INDICATOR_TITLE":"TARGET_INDICATOR_TITLE"
					},
					"reverseBean": {
						"NAMESPACE":"NAMESPACE", "TYPE":"TYPE", "SOURCE_INDICATOR":"SOURCE_INDICATOR", "TARGET_INDICATOR":"TARGET_INDICATOR", "IS_ACTIVE":"IS_ACTIVE", "COUNTER":"COUNTER", "CREATED_BY":"CREATED_BY", "CREATED_ON":"CREATED_ON", "CHANGED_BY":"CHANGED_BY", "CHANGED_ON":"CHANGED_ON", "SOURCE_INDICATOR_TITLE":"SOURCE_INDICATOR_TITLE", "TARGET_INDICATOR_TITLE":"TARGET_INDICATOR_TITLE"
					}
				},
				"TAG": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "TAG":"TAG"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "TAG":"TAG"
					}
				},
				"PROPERTY": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE":"VALUE"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE":"VALUE"
					}
				},
				"FILTER": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE_1":"VALUE_1", "OPERATOR":"OPERATOR", "VALUE_2":"VALUE_2"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "NAME":"NAME", "VALUE_1":"VALUE_1", "OPERATOR":"OPERATOR", "VALUE_2":"VALUE_2"
					}
				},
				"VALUE": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "FIXED":"FIXED", "COLUMN_NAME":"COLUMN_NAME", "ODATA_PROPERTY":"ODATA_PROPERTY"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "TYPE":"TYPE", "FIXED":"FIXED", "COLUMN_NAME":"COLUMN_NAME", "ODATA_PROPERTY":"ODATA_PROPERTY"
					}
				},
				"DDA_MASTER": {
					"bean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "CONFIG_ORDER":"CONFIG_ORDER", "TEXT":"TEXT", "IS_ACTIVE":"IS_ACTIVE"
					},
					"reverseBean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "CONFIG_ORDER":"CONFIG_ORDER", "TEXT":"TEXT", "IS_ACTIVE":"IS_ACTIVE"
					}
				},
				"DDA_HEADER": {
					"bean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "REFERENCE_EVALUATION_ID":"REFERENCE_EVALUATION_ID", "VISUALIZATION_TYPE":"VISUALIZATION_TYPE", "VISUALIZATION_ORDER":"VISUALIZATION_ORDER", "VISIBILITY":"VISIBILITY", "DIMENSION":"DIMENSION", "IS_ACTIVE":"IS_ACTIVE", "CONFIGURATION":"CONFIGURATION"
					},
					"reverseBean": {
						"EVALUATION_ID":"EVALUATION_ID", "CONFIGURATION_ID":"CONFIGURATION_ID", "REFERENCE_EVALUATION_ID":"REFERENCE_EVALUATION_ID", "VISUALIZATION_TYPE":"VISUALIZATION_TYPE", "VISUALIZATION_ORDER":"VISUALIZATION_ORDER", "VISIBILITY":"VISIBILITY", "DIMENSION":"DIMENSION", "IS_ACTIVE":"IS_ACTIVE", "CONFIGURATION":"CONFIGURATION"
					}
				},
				"LANGUAGE": {
					"bean": {
						"SPRAS":"SPRAS", "LAISO":"LAISO", "SPTXT":"SPTXT"
					},
					"reverseBean": {
						"SPRAS":"SPRAS", "LAISO":"LAISO", "SPTXT":"SPTXT"
					}
				},
				"INDICATOR_TEXT": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					}
				},
				"EVALUATION_TEXT": {
					"bean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					},
					"reverseBean": {
						"ID":"ID", "IS_ACTIVE":"IS_ACTIVE", "LANGUAGE":"LANGUAGE", "TITLE":"TITLE", "DESCRIPTION":"DESCRIPTION"
					}
				},
				"CHIP_TEXT": {
					"bean": {
						"id":"id", "isActive":"isActive", "language":"language", "catalogId":"catalogId", "title":"title", "description":"description"
					},
					"reverseBean": {
						"id":"id", "isActive":"isActive", "language":"language", "catalogId":"catalogId", "title":"title", "description":"description"
					}
				}
		};
	};
	
	this.formBean = function(data, entity, isBean) {
	    var bean = {};
	    var outputs = [];
	    var output = {};
	    var datum = {};
	    var isArray = false;
	    if(isBean) {
	        bean = beans[entity].bean;
	    }
	    else {
	        bean = beans[entity].reverseBean;
	    }
	    if(data instanceof Array) {
	        isArray = true;
	    }
	    else {
	        data = [data];
	    }
	    for(var i=0,l=data.length; i<l; i++) {
	        output = {};
	        datum = data[i];
	        for(var col in bean) {
	            if(bean.hasOwnProperty(col)) {
	                if(datum[col] !== undefined && datum[col] !== null) {
	                    output[bean[col]] = datum[col];
	                }
	            }
	        }
	        outputs.push(output);
	    }
	    if(!isArray) {
	        outputs = outputs[0];
	    }
	    return outputs;
	};
	
	function getDesigntimeModel() {
		that.cache.designtimeModel = that.cache.designtimeModel || new sap.ui.model.odata.ODataModel(that.getDesigntimeServiceUrl(), true);
		return that.cache.designtimeModel; 
	};
	
	function getRuntimeModel() {
		that.cache.runtimeModel = that.cache.runtimeModel || new sap.ui.model.odata.ODataModel(that.getRuntimeServiceUrl(), true);
		return that.cache.runtimeModel; 
	};
	
	function getDesigntimeServiceUrl() {
		return "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
	};
	
	this.getDesigntimeServiceUrl = function() {
		jQuery.sap.log.info("Hana Adapter --> Designtime Service URI");
		return "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
	};
	
	this.getRuntimeServiceUrl = function() {
		jQuery.sap.log.info("Hana Adapter --> Runtime Service URI");
		return "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
	};
	
	function _encodeURL(uRi) {
		return jQuery.sap.encodeURL(uRi);
	};
	
	this.getSessionUser = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Session User");
		var username = null;
		var succ = obj.success;
		var err = obj.error;
		var sessionUserFetchCallBack = function(user) {
			if(user instanceof Array) {
				if(user && user.length && user[0]) {
					username = user[0].LOGON_USER;
				}
			}
			else {
				username = user.LOGON_USER;
			}
			that.cache.sessionUser = username;
			jQuery.sap.log.info("Hana Adapter --> Current Session User - " + that.cache.sessionUser);
			if(succ) {
				succ(username);
			}
		};
		
		var sessionUserFetchErrCallBack = function(d,s,x) {
			if(err) {
				err(d,s,x);
			}
		};
		if(that.cache.sessionUser) {
			username = that.cache.sessionUser;
			jQuery.sap.log.info("Hana Adapter --> Current Session User From Cache - " + that.cache.sessionUser);
			succ(username);
		}
		else {
			this.getDataByEntity({entity:"SESSION_USER", async:(obj.async || false), success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:obj.model});
		}
		return that.cache.sessionUser;
	};

	this.getSystemInfo = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Fetching System Info");
		var succ = obj.success;
		that.cache.env = 1;
		jQuery.sap.log.info("Hana Adapter --> System Environment - " + ((that.cache.env) ? "SAP HANA" : "Non-SAP"));
		succ(1);
		return that.cache.env;
	};
	
	this.getAllLanguages = function(obj) {
		/*
		 *            Implement Fetching All SAP Languages
		 */
		var localLanguage = undefined;
		var succ = obj.success;
		var err = obj.error;

		var langSuccessHandler = function(data) {
			data = (data.results) ? data.results : data;
			if(data.length) {
				if(data.length == 1) {
					var SAP_LANGUAGES = {LAISO:{},SPRAS:{}};
					SAP_LANGUAGES.LAISO[data[0]["LAISO"]] = data[0]["SPRAS"]; SAP_LANGUAGES.SPRAS[data[0]["SPRAS"]] = data[0]["LAISO"];
				}
				else {
					SAP_LANGUAGES = data.reduce(function(p,c,i,a) { SAP_LANGUAGES = SAP_LANGUAGES || {}; SAP_LANGUAGES.LAISO = SAP_LANGUAGES.LAISO || {}; SAP_LANGUAGES.SPRAS = SAP_LANGUAGES.SPRAS || {}; if(i == 1){ SAP_LANGUAGES.LAISO[a[0]["LAISO"]] = a[0]["SPRAS"]; SAP_LANGUAGES.SPRAS[a[0]["SPRAS"]] = a[0]["LAISO"]; }  SAP_LANGUAGES.LAISO[a[i]["LAISO"]] = a[i]["SPRAS"]; SAP_LANGUAGES.SPRAS[a[i]["SPRAS"]] = a[i]["LAISO"]; return SAP_LANGUAGES;});
				}
				var SAP_LANGUAGE_ARRAY = data;
				that.cache.SAP_LANGUAGES = SAP_LANGUAGES;
				that.cache.SAP_LANGUAGE_ARRAY = SAP_LANGUAGE_ARRAY;
				that.cache.localeIsoLanguage = sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase();
				localLanguage = SAP_LANGUAGES.LAISO[that.cache.localeIsoLanguage];
				that.cache.localLanguage = localLanguage;
				that.cache.localeSapLanguage = localLanguage;
				jQuery.sap.log.info("Hana Adapter --> Logon Language - " + that.cache.localeIsoLanguage + " - " + that.cache.localeSapLanguage);
			}
			if(succ) {
				succ(SAP_LANGUAGES, SAP_LANGUAGE_ARRAY, localLanguage);
			}
		};

		var langErrorHandler = function(d,s,x) {
			if(err) {
				err(d,s,x);
			}
		};

		if(that.cache.SAP_LANGUAGE_ARRAY && that.cache.SAP_LANGUAGES) {
			that.cache.localeIsoLanguage = sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase();
			that.cache.localLanguage = that.cache.SAP_LANGUAGES.LAISO[that.cache.localeIsoLanguage];
			that.cache.localeSapLanguage = that.cache.localLanguage;
			jQuery.sap.log.info("Hana Adapter --> Picking All Languages from cache");
			jQuery.sap.log.info("Hana Adapter --> Logon Language - " + that.cache.localeIsoLanguage + " - " + that.cache.localeSapLanguage);
			if(succ) {
				succ(that.cache.SAP_LANGUAGES, that.cache.SAP_LANGUAGE_ARRAY, that.cache.localLanguage);
			}
		}
		else {
			jQuery.sap.log.info("Hana Adapter --> Calling All Languages");
			this.getDataByEntity({entity:"LANGUAGE",async:(obj.async || false), success:langSuccessHandler, error:langErrorHandler, model:obj.model});
		}
		
	};
	
	this.getKPIById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling KPI Data");
		var that = this;
		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Indicator Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		var url = getDesigntimeServiceUrl();
		var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
				obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
			obj.entity = obj.entity || "/INDICATORS_MODELER";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noIndicator)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.INDICATOR = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("INDICATOR");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.evaluations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATIONS","GET"));
			referenceObject.push("EVALUATIONS");
		}
		if(obj.associations && obj.associationProperties) {
			batchRequests.push(model.createBatchOperation("/ASSOCIATIONS_MODELER?$filter=" + _encodeURL("SOURCE_INDICATOR eq '" + obj.ID + "' or TARGET_INDICATOR eq '" + obj.ID + "'") + "&$expand=PROPERTIES","GET"));
			referenceObject.push("ASSOCIATIONS");
		}
		else if(obj.associations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_SOURCE","GET"));
			batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_TARGET","GET"));
			referenceObject.push("ASSOCIATION_SOURCE");
			referenceObject.push("ASSOCIATION_TARGET");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Indicator details");
		},obj.async);
		if(obj.associations && obj.associationProperties) {
			for(var i=0,l=dataBean.ASSOCIATIONS.length; i<l; i++) {
				if(dataBean.ASSOCIATIONS[i].PROPERTIES) {
					if(dataBean.ASSOCIATIONS[i].PROPERTIES.results && dataBean.ASSOCIATIONS[i].PROPERTIES.results.length) {
						dataBean.ASSOCIATIONS[i].PROPERTIES = dataBean.ASSOCIATIONS[i].PROPERTIES.results;
					}
					else {
						dataBean.ASSOCIATIONS[i].PROPERTIES = [];
					}
				}
				else {
					dataBean.ASSOCIATIONS[i].PROPERTIES = [];
				}
			}
		}
		else {
			dataBean.ASSOCIATIONS = [].concat(dataBean.ASSOCIATION_SOURCE).concat(dataBean.ASSOCIATION_TARGET);	
		}

		return dataBean;

	};

	this.getEvaluationById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Evaluation Data");

		var that = this;
		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Evaluation Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		var url = getDesigntimeServiceUrl();
		var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
				obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
			obj.entity = obj.entity || "/EVALUATIONS_MODELER";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noEvaluation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.EVALUATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("EVALUATION");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.indicator_tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/INDICATOR_TAGS","GET"));
			referenceObject.push("INDICATOR_TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.texts_for_chip) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS_FOR_CHIP","GET"));
			referenceObject.push("TEXTS_FOR_CHIP");
		}
		if(obj.filters) {
			batchRequests.push(model.createBatchOperation(contextPath+"/FILTERS","GET"));
			referenceObject.push("FILTERS");
		}
		if(obj.values) {
			batchRequests.push(model.createBatchOperation(contextPath+"/VALUES","GET"));
			referenceObject.push("VALUES");
		}
		if(obj.chips) {
			batchRequests.push(model.createBatchOperation(contextPath+"/CHIPS","GET"));
			referenceObject.push("CHIPS");
		}
		if(obj.dda_configurations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
			referenceObject.push("DDA_CONFIGURATIONS");
		}
		if(obj.dda_header_tiles) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_HEADER_TILES","GET"));
			referenceObject.push("DDA_HEADER_TILES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(dataBean.CHIPS){
				dataBean.CHIPS=getChipsWithoutHarveyBall(dataBean.CHIPS);
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Evaluation details");
		},obj.async);

		return dataBean;

	};

	this.getAssociationById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Association Data");

		var that = this;
//		if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
//			throw new Error("Failed to get Indicator Id or Status for data fetch");
//			return null;
//		}
		var contextPath = null;
		var context = obj.context || null;
		var url = getDesigntimeServiceUrl();
		var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
//			if(obj.context.getObject()) {
//				obj.ID = obj.context.getObject().ID;
//				obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
//			}
//			else {
//				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
//				obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
//			}
		}
		else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
//			obj.entity = obj.entity || "/INDICATORS_MODELER";
//			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
//			contextPath = obj.entity + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
//			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noAssociation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.ASSOCIATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("ASSOCIATION");
			}
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.source) {
			batchRequests.push(model.createBatchOperation(contextPath+"/SOURCE_INDICATOR_INFO","GET"));
			referenceObject.push("SOURCE_INDICATOR_INFO");
		}
		if(obj.target) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TARGET_INDICATOR_INFO","GET"));
			referenceObject.push("TARGET_INDICATOR_INFO");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Association details");
		},obj.async);
		return dataBean;
	};
	
	this.getChipById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Chip Data");

		var that = this;
		if(!(obj.id && obj.isActive !== null && obj.isActive !== undefined) && !(obj.context)) {
			throw new Error("Failed to get Chip Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		var url = getDesigntimeServiceUrl();
		var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.id = obj.context.getObject().id;
				obj.isActive = obj.context.getObject().isActive;
			}
			else {
				obj.id = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
				obj.isActive = ((contextPath.indexOf("isActive=0") != -1) || (contextPath.indexOf("isActive=1") != -1)) ? ((contextPath.indexOf("isActive=0") != -1) ? 0 : 1) : null;
			}
		}
		else if(obj.id && obj.isActive !== null && obj.isActive !== undefined) {
			obj.entity = obj.entity || "/CHIPS_MODELER";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "(id='" + obj.id + "',isActive=" + obj.isActive + ")";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noChip)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.CHIP = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("CHIP");
			}
		}
		if(obj.evaluation) {
			batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATION_INFO","GET"));
			referenceObject.push("EVALUATION_INFO");
		}
		if(obj.texts) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
			referenceObject.push("TEXTS");
		}
		if(obj.dda_configurations) {
			batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
			referenceObject.push("DDA_CONFIGURATIONS");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}

		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Chip details");
		},obj.async);

		return dataBean;

	};

	this.getChipByEvaluation = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Chips for Evaluation");
		obj.async = false;
		obj.chips= true;
		if(obj.success) {
			var succ = obj.success;
			succ(this.getEvaluationById(obj));
			return null;
		}
		else {
			return this.getEvaluationById(obj);
		}
		 
	};
	
	this.getDataByEntity = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Data");
		var that = this;
		var url = obj.uri;
		var model = obj.model || (url ? new sap.ui.model.odata.ODataModel(url,true) : getDesigntimeModel());
		var expand = "";
		var expandArr = [];
		var filter = "";
		var select = "";
		var orderby = "";
		var top = obj.top || null;
		var skip = obj.skip || null;
		var data = null;
		var succHandler = obj.success;
		var errHandler = obj.error;
		if(!(obj.entity)) {
			jQuery.sap.log.error("Entity or Context is missing for getDataByEntity call");
			throw Error("Entity or Context is missing for getDataByEntity call");
		}
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Data - " + obj.entity);
		entity = obj.entity;
		entity = (entity.indexOf("/") == 0) ? entity : ("/" + entity);
		if(obj.select) {
			if(typeof(obj.select) == "string") {
				select = obj.select;
			}
			else {
				select = obj.select;
			}
		}
		if(obj.expand) {
			if(obj.expand instanceof Array) {
				for(var i=0,l=obj.expand.length; i<l; i++) {
					expand += (expand) ? "," : "";
					expand += obj.expand[i];
				}
				expandArr = obj.expand;
			}
			else if(typeof(obj.expand) == "string") {
				expand = obj.expand;
				expandArr = obj.expand.split(",");
			}
		}
		if(obj.filter) {
			if(typeof(obj.filter) == "string") {
				filter = obj.filter;
			}
			else {
				filter = obj.filter;
			}
		}
		if(obj.orderby) {
			if(typeof(obj.orderby) == "string") {
				orderby = obj.orderby;
			}
			else {
				orderby = obj.orderby;
			}
		}
		obj.async = (obj.async) ? true : false;
		if(entity.indexOf("$select") == -1) {
			if(select) {
				entity += (entity.indexOf("?") == -1) ? ("?$select=" + select) : ("&$select=" + select); 
			}
		}
		if(entity.indexOf("$expand") == -1) {
			if(expand) {
				entity += (entity.indexOf("?") == -1) ? ("?$expand=" + expand) : ("&$expand=" + expand); 
			}
		}
		if(entity.indexOf("$filter") == -1) {
			if(filter) {
				entity += (entity.indexOf("?") == -1) ? ("?$filter=" + filter) : ("&$filter=" + filter); 
			}
		}
		if(entity.indexOf("$orderby") == -1) {
			if(orderby) {
				entity += (entity.indexOf("?") == -1) ? ("?$orderby=" + orderby) : ("&$orderby=" + orderby); 
			}
		}
		if(entity.indexOf("$top") == -1) {
			if(Number(top)) {
				entity += (entity.indexOf("?") == -1) ? ("?$top=" + Number(top)) : ("&$top=" + Number(top)); 
			}
		}
		if(entity.indexOf("$skip") == -1) {
			if(Number(skip)) {
				entity += (entity.indexOf("?") == -1) ? ("?$skip=" + Number(skip)) : ("&$skip=" + Number(skip)); 
			}
		}
		
		var success = function(d,s,x) {
			data = (d && d.results) ? d.results : d;
			if(succHandler) {
				succHandler(data);
			}
		}
		var error = function(d,s,x) {
			jQuery.sap.log.error(d);
			jQuery.sap.log.error(s);
			jQuery.sap.log.error(x);
			if(errHandler) {
				data = {d:d,s:s,x:x};
				errHandler(d,s,x);
			}
		}
		
		model.read(entity, null, null, obj.async, success, error);
		return data;
	};

	this.getDataByBatch = function() {
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Batch Data");
	};

	this.populateRelevantEntitySet = function(dialog, modelData, controller) {
		jQuery.sap.log.info("Hana Adapter --> Calling for Relevant Entity Sets");
		var that = controller;
		var odata_package = modelData.ODATA_URL.substr(0,modelData.ODATA_URL.lastIndexOf("/"));
		odata_package = odata_package.replace(/\//g, '.').replace(".","");

		var odata_file = modelData.ODATA_URL.substr(modelData.ODATA_URL.lastIndexOf("/") + 1);
		odata_file = odata_file.split(".")[0];

		var entity = "/ODATA_FOR_ENTITY(P_PACKAGE='"+modelData.VIEW_NAME.split("/")[0] + "',P_OBJECT='" +modelData.VIEW_NAME.split("/")[1] + "')/Results";
		var filter = "PACKAGE eq '" + odata_package + "' and OBJECT eq '" + odata_file + "'";
		
		var relevantEntitySetCallBack = function(data) {
			if(data && data.length) {
				var cdata = data[0].CDATA_STR;
				dialog.open();

				// handling comments in the xsodata file
				if(cdata) {
					//handling "//"
					var eachLine = cdata.split("\n");
					for(var i=0,l=eachLine.length; i<l; i++) {
						if(eachLine[i].indexOf("//") != -1) {
							eachLine[i] = eachLine[i].substr(0, eachLine[i].indexOf("//"));
						}
					}
					cdata = eachLine.join("\n");

					//handling "/* */"
					while(cdata.indexOf("/*") != -1) {
						var start = cdata.indexOf("/*");
						var end = cdata.indexOf("*/");
						end = (end == -1) ? cdata.length : (end+2);
						cdata = cdata.substr(0,start) + cdata.substr(end);
					}
				}

				var entityDataArray = [];
				var oModel = new sap.ui.model.json.JSONModel();
				var a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '::' + modelData.VIEW_NAME.split("/")[1]);
				if(a.length == 1) {
					a = cdata.split(modelData.VIEW_NAME.split("/")[0] + '/' + modelData.VIEW_NAME.split("/")[1]);
				}
				if(a.length == 1) {
					sap.m.MessageToast.show("OData Document not compatible");
					oModel = that.populateEntitySet(that.getView().byId("odataServiceInput").getValue());
					dialog.setModel(oModel);
					return;
				}
				for(var i=1,l=a.length; i<l; i++) {
					var obj = {};
					obj.entityName = a[i].split('"')[2];
					entityDataArray.push(obj);
				}
				oModel.setData({
					entitySet : entityDataArray
				});
				dialog.setModel(oModel);
				return;
			}
		};
		
		var relevantEntitySetErrCallBack = function(d,s,x) {
			
		}; 
		
		this.getDataByEntity({entity:entity, filter:filter, async:false, success:relevantEntitySetCallBack, error:relevantEntitySetErrCallBack, model:that.oDataModel});
	};
	
	this.getAllViews = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling for All Views");
		return this.getDataByEntity({entity:"HANA_VIEWS", async:(obj.async || false), model:obj.model});
	};
	
	this.getPlatform = function() {
		jQuery.sap.log.info("Hana Adapter --> Fetching Platform");
		that.cache.platform = that.cache.platform || "hana";
		jQuery.sap.log.info("Hana Adapter --> Platform - " + that.cache.platform);
		return that.cache.platform;
	};
	
	this.create = function(entity, payload, parameters, success, error, async, urlParameters) {
		jQuery.sap.log.info("Hana Adapter --> Calling Create Service");
		var uri = serviceCudUrl(entity);
		var that = this;
		async = async ? true : false;
		fetchCSRFToken().done(function(d,s,x) {
			jQuery.ajax({
				type: "POST",
				async: async,
				url: appendUrlParameters(uri, urlParameters),
				data: encodeURIComponent(JSON.stringify(preparePayloadForXSJSCrud(payload))),
				headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
				success: success,
				error: error
			});
		});
	};

	this.update = function(entity, payload, parameters, success, error, merge, eTag, async, urlParameters) {
		jQuery.sap.log.info("Hana Adapter --> Calling Update Service");
		var uri = serviceCudUrl(entity);
		var that = this;
		async = async ? true : false;
		fetchCSRFToken().done(function(d,s,x) {
			jQuery.ajax({
				type: "PUT",
				async: async,
				url: appendUrlParameters(uri, urlParameters),
				data: encodeURIComponent(JSON.stringify(preparePayloadForXSJSCrud(payload))),
				headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage(), "If-None-Match": (eTag || "")},
				success: success,
				error: error
			});
		});
	};

	this.remove = function(entity, payload, success, error, eTag, additionalPayload, async, urlParameters) {
		jQuery.sap.log.info("Hana Adapter --> Calling Delete Service");
		var uri = serviceCudUrl(entity);
		var that = this;
		async = async ? true : false;
		fetchCSRFToken().done(function(d,s,x) {
			jQuery.ajax({
				type: "DELETE",
				async: async,
				url: appendUrlParameters(uri, urlParameters),
				data: encodeURIComponent(JSON.stringify(preparePayloadForXSJSCrud(payload))),
				headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage(), "If-None-Match": (eTag || "")},
				success: success,
				error: error
			});
		});
	};

	function preparePayloadForXSJSCrud(payload) {
		var xsjsPayload;
		if(payload instanceof Array) {
			xsjsPayload = [];
			for(var i=0,l=payload.length; i<l; i++) {
				obj = payload[i];
				if(!(obj.keys) && !(obj.payload)) {
					xsjsPayload.push(obj);
				}
				else {
					obj.keys = obj.keys || {};
					obj.payload = obj.payload || {};
					xsjsPayload.push(jQuery.extend(true,obj.keys,obj.payload,{}));
				}
				
			}
		}
		else if(payload instanceof Object) {
			xsjsPayload = {};
			obj = payload;
			if(!(obj.keys) && !(obj.payload)) {
				xsjsPayload = obj;
			}
			else {
				obj.keys = obj.keys || {};
				obj.payload = obj.payload || {};
				xsjsPayload = jQuery.extend(true,obj.keys,obj.payload,{});
			}
			
		}
		else {
			xsjsPayload = payload;
		}
		
		return xsjsPayload;
	};
	
	function fetchCSRFToken() {
		var tokenFetchServiceUrl = "/sap/hba/r/sb/core/logic/__token.xsjs";
		tokenFetchServiceUrl = that.addSystemToServiceUrl(tokenFetchServiceUrl);
		return jQuery.ajax({
			type: "HEAD",
			async: false,
			dataType: "json",
			url: tokenFetchServiceUrl,
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {

			},
			error: function() {

			}
		});
	};

	this.addSystemToServiceUrl = function(url, system) {
		jQuery.sap.log.info("Hana Adapter --> Add System to Service Url");
		if(sap.ushell && sap.ushell.Container) {
			if(system) {
				url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url, system);
			}
			else {
				url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url);
			}
		}
		return url;
	};
	
	this.getHanaSystem = function() {
		var hashObj = hasher || window.hasher; 
		var hashArr = hashObj.getHashAsArray();
		if(hashArr && hashArr.length && hashArr[0]) {
			var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
			for(var i=0,l=hashParameters.length; i<l; i++) {
				if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
					return hashParameters[i].split("=")[1]; 
				}
			}
		}
		return "";
	}; 

	function appendUrlParameters(url, urlParameters) {
		var urlParts = url.split("?");
		if(urlParts.length > 2) {
			throw new Error("Url not formed properly");
		}
		urlParts[0] = that.addSystemToServiceUrl(urlParts[0]);
		url = urlParts[0];
		if(urlParts.length == 2) {
			url += "?" + urlParts[1];
		}
		if(urlParameters && Object.keys(urlParameters) && Object.keys(urlParameters).length) {
			url = url + "?" + jQuery.param(urlParameters);
		}
		return url;
	};

	function serviceCudUrl(entity) {
		var Constants = {
				INDICATOR : "/sap/hba/r/sb/core/logic/indicators.xsjs",
				EVALUATION : "/sap/hba/r/sb/core/logic/evaluations.xsjs",
				CHIP: "/sap/hba/r/sb/core/logic/chips.xsjs",
				ACTIVATE_INDICATOR: "/sap/hba/r/sb/core/logic/activateIndicator.xsjs",
				ACTIVATE_EVALUATION: "/sap/hba/r/sb/core/logic/activateEvaluation.xsjs",
				INDICATOR_FAVOURITE: "/sap/hba/r/sb/core/logic/favouriteIndicator.xsjs",
				EVALUATION_FAVOURITE: "/sap/hba/r/sb/core/logic/favouriteEvaluation.xsjs",
				ASSOCIATION: "/sap/hba/r/sb/core/logic/associations_cud.xsjs",
				ACTIVATE_ASSOCIATION: "/sap/hba/r/sb/core/logic/activateAssociation.xsjs",
				ACTIVATE_CHIP: "/sap/hba/r/sb/core/logic/activateChip.xsjs",
				AUTHORIZATION: "/sap/hba/r/sb/core/logic/authorization.xsjs",
				COPY_DDA_CONFIGURATION: "/sap/hba/r/sb/core/logic/copyDrilldownConfiguration.xsjs",
				DUPLICATE_ENTITY: "/sap/hba/r/sb/core/logic/deepCopy.xsjs",
				CHIP_USER: "/sap/hba/r/sb/core/logic/addToCatalog.xsjs"
		}
		return Constants[entity];
	};
	
	function _createTile(payload, controllerRef, succ, err) {
		that.create("CHIP",payload,null,succ,err);
	};
	
	function _updateTile(payload, controllerRef, succ, err) {
		that.update("CHIP",payload,null,succ,err);
	};
	
	this.removeTile = function(payload, controllerRef, succ, err) {
		this.remove("CHIP",{id:payload.id, isActive:payload.isActive},succ,err);
	};
	
	this.publishChip = function(payload, mode, controllerRef, succ, err) {
		var serviceStatus = true;
		payload.keywords = payload.keywords || "";
		delete payload.navType;
		delete payload.semanticObject;
		delete payload.action;
		var chipTextPayload = [];
		var finalPayload = [];
		
		if(controllerRef.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
			for(var i=0;i<controllerRef.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
				var chipTextObject = {};
				chipTextObject.title = controllerRef.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
				chipTextObject.description = controllerRef.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
				chipTextObject.id = payload.id;
				chipTextObject.language = controllerRef.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
				chipTextObject.isActive = 0;
				chipTextPayload.push(chipTextObject);
			}
		}
		
		if(mode == "create") {
			finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:payload, TEXTS:chipTextPayload}});
			_createTile(finalPayload, controllerRef, succ, err);
		}
		else {
			if(controllerRef.currentContextState) {
				finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:payload, TEXTS:chipTextPayload}});
				_createTile(finalPayload, controllerRef, succ, err);
			}
			else {
				var languagePayloadForDirtyBitTest = []; 
				for(var i=0;i<controllerRef.initialData.ADDITIONAL_LANGUAGE_ARRAY.length;i++){
					var textObject = {};
					textObject.id = payload.id;
					textObject.language = controllerRef.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].language;
					textObject.isActive = controllerRef.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].isActive;
					textObject.description = controllerRef.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].description;
					textObject.title= controllerRef.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].title;
					languagePayloadForDirtyBitTest.push(textObject);
				}
				var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
					oldPayload : languagePayloadForDirtyBitTest,
					newPayload : chipTextPayload,
					objectType : "CHIP_TEXTS"
				});
				var textsUpdatePayload = {remove:[],create:[]};
				if(languageDeltaObject) {
					if(languageDeltaObject.deletes.length){
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							textsUpdatePayload.remove.push(languageDeltaObject.deletes[i]);
						}
					}
					if(languageDeltaObject.updates.length){
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							textsUpdatePayload.create.push(languageDeltaObject.updates[i]);
						}
					}
				}
				finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:{update:payload}, TEXTS:textsUpdatePayload}});
				_updateTile(finalPayload, controllerRef, succ, err);
			}
			
		}
	};
	
	this.isTokenHandlingEnabledForODataRead = function() {
		return false;
	};

};

}; // end of sap/suite/ui/smartbusiness/adapter/hana/ModelerServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.hana.NavigationAdapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.hana.NavigationAdapter");
sap.suite.ui.smartbusiness.adapter.hana.NavigationAdapter = function() {
	var _cache = {};
	this.getLinksBySemanticObject = function(oParam) {
    	var oDataModel = new sap.ui.model.odata.ODataModel("/sap/hana/uis/odata/uis_nav_data.xsodata",true);
        var serviceUri = "UIS_US_NAVIGATIONParameters(IN_TAG='" + oParam.semanticObject + "')/Results?$format=json"
        var callReference = oDataModel.read(serviceUri,null, null, true, function(data) {
            oParam.success.call(oParam.context || null, data.results);
            /**
             * Array of 
             * {
             *     id   : so-action~asd
             *     text : '',
             *     applicationAlias : action,
             *     applicationType : "URL"
             * }
             */
        }, function() {
            jQuery.sap.log.error("Error fetching getLinksBySemanticObject : "+oParam.semanticObject);
            oParam.success.call(oParam.context || null, []);
        }, !!oParam.async);
        return callReference ;
	};
	this.getLinksByContext = function(oParam) {
	    return this.getLinksBySemanticObject(oParam);
	};
	this.reset =function() {
		_cache = {};
	};
};

}; // end of sap/suite/ui/smartbusiness/adapter/hana/NavigationAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.adapter.hana.RuntimeServicesAdapter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.adapter.hana.RuntimeServicesAdapter");
sap.suite.ui.smartbusiness.adapter.hana.RuntimeServicesAdapter = function() {
	
	var that = this;
	this.cache = this.cache || {};
		
	function getRuntimeModel() {
		that.cache.runtimeModel = that.cache.runtimeModel || new sap.ui.model.odata.ODataModel(that.getRuntimeServiceUrl(), true);
		return that.cache.runtimeModel; 
	};

	this.getRuntimeServiceUrl = function() {
		jQuery.sap.log.info("Hana Adapter --> Runtime Service URI");
		return "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
	};

	function _encodeURL(uRi) {
		return jQuery.sap.encodeURL(uRi);
	};

	this.getKPIById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling KPI Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		if(!(obj.ID) && !(obj.context)) {
			throw new Error("Failed to get Indicator Id for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getDesigntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
			}
		}
		else if(obj.ID) {
			obj.entity = obj.entity || "/INDICATORS";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.ID + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];

		if(!(obj.noIndicator)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.INDICATOR = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("INDICATOR");
			}
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Indicator details");
		},obj.async);
		return dataBean;
	};

	this.getEvaluationById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Evaluation Data");

		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		if(!(obj.ID) && !(obj.context)) {
			throw new Error("Failed to get Evaluation Id or Status for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getRuntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.ID = obj.context.getObject().ID;
			}
			else {
				obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
			}
		}
		else if(obj.ID) {
			obj.entity = obj.entity || "/EVALUATIONS";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.ID + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noEvaluation)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.EVALUATION = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("EVALUATION");
			}
		}
		if(obj.indicator) {
			batchRequests.push(model.createBatchOperation(contextPath+"/INDICATOR_PROPERTIES","GET"));
			referenceObject.push("INDICATOR_PROPERTIES");
		}
		if(obj.tags) {
			batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
			referenceObject.push("TAGS");
		}
		if(obj.properties) {
			batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
			referenceObject.push("PROPERTIES");
		}
		if(obj.filters) {
			batchRequests.push(model.createBatchOperation(contextPath+"/FILTERS","GET"));
			referenceObject.push("FILTERS");
		}
		if(obj.values) {
			batchRequests.push(model.createBatchOperation(contextPath+"/VALUES","GET"));
			referenceObject.push("VALUES");
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}
		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Evaluation details");
		},obj.async);

		return dataBean;

	};

	this.getChipById = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Chip Data");
		/*
		 *            Copied from Hana Adapter Make Changes If required
		 */

		var that = this;
		if(!(obj.id) && !(obj.context)) {
			throw new Error("Failed to get Chip Id for data fetch");
			return null;
		}
		var contextPath = null;
		var context = obj.context || null;
		//var url = getRuntimeServiceUrl();
		var model = obj.model || getRuntimeModel(); //|| new sap.ui.model.odata.ODataModel(url, true);
		var dataBean = {};
		if(obj.context) {
			contextPath = obj.context.sPath;
			if(obj.context.getObject()) {
				obj.id = obj.context.getObject().id;
			}
			else {
				obj.id = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
			}
		}
		else if(obj.id) {
			obj.entity = obj.entity || "/Chips";
			obj.entity = (obj.entity.indexOf("/") != 0) ? ("/" + obj.entity) : obj.entity;
			contextPath = obj.entity + "('" + obj.id + "')";
			context = new sap.ui.model.Context(model, contextPath);
		}

		var s = obj.success;
		var e = obj.error;

		var batchRequests = [];
		var referenceObject = [];
		if(!(obj.noChip)) {
			if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
				dataBean.CHIP = context.getObject();
			}
			else {
				batchRequests.push(model.createBatchOperation(contextPath,"GET"));
				referenceObject.push("CHIP");
			}
		}
		obj.async = (obj.async) ? true : false;
		model.addBatchReadOperations(batchRequests);
		model.submitBatch(function(data, response) {
			var A = data.__batchResponses;
			for(var i=0,l=A.length; i<l; i++) {
				jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
				dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
			}
			if(s) {
				s(dataBean);
			}

		}, function(errorObject){
			if(e) {
				e(errorObject);
			}
			throw new Error("Failed to fetch Chip details");
		},obj.async);

		return dataBean;

	};

	this.getDataByEntity = function(obj) {
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Data");
		/*
		 * Copied from Hana Adapter Make Changes If required
		 */
		var that = this;
		var url = obj.uri;
		var model = obj.model || (url ? new sap.ui.model.odata.ODataModel(url,true) : getRuntimeModel());
		var expand = "";
		var expandArr = [];
		var filter = "";
		var select = "";
		var orderby = "";
		var top = null;
		var skip = null;
		var data = null;
		var succHandler = obj.success;
		var errHandler = obj.error;
		if(!(obj.entity)) {
			jQuery.sap.log.error("Entity or Context is missing for getDataByEntity call");
			throw Error("Entity or Context is missing for getDataByEntity call");
		}
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Data - " + obj.entity);
		entity = obj.entity;
		entity = (entity.indexOf("/") == 0) ? entity : ("/" + entity);
		if(obj.select) {
			if(typeof(obj.select) == "string") {
				select = obj.select;
			}
			else {
				select = obj.select;
			}
		}
		if(obj.expand) {
			if(obj.expand instanceof Array) {
				for(var i=0,l=obj.expand.length; i<l; i++) {
					expand += (expand) ? "," : "";
					expand += obj.expand[i];
				}
				expandArr = obj.expand;
			}
			else if(typeof(obj.expand) == "string") {
				expand = obj.expand;
				expandArr = obj.expand.split(",");
			}
		}
		if(obj.filter) {
			if(typeof(obj.filter) == "string") {
				filter = obj.filter;
			}
			else {
				filter = obj.filter;
			}
		}
		if(obj.orderby) {
			if(typeof(obj.orderby) == "string") {
				orderby = obj.orderby;
			}
			else {
				orderby = obj.orderby;
			}
		}
		obj.async = (obj.async) ? true : false;
		if(entity.indexOf("$select") == -1) {
			if(select) {
				entity += (entity.indexOf("?") == -1) ? ("?$select=" + select) : ("&$select=" + select); 
			}
		}
		if(entity.indexOf("$expand") == -1) {
			if(expand) {
				entity += (entity.indexOf("?") == -1) ? ("?$expand=" + expand) : ("&$expand=" + expand); 
			}
		}
		if(entity.indexOf("$filter") == -1) {
			if(filter) {
				entity += (entity.indexOf("?") == -1) ? ("?$filter=" + filter) : ("&$filter=" + filter); 
			}
		}
		if(entity.indexOf("$orderby") == -1) {
			if(orderby) {
				entity += (entity.indexOf("?") == -1) ? ("?$orderby=" + orderby) : ("&$orderby=" + orderby); 
			}
		}
		if(entity.indexOf("$top") == -1) {
			if(Number(top)) {
				entity += (entity.indexOf("?") == -1) ? ("?$top=" + Number(top)) : ("&$top=" + Number(top)); 
			}
		}
		if(entity.indexOf("$skip") == -1) {
			if(Number(skip)) {
				entity += (entity.indexOf("?") == -1) ? ("?$skip=" + Number(skip)) : ("&$skip=" + Number(skip)); 
			}
		}

		var success = function(d,s,x) {
			data = (d && d.results) ? d.results : d;
			if(succHandler) {
				succHandler(data);
			}
		}
		var error = function(d,s,x) {
			jQuery.sap.log.error(d);
			jQuery.sap.log.error(s);
			jQuery.sap.log.error(x);
			if(errHandler) {
				data = {d:d,s:s,x:x};
				errHandler(d,s,x);
			}
		}

		model.read(entity, null, null, obj.async, success, error);
		return data;
	};

	this.getDataByBatch = function() {
		jQuery.sap.log.info("Hana Adapter --> Calling Entity Batch Data");
	};
	
	this.handlePersonalizedTileDelete = function(tile, succ, err) {
		var modelerRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		modelerRef.remove("CHIP_USER",tile,succ,err); 
	};
	
	this.getPlatform = function() {
		jQuery.sap.log.info("Hana Adapter --> Fetching Platform");
		that.cache.platform = that.cache.platform || "hana";
		jQuery.sap.log.info("Hana Adapter --> Platform - " + that.cache.platform);
		return that.cache.platform;
	};

	this.addSystemToServiceUrl = function(url, system) {
		jQuery.sap.log.info("Hana Adapter --> Add System to Service Url");
		if(sap.ushell && sap.ushell.Container) {
			if(system) {
				url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url, system);
			}
			else {
				url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url);
			}
		}
		return url;
	};
	
	this.getHanaSystem = function() {
		var hashObj = hasher || window.hasher; 
		var hashArr = hashObj.getHashAsArray();
		if(hashArr && hashArr.length && hashArr[0]) {
			var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
			for(var i=0,l=hashParameters.length; i<l; i++) {
				if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
					return hashParameters[i].split("=")[1]; 
				}
			}
		}
		return "";
	}; 
	
	this.isTokenHandlingEnabledForODataRead = function() {
		return false;
	};

};

}; // end of sap/suite/ui/smartbusiness/adapter/hana/RuntimeServicesAdapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S3.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S3", {

	onInit : function() { 
		var that = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		var view = this.getView();
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		this.oRouter.attachRouteMatched(function(evt) {
			if (evt.getParameter("name") === "detail") {

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				view.setBindingContext(context);

				that.contextIndicatorId = view.getBindingContext().getProperty("ID") || evt.getParameter("arguments").contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');

				var model = new sap.ui.model.json.JSONModel();
				that.getView().byId("kpiAssociationTable").getBinding("items").filter(new sap.ui.model.Filter([new sap.ui.model.Filter("SOURCE_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId) , new sap.ui.model.Filter("TARGET_INDICATOR", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId)],false));
				that.getView().byId("tags").getBinding("items").filter(new sap.ui.model.Filter([new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.EQ, that.contextIndicatorId) , new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1), new sap.ui.model.Filter("TYPE", sap.ui.model.FilterOperator.EQ, "IN")],true));
			}
		}, this);

		this.oHeaderFooterOptions =
		{
				bSuppressBookmarkButton: {},
				oEditBtn : {
					sI18nBtnTxt : "ADD_ASSOCIATION",
					onBtnPressed : function(evt) {
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"manageSBKPIAssociation", route:"associationCreate", context:that.getView().getBindingContext().sPath.substring(1)});
					}
				}
		};
		that.byId("idDirection").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		/*that.byId("associationEdit").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		that.byId("associationDelete").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));*/
	},

	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		var that = this;
		if(sourceCount==null && targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"(0)";
		}
		if(sourceCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+targetCount+")";
		}
		if(targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+sourceCount+")";
		}
		var count = (parseInt(sourceCount)+parseInt(targetCount));
		return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+count.toString()+")";
	},

	formatStatus: function(status) {
		return ((status) ? this.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") 
				: this.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
	},

	formatGoalType: function(goalType) {
		var goalTypeText = null;
		switch(goalType) {
		case 'MA': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
		case 'MI': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
		case 'RA': goalTypeText = this.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
		default : goalTypeText = this.oApplicationFacade.getResourceBundle().getText("NONE");
		}
		return goalTypeText;
	},

	formatTags: function(tag) { 
		return ((this.getView().byId("tags").getItems().length > 1) ? (', ' + tag) : (tag));
	},
	formatStatusOfAssociation: function(is_active,counter){
		var that = this;
		if(counter=="2"){
			var str = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE")+","+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT");
			return str;
		}
		if(is_active==0){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		if(is_active==1){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
	},

	formatProperties: function(name, value)  {
		var prop = ((this.getView().byId("assoProperties").getItems().length > 1) ? (", " + name + " : " + value) : (name + " : " + value+","));
		return prop;
	},
	formatAssociationType: function(associationType){
		if(associationType=="SUPPORTING"){
			return this.oApplicationFacade.getResourceBundle().getText("SUPPORTING");
		}
		else{
			return this.oApplicationFacade.getResourceBundle().getText("CONFLICTING");
		}
	},
	formatArrowDirection: function(source_indicator) {
		return ((source_indicator == this.contextIndicatorId) ? ("sap-icon://arrow-right") : ("sap-icon://arrow-left"));  
	},

	formatTargetIndicatorText: function(sourceIndicator, targetIndicator, sourceIndicatorTitle, targetIndicatorTitle) { 
		var indicatorText = null;
		if(targetIndicator == this.contextIndicatorId) {
			indicatorText = sourceIndicatorTitle;
		}
		else {
			indicatorText = targetIndicatorTitle;
		}
		return indicatorText;
	},

	handleAssociationEdit: function(evt) {
		var that = this;
		var associationPathText;
		if(evt.getSource().getBindingContext().getObject().COUNTER=="1"){
			associationPathText = evt.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS");
		}
		else{
			associationPathText = evt.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS").replace("IS_ACTIVE=1","IS_ACTIVE=0")
		}
		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"manageSBKPIAssociation", route:"associationEdit", context:(that.getView().getBindingContext().sPath.substring(1).replace("INDICATORS_MODELER","INDICATORS") + "/" + associationPathText)});
	},

	handleAssociationDelete: function(event) {
		var that = this;
		that.entity = event.getSource().getBindingContext().sPath.substring(1).replace("ASSOCIATIONS_MODELER","ASSOCIATIONS");
		that.entityObj=that.formOldObjectForAssociation(that.entity);

		var confirmDialog = new sap.m.Dialog({
			title:that.oApplicationFacade.getResourceBundle().getText("DELETE"),
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DELETE_ASSOCIATION")})],
			beginButton: new sap.m.Button({
				text:"Ok",
				press: function(oEvent){
				
					confirmDialog.close();
					var ODataModel = that.oApplicationFacade.getODataModel();
					/*ODataModel.remove(that.entity,null,function(data){
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
						ODataModel.refresh();
					
					
					},
					function(error){
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
					});*/
					
					//ajax call to delete the association
					that.metadataRef.remove("ASSOCIATION",that.entityObj,function(data){
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
						ODataModel.refresh();
					},
					function(error){
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
					});
					 //////////////////
					
					}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){
					confirmDialog.close();}
			})                                              
		});
		confirmDialog.open();                                                                 
	},
	formOldObjectForAssociation: function(str) {
		var that = this;
		
		var oldAssociationPayload={};
		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
		
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S4.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/association/view/nameValueTable.css");

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S4", {
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 */
	onInit: function() {
		var that = this; 
		var view = this.getView();
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");

		this.errorMessages = [];
		this.errorState = false;

		var onAfterAssociationTypeFetch = function (d) {
			if(that.initialAssociationType) {
				that.byId("associationTypeSelect").setSelectedKey(that.initialAssociationType);
				that.byId("associationTypeSelect").setTooltip(that.byId("associationTypeSelect").getSelectedItem().getText());
			}
			else {
				var title = d.getParameters().data && d.getParameters().data.results && d.getParameters().data.results[0] && d.getParameters().data.results[0].TITLE;
				that.byId("associationTypeSelect").setTooltip(title);
			}
			
		};
		
		this.byId("associationTypeSelect").getBinding("items").attachDataReceived(onAfterAssociationTypeFetch);
		
		this.oRouter.attachRouteMatched(function(evt) {
			that.viewMode = evt.getParameter("name");
			that.directionChange=0;
			that.getView().byId("associationPropertyValue").setValueState("None");
			that.getView().byId("associationPropertyName").setValueState("None");

			if (evt.getParameter("name") === "associationEdit") {

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				that.associationContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").associationPath));

				view.sourceIndicatorContexts = {contextPath:evt.getParameter("arguments").contextPath, context:context};
				view.associationContexts = {contextPath:evt.getParameter("arguments").associationPath, context:that.associationContext};

				view.setBindingContext(that.associationContext);

				that.modelForSelectAssociation = new sap.ui.model.json.JSONModel();
				that.byId("associationTypeSelect").setModel(that.modelForSelectAssociation, "associationSelectModel");

				that.sourceIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("sourceIndicatorContent").setModel(that.sourceIndicatorModel, "sourceIndicator");

				that.targetIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("targetIndicatorContent").setModel(that.targetIndicatorModel, "targetIndicator");

				that.associationPropertiesModel = new sap.ui.model.json.JSONModel();
				that.byId("propertyNameValueBox").setModel(that.associationPropertiesModel, "associationProp");

				/// Adapter Implementation ---->>
				var associationFetchCallBack = function(data) {
					var association = data.ASSOCIATION;
					var source = data.SOURCE_INDICATOR_INFO;
					var target = data.TARGET_INDICATOR_INFO;
					var properties = data.PROPERTIES;

					//that.modelForSelectAssociation.setData({TITLE:association.TITLE, TYPE:association.TYPE});
					that.byId("associationTypeSelect").setSelectedKey(association.TYPE);
					if(that.byId("associationTypeSelect").getSelectedItem()) {
						that.byId("associationTypeSelect").setTooltip(that.byId("associationTypeSelect").getSelectedItem().getText());
					}
					
					that.associationData = association;
					that.initialAssociationType = association.TYPE;

					that.contextIndicatorId = data.SOURCE_INDICATOR_INFO.ID;

					that.sourceIndicatorModel.setData({INDICATOR:source});
					if(source && source.length) {
						that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (source[0].TITLE || ""));
						that.initialSourceIndicatorId = source[0].ID;
					}
					else {
						that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (source.TITLE || ""));
						that.initialSourceIndicatorId = source.ID;
					}

					that.targetIndicatorModel.setData({INDICATOR:target});
					if(target && target.length) {
						that.byId("selectedKpiOpiId").setValue(target[0].TITLE);
						that.initialTargetIndicatorId = target[0].ID;
					}
					else {
						that.byId("selectedKpiOpiId").setValue(target.TITLE);
						that.initialTargetIndicatorId = target.ID;
					}

					that.associationPropertiesModel.setData({PROPERTIES:properties});
					//Storing initial of Properties model
					that.oldPropertiesList = $.extend(true, {}, that.getView().byId('propertyNameValueBox').getModel("associationProp"));
				};

				var associationFetchErrCallBack = function() {

				};
				that.metadataRef.getAssociationById({context:view.associationContexts.context, async:false, source:true, target:true, properties:true, success:associationFetchCallBack, error:associationFetchErrCallBack, model:that.oApplicationFacade.getODataModel()});
			}
			else if (evt.getParameter("name") === "associationCreate") {
				that.sourceIndicatorModel = new sap.ui.model.json.JSONModel();
				that.byId("sourceIndicatorContent").setModel(that.sourceIndicatorModel, "sourceIndicator");

				that.associationData = {};

				that.targetIndicatorModel = new sap.ui.model.json.JSONModel();
				that.targetIndicatorModel.setData({INDICATOR:[]});
				that.byId("targetIndicatorContent").setModel(that.targetIndicatorModel, "targetIndicator");

				that.associationPropertiesModel = new sap.ui.model.json.JSONModel();
				that.byId("propertyNameValueBox").setModel(that.associationPropertiesModel, "associationProp");
				that.associationPropertiesModel.setData({PROPERTIES:[]});
				that.oldPropertiesList = $.extend(true, {}, that.associationPropertiesModel);

				this.byId("selectedKpiOpiId").setEditable(true);

				var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
				that.associationContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").associationPath));

				view.sourceIndicatorContexts = {contextPath:evt.getParameter("arguments").contextPath, context:context};
				view.associationContexts = {contextPath:evt.getParameter("arguments").associationPath, context:that.associationContext};
				view.setBindingContext(context);
				that.byId("selectedKpiOpiId").setValue("");

				var sourceIndicatorFetchCallBack = function(data) {
					var sourceIndicator = data.INDICATOR;
					that.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": " + (sourceIndicator.TITLE || ""));
					that.sourceIndicatorModel.setData({INDICATOR:sourceIndicator});
					that.contextIndicatorId = sourceIndicator.ID;
				};

				var sourceIndicatorFetchErrCallBack = function(d,s,x) {

				};

				if(context.getObject()) {
					that.contextIndicatorId = view.getBindingContext().getProperty("ID");
					this.byId("sourceIndicatorText").setText(that.oApplicationFacade.getResourceBundle().getText("CURRENT_KPI_OPI")+": "+ (view.getBindingContext().getProperty("TITLE") || ""));
					that.sourceIndicatorModel.setData({INDICATOR:that.oApplicationFacade.getODataModel().oData[evt.getParameter("arguments").contextPath]});
				}
				else {
					that.metadataRef.getKPIById({context:view.sourceIndicatorContexts.context, async:false, success:sourceIndicatorFetchCallBack, error:sourceIndicatorFetchErrCallBack, model:that.oApplicationFacade.getODataModel()});
				}
				if(this.byId("associationTypeSelect").getSelectedItem()) {
					this.byId("associationTypeSelect").setSelectedKey(this.byId("associationTypeSelect").getItems()[0].getKey());
					this.byId("associationTypeSelect").setTooltip(this.byId("associationTypeSelect").getSelectedItem().getText());
				}
			}
		}, this);

		this.oHeaderFooterOptions = {
				bSuppressBookmarkButton : {},
				onBack: function(){
					that.handleOnBack();
				},
				oEditBtn : {
					sId: "SAVE",
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.handleCancel(evt);
					}
				}]
		};
		this.oErrorOptions = {
				onBack: function(){
					that.handleOnBack();
				},
				oNegativeAction : {
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						that.utilsRef.handleMessagePopover(event,that);
					}
				},
				buttonList : [{
					sId: "SAVE",
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.handleCancel(evt);
					}
				}]
		};
		var delText = that.oApplicationFacade.getResourceBundle().getText("DELETE")+" "+that.oApplicationFacade.getResourceBundle().getText("DRAFT");
		this.oHeaderFooterOptionsForDraft = {
				bSuppressBookmarkButton : {},
				onBack: function(){
					that.handleOnBackForDraft();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.handleCancelForDraft(evt);
					}
				},{
					sI18nBtnTxt : delText,
					onBtnPressed : function(evt) {
						that.handleDeleteForDraft(evt,delText);
					}
				}]
		};
		that.byId("directionArrowAssociation").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
		/*that.byId("deleteAssociationProp").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));*/

		this.oErrorOptionsForDraft = {
				bSuppressBookmarkButton : {},
				onBack: function(){
					that.handleOnBackForDraft();
				},
				oNegativeAction : {
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						that.utilsRef.handleMessagePopover(event,that);
					}
				},

				buttonList : [{
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(0);
					}
				},{
					sI18nBtnTxt : "SAVE_AND_ACTIVATE",
					onBtnPressed : function(evt) {
						view.getController().saveAndExit(1);
						view.getController().activateAssociation();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						view.getController().saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.handleCancelForDraft(evt);
					}
				},{
					sI18nBtnTxt : delText,
					onBtnPressed : function(evt) {
						that.handleDeleteForDraft(evt,delText);
					}
				}]
		};
	},

	setFooterOnError : function(){
		var that = this;
		if(that.errorMessages.length>1){
			switch(that.viewMode){
			case "associationCreate" :
				that.setHeaderFooterOptions(that.oErrorOptions);
				break;
			case "associationEdit" :
				that.setHeaderFooterOptions(that.oErrorOptionsForDraft);
				break;
			}
		}else{
			switch(that.viewMode){
			case "associationCreate" :
				that.setHeaderFooterOptions(that.oHeaderFooterOptions);
				break;

			case "associationEdit" :
				that.setHeaderFooterOptions(that.oHeaderFooterOptionsForDraft);
				break;
			}
		}

	},

	handleOnBack : function(){
		var that = this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
				press: function(){
					if(that.viewMode=="associationEdit"){
						that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
					}
					else if(that.viewMode=="associationCreate"){
						that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
					}
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){backDialog.close();}
			})                                              
		});
		if(that.anythingChangedOnBack()==true){
			backDialog.open();
		}
		else{
			if(that.viewMode=="associationEdit"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(that.viewMode=="associationCreate"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		}
	},

	handleOnBackForDraft : function(){
		var that = this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
				press: function(){
					if(that.viewMode=="associationEdit"){
						that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
					}
					else if(that.viewMode=="associationCreate"){
						that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
					}
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){backDialog.close();}
			})                                              
		});
		if(that.anythingChangedOnBack()==true){
			backDialog.open();
		}
		else{
			if(that.viewMode=="associationEdit"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(that.viewMode=="associationCreate"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		}
	},

	handleCancel : function(evt){
		var that = this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
				press: function(){that.cancel();}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){backDialog.close();}
			})                                              
		});
		if(that.anythingChangedOnBack()==true){
			backDialog.open();
		}
		else{
			if(that.viewMode=="associationEdit"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(that.viewMode=="associationCreate"){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		}
	},

	handleCancelForDraft : function(){
		var that = this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
				press: function(){view.getController().cancel();}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){backDialog.close();}
			})                                              
		});
		backDialog.open();
	},

	handleDeleteForDraft : function(evt,delText){
		var that = this;
		var confirmDialog = new sap.m.Dialog({
			title: delText,
			type:"Message",
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("OK"),
				press: function(){
					that.errorMessages=[];
					that.errorState = false;
					confirmDialog.close();
					that.deleteDraft();
					if(that.viewMode=="associationEdit"){
						that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
					}
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){
					confirmDialog.close();
				}
			})                                              
		});
		confirmDialog.open();
	},
	formOldAssociationObject: function(str) {
		var that = this;
		var oldAssociationPayload={};
		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
	},
	anythingChangedOnBack: function(){
		var that = this;
		var sPath = (that.viewMode != "associationCreate") ? that.associationContext.sPath : null;
		var oldAssociationObject = sPath ? that.formOldAssociationObject(sPath) : {TARGET_INDICATOR:"",SOURCE_INDICATOR:"",TYPE:this.byId("associationTypeSelect").getItems()[0].getKey(),IS_ACTIVE:0};
		var newAssociationProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp").getData().PROPERTIES;
		var oldAssociationProperties = that.oldPropertiesList ? that.oldPropertiesList.getData().PROPERTIES : [];

		var updatePropertiesPayload = that.utilsRef.dirtyBitCheck({
			oldPayload : oldAssociationProperties,
			newPayload : newAssociationProperties,
			objectType : "ASSOCIATION_PROPERTIES"
		});
		if(oldAssociationObject.TARGET_INDICATOR != (that.targetIndicatorModel.getData().INDICATOR.ID || "") || that.directionChange==1 || oldAssociationObject.TYPE!=that.byId("associationTypeSelect").getSelectedItem().getKey() || updatePropertiesPayload.updates.length>0 || updatePropertiesPayload.deletes.length>0){
			return true;
		}
		else{
			return false;
		}
	},
	deleteDraft: function(){
		var that = this;
		var sPath = that.associationContext.sPath;
		var deletObject = that.formOldAssociationObject(sPath);
		that.metadataRef.remove("ASSOCIATION",deletObject,function(data){
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
			//ODataModel.refresh();
		},
		function(error){
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED")
			});
			that.utilsRef.setErrorState(that);
		});
	},
	changeValueState: function(){
		var that = this;
		that.getView().byId("associationPropertyValue").setValueState("None");
		that.getView().byId("associationPropertyName").setValueState("None");
	},
	getHeaderFooterOptions : function() {
		var that = this;
		var sPath = that.associationContext.sPath;
		var IS_ACTIVE = parseInt(sPath.charAt(sPath.indexOf("=",sPath.search("IS_ACTIVE"))+1));
		if(that.viewMode=="associationEdit"){
			if(IS_ACTIVE==1){
				return this.oHeaderFooterOptions;
			}
			else{
				return this.oHeaderFooterOptionsForDraft;
			}
		}
		else if(that.viewMode=="associationCreate"){
			return this.oHeaderFooterOptions;
		}
	},
	handleAssociationTypeChange : function(evt){
		var that = this;
		var modelForProperties = this.getView().byId('propertyNameValueBox').getModel("associationProp");
		modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];
		for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
			if(modelForProperties.getData().PROPERTIES[i].TYPE=="SUPPORTING"){
				modelForProperties.getData().PROPERTIES[i].TYPE="CONFLICTING";
			}
			else{
				modelForProperties.getData().PROPERTIES[i].TYPE="SUPPORTING";
			}
		}
		modelForProperties.updateBindings();
		evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
//		if(this.viewMode == "associationEdit") {
//		if((this.byId("associationTypeSelect").getSelectedItem().getKey() != this.initialAssociationType) || (this.sourceIndicatorModel.getData().INDICATOR.ID != this.initialSourceIndicatorId) || (this.targetIndicatorModel.getData().INDICATOR.ID != this.initialTargetIndicatorId)) {
//		this.setBtnEnabled("SAVE",false);
//		}
//		else {
//		this.setBtnEnabled("SAVE",true);
//		}
//		}
	},

	handleReverseAssociationDirection : function(){
		var that = this;
		if(that.directionChange==0){
			that.directionChange=1;
		}
		else{
			that.directionChange=0;
		}
		var i,temp;
		var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
		var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

		if(targetIndicator.length==0){
			this.getView().byId("selectedKpiOpiId").setValueState("Error");
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED"));
			this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED")});
			that.utilsRef.setErrorState(that);
		}
		else{
			this.byId("sourceIndicatorContent").getModel("sourceIndicator").setData({INDICATOR:targetIndicator});
			this.byId("targetIndicatorContent").getModel("targetIndicator").setData({INDICATOR:sourceIndicator});

			//Handle reverse for properties
			var modelForProperties = this.getView().byId('propertyNameValueBox').getModel("associationProp");
			modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

			for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
				temp = null;
				temp = modelForProperties.getData().PROPERTIES[i].SOURCE_INDICATOR;
				modelForProperties.getData().PROPERTIES[i].SOURCE_INDICATOR = modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR;
				modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR = temp;
			}      
			modelForProperties.updateBindings();
		}
//		if(this.viewMode == "associationEdit") {
//		if((this.byId("associationTypeSelect").getSelectedItem().getKey() != this.initialAssociationType) || (this.sourceIndicatorModel.getData().INDICATOR.ID != this.initialSourceIndicatorId) || (this.targetIndicatorModel.getData().INDICATOR.ID != this.initialTargetIndicatorId)) {
//		this.setBtnEnabled("SAVE",false);
//		}
//		else {
//		this.setBtnEnabled("SAVE",true);
//		}
//		}
	},

	listAllKpis:function(){ 
		var that = this;

		that.hanaViewValueHelpDialog = that.hanaViewValueHelpDialog || new sap.m.SelectDialog({
			title: that.oApplicationFacade.getResourceBundle().getText("SELECT_VIEW"),
			noDataText: that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items: {
				path: "/INDICATORS_MODELER",
				template: new sap.m.ObjectListItem({
					title:"{TITLE}",
					number:"{parts:[{path:'ASSOCIATION_SOURCE_COUNT'},{path:'ASSOCIATION_TARGET_COUNT'}], formatter:'.formatAssociationCount'}",
					firstStatus: new sap.m.ObjectStatus({
						text: that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS"),
					}),
					attributes: [
					             new sap.m.ObjectAttribute({
					            	 text: "{ID}"
					             })
					             ]
				}),
			},
			confirm: function(oEvent){
				var i;
				if (that.viewMode === "associationEdit"){                            
				}
				else if (that.viewMode === "associationCreate"){
					if(that.getView().byId("selectedKpiOpiId").getValueState()==="Error"){
						that.getView().byId("selectedKpiOpiId").setValueState("None");
					}
				}
				that.byId("selectedKpiOpiId").setValue(oEvent.getParameter("selectedItem").getBindingContext().getProperty("TITLE"));
				that.targetIndicatorModel.setData({INDICATOR:oEvent.getParameter("selectedItem").getBindingContext().getObject()});
				that.targetIndicatorModel.updateBindings();

				//Change Properties Target kpi
				var modelForProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp");
				modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

				for(i=0;i<modelForProperties.getData().PROPERTIES.length;i++){
					modelForProperties.getData().PROPERTIES[i].TARGET_INDICATOR = oEvent.getParameter("selectedItem").getBindingContext().getProperty("ID");
				}      
				modelForProperties.updateBindings();
//				if(that.viewMode == "associationEdit") {
//				if((that.byId("associationTypeSelect").getSelectedItem().getKey() != that.initialAssociationType) || (that.sourceIndicatorModel.getData().INDICATOR.ID != that.initialSourceIndicatorId) || (that.targetIndicatorModel.getData().INDICATOR.ID != that.initialTargetIndicatorId)) {
//				that.setBtnEnabled("SAVE",false);
//				}
//				else {
//				that.setBtnEnabled("SAVE",true);
//				}
//				}
			},
			liveChange: function(oEvent){
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterById = new sap.ui.model.Filter("tolower(ID)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterByTitle = new sap.ui.model.Filter("tolower(TITLE)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterCurrentId = new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.NE, that.contextIndicatorId);
				var oFilterIsActive = new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1);
				var oBinding = oEvent.getSource().getBinding("items");
				var firstFilters = new sap.ui.model.Filter([oFilterById,oFilterByTitle], false);
				var secondFilters = new sap.ui.model.Filter([oFilterCurrentId,oFilterIsActive], true);
				oBinding.filter(new sap.ui.model.Filter([firstFilters, secondFilters], true));
			}
		});    
		that.hanaViewValueHelpDialog.setModel(that.oApplicationFacade.getODataModel());
		var filters = [];
		filters.push(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
		filters.push(new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.NE, that.contextIndicatorId));
		that.hanaViewValueHelpDialog.getBinding("items").filter(new sap.ui.model.Filter(filters,true));
		that.hanaViewValueHelpDialog.open();
	},

	addNewProperty: function() {
		var that = this;
		var propertyPresent = 0;
		if(this.getView().byId("associationPropertyName").getValue() && this.getView().byId("associationPropertyValue").getValue()) {

			if(this.viewMode=="associationEdit"){
				this.isActiveValue = 0;
			}
			else if(this.viewMode=="associationCreate"){

				var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;
				if(targetIndicator.length==0){
					this.getView().byId("selectedKpiOpiId").setValueState("Error");
					that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED"));
					this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("TARGET_KPI_NOT_SELECTED")});
					that.utilsRef.setErrorState(that);
					return;
				}
				this.isActiveValue = 0;
			}                    
			this.getView().byId("associationPropertyName").setValueState("None");
			if(this.getView().byId("associationPropertyValue").getValue()){
				this.getView().byId("associationPropertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel("associationProp");
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];

				for(var i=0;i<propertyModel.getData().PROPERTIES.length;i++){
					if(propertyModel.getData().PROPERTIES[i].NAME == this.getView().byId("associationPropertyName").getValue() && propertyModel.getData().PROPERTIES[i].VALUE == this.getView().byId("associationPropertyValue").getValue()){
						propertyPresent = 1;
					}
				}
				if(propertyPresent == 0){
					propertyModel.getData().PROPERTIES.push({NAME:this.getView().byId("associationPropertyName").getValue(),VALUE:this.getView().byId("associationPropertyValue").getValue(), TYPE:this.byId("associationTypeSelect").getSelectedItem().getKey(), SOURCE_INDICATOR:(this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.ID || this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0].ID), TARGET_INDICATOR:(this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.ID || this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0].ID), IS_ACTIVE:this.isActiveValue});
					propertyModel.updateBindings();
					this.getView().byId("associationPropertyName").setValue("");
					this.getView().byId("associationPropertyValue").setValue("");
				}
				else{
					this.getView().byId("associationPropertyValue").setValueState("Error");
					this.getView().byId("associationPropertyName").setValueState("Error");
					that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
					this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE")});
					that.utilsRef.setErrorState(that);
				}
			}
			else {
				this.getView().byId("associationPropertyValue").setValueState("Error");
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
				this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE")});
				that.utilsRef.setErrorState(that);
			}
		}
		else {
			if(!this.getView().byId("associationPropertyName").getValue()){
				this.getView().byId("associationPropertyName").setValueState("Error");
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
				this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME")});
				that.utilsRef.setErrorState(that);
			}
			else{
				this.getView().byId("associationPropertyValue").setValueState("Error");
				this.getView().byId("associationPropertyName").setValueState("None");
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ENTER_THE_PROPERTY_VALUE"));
				this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("ENTER_THE_PROPERTY_VALUE")});
				that.utilsRef.setErrorState(that);
			}
//			this.getView().byId("associationPropertyName").setValueState("Error");
//			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) { 
		var that = this;
		var path = evt.getSource().getBindingContext("associationProp").getPath();
		evt.getSource().getBindingContext("associationProp").getModel().getData().PROPERTIES.splice(path
				.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext("associationProp").getModel().updateBindings();
	},

	saveAndExit: function(isSaveAndActivate) {
		var that = this;
		that.errorMessages = [];
		this.saveAssociation(isSaveAndActivate);

		if(isSaveAndActivate==0){
			//that.oApplicationFacade.getODataModel().refresh();
			if(this.viewMode=="associationEdit" && that.errorState == false){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(this.viewMode=="associationCreate" && that.errorState == false){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		}
	},

	activateAssociation: function() {
		var that = this;
		var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
		var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

		that.ODataModel = that.oApplicationFacade.getODataModel();



		/*that.ODataModel.create("/ACTIVE_ASSOCIATIONS", payload, null, function(data) {
                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVATED"));
              }, function(err) {
                     that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_ACTIVATION_FAILED"));
              });   
		 */

		/****ACTIVATE ASSOCIATION****/
		that.metadataRef.create("ACTIVATE_ASSOCIATION",that.payload,null,
				function() {
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVATED"));
			that.oApplicationFacade.getODataModel().refresh();
			if(that.viewMode=="associationEdit" && that.errorState == false){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
			}
			else if(that.viewMode=="associationCreate" && that.errorState == false){
				that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
			}
		},
		function(err) {
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_ACTIVATION_FAILED"), err.responseText);
			this.errorMessages.push({"type":"Error","title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_ACTIVATION_FAILED"),"description" : err.responseText});
			that.utilsRef.setErrorState(that);
			
		});
		//that.oApplicationFacade.getODataModel().refresh();
		that.setFooterOnError();
		/*****************************************/
	},

	saveAndCreateNew: function() {
		var that = this;
		that.errorMessages = [];
		this.saveAssociation();

		that.byId("selectedKpiOpiId").setValue("");
		that.targetIndicatorModel.setData({});
		that.targetIndicatorModel.updateBindings();

		//Change Properties Target kpi
		var modelForProperties = that.getView().byId('propertyNameValueBox').getModel("associationProp");
		modelForProperties.getData().PROPERTIES = modelForProperties.getData().PROPERTIES || [];

		modelForProperties.getData().PROPERTIES = [];   
		modelForProperties.updateBindings();
		that.setFooterOnError();
		//this.oApplicationFacade.getODataModel().refresh();
	},

	cancel: function() {
		var that = this;
		if(that.viewMode=="associationEdit"){
			that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath.replace("INDICATORS","INDICATORS_MODELER")});
		}
		else if(that.viewMode=="associationCreate"){
			that.utilsRef.replaceHash({action:"manageSBKPIAssociation", route:"detail", context:that.getView().sourceIndicatorContexts.contextPath});
		}
	},

	formOldObjectForAssociation: function(sourceIndicator,targetIndicator) {
		var that = this;

		var sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR.length ? that.sourceIndicatorModel.getData().INDICATOR[0] : that.sourceIndicatorModel.getData().INDICATOR;
		var oldAssociationPayload = {TYPE:this.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};
		var str = that.associationContext.sPath;

		oldAssociationPayload.TYPE = str.substring(str.indexOf("'",str.search("TYPE"))+1, str.indexOf("'",str.indexOf("'",str.search("TYPE"))+1));
		oldAssociationPayload.SOURCE_INDICATOR= str.substring(str.indexOf("'",str.search("SOURCE_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("SOURCE_INDICATOR"))+1));
		oldAssociationPayload.TARGET_INDICATOR= str.substring(str.indexOf("'",str.search("TARGET_INDICATOR"))+1, str.indexOf("'",str.indexOf("'",str.search("TARGET_INDICATOR"))+1));
		oldAssociationPayload.IS_ACTIVE= parseInt(str.substring(str.indexOf("=",str.search("IS_ACTIVE"))+1, str.indexOf("=",str.search("IS_ACTIVE"))+2));

		return oldAssociationPayload;
	},

	performBatchOperation : function(batchArray){
		var that = this;
		that.oDataModel = that.oApplicationFacade.getODataModel();
		that.oDataModel.addBatchChangeOperations(batchArray);
		that.oDataModel.submitBatch(function(data,response,errorResponse){
			if(errorResponse.length)
			{      
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED")
				});
				that.utilsRef.setErrorState(that);
				//return;
			}
			var error = false;
			var responses = data.__batchResponses[0].__changeResponses;
			for(var key in responses)
				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
					error = true;                     
			if(error){
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED")
				});
				that.utilsRef.setErrorState(that);
			}
			else
			{      
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
			}
		}, function(error){
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED")
			});
			that.utilsRef.setErrorState(that);
		},false);
	},

	savePropertiesHelper : function(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator, isSaveAndActivate){
		var that = this;
		that.batchArray = [];
		var propertyPayload;
		var propertyPayloadArray = [];
		that.oDataModel = that.oApplicationFacade.getODataModel();


		for (var i = 0; i < associationPropertiesPayload.PROPERTIES.length; i++) {
			propertyPayload = {}
			propertyPayload.IS_ACTIVE = 0;
			propertyPayload.TYPE = associationPropertiesPayload.PROPERTIES[i].TYPE;
			propertyPayload.NAME = associationPropertiesPayload.PROPERTIES[i].NAME;
			propertyPayload.VALUE = associationPropertiesPayload.PROPERTIES[i].VALUE;
			propertyPayload.SOURCE_INDICATOR = associationPropertiesPayload.PROPERTIES[i].SOURCE_INDICATOR;
			propertyPayload.TARGET_INDICATOR = associationPropertiesPayload.PROPERTIES[i].TARGET_INDICATOR;
			propertyPayloadArray.push(propertyPayload);
		}

		if((that.viewMode === "associationEdit" && !(that.associationData.IS_ACTIVE)) || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && isSaveAndActivate)){

			var finalAssociationEditPayload={};
			finalAssociationEditPayload.DELETE={};
			finalAssociationEditPayload.CREATE={};


			var that = this;
			var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

			that.ODataModel = that.oApplicationFacade.getODataModel();
			that.payload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID};




			if(updateAssociationPayload.updates.length!=0){
				var entityForDelete = that.associationContext.sPath;
				that.batchArray.push(that.oDataModel.createBatchOperation(entityForDelete,"DELETE"));
				that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATIONS","POST",updateAssociationPayload.updates[0]));
			}

			var oldPropertyArray = that.oldPropertiesList.getData().PROPERTIES;
			var updatePropertiesPayload = that.utilsRef.dirtyBitCheck({
				oldPayload : oldPropertyArray,
				newPayload : propertyPayloadArray,
				objectType : "ASSOCIATION_PROPERTIES"
			});

			if(updateAssociationPayload.updates.length!=0 ){
				finalAssociationEditPayload.DELETE={"TYPE": updateAssociationPayload.deletes[0].TYPE, "SOURCE_INDICATOR": updateAssociationPayload.deletes[0].SOURCE_INDICATOR,
						"TARGET_INDICATOR":updateAssociationPayload.deletes[0].TARGET_INDICATOR,"IS_ACTIVE":updateAssociationPayload.deletes[0].IS_ACTIVE,"PROPERTY":oldPropertyArray};

				finalAssociationEditPayload.CREATE={"TYPE": updateAssociationPayload.updates[0].TYPE,"SOURCE_INDICATOR": updateAssociationPayload.updates[0].SOURCE_INDICATOR,
						"TARGET_INDICATOR":updateAssociationPayload.updates[0].TARGET_INDICATOR,"IS_ACTIVE":updateAssociationPayload.updates[0].IS_ACTIVE,"PROPERTY":propertyPayloadArray

				};
				//update association
				that.metadataRef.update("ASSOCIATION",finalAssociationEditPayload,null,
						function() {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
					that.oApplicationFacade.getODataModel().refresh();
				},
				function(err) {
					that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"),
						"description":err.responseText
					});
					that.utilsRef.setErrorState(that);
				});
				//that.oApplicationFacade.getODataModel().refresh();
			}
			//If only properties are changed
			else{
				if(updatePropertiesPayload.deletes.length>0){
					finalAssociationEditPayload.TYPE = updatePropertiesPayload.deletes[0].TYPE;
					finalAssociationEditPayload.TARGET_INDICATOR = updatePropertiesPayload.deletes[0].TARGET_INDICATOR;
					finalAssociationEditPayload.SOURCE_INDICATOR = updatePropertiesPayload.deletes[0].SOURCE_INDICATOR;
					finalAssociationEditPayload.IS_ACTIVE = updatePropertiesPayload.deletes[0].IS_ACTIVE;
				}
				if(updatePropertiesPayload.updates.length>0){
					finalAssociationEditPayload.TYPE = updatePropertiesPayload.updates[0].TYPE;
					finalAssociationEditPayload.TARGET_INDICATOR = updatePropertiesPayload.updates[0].TARGET_INDICATOR;
					finalAssociationEditPayload.SOURCE_INDICATOR = updatePropertiesPayload.updates[0].SOURCE_INDICATOR;
					finalAssociationEditPayload.IS_ACTIVE = updatePropertiesPayload.updates[0].IS_ACTIVE;
				}
				finalAssociationEditPayload.PROPERTY = {remove:updatePropertiesPayload.deletes, create:updatePropertiesPayload.updates};
				delete finalAssociationEditPayload.CREATE;
				delete finalAssociationEditPayload.DELETE;
				//update association
				that.metadataRef.update("ASSOCIATION",finalAssociationEditPayload,null,
						function() {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
					that.oApplicationFacade.getODataModel().refresh();
				},
				function(err) {
					that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"),
						"description":err.responseText
					});
					that.utilsRef.setErrorState(that);
				});
				//that.oApplicationFacade.getODataModel().refresh();
			}
			/*if(updatePropertiesPayload.deletes.length!=0){

                           var flag;
                           for(var i=0;i<updatePropertiesPayload.deletes.length;i++){
                                  flag = 0;
                                  if(that.batchArray.length>0){
                                         for(var j=0;j<that.batchArray.length;j++){
                                                var requestUri = that.batchArray[j].requestUri;
                                                var str = requestUri.substring(0,requestUri.indexOf('('));
                                                var sourceIndicator = requestUri.substring(requestUri.indexOf("'",requestUri.search("SOURCE_INDICATOR"))+1,requestUri.indexOf("'",requestUri.indexOf("'",requestUri.search("SOURCE_INDICATOR"))+1));
                                                var targetIndicator = requestUri.substring(requestUri.indexOf("'",requestUri.search("TARGET_INDICATOR"))+1,requestUri.indexOf("'",requestUri.indexOf("'",requestUri.search("TARGET_INDICATOR"))+1));

                                                if(that.batchArray[j].method=="DELETE" && str=="ASSOCIATIONS" && sourceIndicator==updatePropertiesPayload.deletes[i].SOURCE_INDICATOR && targetIndicator==updatePropertiesPayload.deletes[i].TARGET_INDICATOR){
                                                       flag=1;
                                                }
                                         }
                                  }
                                  if(flag==0){
                                         var entityPropDelete = "/ASSOCIATION_PROPERTIES(TYPE='"+updatePropertiesPayload.deletes[i].TYPE+"',NAME='"+updatePropertiesPayload.deletes[i].NAME+"',VALUE='"+updatePropertiesPayload.deletes[i].VALUE+"',SOURCE_INDICATOR='"+updatePropertiesPayload.deletes[i].SOURCE_INDICATOR+"',TARGET_INDICATOR='"+updatePropertiesPayload.deletes[i].TARGET_INDICATOR+"',IS_ACTIVE="+updatePropertiesPayload.deletes[i].IS_ACTIVE+")";
                                         that.batchArray.push(that.oDataModel.createBatchOperation(entityPropDelete,"DELETE"));
                                  }
                           }
                     }
                     if(updatePropertiesPayload.updates.length!=0){
                           for(var i=0;i<updatePropertiesPayload.updates.length;i++){
                                  that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATION_PROPERTIES","POST",updatePropertiesPayload.updates[i]));
                           }
                     }
                     if(that.batchArray){
                           that.performBatchOperation(that.batchArray);
                     }
                     else{
                            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
                     }*/
		}
		if(that.viewMode === "associationCreate" || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && !isSaveAndActivate)){
			var sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR.length ? that.sourceIndicatorModel.getData().INDICATOR[0] : that.sourceIndicatorModel.getData().INDICATOR;
			var associationPayload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};


			that.finalAssociationPayload ={};
			that.finalAssociationPayload.TYPE=associationPayload.TYPE;
			that.finalAssociationPayload.SOURCE_INDICATOR=associationPayload.SOURCE_INDICATOR
			that.finalAssociationPayload.TARGET_INDICATOR=associationPayload.TARGET_INDICATOR
			that.finalAssociationPayload.IS_ACTIVE=associationPayload.IS_ACTIVE
			that.finalAssociationPayload.PROPERTY=propertyPayloadArray;




			var sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length ? this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0] : this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			var targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length ? this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0] : this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;

			that.ODataModel = that.oApplicationFacade.getODataModel();
			that.payload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID};


			that.metadataRef.create("ASSOCIATION",that.finalAssociationPayload,null,
					function() {
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
				that.oApplicationFacade.getODataModel().refresh();
			},
			function(err) {
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"), err.responseText);
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED_FAILED"),
					"description":err.responseText
				});
				that.utilsRef.setErrorState(that);

			});

			//that.oApplicationFacade.getODataModel().refresh();

			/*that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATIONS","POST",associationPayload))
                     if(propertyPayloadArray){
                           for(var i=0; i<propertyPayloadArray.length;i++){
                                  that.batchArray.push(that.oDataModel.createBatchOperation("/ASSOCIATION_PROPERTIES","POST",propertyPayloadArray[i]));
                           }
                     }
                     if(that.batchArray){
                           that.performBatchOperation(that.batchArray);
                     }
                     else{
                            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ASSOCIATION_SAVED"));
                     }*/
		}
		that.setFooterOnError();
	},


	saveAssociationHelper : function(sourceIndicator,targetIndicator,isSaveAndActivate){
		var that = this;
		var sourceIndicatorObj = {};
		if(that.sourceIndicatorModel.getData().INDICATOR.length) {
			sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR[0];
		}
		else {
			sourceIndicatorObj = that.sourceIndicatorModel.getData().INDICATOR;
		}
		var associationPayload = {TYPE:that.byId("associationTypeSelect").getSelectedItem().getKey(),SOURCE_INDICATOR:sourceIndicator.ID, TARGET_INDICATOR:targetIndicator.ID, IS_ACTIVE:0, CREATED_BY:sourceIndicatorObj.CREATED_BY, CREATED_ON:sourceIndicatorObj.CREATED_ON, CHANGED_BY:null, CHANGED_ON:null};
		var associationPropertiesPayload = {PROPERTIES:that.getView().byId('propertyNameValueBox').getModel("associationProp").getData().PROPERTIES}
		var updateAssociationPayload = null;

		if((that.viewMode === "associationEdit" && !(that.associationData.IS_ACTIVE)) || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE && isSaveAndActivate)){
			var oldAssociationObject = that.formOldObjectForAssociation(sourceIndicator, targetIndicator);
			updateAssociationPayload = that.utilsRef.dirtyBitCheck({
				oldPayload : oldAssociationObject,
				newPayload : associationPayload,
				objectType : "ASSOCIATIONS"
			});

			that.savePropertiesHelper(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator, isSaveAndActivate);
		}
		else if(that.viewMode === "associationCreate" || (that.viewMode === "associationEdit" && that.associationData.IS_ACTIVE)){
			that.savePropertiesHelper(associationPropertiesPayload, updateAssociationPayload, sourceIndicator, targetIndicator);
		}
	},

	saveAssociation: function(isSaveAndActivate) {
		var that = this;
		var sourceIndicator = {};
		var targetIndicator = {};
		if(this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR.length && this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR.length) {
			sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR[0];
			targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR[0];
		}
		else {
			sourceIndicator = this.byId("sourceIndicatorContent").getModel("sourceIndicator").getData().INDICATOR;
			targetIndicator = this.byId("targetIndicatorContent").getModel("targetIndicator").getData().INDICATOR;
		}
		var payload = {};
		if(this.viewMode === "associationEdit") {
			that.saveAssociationHelper(sourceIndicator,targetIndicator,isSaveAndActivate);
		}
		else if(that.viewMode === "associationCreate") {
			if(targetIndicator==null){
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_KPI_TO_ASSOCIATE"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("SELECT_A_KPI_TO_ASSOCIATE")
				});
				that.utilsRef.setErrorState(that);

				that.byId("selectedKpiOpiId").setValueState(sap.ui.core.ValueState.Error);

			}
			else if(targetIndicator.length==0){
				that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_KPI_TO_ASSOCIATE"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("SELECT_A_KPI_TO_ASSOCIATE")
				});
				that.utilsRef.setErrorState(that);
				that.byId("selectedKpiOpiId").setValueState(sap.ui.core.ValueState.Error);

			}
			else{
				that.saveAssociationHelper(sourceIndicator,targetIndicator,isSaveAndActivate);
				that.oApplicationFacade.getODataModel().refresh();
			}

		}
	},

	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	 * (NOT before the first rendering! onInit() is used for oController one!).
	 */
	onBeforeRendering: function() {
	},

	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	 * This hook is the same one oController SAPUI5 controls get after being rendered.
	 */
	onAfterRendering: function() {
	},

	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 */
	onExit: function() {

	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S3.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S3", {

	onInit : function() {
		var that = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		var view = this.getView();
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "detail") {
				var context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				var contextPath = oEvent.getParameter("arguments").contextPath;
				view.setBindingContext(context);
				that.getUsersAndRoles(view.getBindingContext().getProperty("ID") || contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,''));
			}
		}, this);
		var that = this;
		this.oHeaderFooterOptions =
			 { 
				bSuppressBookmarkButton: {},
				oEditBtn : {
					sI18nBtnTxt : "S3_EDIT",
					onBtnPressed : function(evt) {
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"authorizeSBEvaluation", route:"subDetail", context: view.getBindingContext().getPath().split("/")[1]});
				},
				bEnabled : false, // default true
			},
		};
		
	},
	getUsersAndRoles:function(id){
		var that = this;
		this.byId("users").getBinding("content").filter([new sap.ui.model.Filter("ID", "EQ",id),new sap.ui.model.Filter("TYPE", "EQ","USER")]);
		this.byId("roles").getBinding("content").filter([new sap.ui.model.Filter("ID", "EQ",id),new sap.ui.model.Filter("TYPE", "EQ","ROLE")]);
		this.byId("users").getBinding("content").attachDataReceived(function(data){
			that.byId("usersTab").setCount(data.getSource().getLength());
			that.byId("usersTitle").setText(that.oApplicationFacade.getResourceBundle().getText("AUTH_USERS")+" ("+data.getSource().getLength()+")");
			that.byId("usersTitle").rerender();
		});
		this.byId("roles").getBinding("content").attachDataReceived(function(data){
			that.byId("rolesTab").setCount(data.getSource().getLength());
			that.byId("rolesTitle").setText(that.oApplicationFacade.getResourceBundle().getText("ROLES")+" ("+data.getSource().getLength()+")");
		});
	},
	formatId: function(id){
		return this.oApplicationFacade.getResourceBundle().getText("ID")+" : "+id;
	},
	formatOwner: function(owner){
		return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "OWNER", owner);
	},
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},
	formatProperties: function(name, value) {
		return ((this.getView().byId("properties").getItems().length > 1) ? (', ' + name + ' : ' + value) : (name + ' : ' + value));
	},
	formatFavoriteMark: function(favMark) {
        return ((favMark) ? true : false);
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S4.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S4", {

    onInit: function() {
        var that = this;
        this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
        this.userSearch = false;
        this.roleSearch =  false;
        this.previousAuthorizations =  [];
        this.previousSelectedIds = {};
        this.previousSelectedIds["USER"] = {};
        this.previousSelectedIds["ROLE"] = {};
        this.selectedIds = {};
        this.selectedIds["USER"] = {};
        this.selectedIds["ROLE"] = {};
        var filterByAlphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
        this.filterByAlphabetModel = new sap.ui.model.json.JSONModel();	
        this.filterByAlphabetModel.setData(filterByAlphabet);	
        this.selectedItemsModel = new sap.ui.model.json.JSONModel();
        this.selectedItemsModel.setData([]);
        this.byId("selectedItemsList").setModel(this.selectedItemsModel,"selectedItems");
        this.alphabetFilterDialog = {};
        this.deletedItems = [];		

        this.oRouter.attachRouteMatched(function(evt){
            if(evt.getParameter("name") != "subDetail")
                return;
            that.byId('userSearchField').setValue('');
            that.byId('roleSearchField').setValue('');
            var context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));
            that.getView().setBindingContext(context);
            that.itemId = that.getView().getBindingContext().getProperty("ID");
            if(!that.itemId)
            {
                that.itemId = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
                that.itemId = that.itemId.slice(that.itemId.indexOf("'")+1,that.itemId.lastIndexOf("'"));
            }
            that.getView().getModel().read("/AUTHORIZED_USERS",null,"$filter=ID eq '"+that.itemId+"'",false,function(data){
                that.selectedIds["USER"] = {};
                that.selectedIds["ROLE"] = {};		
                that.deletedItems = [];					
                that.previousAuthorizations = jQuery.extend(true,[],data.results);
                that.selectedItemsModel.setData(data.results);
                that.initialSelectedItems = jQuery.extend(true, [], data.results);
                that.byId("selectedItemsTab").setCount(data.results.length);	
                for(var key in data.results)
                    that.selectedIds[data.results[key].TYPE][data.results[key].NAME] = data.results[key].NAME;
                that.previousSelectedIds = jQuery.extend(true,{},that.selectedIds);
            }, function(error){
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_LOADING_AUTH"));
            });
            that.byId("userList").bindItems("/HANA_USERS", new sap.m.CustomListItem({
                selected: {
                    path: "NAME",
                    formatter: function(name){
                        return ((that.selectedIds["USER"][name])?true:false);
                    }
                },
                content: [
                          new sap.ui.layout.Grid({
                              defaultSpan:"L12 M12",
                              width:"60%",
                              vSpacing:0,
                              content:[new sap.ui.core.Icon({
                                  src:"sap-icon://person-placeholder",
                                  size:"40px",
                                  color:{
                                      path: "NAME",
                                      formatter: function(name){ return (that.selectedIds["USER"][name]?"#009de0":"#e6e6e6"); }
                                  },
                                  layoutData: new sap.ui.layout.GridData({span:"L1 M1"})
                              }),
                              new sap.m.Label({text:"{NAME}",layoutData: new sap.ui.layout.GridData({span:"L8 M8"})})
                              ]
                          })]
            }));
            that.byId("roleList").bindItems("/HANA_ROLES", new sap.m.CustomListItem({
                selected: {
                    path: "NAME",
                    formatter: function(name){return (that.selectedIds["ROLE"][name]?true:false);}
                },
                content: [
                          new sap.ui.layout.Grid({
                              defaultSpan:"L12 M12",
                              width:"60%",
                              vSpacing:0,
                              content:[new sap.ui.core.Icon({
                                  src:"sap-icon://group",
                                  size:"40px",
                                  color:{
                                      path: "NAME",
                                      formatter: function(name){
                                          return (that.selectedIds["ROLE"][name]?"#009de0":"#e6e6e6");
                                      }
                                  },
                                  layoutData: new sap.ui.layout.GridData({span:"L1 M1"})
                              }),
                              new sap.m.Label({text:"{NAME}",layoutData: new sap.ui.layout.GridData({span:"L7 M7"})}),
                              new sap.m.Link({
                                  text: {path:'NO_OF_USERS', formatter: jQuery.proxy(that.formatNoOfUsers,that)},
                                  press: jQuery.proxy(that.onAllRolesLinkSelect,that),
                                  layoutData:new sap.ui.layout.GridData({span:"L2 M2"})
                              })]
                          })]
            }));			
        });
        this.oHeaderFooterOptions =
        { 	
                bSuppressBookmarkButton: {},
                sI18NFullscreenTitle: "S3_EDIT",
                oFilterOptions : {
                    onFilterPressed: function(evt) {
                        if(that.byId("idIconTabBarMulti").getSelectedKey() == "selected")
                            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FILTER_NOT_APPLICABLE"));
                        else
                            that.openFilterDialog();
                    }
                },
                onBack: function(oEvent){
                    that.handleBackAndCancel();
                },
                oEditBtn : {
                    sI18nBtnTxt : "SAVE",
                    onBtnPressed : function(evt) {
                        that.saveAuthorizations();
                    }
                },
                buttonList : [{
                    sI18nBtnTxt : "RESET",
                    onBtnPressed : function(evt) {
                        that.resetAuthorizations();
                    },
                },
                {	sI18nBtnTxt : "CANCEL",
                    onBtnPressed : function(evt) {
                        that.handleBackAndCancel();						
                    }
                }]				
        };	
        this.setHeaderFooterOptions(this.oHeaderFooterOptions);
    },

    getHeaderFooterOptions : function() {
        return this.oHeaderFooterOptions;
    },			
    onUserSearch: function(oEvent){
        var prevUserSearch = this.userSearch;
        oEvent.getSource().getValue() == "" ? this.userSearch = false : this.userSearch = true;
        var itemBinding = this.byId("userList").getBinding("items");
        var searchString = oEvent.getSource().getValue().toLowerCase();
        searchString = escape(searchString);
        if(prevUserSearch)
            itemBinding.aFilters.pop();
        if(this.userSearch)
            itemBinding.aFilters.push(new sap.ui.model.Filter("tolower(NAME)","Contains","'" + searchString +"'"));     
        itemBinding.filter(itemBinding.aFilters);
    },
    onRoleSearch: function(oEvent){
        var prevRoleSearch = this.roleSearch;
        oEvent.getSource().getValue() == "" ? this.roleSearch = false : this.roleSearch = true;
        var searchString = oEvent.getSource().getValue().toLowerCase();
        searchString = escape(searchString);
        var itemBinding = this.byId("roleList").getBinding("items");
        if(prevRoleSearch)
            itemBinding.aFilters.pop();
        if(this.roleSearch)
            itemBinding.aFilters.push(new sap.ui.model.Filter("tolower(NAME)","Contains","'" + searchString + "'"));
        itemBinding.filter(itemBinding.aFilters);
    },
    refreshFilter: function(){
        var eventSourceType = this.byId("idIconTabBarMulti").getSelectedKey();
        var itemBinding = this.byId((eventSourceType === "users")?"userList":"roleList").getBinding("items");
        itemBinding.filter([],false);
        this.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(false);
        this.alphabetFilterDialog[eventSourceType] = null;	
    },
    onUserItemSelectionChange: function(oEvent){
        this.onItemSelectionChange(oEvent,"USER");
    },
    onRoleItemSelectionChange: function(oEvent){
        this.onItemSelectionChange(oEvent,"ROLE");
    },
    onItemSelectionChange: function(oEvent,type){
        var selectedItemData = this.selectedItemsModel.getData();
        var selectedItem = oEvent.getParameter("listItem");
        var selectedItemContext = selectedItem.getBindingContext().getObject();
        if(selectedItem.getSelected())
        {	//remove re-selected item from deletion array if it exists there
            for(var key in this.deletedItems)
            { 	if(this.deletedItems[key].NAME === selectedItemContext.NAME && this.deletedItems[key].TYPE === type)
                this.deletedItems.splice(key,1);
            }			
            selectedItemContext.TYPE = type;
            selectedItemData.push(selectedItemContext);
            var selectedItemIcon = selectedItem.getContent()[0].getContent()[0];			
            selectedItemIcon.setColor("#009de0");
            this.selectedIds[type][selectedItemContext.NAME] = selectedItemContext.NAME;			
        }
        else
        {	//Maintaining array of deleted items that were previously authorised
            for(var key in this.previousAuthorizations)
            {	if(this.previousAuthorizations[key].NAME === selectedItemContext.NAME && this.previousAuthorizations[key].TYPE === type)
            { 	selectedItemContext.TYPE = type;
            this.deletedItems.push(selectedItemContext);			
            }
            }
            for(var key in selectedItemData)
                if((selectedItemData[key].NAME == selectedItemContext.NAME) && (selectedItemData[key].TYPE == type))
                    selectedItemData.splice(key,1);
            var selectedItemIcon = selectedItem.getContent()[0].getContent()[0];
            selectedItemIcon.setColor("#e6e6e6");
            this.selectedIds[type][selectedItemContext.NAME] = null;
        }
        this.selectedItemsModel.setData(selectedItemData);
        this.byId("selectedItemsTab").setCount(selectedItemData.length);
    },
    onSelectedItemDelete: function(oEvent){
        var deletedObject = oEvent.getParameter("listItem").getBindingContext("selectedItems").getObject();
        var itemList = this.byId(deletedObject.TYPE=="USER"?"userList":"roleList");
        //Maintaining array of deleted items that were previously authorised
        for(var key in this.previousAuthorizations)
        {	if(this.previousAuthorizations[key].NAME === deletedObject.NAME && this.previousAuthorizations[key].TYPE === deletedObject.TYPE)
            this.deletedItems.push(deletedObject);			
        }
        this.selectedIds[deletedObject.TYPE][deletedObject.NAME] = null;
        itemList.getModel().refresh(true);

        var selectedItemsData = this.selectedItemsModel.getData();
        var spliceIndex = oEvent.getParameter("listItem").getBindingContext("selectedItems").getPath().substr(1);
        selectedItemsData.splice(spliceIndex,1);
        this.selectedItemsModel.setData(selectedItemsData);
        this.byId("selectedItemsList").rerender();
        this.byId("selectedItemsTab").setCount(selectedItemsData.length);	
    },
    onAllRolesLinkSelect: function(oEvent){
        var roleName = oEvent.getSource().getBindingContext().getProperty("NAME");
        var noOfUsers = oEvent.getSource().getBindingContext().getProperty("NO_OF_USERS");
        this.onRolesLinkSelect(oEvent,roleName,noOfUsers);
    },
    onSelectedRolesLinkSelect: function(oEvent){
        var roleName = oEvent.getSource().getBindingContext("selectedItems").getProperty("NAME");
        var noOfUsers = oEvent.getSource().getBindingContext("selectedItems").getProperty("NO_OF_USERS");
        this.onRolesLinkSelect(oEvent,roleName,noOfUsers);
    },
    onRolesLinkSelect: function(oEvent,roleName,noOfUsers){
        noOfUsers = noOfUsers+" "+( noOfUsers==1?this.oApplicationFacade.getResourceBundle().getText("USER"):this.oApplicationFacade.getResourceBundle().getText("USERS"));
        if(!this._rolesPopover)
        {
            this.roleNameLabel = new sap.m.Label({
                text:roleName,
                design: "Bold",
                layoutData: new sap.ui.layout.GridData({span:"L10 M10"}) 
            });
            this.noOfUsersLabel = new sap.m.Label({
                text: noOfUsers,
                design: "Bold",
                layoutData: new sap.ui.layout.GridData({span:"L12 M12"}) 
            });
            var rolesPopoverHeader =  new sap.ui.layout.Grid({
                defaultSpan:"L12 M12",
                content:[new sap.ui.core.Icon({
                    src:"sap-icon://group",
                    size: "40px",
                    color: "#e6e6e6",
                    layoutData: new sap.ui.layout.GridData({span:"L2 M2"}) }),
                    this.roleNameLabel,
                    this.noOfUsersLabel
                    ]
            });
            this.usersForRole = new sap.ui.layout.Grid({span:"L12 M12"});
            var rolesPopoverLayout = new sap.m.VBox({
                items: [rolesPopoverHeader,this.usersForRole],
            });
            var oCustomHeader = new sap.m.Bar({
                contentMiddle:[ new sap.m.Label({
                    text:"{i18n>ROLE_DETAILS}"
                })],
                contentRight:(jQuery.device.is.phone) ? [] :
                    [new sap.m.Button({
                        icon:"sap-icon://decline",
                        width : "2.375rem",
                        press:jQuery.proxy(function(){
                            this._rolesPopover.close();
                        },this)
                    })]
            });

            this._rolesPopover = new sap.m.Popover({
                customHeader:oCustomHeader,
                content: rolesPopoverLayout						
            });
            this.getView().addDependent(this._rolesPopover);
        }
        this.roleNameLabel.setText(roleName);
        this.noOfUsersLabel.setText(noOfUsers);
        this.usersForRole.bindAggregation("content","/USERS_GRANTED_ROLE(P_ROLE_NAME='"+roleName+"')/Results",new sap.m.Label({
            text:"{NAME}",
            layoutData: new sap.ui.layout.GridData({span:"L12 M12"})
        }));
        var infoBar = oEvent.getSource();
        jQuery.sap.delayedCall(0, this, function () {
            this._rolesPopover.openBy(infoBar);
        });	
    },
    formatSelectedItemsIcon: function(type){
        if(type === "ROLE")
            return "sap-icon://group";
        else
            return "sap-icon://person-placeholder";
    },
    formatNoOfUsers: function(noOfUsers){
        if(noOfUsers)
            return noOfUsers+" "+(noOfUsers==1?this.oApplicationFacade.getResourceBundle().getText("USER"):this.oApplicationFacade.getResourceBundle().getText("USERS"));
        else
            return "";		
    },
    saveAuthorizations: function(){
        var that = this;
        var selectedItems = this.selectedItemsModel.getData();
        var deleteBatch = [];
        var createBatch = [];
        var isDeleteSuccessful = true;
        var payload = {ID:this.itemId,REVOKE:[],GRANT:[]};
        var busyDialog = new sap.m.BusyDialog();
        busyDialog.open();

        //odata remove
        //Deleting the removed authorizations
//      for(var key in this.deletedItems)
//      {	var path = "(NAME='"+this.deletedItems[key].NAME+"',TYPE='"+this.deletedItems[key].TYPE+"',ID='"+this.itemId+"')";
//      deleteBatch.push(this.getView().getModel().createBatchOperation("/AUTHORIZED_USERS"+path,"DELETE"));
//      }
//      this.getView().getModel().addBatchChangeOperations(deleteBatch);
//      this.getView().getModel().submitBatch(function(data,response,errorResponse){
//      if(errorResponse.length)
//      {	isDeleteSuccessful = false;
//      return;
//      }
//      var responses = data.__batchResponses[0].__changeResponses;
//      for(var key in responses)
//      if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
//      isDeleteSuccessful = false;		
//      },function(error){
//      isDeleteSuccessful = false;
//      },false);
//      if(!isDeleteSuccessful)
//      {	busyDialog.close();
//      sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//      return;
//      }

        //odata write
        //Writing the new authorizations
//      for(var key in selectedItems)
//      {	var payload = {
//      NAME: selectedItems[key].NAME,
//      TYPE: selectedItems[key].TYPE,
//      ID: this.itemId,
//      OBJECT_NAME: (this.itemId + "_SSB_AP")
//      };
//      createBatch.push(this.getView().getModel().createBatchOperation("/AUTHORIZED_USERS","POST",payload));
//      }
//      this.getView().getModel().addBatchChangeOperations(createBatch);
//      this.getView().getModel().submitBatch(function(data,response,errorResponse){
//      if(errorResponse.length)
//      {	busyDialog.close();
//      sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//      return;
//      }
//      var error = false;
//      var responses = data.__batchResponses[0].__changeResponses;
//      for(var key in responses)
//      if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200")
//      error = true;				
//      if(error)
//      sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//      else
//      {	sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_SUCCESS"));
//      that.onNavBack();	
//      window.history.back();
//      }
//      busyDialog.close();
//      }, function(error){
//      sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"));
//      busyDialog.close();
//      },false);
        //xsjs create
        for(var key in this.deletedItems) {
            payload.REVOKE.push(this.deletedItems[key].NAME);
        }
        for(var key in selectedItems) {
            payload.GRANT.push(selectedItems[key].NAME);
        }
        sap.suite.ui.smartbusiness.lib.Util.utils.create(sap.suite.ui.smartbusiness.lib.Util.utils.serviceUrl("AUTHORIZATION_SERVICE_URI"),payload,null,function(data) {
            sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_SUCCESS"));
            that.onNavBack();	
            sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
            busyDialog.close();
        }, function(err) {
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AUTH_SAVE_ERROR"), err.responseText);
            busyDialog.close();
        });
    },
    resetAuthorizations: function(){
        this.selectedIds = jQuery.extend(true,{},this.previousSelectedIds);
        this.selectedItemsModel.setData(jQuery.extend(true,[],this.previousAuthorizations));
        this.byId("selectedItemsTab").setCount(this.previousAuthorizations.length);
        this.byId("selectedItemsList").rerender();
        this.byId("userList").getModel().refresh(true);
        this.byId("roleList").getModel().refresh(true);
        this.deletedItems = [];	
    },
    onNavBack: function(){
        this.selectedIds["USER"] = {};
        this.selectedIds["ROLE"] = {};		
        this.deletedItems = [];	
    },
    openFilterDialog: function(){
        var that = this;
        var eventSourceType = this.byId("idIconTabBarMulti").getSelectedKey();
        if(!this.alphabetFilterDialog[eventSourceType])
        {		
            this.alphabetFilterDialog[eventSourceType] = new sap.m.SelectDialog({
                title: that.oApplicationFacade.getResourceBundle().getText("FILTER")+" : "+
                (eventSourceType=="users"?that.oApplicationFacade.getResourceBundle().getText("USERS"):that.oApplicationFacade.getResourceBundle().getText("ROLES")),
                growingScrollToLoad: true,
                rememberSelections: true,
                multiSelect: true,
                search: function(oEvent){
                    that.alphabetFilterDialog[eventSourceType].getBinding("items").filter(new sap.ui.model.Filter("","Contains",oEvent.getParameters().value));
                },
                confirm: function(oEvent){
                    var aFilters = [];
                    var itemBinding = that.byId((eventSourceType === "users")?"userList":"roleList").getBinding("items");

                    var searchFilter = null;
                    if(eventSourceType === "users")
                        searchFilter = that.userSearch ? itemBinding.aFilters.pop() : null;
                        else
                            searchFilter = that.roleSearch ? itemBinding.aFilters.pop() : null;	

                            var selectedFilters = [];
                            var selectedItems = oEvent.getParameter("selectedContexts");
                            for(var key in selectedItems)
                            {	aFilters.push(new sap.ui.model.Filter("NAME","StartsWith",selectedItems[key].getObject()));
                            selectedFilters.push(selectedItems[key].getObject());
                            }		
                            if(searchFilter)
                                aFilters.push(searchFilter);
                            itemBinding.filter(aFilters,false);
                            if(selectedFilters.length > 0)
                            {	that.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(true);
                            that.byId((eventSourceType === "users")?"userInfoToolbarLabel":"roleInfoToolbarLabel").setText(that.oApplicationFacade.getResourceBundle().getText("FILTERED_BY")+"("+selectedFilters.join(", ")+")");
                            }
                            else
                                that.byId((eventSourceType === "users")?"userInfoToolbar":"roleInfoToolbar").setVisible(false);
                },
                items: {
                    path:"/",
                    template: new sap.m.StandardListItem({title: "{}"})
                }
            });
            this.alphabetFilterDialog[eventSourceType].setModel(this.filterByAlphabetModel);						
        }
        this.alphabetFilterDialog[eventSourceType].open();
    },
    onSelectIconTab: function(oEvent){
        if(oEvent.getParameter("selectedKey") == "selected")
        {	this.oHeaderFooterOptions.oFilterOptions.bDisabled = true;
        this.setHeaderFooterOptions(this.oHeaderFooterOptions);
        }
        else
        {	this.oHeaderFooterOptions.oFilterOptions.bDisabled = false;
        this.setHeaderFooterOptions(this.oHeaderFooterOptions);
        }
    },

    handleBackAndCancel: function() {
        var that = this;
        var deltaAuth = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({oldPayload: that.initialSelectedItems, newPayload: that.selectedItemsModel.getData(), objectType: "AUTHORIZATION"});

        if(deltaAuth.updates.length || deltaAuth.deletes.length) {
            var backDialog = new sap.m.Dialog({
                icon:"sap-icon://warning2",
                title: that.oApplicationFacade.getResourceBundle().getText("WARNING"),
                state:"Error",
                type:"Message",
                content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
                beginButton: new sap.m.Button({
                    text: that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
                    press: function(){
                        sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
                    }
                }),
                endButton: new sap.m.Button({
                    text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
                    press: function(){backDialog.close();}
                })							
            });
            backDialog.open();
        }
        else {
            sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"authorizeSBEvaluation", route:"detail", context: that.getView().getBindingContext().getPath().split("/")[1]});
        }
    },

    refreshMasterList: function() {
        var that = this;
        that.utilsRef.refreshMasterList(that,false);
    }
});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.S2.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained


sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.S2", {

	onInit:function(){
           var that = this;
           //that.errorMessages = [];
           that.selectedGroupItemKey = "workspace";
   		   that.selectedGroupItemIndex = 0;
   		   that.lastSavedIndex = 0;
		   that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		  
			
		   
		   that.lastGroupingOption = new sap.ui.model.Sorter("MANUAL_ENTRY",true,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
			that.lastSortingOrder =  {indicatorTextOrder:null, order:new sap.ui.model.Sorter("CHANGED_ON",true,null)};
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.getView().getModel("i18n").getProperty("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
				});
		}
		this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("IS_ACTIVE","EQ",1)]);
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		
		
	},
	onRoutePatternMatched:function(oEvent){
		var that=this;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		if (oEvent.getParameter("name") === "detail" || oEvent.getParameter("name") === "noDataView") {
			sap.suite.ui.smartbusiness.lib.AppSetting.init({
				oControl : this.byId("list"),
				hideElement  : "list",
				i18n: {
					checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
					saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
					cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
					settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
					settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
				},
				title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
			});
			this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
			sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
			this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		}
	},
	formatEvaluationHeader:function(indicatorTitle,evaluationTitle){
		var that = this;
		if(indicatorTitle==null && evaluationTitle!=null){
			return(that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+"- "+evaluationTitle);
		}
		else if(indicatorTitle!=null && evaluationTitle==null){
			return(indicatorTitle+" -"+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else if(indicatorTitle==null && evaluationTitle==null){
			return (that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+" - "+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else{
			return (indicatorTitle+" - "+evaluationTitle);
		}
	},

	formatIndicatorId: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
		//return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
/*	_handleItemPress:function(){
		
	},*/
	createGroupOptions: function() {
		var that = this;
		var jsonData = {groupItems:[
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),key:"workspace", index:0},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_INDICATOR"),key:"indicator", index:1},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),key:"owner", index:2},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("NONE"),key:"none", index:3},
		                            ]};
		var model = new sap.ui.model.json.JSONModel(jsonData);
		var groupOptionsDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("GROUP_BY"),
			id: this.createId("groupOptionsDialog"),
			content: [new sap.m.List({
				items:{
					path: "/groupItems",
					template: new sap.m.ObjectListItem({
						type:"Active",
					    title:"{text}"
					})
				},
				itemPress: function(evt){
					evt.getParameter("listItem").setSelected(true);
					that.selectedGroupItemKey = evt.getParameter("listItem").getBindingContext().getProperty("key");
					that.selectedGroupItemIndex = evt.getParameter("listItem").getBindingContext().getProperty("index");
					if(that.selectedGroupItemKey=="workspace"){
        				that.setGrouping(that.selectedGroupItemKey,true);
        			}
        			else{
        				that.setGrouping(that.selectedGroupItemKey,false);
        			}
        			that.lastSavedIndex = that.selectedGroupItemIndex;
        			this.getParent().close();
				}
			})
			],
//			beginButton: new sap.m.Button({
//        		text: that.oApplicationFacade.getResourceBundle().getText("OK"),
//        		press: function(evt){
//        			if(that.selectedGroupItemKey=="workspace"){
//        				that.setGrouping(that.selectedGroupItemKey,true);
//        			}
//        			else{
//        				that.setGrouping(that.selectedGroupItemKey,false);
//        			}
//        			that.lastSavedIndex = that.selectedGroupItemIndex;
//        			this.getParent().close();
//        		}
//        	}),
        	endButton: new sap.m.Button({
        		text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
        		press: function(evt){
        			that.selectedGroupItemIndex = that.lastSavedIndex;
        			this.getParent().close();
        		}
        	})
		});
		groupOptionsDialog.setModel(model);
		return groupOptionsDialog;
	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "ALL_ACTIVE_EVALUATIONS",
			// sI18NSearchFieldPlaceholder : "SEARCHFIELD_PLACEHOLDER",
		/*	onEditPress : function() {
				jQuery.sap.log.info("master list: edit pressed");
				that.refreshHeaderFooterForEditToggle();
			},*/
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					if(that.byId("groupOptionsDialog")){
						that.byId("groupOptionsDialog").destroy();
					}
					that.getView().groupOptionDialog = that.createGroupOptions();
					that.getView().groupOptionDialog.open();
					that.byId("groupOptionsDialog").getContent()[0].getItems()[that.selectedGroupItemIndex].setSelected(true);
				}
			},
		};
	},
	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var groupOption;
		if(key == "workspace") {
			groupOption = new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})
		} 
		else if(key == "indicator") {
			groupOption = new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			});
		}
		else if(key == "owner") {
			groupOption = new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "none") {
			groupOption = null;
		}
		
		if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order,that.lastSortingOrder.indicatorTextOrder],true);
		}
		else if(!that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order],true);
		}
		else{
			if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order){
				list.getBinding("items").sort([that.lastSortingOrder.indicatorTextOrder, that.lastSortingOrder.order]);
			}
			else{
				list.getBinding("items").sort([that.lastSortingOrder.order]);
			}
		}
		this.lastGroupingOption = groupOption;
	},
	
	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_CHANGE_DATE"),
			            	key: "changedate"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NAME"),
			            	key: "name"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_ID"),
			            	key: "id"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
			            }
		});
		sortOptionsDialog.setSelectedSortItem("changedate");
		sortOptionsDialog.setSortDescending(true);
		return sortOptionsDialog;
	}, 
	
	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var sortOrder,sortByIndicator;
		if(key == "changedate") {
			sortOrder = new sap.ui.model.Sorter("CHANGED_ON",groupDescending,null);
		}
		else if(key == "name") {
			sortOrder = new sap.ui.model.Sorter("TITLE",groupDescending,null);
			sortByIndicator = new sap.ui.model.Sorter("INDICATOR_TITLE",groupDescending,null);
		}
		else if(key == "id") {
			sortOrder = new sap.ui.model.Sorter("ID",groupDescending,null);
		}
		
		if(that.lastGroupingOption){
			if(sortByIndicator){
				list.getBinding("items").sort([that.lastGroupingOption,sortByIndicator,sortOrder],true); 
			}
			else{
				list.getBinding("items").sort([that.lastGroupingOption,sortOrder],true); 
			}
		}
		else{
			if(sortByIndicator){
				list.getBinding("items").sort([sortByIndicator,sortOrder]);
			}
			else{
				list.getBinding("items").sort([sortOrder]);
			}
		}
		this.lastSortingOrder = {indicatorTextOrder:sortByIndicator, order:sortOrder};
	},
	setFiltering: function(items) {
		var filters = [];
		var list = this.getView().byId("list");
		
		var filterObject = {
			"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, this.oApplicationFacade.currentLogonHanaUser)),
			
			
		};
		
		for(var item in items) {
			filters.push(filterObject[item]);
		}
		
		if(filters.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filters,false));
		}
		else {
			list.getBinding("items").filter(filters);
		}
	},
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
					new sap.m.ViewSettingsFilterItem({
						text: that.getView().getModel("i18n").getProperty("ACTIVITY"),
						key: "activity",
						items: [
						         new sap.m.ViewSettingsItem({
						        	 text: that.getView().getModel("i18n").getProperty("SELF_CREATED"),
						        	 key: "self_created"
						         }),
						        
						         
						        ]
					})
					],
					confirm : function(evt) {
						var infoBarText = "";
						var selectedFilters = evt.getParameter("filterItems");

						that.setFiltering(evt.getParameter("filterKeys"));

						if(selectedFilters && selectedFilters.length) {
							var filterObj = {};
							for(var i=0,l=selectedFilters.length; i<l; i++) {
								filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
								filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
								filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
							}

							for(var filter in filterObj) {
								if(filterObj.hasOwnProperty(filter)) {
									infoBarText += (infoBarText) ? " ; " : "";
									infoBarText += filterObj[filter];
								}
							}
								
						}
						
					}
		});
		return filterOptionsDialog;
	},
	
	 
	
	
});	
}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.emptyView.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.emptyView.controller');
/*
 * Copyright (C) 2009-2013 SAP AG or an SAP affiliate company. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained


jQuery.sap.require('sap.ca.ui.images.images'); // unlisted dependency retained

jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("/") + "/sap/ca/scfld/md/css/flower.css");
sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.emptyView", {

	onInit : function() {
		var oImage = this.byId("flower");
		//this.errorMessages = [];
		this.errorState = false;
		
		if (oImage){
			oImage.setSrc(sap.ca.ui.images.images.Flower);
		}
//		var sLink = document.createElement('link');
//		sLink.setAttribute('rel', 'stylesheet');
//		sLink.setAttribute('type', 'text/css');
//		sLink.setAttribute('href', 'resources/sap/ca/scfld/md/css/flower.css');
//		sLink.setAttribute('id', 'emptyView_stylesheet');
//		document.getElementsByTagName('head')[0].appendChild(sLink);
		
		this.getView().addEventDelegate(this, this);
		this.getView().addEventDelegate({
			onBeforeShow : jQuery.proxy(function(oEvent) {
				if (oEvent.data && (oEvent.data.viewTitle || oEvent.data.languageKey || oEvent.data.infoText)){
					this.setTitleAndMessage(oEvent.data.viewTitle, oEvent.data.languageKey, oEvent.data.infoText);
				}
			}, this)                                                   
		});

		var view = this.getView();
		var that=this;
		if(this.oApplicationFacade.navigatingWithinDrilldown) {
			this.navigatingWithinDrilldown = true;
			this.oApplicationFacade.navigatingWithinDrilldown = undefined;
		} 
		else {
			this.navigatingWithinDrilldown = false;
		}
		//the route handler is only here for backwards compatibility
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "noDataView") {

				if(this.oApplicationFacade.copyClipboard) {
					this.copyClipboard = this.oApplicationFacade.copyClipboard;
				}
				this.isPasteEnabled = false;
				var str=oEvent.getParameter("arguments").contextPath;
				var context = new sap.ui.model.Context(view.getModel(), '/' + str);
				view.setBindingContext(context);
				this.context = context;
				try{
					this.evaluationId = view.getBindingContext().getObject()["ID"];
				}catch(e){
					try{
						this.evaluationId=  str.match(/ID=[^,]+/g)[0].replace(/(ID=')|(')/g,"");
					}catch(e){
						this.evaluationId=str.replace(/EVALUATIONS_MODELER\('|'\)/g,"")
					}
				}

				var oArgument = oEvent.getParameter("arguments");

				this.setTitleAndMessage(oArgument.viewTitle, oArgument.languageKey);
				
				if(this.copyClipboard && Object.keys(this.copyClipboard) && Object.keys(this.copyClipboard).length) {
					this.checkEvaluationForPaste();
				}
				else {
					if(this._oControlStore && this._oControlStore.oButtonListHelper) {
						this.updateHeaderFooterOptions(false);
					}
				}
				
			}
		}, this);


	},
	lauchConfigurator: function() {

		this.DDA_MODEL =  sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.getInstance(this.evaluationId, true, this.getView().getModel("i18n"));
		
		var contextPath = this.evaluationId + "/" + this.DDA_MODEL.NEW_VIEWID;
		this.oApplicationFacade.navigatingWithinDrilldown = this.navigatingWithinDrilldown;
		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"configureChart", context: contextPath});
		
		//this.oRouter.navTo("configureChart",{evaluationId: this.evaluationId, viewId: this.DDA_MODEL.NEW_VIEWID});

		//this.evaluationId = null;
	},
	getHeaderFooterOptions : function() {
		var that=this;
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton : true,
				sI18NDetailTitle: "DRILLDOWN_CONFIG_DETAILS",
				oEditBtn : {
					sI18nBtnTxt : "CONFIGURE",
					onBtnPressed : function(evt) {
						that.lauchConfigurator()
					},
					bEnabled : false, // default true
				},
				buttonList : [{
				            	  sId : "Paste", // optional
				            	  sI18nBtnTxt : "PASTE",
				            	  bDisabled : (!(that.isPasteEnabled)),
				            	  onBtnPressed : function(evt) {
				            		  if(that.errorState) {
											sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
											return;
										}
				            		  that.copyDDAConfiguration();
				            	  }
				              }
				              ]
		};
		return this.oHeaderFooterOptions;
	},

	setTitleAndMessage : function (sViewTitle, sLanguageKey, sInfoText) {
		// set view title
		var oPage = this.byId("sap.ca.scfld.md.view.empty");
		var sTitle= this.oApplicationFacade.oApplicationImplementation.getResourceBundle().getText(sViewTitle);
		if (!sTitle || sTitle === sViewTitle) {
			//fallback: show message also as title
			if (!sInfoText){
				sTitle = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			}
			else
			{
				sTitle = sInfoText;
			}
		};
		oPage.setTitle(sTitle);

		// set message text                        
		var oLabel = this.byId("emptyLabel");
		if (!sInfoText){
			var sMessage = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(sLanguageKey);
			if (!sMessage || sMessage === sLanguageKey) {
				//fallback
				sMessage = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			};
			oLabel.setText(sMessage);
		}
		else
		{
			oLabel.setText(sInfoText);
		}
	},
	
	updateHeaderFooterOptions: function(paste) {
		this.isPasteEnabled = paste;
		this.setHeaderFooterOptions(this.getHeaderFooterOptions());
	},
	
	checkEvaluationForPaste: function() {
		var currentEvaluationData = this.context.getObject();

		if((this.copyClipboard.evaluationData.ID == currentEvaluationData.ID) || this.checkEvaluationForPaste1()) {
			this.updateHeaderFooterOptions(false);
		}
		else {
			this.updateHeaderFooterOptions(true);
		}
		
//		if(this.copyClipboard.evaluationData.ID != currentEvaluationData.ID) {
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_MEASURES.length; i<l; i++) {
//				if(currentMasterData.ALL_MEASURES.indexOf(this.copyClipboard.MasterData.ALL_MEASURES[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_DIMENSIONS.length; i<l; i++) {
//				if(currentMasterData.ALL_DIMENSIONS.indexOf(this.copyClipboard.MasterData.ALL_DIMENSIONS[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			this.updateHeaderFooterOptions(true);
//		}
//		else {
//			this.updateHeaderFooterOptions(false);
//		}
//		return;
	},
	
	checkEvaluationForPaste1: function() {
		var currentEvaluationData = this.context.getObject();
		var masterData = this.copyClipboard.masterData;
		var measures = {};
		var dimensions = {};
		var allDimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllDimensions(currentEvaluationData.ODATA_URL, currentEvaluationData.ODATA_ENTITYSET);
		var allMeasures = sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(currentEvaluationData.ODATA_URL, currentEvaluationData.ODATA_ENTITYSET);
		if(allMeasures.length) {
			if(allMeasures.length == 1) {
				measures[allMeasures[0]] = "M";
			}
			else {
				measures = allMeasures.reduce(function(p,c,i,a) { measures = measures || {}; if(i == 1){ measures[a[0]] = "M"; }  measures[a[i]] = "M"; return measures;});
			}
		}
		if(allDimensions.length) {
			if(allDimensions.length == 1) {
				dimensions[allDimensions[0]] = "D";
			}
			else {
				dimensions = allDimensions.reduce(function(p,c,i,a) { dimensions = dimensions || {}; if(i == 1){ dimensions[a[0]] = "D"; }  dimensions[a[i]] = "D"; return dimensions;});
			}
		}
		
		var error = null;
		this.diffHeaders = [];
		
		for(var i=0,l=masterData.FILTERS.length; i<l; i++) {
			delete masterData.FILTERS[i].__metadata;
			if(dimensions[masterData.FILTERS[i].DIMENSION] != "D") {
				if(error == null) {
					error = {};
				}
				if(error.DIMENSIONS == undefined) {
					error.DIMENSIONS = {};
				}
				if(error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] == undefined) {
					error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] = [];
				} 
				masterData.FILTERS[i].entityType = "FILTER";
				error.DIMENSIONS[masterData.FILTERS[i].DIMENSION].push(masterData.FILTERS[i]);
			}
		}
		
		for(var i=0,l=masterData.CHART.length; i<l; i++) {
			delete masterData.CHART[i].__metadata;
			if(masterData.CHART[i].THRESHOLD_MEASURE) {
				if(measures[masterData.CHART[i].THRESHOLD_MEASURE] != "M") {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] == undefined) {
						error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] = [];	
					}
					masterData.CHART[i].entityType = "THRESHOLD_MEASURE";
					error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE].push(masterData.CHART[i]);
				}
			}
		}

		for(var i=0,l=masterData.COLUMNS.length; i<l; i++) {
			delete masterData.COLUMNS[i].__metadata;
			var measure = null;
			var dimension = null;
			if(masterData.COLUMNS[i].TYPE == "MEASURE") {
				if((measures[masterData.COLUMNS[i].NAME] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].NAME] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "MEASURE";
					error.MEASURES[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.MEASURES[masterData.COLUMNS[i].NAME][error.MEASURES[masterData.COLUMNS[i].NAME].length-1].entityType = "MEASURE";
				}
				if((measures[masterData.COLUMNS[i].SORT_BY] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					measure = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					measure.entityType = "SORT_BY";
					error.MEASURES[masterData.COLUMNS[i].SORT_BY].push(measure);
				}
			}
			else if(masterData.COLUMNS[i].TYPE == "DIMENSION") {
				if((dimensions[masterData.COLUMNS[i].NAME] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].NAME] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "DIMENSION";
					error.DIMENSIONS[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.DIMENSIONS[masterData.COLUMNS[i].NAME][error.DIMENSIONS[masterData.COLUMNS[i].NAME].length-1].entityType = "DIMENSION";
				}
				if((dimensions[masterData.COLUMNS[i].SORT_BY] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					dimension = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					dimension.entityType = "SORT_BY";
					error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY].push(dimension);
				}
			}
		}
		
		for(var i=0,l=masterData.HEADER.length; i<l; i++) {
			if(masterData.HEADER[i].EVALUATION_ID !== masterData.HEADER[i].REFERENCE_EVALUATION_ID) {
				this.diffHeaders.push(masterData.HEADER[i]);
			}
			else {
				if((masterData.HEADER[i].VISUALIZATION_TYPE != "NT") && (masterData.HEADER[i].VISUALIZATION_TYPE != "AT")) {
					if((masterData.HEADER[i].VISUALIZATION_TYPE === "CM")) {
						var measuresArr = undefined;
						try{
							measuresArr = JSON.parse(JSON.parse(masterData.HEADER[i].CONFIGURATION).MEASURES);
						}
						catch(e) {
							throw new Error("Failed to parse multiple measures of Comparison Chart Multiple Measures");
						}
						
						for(var j=0,m=measuresArr.length; i<m; i++) {
							if(measures[measuresArr[j]["name"]] != "M") {
								masterData.HEADER[i].entityType = "HEADERS";
								if(error == null) {
									error = {};
								}
								if(error.MEASURES == undefined) {
									error.MEASURES = {};
								}
								if(error.MEASURES[measuresArr[j]["name"]] == undefined) {
									error.MEASURES[measuresArr[j]["name"]] = [];	
								}
								error.MEASURES[measuresArr[j]["name"]].push(masterData.HEADER[i]);
								break;
							}
						}
					}
					else {
						if(dimensions[masterData.HEADER[i].DIMENSION] != "D") {
							masterData.HEADER[i].entityType = "HEADERS";
							if(error == null) {
								error = {};
							}
							if(error.DIMENSIONS == undefined) {
								error.DIMENSIONS = {};
							}
							if(error.DIMENSIONS[masterData.HEADER[i].DIMENSION] == undefined) {
								error.DIMENSIONS[masterData.HEADER[i].DIMENSION] = [];	
							}
							error.DIMENSIONS[masterData.HEADER[i].DIMENSION].push(masterData.HEADER[i]);
						}
					}
				}
			}
		}
		return error;
	},
	
	copyDDAConfiguration: function() {
		var that = this;
		if(this.copyClipboard && this.copyClipboard.evaluationData) {
			var payload = {sourceEvaluationId:this.copyClipboard.evaluationData.ID, targetEvaluationId: that.evaluationId};
			var callCopyDDA = function(){
				sap.suite.ui.smartbusiness.lib.Util.utils.create(sap.suite.ui.smartbusiness.lib.Util.utils.serviceUrl("COPY_DDA_CONFIGURATION_SERVICE_URI"),payload,null,function(data){
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_SUCCESS"));
					that.oApplicationFacade.__refreshModel = 1;
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: "EVALUATIONS_MODELER(ID='" + that.evaluationId + "',IS_ACTIVE=1)"});
					//that.getView().getModel().refresh();
				},function(err){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_ERROR"), err.responseText);
					});
			};
			callCopyDDA();
		}
	},
	
	onAfterRendering: function() {
		
	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/emptyView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.evaluation.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.evaluation.Component", {
       metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", {
              "name": "Fullscreen Sample",
              "version" : "1.0.0-SNAPSHOT",
              "library" : "sap.suite.ui.smartbusiness.designtime.evaluation",
              "includes" : ["../../lib/Util.js","../../lib/OData.js","../../Adapter.js"],
              "dependencies" : {
                     "libs" : ["sap.m"],
                     "components" : [],
              },
              "config" : {
              	"resourceBundle" : "i18n/i18n.properties",
          			"titleResource" : "FULLSCREEN_TITLE",
          			"icon" : "sap-icon://Fiori5/F0822",
          			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0822_Create_Evaluation.ico",
          			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/57_iPhone_Desktop_Launch.png",
          			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/114_iPhone-Retina_Web_Clip.png",
          			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/72_iPad_Desktop_Launch.png",
          			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0822_Create_Evaluation/144_iPad_Retina_Web_Clip.png",
          			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
          			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
          			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
          			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
          			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
          			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
          			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
              },
              viewPath : "sap.suite.ui.smartbusiness.designtime.evaluation.view",
              fullScreenPageRoutes : {
                     // fill the routes to your full screen pages in here.
                     "fullscreen" : {
                           "pattern" : "",
                           "view" : "S1"
                     },
                     "addEvaluation" : {
                           "pattern" : "addEvaluation/{indicatorContext}",
                           "view" : "S1"
                     },
                     "editEvaluation" : {
                           "pattern" : "editEvaluation/{indicatorContext}/{evaluationContext}",
                           "view" : "S1"
                     },
                     "duplicateEvaluation" : {
                         "pattern" : "duplicateEvaluation/{indicatorContext}/{evaluationContext}",
                         "view" : "S1"
                     },
                     "editEvaluationDraft" : {
                         "pattern" : "editEvaluationDraft/{indicatorContext}/{evaluationContext}",
                         "view" : "S1"
                     },
              //     "subscreen" : {
              //            "pattern" : "second",
              //            "view" : "S2"
              //     }
              },
       }),    

       /**
       * Initialize the application
       * 
        * @returns {sap.ui.core.Control} the content
       */
       createContent : function() {
              var oViewData = {component: this};
              jQuery.sap.require("sap.ca.ui.utils.Lessifier");
              sap.ca.ui.utils.Lessifier.lessifyCSS("sap.suite.ui.smartbusiness.designtime.evaluation", "view/thresholdAndTargetBar.css"); 
              return sap.ui.view({
                     viewName : "sap.suite.ui.smartbusiness.designtime.evaluation.Main",
                     type : sap.ui.core.mvc.ViewType.XML,
                     viewData : oViewData
              });
       }
});

}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.view.thresholdAndTargetBar') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.evaluation.view.thresholdAndTargetBar");
jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/view/thresholdAndTargetBar.css");
sap.ui.core.Control.extend("sap.suite.ui.smartbusiness.designtime.evaluation.view.thresholdAndTargetBar", {
	metadata : {
		properties : {
			criticalLow:"int",
			warningLow:"int",
			target:"int",
			criticalHigh:"int",
			warningHigh:"int",
			goalType:"string"
		},
	},

	renderer : function (oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("thresholdAndTargetBar");
		oRm.writeClasses();
		oRm.write(">");

		switch(oControl.getGoalType()){
		case "MA" : {
			oControl.getMaximizingThresholdBar(oRm,oControl);
			break;
		}
		case "MI" : {
			oControl.getMinimizingThresholdBar(oRm,oControl);
			break;
		}
		case "RA" : {
			oControl.getRangeThresholdBar(oRm,oControl);
			break;
		}
		}
		oRm.write("</div>");
	},

	generateBlock : function(oRm,oControl,color,widthOfBlock){
		oRm.write("<div");
		oRm.addClass("block");
		oRm.writeClasses();
		oRm.addStyle("width",widthOfBlock+"%");
		oRm.addStyle("background-color",color);
		oRm.writeStyles();
		oRm.write("></div>");
	},
	
	generateBar : function(oRm,oControl,color){
		oRm.write("<div");
		oRm.addClass("thresholdBar");
		oRm.addStyle("background-color",color);
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write("></div>");
	},
	
	generateThresholdDiv : function(oRm,oControl){
		oRm.write("<div");
		oRm.addClass("thresholdDiv");
		oRm.writeClasses();
		oRm.write(">");
	},
	
	generateEmptyDiv : function(oRm,oControl,widthOfDiv){
		oRm.write("<div");
		oRm.addStyle("width",widthOfDiv+"%");
		oRm.writeStyles();
		oRm.write("></div>");
	},
	
	generateNumbers : function(oRm,oControl,num){
		oRm.write("<div");
		oRm.write(">")
		oRm.writeEscaped(num);
		oRm.write("</div>");
	},
	
	getMaximizingThresholdBar : function(oRm,oControl){
		var target=oControl.getTarget();
		var criticalLow = oControl.getCriticalLow();
		var warningLow = oControl.getWarningLow();
		var offsetWidth = 10;
		
		criticalLowSection=(criticalLow/target)*100;
		warningLowSection=((warningLow-criticalLow)/target)*100;
		targetSection = 100-(criticalLowSection+warningLowSection);
		
		oControl.generateThresholdDiv(oRm,oControl);	
		oControl.generateBlock(oRm,oControl, sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')),criticalLowSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')),warningLowSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),targetSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),offsetWidth);
		oRm.write("</div>");		//end of threshold div
		oControl.generateThresholdDiv(oRm,oControl);
		oControl.generateEmptyDiv(oRm,oControl,criticalLowSection);
		oControl.generateNumbers(oRm,oControl,"1");
		oControl.generateEmptyDiv(oRm,oControl,warningLowSection);
		oControl.generateNumbers(oRm,oControl,"2");
		oControl.generateEmptyDiv(oRm,oControl,targetSection);
		oControl.generateNumbers(oRm,oControl,"3");
		oControl.generateEmptyDiv(oRm,oControl,offsetWidth);
		oRm.write("</div>");		//end of number div
	},

	getMinimizingThresholdBar : function(oRm,oControl){
		var target=oControl.getTarget();
		var warningHigh = oControl.getWarningHigh();
		var criticalHigh = oControl.getCriticalHigh();
		var offsetWidth = 10;
		
		targetSection = (target/criticalHigh)*100;
		warningHighSection=((warningHigh-target)/criticalHigh)*100;
		criticalHighSection = ((criticalHigh-warningHigh)/criticalHigh)*100;
		
		oControl.generateThresholdDiv(oRm,oControl);	
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),offsetWidth);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),targetSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')),warningHighSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')),criticalHighSection);
		oRm.write("</div>");		//end of threshold div
		oControl.generateThresholdDiv(oRm,oControl);	
		oControl.generateEmptyDiv(oRm,oControl,offsetWidth);
		oControl.generateNumbers(oRm,oControl,"1");
		oControl.generateEmptyDiv(oRm,oControl,targetSection);
		oControl.generateNumbers(oRm,oControl,"2");
		oControl.generateEmptyDiv(oRm,oControl,warningHighSection);
		oControl.generateNumbers(oRm,oControl,"3");
		oControl.generateEmptyDiv(oRm,oControl,criticalHighSection);
		oRm.write("</div>");
	},

	getRangeThresholdBar : function(oRm,oControl){

		var target=oControl.getTarget();
		var criticalLow = oControl.getCriticalLow();
		var warningLow = oControl.getWarningLow();
		var warningHigh = oControl.getWarningHigh();
		var criticalHigh = oControl.getCriticalHigh();
		var offsetWidth = 10;
		
		criticalLowSection=(criticalLow/criticalHigh)*100;
		warningLowSection=((warningLow-criticalLow)/criticalHigh)*100;
		targetSection = (((target-warningLow)/criticalHigh)*100)/2;
		warningHighSection = ((warningHigh-target)/criticalHigh)*100;
		criticalHighSection = ((criticalHigh-warningHigh)/criticalHigh)*100;
		
		oControl.generateThresholdDiv(oRm,oControl);
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')),criticalLowSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')),warningLowSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),targetSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')),targetSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiCritical')),warningHighSection);
		oControl.generateBar(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')));
		oControl.generateBlock(oRm,oControl,sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative')),criticalHighSection);
		oRm.write("</div>");		//end of threshold buffer div
		oControl.generateThresholdDiv(oRm,oControl);
		oControl.generateEmptyDiv(oRm,oControl,criticalLowSection);
		oControl.generateNumbers(oRm,oControl,"1");
		oControl.generateEmptyDiv(oRm,oControl,warningLowSection);
		oControl.generateNumbers(oRm,oControl,"2");
		oControl.generateEmptyDiv(oRm,oControl,targetSection);
		oControl.generateNumbers(oRm,oControl,"3");
		oControl.generateEmptyDiv(oRm,oControl,targetSection);
		oControl.generateNumbers(oRm,oControl,"4");
		oControl.generateEmptyDiv(oRm,oControl,warningHighSection);
		oControl.generateNumbers(oRm,oControl,"5");
		oControl.generateEmptyDiv(oRm,oControl,criticalHighSection);
		oRm.write("</div>");
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/view/thresholdAndTargetBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.kpi.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.kpi.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", {
		"name": "Fullscreen Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.kpi",
		"includes" : ["../../lib/Util.js","../../Adapter.js"],
		"dependencies" : {
			"libs" : ["sap.m"],
			"components" : [],
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "FULLSCREEN_TITLE",
			"icon" : "sap-icon://Fiori5/F0817",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0817_Define_New_KPI.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0817_Define_New_KPI/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.kpi.view",
		fullScreenPageRoutes : {
			// fill the routes to your full screen pages in here.
			"editKpi" : {
				"pattern" : "editKpi/{contextPath}",
				"view" : "S1"
			},
			"createKpi" : {
				"pattern" : "",
				"view" : "S1"
			},
			"editDraftKpi" : {
				"pattern" : "editDraftKpi/{contextPath}",
				"view" : "S1"
			},
			"duplicateKpi" : {
				"pattern" : "duplicateKpi/{contextPath}",
				"view" : "S1"
			}
		//	"subscreen" : {
		//		"pattern" : "second",
		//		"view" : "S2"
		//	}
		},
		
	}),	

	/**
	 * Initialize the application
	 * 
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {
		var oViewData = {component: this};
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.kpi.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/kpi/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.tools.migration.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// extent of sap.ca.scfld.md.ComponentBase
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS1", {
		"name": "Fullscreen Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.tools.migration",
		"includes" : ["../../../lib/formatters.js","../../../lib/Util.js"],
		"dependencies" : {
			"libs" : ["sap.m", "sap.ca.ui"],
			"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "FULLSCREEN_TITLE",
//			"icon" : "sap-icon://Fiori2/F0818",
//			"favIcon" : "./resources/sap/ca/ui/themes/base/img/favicon/F0002_My_Accounts.ico",
//			"homeScreenIconPhone" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/57_iPhone_Desktop_Launch.png",
//			"homeScreenIconPhone@2" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/114_iPhone-Retina_Web_Clip.png",
//			"homeScreenIconTablet" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/72_iPad_Desktop_Launch.png",
//			"homeScreenIconTablet@2" : "./resources/sap/ca/ui/themes/base/img/launchicon/F0002_My_Accounts/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.tools.migration.view",
		fullScreenPageRoutes : {
			// fill the routes to your full screen pages in here.
			"fullscreen" : {
				"pattern" : "",
				"view" : "S1"
			}
		//	"subscreen" : {
		//		"pattern" : "second",
		//		"view" : "S2"
		//	}
		}
	}),	

	/**
	 * Initialize the application
	 * 
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {
		var oViewData = {component: this};
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.tools.migration.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained


sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.Configuration", {

	oServiceParams: {
		serviceList: [
//			{
//				name: "NO_SERVICE_ENTERED",
//				 masterCollection: "ProductCollection",
//				serviceUrl: "NO_SERVICE_ENTERED",
//				isDefault: true
//			}
		]
	},

	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
		return this.oServiceParams.serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

//jQuery.sap.includeStyleSheet("sap/suite/ui/smartbusiness/designtime/kpi/view/KpiParametersCss.css");
sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.tools.migration.view.S1", {

	onInit: function() {
		jQuery.sap.require("sap.m.MessageBox");

		var rootPath = jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.designtime.tools.migration");
		var migrationController=this;
		
		var that = this;

		// set i18n model
		this.oI18nModel = new sap.ui.model.resource.ResourceModel({
			bundleName: "sap/suite/ui/smartbusiness/designtime/tools/migration/i18n/i18n"
		});
		this.getView().setModel(migrationController.oI18nModel, "i18n");



		var oOptions = {
				bSuppressBookmarkButton : {},
				oEditBtn : {
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_MIGRATE"),
					onBtnPressed : function(evt) {
						migrationController.migrateData();
					}
				},
				buttonList : [{
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_RESET"),
					onBtnPressed : function(evt) {
						migrationController.clearData();
					}
				}, {
					sI18nBtnTxt : migrationController.oI18nModel.getResourceBundle().getText("BTN_CANCEL"),
					onBtnPressed : function(evt) {
						migrationController.cancel();
					}
				}]
		};
		this.setHeaderFooterOptions(oOptions);

		this.newEvaluationsModel=new sap.ui.model.json.JSONModel();
		var newEvaluationsObject={EVALUATIONS:[
		                                       {
		                                    	   ID: "",
		                                    	   INDICATOR: "",
		                                    	   TITLE: "",
		                                    	   OLD_ID: "",
		                                    	   VALID_ID:""

		                                       }
		                                       ]};
		this.newEvaluationsModel.setData((newEvaluationsObject));

		this._dialog = new sap.m.BusyDialog({});

		//console.log(this.newEvaluationsModel);

		this.getView().byId("kpiInput").setValueHelpOnly(true);

	},

	showBusy: function (op) {

		var migrationController=this;
		var that = this;
		
		if(op=="L")
			this._dialog.setText(migrationController.oI18nModel.getResourceBundle().getText("LOADING_DIALOG_TEXT"));

		if(op=="M")
			this._dialog.setText(migrationController.oI18nModel.getResourceBundle().getText("MIGRATING_DIALOG_TEXT"));

		this._dialog.open();

	},

	hideBusy: function () {
		var that = this;

		this._dialog.close();

	},


	handleKpiValueHelp: function(){
		var migrationController = this;
		var that = this;
		this.selectedKPIs=[];
		this.oldModel = new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/modeler_services.xsodata", true);
		this.oldModelDDA=new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/query_view_annotation_services.xsodata", true);

		this.oldModelVariants = new sap.ui.model.odata.ODataModel("/sap/hba/apps/kpi/s/odata/variant_services.xsodata", true);
		this.newModel= new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);


		this.kpiList=new sap.m.ObjectListItem({
			title:"{id}",
			number:"{evalCount}",
			numberUnit:"Evaluations",
			attributes: new sap.m.ObjectAttribute({text:"{text}" }),
		});


		var kPIListDialog = new sap.m.SelectDialog({
			//            contentWidth:"30%",
			title: migrationController.oI18nModel.getResourceBundle().getText("SELECT_KPI_DIALOG"),
			multiSelect:true,
			noDataText: "No data found",
			items: {
				path: "/ActiveKPIs",
				sorter: new sap.ui.model.Sorter({
					path: 'id',
					descending: false
				}),
				template: migrationController.kpiList
			},
			confirm: function(oEvent){

				//       migrationController.selectedKPIs.push(oEvent.getParameter("selectedItem").getProperty("title"));
				var context=oEvent.mParameters.selectedContexts;

				migrationController.selectedKPIs=[];     
				for(var i=0;i<context.length;i++){
					//       migrationController.selectedKPIs.push(context[i].getContent()[0].getContent()[0].getText());
					migrationController.selectedKPIs.push(context[i].sPath.split('\'')[1]);
				}


				if(migrationController.selectedKPIs.length>0){
					var temp;
					var check=0;
					var param1="";
					var j=0;
					for(var i=j;i<migrationController.selectedKPIs.length;i++){


						param1="ID eq '"+migrationController.selectedKPIs[i]+"' and IS_ACTIVE eq 1";
						temp=migrationController.serviceCallDataValidation("/INDICATORS",["$format=json","$filter="+param1],migrationController.newModel);

						if(temp.success){
							//     check=1;
							//     migrationController.selectedKPIs.splice(i, 1);
							check++;
							//     i=i-1;


						}


					}
				}
				//     console.log(migrationController.selectedKPIs);

				if(migrationController.selectedKPIs.length>0){



					if(check>0&&check!=migrationController.selectedKPIs.length){
						sap.m.MessageBox.show(
								migrationController.oI18nModel.getResourceBundle().getText("MSG_FEW_KPIs_MIGRATED"),
								sap.m.MessageBox.Icon.INFORMATION ,
								migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
								[sap.m.MessageBox.Action.OK],
								function(){ 
									//migrationController.getView().setBusy(true);
									migrationController.showBusy("L");

									setTimeout(function(){migrationController.bindEvaluations();},2500);}
						);
					}
					if(check==0){

						migrationController.showBusy("L");

						setTimeout(function(){migrationController.bindEvaluations();},2500);
//						sap.m.MessageBox.show(


//						migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_KPIs_MIGRATED"),
//						sap.m.MessageBox.Icon.INFORMATION ,
//						migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
//						[sap.m.MessageBox.Action.OK],
//						function(){
//						//  migrationController.getView().setBusy(true);

//						}
//						);
					}


					if(check>0&&check==migrationController.selectedKPIs.length){

						sap.m.MessageBox.show(
								migrationController.oI18nModel.getResourceBundle().getText("MSG_ALL_KPIs_MIGRATED"),
								sap.m.MessageBox.Icon.INFORMATION ,
								migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
								[sap.m.MessageBox.Action.OK],
								function(){
									//  migrationController.getView().setBusy(true);
									migrationController.showBusy("L");

									setTimeout(function(){migrationController.bindEvaluations();},2500);
								}
								//      function(){migrationController.bindEvaluations}
						);
					}

				}


			},
			liveChange: function(oEvent){
				var searchValue ="'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilter = new sap.ui.model.Filter("tolower(id)", sap.ui.model.FilterOperator.Contains, searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter([oFilter]);
			}
		});           


		kPIListDialog.setModel(migrationController.oldModel);
		kPIListDialog.open();
	},

	bindEvaluations: function(){

		var migrationController=this;
		migrationController.testVal=[];

		var that = this;


		var values=[];
		var temp={};

		var viewCount="";

		var oldEvaluationsList= this.getView().byId("oldList");
		var newEvaluationsList= this.getView().byId("newList");


		var popoverModelData={};

		popoverModelData.VIEWS=[];

		var dialogModelData={};
		dialogModelData.CONFIGURATIONS=[];




		var viewPopoverList= new sap.m.List({

		});
		var viewDialogList= new sap.m.List({

		});
		var popoverModel=new sap.ui.model.json.JSONModel();
		this.dialogModel=new sap.ui.model.json.JSONModel();

		this.newConfigurationObject=[];
		migrationController.newConfigurationObject.CONFIGURATIONS=[];

		var popoverStandardListItem=new sap.m.ObjectListItem ({
			title:"{viewName}",
		});

		var viewCustomListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{CONFIGURATION_NAME}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L12 M12 S12"
			        	  })
			          }),

			          new sap.m.Label({
			        	  text: "*View ID: ",
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",

			        	  value:"{VALID_CONFIGURATION_ID}",

			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",

			        	  }),



			          }),
			          ]
		});


		viewPopoverList.bindItems({
			path: "/VIEWS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'viewName',
				descending: false,
				//  group: true
			}),
			template: popoverStandardListItem


		});


		var viewPopover = new sap.m.ResponsivePopover({
			//title: "Edit Configuration",
			//endButton:new sap.m.Button({
//			text:"Close",
//			press:function(){
//			viewPopover.close();}
//			}),
			//     content:[viewDialogList]
		});




		var viewDialogCustomList=new sap.m.CustomListItem({

			content: viewCustomListGrid,

		});


		var viewDialog = new sap.m.Dialog({
			//title: "Edit Configuration",
			endButton:new sap.m.Button({
				text:migrationController.oI18nModel.getResourceBundle().getText("BTN_SAVE_CLOSE"),
				press:function(){
					var x=this.getModel().getData().CONFIGURATIONS;

					for(var i=0;i<x.length;i++){
						for(var j=0;j<migrationController.newConfigurationObject.CONFIGURATIONS.length;j++){
							if(x[i].CONFIGURATION_NAME==migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_NAME){
								migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID=x[i].VALID_CONFIGURATION_ID;
							}
						}
					}
					
					viewDialog.close();}
			}),
			//     content:[viewDialogList]
		});

		viewDialog.addContent(viewDialogList);
		viewDialog.setModel(migrationController.dialogModel);


		viewDialogList.bindItems({
			path: "/CONFIGURATIONS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'CONFIGURATION_NAME',
				descending: false,
				//  group: true
			}),
			template: viewDialogCustomList


		});

		viewPopover.addContent(viewPopoverList);
		viewPopover.setModel(popoverModel);


		oldEvaluationsList.attachUpdateStarted(function(oEvent) {
			this.setBusy(true);
			this.setNoDataText(migrationController.oI18nModel.getResourceBundle().getText("LIST_LOADING"));
		});
		oldEvaluationsList.attachUpdateFinished(function(oEvent) {
			this.setBusy(false);
			this.setNoDataText("");
			//sap.m.MessageToast.show(JSON.stringify(oEvent.getParameters()))
		});

		newEvaluationsList.attachUpdateStarted(function(oEvent) {
			this.setBusy(true);
			this.setNoDataText(migrationController.oI18nModel.getResourceBundle().getText("LIST_LOADING"));
		});
		newEvaluationsList.attachUpdateFinished(function(oEvent) {
			this.setBusy(false);
			this.setNoDataText("");
			//sap.m.MessageToast.show(JSON.stringify(oEvent.getParameters()))
		});

		for(var i=0;i<migrationController.selectedKPIs.length;i++){
			temp={};  
			temp.operator="EQ";
			temp.value1=migrationController.selectedKPIs[i];
			values.push(temp);
		}

		var oFilter = new sap.ui.model.odata.Filter("objectId", values,false);


		var oldEvaluationsListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{evaluationText}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L9 M9 S9"
			        	  })
			          }).addStyleClass("listContentTop"),

			          new sap.m.Label({
			        	  text: this.oI18nModel.getResourceBundle().getText("VAR_ID"),
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L2 M2 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",
			        	  value:"{variantId}",

			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        	  }),
			        	  editable:false


			          }),

			          new sap.m.Link({
			        	  text:{path:"/variantId",formatter:function(){
			        		  var viewCount;
			        		  var selectedKPI=this.getBindingContext().getProperty("objectId");
			        		  var selectedVariant=this.getBindingContext().getProperty("variantId");
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        		  else{
			        			  viewCount = 0;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        	  }},

			        	  press:function(oEvent){
			        		  //     var capturedSource=oEvent.getSource();
			        		  viewCount="";
			        		  popoverModelData.VIEWS=[];

			        		  var selectedKPI=this.getBindingContext().getProperty("objectId");
			        		  var selectedVariant=this.getBindingContext().getProperty("variantId");
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  //viewPopoverList.setHeaderText("Configured Views("+viewCount+")");
			        			  viewPopover.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));

			        			  for(var i=0;i<viewCount;i++){
			        				  var obj={};
			        				  obj.viewName=temp.data[0].value.split(",")[i];
			        				  popoverModelData.VIEWS.push(obj);
			        			  }
			        			  popoverModel.setData(popoverModelData);
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views("+viewCount+")");
			        			  viewPopover.openBy(oEvent.getSource());
			        			  //     viewPopover.open();


			        		  }else{
			        			  popoverModel.setData(popoverModelData);
			        			  viewCount = 0;
			        			  viewPopover.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views(0)");
			        			  //viewPopover.open();
//			        			  setTimeout(function()
//			        			  {
			        			  viewPopover.openBy(oEvent.getSource());
//			        			  }(capturedSource),5000);

			        		  }
			        	  },
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        		  indent:"L2 M2 S2",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  }),
			        	  //editable:false


			          }),

			          ]
		});



		var newEvaluationsListGrid = new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 1, 
			content: [
			          new sap.m.Label({
			        	  text: "{TITLE}",
			        	  design:sap.m.LabelDesign.Bold ,
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L9 M9 S9"
			        	  })
			          }).addStyleClass("listContentTop"),

			          new sap.m.Label({
			        	  text: "*" + this.oI18nModel.getResourceBundle().getText("EVAL_ID"),
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  })
			          }),
			          new sap.m.Input({
			        	  type:"Text",

			        	  value:"{ID}",
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",

			        		  liveChange: function(e){
			        			  //     console.log(e);
			        		  },
			        		  change: function(e){
			        			  //            console.log(e);
			        		  }
			        	  }),



			          }),


			          new sap.m.Link({
			        	  text:{path:"/variantId",formatter:function(){
			        		  var viewCount;
			        		  var selectedKPI=this.getBindingContext().getProperty("OLD_ID").split("~")[0];
			        		  var selectedVariant=this.getBindingContext().getProperty("OLD_ID").split("~")[1];
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        		  else{
			        			  viewCount = 0;
			        			  return(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
			        		  }
			        	  }},
			        	  press:function(oEvent){
			        		  viewCount="";
			        		  dialogModelData.CONFIGURATIONS=[];

			        		  var selectedKPI=this.getBindingContext().getProperty("OLD_ID").split("~")[0];
			        		  var selectedVariant=this.getBindingContext().getProperty("OLD_ID").split("~")[1];
			        		  var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+selectedKPI+"' and variantId eq '"+selectedVariant+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);
			        		  //     console.log(temp);
			        		  if(temp.success){
			        			  viewCount=temp.data[0].value.split(",").length;
			        			  //viewPopoverList.setHeaderText("Configured Views("+viewCount+")");
			        			  
			        			  viewDialog.setTitle(this.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));


			        			  var count=0;
			        			  for(var i=0;i<viewCount;i++){
			        				  count=0;
			        				  for(var j=0;j<migrationController.newConfigurationObject.CONFIGURATIONS.length;j++){
			        					  if(migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_NAME==temp.data[0].value.split(",")[i]){
			        						  count++;
			        						  var c = migrationController.newConfigurationObject.CONFIGURATIONS[j].VALID_CONFIGURATION_ID;
			        						  migrationController.newConfigurationObject.CONFIGURATIONS[j].VALID_CONFIGURATION_ID = migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID;
			        						  migrationController.newConfigurationObject.CONFIGURATIONS[j].CONFIGURATION_ID = c;
			        						  dialogModelData.CONFIGURATIONS.push(jQuery.extend({},migrationController.newConfigurationObject.CONFIGURATIONS[j]));
			        						  
			        						  break;
			        					  }

			        				  }
			        				  if(count==0){
			        					  var obj={};
			        					  obj.CONFIGURATION_NAME=temp.data[0].value.split(",")[i];
			        					  obj.CONFIGURATION_ID=temp.data[0].objectId+"~"+temp.data[0].variantId+"_"+temp.data[0].value.split(",")[i];
			        					  obj.VALID_CONFIGURATION_ID=this.getBindingContext().getProperty("VALID_ID")+"."+temp.data[0].value.split(",")[i];
			        					  obj.EVALUATION_ID=this.getBindingContext().getProperty("OLD_ID");
			        					  dialogModelData.CONFIGURATIONS.push(obj);

			        					  migrationController.newConfigurationObject.CONFIGURATIONS.push(jQuery.extend({},obj));
			        				  }
			        			  }



			        			  migrationController.dialogModel.setData(dialogModelData);
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views("+viewCount+")");
			        			  viewDialog.open();


			        		  }else{
			        			  migrationController.dialogModel.setData(dialogModelData);
			        			  viewCount = 0;
			        			  viewDialog.setTitle(that.oI18nModel.getResourceBundle().getText("CONFIGURED_DD", viewCount));
//			        			  this.setModel(popoverModel);
//			        			  this.setText("Configured Views(0)");
			        			  viewDialog.open();
			        		  }
			        	  },
			        	  layoutData : new sap.ui.layout.GridData({
			        		  span: "L8 M8 S8",
			        		  indent:"L3 M3 S3",
			        		  linebreakL: true,
			        		  linebreakM: true,
			        		  linebreakS: true
			        	  }),
			          })
			          ]
		});



		var newCustomEvaluationsList=new sap.m.CustomListItem({

			content: newEvaluationsListGrid,

		});

		var customOldEvaluationList=new sap.m.CustomListItem({

			content: oldEvaluationsListGrid,


		});







		newEvaluationsList.setModel(this.newEvaluationsModel);
		//     newEvaluationsList.unbindItems();
		newEvaluationsList.bindItems({
			path: "/EVALUATIONS",
			//     filters: [oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'INDICATOR',
				descending: false,
				group: true
			}),
			template: newCustomEvaluationsList


		});


		oldEvaluationsList.setModel(migrationController.oldModel);
		//oldEvaluationsList.setModel(migrationController.oldModelDDA,"ModelDDA");


		oldEvaluationsList.bindItems({
			path:"/ActiveEvaluations",
			filters:[ oFilter],
			sorter: new sap.ui.model.Sorter({
				path: 'objectId',
				descending: false,
				group: true
			}),
			template: customOldEvaluationList
		});



		this.prepareTempDataForNewList();
	},

	prepareTempDataForNewList:function(){

		var newEvaluationsObject={};
		newEvaluationsObject.EVALUATIONS=[];

		var that = this;
		var migrationController=this;
		migrationController.objectToPush={};
		migrationController.objectToPush.INDICATORS=[];
		migrationController.objectToPush.INDICATOR_TEXTS=[];
		migrationController.objectToPush.EVALUATIONS=[];
		migrationController.objectToPush.EVALUATION_TEXTS=[];
		migrationController.objectToPush.EVALUATION_FILTERS=[];
		migrationController.objectToPush.EVALUATION_VALUES=[];
		migrationController.objectToPush.TAGS=[];

		var KPIData=[];
		var KPITextData=[];

		var noOfEvaluations=0;
		var EvaluationData=[];


		var VariantData=[];

		var KPIObjectResponse={};
		var EvaluationObjectResponse={};
		var KPITextsObjectResponse={};
		var KPIObjectParameters="";
		var EvaluationObjectParameters="";
		var KPITextsObjectParameters="";

		for(var i=0;i<migrationController.selectedKPIs.length;i++){


			if(i<(migrationController.selectedKPIs.length-1)){
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"' or ";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"' or ";
			}

			else{
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"'";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"'";
			}
		}

		KPIObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIs",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);
		EvaluationObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluations",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);
		KPITextsObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIsTexts",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);


		if(KPIObjectResponse.success){
			KPIData=KPIObjectResponse.data;
		}
		if(EvaluationObjectResponse.success){
			EvaluationData=EvaluationObjectResponse.data;
		}

		if(KPITextsObjectResponse.success){
			KPITextData=KPITextsObjectResponse.data;
		}


		if(KPIData.length>0&&KPITextData.length>0){

			for(var i=0;i<KPITextData.length;i++){

				migrationController.objectToPush.INDICATOR_TEXTS.push(migrationController.migrateIndicatorTexts(KPITextData[i]));

			}
		}


		if(KPIData.length>0){

			for(var i=0;i<KPIData.length;i++){
				var tempTags=[];
				migrationController.objectToPush.INDICATORS.push(migrationController.migrateIndicator(KPIData[i]));

				//tempIndicatorTexts=migrationController.migrateIndicatorTexts(KPIData[i]);

				tempTags=migrationController.migrateTags(KPIData[i]);
				if(tempTags.length>0){
					for(var k=0;k<tempTags.length;k++){
						migrationController.objectToPush.TAGS.push(tempTags[k]);
					}
				}

				if(EvaluationData.length>0){

					for(var j=0;j<EvaluationData.length;j++){
						if(KPIData[i].id==EvaluationData[j].objectId){
							newEvaluationsObject.EVALUATIONS.push(migrationController.migrateTempEvaluation(KPIData[i],EvaluationData[j]));

						}

					}
				}
			}

		}

		this.newEvaluationsModel.setData(newEvaluationsObject);
		migrationController.hideBusy();
		if(newEvaluationsObject.EVALUATIONS.length==0){
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_EVALUATIONS"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK]
					//      function(){migrationController.bindEvaluations}
			);
		}
		//console.log(newEvaluationsObject);
	},




	prepareMigrationData:function(){


		var migrationController=this;

		var that = this;
		var newEvaluationsObject=this.newEvaluationsModel.getData();

		var newConfigurationObject=migrationController.newConfigurationObject.CONFIGURATIONS;


		if(migrationController.objectToPush.EVALUATIONS.length>0)
			migrationController.objectToPush.EVALUATIONS=[];

		migrationController.objectToPush.EVALUATION_TEXTS=[];
		migrationController.objectToPush.EVALUATION_FILTERS=[];
		migrationController.objectToPush.EVALUATION_VALUES=[];

		migrationController.objectToPush.DDA_MASTER=[];
		migrationController.objectToPush.DDA_CONFIG=[];
		migrationController.objectToPush.DDA_FILTERS=[];
		migrationController.objectToPush.DDA_HEADER=[];
		migrationController.objectToPush.DDA_CHART=[];
		migrationController.objectToPush.DDA_COLUMNS=[];

		migrationController.objectToPush.DDA_MASTER_TEXT=[];


		var KPIData=[];

		var noOfEvaluations=0;
		var EvaluationData=[];

		var EvaluationTextData;
		var VariantData=[];

		var KPIObjectResponse={};
		var EvaluationObjectResponse={};
		var EvaluationsTextsObjectResponse={};
		var VariantValuesObjectResponse={};
		var DDAObjectResponse={};
		var viewObjectResponse={};
		var viewPropertiesObjectResponse={};

		var KPIObjectParameters="";
		var EvaluationObjectParameters="";
		var EvaluationsTextsObjectParameters="";
		var VariantValuesObjectParameters="";
		var DDAObjectParameters="";
		var viewObjectParameters="";
		var viewPropertiesObjectParameters="";

		for(var i=0;i<migrationController.selectedKPIs.length;i++){


			if(i<(migrationController.selectedKPIs.length-1)){
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"' or ";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"' or ";

			}

			else{
				KPIObjectParameters+="id eq '"+migrationController.selectedKPIs[i]+"'";
				EvaluationObjectParameters+="objectId eq '"+migrationController.selectedKPIs[i]+"'";
			}
		}



		KPIObjectResponse=migrationController.serviceCallDataValidation("/ActiveKPIs",["$format=json","$filter=("+KPIObjectParameters+")"],migrationController.oldModel);
		EvaluationObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluations",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);
		EvaluationsTextsObjectResponse=migrationController.serviceCallDataValidation("/ActiveEvaluationsTexts",["$format=json","$filter=("+EvaluationObjectParameters+")"],migrationController.oldModel);

		//=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATION",["$format=json","$filter=("+param2+")"],migrationController.oldModelDDA);



		if(KPIObjectResponse.success){
			KPIData=KPIObjectResponse.data;
		}
		if(EvaluationObjectResponse.success){
			EvaluationData=EvaluationObjectResponse.data;
		}
		if(EvaluationsTextsObjectResponse.success){
			EvaluationTextData=EvaluationsTextsObjectResponse.data;
		}

		if(EvaluationTextData&&EvaluationData){
			if(EvaluationTextData.length>0&&EvaluationData.length>0){

				for(var i=0;i<EvaluationTextData.length;i++){

					migrationController.objectToPush.EVALUATION_TEXTS.push(migrationController.migrateEvaluationTexts(EvaluationTextData[i],newEvaluationsObject.EVALUATIONS));
				}

			}
		}

		if(KPIData.length>0&&EvaluationData.length>0){

			for(var i=0;i<KPIData.length;i++){

				for(var j=0;j<EvaluationData.length;j++){
					if(KPIData[i].id==EvaluationData[j].objectId){

						var tempEvaluationValues=[];
						migrationController.objectToPush.EVALUATIONS.push(migrationController.migrateEvaluation(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS));

						tempEvaluationValues=migrationController.migrateEvaluationValues(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS);
						for(var k=0;k<tempEvaluationValues.length;k++){
							migrationController.objectToPush.EVALUATION_VALUES.push(tempEvaluationValues[k]);

						}

					}

				}

			}






			for(var j=0;j<EvaluationData.length;j++){
				VariantValuesObjectParameters="id eq '"+EvaluationData[j].variantId+"'";
				VariantValuesObjectResponse=migrationController.serviceCallDataValidation("/VARIANT_VALUES",["$format=json","$filter=("+VariantValuesObjectParameters+")"],migrationController.oldModelVariants);
				if(VariantValuesObjectResponse.success){
					var tempEvaluationFilters=[];
					tempEvaluationFilters=migrationController.migrateEvaluationFilters(EvaluationData[j],VariantValuesObjectResponse.data,newEvaluationsObject.EVALUATIONS);
					for(var k=0;k<tempEvaluationFilters.length;k++){
						migrationController.objectToPush.EVALUATION_FILTERS.push(tempEvaluationFilters[k]);

					}
				}
			}

			var viewCount="";

			for(var j=0;j<EvaluationData.length;j++){

				var temp=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=(objectId eq '"+EvaluationData[j].objectId+"' and variantId eq '"+EvaluationData[j].variantId+"' and property eq 'queryAnnotationDocURIs')"],migrationController.oldModel);



				DDAObjectParameters="objectId eq '"+EvaluationData[j].objectId+"' and variantId eq '"+EvaluationData[j].variantId+"'";
				DDAObjectResponse=migrationController.serviceCallDataValidation("/DDA_CONFIG_PROPERTIES",["$format=json","$filter=("+DDAObjectParameters+")"],migrationController.oldModel);


				if(temp.success&&DDAObjectResponse.success){
					var dda={};
					var counts=0;
					var countq=0;
					var validEval="";
					var E_ID;

					var validVariant=temp.data[0].variantId.split(' ').join('');
					var variantToJoin="";

					if(validVariant.indexOf('.')>-1){
						variantToJoin=validVariant.split('.');
						validEval=E_ID||(temp.data[0].objectId + "."+variantToJoin[variantToJoin.length-1]);

					}
					else{
						validEval=E_ID||(temp.data[0].objectId + "."+validVariant);

					}
					//console.log(temp);

					viewCount=temp.data[0].value.split(",").length;

					//            if(viewCount!=newConfigurationObject.length){

					for(var s=0;s<viewCount;s++){
						countq=0;
						counts=0;
						for(var z=0;z<newConfigurationObject.length;z++){
							if(newConfigurationObject[z].CONFIGURATION_NAME==temp.data[0].value.split(",")[s])
							{counts++;
							break;


							}

						}
						if(counts==0){
							dda={};

							dda.CONFIGURATION_ID=validEval+"."+temp.data[0].value.split(",")[s];
							dda.CONFIGURATION_NAME=temp.data[0].value.split(",")[s];
							for(var q=0;q<newEvaluationsObject.EVALUATIONS.length;q++){

								if((EvaluationData[j].objectId+"~"+EvaluationData[j].variantId)==newEvaluationsObject.EVALUATIONS[q].OLD_ID)
								{
									countq++;
									dda.EVALUATION_ID=newEvaluationsObject.EVALUATIONS[q].OLD_ID;
									break;
								}
							}
							if(countq==0)
							{
								dda.EVALUATION_ID=EvaluationData[j].objectId+"~"+EvaluationData[j].variantId;
								break
							}

							newConfigurationObject.push(jQuery.extend({},dda));
						}
					}
					//     }


					viewObjectParameters="";
					for(var k=0;k<viewCount;k++){

						if(k<(viewCount-1)){
							viewObjectParameters+="queryViewAnnotationDocumentURI eq '"+temp.data[0].value.split(",")[k]+"' or ";

						}

						else{
							viewObjectParameters+="queryViewAnnotationDocumentURI eq '"+temp.data[0].value.split(",")[k]+"'";
						}

					}
					if(j==0||viewPropertiesObjectParameters=="")
						viewPropertiesObjectParameters=viewObjectParameters;
					else   
						viewPropertiesObjectParameters+=" or "+viewObjectParameters;

					if(viewObjectParameters.length>0)
					{
						viewObjectResponse=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATION",["$format=json","$expand=QUERY_VIEW_PROPERTIES&$filter=("+viewObjectParameters+")"],migrationController.oldModelDDA);



						if(viewObjectResponse.success)
							migrationController.migrateDDA(DDAObjectResponse.data,viewObjectResponse.data,newEvaluationsObject.EVALUATIONS,newConfigurationObject);
					}
//					tempEvaluationValues=migrationController.migrateEvaluationValues(KPIData[i],EvaluationData[j],newEvaluationsObject.EVALUATIONS);
//					for(var k=0;k<tempEvaluationValues.length;k++){
//					migrationController.objectToPush.EVALUATION_VALUES.push(tempEvaluationValues[k]);

//					}
				}      


			}

			//console.log(newConfigurationObject);
			if(viewPropertiesObjectParameters.length>0){
				viewPropertiesObjectResponse=migrationController.serviceCallDataValidation("/QUERYVIEWANNOTATIONTEXTS",["$format=json","$filter=("+viewPropertiesObjectParameters+")"],migrationController.oldModelDDA);
				var tempDDAText=[];
				if(viewPropertiesObjectResponse.success){
					tempDDAText=migrationController.migrateDDAText(viewPropertiesObjectResponse.data,newConfigurationObject,newEvaluationsObject.EVALUATIONS);
					for(var k=0;k<tempDDAText.length;k++){
						migrationController.objectToPush.DDA_MASTER_TEXT.push(tempDDAText[k]);

					}
				}
			}





		}




		//console.log(migrationController.objectToPush);



	},






	migrateIndicator: function(K, mode) {
		mode = mode || 1;
		var INDICATORS = {};
		INDICATORS.ID=K.id;
		INDICATORS.IS_ACTIVE=mode;
		INDICATORS.TYPE="KPI";
		INDICATORS.TITLE=K.text;
		INDICATORS.DESCRIPTION=K.description||"";
		if(Number(K.improvementDirection) == 0) {
			INDICATORS.GOAL_TYPE="RA";
		}
		else if(Number(K.improvementDirection) == 1) {
			INDICATORS.GOAL_TYPE="MA";
		}
		else {
			INDICATORS.GOAL_TYPE="MI";
		}
		INDICATORS.DATA_SPECIFICATION="";
		INDICATORS.ODATA_URL=K.queryServiceURI;
		INDICATORS.ODATA_ENTITYSET=K.queryQualifiedResultEntitySetName;
		INDICATORS.VIEW_NAME="";
		INDICATORS.COLUMN_NAME=K.queryResultMeasurePropertyName;
		INDICATORS.OWNER_NAME=K.owner||"";
		INDICATORS.OWNER_ID="";
		INDICATORS.ENTITY_TYPE="";
		INDICATORS.OWNER_E_MAIL="";

		INDICATORS.ODATA_PROPERTY="";
		INDICATORS.SEMANTIC_OBJECT=K.semanticObject;
		INDICATORS.ACTION=K.semanticObjectAlias;

		return INDICATORS;
	},

	migrateIndicatorTexts:function(K){

		var INDICATOR_TEXTS={};

		INDICATOR_TEXTS.ID=K.id;
		INDICATOR_TEXTS.IS_ACTIVE=1;
		INDICATOR_TEXTS.LANGUAGE=K.sapLanguageKey;
		INDICATOR_TEXTS.TITLE=K.text;
		INDICATOR_TEXTS.DESCRIPTION=K.description||"";


		return INDICATOR_TEXTS;

	},

	migrateTags: function(K, mode, type) {
		mode = mode || 1;
		type = type || "IN";
		var TAGS = [];
		var tags = {};

		if(K.tags)
		{
			if(K.tags.length>0){
				var tagList = K.tags.split(",");
				for(var i=0,l=tagList.length; i<l; i++) {
					tags.ID=K.id;
					tags.IS_ACTIVE=mode;
					tags.TYPE=type;
					tags.TAG=tagList[i];
					TAGS.push(tags);
					tags = {};
				}
				return TAGS;
			}
		}
		return TAGS;
	},

	migrateEvaluation: function(K, E,Etemp, mode) {
		mode = mode || 1;
		var EVALUATIONS = {};
		var E_ID;

		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATIONS.ID=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			EVALUATIONS.ID=E_ID||(E.objectId + "."+validVariant);

		}


		//EVALUATIONS.ID=E_ID||(E.objectId + "~" + E.variantId);
		EVALUATIONS.IS_ACTIVE=mode;
		EVALUATIONS.INDICATOR=E.objectId;
		EVALUATIONS.INDICATOR_TYPE="KPI";
		EVALUATIONS.TITLE=E.evaluationText;
		EVALUATIONS.DESCRIPTION="";  
		EVALUATIONS.VIEW_NAME="";
		EVALUATIONS.SCALING=E.scaleFactor; 
		EVALUATIONS.ODATA_URL=K.queryServiceURI;
		EVALUATIONS.ODATA_ENTITYSET=K.queryQualifiedResultEntitySetName;
		EVALUATIONS.COLUMN_NAME=K.queryResultMeasurePropertyName;
		EVALUATIONS.OWNER_NAME=K.owner||"";
		EVALUATIONS.OWNER_ID=""
			EVALUATIONS.OWNER_E_MAIL=""
				EVALUATIONS.ENTITY_TYPE="";
		if(Number(K.improvementDirection) == 0) {
			EVALUATIONS.GOAL_TYPE="RA";
		}
		else if(Number(K.improvementDirection) == 1) {
			EVALUATIONS.GOAL_TYPE="MA";
		}
		else {
			EVALUATIONS.GOAL_TYPE="MI";
		}
		EVALUATIONS.DATA_SPECIFICATION="";
		EVALUATIONS.ODATA_PROPERTY="";
		EVALUATIONS.SEMANTIC_OBJECT=K.semanticObject;
		EVALUATIONS.ACTION=K.semanticObjectAlias;
		EVALUATIONS.VALUES_SOURCE="FIXED";

		return EVALUATIONS;
	},

	migrateEvaluationTexts:function(E,Etemp){

		var E_ID;
		var EVALUATION_TEXTS={};


		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID){
				E_ID=Etemp[i].ID;
				break;
			}

		}

		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATION_TEXTS.ID=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			EVALUATION_TEXTS.ID=E_ID||(E.objectId + "."+validVariant);

		}

		//            EVALUATION_TEXTS.ID=(E.objectId + "~" + E.variantId);
		EVALUATION_TEXTS.IS_ACTIVE=1;
		EVALUATION_TEXTS.LANGUAGE=E.sapLanguageKey;
		EVALUATION_TEXTS.TITLE=E.evaluationText;
		EVALUATION_TEXTS.DESCRIPTION="";


		return EVALUATION_TEXTS;

	},

	migrateTempEvaluation: function(K, E, mode) {
		mode = mode || 1;
		var EVALUATIONS = {};


		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			EVALUATIONS.ID=E.objectId + "."+variantToJoin[variantToJoin.length-1];
			EVALUATIONS.VALID_ID=E.objectId + "." + variantToJoin[variantToJoin.length-1];
		}
		else{
			EVALUATIONS.ID=E.objectId + "."+validVariant;
			EVALUATIONS.VALID_ID=E.objectId + "." + validVariant;
		}

		EVALUATIONS.OLD_ID=E.objectId + "~" + E.variantId;
		EVALUATIONS.VARIANT_ID=validVariant;
		EVALUATIONS.INDICATOR=E.objectId;
		EVALUATIONS.TITLE=E.evaluationText;
		return EVALUATIONS;
	},


	migrateEvaluationValues: function(K, E,Etemp, mode) {
		mode = mode || 1;
		var EVALUATION_VALUES=[];
		var evaluationValues = {};

		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(E.objectId + "."+validVariant);

		}

		//EVALUATIONS.ID=E_ID||(E.objectId + "~" + E.variantId);
		var count = 0;

		if((E.toleranceRangeHighValue == 0) || E.toleranceRangeHighValue){
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="WH";
			evaluationValues.FIXED=E.toleranceRangeHighValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.deviationRangeHighValue == 0) || E.deviationRangeHighValue){   
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="CH";
			evaluationValues.FIXED=E.deviationRangeHighValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}

		if((E.toleranceRangeLowValue == 0) || E.toleranceRangeLowValue){     
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="WL";
			evaluationValues.FIXED=E.toleranceRangeLowValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.deviationRangeLowValue == 0) || E.deviationRangeLowValue){     
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="CL";
			evaluationValues.FIXED=E.deviationRangeLowValue;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		if((E.target == 0) || E.target) {
			evaluationValues.ID=alterEval;
			evaluationValues.IS_ACTIVE=mode;
			evaluationValues.TYPE="TA";
			evaluationValues.FIXED=E.target;
			evaluationValues.COLUMN_NAME="";
			evaluationValues.ODATA_PROPERTY="";
			EVALUATION_VALUES.push(evaluationValues);
			evaluationValues = {};
		}
		return EVALUATION_VALUES;
	},


	migrateEvaluationFilters: function(E, V,Etemp, mode) {
		mode = mode || 1;
		var EVALUATION_FILTERS = [];
		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((E.objectId + "~" + E.variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=E.variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(E.objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(E.objectId + "."+validVariant);

		}

		var evaluationFilters = {};
		for(var i=0,l=V.length; i<l; i++) {
			evaluationFilters.ID=alterEval;
			evaluationFilters.IS_ACTIVE=mode;

//			if(V[i].filterPropertyName=="F")
//	evaluationFilters.NAME="FI";
//			if(V[i].filterPropertyName=="I")
//			evaluationFilters.NAME="PA";

			evaluationFilters.NAME=V[i].filterPropertyName

			evaluationFilters.VALUE_1=V[i].value;
			evaluationFilters.VALUE_2=V[i].valueTo||"";
			evaluationFilters.OPERATOR=V[i].comparator;

			if(V[i].type=="F")
				evaluationFilters.TYPE="FI";
			if(V[i].type=="I")
				evaluationFilters.TYPE="PA";

			EVALUATION_FILTERS.push(evaluationFilters);
			evaluationFilters = {};
		}
		return EVALUATION_FILTERS;
	},

	migrateDDAText:function(C,Ctemp,Etemp){

		var migrationController=this;
		var DDA_MASTER_TEXT=[];
		var DDA_TEXT={};

		var C_ID=[];
		var E_ID=[];
		for(var j=0;j<C.length;j++){
			for(var i=0;i<Ctemp.length;i++){

				if(C[j].queryViewAnnotationDocumentURI==Ctemp[i].CONFIGURATION_NAME)
				{      
					C_ID[j]=Ctemp[i].CONFIGURATION_ID;
					//E_ID[j]=Ctemp[i].EVALUATION_ID;
					for(var k=0;k<Etemp.length;k++){

						if(Ctemp[i].EVALUATION_ID==Etemp[k].OLD_ID)
						{      
							E_ID[j]=Etemp[k].ID;
							break;
							//E_ID[j]=Ctemp[i].EVALUATION_ID;
						}

					}
				}



			}


		}

		for(var i=0;i<C.length;i++){
			DDA_TEXT={};
			DDA_TEXT.CONFIGURATION_ID=C_ID[i];
			DDA_TEXT.EVALUATION_ID=E_ID[i];
			//DDA_TEXT.CONFIGURATION_ID=C[i].queryViewAnnotationDocumentURI;
			DDA_TEXT.SAP_LANGUAGE_KEY=C[i].sapLanguageKey;
			DDA_TEXT.TEXT=C[i].title;
			DDA_TEXT.IS_ACTIVE = 1;

			DDA_MASTER_TEXT.push(DDA_TEXT);
		}

		return DDA_MASTER_TEXT;

	},


	migrateDDAText:function(C,Ctemp,Etemp){

		var migrationController=this;
		var DDA_MASTER_TEXT=[];
		var DDA_TEXT={};

		var C_ID=[];
		var E_ID=[];
		for(var j=0;j<C.length;j++){
			for(var i=0;i<Ctemp.length;i++){

				if(C[j].queryViewAnnotationDocumentURI==Ctemp[i].CONFIGURATION_NAME)
				{      
					C_ID[j]=Ctemp[i].CONFIGURATION_ID;
					//E_ID[j]=Ctemp[i].EVALUATION_ID;
					for(var k=0;k<Etemp.length;k++){

						if(Ctemp[i].EVALUATION_ID==Etemp[k].OLD_ID)
						{      
							E_ID[j]=Etemp[k].ID;
							break;
							//E_ID[j]=Ctemp[i].EVALUATION_ID;
						}

					}
				}



			}


		}

		for(var i=0;i<C.length;i++){
			DDA_TEXT={};
			DDA_TEXT.CONFIGURATION_ID=C_ID[i];
			DDA_TEXT.EVALUATION_ID=E_ID[i];
			//DDA_TEXT.CONFIGURATION_ID=C[i].queryViewAnnotationDocumentURI;
			DDA_TEXT.SAP_LANGUAGE_KEY=C[i].sapLanguageKey;
			DDA_TEXT.TEXT=C[i].title;
			DDA_TEXT.IS_ACTIVE = 1;

			DDA_MASTER_TEXT.push(DDA_TEXT);
		}

		return DDA_MASTER_TEXT;

	},


	migrateDDA:function(DDA, QVA,Etemp,Ctemp) {

		var migrationController=this;
		var ddaObj = {};
		var qvaArr = [];

		var qvaObj = {};

		var E_ID;
		for(var i=0;i<Etemp.length;i++){
			if((DDA[0].objectId + "~" + DDA[0].variantId)==Etemp[i].OLD_ID)
				E_ID=Etemp[i].ID;

		}

		var alterEval="";
		var variantToJoin="";
		var validVariant=DDA[0].variantId.split(' ').join('');
		if(validVariant.indexOf('.')>-1){
			variantToJoin=validVariant.split('.');
			alterEval=E_ID||(DDA[0].objectId + "."+variantToJoin[variantToJoin.length-1]);

		}
		else{
			alterEval=E_ID||(DDA[0].objectId + "."+validVariant);

		}


		for(var i=0,l=QVA.length; i<l; i++) {
			qvaObj = QVA[i];
			var count=0;
			for(var j=0,m=QVA[i].QUERY_VIEW_PROPERTIES.length; j<m; j++) {
				qvaObj[QVA[i].QUERY_VIEW_PROPERTIES[j]["property"]] = QVA[i].QUERY_VIEW_PROPERTIES[j]["value"];
			}
			if(qvaArr.length==0)
				qvaArr.push(jQuery.extend({},qvaObj))

				else{
					for(var k=0;k<qvaArr.length;k++){
						if(qvaObj.queryViewAnnotationDocumentURI==qvaArr[k].queryViewAnnotationDocumentURI)
							count++;


					}
					if(count==0)
						qvaArr.push(jQuery.extend({},qvaObj));
				}

			delete qvaObj.QUERY_VIEW_PROPERTIES;
		}



		for(var i=0,l=DDA.length; i<l; i++) {
			if(DDA[i].property == 'queryAnnotationDocURIs') {
				ddaObj.queryAnnotationDocURIs = DDA[i].value.split(",");
			}
			else if(DDA[i].property == 'filters'){
				ddaObj.filters = DDA[i].value.split(",");
			}
			else {
				ddaObj[DDA[i].property] = DDA[i].value;
			}
		}

		/*
		 *            ADDED THE FILTERS CONFIG AND HEADERS CODE HERE MOVING THEM TO EVAL LEVEL
		 */

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_FILTER
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID = "NIL";

		if(ddaObj.filters){
			for(j=0,m=ddaObj.filters.length; j<m; j++) {
				ddaConfigObj.DIMENSION = ddaObj.filters[j];                          
				ddaConfigObj.VISIBILITY = 1;
				ddaConfigObj.IS_ACTIVE = 1;
				migrationController.objectToPush.DDA_FILTERS.push(jQuery.extend({},ddaConfigObj));               
			}
		}

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_HEADER
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID="NIL";

		ddaConfigObj.REFERENCE_EVALUATION_ID = ddaConfigObj.EVALUATION_ID;
		ddaConfigObj.VISUALIZATION_TYPE = 'NT';
		ddaConfigObj.VISUALIZATION_ORDER = 1;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.VISUALIZATION_TYPE = 'AT';
		ddaConfigObj.VISUALIZATION_ORDER = 2;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.VISUALIZATION_TYPE = 'TT';
		ddaConfigObj.VISUALIZATION_ORDER = 3;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.DIMENSION = null;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_HEADER.push(jQuery.extend({},ddaConfigObj));

		// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_CONFIGURATION
		ddaConfigObj = {};
		ddaConfigObj.EVALUATION_ID = alterEval;
		ddaConfigObj.CONFIGURATION_ID = "NIL";

		ddaConfigObj.PROPERTY_TYPE = 'SAP_FILTER';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.isFilter || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));



		ddaConfigObj.PROPERTY_TYPE = 'SAP_AGGREGATE_VALUE';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.aggregateNumberEnabled || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'SAP_HEADER';
		ddaConfigObj.PROPERTY_VALUE = '';
		ddaConfigObj.VISIBILITY = ddaObj.isTarget || 0;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'QUERY_SERVICE_URI';
		ddaConfigObj.PROPERTY_VALUE = QVA[0].queryServiceURI;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

		ddaConfigObj.PROPERTY_TYPE = 'QUERY_ENTITY_SET';
		ddaConfigObj.PROPERTY_VALUE = QVA[0].queryQualifiedResultEntitySetName;
		ddaConfigObj.VISIBILITY = 1;
		ddaConfigObj.IS_ACTIVE = 1;
		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));

//		ddaConfigObj.PROPERTY_TYPE = 'THRESHOLD_MEASURE';
//		ddaConfigObj.PROPERTY_VALUE = qvaArr[i].semanticColorMeasure ? qvaArr[i].semanticColorMeasure.split(",") : null;
//		ddaConfigObj.VISIBILITY = 1;
//		ddaConfigObj.IS_ACTIVE = 1;
//		migrationController.objectToPush.DDA_CONFIG.push(jQuery.extend({},ddaConfigObj));



		for(var i=0,l=ddaObj.queryAnnotationDocURIs.length; i<l; i++) {
			var ddaConfigObj = {};
			var C_ID;

			for(var k=0;k<Ctemp.length;k++){
				if(ddaObj.queryAnnotationDocURIs[i]==Ctemp[k].CONFIGURATION_NAME)
					C_ID=Ctemp[k].CONFIGURATION_ID;

			}



			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_MASTER
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);
			ddaConfigObj.TEXT = qvaArr[i].title;
			ddaConfigObj.CONFIG_ORDER = i+1;
			ddaConfigObj.IS_ACTIVE = 1;
			migrationController.objectToPush.DDA_MASTER.push(jQuery.extend({},ddaConfigObj));




			/*
                            REMOVED THE FILTERS CONFIG AND HEADERS CODE FROM HERE MOVED OUTSIDE THE FOR LOOP

			 */



			ddaConfigObj = {};
			var columnOrder = 1;
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);

			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_COLUMNS
			var measures = qvaArr[i].measurePropertyNames.split(",");
			var dimensions = qvaArr[i].dimensionPropertyNames.split(",");
			var queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="dimensionPropertySortNames"});
			var sortDimVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var sortDimensions = sortDimVal ? sortDimVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="measurePropertySortNames"});
			var sortMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var sortMeasures = sortMsrVal ? sortMsrVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="colorNames"});
			var colorVal = queryViewPropArr.length? queryViewPropArr[0].value : null;
			var colorNames = colorVal ? colorVal.split(",") : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="colorType"}); 
			var colTypeVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			queryViewPropArr =qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="semanticColorMeasure"});
			var semMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			queryViewPropArr = qvaArr[i].QUERY_VIEW_PROPERTIES.results.filter(function(x){ return x["property"]=="hiddenMeasureNames"});
			var hidMsrVal = queryViewPropArr.length ? queryViewPropArr[0].value : null;
			var hidMsrArr = hidMsrVal ? hidMsrVal.split(",") : null;
			//var semanticColorMeasure = qvaArr[i].semanticColorMeasure ? qvaArr[i].semanticColorMeasure.split(",") : null;
			for(var j=0,m=dimensions.length; j<m; j++) {                                      
				ddaConfigObj.NAME = dimensions[j];
				ddaConfigObj.TYPE = 'DIMENSION';
				if(sortDimensions!=null)
				{
					if(sortDimensions.length)
					{
						ddaConfigObj.SORT_BY = (sortDimensions && sortDimensions[j]) ? sortDimensions[j] : dimensions[j];
					}
					else
						ddaConfigObj.SORT_BY =dimensions[j];
				}
				else
					ddaConfigObj.SORT_BY =dimensions[j];

//				else
//	ddaConfigObj.SORT_BY=null;
ddaConfigObj.AXIS = 1;
ddaConfigObj.STACKING = 0;
ddaConfigObj.VISIBILITY = "BOTH";
ddaConfigObj.COLOR = null;
switch(Number(qvaArr[i].orderBy)) {
case 1: ddaConfigObj.SORT_ORDER = null;
break;
case 2: ddaConfigObj.SORT_ORDER = null;
break;
case 3: ddaConfigObj.SORT_ORDER = 'asc';
break;
case 4: ddaConfigObj.SORT_ORDER = 'desc';
break;
case 0: ddaConfigObj.SORT_ORDER = null;
break;
}
ddaConfigObj.COLUMNS_ORDER = columnOrder++;
ddaConfigObj.IS_ACTIVE = 1;

migrationController.objectToPush.DDA_COLUMNS.push(jQuery.extend({},ddaConfigObj));
			}

			for(var j=0,m=measures.length; j<m; j++) {                                        
				ddaConfigObj.NAME = measures[j];
				ddaConfigObj.TYPE = 'MEASURE';
				ddaConfigObj.VISIBILITY = "BOTH";
				if(sortMeasures!=null)
				{
					if(sortMeasures.length)
					{
						ddaConfigObj.SORT_BY = (sortMeasures && sortMeasures[j]) ? sortMeasures[j] : measures[j];
					}
					else
						ddaConfigObj.SORT_BY =measures[j];
				}
				else
					ddaConfigObj.SORT_BY =measures[j];
//				if(sortMeasures.length)
//	ddaConfigObj.SORT_BY = (sortMeasures && sortMeasures[j]) ? sortMeasures[j] : measures[j];
				if(qvaArr[i].chartType && (jQuery.sap.startsWithIgnoreCase(qvaArr[i].chartType,"dual")) && (j < 2)){
					ddaConfigObj.AXIS = j+1;
				}
				else{
					ddaConfigObj.AXIS = 1;
				}
				ddaConfigObj.STACKING = 0;
				ddaConfigObj.COLOR = null;
				switch(Number(qvaArr[i].orderBy)) {
				case 1: ddaConfigObj.SORT_ORDER = 'asc';
				break;
				case 2: ddaConfigObj.SORT_ORDER = 'desc';
				break;
				case 3: ddaConfigObj.SORT_ORDER = null;
				break;
				case 4: ddaConfigObj.SORT_ORDER = null;
				break;
				case 0: ddaConfigObj.SORT_ORDER = null;
				break;
				}
				ddaConfigObj.COLUMNS_ORDER = columnOrder++;
				ddaConfigObj.IS_ACTIVE = 1;

				if(qvaArr[i].chartType && (qvaArr[i].chartType.indexOf("Stacked") > -1)) {
					ddaConfigObj.STACKING = 1;
				}
				if(hidMsrArr!=null){
					if(hidMsrArr && (hidMsrArr.indexOf(measures[j])>-1)){
						ddaConfigObj.VISIBILITY = "CHART";
					}
				}
				if(colTypeVal == 0 || colTypeVal == 2) {
					if(colorNames!=null)
						ddaConfigObj.COLOR = (colorNames && colorNames[j]) ? colorNames[j] : ""; 
						else
							ddaConfigObj.COLOR="";
				}
				else if(qvaArr[i].colorType == 1) {
					//ddaConfigObj.COLOR = semanticColorMeasure;
				} 

				migrationController.objectToPush.DDA_COLUMNS.push(jQuery.extend({},ddaConfigObj));
			}



			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_CHART
			ddaConfigObj = {};
			ddaConfigObj.EVALUATION_ID = alterEval;
			ddaConfigObj.CONFIGURATION_ID = C_ID||(alterEval+"."+ddaObj.queryAnnotationDocURIs[i]);
			ddaConfigObj.VALUE_TYPE = 'ABSOLUTE';
			ddaConfigObj.AXIS_TYPE = 'SINGLE';
			ddaConfigObj.DATA_LIMIT = qvaArr[i].top || null;
			switch(qvaArr[i].chartType) {
			case null : ddaConfigObj.CHART_TYPE = 'Table';
			break;
			case 'Select Type' : ddaConfigObj.CHART_TYPE = 'Table';
			break;
			case 'StackedColumn' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'Stacked Column' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'Transposed' : ddaConfigObj.CHART_TYPE = 'Column';
			break;
			case 'DualStackedBar' : ddaConfigObj.CHART_TYPE = 'Bar';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'StackedBar' : ddaConfigObj.CHART_TYPE = 'Bar';                                                                
			break;
			case 'StackedColumn100' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			break; 
			case 'DualStackedColumn' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'DualStackedBar100' : ddaConfigObj.CHART_TYPE = 'Bar';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			case 'DualStackedColumn100' : ddaConfigObj.CHART_TYPE = 'Column';
			ddaConfigObj.VALUE_TYPE = 'PERCENTAGE';
			ddaConfigObj.AXIS_TYPE = 'DUAL';
			break;
			default : ddaConfigObj.CHART_TYPE = qvaArr[i].chartType;
			}

			switch(colTypeVal) {
			case undefined : ddaConfigObj.COLOR_SCHEME = 'NONE';
			break;
			case null : ddaConfigObj.COLOR_SCHEME = 'NONE';
			break;
			case 0 : ddaConfigObj.COLOR_SCHEME = 'MANUAL_NON_SEMANTIC';
			break;
			case 1 : ddaConfigObj.COLOR_SCHEME = 'AUTO_SEMANTIC';
			break;
			case 2 : ddaConfigObj.COLOR_SCHEME = 'MANUAL_SEMANTIC';
			break;
			default : ddaConfigObj.COLOR_SCHEME = 'NONE';
			}
			ddaConfigObj.THRESHOLD_MEASURE=semMsrVal; 
			ddaConfigObj.IS_ACTIVE = 1;
			migrationController.objectToPush.DDA_CHART.push(jQuery.extend({},ddaConfigObj));


			// MIGRATE CONTENT FROM DDA_CONFIG_PROPERTIES TO DDA_MASTER



		}



	},

	clearData: function(){

		this.getView().byId("oldList").removeAllItems();
		this.getView().byId("newList").removeAllItems();

		this.objectToPush.INDICATORS=[];
		this.objectToPush.INDICATOR_TEXTS=[];
		this.objectToPush.EVALUATIONS=[];
		this.objectToPush.EVALUATION_TEXTS=[];
		this.objectToPush.EVALUATION_FILTERS=[];
		this.objectToPush.EVALUATION_VALUES=[];
		this.objectToPush.TAGS=[];


		this.objectToPush.DDA_MASTER=[];
		this.objectToPush.DDA_CONFIG=[];
		this.objectToPush.DDA_FILTERS=[];
		this.objectToPush.DDA_HEADER=[];
		this.objectToPush.DDA_CHART=[];
		this.objectToPush.DDA_COLUMNS=[];

		this.objectToPush.DDA_MASTER_TEXT=[];

	},
	migrateData : function(){

		var migrationController=this;
		//this.dataToMigrate=this.objectToPush;
		if((this.objectToPush!=undefined)&&(this.objectToPush.INDICATORS.length>0)){
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_BEGIN"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK],
					function(){

						// migrationController.getView().setBusy(true);
						migrationController.showBusy("M");
						//this.getView().setBusy(true)
						setTimeout(function(){migrationController.writeData();},2500);
					}
			);

		}
		else{
			sap.m.MessageBox.show(
					migrationController.oI18nModel.getResourceBundle().getText("MSG_NO_KPI"),
					sap.m.MessageBox.Icon.INFORMATION ,
					migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
					[sap.m.MessageBox.Action.OK]
					//      function(){migrationController.bindEvaluations}
			);
		}
	},

	cancel : function(){
		//navigateToHomePage
		window.history.back();
	},

	writeData:function(){


		var migrationController=this;
		this.errorMessage="";

		this.prepareMigrationData();
		var data=migrationController.objectToPush;



		if(data){
			migrationController.initiateRequests();

		}


	},

	initiateRequests:function(){
		var migrationController=this;
		var uri1="/sap/hba/r/sb/core/logic/MIGRATION.xsjs";

		jQuery.ajax({
			url: "/sap/hba/r/sb/core/logic/__token.xsjs",
			async: false,
			type: "HEAD",
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {
				jQuery.ajax({
					type: "POST",
					url: uri1,
					cache: false,
					data: encodeURIComponent(JSON.stringify(migrationController.objectToPush)),
					headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token")},
					success: function(data){
						if(JSON.parse(data).success)
						{
							sap.m.MessageBox.show(
									migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_SUCCESS"),
									sap.m.MessageBox.Icon.INFORMATION ,
									migrationController.oI18nModel.getResourceBundle().getText("INFORMATION_MSG_TITLE"),
									[sap.m.MessageBox.Action.OK],
									function(){migrationController.cancel()}
							);
						}
						else{
							sap.ca.ui.message.showMessageBox({
								type: sap.ca.ui.message.Type.ERROR,
								message: migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_ERROR"),
								details: JSON.parse(data).errorMessage
							});
						}
						migrationController.hideBusy();
					},
					async: true,
					error: function (XMLHttpRequest, textStatus, errorThrown) {
						sap.ca.ui.message.showMessageBox({
							type: sap.ca.ui.message.Type.ERROR,
							message: migrationController.oI18nModel.getResourceBundle().getText("MSG_MIGRATION_ERROR"),
							details: errorThrown+"\n"+JSON.parse(XMLHttpRequest.responseText).errorMessage
						});
						migrationController.hideBusy();
					}
				});

			},
			error: function() {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_FETCH_AUTH_TOKEN"));
				$.sap.log.error("ERR_FETCH_AUTH_TOKEN");
			}
		});
	},



	serviceCreate:function(entity,payload,ODataModel)
	{
//		sap.ui.core.BusyIndicator.show();
		var result = {success:false,text: ""};
		ODataModel.create(entity,payload,null,function(data){
			result.success = true;
		},
		function(error){
			var errorText = JSON.parse(error.response.body);
			result.success = false;
			result.text =error.response.statusText+" - "+errorText.error.message.value;
		});
		return result;
	},
	serviceDelete:function(entity,id,ODataModel)
	{      
//		sap.ui.core.BusyIndicator.show();
		var result = {success:false,text: ""};
		ODataModel.remove(entity+"("+id+")",null,function(data){
			result.success = true;
		},
		function(error){
			result.success = false;
			result.text = error.response.statusText;
		},false,"",true);
		return result;
	},
	serviceCallDataValidation:function(entity, param, oDataModel)
	{      var result = {success:false,text: ""};
	oDataModel.read(entity, null, param, false,
			function(data, response)
			{      if(data.results[0])
			{      result.success = true;
			result.data = data.results;       
			}
			else
			{      result.success = false;
			result.text = "Record not found";
			}
			},
			function(data)                           
			{      result.success = false;
			result.text = data.response.statusText;
			});
	return result;
	},


	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	 * (NOT before the first rendering! onInit() is used for migrationController one!).
	 * @memberOf tool.Migration
	 */
//	onBeforeRendering: function() {

//	},

	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	 * This hook is the same one that SAPUI5 controls get after being rendered.
	 * @memberOf tool.Migration
	 */
//	onAfterRendering: function() {

//	},

	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * @memberOf tool.Migration
	 */
//	onExit: function() {

//	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/tools/migration/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.AddTileModelS.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.AddTileModelS.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.AddTileModelS", {
	onInit : function() {
		var that = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		var view = this.getView();

		this.LUMIRA_SEMANTIC_OBECT = "LumiraAnalytics";
		this.LUMIRA_ACTION = "openStory";
		
		this.lumiraSemanticObject = "LumiraAnalytics";
		this.lumiraAction = "openStory";
		
		this.apfSemanticObject = "FioriApplication";
		this.apfAction = "executeAPFConfiguration";
		
		this.APF_SEMANTIC_OBECT = "FioriApplication";
		this.APF_ACTION = "executeAPFConfiguration";
		
		this.sbAction = "analyzeSBKPIDetails";
		this.busyDialog = new sap.m.BusyDialog();
		
		this.oRouter.attachRouteMatched(function(oEvent) {
			var that = this;
			if(oEvent.getParameter("name") == "addTileModelS") {
				this.createMode = true;
				this.editMode = false;
			}
			else if(oEvent.getParameter("name") == "editTileModelS") {
				this.createMode = false;
				this.editMode = true;
			}
			else {
				this.createMode = false;
				this.editMode = false;
			}
			if(this.createMode || this.editMode) {
				this.cache = {};
				this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
				this.confRef = sap.suite.ui.smartbusiness.Configuration;
				this.constantsRef = this.confRef.Constants;
				this.tileTypeConst = this.constantsRef.TileType;
				this.oDataModel = this.oApplicationFacade.getODataModel();
				this.PLATFORM = this.metadataRef.getPlatform();
				//this.sScope = "CONF";
				this.env = 0;
				
				var chipModel = new sap.ui.model.json.JSONModel();
				this.getView().setModel(chipModel,"tileConfig");
				this.modelRef = this.getView().getModel("tileConfig");
				
				var initialData = this.getInitialModelData();
				this.getView().getModel("tileConfig").setData(initialData);
				
				// Fetch System Environment info => Either running on SAP env or CUST env
				function sysInfoFetchCallBack(d) {
					that.env = d;
					var envData = that.getModelDataAfterEnv(that.env);
					that.getView().getModel("tileConfig").setData(envData);
				}
				function sysInfoFetchErrCallBack(d,s,x) {
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"), d.response.body);
				}
				this.metadataRef.getSystemInfo({async:false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:this.oDataModel});
				
				this.oFactory = this.metadataRef.getUI2Factory();
				this.oPBService = this.metadataRef.getUI2PageBuildingService(this.oFactory);
				
				// Fetch Current Logon User
				if(!(that.oApplicationFacade.currentLogonHanaUser)) {
					//Adapter Implementation ----
					var sessionUserFetchCallBack = function(user) {
						that.oApplicationFacade.currentLogonHanaUser = user;
					};
					
					var sessionUserFetchErrCallBack = function(d,s,x) {
						that.oApplicationFacade.currentLogonHanaUser = null;
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), d.response.body);
					};
					 
					this.metadataRef.getSessionUser({async:true, success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
				}
				
//				var chipModel = new sap.ui.model.json.JSONModel();
//				this.getView().setModel(chipModel,"tileConfig");
//				this.modelRef = this.getView().getModel("tileConfig");
				this.busyDialog.open();
				var partialObject = this.fetchChipData({evalContextPath: oEvent.getParameter("arguments").contextPath, chipContextPath: oEvent.getParameter("arguments").chipContextPath});
				//this.getView().getModel("tileConfig").setData(partialObject);
				if(oEvent.getParameter("arguments").contextPath) {
					this.context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
					  var id = (/ID=\'.*\'/).exec(oEvent.getParameter("arguments").contextPath)[0];
                      that.kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));
				}
				if(oEvent.getParameter("arguments").chipContextPath) {
					this.chipContext = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").chipContextPath);
				}
				
				// Set Initial State
				this.appMode = oEvent.getParameter("name");
				that.byId("tileTitle").setValueState("None");
				that.byId("tileSubtitle").setValueState("None");
				that.byId("allCatalogs").setValueState("None");
				that.byId("semanticObjectText").setValueState("None");
				that.byId("selectODD").setValueState("None");
				that.byId("appPropertyName").setValueState("None");
				that.byId("appPropertyValue").setValueState("None");
				//that.byId("selectStoryId").setValueState("None");
				//that.byId("apfConfId").setValueState("None");
				//this.selectVizRight();
			}
		}, this);
		try{
            if(sap.ui.core.Fragment.byId("tiles","compchart")){
                sap.ui.core.Fragment.byId("tiles","compchart").destroy();
            } 
            if(sap.ui.core.Fragment.byId("tiles","compchartmul")){
                sap.ui.core.Fragment.byId("tiles","compchartmul").destroy();
            } 
            if(sap.ui.core.Fragment.byId("tiles","bulletchart")){
                sap.ui.core.Fragment.byId("tiles","bulletchart").destroy();
            }
            if(sap.ui.core.Fragment.byId("tiles","areachart")){
                sap.ui.core.Fragment.byId("tiles","areachart").destroy();
            }
        }catch(e){};
        sap.ui.xmlfragment("tiles","sap.suite.ui.smartbusiness.designtime.visualization.view.tiles", this);
	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		this.oHeaderFooterOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					that.handleBackAndCancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveTile();
					}
				},
				buttonList : []
		};
		return this.oHeaderFooterOptions;
	},

	getSelectedRadioButton : function(oEvent, confirmationType) {
		var bindingContext = this.getView().getBindingContext();
		var dataRef = this.modelRef.getData();
		if((oEvent && oEvent.mParameters.selected) || confirmationType){
			this.confirmationType = (oEvent) ? oEvent.getSource().data("drilldownType") : confirmationType;
			if (this.confirmationType === 'GDD') {
				dataRef.CHIP.navType = "0";
				dataRef.CONTROL = this.getControlObject(dataRef);
				dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject;
				dataRef.CHIP.semanticAction = this.sbAction;
				this.modelRef.setData(dataRef);
			}
			else if (this.confirmationType === 'ODD') {
				dataRef.CHIP.navType = (Number(dataRef.CHIP.navType)) ? dataRef.CHIP.navType : "4";
				dataRef.CONTROL = this.getControlObject(dataRef);
				this.modelRef.setData(dataRef);
				this.selectNavType(null, dataRef.CHIP.navType);
			}
		}
	},

	selectTileType:function(oEvent){
		this.selectTile(oEvent.getSource().getSelectedItem().getKey());
	},

	onTileSelect: function(oEvent){
		if(this.createMode) {
			this.selectTile(oEvent.getSource().data("tileType"));
		}
		else {
			if(this.modelRef.getData().CHIP.tileType != oEvent.getSource().data("tileType"))
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("BLOCK_TILETYPE_CHANGE_FOR_EDIT"));
		}
		//this.selectTile(oEvent.getSource().data("tileType"));
	},

	selectTile: function(key){
		var dataRef = this.modelRef.getData();
		dataRef.CHIP.tileType = key;
		dataRef.CONTROL = this.getControlObject(dataRef);
		this.modelRef.setData(dataRef);
		if(key == "CM") {
			if(this.cache.inSufficientAdditionalMeasure && !(this.cache.inSufficientAdditionalMeasureAlerted)) {
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("INSUFFICIENT_ADDL_MEASURES"));
				this.cache.inSufficientAdditionalMeasureAlerted = true;
			}
		}
		this.getView().byId(dataRef.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
	},

	selectSortOrder:function(oEvent){
	
	},

	selectNavType:function(oEvent, key){
		var dataRef = this.modelRef.getData();
		if(oEvent) {
			key = oEvent.getSource().getSelectedKey();
		}
		dataRef.CHIP.navType = key;
		dataRef.CONTROL = this.getControlObject(dataRef);
		switch(Number(key)) {
		case 1: //@Bring up Lumira Content
			dataRef.CHIP.semanticObject = this.lumiraSemanticObject;
			dataRef.CHIP.semanticAction = this.lumiraAction;
			break;
		case 2: //@Bring up APF Content
			dataRef.CHIP.semanticObject = this.apfSemanticObject;
			dataRef.CHIP.semanticAction = this.apfAction;
			break;
		case 3: //@Bring up CXO Content
			dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject || "";
			dataRef.CHIP.semanticAction = this.tempAction || this.onLoadSemanticAction || "";
			break;
		case 4: //@Bring up Custom DrillDown
			dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject || "";
			dataRef.CHIP.semanticAction = this.tempAction || this.onLoadSemanticAction || "";
			break;
		default: break;
		}
		this.modelRef.setData(dataRef);
	},

	formChipConfiguration: function() {
		var that = this;
		var payload = {};
		var dataRef = this.modelRef.getData();
		var data = dataRef.CHIP;
		var configuration = null;
		var tileConfig = {};
		var tileProperties = {};

		//chip properties
		payload.id = data.id || "";
		this.currentChipId = payload.id;
		payload.isActive = 1;
		payload.catalogId = data.catalogId;
		payload.title = data.title;
		payload.description = data.description;
		if(data.tileType == "DT")
		{
		    payload.tileType = data.tileType + "-" + data.dualTileType;
		    
		}
		else{
		    payload.tileType = data.tileType;
		}
		payload.evaluationId = data.evaluationId;
		payload.url = this.getChipUrl(payload.tileType);
	

		if(data.changedOn) {
			payload.changedOn = data.changedOn;
		}

		// TILE_PROPERTIES in configuration
		tileProperties.id = data.id || "_____CHIPID__________CHIPID_____";
		tileProperties.instanceId = data.instanceId || "___CHIPINSTID______CHIPINSTID___";
		tileProperties.catalogId = data.catalogId;
		
		tileProperties.evaluationId = data.evaluationId; 
		if(data.tileType == "DT")
        {
		    tileProperties.tileType = data.tileType + "-" + data.dualTileType;
            
        }
		else{
		    tileProperties.tileType = data.tileType;
		}
		
		if(data.tileType == 'CT' || (data.tileType == 'DT' && data.dualTileType == 'CT')) {
			tileProperties.dimension = data.dimension;
			tileProperties.sortOrder = data.sortOrder;
			tileProperties.semanticColorContribution = data.semanticColorContribution;
		}
		if(data.tileType == 'TT') {
			tileProperties.dimension = data.dimension;
		}

		var evaluation = dataRef.EVALUATION;

		if(data.tileType == 'NT' || data.tileType == 'TT' || data.tileType == 'CT' || data.tileType == 'AT' || data.tileType == 'CM') {
			tileProperties.frameType = 'OneByOne';
		}
		else {
		    tileProperties.frameType = 'TwoByOne';
			// For 2x1 tiles
		}
		
		tileProperties.navType = data.navType;
		
		if(tileProperties.navType == "0") {
			tileProperties.semanticObject = (data.semanticObject && (data.semanticObject.length != (data.semanticObject.split(" ").length - 1))) ? data.semanticObject : evaluation.COLUMN_NAME;
			tileProperties.semanticAction = this.sbAction;
		}
		else if(tileProperties.navType == "1") {
			tileProperties.storyId = data.storyId;
			tileProperties.semanticObject = data.semanticObject || this.lumiraSemanticObject || this.LUMIRA_SEMANTIC_OBECT;
			tileProperties.semanticAction = data.semanticAction || this.lumiraAction || this.LUMIRA_ACTION; 
		}
		else if(tileProperties.navType == "2") {
			tileProperties.semanticObject = data.semanticObject || this.apfSemanticObject || this.APF_SEMANTIC_OBECT;
			tileProperties.semanticAction = data.semanticAction || this.apfAction || this.APF_ACTION;
		}
		else {
			tileProperties.semanticObject = data.semanticObject;
			tileProperties.semanticAction = data.semanticAction;
		}
		
		if(data.navLikeTId) {
			tileProperties.navLikeTId = data.navLikeTId; 
		}
		
		if(data.navLikeTCId) {
			tileProperties.navLikeTCId = data.navLikeTCId; 
		}
		
		// data to get the platform for tiles in S-Innovation
		tileProperties.sb_metadata = "abap";
		tileProperties.sb_navigation = "abap";
		tileProperties.sb_catalog = "abap";
		
		if(data.tileType == 'CM' || (data.tileType == 'DT' && data.dualTileType == 'CM')) {
			tileProperties.COLUMN_NAMES = [];
			var customMeasures = data.MULTI_MEASURE;
			var evaluationCustomMeasureArray = [];
			for(var i=0,l=customMeasures.length; i<l; i++) {
				if(customMeasures[i].COLUMN_NAME) {
					tileProperties.COLUMN_NAMES.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
					evaluationCustomMeasureArray.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
				}
				else {
					evaluationCustomMeasureArray.push({COLUMN_NAME:null, semanticColor:null});
				}
			}
		}
		tileConfig.ADDITIONAL_APP_PARAMETERS = {};

		var appParameters = dataRef.CHIP.APP_PARAMETERS;
		if(appParameters && appParameters.length) {
			for(var i=0,l=appParameters.length; i<l; i++) {
				tileConfig.ADDITIONAL_APP_PARAMETERS[appParameters[i].NAME] = appParameters[i].VALUE; 
			}
		}

		tileConfig.ADDITIONAL_APP_PARAMETERS = Object.keys(tileConfig.ADDITIONAL_APP_PARAMETERS).length ? JSON.stringify(tileConfig.ADDITIONAL_APP_PARAMETERS) : JSON.stringify({});

		tileConfig.TILE_PROPERTIES = JSON.stringify(tileProperties);


		// EVALUATION_FILTERS properties in configuration
		tileConfig.EVALUATION_FILTERS = dataRef.FILTERS.length ? JSON.stringify(dataRef.FILTERS) : JSON.stringify([]);

		// EVALUATION_VALUES properties in configuration
		tileConfig.EVALUATION_VALUES =  dataRef.VALUES.length ? JSON.stringify( dataRef.VALUES) : JSON.stringify([]);
		
		// TAGS in configuration
		tileConfig.TAGS = dataRef.TAGS ? JSON.stringify(Object.keys(dataRef.TAGS)) : JSON.stringify([]);

		// EVALUATION properties in configuration
		var evaluationInfo = {};
		evaluationInfo.ID = evaluation.ID;
		evaluationInfo.INDICATOR = evaluation.INDICATOR;
		evaluationInfo.INDICATOR_TYPE = evaluation.INDICATOR_TYPE;
		evaluationInfo.INDICATOR_TITLE = evaluation.INDICATOR_TITLE;
		evaluationInfo.GOAL_TYPE = evaluation.GOAL_TYPE;
		evaluationInfo.TITLE = evaluation.TITLE;
		evaluationInfo.SCALING = evaluation.SCALING;
		evaluationInfo.ODATA_URL = evaluation.ODATA_URL;
		evaluationInfo.ODATA_ENTITYSET = evaluation.ODATA_ENTITYSET;
		evaluationInfo.VIEW_NAME = evaluation.VIEW_NAME;

		evaluationInfo.COLUMN_NAME = evaluation.COLUMN_NAME;
		evaluationInfo.OWNER_NAME = evaluation.OWNER_NAME; 
		evaluationInfo.VALUES_SOURCE = evaluation.VALUES_SOURCE;

		tileConfig.EVALUATION = evaluationInfo ? JSON.stringify(evaluationInfo) : JSON.stringify({});

		var dateString = Date.now().toString();
		configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"1", timeStamp:dateString});

		var tileConfigLimit = 4050;
		if(payload.id) {
			tileConfigLimit = 4096;
		}
		
		if(configuration.length > tileConfigLimit) {
			tileConfig.TAGS = JSON.stringify([]);
			configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
			if(configuration.length > tileConfigLimit) {
				tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
				tileConfig.TAGS = JSON.stringify([]);
				configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
				if(configuration.length > tileConfigLimit) {
					tileConfig.EVALUATION_VALUES = JSON.stringify([]);
					tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
					tileConfig.TAGS = JSON.stringify([]);
					configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
				}
			}
		}
		
//		if(configuration.length > tileConfigLimit) {
//			tileConfig.EVALUATION_FILTERS = JSON.stringify([]);  
//			configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:Date.now().toString()});
//			if(configuration.length > tileConfigLimit) {
//				tileConfig.EVALUATION_VALUES = JSON.stringify([]);
//				tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
//				configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:Date.now().toString()});
//			}
//		}

		payload.configuration = configuration;
		var saveChipPayload = payload;
		return saveChipPayload;
	},

	publishChip: function(payload) {
		var serviceStatus = true;
		var that = this;
		
		delete payload.navType;
		delete payload.semanticObject;
		delete payload.action;
		this.chipTextPayload = [];
		var batchOperations = [];
		this.deleteBatch = [];
		this.createBatch = [];
		var isUpdatesSuccessful = true;

		var oDataModel = this.oApplicationFacade.getODataModel();

		if(this.createMode) {
			//xsjs write
			var finalPayload = [];
			if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
				for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
					var chipTextObject = {};
					chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
					chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
					chipTextObject.id = payload.id;
					chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
					chipTextObject.isActive = 0;
					that.chipTextPayload.push(chipTextObject);
				}
			}
			finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:payload, TEXTS:that.chipTextPayload});
			var saveService=sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");    
			saveService.create('CHIPS', payload, null, function(data){
				serviceStatus = true;
				that.currentChipId = JSON.parse(data).response[0].id;
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
			}
			, function(err){
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
			});
		}
		else if(this.editMode){
			if(this.currentContextState) {
				//xsjs write
				var finalPayload = [];
				if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
						chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:payload, TEXTS:that.chipTextPayload});
			}
			else {
				//xsjs update
				var finalPayload = [];
				if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
						chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				that.languagePayloadForDirtyBitTest = []; 
				for(var i=0;i<that.initialData.ADDITIONAL_LANGUAGE_ARRAY.length;i++){
					var textObject = {};
					textObject.id = payload.id;
					textObject.language = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].language;
					textObject.isActive = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].isActive;
					textObject.description = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].description;
					textObject.title= that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].title;
					that.languagePayloadForDirtyBitTest.push(textObject);
				}
				var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
					oldPayload : that.languagePayloadForDirtyBitTest,
					newPayload : that.chipTextPayload,
					objectType : "CHIP_TEXTS"
				});
				var textsUpdatePayload = {remove:[],create:[]};
				if(languageDeltaObject) {
					if(languageDeltaObject.deletes.length){
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							textsUpdatePayload.remove.push(languageDeltaObject.deletes[i]);
						}
					}
					if(languageDeltaObject.updates.length){
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							that.createBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",languageDeltaObject.updates[i]));
							textsUpdatePayload.create.push(languageDeltaObject.updates[i]);
						}
					}
				}
				finalPayload.push({id:payload.id, isActive:payload.isActive, CHIP:{update:payload}, TEXTS:textsUpdatePayload});
				sap.suite.ui.smartbusiness.lib.Util.utils.update(sap.suite.ui.smartbusiness.lib.Util.utils.serviceUrl("CHIP_SERVICE_URI"),finalPayload,null,function(data) {
					serviceStatus = true;
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				},function(err){
					serviceStatus = false;
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
				}); 
			}
		}
		return serviceStatus;
	},

	getChipUrl: function(tileType) {
		var chipUrls = {
				"NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
				"CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
				"TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
				"AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml",
				"CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcomparison/ComparisonTileChip.xml",
				"DT-CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDualContribution/DualContributionChip.xml",
				"DT-CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDualComparison/DualComparisonChip.xml",
				"DT-AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDualDeviation/DualDeviationChip.xml"
		}
		return chipUrls[tileType];
	},

	populateDimension : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var dimensions = [], dimensionDataArray = [], obj = {};
		var i;
		dimensions = sap.suite.ui.smartbusiness.lib.Util.odata.dimensions(dataSource, entitySet).getAsStringArray();
		for (i = 0; i < dimensions.length; i++) {
			obj = {};
			obj.dimensionName = dimensions[i];
			dimensionDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			dimensions : dimensionDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	handleDimensionSelectionChange: function(evt) {
		//this.tileConfigurationModel.getData().dimension = evt.getSource().getSelectedItem().getKey();
	},

	setGenericDrillDown: function(navType) {
		return (navType == 0) ? true : false;
	},

	setOtherDrillDown: function(navType) {
		return (navType > 0) ? true : false;
	},

	addNewProperty : function() {
		var that = this;
		if (this.getView().byId("appPropertyName").getValue()) {
			this.getView().byId("appPropertyName").setValueState("None");
			if (this.getView().byId("appPropertyValue").getValue()) {
				this.getView().byId("appPropertyValue").setValueState("None");
				var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
				properties = properties || [];
				if(this.checkForDuplicateProperty()) {
					properties.push({
						NAME : this.getView().byId("appPropertyName").getValue(),
						VALUE : this.getView().byId("appPropertyValue").getValue()
					});
					this.getView().byId("appPropertyName").setValue("");
					this.getView().byId("appPropertyValue").setValue("");
					var dataRef = this.modelRef.getData();
					dataRef.CHIP.APP_PARAMETERS = properties;
					this.modelRef.setData(dataRef);
				}
			} else {
				that.isPropertyAdded = false;
				this.getView().byId("appPropertyValue").setValueState("Error");
				this.getView().byId("appPropertyValue").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
			}
		} else {
			that.isPropertyAdded = false;
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
			sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) { 
		var path = evt.getSource().getBindingContext("tileConfig").getPath();
		evt.getSource().getBindingContext("tileConfig").getModel().getData().CHIP.APP_PARAMETERS.splice(path.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext("tileConfig").getModel().updateBindings();
	},

	getAllFooterButtons: function() {
		var that = this;
		var buttonsList = [
		                   {
		                	   sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE_DRAFT"),
		                	   onBtnPressed : function(evt) {
		                		   sap.m.MessageBox.show(
		                				   that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
		                				   "sap-icon://hint",
		                				   that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                				   [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                				   function(evt){
		                					   if(evt=="OK"){
		                						   //xsjs remove
		                						   sap.suite.ui.smartbusiness.lib.Util.utils.remove(sap.suite.ui.smartbusiness.lib.Util.utils.serviceUrl("CHIP_SERVICE_URI"),{id:that.currentChipId,isActive:that.currentContextState},function(data) {
		                							   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		                							   //that.oApplicationFacade.getODataModel().refresh();
		                							   that.refreshMasterList();
		                							   sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
		                						   },function(err){
		                							   sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
		                						   });
		                					   }
		                					   if(evt=="CANCEL"){

		                					   }
		                				   }
		                		   );
		                	   },
		                   }, {
		                	   sI18nBtnTxt : "SAVE_CREATE_NEW",
		                	   onBtnPressed : function(evt) {
		                		   function saveAndCreateNewCallBack() {
		                			   that.refreshMasterList();
		                			   var hashObj = hasher || window.hasher;
		                			   var currentHash = hasher.getHash();
		                			   sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "configureSBKPITile"});
		                			   setTimeout(function(){
		                				   sap.suite.ui.smartbusiness.lib.Util.utils.hashChange({hash: currentHash});
		                			   },0);
		                		   }
		                		   that.saveTile(saveAndCreateNewCallBack);
		                	   }
		                   }, {
		                	   sI18nBtnTxt : "CANCEL",
		                	   onBtnPressed : function(evt) {
		                		   that.handleBackAndCancel();
		                	   }
		                   }

		                   ];
		return buttonsList;
	},

	updateFooterButtons: function(chipObj) {
		var buttonsList = this.getAllFooterButtons();
		this.oHeaderFooterOptions.buttonList = [];

		if(chipObj && chipObj.CHIP) {
			if((!(chipObj.CHIP.isActive)) && (this.editMode)) {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[0]);
			}
		}
		for(var i=1,l=buttonsList.length; i<l; i++) {
			if(i==2) {
				if(chipObj.CHIP && (chipObj.CHIP.isActive == 1)) {
					this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
				}
			}
			else {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
			}

		}
		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	},

	checkForDuplicateProperty: function() {
		var that = this;
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		var property = this.getView().byId("appPropertyName").getValue();
		var value = this.getView().byId("appPropertyValue").getValue();
		if(!isNaN(Number(property))) {
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			return false;
		}
		for(var i=0,l=properties.length; i<l; i++) {
			if((properties[i].NAME == property)) {
				if(properties[i].NAME == property) {
					this.getView().byId("appPropertyName").setValueState("Error");
					this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				}
				return false;
			} 
		}
		return true;
	},

	inputNameChange: function(evt) {
		var that = this;
		var property = evt.getSource().getValue();
		var index = Number(evt.getSource().getBindingContext("tileConfig").sPath[evt.getSource().getBindingContext("tileConfig").sPath.length - 1]);
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				return;
			}
		}
		evt.getSource().setValueState("None");
	},

	inputValueChange: function(evt) {
		var that = this;
		var value = evt.getSource().getValue();
		var property = evt.getSource().getBindingContext("tileConfig").getObject().NAME;
		var index = Number(evt.getSource().getBindingContext("tileConfig").sPath[evt.getSource().getBindingContext("tileConfig").sPath.length - 1]);
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property && properties[i].VALUE == value) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
			}
		}
	},

	onAfterRendering: function() {
		var that = this;
	},

	handleSemanticObjectChange: function(evt) {
		this.tempSemanticObject = evt.getSource().getValue();
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		if(this.tempSemanticObject.indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT"));
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "2") {
			this.apfSemanticObject = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "1") {
			this.lumiraSemanticObject = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "0" || this.modelRef.getData().CHIP.navType.toString() == "4") {
			this.onLoadSemanticObject = evt.getSource().getValue();
		}
	},

	setSemanticAction: function(evt) {
		this.tempAction = evt.getSource().getValue();
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		if(this.tempAction.indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION"));
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "2") {
			this.apfAction = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "1") {
			this.lumiraAction = evt.getSource().getValue();
		}
	},

	subTitleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	titleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyNameChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyValueChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	setStoryId: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		if(evt.getSource().getValue().indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID"));
		}
	},

	handleStoryIdValueHelp: function() {
		var that = this;
		var storyIdValueHelpDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("STORY_ID"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "/Stories",
				template : new sap.m.StandardListItem({
					title : "{NAME}",
					description : "{UUID}"
				})
			},
			confirm : function(oEvent) {
				that.modelRef.getData().CHIP.storyId = oEvent.getParameter("selectedItem").getProperty("description");
				//that.byId("selectStoryId").setValue(that.tileConfigurationModel.getData().storyId);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(UUID)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
			}
		});
		storyIdValueHelpDialog.open();
		var oDataStoryIdModel = new sap.ui.model.odata.ODataModel("/sap/bi/launchpad/integration/smb.xsodata",true);
		storyIdValueHelpDialog.setModel(oDataStoryIdModel);
		if(this.evaluationObj.VIEW_NAME) {
			storyIdValueHelpDialog.getBinding("items").filter([new sap.ui.model.Filter("VIEW_NAME","EQ",this.evaluationObj.VIEW_NAME)]);
		}
	},

	handleCustomMeasure: function(evt) {
		var that = this;
		var currentInput = evt.getSource();
		this.customMeasuresDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("CHOOSE_ADDL_MEASURE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "tileConfig>/ADDITIONAL_MEASURES/Measures",
				template : new sap.m.StandardListItem({
					title : "{tileConfig>COLUMN_NAME}"
				})
			},
			confirm : function(oEvent) {
				var value = oEvent.getParameter("selectedItem").getProperty("title");
				currentInput.setValue(value);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(COLUMN_NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
			}
		});
		this.customMeasuresDialog.open();
		this.customMeasuresDialog.setModel(this.modelRef, "tileConfig");
	},
	
	addAdditionalLanguageDialog : function(){
		var that=this;
		var modelData = this.getView().getModel("tileConfig").getData();

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});
		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		}).setModel(that.getView().getModel("tileConfig"),"tileConfig");

		this.addedLanguagesList.bindItems("tileConfig>/ADDITIONAL_LANGUAGE_ARRAY", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{tileConfig>title}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{tileConfig>description}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{tileConfig>isoLanguage}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var path = oEvent.getSource().getBindingContext("tileConfig").getPath();
				        		  var deletedIndex = parseInt(path.substr(path.length - 1));
				        		  var newData = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("tileConfig").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
				        		  that.addedLanguagesList.getModel("tileConfig").updateBindings();
				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })
				          ]
			})
		}));

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("TITLE"),
			            	        	            	 textAlign : "Right",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageTextInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("SUB_TITLE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageDescriptionInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("LANGUAGE")+":",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,

			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){

			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY[i].isoLanguage === that.languageKeySelect.getSelectedItem().getText()){
			            	        	            					 sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "title" : that.languageTextInput.getValue(),
			            	        	            					 "description" : that.languageDescriptionInput.getValue(),
			            	        	            					 "isoLanguage" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "language" : that.languageKeySelect.getSelectedKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })
			            	        	             ]
			            	          })
			            	          ]
			            }).addStyleClass("languageGrid"),

			            that.addedLanguagesList
			            ],

			            beginButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
			            	press : function(){
			            		// revert to initial model
			            		var dataRef = that.modelRef.getData();
			            		dataRef.ADDITIONAL_LANGUAGE_ARRAY = onLoadData.ADDITIONAL_LANGUAGE_ARRAY;
			            		dataRef.NO_OF_ADDITIONAL_LANGUAGES = onLoadData.NO_OF_ADDITIONAL_LANGUAGES;
			            		that.modelRef.setData(dataRef);
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		var data = modelData.SAP_LANGUAGE_ARRAY;
		
		for(var i=0;i<data.length;i++){
			if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
				data.splice(i,1);
			}
		}
		that.languageKeySelect.setModel(this.getView().getModel("tileConfig"), "tileConfig");
		that.languageKeySelect.bindItems("tileConfig>/SAP_LANGUAGE_ARRAY", new sap.ui.core.Item({
			text: "{tileConfig>LAISO}",
			key: "{tileConfig>SPRAS}"
		}));

		additionalLanguageDialog.open();
		var onLoadData = jQuery.extend(true, {}, this.modelRef.getData(), {});
	},
	
	checkForValidChipForActivation: function() {
		var that = this;
		var dataRef = that.modelRef.getData();
		var data = dataRef.CHIP;
		var errorLog = "";
		var configuration = null;

		if(((!(data.semanticObject) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1))) && (Number(data.navType) != 0))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT") + "\n";
			that.byId("semanticObjectText").setValueState("Error");
			that.byId("semanticObjectText").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT"));
		}
		if(data.semanticObject.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT") + "\n";
			that.byId("semanticObjectText").setValueState("Error");
			that.byId("semanticObjectText").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT"));
		}
		if(((!(data.semanticAction) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1))) && (Number(data.navType) != 0))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION") + "\n";
			that.byId("selectODD").setValueState("Error");
			that.byId("selectODD").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION"));
		}
		if(data.semanticAction.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION") + "\n";
			that.byId("selectODD").setValueState("Error");
			that.byId("selectODD").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION"));
		}
		if(((!(data.storyId) || (data.storyId.length == (data.storyId.split(" ").length - 1))) && (Number(data.navType) == 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID") + "\n";
			that.byId("selectStoryId").setValueState("Error");
			that.byId("selectStoryId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID"));
		}
		if(data.storyId.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID") + "\n";
			that.byId("selectStoryId").setValueState("Error");
			that.byId("selectStoryId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID"));
		}
		if(((!(data.apfConfId) || (data.apfConfId.length == (data.apfConfId.split(" ").length - 1))) && (Number(data.navType) == 2))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_CONFIG_ID") + "\n";
			that.byId("apfConfId").setValueState("Error");
			that.byId("apfConfId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_CONFIG_ID"));
		}
		if(!(data.title) || (data.title.length == (data.title.split(" ").length - 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE") + "\n";
			that.byId("tileTitle").setValueState("Error");
			that.byId("tileTitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE"));
		}
		if(!(data.description) || (data.description.length == (data.description.split(" ").length - 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION") + "\n";
			that.byId("tileSubtitle").setValueState("Error");
			that.byId("tileSubtitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION"));
		}
		if(!(data.catalogId)) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_SELECT_CATALOG") + "\n";
			that.byId("allCatalogs").setValueState("Error");
			that.byId("allCatalogs").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_SELECT_CATALOG"));
		}
		if(data.tileType == "CM" && !(errorLog)) {
			configuration = that.formChipConfiguration();
			var evaluation = JSON.parse(JSON.parse(JSON.parse(configuration.configuration).tileConfiguration).EVALUATION);
			var evaluationMultiMeasureArray = evaluation.COLUMN_NAMES;
			if(!(evaluationMultiMeasureArray) || !(evaluationMultiMeasureArray.length) || (evaluationMultiMeasureArray.length < 2)) {
				errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES") + "\n";
			}
			else {
				for(var i=0,l=evaluationMultiMeasureArray.length; i<l; i++) {
					if(!(evaluationMultiMeasureArray[i].COLUMN_NAME) || !(evaluationMultiMeasureArray[i].semanticColor)) {
						errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES") + "\n";
						break;
					}
				}
				if(!errorLog) {
					if(evaluationMultiMeasureArray.length == 2) {
						if(evaluationMultiMeasureArray[0].COLUMN_NAME == evaluationMultiMeasureArray[1].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES") + "\n";
						}
					}
					else if(evaluationMultiMeasureArray.length == 3) {
						if(evaluationMultiMeasureArray[0].COLUMN_NAME == evaluationMultiMeasureArray[1].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES") + "\n";
						} 
						else if(evaluationMultiMeasureArray.COLUMN_NAME == evaluationMultiMeasureArray[2].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES") + "\n";
						}
						else if(evaluationMultiMeasureArray[1].COLUMN_NAME == evaluationMultiMeasureArray[2].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES") + "\n";
						}
					}
				}
			}
		}
		return errorLog;
	},

	saveTile: function(callback) {
		var that = this;
		var errorLog = "";
		var configuration = null;
		errorLog = that.checkForValidChipForActivation();
		if(errorLog) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		}
		else {
			
			//usability improvement - Save appParams without explicit click on "+"
			that.isPropertyAdded = true;
			if(that.getView().byId("appPropertyName").getValue() || that.getView().byId("appPropertyValue").getValue()){
				that.addNewProperty();
			}
			if(!that.isPropertyAdded){
				return;
			}
			
			configuration = that.formChipConfiguration();
			function publishChipCallBack(data) {
				that.busyDialog.close();
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				//that.oApplicationFacade.getODataModel().refresh();
				that.oApplicationFacade.__tileModified = true;
				if(callback) {
					callback();
				}
				else {
					that.refreshMasterList();
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
				}
			}

			function publishChipErrCallBack(err){
				that.busyDialog.close();
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), (err.responseText || err.description || err.title || JSON.stringify(err)));
			}

			mode = that.createMode ? "create" : (that.editMode ? "edit" : "edit");
			that.busyDialog.open();
			that.metadataRef.publishChip(configuration, mode, that, publishChipCallBack, publishChipErrCallBack);
		}
	},
	
	handleBackAndCancel: function() {
		var that = this;
		
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
				press: function(){
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){backDialog.close();}
			})                                              
		});
		backDialog.open();
		
//		var obj = {};
//		var oldPayload = that.initialData;
//		var newPayload = that.modelRef.getData();
//		
//		var appParameters = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
//			oldPayload : oldPayload.CHIP.APP_PARAMETERS,
//			newPayload : newPayload.CHIP.APP_PARAMETERS,
//			objectType : "APP_PARAMETERS"
//		});
//		
//		obj.oldPayload = oldPayload.CHIP;
//		delete obj.oldPayload.APP_PARAMETERS;
//		delete obj.oldPayload.MULTI_MEASURE; 
//		delete obj.oldPayload.appParameters;
//		delete obj.oldPayload.configurationObj;
//		obj.newPayload = newPayload.CHIP;
//		delete obj.newPayload.APP_PARAMETERS;
//		delete obj.newPayload.MULTI_MEASURE; 
//		delete obj.newPayload.appParameters;
//		delete obj.newPayload.configurationObj;
//		obj.objectType = "Chips";
//		obj = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(obj);
//		that.chipTextPayload = [];
//		if(newPayload.NO_OF_ADDITIONAL_LANGUAGES) {
//			for(var i=0;i<newPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
//				var chipTextObject = {};
//				chipTextObject.title = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].title;
//				chipTextObject.description = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].description;
//				chipTextObject.language = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].language;
//				that.chipTextPayload.push(chipTextObject);
//			}
//		}
//		that.languagePayloadForDirtyBitTest = []; 
//		for(var i=0;i<oldPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
//			var textObject = {};
//			textObject.language = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].language;
//			textObject.description = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].description;
//			textObject.title= oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].title;
//			that.languagePayloadForDirtyBitTest.push(textObject);
//		}
//		var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
//			oldPayload : that.languagePayloadForDirtyBitTest,
//			newPayload : that.chipTextPayload,
//			objectType : "CHIP_TEXTS"
//		});
//		
//		if((obj && obj.updates && obj.updates.length) || (languageDeltaObject && languageDeltaObject.deletes && languageDeltaObject.deletes.length) || (languageDeltaObject && languageDeltaObject.updates && languageDeltaObject.updates.length) || (appParameters && appParameters.deletes && appParameters.deletes.length) || (appParameters && appParameters.updates && appParameters.updates.length)) {
//			var backDialog = new sap.m.Dialog({
//				icon:"sap-icon://warning2",
//				title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
//				state:"Error",
//				type:"Message",
//				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
//				beginButton: new sap.m.Button({
//					text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
//					press: function(){
//						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
//					}
//				}),
//				endButton: new sap.m.Button({
//					text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
//					press:function(){backDialog.close();}
//				})                                              
//			});
//			backDialog.open();
//		}
//		else {
//			sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
//		}
	},
	
	fetchChipData: function(obj) {
		var pageString = 'X-SAP-UI2-PAGE';
		var that = this;
		var finalChipObj = {};
		if(this.createMode) {
			var evaluationObj = {};
			if(obj.evalContextPath) {
				var evalContext = new sap.ui.model.Context(this.oApplicationFacade.getODataModel(), '/' + obj.evalContextPath);
				evaluationObj = this.metadataRef.getEvaluationById({context:evalContext, texts:true, entity:"EVALUATIONS_MODELER", model:that.oApplicationFacade.getODataModel()});
				finalChipObj = this.formModelByEvaluation(evaluationObj);
			}
		}
		else if(this.editMode) {
			var chipObj = {};
			var evaluationObj = {};
			if(obj.chipContextPath) {
				obj.chipContextPath = obj.chipContextPath.replace("id","ID");
				obj.chipContextPath = obj.chipContextPath.replace("isActive","IS_ACTIVE");
				var chipContext = new sap.ui.model.Context(this.oApplicationFacade.getODataModel(), '/' + obj.chipContextPath);
				var evalContext = new sap.ui.model.Context(this.oApplicationFacade.getODataModel(), '/' + obj.evalContextPath);
				evaluationObj = this.metadataRef.getEvaluationById({context:evalContext, entity:"EVALUATIONS_MODELER", model:that.oApplicationFacade.getODataModel()});
				chipObj = this.metadataRef.getChipById({context:chipContext, evaluation:false, texts:false, model:that.oApplicationFacade.getODataModel()});
				chipObj.EVALUATION = evaluationObj.EVALUATION;
				
				//bean needs to be created for this
				chipObj.CHIP.id = chipObj.CHIP.ID;
				chipObj.CHIP.catalogId = chipObj.CHIP.CATALOG_ID;
				chipObj.CHIP.evaluationId = chipObj.CHIP.EVALUATION_ID;
				chipObj.CHIP.tileType = chipObj.CHIP.TYPE;
				
				function chipInfoFetchSuccCallBack(data) {
					var chips = (data.Chips && data.Chips.results) ? data.Chips.results : [];
					var bagObj = {};
					var tilePropertiesArr = [];
					var chip = {};
					chipObj.CHIP.title = chip.title;
					chipObj.CHIP.title = '';
					for(var i=0,l=chips.length; i<l; i++) {
						if(chips[i].catalogPageChipInstanceId == chipObj.CHIP.id) {
							chip = chips[i];
							if(chips[i].ChipBags && chips[i].ChipBags.results && chips[i].ChipBags.results.length) {
								bagObj = chips[i].ChipBags.results[0];
								if(bagObj.ChipProperties && bagObj.ChipProperties.results && bagObj.ChipProperties.results.length) {
									tilePropertiesArr = bagObj.ChipProperties.results;
									for(var i=0,l=tilePropertiesArr.length; i<l; i++) {
										if(tilePropertiesArr[i].name == "title") {
											chipObj.CHIP.title = tilePropertiesArr[i].value;
										}
										if(tilePropertiesArr[i].name == "description") {
											chipObj.CHIP.description = tilePropertiesArr[i].value;
										}
									}
								}
							}
						}
					}
					chipObj.CHIP.catalogName = data.title;
					//chipObj.CHIP.title = chip.title;
					chipObj.CHIP.url = chip.url;
					chipObj.CHIP.configuration = chip.configuration;
					finalChipObj = that.formModelByChip(chipObj);
					that.currentContextState = finalChipObj.CHIP.isActive;
					that.currentChipId = finalChipObj.CHIP.id;
					that.fetchOtherInfoAsync(finalChipObj);
					return finalChipObj;
				}
				// Test this UI2 Chip Catalog
				that.oPBService.readCatalog(chipObj.CHIP.CATALOG_ID,chipInfoFetchSuccCallBack, null, false, false);
				//that.oPBService.readCatalogChips(chipObj.CHIP.CATALOG_ID, [pageString + ':' + chipObj.CHIP.CATALOG_ID + ':' + chipObj.CHIP.ID], chipInfoFetchSuccCallBack);
				return;
			}
		}
		else {
			finalChipObj = {CHIP:{}};
		}
		this.currentContextState = finalChipObj.CHIP.isActive;
		this.currentChipId = finalChipObj.CHIP.id;
		this.fetchOtherInfoAsync(finalChipObj);
		return finalChipObj;
	},
	
	formModelByEvaluation: function(evaluation) {
		var that = this;
		var obj = evaluation.EVALUATION;
		var chipObj = {CHIP:{}};
		chipObj.CHIP.id = "";
		chipObj.CHIP.isActive = 1;
		chipObj.CHIP.evaluationId = obj.ID;
		chipObj.CHIP.tileType = "NT";
		chipObj.CHIP.dualTileType = "CT";
		chipObj.CHIP.title = obj.INDICATOR_TITLE || "";
		chipObj.CHIP.description = obj.TITLE || "";
		chipObj.CHIP.url = chipObj.url || this.getChipUrl(chipObj.tileType);
		chipObj.CHIP.configuration = "";
		chipObj.CHIP.storyId = "";
		chipObj.CHIP.navType = (!(obj.ACTION) || (obj.ACTION == this.sbAction)) ? "0" : "4";
		if(chipObj.CHIP.navType == "0") {
			chipObj.CHIP.semanticObject = obj.SEMANTIC_OBJECT || obj.COLUMN_NAME || "";
			chipObj.CHIP.semanticAction = obj.ACTION || this.sbAction;
		}
		else {
			//chipObj.CHIP.semanticObject = this.lumiraSemanticObject;
			//chipObj.CHIP.semanticAction = this.lumiraAction;
			chipObj.CHIP.semanticObject = obj.SEMANTIC_OBJECT || obj.COLUMN_NAME || "";
			chipObj.CHIP.semanticAction = obj.ACTION || this.sbAction;
		}
		this.onLoadSemanticObject = obj.SEMANTIC_OBJECT || obj.COLUMN_NAME || "";
		this.onLoadSemanticAction = obj.ACTION || this.sbAction;
		chipObj.CHIP.appParameters = [];
		chipObj.CHIP.dimension = "";
		chipObj.CHIP.sortOrder = "0";
		chipObj.CHIP.semanticColorContribution = "Neutral";
		chipObj.CHIP.frameType = 'OneByOne';
		chipObj.CHIP.MULTI_MEASURE = [{COLUMN_NAME: obj.COLUMN_NAME, semanticColor: "Error"}, {COLUMN_NAME: "", semanticColor: "Critical"}, {COLUMN_NAME: "", semanticColor: "Good"}];
		chipObj.CHIP.navLikeTId = "";
		chipObj.CHIP.navLikeTCId = "";
		chipObj.TEXTS = [];
		for(var i=0,l=evaluation.TEXTS; i<l; i++) {
			chipObj.TEXTS[i].id = "";
			chipObj.TEXTS[i].title = evaluation.TEXTS[i].TITLE;
			chipObj.TEXTS[i].description = evaluation.TEXTS[i].DESCRIPTION;
			chipObj.TEXTS[i].language = evaluation.TEXTS[i].LANGUAGE;
		}
		//chipObj.TEXTS = evaluation.TEXTS;
		chipObj.EVALUATION = obj;
		return chipObj;
	},
	
	formModelByChip: function(chip) {
		var that = this;
		var obj = chip.CHIP;
		var chipObj = {CHIP:{}};
		if(chip.EVALUATION_INFO) {
			chipObj.EVALUATION = chip.EVALUATION_INFO;
		}
		if(chip.EVALUATION) {
			chipObj.EVALUATION = chip.EVALUATION;
		}
		chipObj.TEXTS = chip.TEXTS;
		chipObj.CHIP.id = obj.id || "";
		chipObj.CHIP.isActive = 1; //obj.isActive;
		chipObj.CHIP.evaluationId = obj.evaluationId || "";
		chipObj.CHIP.tileType = obj.tileType || "NT";
		if (obj.tileType == "DT-CT"){
		    chipObj.CHIP.dualTileType = "CT";
	        chipObj.CHIP.tileType = "DT";
		}
		else if (obj.tileType == "DT-CM"){
		    chipObj.CHIP.dualTileType = "CM";
		    chipObj.CHIP.tileType = "DT";
		}
		else if (obj.tileType == "DT-AT") {
		    chipObj.CHIP.dualTileType = "AT";
		    chipObj.CHIP.tileType = "DT";
		}
		
		if(obj.catalogName) {
			chipObj.CHIP.catalogName = obj.catalogName;
		}
		
		if(obj.catalogId) {
			chipObj.CHIP.catalogId = obj.catalogId;
		}
		
		chipObj.CHIP.title = obj.title || "";
		chipObj.CHIP.description = obj.description || "";
		chipObj.CHIP.url = obj.url || this.getChipUrl(chipObj.tileType);
		chipObj.CHIP.configuration = obj.configuration || "";
		
		//parsing chip configuration
		var tileConfiguration = null;
		var tileProperties = null;
		var additionalAppParameters = null;
		var evaluation = null;
		try {
			chipObj.CHIP.configurationObj = JSON.parse(chipObj.CHIP.configuration);
			if(chipObj.CHIP.configurationObj && chipObj.CHIP.configurationObj.tileConfiguration) {
				tileConfiguration = JSON.parse(chipObj.CHIP.configurationObj.tileConfiguration);
				if(tileConfiguration && tileConfiguration.TILE_PROPERTIES) {
					tileProperties = JSON.parse(tileConfiguration.TILE_PROPERTIES);
					if(tileProperties) {
						chipObj.CHIP.navType = tileProperties.navType || "0";
						chipObj.CHIP.frameType = tileProperties.frameType || 'OneByOne';
						chipObj.CHIP.semanticObject = tileProperties.semanticObject || "";
						chipObj.CHIP.semanticAction = tileProperties.semanticAction || "";
						this.onLoadSemanticObject = chipObj.CHIP.semanticObject || "";
						this.onLoadSemanticAction = chipObj.CHIP.semanticAction || "";
						chipObj.CHIP.storyId = tileProperties.storyId || "";
						chipObj.CHIP.dimension = tileProperties.dimension || "";
						chipObj.CHIP.sortOrder = tileProperties.sortOrder || "";
						chipObj.CHIP.semanticColorContribution = tileProperties.semanticColorContribution || "Neutral";
						chipObj.CHIP.navLikeTId = tileProperties.navLikeTId || "";
						chipObj.CHIP.navLikeTCId = tileProperties.navLikeTCId || "";
						chipObj.CHIP.navLikeTName = chipObj.CHIP.navLikeTId ? '-NA-' + chipObj.CHIP.navLikeTId : "";
					}
					additionalAppParameters = JSON.parse(tileConfiguration.ADDITIONAL_APP_PARAMETERS);
					chipObj.CHIP.appParameters = additionalAppParameters || [];
					evaluation = JSON.parse(tileConfiguration.EVALUATION);
					if(evaluation) {
						chipObj.CHIP.MULTI_MEASURE = tileProperties.COLUMN_NAMES || evaluation.COLUMN_NAMES || [{COLUMN_NAME: chipObj.EVALUATION.COLUMN_NAME, semanticColor: "Error"}, {COLUMN_NAME: "", semanticColor: "Critical"}, {COLUMN_NAME: "", semanticColor: "Good"}];
					}
				}
			}
		}
		catch(e) {
			// defaulting values
			jQuery.sap.log.error = "Failed to parse chip";
			chip.EVALUATION = chip.EVALUATION_INFO;
			delete chip.EVALUATION_INFO;
			chipObj = that.formModelByEvaluation(chip);
			chipObj.CHIP.id = obj.id;
			chipObj.CHIP.isActive = obj.isActive;
			this.errorConfigParse = true;
		}
		return chipObj;
	},
	
	fetchOtherInfoAsync: function(obj) {
		var that = this;
		
		// Set Footer Buttons
		this.updateFooterButtons(obj);
		
//		// Fetch All Sap Languages
//		this.oApplicationFacade.getODataModel().read("/LANGUAGE?$select=LAISO,SPRAS", null, null, false, function(data) {
//			data = data.results;
//			if(data.length) {
//				if(data.length == 1) {
//					obj.SAP_LANGUAGES = {LAISO:{},SPRAS:{}};
//					obj.SAP_LANGUAGES.LAISO[data[0]["LAISO"]] = data[0]["SPRAS"]; that.languagesObject.SPRAS[data[0]["SPRAS"]] = data[0]["LAISO"];
//				}
//				else {
//					obj.SAP_LANGUAGES = data.reduce(function(p,c,i,a) { that.languagesObject = that.languagesObject || {}; that.languagesObject.LAISO = that.languagesObject.LAISO || {}; that.languagesObject.SPRAS = that.languagesObject.SPRAS || {}; if(i == 1){ that.languagesObject.LAISO[a[0]["LAISO"]] = a[0]["SPRAS"]; that.languagesObject.SPRAS[a[0]["SPRAS"]] = a[0]["LAISO"]; }  that.languagesObject.LAISO[a[i]["LAISO"]] = a[i]["SPRAS"]; that.languagesObject.SPRAS[a[i]["SPRAS"]] = a[i]["LAISO"]; return that.languagesObject;});
//				}
//				obj.SAP_LANGUAGE_ARRAY = data;
//				obj.localLanguage = obj.SAP_LANGUAGES.LAISO[sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase()];
//			}
//		});
//		
//		// Pick Additional Language Texts
//		var languageData = obj.TEXTS;
//		var additionalLanguageData = [];
//		var i;
//		for(i=0;i<languageData.length;i++){
//			if(languageData[i].language != obj.localLanguage){
//				additionalLanguageData.push(languageData[i]);
//			}
//		}
//		var languageArray = [];
//		var i;
//		for(i=0;i<additionalLanguageData.length;i++){
//			var languageObject = {};
//			languageObject.title = additionalLanguageData[i].title;
//			languageObject.description = additionalLanguageData[i].description;
//			languageObject.language = additionalLanguageData[i].language;
//			languageObject.isoLanguage = obj.SAP_LANGUAGES.SPRAS[languageObject.language]
//			languageObject.isActive = obj.isActive;
//			languageArray.push(languageObject);
//		}
//		obj.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
//		obj.NO_OF_ADDITIONAL_LANGUAGES = obj.ADDITIONAL_LANGUAGE_ARRAY.length || 0;
//		that.byId('additionalLanguageLink').bindProperty("text","tileConfig>/NO_OF_ADDITIONAL_LANGUAGES",function(sValue){
//			return that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
//		});
		
		// Pick Control Visibility
		obj.CONTROL = this.getControlObject(obj);
		
		// Fetch All Dimensions For Contribution Tile, Trend Tile
		try {
			this.oModelForEntity = this.populateDimension(obj.EVALUATION.ODATA_URL, obj.EVALUATION.ODATA_ENTITYSET);
			obj.CHIP.dimension = obj.CHIP.dimension || this.oModelForEntity.getData().dimensions[0].dimensionName; 
		} catch (err) {

		} finally {
			if (this.oModelForEntity && this.oModelForEntity.getData() && this.oModelForEntity.getData().dimensions && this.oModelForEntity.getData().dimensions.length) {
				obj.DIMENSIONS = this.oModelForEntity.getData();
			} else {
				obj.DIMENSIONS = [];
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG"));
			}
		}
		
		// Pick App Parameters
		var parametersArr = [];
		var appParameters = obj.CHIP.appParameters;
		if(appParameters && Object.keys(appParameters).length) {
			for(var key in appParameters) {
				if(appParameters.hasOwnProperty(key)) {
					parametersArr.push({NAME:key, VALUE:appParameters[key]});
				}
			}
		}
		obj.CHIP.APP_PARAMETERS = parametersArr;
		
		// Fetch Evaluations Filters, Values Async
		var successHandler = function(bean) {
			var container = {};
			obj.TAGS = {};
			if(bean.TAGS) {
				for(var i=0,l=bean.TAGS.length;i<l;i++) {
					obj.TAGS[bean.TAGS[i].TAG] = bean.TAGS[i].TYPE;
				}
			}
			if(bean.INDICATOR_TAGS) {
				for(var i=0,l=bean.INDICATOR_TAGS.length;i<l;i++) {
					obj.TAGS[bean.INDICATOR_TAGS[i].TAG] = "IN";
				}
			}
			obj.FILTERS = [];
			if(bean.FILTERS) {
				for(var i=0,l=bean.FILTERS.length;i<l;i++) {
					container = {};
					container.TYPE = bean.FILTERS[i].TYPE;
					container.NAME = bean.FILTERS[i].NAME;
					container.VALUE_1 = bean.FILTERS[i].VALUE_1;
					container.VALUE_2 = bean.FILTERS[i].VALUE_2;
					container.OPERATOR = bean.FILTERS[i].OPERATOR;
					obj.FILTERS.push(container);
				}
			}
			obj.VALUES = [];
			var measureObj = {Measures:[]};
			measureObj.Measures.push({COLUMN_NAME:"", COLUMN_TEXT:""});
			if(obj.EVALUATION && obj.EVALUATION.COLUMN_NAME) {
				measureObj.Measures.push({COLUMN_NAME:obj.EVALUATION.COLUMN_NAME, COLUMN_TEXT:obj.EVALUATION.COLUMN_NAME});
			}
			if(bean.VALUES) {
				for(var i=0,l=bean.VALUES.length; i<l; i++) {
					container = {};
					// Pick Additional Filters for Comparison Tile Multiple Measures
					if(/^\d{2}/.test(bean.VALUES[i].TYPE.toString())) {
						measureObj.Measures.push({COLUMN_NAME: bean.VALUES[i].COLUMN_NAME, COLUMN_TEXT: bean.VALUES[i].COLUMN_NAME});
					}
					else {
						container.TYPE = bean.VALUES[i].TYPE;
						container.FIXED = bean.VALUES[i].FIXED;
						container.COLUMN_NAME = bean.VALUES[i].COLUMN_NAME;
						container.ODATA_PROPERTY = bean.VALUES[i].ODATA_PROPERTY;
						obj.VALUES.push(container);
					}
				}
			}
			if(measureObj.Measures.length < 3) {
				that.cache.inSufficientAdditionalMeasure = true;
			}
			var measureObjOpt = jQuery.extend(true,{},measureObj,{});
			if(measureObjOpt && measureObjOpt.Measures && measureObjOpt.Measures.length) {
				measureObjOpt.Measures[0].COLUMN_TEXT = "("+ that.oApplicationFacade.getResourceBundle().getText("NONE") +")";
			}
			obj.ADDITIONAL_MEASURES = measureObj;
			obj.ADDITIONAL_MEASURES_OPT = measureObjOpt;
			if(bean.TEXTS) {
				obj.TEXTS = bean.TEXTS;
			}
			that.getView().getModel("tileConfig").setData(obj);
			that.busyDialog.close();
			
			if(!(that.env)) {
				// Fetch Navigate Like Tile Info From UI2 for Title, Description
				function fetchNavLikeTileCallBack(chip) {
					var modelData = that.modelRef.getData();
					if(chip.ChipBags && chip.ChipBags.results && chip.ChipBags.results.length) {
						if(chip.ChipBags.results[0] && chip.ChipBags.results[0].ChipProperties && chip.ChipBags.results[0].ChipProperties.results && chip.ChipBags.results[0].ChipProperties.results.length) {
							var chipBagProperties = chip.ChipBags.results[0].ChipProperties.results;
							for(var i=0,l=chipBagProperties.length; i<l; i++) {
								if(chipBagProperties[i].name == "title") {
									modelData.CHIP.navLikeTName = chipBagProperties[i].value;
									that.getView().getModel("tileConfig").setData(modelData);
								}
							}
						}
					}
				}

				function fetchNavLikeTileErrCallBack(d,s,x) {

				}

				if(obj.CHIP.navLikeTId && obj.CHIP.navLikeTCId) {
					that.metadataRef.readChipFromUI2ById(obj.CHIP.navLikeTCId, obj.CHIP.navLikeTId, fetchNavLikeTileCallBack, fetchNavLikeTileErrCallBack);
				}
				
				// Fetch the SAP:Copied_From Evaluation Id from PROPERTIES entity
				function fetchSAPCopiedEvaluationCallBack(evals) {
					that.cache.sapCopiedEvaluation = (evals && evals.length) ? evals[0].VALUE : "";
					jQuery.sap.log.info("SAP Copied Evaluation - " + that.cache.sapCopiedEvaluation);
				}
				function fetchSAPCopiedEvaluationErrCallBack() {
					
				}
				that.metadataRef.getDataByEntity({entity:"PROPERTIES", async:false, filter:"TYPE eq 'EV' and IS_ACTIVE eq 1 and ID eq '" + obj.EVALUATION.ID + "' and NAME eq 'SAP:Copied_From'", success:fetchSAPCopiedEvaluationCallBack, error:fetchSAPCopiedEvaluationErrCallBack, model:that.oDataModel});
			}		
			
			that.getView().byId(obj.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
			if(that.errorConfigParse) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_PARSE_CHIP_INFO"));
			}
			that.errorConfigParse = false;
			that.initialData = jQuery.extend(true,{},obj,{});
			if(obj.CHIP.tileType && obj.CHIP.tileType == "DT") {
				var selectedTile=that.getView().byId("selectTileType").getSelectedKey();
				that.getView().byId("selectVizRight").fireChange(selectedTile);
			}
		};
		that.metadataRef.getEvaluationById({ID:obj.CHIP.evaluationId, IS_ACTIVE:1, async:true, success:successHandler, noEvaluation:true, tags:true, indicator_tags:true, values:true, filters:true, entity:"EVALUATIONS_MODELER", model:that.oApplicationFacade.getODataModel()});
		return obj;
	},
	selectVizRight : function(){
	    var rightViz;
	    var dataRef = this.modelRef.getData();
	    dataRef.CONTROL = dataRef.CONTROL || {};
        var rightVizKey = this.getView().byId("selectVizRight").getSelectedKey();
        if(rightVizKey == "CT"){
            rightViz = sap.ui.core.Fragment.byId("tiles","compchart");
            dataRef.CONTROL.vDimension = true;
            dataRef.CONTROL.vMultiMeasure = false;
            dataRef.CONTROL.vSortOrder = true;
            dataRef.CONTROL.vSemanticColorContribution = true;
        }
        else if(rightVizKey == "CM"){
            rightViz = sap.ui.core.Fragment.byId("tiles","compchartmul");
            dataRef.CONTROL.vDimension = false;
            dataRef.CONTROL.vMultiMeasure = true;
            dataRef.CONTROL.vSortOrder = false;
            dataRef.CONTROL.vSemanticColorContribution = false;
        }
        else if(rightVizKey == "AT"){
            rightViz = sap.ui.core.Fragment.byId("tiles","bulletchart");
            dataRef.CONTROL.vDimension = false;
            dataRef.CONTROL.vMultiMeasure = false;
            dataRef.CONTROL.vSortOrder = false;
            dataRef.CONTROL.vSemanticColorContribution = false;
        }
        this.getView().byId("DT").getTileContent()[1].setContent(rightViz);
        this.modelRef.setData(dataRef);
	    
	},
	
	getControlObject: function(obj) {
		var control = obj.CONTROL || {};
		
		this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('TT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('AT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CM').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('DT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId(obj.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
		
		if(obj && obj.CHIP && obj.CHIP.tileType) {
			switch(obj.CHIP.tileType) {
			case 'NT': control.vDimension = false;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'AT': control.vDimension = false;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
            control.vVizRight = false;
			break;
			case 'CT': control.vDimension = true;
			control.vMultiMeasure = false;
			control.vSortOrder = true;
			control.vSemanticColorContribution = true;
			control.vVizLeft = false;
            control.vVizRight = false;
			break;
			case 'TT': control.vDimension = true;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
            control.vVizRight = false;
			break;
			case 'CM': control.vDimension = false;
			control.vMultiMeasure = true;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
            control.vVizRight = false;
			break;
			case 'DT': control.vDimension = false;
			control.vDimension = true;
            control.vMultiMeasure = false;
            control.vSortOrder = true;
            control.vSemanticColorContribution = true;
            control.vVizLeft = true;
            control.vVizRight = true;
			default : break;
			}
		}
		
		if(obj && obj.CHIP && obj.CHIP.navType) {
			switch(obj.CHIP.navType.toString()) {
			case '0': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = false;
			control.vStoryId = false;
			control.vSelectNavType = false;
			break;
			case '1': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = true;
			control.vSelectNavType = true;
			break;
			case '2': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			break;
			case '3': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			break;
			case '4': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			break;
			default: break; 
			}
			control.vSelectNavigationType = true;
			control.vAppParameter = true;
		}
		if(this.env) {
			control.vNavigateLikeTile = false;
		}
		else {
			control.vNavigateLikeTile = true;
			control.vSemanticObject = false;
			control.vAction = false;
			control.eAction = false;
			control.vStoryId = false;
			control.vSelectNavType = false;
			control.vSelectNavigationType = false;
			control.vAppParameter = false;
		}
		
		if(this.createMode) {
			control.eSelectTileType = true;
			control.eSelectCatalog = true;
		}
		else if(this.editMode) {
			control.eSelectTileType = false;
			control.eSelectCatalog = false;
		}
		
		return control;
	},
	
	getSAPCopiedEvaluationChips:function(succ,err) {
		var that = this;
		function fetchSAPCopiedEvaluationChipsCallBack(chipObj) {
			that.cache.sapCopiedEvaluationChipObj = chipObj;
			if(succ) {
				succ(that.cache.sapCopiedEvaluationChipObj);
			}
		}
		function fetchSAPCopiedEvaluationChipsErrCallBack() {

		}
		if(that.cache.sapCopiedEvaluationChipObj) {
			if(succ) {
				succ(that.cache.sapCopiedEvaluationChipObj);
			}
		}
		else {
			if(!(that.cache.sapCopiedEvaluation)) {
				if(succ) {
					succ([]);
				}
				return;
			}
			that.metadataRef.getChipByEvaluation({ID:that.cache.sapCopiedEvaluation, IS_ACTIVE:1, success:fetchSAPCopiedEvaluationChipsCallBack, error:fetchSAPCopiedEvaluationChipsErrCallBack, model:that.oDataModel});
		}
	},

	getChipIdsForSAPEvaluation:function(succ,err,partially) {
		var that = this;
		partially = (partially) ? true : false;
		function fetchSAPCopiedEvaluationChipsCallBack(chipObj) {
			that.cache.chipIdsForSAPEvaluation = chipObj;
			if(succ) {
				succ(that.cache.chipIdsForSAPEvaluation);
			}
		}
		function fetchSAPCopiedEvaluationChipsErrCallBack() {

		}
		if(that.cache.chipIdsForSAPEvaluation) {
			if(succ) {
				succ(that.cache.chipIdsForSAPEvaluation);
			}
		}
		else {
			if(!(that.cache.sapCopiedEvaluation)) {
				if(succ) {
					succ([]);
				}
				return;
			}
			that.metadataRef.getChipByEvaluation({ID:that.cache.sapCopiedEvaluation, IS_ACTIVE:1, noEvaluation:true, success:fetchSAPCopiedEvaluationChipsCallBack, error:fetchSAPCopiedEvaluationChipsErrCallBack, partial:true, model:that.oDataModel});
		}
	},
	
	listAllCatalogs:function(evt){
		var that = this;
		var catalogModel =  new sap.ui.model.json.JSONModel();
		var filter = undefined;
		that.catalogModel = catalogModel;
		that.catalogsObj = {};

		function fetchAllCatalogsCallBack(d) {
			if(d) {
				var allCatalogs = d.results || d;
				var allCatalogIds = [];
				that.cache.allUI2Catalogs = that.cache.allUI2Catalogs || allCatalogs;
				if(that.env) {
					catalogModel.setData({Catalogs:that.cache.allUI2Catalogs});
					that.busyDialog.close();
					that.customMeasuresDialog.open();
					return;
				}
				else {
					if(!(that.oPBService.getReferencingCatalogIds)) {
						that.cache.relevantCustCatalogs = that.cache.allUI2Catalogs;
						catalogModel.setData({Catalogs:that.cache.allUI2Catalogs});
						that.busyDialog.close();
						that.customMeasuresDialog.open();
						jQuery.sap.log.error("getReferencingCatalogIds API missing, showing all Catalogs");
						return;
					}
					if(that.cache.relevantCustCatalogs) {
						that.catalogModel.setData({Catalogs:that.cache.relevantCustCatalogs});
						that.busyDialog.close();
						that.customMeasuresDialog.open();
						return;
					}
					if(!(that.cache.allUI2CatalogIds)) {
						for(var i=0,l=allCatalogs.length; i<l; i++) {
							allCatalogIds.push(allCatalogs[i].id);
							that.catalogsObj[allCatalogs[i].id] = allCatalogs[i].title;
						}
						that.cache.allUI2CatalogIds = allCatalogIds;
					}
					function fetchSAPCopiedEvaluationChipsCallBack(chipObj) {
						var UI2_PAGE = 'X-SAP-UI2-PAGE';
						var chips = chipObj.CHIPS;
						var chipCount = (chips) ? (chips.length-1) : 0;
						var referencedChipId = null;
						var catalogObj = {};
						var catalogs = [];
						// Calling To get Reference Catalogs Id
						function referenceCatalogsCallBack(d) {
							if(d) {
								d = (d.results) ? d.results : d;
								for(var j=0,m=d.length; j<m; j++) {
									if(!(catalogObj[d[j]])) {
										catalogObj[d[j]] = true;
										catalogs.push({id:d[j], title:that.catalogsObj[d[j]]});
									}
								}
								if(chipCount == 0) {
									that.cache.relevantCustCatalogs = catalogs;
									that.catalogModel.setData({Catalogs:catalogs});
									that.busyDialog.close();
									that.customMeasuresDialog.open();
								}
								else {
									chipCount--;
								}
							}
						}
						
						function referenceCatalogsErrCallBack(d,s,x) {
							that.busyDialog.close();
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("REF_CATALOG_FETCH_ERROR"));
						}
						
						if(chips && chips.length) {
							for(var i=0,l=chips.length; i<l; i++) {
								referencedChipId = UI2_PAGE + ":" + chips[i].CATALOG_ID + ":" + chips[i].ID;
								that.oPBService.getReferencingCatalogIds(referencedChipId, that.cache.allUI2CatalogIds, referenceCatalogsCallBack, referenceCatalogsErrCallBack);
							}
						}
						else {
							jQuery.sap.log.error("No tiles in the SAP shipped evaluation");
							that.cache.relevantCustCatalogs = catalogs;
							that.catalogModel.setData({Catalogs:catalogs});
							that.busyDialog.close();
							that.customMeasuresDialog.open();
						}
						
					}
					function fetchSAPCopiedEvaluationChipsErrCallBack(chipObj) {
						that.catalogModel.setData({Catalogs:[]});
						that.customMeasuresDialog.open();
						that.busyDialog.close();
					}
					that.getChipIdsForSAPEvaluation(fetchSAPCopiedEvaluationChipsCallBack, fetchSAPCopiedEvaluationChipsErrCallBack);
				}
			}
		}

		function fetchAllCatalogsErrCallBack(d) {
			that.catalogModel.setData({Catalogs:[]});
			that.busyDialog.close();
		}
		
		this.customMeasuresDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("SELECT_CATALOGUE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA"),
			items : {
				path : "/Catalogs",
				template : new sap.m.StandardListItem({
					title : {path:"title", formatter:that.formatCatalogTitle},
					description : {path: "id", formatter:jQuery.proxy(that.formatTileId,that)}

				})
			},
			confirm : function(oEvent) {
				var value = oEvent.getParameter("selectedItem").getBindingContext().getObject().title;
				that.selectedCatalogId= oEvent.getParameter("selectedItem").getBindingContext().getObject().id;
				//currentInput.setValue(value);
				var data = that.modelRef.getData();
				data.CHIP.catalogId = that.selectedCatalogId;
				data.CHIP.catalogName = value;
				that.modelRef.setData(data);
				that.byId("allCatalogs").setValueState("None");
			},
			liveChange : function(oEvent) {
				var searchValue = "" + oEvent.getParameter("value").toLowerCase() + "";
				var oFilterCatalogName = new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterCatalogId = new sap.ui.model.Filter("id", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterCatalogName, oFilterCatalogId], false));
			}
		});
		this.customMeasuresDialog.setModel(that.catalogModel);
		
		filter = "startswith(id,'X-SAP-UI2-CATALOGPAGE')";
		//filter = (that.env) ? "startswith(id,'X-SAP-UI2-CATALOGPAGE')" : "startswith(id,'X-SAP-UI2-CATALOGPAGE:SAP')";
		if(that.cache.allUI2Catalogs) {
			fetchAllCatalogsCallBack(that.cache.allUI2Catalogs);
		}
		else {
			that.busyDialog.open();
			that.metadataRef.readAllUI2Catalogs(fetchAllCatalogsCallBack, fetchAllCatalogsErrCallBack, filter);
		}
		
	},

	listAllTilesForNavigation: function() {
		var that = this;
		var obj = {};
		that.navigateLikeTileModel =  new sap.ui.model.json.JSONModel();
		
		this.navigateLikeTileDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("SELECT_TILE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA"),
			items : {
				path : "/CHIPS",
				template : new sap.m.StandardListItem({
					title : {path:"title", formatter:that.formatNavLikeTileTitle},
					description : {path: "id", formatter:jQuery.proxy(that.formatTileId,that)}

				})
			},
			confirm : function(oEvent) {
				var data = that.modelRef.getData();
				var navigateLikeTileName = oEvent.getParameter("selectedItem").getBindingContext().getObject().title;
				var navigateLikeTileId = oEvent.getParameter("selectedItem").getBindingContext().getObject().id;
				var navigateLikeTileCatalogId = oEvent.getParameter("selectedItem").getBindingContext().getObject().catalogId
				var configuration = oEvent.getParameter("selectedItem").getBindingContext().getObject().configuration;
				try {
					data.CHIP.navLikeTName = navigateLikeTileName;
					data.CHIP.navLikeTId = navigateLikeTileId;
					data.CHIP.navLikeTCId = navigateLikeTileCatalogId;
					configuration = JSON.parse(configuration);
					var tileConfiguration = JSON.parse(configuration.tileConfiguration);
					var tileProperties = JSON.parse(tileConfiguration.TILE_PROPERTIES);
					var appParameters = JSON.parse(tileConfiguration.ADDITIONAL_APP_PARAMETERS);
					data.CHIP.navType = tileProperties.navType;
					data.CHIP.semanticObject = tileProperties.semanticObject;
					data.CHIP.semanticAction = tileProperties.semanticAction;
					
					if(tileProperties.storyId) {
						data.CHIP.storyId = tileProperties.storyId;
					}
					if(tileProperties.apfConfId) {
						data.CHIP.apfConfId = tileProperties.apfConfId;
					}
					data.CHIP.APP_PARAMETERS = [];
					if(Object.keys(appParameters).length) {
						for(var parameter in appParameters) {
							if(appParameters.hasOwnProperty(parameter)) {
								data.CHIP.APP_PARAMETERS.push({NAME:parameter, VALUE:appParameters[parameter]});
							}
						}
						
					}
				}
				catch(e) {
					data.CHIP.navType = data.CHIP.navType || 0;
					data.CHIP.semanticObject = data.CHIP.semanticObject || that.modelRef.getData().EVALUATION.COLUMN_NAME;
					data.CHIP.semanticAction = data.CHIP.semanticAction || that.sbAction;
				}
				that.modelRef.setData(data);
			},
			liveChange : function(oEvent) {
				var searchValue = "" + oEvent.getParameter("value").toLowerCase() + "";
				var oFilterCatalogName = new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterCatalogId = new sap.ui.model.Filter("id", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterCatalogName, oFilterCatalogId], false));
			}
		});
		this.navigateLikeTileDialog.setModel(that.navigateLikeTileModel);
		
		function fetchSAPCopiedEvaluationChipsCallBack(chipObj) {
			that.busyDialog.close();
			that.navigateLikeTileDialog.open();
			that.navigateLikeTileModel.setData({CHIPS:chipObj.CHIPS});
		}
		
		function fetchSAPCopiedEvaluationChipsErrCallBack(chipObj) {
			that.navigateLikeTileDialog.open();
			that.busyDialog.close();
		}
		that.busyDialog.open();
		that.getSAPCopiedEvaluationChips(fetchSAPCopiedEvaluationChipsCallBack, fetchSAPCopiedEvaluationChipsErrCallBack);

	},
	
	formatNavLikeTileTitle: function(title) {
		var obj = this.getBindingContext().getObject()
		return (obj.title || obj.description) ? ((obj.title || "") + " - " + (obj.description || "")) : ("-NA-" + obj.id);
	},
	
	formatTileId: function(id) {
		return this.oApplicationFacade.getResourceBundle().getText("ID",id);
	},
	
	formatCatalogTitle: function(title) {
		var obj = this.getBindingContext().getObject();
		return obj.title || "-NA-" + obj.id;
	},
	
	refreshMasterList: function() {
 	   var that = this;
 	   that.utilsRef.refreshMasterList(that,false);
    },
    
    getInitialModelData: function() {
    	var control = {};
    	control.vNavigateLikeTile = false;
		control.vSemanticObject = false;
		control.vAction = false;
		control.eAction = false;
		control.vStoryId = false;
		control.vSelectNavType = false;
		control.vSelectNavigationType = false;
		control.vAppParameter = false;
		control.vDimension = false;
		control.vMultiMeasure = false;
		control.vSortOrder = false;
		control.vSemanticColorContribution = false;
		control.vVizLeft = false;
		control.vVizRight = false;
		
		if(this.createMode) {
			control.eSelectTileType = true;
			control.eSelectCatalog = true;
		}
		else if(this.editMode) {
			control.eSelectTileType = false;
			control.eSelectCatalog = false;
		}
		
		return {CONTROL:control};
    },
    
    getModelDataAfterEnv: function(env) {
    	var control = {};
    	if(env) {
    		control.vNavigateLikeTile = false;
    		control.vSemanticObject = true;
    		control.vAction = true;
    		control.eAction = true;
    		control.vStoryId = true;
    		control.vSelectNavType = true;
    		control.vSelectNavigationType = true;
    		control.vAppParameter = true;
    	}
    	else {
    		control.vNavigateLikeTile = true;
    		control.vSemanticObject = false;
    		control.vAction = false;
    		control.eAction = false;
    		control.vStoryId = false;
    		control.vSelectNavType = false;
    		control.vSelectNavigationType = false;
    		control.vAppParameter = false;
    	}
		control.vDimension = false;
		control.vMultiMeasure = false;
		control.vSortOrder = false;
		control.vSemanticColorContribution = false;
		control.vVizLeft = false;
		control.vVizRight = false;
		
		if(this.createMode) {
			control.eSelectTileType = true;
			control.eSelectCatalog = true;
		}
		else if(this.editMode) {
			control.eSelectTileType = false;
			control.eSelectCatalog = false;
		}
		
		return {CONTROL:control};
    }
	
});


}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/AddTileModelS.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S3.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S3", {

	onInit : function() {
		var that = this;
//		this.getView().getContent()[0].addContent(new sap.ui.core.HTML({
//			content:'<div class="invisibleDiv">'
//		}));
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.busyDialog = new sap.m.BusyDialog();
		var view = this.getView();
		this.settingModel =sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		this.navigatingWithinDrilldown = true;
		this.oRouter.attachRouteMatched(function(oEvent) {
//			$(".invisibleDiv").css("display","none");
			if (oEvent.getParameter("name") === "detail") {
				that.selectedTile = undefined;
				this.evalContext = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				
				var chipModel = new sap.ui.model.json.JSONModel();
				chipModel.setSizeLimit(100000);
				this.getView().setModel(chipModel,"tileConfig");
				this.modelRef = this.getView().getModel("tileConfig");
				
				if(!!!this.oApplicationFacade.__tileModified && this.evalContext.getObject() && ((this.evalContext.getObject()["CHIPS_COUNT"] === null) || (this.evalContext.getObject()["CHIPS_COUNT"] === 0))){
//					$(".invisibleDiv").css("display","block");
					this.oApplicationFacade.__tileModified = null;
					this.getView().getModel("tileConfig").setData({CHIPS:[]});
					if(that.navigatingWithinDrilldown) {
						that.oApplicationFacade.navigatingWithinDrilldown = true;
					} 
					else {
						that.oApplicationFacade.navigatingWithinDrilldown = undefined;
					}
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"noDataView",context:that.evalContext.sPath.substr(1)});
					return;
				}

				//Adapter Implementation Code :
				this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
				this.confRef = sap.suite.ui.smartbusiness.Configuration;
				this.constantsRef = this.confRef.Constants;
				this.tileTypeConst = this.constantsRef.TileType;
				this.PLATFORM = this.metadataRef.getPlatform();
				this.env = 0;
				
				if(this.PLATFORM == this.constantsRef.Platform.ABAP) {
					this.isPlatformABAP = true;
				}
				else {
					this.isPlatformABAP = false;
				}
				
				// Fetch System Environment info => Either running on SAP env or CUST env
				function sysInfoFetchCallBack(d) {
					that.env = d;
				}
				
				function sysInfoFetchErrCallBack(d,s,x) {
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"), d.response.body);
				}
				
				this.metadataRef.getSystemInfo({async:false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:this.oDataModel});
				
				var tableRef = this.byId("tileGrid");
				tableRef.removeAllColumns();
				if(this.isPlatformABAP) {
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE")}),visible : true}));
					//tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("NAVIGATION")}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("CATALOGUE")}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
				}
				else {
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE")}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("NAVIGATION")}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : that.oApplicationFacade.getResourceBundle().getText("STATUS")}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
					tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
				}
				
				function chipFetchCallBack(chips) {
					if(chips && chips.EVALUATION) {
						chips.EVALUATION.CHIPS_COUNT = (chips.CHIPS) ? chips.CHIPS.length : 0;
					}
//					$(".invisibleDiv").css("display","none");
					that.busyDialog.close();
					jQuery.sap.log.info("Chips fetch called and successful");
					if(!(chips && chips.CHIPS && chips.CHIPS.length)){
//						$(".invisibleDiv").css("display","block");
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"noDataView",context:that.evalContext.sPath.substr(1)});
						return;
					}
					else{
						that.getView().getModel("tileConfig").setData(chips);
						if(chips.affectedTiles && chips.affectedTiles.length) {
							that.handleAffectedTilesDialogOnSelect(chips);
						}
					}
				}
				
				function chipFetchErrCallBack(d,s,x) {
					that.busyDialog.close();
					that.getView().getModel("tileConfig").setData([]);
//					$(".invisibleDiv").css("display","block");
					jQuery.sap.log.error("Error occured while fetching chips");
					//sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"noDataView",context:that.evalContext.sPath.substr(1)});
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_CHIPS"), (JSON.stringify(d)));
				}
				
				this.busyDialog.open();
				this.metadataRef.getChipByEvaluation({context:this.evalContext, success:chipFetchCallBack, error:chipFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
				
				if(that.isPlatformABAP){
					this.oHeaderFooterOptions.buttonList = [
//					{
//						sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT_EVALUATION"),
//						onBtnPressed : function(evt){
//							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editEvaluation", context: that.evalContext.sPath.substr(1)});
//					    }
//					},
					{
						sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE_EVALUATION"),
						onBtnPressed : function(evt){
							that.handleEvalDelete();
					    }
					}
					]
					this.oHeaderFooterOptions.additionalShareButtonList = [];
				}
				// Make sure the master is here
			}
		}, this);
		var that = this;
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton: {}, 
				oEditBtn : {
					sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("FULLSCREEN_TITLE"),
					onBtnPressed : function(evt) {
						if(that.navigatingWithinDrilldown) {
							that.oApplicationFacade.navigatingWithinDrilldown = true;
						} 
						else {
							that.oApplicationFacade.navigatingWithinDrilldown = undefined;
						}
						if(that.isPlatformABAP){
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addTileModelS", context: that.evalContext.sPath.substr(1)});
						}
						else {
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addTile", context: that.evalContext.sPath.substr(1)});
						}
					},
					bEnabled : false, // default true
				}           
		};
	},
	
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	getChipRow: function(id,context){
		var that = this;
		var tileContent;
		var tile;
		var config = null;
		try {
			config = JSON.parse(JSON.parse(JSON.parse(context.getObject().configuration).tileConfiguration).TILE_PROPERTIES);
		}
		catch(e) {
			//sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_PARSE_CHIP_INFO"), (that.oApplicationFacade.getResourceBundle().getText("TILE_TITLE") + " : " + context.getObject().title + "\n" +  that.oApplicationFacade.getResourceBundle().getText("TILE_SUBTITLE") + " : " + context.getObject().description));
			config = {};
			//throw new Error("parsing of Chip Failed");
			jQuery.sap.log.error("parsing of Chip Failed");
		}
		var navType = new sap.m.Text();
		
		if(config.navType == "0") {
			navType.setText(that.oApplicationFacade.getResourceBundle().getText("GENERIC_DRILLDOWN"));
		}
		else {
			navType.setText(that.oApplicationFacade.getResourceBundle().getText("OTHER_DRILLDOWN"));
		}
		
		var status = new sap.m.ObjectNumber();
		
		if(context.getObject().COUNTER == "1") {
			if(context.getObject().isActive) {
				status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
				status.setState("Success");
			}
			else {
				status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW"));
				status.setState("None");
			}
		}
		else {
			status.setNumber(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE_DRAFT"));
			status.setState("Success");
		}
		
		var favourite;
		
		var semanticObjectVisibility;
		
		if(Number(config.navType)) {
			semanticObjectVisibility = true;
		}
		else {
			semanticObjectVisibility = false;
		}
		
		if(context.getProperty("tileType")==that.tileTypeConst["NT"])
			tileContent = new sap.suite.ui.commons.NumericContent({size:"S", value:"0.0", scale:"M", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
		else if(context.getProperty("tileType")==that.tileTypeConst["CT"])
			tileContent =  new sap.suite.ui.commons.ComparisonChart({
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_1"), value: 1550}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_2"), value: 219.2}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_3"), value: 66.46})]
			});
		else if(context.getProperty("tileType")==that.tileTypeConst["AT"])
			tileContent =  new sap.suite.ui.commons.BulletChart({
				scale: "M",
				size:"S",
				minValue: 0,
				maxvalue: 312,
				targetValue: 150,
				actual: new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				thresholds: [new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				             new sap.suite.ui.commons.BulletChartData({value:200, color:"Critical"})]
			});
		else if(context.getProperty("tileType")==that.tileTypeConst["TT"])
			tileContent = new sap.suite.ui.commons.MicroAreaChart({
				size:"S",
				width: "130px",
				height: "59px",
				minXValue: 0,
				maxXValue: 100,
				minYValue: 0,
				maxYValue: 100,
				firstXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 1", color:"Neutral"}),
				lastXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 31", color:"Neutral"}),
				firstYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"3 M", color:"Error"}),
				lastYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"23 M", color:"Good"}),
				target: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:90})]
				}),
				innerMinThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				innerMaxThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				minThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
				maxThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:20}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:70})]
				}),
				chart: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
			});
		else if(context.getProperty("tileType")==that.tileTypeConst["CM"]) {
			tileContent =  new sap.suite.ui.commons.ComparisonChart({
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_1"), value: 34, color: "Good"}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_2"), value: 125, color: "Error"}),
				       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_3"), value: 97, color: "Critical"})]
			});
		}else if(context.getProperty("tileType")==that.tileTypeConst["HT"]){
			tileContent= new sap.suite.ui.commons.HarveyBallMicroChart({
				total:100,
				size:"S",
				scale: "M",
				items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
				    	   fraction:30,
				    	   color: "Good"
				       })]
			});
		}
		tile = new sap.suite.ui.commons.GenericTile({
			size:"S", 
			header: context.getProperty("title"),
			subheader: context.getProperty("description"),
			customData: [new sap.ui.core.CustomData({key:"tileType",value:context.getProperty("tileType")})],
			tileContent: new sap.suite.ui.commons.TileContent({content:tileContent, size:"S",}),
			press: function(evt) {
//				var tiles = that.byId("tileGrid").getItems();
//				for(var i=0,l=tiles.length; i<l; i++) {
//					tiles[i].getCells()[0].$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
//				}
//				evt.getSource().$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
			}
		}).addStyleClass("sbTile");
		
		if(context.getProperty("isAffected")) {
			tile.addStyleClass("affectedTile");
		}
		
		if(context.getProperty("tileType") == that.tileTypeConst["DT-AT"]) {
            tile.setFrameType("TwoByOne");
            var tileContentat = new sap.suite.ui.commons.NumericContent({ value:"0.0", 
                scale:"M", size:"S", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
            var tileContentat2 =  new sap.suite.ui.commons.BulletChart({
                scale: "M",
                size : "S",
                minValue: 0,
                maxvalue: 312,
                targetValue: 150,
                actual: new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
                thresholds: [new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
                             new sap.suite.ui.commons.BulletChartData({value:200, color:"Critical"})]
            });
            tile.removeAllTileContent();
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentat, size: "S"}));
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentat2, size : "S"}));
                                               
        }
        else if(context.getProperty("tileType") == that.tileTypeConst["DT-CT"]) {
            tile.setFrameType("TwoByOne");
            var tileContentct = new sap.suite.ui.commons.NumericContent({ value:"0.0", 
                scale:"M", size:"S", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
            var tileContentct2 =  new sap.suite.ui.commons.ComparisonChart({
                scale: "M",
                size:"S",
                data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_1"), value: 1550}),
                       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_2"), value: 219.2}),
                       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("VALUE_3"), value: 66.46})]
            });
            tile.removeAllTileContent();
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentct, size: "S"}));
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentct2, size : "S"}));
        }
        else if(context.getProperty("tileType") == that.tileTypeConst["DT-CM"]) {
            tile.setFrameType("TwoByOne");
            var tileContentcm = new sap.suite.ui.commons.NumericContent({ value:"0.0", 
                scale:"M", size:"S", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
            var tileContentcm2 = new sap.suite.ui.commons.ComparisonChart({
                scale: "M",
                size:"S",
                data: [new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_1"), value: 34, color: "Good"}),
                       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_2"), value: 125, color: "Error"}),
                       new sap.suite.ui.commons.ComparisonData({title:that.oApplicationFacade.getResourceBundle().getText("MEASURE_3"), value: 97, color: "Critical"})]
            });
            tile.removeAllTileContent();
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentcm, size: "S"}));
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContentcm2, size : "S"}));
        }
        else if(context.getProperty("tileType") == that.tileTypeConst["DT-TT"]) {
            tile.setFrameType("TwoByOne");
            var tileContenttt = new sap.suite.ui.commons.NumericContent({ value:"0.0", 
                scale:"M", size:"S", valueColor:"Good", unit:that.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"), footer:that.oApplicationFacade.getResourceBundle().getText("ACTUAL")});
            var tileContenttt2 = new sap.suite.ui.commons.MicroAreaChart({
				size:"S",
				width: "130px",
				height: "59px",
				minXValue: 0,
				maxXValue: 100,
				minYValue: 0,
				maxYValue: 100,
				firstXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 1", color:"Neutral"}),
				lastXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 31", color:"Neutral"}),
				firstYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"3 M", color:"Error"}),
				lastYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"23 M", color:"Good"}),
				target: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:90})]
				}),
				innerMinThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				innerMaxThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				minThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
				maxThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:20}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:70})]
				}),
				chart: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
			});
            tile.removeAllTileContent();
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContenttt, size: "S"}));
            tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContenttt2, size : "S"}));
        }
        
		function editPressEvent(evt) {
			var bindingContext = this.getBindingContext("tileConfig");
			var chipObj = bindingContext.getObject();
			var chipContext = "CHIPS";
			if(that.navigatingWithinDrilldown) {
				that.oApplicationFacade.navigatingWithinDrilldown = true;
			}
			else {
				that.oApplicationFacade.navigatingWithinDrilldown = undefined;
			}
			if(that.isPlatformABAP) {
				if(chipObj.isActive) {
					if(chipObj.COUNTER == 2) {
						chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=0)";
					}
					else {
						chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=1)";
					}
				}
				else {
					chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=0)";
				}
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editTileModelS", context: (that.evalContext.sPath.substr(1) + "/" + chipContext)});
			}
			else {
				if(chipObj.isActive) {
					if(chipObj.COUNTER == 2) {
						chipContext = chipContext + "(id='" + chipObj.id + "',isActive=0)";
					}
					else {
						chipContext = chipContext + "(id='" + chipObj.id + "',isActive=1)";
					}
				}
				else {
					chipContext = chipContext + "(id='" + chipObj.id + "',isActive=0)";
				}
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editTile", context: (that.evalContext.sPath.substr(1) + "/" + chipContext)});
			}
		}
		
		var editButton = new sap.m.Button({
			icon: "sap-icon://edit",
			type:sap.m.ButtonType.Transparent,
			press: editPressEvent
		});
		
		if(context.getProperty("isAffected")) {
			editButton.setEnabled(false);
		}
		
		var deleteButton = new sap.m.Button({
			icon:"sap-icon://sys-cancel",
			type:sap.m.ButtonType.Transparent,
			press: function(evt) {
				that.handleDelete(this);
			}
		});
		
		var cells = [];
		
		var catalogName = new sap.m.Text({text:context.getObject().catalogName});
		
		var tileNotAvailableErrorState = context.getObject().isAffected ? true : false;
		
		if(that.isPlatformABAP) {
			cells = [tile,
//			         new sap.ui.layout.VerticalLayout({
//			        	 content: [
//			        	           navType,
//			        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("SEMANTIC_OBJECT") + ': ' + config.semanticObject, visible:semanticObjectVisibility}),
//			        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("ACTION") + ': ' + config.semanticAction, visible:semanticObjectVisibility}),
//			        	           ]
//			         }).addStyleClass("navigationVLayout"),
			         new sap.ui.layout.VerticalLayout({
			        	 content: [
			        	           new sap.m.Text({text: /*that.oApplicationFacade.getResourceBundle().getText("CATALOGUE") + ': ' + */context.getObject().catalogName, visible:true}),
			        	           new sap.m.ObjectStatus({text: that.oApplicationFacade.getResourceBundle().getText("TILE_REMOVED_FROM_CATALOG"), state:"Error", visible:tileNotAvailableErrorState})
			        	           ]
			         }).addStyleClass("navigationVLayout"),
			         editButton,
			         deleteButton];
		}
		else {
			cells = [tile,
			         new sap.ui.layout.VerticalLayout({
			        	 content: [
			        	           navType,
			        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("SEMANTIC_OBJECT") + ': ' + config.semanticObject, visible:semanticObjectVisibility}),
			        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("ACTION") + ': ' + config.semanticAction, visible:semanticObjectVisibility}),
			        	           ]
			         }).addStyleClass("navigationVLayout"),
			         status,
			         editButton,
			         deleteButton];
		}
		
		var columnListItem = new sap.m.ColumnListItem({
			type: "Navigation",
	    	cells: cells
		}); 
		
		if(!(that.isPlatformABAP)) {
			columnListItem.attachPress(function(evt) {
				var bindingContext = this.getBindingContext("tileConfig");
				var chipObj = bindingContext.getObject();
				var chipContext = "CHIPS";
				if(chipObj.isActive) {
					if(chipObj.COUNTER == 2) {
						chipContext = chipContext + "(id='" + chipObj.id + "',isActive=0)";
					}
					else {
						chipContext = chipContext + "(id='" + chipObj.id + "',isActive=1)";
					}
				}
				else {
					chipContext = chipContext + "(id='" + chipObj.id + "',isActive=0)";
				}
				if(that.navigatingWithinDrilldown) {
					that.oApplicationFacade.navigatingWithinDrilldown = true;
				}
				else {
					that.oApplicationFacade.navigatingWithinDrilldown = undefined;
				}
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editTile", context: (that.evalContext.sPath.substr(1) + "/" + chipContext)});
			});
		}
		else if(that.isPlatformABAP && !(context.getProperty("isAffected"))){
			columnListItem.attachPress(function(evt) {
				var bindingContext = this.getBindingContext("tileConfig");
				var chipObj = bindingContext.getObject();
				var chipContext = "CHIPS";
				if(chipObj.isActive) {
					if(chipObj.COUNTER == 2) {
						chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=0)";
					}
					else {
						chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=1)";
					}
				}
				else {
					chipContext = chipContext + "(ID='" + chipObj.id + "',IS_ACTIVE=0)";
				}
				if(that.navigatingWithinDrilldown) {
					that.oApplicationFacade.navigatingWithinDrilldown = true;
				}
				else {
					that.oApplicationFacade.navigatingWithinDrilldown = undefined;
				}
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editTileModelS", context: (that.evalContext.sPath.substr(1) + "/" + chipContext)});
			});
			
		}
		else {
			columnListItem.setType("Inactive");
		}
		
		return columnListItem;
		
	},

	handleDelete: function(contextObj) {
		var that = this;
		sap.m.MessageBox.show(
				that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
				"sap-icon://hint",
				that.oApplicationFacade.getResourceBundle().getText("DELETE"),
				[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
				function(evt){
					if(evt=="OK"){
						function tileDeleteCallBack() {
							that.busyDialog.close();
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
							that.refreshMasterList();
							//that.oApplicationFacade.getODataModel().refresh();
							function chipRefetchCallBack(chips) {
								that.busyDialog.close();
								chips.EVALUATION.CHIPS_COUNT = (chips.CHIPS) ? chips.CHIPS.length : 0;
								that.getView().getModel("tileConfig").setData(chips);
								if(chips.EVALUATION.CHIPS_COUNT === 0){
									sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"noDataView",context:that.evalContext.sPath.substr(1)});
									return;
								}
							}

							function chipRefetchErrCallBack(d,s,x) {
								that.busyDialog.close();
								that.getView().getModel("tileConfig").setData([]);
							}
							that.metadataRef.getChipByEvaluation({context:that.evalContext, success:chipRefetchCallBack, error:chipRefetchErrCallBack, model:that.oApplicationFacade.getODataModel()});
						}
						function tileDeleteErrCallBack(err) {
							that.busyDialog.close();
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.responseText);
						}
						that.busyDialog.open();
						that.metadataRef.removeTile(contextObj.getBindingContext("tileConfig").getObject(),that, tileDeleteCallBack, tileDeleteErrCallBack);
					}
					if(evt=="CANCEL"){

					}
				}
		);
	},
	
	handleAffectedTilesDialogOnSelect: function(chipObj) {
		var that = this;
		var affectedTiles = chipObj.affectedTiles;
		var affectedTilesDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("AFFECTED_TILES_DEL_DIALOG")})],
			beginButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("OK"),
				press: function(){
					function removeAffectedTilesCallBack() {
						that.busyDialog.close();
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("AFFECTED_TILES_DEL_SUCCESS"));
						that.refreshMasterList();
						function chipRefetchAfterAffectedCallBack(chips) {
							that.busyDialog.close();
							chips.EVALUATION.CHIPS_COUNT = (chips.CHIPS) ? chips.CHIPS.length : 0;
							that.getView().getModel("tileConfig").setData(chips);
							if(chips.EVALUATION.CHIPS_COUNT === 0){
								sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"noDataView",context:that.evalContext.sPath.substr(1)});
								return;
							}
						}

						function chipRefetchAfterAffectedErrCallBack(d,s,x) {
							that.busyDialog.close();
							that.getView().getModel("tileConfig").setData([]);
						}
						that.metadataRef.getChipByEvaluation({context:that.evalContext, success:chipRefetchAfterAffectedCallBack, error:chipRefetchAfterAffectedErrCallBack, model:that.oApplicationFacade.getODataModel()});
					}
					
					function removeAffectedTilesErrCallBack() {
						that.busyDialog.close();
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("AFFECTED_TILES_DEL_ERROR"));
					}
					
					affectedTilesDialog.close();
					var payloads = [];
					for(var i=0,l=affectedTiles.length; i<l; i++) {
						payloads.push({ID:affectedTiles[i], IS_ACTIVE:1});
					}
					if(payloads && payloads.length) {
						that.busyDialog.open();
						that.metadataRef.remove("CHIP", payloads, removeAffectedTilesCallBack, removeAffectedTilesErrCallBack);
					}
					//sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){affectedTilesDialog.close();}
			})                                              
		});
		affectedTilesDialog.open();
	},
	
	handleEvalDelete: function() {
		var that = this;
		var modelData = that.modelRef.getData();
		if(modelData.CHIPS && modelData.CHIPS.length) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("EVALUATION_HAS_TILES_ERR"));
		}
		else {
			sap.m.MessageBox.show(
					that.oApplicationFacade.getResourceBundle().getText("WARNING_EVALUATION_DELETE"),
					"sap-icon://hint",
					that.oApplicationFacade.getResourceBundle().getText("DELETE"),
					[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
					function(evt){
						if(evt=="OK"){
							function evalDeleteCallBack() {
								that.busyDialog.close();
								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("EVALUATION_DEL_SUCCESS"));
								that.refreshMasterList();
								sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))}, true);
							}
							
							function evalDeleteErrCallBack() {
								that.busyDialog.close();
								sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_EVALUATION_DEL"));
							}
							var payload = {ID:modelData.EVALUATION.ID, IS_ACTIVE:modelData.EVALUATION.IS_ACTIVE};
							that.busyDialog.open();
							that.metadataRef.remove("EVALUATION", payload, evalDeleteCallBack, evalDeleteErrCallBack);
						}
						if(evt=="CANCEL"){

						}
					}
			);
		}
	},
	
	formatChipsCount: function(count) {
		return this.oApplicationFacade.getResourceBundle().getText("TILES") + " (" + (count || 0) + ")";
	},
	
	getFooterButtons: function() {
		var that = this;
		var buttonList = [
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("ACTIVATE"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  var data = JSON.parse(JSON.parse(JSON.parse(that.selectedTile.getBindingContext("tileConfig").getObject().CHIP_MODELER.configuration).tileConfiguration).TILE_PROPERTIES);
		                			  var evaluation = JSON.parse(JSON.parse(JSON.parse(that.selectedTile.getBindingContext("tileConfig").getObject().CHIP_MODELER.configuration).tileConfiguration).EVALUATION);
		                			  var chipObj = that.selectedTile.getBindingContext("tileConfig").getObject().CHIP_MODELER;
		                			  var errorLog = "";
		                			  if(!(data.semanticObject && data.semanticAction && chipObj.title && chipObj.description) || (!(data.storyId) && data.navType == 1) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1)) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1)) ) {
		                				  if(!(data.semanticObject) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT") + "\n";
		                				  }
		                				  if(!(data.semanticAction) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION") + "\n";
		                				  }
		                				  if(!(chipObj.title) || (that.selectedTile.getBindingContext().getObject().title.length == (that.selectedTile.getBindingContext().getObject().title.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE") + "\n";
		                				  }
		                				  if(!(chipObj.description) || (chipObj.description.length == (chipObj.description.split(" ").length - 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION") + "\n";
		                				  }
		                				  if((!(data.storyId) && (data.navType == 1))) {
		                					  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID");
		                				  }
		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                			  } 
		                			  else {
		                				  if(that.selectedTile.getBindingContext().getObject().tileType == "CM") {
		                					  if(!(evaluation) || !(evaluation.COLUMN_NAMES) || !(evaluation.COLUMN_NAMES.length)) {
		                						  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                					  }
		                					  else {
		                						  for(var i=0,l=evaluation.COLUMN_NAMES.length; i<l; i++) {
		                							  if(!(evaluation.COLUMN_NAMES[i].COLUMN_NAME) || !(evaluation.COLUMN_NAMES[i].semanticColor)) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
		                								  break;
		                							  }
		                						  }
		                						  if((!errorLog) && (evaluation.COLUMN_NAMES.length == 3)) {
		                							  if(evaluation.COLUMN_NAMES[0].COLUMN_NAME == evaluation.COLUMN_NAMES[1].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  } 
		                							  else if(evaluation.COLUMN_NAMES[0].COLUMN_NAME == evaluation.COLUMN_NAMES[2].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  }
		                							  else if(evaluation.COLUMN_NAMES[1].COLUMN_NAME == evaluation.COLUMN_NAMES[2].COLUMN_NAME) {
		                								  errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
		                							  }
		                						  }
		                					  }
		                				  }
		                				  if(errorLog) {
		                					  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
		                				  }
		                				  else {
		                					  //odata write
//		                					  that.oApplicationFacade.getODataModel().create("/ACTIVE_CHIPS",{id:that.selectedTile.getBindingContext().getObject().id},null,function(data) {
//		                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
//		                						  that.oApplicationFacade.getODataModel().refresh();
//		                						  that.selectedTile = undefined;
//		                						  that.updateFooterButtons();
//
//		                					  },function(err){
//		                						  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.response.body);
//		                					  });
		                					  
		                					  //xsjs write
		                					  that.metadataRef.create("ACTIVATE_CHIP",{id:chipObj.id},null,function(data) {
		                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
		                						  //that.oApplicationFacade.getODataModel().refresh();
		                						  that.refreshMasterList();
		                						  that.selectedTile = undefined;
		                						  that.updateFooterButtons();

		                					  },function(err){
		                						  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.responseText);
		                					  });
		                				  }
		                			  }
		                		  }
		                		  else {
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_DELETE"));
		                		  }
		                	  },
		                  },
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT")+" "+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  var chipContext = that.selectedTile.getBindingContext("tileConfig").sPath.replace("isActive=1","isActive=0");
		                			  chipContext = chipContext.replace("/CHIPS_MODELER","CHIPS");
		                			  that.oRouter.navTo("editTile", {
		                				  contextPath : that.evalContext.sPath.substr(1),
		                				  chipContextPath : chipContext
		                			  });
		                		  }
		                		  else {
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_EDIT"));
		                		  }
		                	  },
		                  }, 
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {
		                			  that.oRouter.navTo("editTile", {
		                				  contextPath : that.evalContext.sPath.substr(1),
		                				  chipContextPath : that.selectedTile.getBindingContext("chipObj").sPath.replace("/CHIPS_MODELER","CHIPS")
		                			  });
		                		  }
		                		  else {
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_EDIT"));
		                		  }
		                	  },
		                  },                                
		                  {
		                	  sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                	  onBtnPressed : function(evt) {
		                		  if(that.selectedTile) {

		                			  sap.m.MessageBox.show(
		                					  that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
		                					  "sap-icon://hint",
		                					  that.oApplicationFacade.getResourceBundle().getText("DELETE"),
		                					  [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                					  function(evt){
		                						  if(evt=="OK"){
		                							  that.oApplicationFacade.getODataModel().remove(that.selectedTile.getBindingContext("tileConfig").sPath.replace("CHIPS_MODELER","CHIPS"),null,function(data) {
		                								  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		                								  //that.oApplicationFacade.getODataModel().refresh();
		                								  that.refreshMasterList();
		                								  that.selectedTile = undefined;
		                								  that.updateFooterButtons(); 
		                							  },function(err){
		                								  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
		                							  });
		                						  }
		                						  if(evt=="CANCEL"){

		                						  }
		                					  }
		                			  );
		                		  }
		                		  else {
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_DELETE"));
		                		  }
		                	  },
		                  }
		                  ]
		return buttonList;

	},

	setSorting: function(key, groupDescending) {
		groupDescending = groupDescending || false;
		var list = this.getView().byId("tileGrid");
		if(key == "tileType") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("tileType",groupDescending,null)]); 
		} 
		else if(key == "status") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("isActive",groupDescending,null), new sap.ui.model.Sorter("COUNTER",groupDescending,null)]);
		}
		else if(key == "none") {
			list.getBinding("items").sort([]);
		}
	},

	setFiltering: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("tileGrid");

		var filterObject = {
				"NT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'NT')),
				"CT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CT')),
				"AT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'AT')),
				"TT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'TT')),
				"CM": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CM')),
//				"HT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'HT')),
				"DT-CM" : (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CM')), 
                "DT-CT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CT')),
                "DT-AT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-AT')),
                "DT-TT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-TT')),
				"new": (new sap.ui.model.Filter("isActive", sap.ui.model.FilterOperator.EQ, 0)),
				"active": (new sap.ui.model.Filter("isActive", sap.ui.model.FilterOperator.EQ, 1))
		};
		
		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray, true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
		
	},
	
	handleSortPress: function() {
		var that = this;
		this.sortOptionsDialog = this.sortOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
						key: "tileType"
					}), 
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("STATUS"),
						key: "status"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("NONE"),
						key: "none"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("sortItem")) {
					that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
            	}
			}
		});
		this.sortOptionsDialog.open();
	},
	
	handleFilterPress: function() {
		var that = this;
		this.filterOptionsDialog = this.filterOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
			            	  key: "tileType",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("NUMERIC_TILE"),
			            	        	  key: "NT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_TILE"),
			            	        	  key: "CT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("TREND_TILE"),
			            	        	  key: "TT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("ACTUAL_VS_TARGET_TILE"),
			            	        	  key: "AT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_MM_TILE"),
			            	        	  key: "CM"
			            	          }),
//			            	          new sap.m.ViewSettingsItem({
//			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("HARVEY_BALL_TILE"),
//			            	        	  key: "HT"
//			            	          }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_TILE"),
                                          key: "DT-CT"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_MM_TILE"),
                                          key: "DT-CM"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_DEVIATION_TILE"),
                                          key: "DT-AT"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_TREND_TILE"),
                                          key: "DT-TT"
                                      })
			            	          ]
			              }),
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS"),
			            	  key: "status",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW"),
			            	        	  key: "new"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"),
			            	        	  key: "active"
			            	          }) 
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("visualizationInfo").setText(infoBarText);	
			            	  }
			            	  else {
			            		  that.byId("visualizationInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		this.filterOptionsDialog.open();
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	},
	
	formatIndicatorTitle: function(i_title) {
		return this.oApplicationFacade.getResourceBundle().getText("KPI_TEXT") + " : " + i_title; 
	}
});



}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S4.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S4", {
	onInit : function() {
		var that = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		var view = this.getView();
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle();

		this.errorMessages = [];
		this.errorState = false;

		this.LUMIRA_SEMANTIC_OBECT = "LumiraAnalytics";
		this.LUMIRA_ACTION = "openStory";

		this.lumiraSemanticObject = "LumiraAnalytics";
		this.lumiraAction = "openStory";

		this.apfSemanticObject = "FioriApplication";
		this.apfAction = "executeAPFConfiguration";

		this.APF_SEMANTIC_OBECT = "FioriApplication";
		this.APF_ACTION = "executeAPFConfiguration";

		this.adhocAnalysisSemanticObject = "AdhocAnalysis";
		this.adhocAnalysisAction = "analyze";

		this.ADHOC_ANALYSIS_SEMANTIC_OBECT = "AdhocAnalysis";
		this.ADHOC_ANALYSIS_ACTION = "analyze";

		this.sbAction = "analyzeSBKPIDetails";

		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		this.confRef = sap.suite.ui.smartbusiness.Configuration;
		this.constantsRef = this.confRef.Constants;
		this.tileTypeConst = this.constantsRef.TileType;
		this.oDataModel = this.oApplicationFacade.getODataModel();
		this.PLATFORM = this.metadataRef.getPlatform();
		this.initialiazeDialogs();
		if(!(this.oApplicationFacade.env)) {
			// Fetch System Environment info => Either running on SAP env or CUST env
			function sysInfoFetchCallBack(d) {
				if(d === null || d === undefined) {
					d = {};
					d.SYS_FLAG = 1;
				}
				that.env = d.SYS_FLAG;
				that.sScope = d.SYS_FLAG ? "CONF" : "CUST"; 
			}
			function sysInfoFetchErrCallBack(d,s,x) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"), d.response.body);
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"),
					"description" : d.response.body
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
			this.metadataRef.getSystemInfo({async:false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:this.oDataModel});
		}

		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			//Adapter Implementation ----
			var sessionUserFetchCallBack = function(user) {
				that.oApplicationFacade.currentLogonHanaUser = user;
			};
			var sessionUserFetchErrCallBack = function(d,s,x) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), d.response.body);
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"),
					"description" : d.response.body
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			};
			this.metadataRef.getSessionUser({async:true, success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
		}

		this.oRouter.attachRouteMatched(function(oEvent) {
			if(oEvent.getParameter("name") == "addTile") {
				this.createMode = true;
				this.editMode = false;
			}
			else if(oEvent.getParameter("name") == "editTile") {
				this.createMode = false;
				this.editMode = true;
			}
			else {
				this.createMode = false;
				this.editMode = false;
			}
			if(this.createMode || this.editMode) {

				this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");

				that.inSufficientAdditionalMeasureAlerted = false;
				that.inSufficientAdditionalMeasure = false;
				var chipModel = new sap.ui.model.json.JSONModel();
				chipModel.setSizeLimit(100000);
				this.getView().setModel(chipModel,"tileConfig");
				this.modelRef = this.getView().getModel("tileConfig");
				var initialData = this.getInitialModelData();
				this.getView().getModel("tileConfig").setData(initialData);
				var partialObject = this.fetchChipData({evalContextPath: oEvent.getParameter("arguments").contextPath, chipContextPath: oEvent.getParameter("arguments").chipContextPath});
				//this.getView().getModel("tileConfig").setData(partialObject);
				if(oEvent.getParameter("arguments").contextPath) {
					this.context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				}
				if(oEvent.getParameter("arguments").chipContextPath) {
					this.chipContext = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").chipContextPath);
				}

				this.appMode = oEvent.getParameter("name");
				that.byId("tileSubtitle").setValueState("None");
				that.byId("appPropertyName").setValueState("None");
				that.byId("semanticObjectText").setValueState("None");
				that.byId("selectODD").setValueState("None");
				that.byId("tileTitle").setValueState("None");
				that.byId("appPropertyValue").setValueState("None");
				that.byId("selectStoryId").setValueState("None");
				that.byId("apfConfId").setValueState("None");
				//this.selectVizRight();
			}
		}, this);
		try{
			if(sap.ui.core.Fragment.byId("tiles","compchart")){
				sap.ui.core.Fragment.byId("tiles","compchart").destroy();
			} 
			if(sap.ui.core.Fragment.byId("tiles","compchartmul")){
				sap.ui.core.Fragment.byId("tiles","compchartmul").destroy();
			} 
			if(sap.ui.core.Fragment.byId("tiles","bulletchart")){
				sap.ui.core.Fragment.byId("tiles","bulletchart").destroy();
			}
			if(sap.ui.core.Fragment.byId("tiles","areachart")){
				sap.ui.core.Fragment.byId("tiles","areachart").destroy();
			}
		}catch(e){};

		sap.ui.xmlfragment("tiles","sap.suite.ui.smartbusiness.designtime.visualization.view.tiles", this);

	},

	getHeaderFooterOptions : function() {
		var that = this;
		this.oHeaderFooterOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					that.handleBackAndCancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveTile();
					}
				},
				buttonList : []
		};
		return this.oHeaderFooterOptions;
	},
	getHeaderFooterOptionsForError : function(){
		var that = this;
		this.oErrorOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					that.handleBackAndCancel();
				},
				oNegativeAction : {
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						that.utilsRef.handleMessagePopover(event,that);
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.saveTile();
					}
				}]
		};
		return this.oErrorOptions;
	},
	setFooterOnError : function(){
		var that = this;
		if(that.errorMessages.length>1){
			switch(that.mode){
			case "create" :
				that.setHeaderFooterOptions(that.oErrorOptions);
				break;
			case "edit" :
				that.updateFooterButtons(this.modelRef.getData());
				that.setHeaderFooterOptions(that.oErrorOptionsForDraft);
				break;
			}
		}else{
			switch(that.mode){
			case "create" :
				that.setHeaderFooterOptions(that.oHeaderFooterOptions);
				break;

			case "edit" :
				that.updateFooterButtons(this.modelRef.getData());
				that.setHeaderFooterOptions(that.oHeaderFooterOptionsForDraft);
				break;
			}
		}
	},

	initialiazeDialogs:function(){
		var that = this;
		this.filterValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_FILTERS"),
			multiSelect : true,
			items : {
				path : "/filterValues",
				template : new sap.m.StandardListItem({title : "{value}",selected:"{selected}"})
			},
			//rememberSelections:true,
			growingThreshold:999,
			confirm : function(oEvent) {
				var aSelectedContexts=oEvent.mParameters.selectedContexts;
				var values=[];
				aSelectedContexts.forEach(function(oContext){
					values.push(oContext.getProperty("value"));
				});
				that.getView().getModel("tileConfig").setProperty("/CHIP/harveyFilters/0/VALUE_1",values);
			},
			cancel:function(oEvent){

			},
			liveChange : function(oEvent) {
				var searchValue = oEvent.getParameter("value");
				var oFilter = new sap.ui.model.Filter("value", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterLabel = new sap.ui.model.Filter("value", sap.ui.model.FilterOperator.Contains, searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter([oFilter,oFilterLabel], true);
			}
		});
		//this.initializeDataForDimensionsDialog();
		this.filterValueHelpDialog.setModel(new sap.ui.model.json.JSONModel({
			filterValues:[]
		}));
		return this.filterValueHelpDialog;
	},
	fetchFilterValuesForDimension:function(sDim,aValues,fnS,fnE){
		var that=this;
		var cachedValues;
		var model=this.getView().getModel("tileConfig");
		var oDataUrl= model.getProperty("/EVALUATION/ODATA_URL");
		var oValues={};
		aValues.forEach(function(val){
			oValues[val]=true;
		});
		//var sDim=model.getProperty("/CHIP/harveyFilterDimension");
		var oDataConfig=sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
			serviceUri :oDataUrl,
			entitySet : model.getProperty("/EVALUATION/ODATA_ENTITYSET"),
			filter : model.getProperty("/FILTERS"),
			dimension : sDim
		});
		if((cachedValues=this.getApplicationCache(oDataUrl+"/"+oDataConfig.uri))){
			fnS(cachedValues);
		}else{
			oDataConfig.model.read(oDataConfig.uri,null, null, false,function(data){
				var d=[];
				data.results.forEach(function(o){
					d.push({
						value:o[sDim],
						selected:!!oValues[o[sDim]]
					});
				});
				that.setApplicationCache(oDataUrl+"/"+oDataConfig.uri,d);
				fnS(d);
			},fnE);
		}

	},
	openFilterValueHelp:function(){
		var that=this;
		var viewModel= that.getView().getModel("tileConfig");
		this.filterValueHelpDialog.open();
		this.filterValueHelpDialog.setBusy(true);
		var sDim = viewModel.getProperty("/CHIP/harveyFilters/0/NAME");
		var aSelectedValues = viewModel.getProperty("/CHIP/harveyFilters/0/VALUE_1");
		that.fetchFilterValuesForDimension(sDim,aSelectedValues,function fetchFilterValuesForDimensionCallBack(data){
			that.filterValueHelpDialog.getModel().setProperty("/filterValues",data);
			that.filterValueHelpDialog.setBusy(false);
		},function(e){
			that.filterValueHelpDialog.setBusy(false);
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_FETCHING_FILTERS"), e);
			that.errorMessages.push({
				"type":"Error",
				"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_FETCHING_FILTERS"),
				"description" : e
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
		});

	},
	initializeDimensionsForHarveyFilters:function(oTileConfig){
		//var model=this.getView().getModel("tileConfig");
		var oDataUrl= oTileConfig.EVALUATION.ODATA_URL;
		var entitySet=oTileConfig.EVALUATION.ODATA_ENTITYSET;
		var aDimension=sap.suite.ui.smartbusiness.lib.Util.odata.dimensions(oDataUrl, entitySet).getAsObjectArrayWithLabel();
		var oDimensions=sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensionsWithProperty(oDataUrl, entitySet);
		var aHarveyDimension=[];
		var tmp={};
		aHarveyDimension.forEach(function(o){
			tmp[o.name]=true;
		});
		for(var each in oDimensions){
			if(!tmp[each]){
				aHarveyDimension.push({
					name:each,
					label:oDimensions[each]._sLabelText||each
				});
			}
		}
		oTileConfig.CHIP.HARVEY_DIMENSION = aHarveyDimension;
		if(!oTileConfig.CHIP.harveyFilters[0].NAME){
			oTileConfig.CHIP.harveyFilters[0].NAME=aHarveyDimension[0].label;
		}
		//model.setProperty("/CHIP/HARVEY_DIMENSION",aHarveyDimension);
	},
	harveyTotalMeasureVisibility:function(bIsHarveyBall,bIsKpiFractionMeasure){
		return bIsHarveyBall && bIsKpiFractionMeasure;
	},
	harveyFilterVisibility:function(bIsHarveyBall,bIsKpiTotalMeasure){
		return bIsHarveyBall && bIsKpiTotalMeasure;
	},
	harveyFilterOptionVisibility:function(bIsHarveyBall,bIsKpiTotalMeasure,selectedDimension){
		return bIsHarveyBall && bIsKpiTotalMeasure && selectedDimension;
	},
	betweenOperatorLabelVisible:function(operator){
		return operator=="BT";
	},
	_cache:{},
	setApplicationCache:function(key,val){
		this._cache[key]=val;
	},
	getApplicationCache:function(key){
		return this._cache[key];
	},
	onKpiMeasureAsHarveyTotalMeasure:function(oEvent){
		//dont do anyting as of now
//		if(oEvent && oEvent.mParameters.selected && oEvent.getSource().data("type")=="harveyTotalMeasure"){
//		this.fetchFilterValuesForCurrentDimension();    
//		}
	},
	getSelectedRadioButton : function(oEvent, confirmationType) {
		var bindingContext = this.getView().getBindingContext();
		var dataRef = this.modelRef.getData();
		if((oEvent && oEvent.mParameters.selected) || confirmationType || true){
			this.confirmationType = (oEvent) ? oEvent.getSource().data("drilldownType") : confirmationType;
			if (this.confirmationType === 'GDD') {
				dataRef.CHIP.navType = "0";
				dataRef.CONTROL = this.getControlObject(dataRef);
				dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject;
				dataRef.CHIP.semanticAction = this.sbAction;
				this.updateFooterButtons(dataRef);
				this.modelRef.setData(dataRef);
			}
			else if (this.confirmationType === 'ODD') {
				dataRef.CHIP.navType = (Number(dataRef.CHIP.navType)) ? dataRef.CHIP.navType : "4";
				dataRef.CONTROL = this.getControlObject(dataRef);
				this.modelRef.setData(dataRef);
				this.selectNavType(null, dataRef.CHIP.navType);
			}
		}
	},

	selectTileType:function(oEvent){
		this.selectTile(oEvent.getSource().getSelectedItem().getKey());
	},

	onTileSelect: function(oEvent){
		this.selectTile(oEvent.getSource().data("tileType"));
	},

	selectTile: function(key){
		var dataRef = this.modelRef.getData();
		dataRef.CHIP.tileType = key;
		dataRef.CONTROL = this.getControlObject(dataRef);
		this.modelRef.setData(dataRef);
		if(key == "CM") {
			if(this.inSufficientAdditionalMeasure && !(this.inSufficientAdditionalMeasureAlerted)) {
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("INSUFFICIENT_ADDL_MEASURES"));
				this.inSufficientAdditionalMeasureAlerted = true;
			}
		}
		this.getView().byId(dataRef.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
		this.byId("selectTileType").setTooltip(this.byId("selectTileType").getSelectedItem().getText());
	},

	selectSortOrder:function(oEvent){
		oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
	},

	multiMeasureSelect: function(oEvent) {
		oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
	},
	
	semanticColorContributionChange: function(oEvent) {
		oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
	},
	
	selectNavType:function(oEvent, key){
		var dataRef = this.modelRef.getData();
		if(oEvent) {
			key = oEvent.getSource().getSelectedKey();
			oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
		}
		dataRef.CHIP.navType = key;
		dataRef.CONTROL = this.getControlObject(dataRef);
		switch(Number(key)) {
		case 1: //@Bring up Lumira Content
			dataRef.CHIP.semanticObject = this.lumiraSemanticObject;
			dataRef.CHIP.semanticAction = this.lumiraAction;
			break;
		case 2: //@Bring up APF Content
			dataRef.CHIP.semanticObject = this.apfSemanticObject;
			dataRef.CHIP.semanticAction = this.apfAction;
			break;
		case 3: //@Bring up CXO Content
			dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject || "";
			dataRef.CHIP.semanticAction = this.tempAction || this.onLoadSemanticAction || "";
			break;
		case 4: //@Bring up Custom DrillDown
			dataRef.CHIP.semanticObject = this.tempSemanticObject || this.onLoadSemanticObject || "";
			dataRef.CHIP.semanticAction = this.tempAction || this.onLoadSemanticAction || "";
			break;
		case 5: //@Bring up Adhoc Analysis
			dataRef.CHIP.semanticObject = this.adhocAnalysisSemanticObject;
			dataRef.CHIP.semanticAction = this.adhocAnalysisAction;
			break;
		default: break;
		}
		this.updateFooterButtons(dataRef);
		this.modelRef.setData(dataRef);
	},

	formChipConfiguration: function() {
		var that = this;
		var payload = {};
		var dataRef = this.modelRef.getData();
		var data = dataRef.CHIP;
		var configuration = null;
		var tileConfig = {};
		var tileProperties = {};
		var harveyFilters= data.harveyFilters||[];
		//chip properties
		payload.id = data.id || "";
		this.currentChipId = payload.id;
		payload.isActive = 0;
		payload.catalogId = 'HANA_CATALOG';
		payload.title = data.title;
		payload.description = data.description;
		if(data.tileType == "DT")
		{
			payload.tileType = data.tileType + "-" + data.dualTileType;

		}
		else{
			payload.tileType = data.tileType;
		}
		payload.evaluationId = data.evaluationId;
		payload.url = this.getChipUrl(payload.tileType);
		payload.keywords = data.keywords;

		if(data.changedOn) {
			payload.changedOn = data.changedOn;
		}

		// TILE_PROPERTIES in configuration
		tileProperties.id = data.id || "";
		tileProperties.evaluationId = data.evaluationId; 
		if(data.tileType == "DT")
		{
			tileProperties.tileType = data.tileType + "-" + data.dualTileType;

		}
		else{
			tileProperties.tileType = data.tileType;
		}

		if(data.tileType == 'CT' || (data.tileType == 'DT' && data.dualTileType == 'CT')) {
			tileProperties.dimension = data.dimension;
			tileProperties.sortOrder = data.sortOrder;
			tileProperties.semanticColorContribution = data.semanticColorContribution;
		}
		if(data.tileType == 'TT' || (data.tileType == 'DT' && data.dualTileType == 'TT')) {
			tileProperties.dimension = data.dimension;
		}

		var evaluation = dataRef.EVALUATION;

		if(data.tileType == 'NT' || data.tileType == 'TT' || data.tileType == 'CT' || data.tileType == 'AT' || data.tileType == 'CM'|| data.tileType=="HT") {
			tileProperties.frameType = 'OneByOne';
		}
		else {
			tileProperties.frameType = 'TwoByOne';
			// For 2x1 tiles
		}

		tileProperties.navType = data.navType;

		if(tileProperties.navType == "0") {
			tileProperties.semanticObject = (data.semanticObject && (data.semanticObject.length != (data.semanticObject.split(" ").length - 1))) ? data.semanticObject : evaluation.COLUMN_NAME;
			tileProperties.semanticAction = this.sbAction;
		}
		else if(tileProperties.navType == "1") {
			tileProperties.storyId = data.storyId;
			tileProperties.semanticObject = data.semanticObject || this.lumiraSemanticObject || this.LUMIRA_SEMANTIC_OBECT;
			tileProperties.semanticAction = data.semanticAction || this.lumiraAction || this.LUMIRA_ACTION; 
		}
		else if(tileProperties.navType == "2") {
			tileProperties.apfConfId = data.apfConfId;
			tileProperties.semanticObject = data.semanticObject || this.apfSemanticObject || this.APF_SEMANTIC_OBECT;
			tileProperties.semanticAction = data.semanticAction || this.apfAction || this.APF_ACTION;
		}
		else if(tileProperties.navType == "5") {
			tileProperties.semanticObject = data.semanticObject || this.adhocAnalysisSemanticObject || this.ADHOC_ANALYSIS_SEMANTIC_OBECT;
			tileProperties.semanticAction = data.semanticAction || this.adhocAnalysisAction || this.ADHOC_ANALYSIS_ACTION;
		}
		else {
			tileProperties.semanticObject = data.semanticObject;
			tileProperties.semanticAction = data.semanticAction;
		}

		if(data.tileType == 'CM' || (data.tileType == 'DT' && data.dualTileType == 'CM')) {
			tileProperties.COLUMN_NAMES = [];
			var customMeasures = data.MULTI_MEASURE;
			var evaluationCustomMeasureArray = [];
			for(var i=0,l=customMeasures.length; i<l; i++) {
				if(customMeasures[i].COLUMN_NAME) {
					tileProperties.COLUMN_NAMES.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
					evaluationCustomMeasureArray.push({COLUMN_NAME:customMeasures[i].COLUMN_NAME, semanticColor:customMeasures[i].semanticColor});
				}
				else {
					evaluationCustomMeasureArray.push({COLUMN_NAME:null, semanticColor:null});
				}
			}
		}
		if(data.tileType== 'HT'){
			tileProperties.isFractionMeasure = dataRef.CHIP.isKPIMeasureFractionMeasureHarvey;
			if(tileProperties.isFractionMeasure){
				tileProperties.harveyTotalMeasure = data.totalValueMeasure;
			}else{
				tileProperties.harveyFilters=[];
				if(harveyFilters[0]&& harveyFilters[0].VALUE_1){
					harveyFilters[0].VALUE_1.forEach(function(val){
						tileProperties.harveyFilters.push({
							NAME:harveyFilters[0].NAME,
							OPERATOR:harveyFilters[0].OPERATOR,
							VALUE_1:val,
							VALUE_2:"",
							TYPE: "FI"
						});
					});
				}
			}
		}
		tileConfig.ADDITIONAL_APP_PARAMETERS = {};

		var appParameters = dataRef.CHIP.APP_PARAMETERS;
		if(appParameters && appParameters.length) {
			for(var i=0,l=appParameters.length; i<l; i++) {
				tileConfig.ADDITIONAL_APP_PARAMETERS[appParameters[i].NAME] = appParameters[i].VALUE; 
			}
		}

		tileConfig.ADDITIONAL_APP_PARAMETERS = Object.keys(tileConfig.ADDITIONAL_APP_PARAMETERS).length ? JSON.stringify(tileConfig.ADDITIONAL_APP_PARAMETERS) : JSON.stringify({});

		tileConfig.TILE_PROPERTIES = JSON.stringify(tileProperties);


		// EVALUATION_FILTERS properties in configuration
		tileConfig.EVALUATION_FILTERS = dataRef.FILTERS.length ? JSON.stringify(dataRef.FILTERS) : JSON.stringify([]);

		// EVALUATION_VALUES properties in configuration
		tileConfig.EVALUATION_VALUES =  dataRef.VALUES.length ? JSON.stringify( dataRef.VALUES) : JSON.stringify([]);

		// TAGS in configuration
		tileConfig.TAGS = dataRef.TAGS ? JSON.stringify(Object.keys(dataRef.TAGS)) : JSON.stringify([]);

		// EVALUATION properties in configuration
		var evaluationInfo = {};
		evaluationInfo.ID = evaluation.ID;
		evaluationInfo.INDICATOR = evaluation.INDICATOR;
		evaluationInfo.INDICATOR_TYPE = evaluation.INDICATOR_TYPE;
		evaluationInfo.INDICATOR_TITLE = evaluation.INDICATOR_TITLE;
		evaluationInfo.GOAL_TYPE = evaluation.GOAL_TYPE;
		evaluationInfo.TITLE = evaluation.TITLE;
		evaluationInfo.SCALING = evaluation.SCALING;
		evaluationInfo.ODATA_URL = evaluation.ODATA_URL;
		evaluationInfo.ODATA_ENTITYSET = evaluation.ODATA_ENTITYSET;
		evaluationInfo.VIEW_NAME = evaluation.VIEW_NAME;
		evaluationInfo.COLUMN_NAME = evaluation.COLUMN_NAME;
		evaluationInfo.OWNER_NAME = evaluation.OWNER_NAME; 
		evaluationInfo.VALUES_SOURCE = evaluation.VALUES_SOURCE;
		evaluationInfo.DECIMAL_PRECISION = evaluation.DECIMAL_PRECISION;

		tileConfig.EVALUATION = evaluationInfo ? JSON.stringify(evaluationInfo) : JSON.stringify({});

		var dateString = Date.now().toString();
		configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"1", timeStamp:dateString});

		var tileConfigLimit = 4050;
		if(payload.id) {
			tileConfigLimit = 4096;
		}

		if(configuration.length > tileConfigLimit) {
			tileConfig.TAGS = JSON.stringify([]);
			configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
			if(configuration.length > tileConfigLimit) {
				tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
				tileConfig.TAGS = JSON.stringify([]);
				configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
				if(configuration.length > tileConfigLimit) {
					tileConfig.EVALUATION_VALUES = JSON.stringify([]);
					tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
					tileConfig.TAGS = JSON.stringify([]);
					configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
				}
			}
		}

//		if(configuration.length > tileConfigLimit) {
//		tileConfig.EVALUATION_FILTERS = JSON.stringify([]);  
//		configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
//		if(configuration.length > tileConfigLimit) {
//		tileConfig.EVALUATION_VALUES = JSON.stringify([]);
//		tileConfig.EVALUATION_FILTERS = JSON.stringify([]);
//		configuration = JSON.stringify({tileConfiguration:JSON.stringify(tileConfig), isSufficient:"0", timeStamp:dateString});
//		}
//		}

		payload.configuration = configuration;

		return payload;
	},

	publishChip: function(payload) {
		var serviceStatus = true;
		var that = this;
		payload.keywords = payload.keywords || "";
		delete payload.navType;
		delete payload.semanticObject;
		delete payload.action;
		this.chipTextPayload = [];
		var batchOperations = [];
		this.deleteBatch = [];
		this.createBatch = [];
		var isUpdatesSuccessful = true;

		var oDataModel = this.oApplicationFacade.getODataModel();

		if(this.createMode) {
			//odata write
//			oDataModel.create("/CHIPS",payload, null, function(data) {
//			if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
//			for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//			var chipTextObject = {};
//			that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].isoLanguage)  + "'", null, null, false, function(data){
//			chipTextObject.language = data.results[0].SPRAS;
//			});
//			chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
//			chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
//			chipTextObject.id = payload.id;
//			chipTextObject.isActive = 0;
//			that.chipTextPayload.push(chipTextObject);
//			batchOperations.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",chipTextObject));
//			}
//			oDataModel.addBatchChangeOperations(batchOperations);
//			oDataModel.submitBatch(function(data,response,errorResponse){
//			if(errorResponse.length)
//			{       
//			isUpdatesSuccessful = false;
//			return;
//			}
//			var responses = data.__batchResponses[0].__changeResponses;
//			for(var key in responses)
//			if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//			isUpdatesSuccessful = false;      
//			}
//			if(isUpdatesSuccessful) {
//			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
//			}
//			},function(error){
//			isUpdatesSuccessful = false;
//			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//			},false);
//			}
//			else {
//			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
//			}

//			}, function(err) {
//			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//			});

			//xsjs write
			var finalPayload = [];
			if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
				for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
					var chipTextObject = {};
					chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
					chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
					chipTextObject.id = payload.id;
					chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
					chipTextObject.isActive = 0;
					that.chipTextPayload.push(chipTextObject);
				}
			}
			finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:payload, TEXTS:that.chipTextPayload}});
			that.metadataRef.create("CHIP",finalPayload,null,function(data) {
				serviceStatus = true;
				that.currentChipId = JSON.parse(data).response[0].id;
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
			},function(err){
				serviceStatus = false;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
					"description" : err.responseText
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			});
		}
		else if(this.editMode){
			if(this.currentContextState) {
				//odata create
//				oDataModel.create("/CHIPS",payload, null,  function(data) {
//				if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES) {
//				for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//				var chipTextObject = {};
//				that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].isoLanguage)  + "'", null, null, false, function(data){
//				chipTextObject.language = data.results[0].SPRAS;
//				});
//				chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
//				chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
//				chipTextObject.id = payload.id;
//				chipTextObject.isActive = 0;
//				that.chipTextPayload.push(chipTextObject);
//				batchOperations.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",chipTextObject));
//				}
//				oDataModel.addBatchChangeOperations(batchOperations);
//				oDataModel.submitBatch(function(data,response,errorResponse){
//				if(errorResponse.length)
//				{       
//				isUpdatesSuccessful = false;
//				return;
//				}
//				var responses = data.__batchResponses[0].__changeResponses;
//				for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//				isUpdatesSuccessful = false;      
//				}
//				if(isUpdatesSuccessful) {
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				},function(error){
//				isUpdatesSuccessful = false;
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				},false);
//				}
//				else{
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				}, function(err) {
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				});

				//xsjs write
				var finalPayload = [];
				if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
						chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:payload, TEXTS:that.chipTextPayload}});
				that.metadataRef.create("CHIP",finalPayload,null,function(data) {
					serviceStatus = true;
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				},function(err){
					serviceStatus = false;
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
						"description" : err.responseText
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				});
			}
			else {
				//odata update
//				oDataModel.update(this.chipContext.sPath,payload, null,  function(data) {
//				if(that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES || that.oldLanguagePayload) {
//				for(var i=0;i<that.additionalLanguageLinkModel.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
//				var chipTextObject = {};
//				that.oApplicationFacade.getODataModel().read("/LANGUAGE?$filter=LAISO eq '" +encodeURIComponent(that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].isoLanguage)  + "'", null, null, false, function(data){
//				chipTextObject.language = data.results[0].SPRAS;
//				});
//				chipTextObject.title = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
//				chipTextObject.description = that.additionalLanguageLinkModel.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
//				chipTextObject.id = payload.id;
//				chipTextObject.isActive = payload.isActive;
//				that.chipTextPayload.push(chipTextObject);
//				}

//				that.languagePayloadForDirtyBitTest = []; 

//				for(var i=0;i<that.oldLanguagePayload.length;i++){
//				var textObject = {};
//				textObject.id = payload.id;
//				textObject.language = that.oldLanguagePayload[i].language;
//				textObject.isActive = that.oldLanguagePayload[i].isActive;
//				textObject.description = that.oldLanguagePayload[i].description;
//				textObject.title= that.oldLanguagePayload[i].title;
//				that.languagePayloadForDirtyBitTest.push(textObject);
//				}

//				var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
//				oldPayload : that.languagePayloadForDirtyBitTest,
//				newPayload : that.chipTextPayload,
//				objectType : "CHIP_TEXTS"
//				});

//				if(languageDeltaObject){
//				if(languageDeltaObject.deletes.length){
//				var i;
//				for(i=0;i<languageDeltaObject.deletes.length;i++){
//				that.deleteBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS(id='"+languageDeltaObject.deletes[i].id+"',isActive="+languageDeltaObject.deletes[i].isActive+",language='"+languageDeltaObject.deletes[i].language+"')","DELETE"));
//				}
//				}
//				if(languageDeltaObject.updates.length){
//				var i;
//				for(i=0;i<languageDeltaObject.updates.length;i++){
//				that.createBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",languageDeltaObject.updates[i]));
//				}
//				}

//				if(that.deleteBatch.length){
//				oDataModel.addBatchChangeOperations(that.deleteBatch);
//				oDataModel.submitBatch(function(data,response,errorResponse){
//				if(errorResponse.length)
//				{       
//				isUpdatesSuccessful = false;
//				return;
//				}
//				var responses = data.__batchResponses[0].__changeResponses;
//				for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//				isUpdatesSuccessful = false;      
//				}
//				if(isUpdatesSuccessful) {
//				if(that.createBatch.length){
//				oDataModel.addBatchChangeOperations(that.createBatch);
//				oDataModel.submitBatch(function(data,response,errorResponse){
//				if(errorResponse.length)
//				{       
//				isUpdatesSuccessful = false;
//				return;
//				}
//				var responses = data.__batchResponses[0].__changeResponses;
//				for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//				isUpdatesSuccessful = false;      
//				}
//				if(isUpdatesSuccessful) {
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				},function(error){
//				isUpdatesSuccessful = false;
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				},false);
//				}
//				else{
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				}
//				},function(error){
//				isUpdatesSuccessful = false;
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				},false);
//				}
//				else{
//				if(that.createBatch.length){
//				oDataModel.addBatchChangeOperations(that.createBatch);
//				oDataModel.submitBatch(function(data,response,errorResponse){
//				if(errorResponse.length)
//				{       
//				isUpdatesSuccessful = false;
//				return;
//				}
//				var responses = data.__batchResponses[0].__changeResponses;
//				for(var key in responses)
//				if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//				isUpdatesSuccessful = false;      
//				}
//				if(isUpdatesSuccessful) {
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				},function(error){
//				isUpdatesSuccessful = false;
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.response.body);
//				},false);
//				}

//				}
//				}
//				}
//				else{
//				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_EDITED_SUCCESSFULLY"));
//				}
//				}, function(err) {
//				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),err.response.body);
//				});

				//xsjs update
				var finalPayload = [];
				if(that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES) {
					for(var i=0;i<that.modelRef.getData().NO_OF_ADDITIONAL_LANGUAGES;i++){
						var chipTextObject = {};
						chipTextObject.title = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].title;
						chipTextObject.description = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].description;
						chipTextObject.id = payload.id;
						chipTextObject.language = that.modelRef.getData().ADDITIONAL_LANGUAGE_ARRAY[i].language;
						chipTextObject.isActive = 0;
						that.chipTextPayload.push(chipTextObject);
					}
				}
				that.languagePayloadForDirtyBitTest = []; 
				for(var i=0;i<that.initialData.ADDITIONAL_LANGUAGE_ARRAY.length;i++){
					var textObject = {};
					textObject.id = payload.id;
					textObject.language = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].language;
					textObject.isActive = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].isActive;
					textObject.description = that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].description;
					textObject.title= that.initialData.ADDITIONAL_LANGUAGE_ARRAY[i].title;
					that.languagePayloadForDirtyBitTest.push(textObject);
				}
				var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
					oldPayload : that.languagePayloadForDirtyBitTest,
					newPayload : that.chipTextPayload,
					objectType : "CHIP_TEXTS"
				});
				var textsUpdatePayload = {remove:[],create:[]};
				if(languageDeltaObject) {
					if(languageDeltaObject.deletes.length){
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							textsUpdatePayload.remove.push(languageDeltaObject.deletes[i]);
						}
					}
					if(languageDeltaObject.updates.length){
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							that.createBatch.push(oDataModel.createBatchOperation("/CHIP_TEXTS","POST",languageDeltaObject.updates[i]));
							textsUpdatePayload.create.push(languageDeltaObject.updates[i]);
						}
					}
				}
				finalPayload.push({keys:{id:payload.id, isActive:payload.isActive}, payload:{CHIP:{update:payload}, TEXTS:textsUpdatePayload}});
				that.metadataRef.update("CHIP",finalPayload,null,function(data) {
					serviceStatus = true;
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				},function(err){
					serviceStatus = false;
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
						"description" : err.responseText
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}); 
			}
		}
		return serviceStatus;
	},

	getChipUrl: function(tileType) {
		var chipUrls = {
				"NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
				"CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
				"HT":	"/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorHarveyBall/HarveyBallTileChip.xml",
				"TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
				"AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml",
				"CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcomparison/ComparisonTileChip.xml",
				"DT-CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDual/DualTileChip.xml",
				"DT-CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDual/DualTileChip.xml",
				"DT-AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDual/DualTileChip.xml",
				"DT-TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorDual/DualTileChip.xml"
		}
		return chipUrls[tileType];
	},

	populateDimension : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var dimensions = [], dimensionDataArray = [], obj = {};
		var i;
		dimensions = sap.suite.ui.smartbusiness.lib.Util.odata.dimensions(dataSource, entitySet).getAsStringArray();
		for (i = 0; i < dimensions.length; i++) {
			obj = {};
			obj.dimensionName = dimensions[i];
			dimensionDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			dimensions : dimensionDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	handleDimensionSelectionChange: function(evt) {
		//this.tileConfigurationModel.getData().dimension = evt.getSource().getSelectedItem().getKey();
		evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
	},

	setGenericDrillDown: function(navType) {
		return (navType == 0) ? true : false;
	},

	setOtherDrillDown: function(navType) {
//		if(navType > 0) {
//		this.getView().byId('selectODD').setVisible(true);
//		} 
//		else {
//		this.getView().byId('selectODD').setVisible(false);
//		}
		return (navType > 0) ? true : false;
	},

	onAfterContextData: function(contextObj) {
		var that = this; 
		this.evaluationObj = contextObj;

		if(this.customMeasuresModel && this.customMeasuresModel.getData()) {
			var customMeasures = this.customMeasuresModel.getData();
			customMeasures.Measures.unshift({COLUMN_NAME: this.evaluationObj.COLUMN_NAME});
			this.customMeasuresModel.setData(customMeasures);
		}

		try {
			this.oModelForEntity = this.populateDimension(contextObj.ODATA_URL, contextObj.ODATA_ENTITYSET);
			this.tileConfigurationModel.getData().dimension = this.oModelForEntity.getData().dimensions[0].dimensionName;
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});
		} catch (err) {

		} finally {
			if (this.oModelForEntity && this.oModelForEntity.getData() && this.oModelForEntity.getData().dimensions && this.oModelForEntity.getData().dimensions.length) {
				this.getView().byId("selectDimension").setModel(this.oModelForEntity, "populateDimension");
			} else {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
		}

		if(this.appMode == "addTile") {
			that.selectTile('NT');
			that.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));

			that.currentLocaleLanguage = that.languagesObject.LAISO[sap.ui.getCore().getConfiguration().getLanguage().split("-")[0].toUpperCase()];

			var texts_entity = "/EVALUATIONS_CHIP_TEXTS?$filter=ID eq '" + contextObj.ID + "' and IS_ACTIVE eq 1"; 

			that.oApplicationFacade.getODataModel().read(texts_entity,null,null,true,function(data) {
				that.evaluationDetails = that.evaluationDetails || {};
				that.evaluationDetails.TEXTS = [];
				var obj = {};
				for(var i=0,l=data.results.length; i<l; i++) {
					obj = {};
					obj.language = data.results[i].LANGUAGE;
					obj.title = data.results[i].TITLE;
					obj.description = data.results[i].DESCRIPTION;
					that.evaluationDetails.TEXTS.push(obj);
				}
			}, function(err) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"),
					"description" : err.response.body
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			});

			this.updateFooterButtons(null);   
			this.tileConfigurationModel.setData({evaluationId:contextObj.ID,title:contextObj.INDICATOR_TITLE,description:contextObj.TITLE,semanticObject:(contextObj.SEMANTIC_OBJECT || ''),action:(contextObj.ACTION || ''),storyId:'',tileType:'NT',navType:0});
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});

			this.tempSemanticObject = contextObj.SEMANTIC_OBJECT || "";
			this.onLoadSemanticObject = this.tempSemanticObject;
			this.tempAction = contextObj.ACTION || "";

			var multiMeasureModel = new sap.ui.model.json.JSONModel();
			multiMeasureModel.setData({MULTI_MEASURE:[{COLUMN_NAME:that.evaluationObj.COLUMN_NAME,semanticColor:"Error"},{COLUMN_NAME:"",semanticColor:"Critical"},{COLUMN_NAME:"",semanticColor:"Good"}]});
			this.getView().setModel(multiMeasureModel,"multiMeasures");

		}
	},

	onAfterChipContextData: function(contextObj) {
		var that = this;
		this.currentContextState = contextObj.isActive;
		this.currentChipId = contextObj.id;

		this.updateFooterButtons(contextObj);
		if(this.appMode == "editTile") {
			var configuration = JSON.parse(contextObj.configuration);
			var appParameters = [];
			if(JSON.parse(configuration.tileConfiguration).ADDITIONAL_APP_PARAMETERS) {
				appParameters = JSON.parse(JSON.parse(configuration.tileConfiguration).ADDITIONAL_APP_PARAMETERS);
			}

			var evaluation = {};
			var multiMeasures = {MULTI_MEASURE:[]}
			if(JSON.parse(configuration.tileConfiguration).EVALUATION) {
				evaluation = JSON.parse(JSON.parse(configuration.tileConfiguration).EVALUATION);
				var multiMeasureModel = new sap.ui.model.json.JSONModel();
				if(evaluation.COLUMN_NAMES && evaluation.COLUMN_NAMES.length) {
					for(var i=0,l=evaluation.COLUMN_NAMES.length; i<l; i++) {
						multiMeasures.MULTI_MEASURE.push({COLUMN_NAME:evaluation.COLUMN_NAMES[i].COLUMN_NAME, semanticColor:evaluation.COLUMN_NAMES[i].semanticColor});
					}
					if(multiMeasures.MULTI_MEASURE && multiMeasures.MULTI_MEASURE.length == 2) {
						multiMeasures.MULTI_MEASURE.push({COLUMN_NAME:"", semanticColor:"Good"});
					}
					multiMeasureModel.setData(multiMeasures);
					this.getView().setModel(multiMeasureModel,"multiMeasures");
				}
				else {
					multiMeasureModel.setData({MULTI_MEASURE:[{COLUMN_NAME:that.evaluationObj.COLUMN_NAME,semanticColor:"Error"},{COLUMN_NAME:"",semanticColor:"Critical"},{COLUMN_NAME:"",semanticColor:"Good"}]});
					this.getView().setModel(multiMeasureModel,"multiMeasures");
				}

			}

			var tileProperties = JSON.parse(JSON.parse(configuration.tileConfiguration).TILE_PROPERTIES); 

			contextObj.semanticObject = tileProperties.semanticObject;
			that.onLoadSemanticObject = contextObj.semanticObject;
			contextObj.action = tileProperties.semanticAction;

			this.tempSemanticObject = contextObj.semanticObject || "";
			this.tempAction = contextObj.action || "";

			contextObj.navType = tileProperties.navType || "0";
			contextObj.sortOrder = tileProperties.sortOrder || undefined;
			contextObj.dimension = tileProperties.dimension || undefined;

			if(contextObj.navType.toString() == "1") {
				this.lumiraSemanticObject = contextObj.semanticObject;
				this.lumiraAction = contextObj.action;
				this.apfSemanticObject = this.APF_SEMANTIC_OBECT;
				this.apfAction = this.APF_ACTION;
				this.adhocAnalysisSemanticObject = this.ADHOC_ANALYSIS_SEMANTIC_OBECT;
				this.adhocAnalysisAction = this.ADHOC_ANALYSIS_ACTION;
			}
			else if(contextObj.navType.toString() == "2") {
				this.apfSemanticObject = contextObj.semanticObject;
				this.apfAction = contextObj.action;
				this.lumiraSemanticObject = this.LUMIRA_SEMANTIC_OBECT;
				this.lumiraAction = this.LUMIRA_ACTION;
				this.adhocAnalysisSemanticObject = this.ADHOC_ANALYSIS_SEMANTIC_OBECT;
				this.adhocAnalysisAction = this.ADHOC_ANALYSIS_ACTION;
			}
			else if(contextObj.navType.toString() == "5") {
				this.adhocAnalysisSemanticObject = contextObj.semanticObject;
				this.adhocAnalysisAction = contextObj.action;
				this.lumiraSemanticObject = this.LUMIRA_SEMANTIC_OBECT;
				this.lumiraAction = this.LUMIRA_ACTION;
				this.apfSemanticObject = this.APF_SEMANTIC_OBECT;
				this.apfAction = this.APF_ACTION;
			}
			else {
				this.apfSemanticObject = this.APF_SEMANTIC_OBECT;
				this.apfAction = this.APF_ACTION;
				this.lumiraSemanticObject = this.LUMIRA_SEMANTIC_OBECT;
				this.lumiraAction = this.LUMIRA_ACTION;
				this.adhocAnalysisSemanticObject = this.ADHOC_ANALYSIS_SEMANTIC_OBECT;
				this.adhocAnalysisAction = this.ADHOC_ANALYSIS_ACTION;
			}

			this.byId('selectTileType').setSelectedKey(contextObj.tileType);
			this.selectTile(contextObj.tileType);

			if(Number(contextObj.navType) == 1) {
				contextObj.storyId = tileProperties.storyId;
			}
			else {
				contextObj.storyId = "";
			}

			this.tileConfigurationModel.setData(contextObj);
			this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});

			if(Number(contextObj.navType)) {
				this.byId("selectNavType").setSelectedKey(contextObj.navType);
				this.getSelectedRadioButton(null,"ODD");
			}
			else {
				this.getSelectedRadioButton(null,"GDD");
			}

			//this.handleSemanticObjectChange(null, contextObj.semanticObject);

			var parametersJson = [];

			if(appParameters && Object.keys(appParameters).length) {
				for(var key in appParameters) {
					if(appParameters.hasOwnProperty(key)) {
						parametersJson.push({NAME:key, VALUE:appParameters[key]});
					}
				}
			}
			this.byId("propertyNameValueBox").getModel("appParameters").setData({PROPERTIES:parametersJson});
			this.initialAppParameters = jQuery.extend(true, [], (this.appParametersModel.getData().PROPERTIES || []));
		}
	},

	addNewProperty : function() {
		var that = this;
		if (this.getView().byId("appPropertyName").getValue()) {
			this.getView().byId("appPropertyName").setValueState("None");
			if (this.getView().byId("appPropertyValue").getValue()) {
				this.getView().byId("appPropertyValue").setValueState("None");
				var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
				properties = properties || [];
				if(this.checkForDuplicateProperty()) {
					properties.push({
						NAME : this.getView().byId("appPropertyName").getValue(),
						VALUE : this.getView().byId("appPropertyValue").getValue()
					});
					this.getView().byId("appPropertyName").setValue("");
					this.getView().byId("appPropertyValue").setValue("");
					var dataRef = this.modelRef.getData();
					dataRef.CHIP.APP_PARAMETERS = properties;
					this.modelRef.setData(dataRef);
				}
			} else {
				that.isPropertyAdded = false;
				this.getView().byId("appPropertyValue").setValueState("Error");
				this.getView().byId("appPropertyValue").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
				sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_VALUE"));
			}
		} else {
			that.isPropertyAdded = false;
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
			sap.m.MessageToast.show(this.oApplicationFacade.getResourceBundle().getText("ENTER_PROPERTY_NAME"));
		}
	},

	removeProperty : function(evt) { 
		var path = evt.getSource().getBindingContext("tileConfig").getPath();
		evt.getSource().getBindingContext("tileConfig").getModel().getData().CHIP.APP_PARAMETERS.splice(path.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext("tileConfig").getModel().updateBindings();
	},

	getAllFooterButtons: function() {
		var that = this;
		var buttonsList = [{
			sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE_DRAFT"),
			onBtnPressed : function(evt) {
				this.errorMessages=[];
				this.errorState=false;
				sap.m.MessageBox.show(
						that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
						"sap-icon://hint",
						that.oApplicationFacade.getResourceBundle().getText("DELETE"),
						[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
						function(evt){
							if(evt=="OK"){
								//odata remove
//								that.oApplicationFacade.getODataModel().remove(that.chipContext.sPath,null,function(data) {
//								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
//								that.oApplicationFacade.getODataModel().refresh();
//								that.oRouter.navTo("detail",{
//								contextPath: that.context.sPath.substr(1)
//								});
//								},function(err){
//								sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
//								});

								//xsjs remove
								that.errorMessages=[];
								that.errorState = false;
								that.metadataRef.remove("CHIP",{payload:{id:that.currentChipId,isActive:that.currentContextState}},function(data) {
									sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
									//that.oApplicationFacade.getODataModel().refresh();
									that.refreshMasterList();
									sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
								},function(err){
//									sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"), err.response.body);
//									that.errorMessages.push({
//									"type":"Error",
//									"title":that.oApplicationFacade.getResourceBundle().getText("DELETION_FAILED"),
//									"description" : err.response.body
//									});
//									sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
								});

							}
							if(evt=="CANCEL"){

							}
						}
				);
			},
		}, {
			sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("SAVE") + ' and ' + that.oApplicationFacade.getResourceBundle().getText("ACTIVATE"),
			onBtnPressed : function(evt) {

				that.errorMessages=[];
				that.errorState = false;

				var dataRef = that.modelRef.getData();
				var data = dataRef.CHIP;

				var errorLog = "";
				var configuration = null;
				errorLog = that.checkForValidChipForActivation();
				if(errorLog) {
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), errorLog);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"),
						"description" : errorLog
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);

				}
				else {

					//usability improvement - Save appParams without explicit click on "+"
					that.isPropertyAdded = true;
					if(that.getView().byId("appPropertyName").getValue() || that.getView().byId("appPropertyValue").getValue()){
						that.addNewProperty();
					}
					if(!that.isPropertyAdded){
						return;
					}
					configuration = that.formChipConfiguration();
					function publishChipCallBack(data) {
						try {
							that.currentChipId = JSON.parse(data).response[0].id;
						}
						catch(e) {
							that.currentChipId = that.currentChipId || null; 
						}
						finally {
							that.metadataRef.create("ACTIVATE_CHIP",{id:that.currentChipId},null,function(data) {
								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_SUCCESSFUL"));
								//that.oApplicationFacade.getODataModel().refresh();
								that.oApplicationFacade.__tileModified = true;
								that.refreshMasterList();
								sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
							},function(err){
								sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"), err.responseText);
								that.errorMessages.push({
									"type":"Error",
									"title":that.oApplicationFacade.getResourceBundle().getText("ACTIVATION_ERROR"),
									"description" : err.responseText
								});
								sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
							});
						}
					}
					function publishChipErrCallBack(err) {
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
						that.errorMessages.push({
							"type":"Error",
							"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
							"description" : err.responseText
						});
						sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
					}
					mode = that.createMode ? "create" : (that.editMode ? "edit" : "edit");
					that.mode = mode;
					that.metadataRef.publishChip(configuration, mode, that, publishChipCallBack, publishChipErrCallBack);

				}
				that.setFooterOnError();
			},
		},{
			sI18nBtnTxt : "SAVE_AND_CONFIG_DRILLDOWN",
			onBtnPressed : function(evt) {
				that.handleNavToDrillDown();
			}
		}, {
			sI18nBtnTxt : "SAVE_CREATE_NEW",
			onBtnPressed : function(evt) {

				//usability improvement - Save appParams without explicit click on "+"
				that.isPropertyAdded = true;
				that.errorMessages=[];
				that.errorState = false;

				if(that.getView().byId("appPropertyName").getValue() || that.getView().byId("appPropertyValue").getValue()){
					that.addNewProperty();
				}
				if(!that.isPropertyAdded){
					return;
				}

				var configuration = that.formChipConfiguration();

				function publishChipCallBack(data) {
					try {
						that.currentChipId = JSON.parse(data).response[0].id;
					}
					catch(e) {

					}
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
					if(that.appMode == "addTile") {
						var hashObj = hasher || window.hasher;
						var currentHash = hasher.getHash();
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action: "configureSBKPITile"});
						setTimeout(function(){
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash: "#"+currentHash}, true);
						},0);
					}
					else {
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addTile", context: that.context.sPath.substr(1)});
					}
				}
				function publishChipErrCallBack(err) {
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
					that.errorMessages.push({
						"type":"Error",
						"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
						"description" : err.responseText
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}

				mode = that.createMode ? "create" : (that.editMode ? "edit" : "edit");
				that.mode = mode;
				that.metadataRef.publishChip(configuration, mode, that, publishChipCallBack, publishChipErrCallBack);
				that.setFooterOnError();
			}
		}, {
			sI18nBtnTxt : "CANCEL",
			onBtnPressed : function(evt) {
				that.handleBackAndCancel();
			}
		}

		];
		return buttonsList;

	},

	updateFooterButtons: function(chipObj) {
		var buttonsList = this.getAllFooterButtons();
		this.oHeaderFooterOptions.buttonList = [];
		this.oErrorOptionsForDraft={
				bSuppressBookmarkButton: {},
				onBack: function() {
					that.handleBackAndCancel();
				},
				oNegativeAction :{
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						that.utilsRef.handleMessagePopover(event,that);
					}
				},
				buttonList : []
		};
		this.oErrorOptionsForDraft.buttonList.push({
			sI18nBtnTxt : "SAVE",
			onBtnPressed : function(evt) {
				that.saveTile();
			}
		});
		if(chipObj && chipObj.CHIP) {
			if((!(chipObj.CHIP.isActive)) && (this.editMode)) {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[0]);
				this.oErrorOptionsForDraft.buttonList.push(this.oHeaderFooterOptions.buttonList[0]);
			}
		}
		for(var i=1,l=buttonsList.length; i<l; i++) {
			if(i==2) {
//				if(chipObj.CHIP && (chipObj.CHIP.isActive == 1)) {
//	this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
//}
if(chipObj.CHIP && (chipObj.CHIP.navType == "2" || chipObj.CHIP.navType == "0")) {
	this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
	this.oErrorOptionsForDraft.buttonList.push(this.oHeaderFooterOptions.buttonList[i]);
}
			}
			else {
				this.oHeaderFooterOptions.buttonList.push(buttonsList[i]);
				this.oErrorOptionsForDraft.buttonList.push(this.oHeaderFooterOptions.buttonList[i]);
			}

		}

		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	},

	checkForDuplicateProperty: function() {
		var that = this;
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		var property = this.getView().byId("appPropertyName").getValue();
		var value = this.getView().byId("appPropertyValue").getValue();
		if(!isNaN(Number(property))) {
			this.getView().byId("appPropertyName").setValueState("Error");
			this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_PROPERTY_NOT_STRING"));
			return false;
		}
		for(var i=0,l=properties.length; i<l; i++) {
			if((properties[i].NAME == property)) {
				if(properties[i].NAME == property) {
					this.getView().byId("appPropertyName").setValueState("Error");
					this.getView().byId("appPropertyName").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				}
				return false;
			} 
		}
		return true;
	},

	inputNameChange: function(evt) {
		var that = this;
		var property = evt.getSource().getValue();
		var index = Number(evt.getSource().getBindingContext("tileConfig").sPath[evt.getSource().getBindingContext("tileConfig").sPath.length - 1]);
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_MULTIPLE_VALUES_FOR_PROPERTY"));
				return;
			}
		}
		evt.getSource().setValueState("None");
	},

	inputValueChange: function(evt) {
		var that = this;
		var value = evt.getSource().getValue();
		var property = evt.getSource().getBindingContext("tileConfig").getObject().NAME;
		var index = Number(evt.getSource().getBindingContext("tileConfig").sPath[evt.getSource().getBindingContext("tileConfig").sPath.length - 1]);
		var properties = this.modelRef.getData().CHIP.APP_PARAMETERS;
		for(var i=0,l=properties.length; i<l; i++) {
			if(i == index) {
				continue;
			}
			if(properties[i].NAME == property && properties[i].VALUE == value) {
				evt.getSource().setValueState("Error");
				evt.getSource().setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_PROPERTY_VALUE"));
			}
		}
	},

	onAfterRendering: function() {
		var that = this;
//		if(this.appMode == "addTile") {
//		this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
//		}
//		this.initialData = jQuery.extend(true, {}, this.tileConfigurationModel.getData(), {});
	},

	handleSemanticObjectChange: function(evt) {
		this.tempSemanticObject = evt.getSource().getValue();
		if(this.tempSemanticObject) {
			evt.getSource().setValueState("None");
		}
		if(this.tempSemanticObject.indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT"));
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "2") {
			this.apfSemanticObject = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "1") {
			this.lumiraSemanticObject = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "5") {
			this.adhocAnalysisSemanticObject = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "0" || this.modelRef.getData().CHIP.navType.toString() == "4") {
			this.onLoadSemanticObject = evt.getSource().getValue();
		}
	},

	setSemanticAction: function(evt) {
		this.tempAction = evt.getSource().getValue();
		if(this.tempAction) {
			evt.getSource().setValueState("None");
		}
		if(this.tempAction.indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION"));
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "2") {
			this.apfAction = evt.getSource().getValue();
		}
		if(this.modelRef.getData().CHIP.navType.toString() == "1") {
			this.lumiraAction = evt.getSource().getValue();
		}
	},

	subTitleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	titleChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyNameChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	appPropertyValueChange: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	setStoryId: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
		if(evt.getSource().getValue().indexOf(" ") > -1) {
			evt.getSource().setValueState("Error");
			evt.getSource().setValueStateText(this.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID"));
		}
	},

	setAPFConfId: function(evt) {
		if(evt.getSource().getValue()) {
			evt.getSource().setValueState("None");
		}
	},

	handleStoryIdValueHelp: function() {
		var that = this;
		var viewName = this.modelRef.getData().EVALUATION.VIEW_NAME;
		var storyIdValueHelpDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("STORY_ID"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "/Stories",
				template : new sap.m.StandardListItem({
					title : "{NAME}",
					description : "{UUID}"
				})
			},
			confirm : function(oEvent) {
				that.modelRef.getData().CHIP.storyId = oEvent.getParameter("selectedItem").getProperty("description");
				that.byId("selectStoryId").setValueState("None");
				that.getView().getModel("tileConfig").setData(that.modelRef.getData());
				//that.byId("selectStoryId").setValue(that.tileConfigurationModel.getData().storyId);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(UUID)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				var oFilterContent = new sap.ui.model.Filter([oFilterPackage, oFilterObject], false);
				if(viewName) {
					var oFilterViewName = new sap.ui.model.Filter("VIEW_NAME",sap.ui.model.FilterOperator.EQ,viewName);
					oBinding.filter(new sap.ui.model.Filter([oFilterContent, oFilterViewName], true));
				}
				else {
					oBinding.filter(oFilterContent);
				}
			}
		});
		storyIdValueHelpDialog.open();
		that.oDataStoryIdModel = that.oDataStoryIdModel || new sap.ui.model.odata.ODataModel("/sap/bi/launchpad/integration/smb.xsodata",true);
		storyIdValueHelpDialog.setModel(that.oDataStoryIdModel);
		if(viewName) {
			storyIdValueHelpDialog.getBinding("items").filter([new sap.ui.model.Filter("VIEW_NAME",sap.ui.model.FilterOperator.EQ,viewName)]);
			that.getView().getModel("tileConfig").setData(that.modelRef.getData());
		}
	},

	handleAPFConfigIdValueHelp: function() {
		var that = this;
		var semanticObject = that.modelRef.getData().CHIP.semanticObject;
		var action = that.modelRef.getData().CHIP.semanticAction;
		that.jsonApfConfigIdModel = that.jsonApfConfigIdModel || new sap.ui.model.json.JSONModel();

		var apfConfigIdValueHelpDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("CONFIG_ID"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "/AnalyticalConfigForSemObjQueryResults",
				template : new sap.m.StandardListItem({
					title : "{AnalyticalConfigurationName}",
					description : "{AnalyticalConfiguration}"
				})
			},
			confirm : function(oEvent) {
				that.modelRef.getData().CHIP.apfConfId = oEvent.getParameter("selectedItem").getBindingContext().getProperty("AnalyticalConfiguration");
				that.modelRef.getData().CHIP.apfConfName = oEvent.getParameter("selectedItem").getBindingContext().getProperty("AnalyticalConfigurationName");
				that.modelRef.getData().CHIP.apfAppId = oEvent.getParameter("selectedItem").getBindingContext().getProperty("Application");
				that.byId("apfConfId").setValueState("None");
				that.getView().getModel("tileConfig").setData(that.modelRef.getData());
			},
			liveChange : function(oEvent) {
				var searchValue = oEvent.getParameter("value");
				var oFilterPackage = new sap.ui.model.Filter("AnalyticalConfigurationName", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("AnalyticalConfiguration", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterContent = new sap.ui.model.Filter([oFilterPackage, oFilterObject], false);
				var oFilterSemanticObject = new sap.ui.model.Filter("SemanticObject",sap.ui.model.FilterOperator.EQ,semanticObject);
				var oBinding = oEvent.getSource().getBinding("items");
				if(semanticObject) {
					oBinding.filter(new sap.ui.model.Filter([oFilterContent, oFilterSemanticObject], true));	
				}
				else {
					oBinding.filter(new sap.ui.model.Filter(oFilterContent));
				}

			}
		});
		apfConfigIdValueHelpDialog.open();

		that.oDataApfConfigIdModel = that.oDataApfConfigIdModel || new sap.ui.model.odata.ODataModel("/sap/hba/r/apf/core/odata/modeler/AnalyticalConfiguration.xsodata",true);
//		apfConfigIdValueHelpDialog.setModel(that.oDataApfConfigIdModel);
//		if(semanticObject) {
//		apfConfigIdValueHelpDialog.getBinding("items").filter([new sap.ui.model.Filter("SemanticObject",sap.ui.model.FilterOperator.EQ,semanticObject)]);
//		}

		function apfConfigurationCallBack(data) {
			if((semanticObject !== that.APF_SEMANTIC_OBECT) || (action !== that.APF_ACTION)) {
				data.unshift({AnalyticalConfigurationName:"", AnalyticalConfiguration:"", Application:""});
			}
			that.jsonApfConfigIdModel.setData({AnalyticalConfigForSemObjQueryResults:data});
			apfConfigIdValueHelpDialog.setModel(that.jsonApfConfigIdModel);
		}

		function apfConfigurationErrCallBack(d,s,x) {
			var data = [];

			data.unshift({AnalyticalConfigurationName:"", AnalyticalConfiguration:"", Application:""});
			that.jsonApfConfigIdModel.setData({AnalyticalConfigForSemObjQueryResults:data});
			apfConfigIdValueHelpDialog.setModel(that.jsonApfConfigIdModel);
		}

		that.metadataRef.getDataByEntity({entity:"AnalyticalConfigForSemObjQueryResults", filter:semanticObject ? "SemanticObject eq '" + semanticObject +"'" : undefined, success:apfConfigurationCallBack, error:apfConfigurationErrCallBack, model:that.oDataApfConfigIdModel});

	},

	handleCustomMeasure: function(evt) {
		var that = this;
		var currentInput = evt.getSource();
		this.customMeasuresDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("CHOOSE_ADDL_MEASURE"),
			noDataText : that.oApplicationFacade.getResourceBundle().getText("NO_DATA_FOUND"),
			items : {
				path : "tileConfig>/ADDITIONAL_MEASURES/Measures",
				template : new sap.m.StandardListItem({
					title : "{tileConfig>COLUMN_NAME}"
				})
			},
			confirm : function(oEvent) {
				var value = oEvent.getParameter("selectedItem").getProperty("title");
				currentInput.setValue(value);
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(COLUMN_NAME)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
			}
		});
		this.customMeasuresDialog.open();
		this.customMeasuresDialog.setModel(this.modelRef, "tileConfig");
	},

	addAdditionalLanguageDialog : function(){
		var that=this;
		var modelData = this.getView().getModel("tileConfig").getData();

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});
		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		}).setModel(that.getView().getModel("tileConfig"),"tileConfig");

		this.addedLanguagesList.bindItems("tileConfig>/ADDITIONAL_LANGUAGE_ARRAY", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{tileConfig>title}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{tileConfig>description}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{tileConfig>isoLanguage}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var path = oEvent.getSource().getBindingContext("tileConfig").getPath();
				        		  var deletedIndex = Number(path.substr(path.lastIndexOf("/") + 1));
				        		  var newData = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("tileConfig").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
				        		  that.addedLanguagesList.getModel("tileConfig").updateBindings();
				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })
				          ]
			})
		}));

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("TITLE"),
			            	        	            	 textAlign : "Right",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageTextInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("SUB_TITLE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageDescriptionInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oApplicationFacade.getResourceBundle().getText("LANGUAGE")+":",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,

			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){

			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY[i].isoLanguage === that.languageKeySelect.getSelectedItem().getText()){
			            	        	            					 sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "title" : that.languageTextInput.getValue(),
			            	        	            					 "description" : that.languageDescriptionInput.getValue(),
			            	        	            					 "isoLanguage" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "language" : that.languageKeySelect.getSelectedKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").getData().NO_OF_ADDITIONAL_LANGUAGES = that.addedLanguagesList.getModel("tileConfig").getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            	        	            			 that.addedLanguagesList.getModel("tileConfig").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })
			            	        	             ]
			            	          })
			            	          ]
			            }).addStyleClass("languageGrid"),

			            that.addedLanguagesList
			            ],

			            beginButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
			            	press : function(){
			            		// revert to initial model
			            		var dataRef = that.modelRef.getData();
			            		dataRef.ADDITIONAL_LANGUAGE_ARRAY = onLoadData.ADDITIONAL_LANGUAGE_ARRAY;
			            		dataRef.NO_OF_ADDITIONAL_LANGUAGES = onLoadData.NO_OF_ADDITIONAL_LANGUAGES;
			            		that.modelRef.setData(dataRef);
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		var data = modelData.SAP_LANGUAGE_ARRAY;

		for(var i=0;i<data.length;i++){
			if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
				data.splice(i,1);
			}
		}
		that.languageKeySelect.setModel(this.getView().getModel("tileConfig"), "tileConfig");
		that.languageKeySelect.bindItems("tileConfig>/SAP_LANGUAGE_ARRAY", new sap.ui.core.Item({
			text: "{tileConfig>LAISO}",
			key: "{tileConfig>SPRAS}"
		}));

		additionalLanguageDialog.open();
		var onLoadData = jQuery.extend(true, {}, this.modelRef.getData(), {});
	},

	hasUIChanged: function() {
		var that = this;
		var obj = {};
		var oldPayload = that.initialData;
		var newPayload = jQuery.extend(true, {}, that.modelRef.getData(), {});

		if(JSON.stringify(oldPayload) == JSON.stringify(newPayload)) {
			return false;
		}
		
		var appParameters = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : oldPayload.CHIP.APP_PARAMETERS,
			newPayload : newPayload.CHIP.APP_PARAMETERS,
			objectType : "APP_PARAMETERS"
		});

		obj.oldPayload = oldPayload.CHIP;
		delete obj.oldPayload.APP_PARAMETERS;
		delete obj.oldPayload.MULTI_MEASURE; 
		delete obj.oldPayload.appParameters;
		delete obj.oldPayload.configurationObj;
		delete obj.oldPayload.HARVEY_DIMENSION;
		delete obj.oldPayload.harveyFilters;
		obj.newPayload = newPayload.CHIP;
		delete obj.newPayload.APP_PARAMETERS;
		delete obj.newPayload.MULTI_MEASURE; 
		delete obj.newPayload.appParameters;
		delete obj.newPayload.configurationObj;
		delete obj.newPayload.HARVEY_DIMENSION;
		delete obj.newPayload.harveyFilters;		
		obj.objectType = "Chips";
		obj = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(obj);
		that.chipTextPayload = [];
		if(newPayload.NO_OF_ADDITIONAL_LANGUAGES) {
			for(var i=0;i<newPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
				var chipTextObject = {};
				chipTextObject.title = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].title;
				chipTextObject.description = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].description;
				chipTextObject.language = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].language;
				that.chipTextPayload.push(chipTextObject);
			}
		}
		that.languagePayloadForDirtyBitTest = []; 
		for(var i=0;i<oldPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
			var textObject = {};
			textObject.language = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].language;
			textObject.description = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].description;
			textObject.title= oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].title;
			that.languagePayloadForDirtyBitTest.push(textObject);
		}
		var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : that.languagePayloadForDirtyBitTest,
			newPayload : that.chipTextPayload,
			objectType : "CHIP_TEXTS"
		});

		if((obj && obj.updates && obj.updates.length) || (languageDeltaObject && languageDeltaObject.deletes && languageDeltaObject.deletes.length) || (languageDeltaObject && languageDeltaObject.updates && languageDeltaObject.updates.length) || (appParameters && appParameters.deletes && appParameters.deletes.length) || (appParameters && appParameters.updates && appParameters.updates.length)) {
			return true;
		}
		else {
			return false;
		}

	},

	handleBackAndCancel: function() {
		var that = this;
		this.errorMessages=[];
		this.errorState=false;

//		var obj = {};
//var oldPayload = that.initialData;
//var newPayload = that.modelRef.getData();

//var appParameters = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
//		oldPayload : oldPayload.CHIP.APP_PARAMETERS,
//		newPayload : newPayload.CHIP.APP_PARAMETERS,
//		objectType : "APP_PARAMETERS"
//		});

//		obj.oldPayload = oldPayload.CHIP;
//		delete obj.oldPayload.APP_PARAMETERS;
//		delete obj.oldPayload.MULTI_MEASURE; 
//		delete obj.oldPayload.appParameters;
//		delete obj.oldPayload.configurationObj;
//		obj.newPayload = newPayload.CHIP;
//		delete obj.newPayload.APP_PARAMETERS;
//		delete obj.newPayload.MULTI_MEASURE; 
//		delete obj.newPayload.appParameters;
//		delete obj.newPayload.configurationObj;
//		obj.objectType = "Chips";
//		obj = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(obj);
//		that.chipTextPayload = [];
//		if(newPayload.NO_OF_ADDITIONAL_LANGUAGES) {
//		for(var i=0;i<newPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
//		var chipTextObject = {};
//		chipTextObject.title = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].title;
//		chipTextObject.description = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].description;
//		chipTextObject.language = newPayload.ADDITIONAL_LANGUAGE_ARRAY[i].language;
//		that.chipTextPayload.push(chipTextObject);
//		}
//		}
//		that.languagePayloadForDirtyBitTest = []; 
//		for(var i=0;i<oldPayload.NO_OF_ADDITIONAL_LANGUAGES.length;i++){
//		var textObject = {};
//		textObject.language = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].language;
//		textObject.description = oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].description;
//		textObject.title= oldPayload.NO_OF_ADDITIONAL_LANGUAGES[i].title;
//		that.languagePayloadForDirtyBitTest.push(textObject);
//		}
//		var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
//		oldPayload : that.languagePayloadForDirtyBitTest,
//		newPayload : that.chipTextPayload,
//		objectType : "CHIP_TEXTS"
//		});

		if(this.hasUIChanged()) {
			var backDialog = new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
				state:"Error",
				type:"Message",
				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("ON_BACK_WARNING")})],
				beginButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
					press: function(){
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
					}
				}),
				endButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					press:function(){backDialog.close();}
				})                                              
			});
			backDialog.open();
		}
		else {
			sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
		}
	},

	handleNavToDrillDown: function() {
		var that = this;
		this.errorMessages=[];
		this.errorState=false;
		var path = that.context.getPath();
		function navToDrillDown() {
			if(that.modelRef.getData().CHIP.navType == "2") {
				var chipData = that.modelRef.getData().CHIP;
				//sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "editAPFConfiguration?sap-apf-configuration-id=" + that.modelRef.getData().CHIP.apfConfId});
				if(chipData.apfAppId && chipData.apfConfId) {
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "editAPFConfiguration", route: "app", context: chipData.apfAppId + "/config/" + chipData.apfConfId});
				}
				else {
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "editAPFConfiguration"});
				}
			}
			else {
				/*sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "configureSBKPIDrilldown", route: "detail", context: (path)});*/
				/* Go first to the Tile app homepage, then goto Drilldown modeller */
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action: "configureSBKPITile", route: "detail", context: (path)});
				setTimeout(function(){
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "configureSBKPIDrilldown", route: "detail", context: (path)});
				},0);
			}
		}
		this.saveTile(navToDrillDown);
	},

	fetchChipData: function(obj) {
		var that = this;
		var finalChipObj = {};
		if(this.createMode) {
			var evaluationObj = {};
			if(obj.evalContextPath) {
				var evalContext = new sap.ui.model.Context(this.oApplicationFacade.getODataModel(), '/' + obj.evalContextPath);
				evaluationObj = this.metadataRef.getEvaluationById({context:evalContext, texts_for_chip:true, entity:"EVALUATIONS_MODELER", model:that.oApplicationFacade.getODataModel()});
				finalChipObj = this.formModelByEvaluation(evaluationObj);
			}
		}
		else if(this.editMode) {
			var chipObj = {};
			if(obj.chipContextPath) {
				var chipContext = new sap.ui.model.Context(this.oApplicationFacade.getODataModel(), '/' + obj.chipContextPath);
				chipObj = this.metadataRef.getChipById({context:chipContext, evaluation:true, texts:true, model:that.oApplicationFacade.getODataModel()});
				finalChipObj = this.formModelByChip(chipObj);
			}
		}
		else {
			finalChipObj = {CHIP:{}};
		}
		this.currentContextState = finalChipObj.CHIP.isActive;
		this.currentChipId = finalChipObj.CHIP.id;
		this.fetchOtherInfoAsync(finalChipObj);
		return finalChipObj;
	},

	formModelByEvaluation: function(evaluation) {
		var that = this;
		var obj = evaluation.EVALUATION;
		var chipObj = {CHIP:{}};
		if(evaluation.TEXTS_FOR_CHIP && evaluation.TEXTS_FOR_CHIP.length) {
			evaluation.TEXTS = evaluation.TEXTS_FOR_CHIP;
		}
		chipObj.CHIP.id = "";
		chipObj.CHIP.isActive = 0;
		chipObj.CHIP.evaluationId = obj.ID;
		chipObj.CHIP.tileType = "NT";
		chipObj.CHIP.dualTileType = "CT";
		chipObj.CHIP.title = obj.INDICATOR_TITLE || "";
		chipObj.CHIP.description = obj.TITLE || "";
		chipObj.CHIP.url = chipObj.url || this.getChipUrl(chipObj.tileType);
		chipObj.CHIP.keywords = "";
		chipObj.CHIP.configuration = "";
		chipObj.CHIP.storyId = "";
		chipObj.CHIP.navType = (!(obj.ACTION) || (obj.ACTION == this.sbAction)) ? "0" : "4";
		if(chipObj.CHIP.navType == "0") {
			chipObj.CHIP.semanticObject = obj.SEMANTIC_OBJECT || obj.COLUMN_NAME || "";
			chipObj.CHIP.semanticAction = obj.ACTION || this.sbAction;
		}
		else {
			chipObj.CHIP.semanticObject = this.lumiraSemanticObject;
			chipObj.CHIP.semanticAction = this.lumiraAction;
		}
		this.onLoadSemanticObject = obj.SEMANTIC_OBJECT || obj.COLUMN_NAME || "";
		this.onLoadSemanticAction = obj.ACTION || this.sbAction;
		chipObj.CHIP.appParameters = [];
		chipObj.CHIP.dimension = "";
		chipObj.CHIP.sortOrder = "0";
		chipObj.CHIP.semanticColorContribution = "Neutral";
		chipObj.CHIP.frameType = 'OneByOne';
		chipObj.CHIP.totalValueMeasure='';
		chipObj.CHIP.isKPIMeasureFractionMeasureHarvey = true;
		chipObj.CHIP.isKPIMeasureTotalMeasureHarvey = false;
		chipObj.CHIP.HARVEY_DIMENSION=[];
		chipObj.CHIP.harveyFilters=[{
			NAME:"",
			LABEL:"",
			OPERATOR:"EQ",
			VALUE_1:[],
			VALUE_2:[]
		}];
		chipObj.CHIP.MULTI_MEASURE = [{COLUMN_NAME: obj.COLUMN_NAME, semanticColor: "Error"}, {COLUMN_NAME: "", semanticColor: "Critical"}, {COLUMN_NAME: "", semanticColor: "Good"}];
		chipObj.TEXTS = [];
		var oChipObj = {};
		for(var i=0,l=evaluation.TEXTS.length; i<l; i++) {
			oChipObj = {};
			oChipObj.id = "";
			oChipObj.title = evaluation.TEXTS[i].TITLE;
			oChipObj.description = evaluation.TEXTS[i].DESCRIPTION;
			oChipObj.language = evaluation.TEXTS[i].LANGUAGE;
			chipObj.TEXTS.push(oChipObj);
		}
		//chipObj.TEXTS = evaluation.TEXTS;
		chipObj.EVALUATION = obj;
		return chipObj;
	},

	formModelByChip: function(chip) {
		var that = this;
		var obj = chip.CHIP;
		var chipObj = {CHIP:{}};
		var tmp;//
		if(chip.EVALUATION_INFO) {
			chipObj.EVALUATION = chip.EVALUATION_INFO;
		}
		chipObj.TEXTS = chip.TEXTS;
		chipObj.CHIP.id = obj.id || "";
		chipObj.CHIP.isActive = obj.isActive;
		chipObj.CHIP.evaluationId = obj.evaluationId || "";
		chipObj.CHIP.tileType = obj.tileType || "NT";
		if (obj.tileType == "DT-CT"){
			chipObj.CHIP.dualTileType = "CT";
			chipObj.CHIP.tileType = "DT";
		}
		else if (obj.tileType == "DT-CM"){
			chipObj.CHIP.dualTileType = "CM";
			chipObj.CHIP.tileType = "DT";
		}
		else if (obj.tileType == "DT-AT") {
			chipObj.CHIP.dualTileType = "AT";
			chipObj.CHIP.tileType = "DT";
		}
		else if (obj.tileType == "DT-TT") {
			chipObj.CHIP.dualTileType = "TT";
			chipObj.CHIP.tileType = "DT";
		}
		chipObj.CHIP.title = obj.title || "";
		chipObj.CHIP.description = obj.description || "";
		chipObj.CHIP.url = obj.url || this.getChipUrl(chipObj.tileType);
		chipObj.CHIP.keywords = obj.keywords || "";
		chipObj.CHIP.configuration = obj.configuration || "";

		//parsing chip configuration
		var tileConfiguration = null;
		var tileProperties = null;
		var additionalAppParameters = null;
		var evaluation = null;
		try {
			chipObj.CHIP.configurationObj = JSON.parse(chipObj.CHIP.configuration);
			if(chipObj.CHIP.configurationObj && chipObj.CHIP.configurationObj.tileConfiguration) {
				tileConfiguration = JSON.parse(chipObj.CHIP.configurationObj.tileConfiguration);
				if(tileConfiguration && tileConfiguration.TILE_PROPERTIES) {
					tileProperties = JSON.parse(tileConfiguration.TILE_PROPERTIES);
					if(tileProperties) {
						chipObj.CHIP.navType = tileProperties.navType || "0";
						chipObj.CHIP.frameType = tileProperties.frameType || 'OneByOne';
						chipObj.CHIP.semanticObject = tileProperties.semanticObject || "";
						chipObj.CHIP.semanticAction = tileProperties.semanticAction || "";
						this.onLoadSemanticObject = chipObj.CHIP.semanticObject || "";
						this.onLoadSemanticAction = chipObj.CHIP.semanticAction || "";
						chipObj.CHIP.storyId = tileProperties.storyId || "";
						chipObj.CHIP.apfConfId = tileProperties.apfConfId || "";
						chipObj.CHIP.apfConfName = (tileProperties.apfConfId) ? ('-NA-' + tileProperties.apfConfId) : "";
						chipObj.CHIP.dimension = tileProperties.dimension || "";

						chipObj.CHIP.HARVEY_DIMENSION=chipObj.CHIP.HARVEY_DIMENSION||[];
						// adapter to convert to backend data to chip data format
						chipObj.CHIP.harveyFilters=[{
							NAME:"",
							LABEL:"",
							OPERATOR:"EQ",
							VALUE_1:[],
							VALUE_2:[]
						}];
						if(tileProperties.harveyFilters && tileProperties.harveyFilters.length){
							tmp={};// tmp will not refered again after this block;
							chipObj.CHIP.harveyFilters=[];                                                                                                  
							tileProperties.harveyFilters.forEach(function(curFilter){
								if(!tmp[curFilter.NAME]){
									tmp[curFilter.NAME]={
											NAME:curFilter.NAME,
											OPERATOR:curFilter.OPERATOR,
											VALUE_1:[curFilter.VALUE_1],
											VALUE_2:[],
											LABEL:curFilter.NAME
									}
									chipObj.CHIP.harveyFilters.push(tmp[curFilter.NAME]);
								}else{
									tmp[curFilter.NAME].VALUE_1.push(curFilter.VALUE_1);
								}
							});
							if(chipObj.CHIP.HARVEY_DIMENSION.length==0){
								chipObj.CHIP.HARVEY_DIMENSION.push({
									name:tileProperties.harveyFilters[0].NAME,
									label:tileProperties.harveyFilters[0].NAME
								});
							}
						}
						chipObj.CHIP.totalValueMeasure=tileProperties.harveyTotalMeasure;
						chipObj.CHIP.isKPIMeasureFractionMeasureHarvey = tileProperties.isFractionMeasure;
						chipObj.CHIP.isKPIMeasureTotalMeasureHarvey = !tileProperties.isFractionMeasure;
						chipObj.CHIP.sortOrder = tileProperties.sortOrder || "";
						chipObj.CHIP.semanticColorContribution = tileProperties.semanticColorContribution || "Neutral";
					}
					additionalAppParameters = JSON.parse(tileConfiguration.ADDITIONAL_APP_PARAMETERS);
					chipObj.CHIP.appParameters = additionalAppParameters || [];
					evaluation = JSON.parse(tileConfiguration.EVALUATION);
					if(evaluation) {
						chipObj.CHIP.MULTI_MEASURE = tileProperties.COLUMN_NAMES || evaluation.COLUMN_NAMES || [{COLUMN_NAME: chipObj.EVALUATION.COLUMN_NAME, semanticColor: "Error"}, {COLUMN_NAME: "", semanticColor: "Critical"}, {COLUMN_NAME: "", semanticColor: "Good"}];
					}
				}
			}
		}
		catch(e) {
			// defaulting values
			jQuery.sap.log.error = "Failed to parse chip";
			chip.EVALUATION = chip.EVALUATION_INFO;
			delete chip.EVALUATION_INFO;
			chipObj = that.formModelByEvaluation(chip);
			chipObj.CHIP.id = obj.id;
			chipObj.CHIP.isActive = obj.isActive;
			this.errorConfigParse = true;
		}
		return chipObj;
	},

	fetchOtherInfoAsync: function(obj) {
		var that = this;

		// Set Footer Buttons
		this.updateFooterButtons(obj);

		// Fetch All Sap Languages - Adapter Implementation
		var langSuccessHandler = function(lang, arr, localeLanguage) {
			obj.SAP_LANGUAGES = lang;
			obj.SAP_LANGUAGE_ARRAY = arr;
			obj.localLanguage = localeLanguage;
		};
		this.metadataRef.getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});

//		this.oApplicationFacade.getODataModel().read("/LANGUAGE?$select=LAISO,SPRAS", null, null, false, function(data) {
//		data = data.results;
//		if(data.length) {
//		if(data.length == 1) {
//		obj.SAP_LANGUAGES = {LAISO:{},SPRAS:{}};
//		obj.SAP_LANGUAGES.LAISO[data[0]["LAISO"]] = data[0]["SPRAS"]; that.languagesObject.SPRAS[data[0]["SPRAS"]] = data[0]["LAISO"];
//		}
//		else {
//		obj.SAP_LANGUAGES = data.reduce(function(p,c,i,a) { that.languagesObject = that.languagesObject || {}; that.languagesObject.LAISO = that.languagesObject.LAISO || {}; that.languagesObject.SPRAS = that.languagesObject.SPRAS || {}; if(i == 1){ that.languagesObject.LAISO[a[0]["LAISO"]] = a[0]["SPRAS"]; that.languagesObject.SPRAS[a[0]["SPRAS"]] = a[0]["LAISO"]; }  that.languagesObject.LAISO[a[i]["LAISO"]] = a[i]["SPRAS"]; that.languagesObject.SPRAS[a[i]["SPRAS"]] = a[i]["LAISO"]; return that.languagesObject;});
//		}
//		obj.SAP_LANGUAGE_ARRAY = data;
//		obj.localLanguage = obj.SAP_LANGUAGES.LAISO[sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase()];
//		}
//		});

		// Pick Additional Language Texts
		var languageData = obj.TEXTS;
		var additionalLanguageData = [];
		var i;
		for(i=0;i<languageData.length;i++){
			if(languageData[i].language != obj.localLanguage){
				additionalLanguageData.push(languageData[i]);
			}
		}
		var languageArray = [];
		var i;
		for(i=0;i<additionalLanguageData.length;i++){
			var languageObject = {};
			languageObject.title = additionalLanguageData[i].title;
			languageObject.description = additionalLanguageData[i].description;
			languageObject.language = additionalLanguageData[i].language;
			languageObject.isoLanguage = obj.SAP_LANGUAGES.SPRAS[languageObject.language]
			languageObject.isActive = obj.isActive;
			languageArray.push(languageObject);
		}
		obj.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
		obj.NO_OF_ADDITIONAL_LANGUAGES = obj.ADDITIONAL_LANGUAGE_ARRAY.length || 0;
		that.byId('additionalLanguageLink').bindProperty("text","tileConfig>/NO_OF_ADDITIONAL_LANGUAGES",function(sValue){
			return that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
		});

		// Pick Control Visibility
		obj.CONTROL = this.getControlObject(obj);

		// Fetch All Dimensions For Contribution Tile, Trend Tile
		try {
			this.oModelForEntity = this.populateDimension(obj.EVALUATION.ODATA_URL, obj.EVALUATION.ODATA_ENTITYSET);
			obj.CHIP.dimension = obj.CHIP.dimension || this.oModelForEntity.getData().dimensions[0].dimensionName; 
		} catch (err) {

		} finally {
			if (this.oModelForEntity.getData().dimensions.length) {
				obj.DIMENSIONS = this.oModelForEntity.getData();
			} else {
				obj.DIMENSIONS = [];
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("UNABLE_TO_FETCH_NAVIG")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
		}

		// Pick App Parameters
		var parametersArr = [];
		var appParameters = obj.CHIP.appParameters;
		if(appParameters && Object.keys(appParameters).length) {
			for(var key in appParameters) {
				if(appParameters.hasOwnProperty(key)) {
					parametersArr.push({NAME:key, VALUE:appParameters[key]});
				}
			}
		}
		obj.CHIP.APP_PARAMETERS = parametersArr;

		// Fetch Evaluations Filters, Values Async
		var successHandler = function(bean) {
			var container = {};
			obj.TAGS = {};
			if(bean.TAGS) {
				for(var i=0,l=bean.TAGS.length;i<l;i++) {
					obj.TAGS[bean.TAGS[i].TAG] = bean.TAGS[i].TYPE;
				}
			}
			if(bean.INDICATOR_TAGS) {
				for(var i=0,l=bean.INDICATOR_TAGS.length;i<l;i++) {
					obj.TAGS[bean.INDICATOR_TAGS[i].TAG] = "IN";
				}
			}
			obj.FILTERS = [];
			if(bean.FILTERS) {
				for(var i=0,l=bean.FILTERS.length;i<l;i++) {
					container = {};
					container.TYPE = bean.FILTERS[i].TYPE;
					container.NAME = bean.FILTERS[i].NAME;
					container.VALUE_1 = bean.FILTERS[i].VALUE_1;
					container.VALUE_2 = bean.FILTERS[i].VALUE_2;
					container.OPERATOR = bean.FILTERS[i].OPERATOR;
					obj.FILTERS.push(container);
				}
			}
			obj.VALUES = [];
			var measureObj = {Measures:[]};
			measureObj.Measures.push({COLUMN_NAME:"", COLUMN_TEXT:""});
			if(obj.EVALUATION && obj.EVALUATION.COLUMN_NAME) {
				measureObj.Measures.push({COLUMN_NAME:obj.EVALUATION.COLUMN_NAME, COLUMN_TEXT:obj.EVALUATION.COLUMN_NAME});
			}
			if(bean.VALUES) {
				for(var i=0,l=bean.VALUES.length; i<l; i++) {
					container = {};
					// Pick Additional Filters for Comparison Tile Multiple Measures
					if(/^\d{2}/.test(bean.VALUES[i].TYPE.toString())) {
						measureObj.Measures.push({COLUMN_NAME: bean.VALUES[i].COLUMN_NAME, COLUMN_TEXT: bean.VALUES[i].COLUMN_NAME});
					}
					else {
						container.TYPE = bean.VALUES[i].TYPE;
						container.FIXED = bean.VALUES[i].FIXED;
						container.COLUMN_NAME = bean.VALUES[i].COLUMN_NAME;
						container.ODATA_PROPERTY = bean.VALUES[i].ODATA_PROPERTY;
						obj.VALUES.push(container);
					}
				}
			}
			if(measureObj.Measures.length < 3) {
				that.inSufficientAdditionalMeasure = true;
			}
			var measureObjOpt = jQuery.extend(true,{},measureObj,{});
			if(measureObjOpt && measureObjOpt.Measures && measureObjOpt.Measures.length) {
				measureObjOpt.Measures[0].COLUMN_TEXT = "("+ that.oApplicationFacade.getResourceBundle().getText("NONE") +")";
			}
			obj.ADDITIONAL_MEASURES = measureObj;
			obj.ADDITIONAL_MEASURES_OPT = measureObjOpt;
			if(bean.TEXTS) {
				obj.TEXTS = bean.TEXTS;
			}
			that.getView().getModel("tileConfig").setData(obj);
			that.setTooltipForAllSelect();

			if(obj.CHIP.apfConfId) {
				var apfModel = new sap.ui.model.odata.ODataModel("/sap/hba/r/apf/core/odata/modeler/AnalyticalConfiguration.xsodata", true);
				function apfConfigNameCallBack(d) {
					if(d.length && d[0]) {
						that.modelRef.getData().CHIP.apfConfName = d[0].AnalyticalConfigurationName;
						that.modelRef.getData().CHIP.apfAppId = d[0].Application;
						that.getView().getModel("tileConfig").setData(that.modelRef.getData());
						that.initialData = jQuery.extend(true,{},that.modelRef.getData(),{});
					}
				}
				function apfConfigNameErrCallBack(d,s,x) {
				}
				that.metadataRef.getDataByEntity({entity:"AnalyticalConfigForSemObjQueryResults", async:true, filter:("AnalyticalConfiguration eq '" + obj.CHIP.apfConfId + "'"), success:apfConfigNameCallBack, error:apfConfigNameErrCallBack, model:apfModel});
			}

			that.getView().byId(obj.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));
			if(that.errorConfigParse) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_PARSE_CHIP_INFO"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_PARSE_CHIP_INFO")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
			that.errorConfigParse = false;
			that.initialData = jQuery.extend(true,{},obj,{});
			if(obj.CHIP.tileType && obj.CHIP.tileType == "DT") {
				var selectedTile=that.getView().byId("selectTileType").getSelectedKey();
				that.getView().byId("selectVizRight").fireChange(selectedTile);
			}
		};
		that.metadataRef.getEvaluationById({ID:obj.CHIP.evaluationId, IS_ACTIVE:1, async:true, success:successHandler, noEvaluation:true, tags:true, indicator_tags:true, values:true, filters:true, entity:"EVALUATIONS", model:that.oApplicationFacade.getODataModel()});
		this.initializeDimensionsForHarveyFilters(obj);// fetches all dimen
		return obj;
	},

	setTooltipForAllSelect: function() {
		this.byId("selectTileType").setTooltip(this.byId("selectTileType").getSelectedItem().getText());
		this.byId("selectNavType").setTooltip(this.byId("selectNavType").getSelectedItem().getText());
		this.byId("selectSortOrder").setTooltip(this.byId("selectSortOrder").getSelectedItem().getText());
		this.byId("selectDimension").setTooltip(this.byId("selectDimension").getSelectedItem().getText());
		this.byId("semanticColorContribution").setTooltip(this.byId("semanticColorContribution").getSelectedItem().getText());
		this.byId("selectVizRight").setTooltip(this.byId("selectVizRight").getSelectedItem().getText());
		this.byId("measure1").setTooltip(this.byId("measure1").getSelectedItem().getText());
		this.byId("measureColor1").setTooltip(this.byId("measureColor1").getSelectedItem().getText());
		this.byId("measure2").setTooltip(this.byId("measure2").getSelectedItem().getText());
		this.byId("measureColor2").setTooltip(this.byId("measureColor2").getSelectedItem().getText());
		this.byId("measure3").setTooltip(this.byId("measure3").getSelectedItem().getText());
		this.byId("measureColor3").setTooltip(this.byId("measureColor3").getSelectedItem().getText());
	},
	
	saveTile: function(callback) {
		var that = this;
		that.errorMessages = [];
		that.errorState = false;
		//usability improvement - Save appParams without explicit click on "+"
		that.isPropertyAdded = true;
		if(that.getView().byId("appPropertyName").getValue() || that.getView().byId("appPropertyValue").getValue()){
			that.addNewProperty();
		}
		if(!that.isPropertyAdded){
			return;
		}

		var configuration = that.formChipConfiguration();

		function publishChipCallBack(data) {
			try {
				that.currentChipId = JSON.parse(data).response[0].id;
			}
			catch(e) {
				that.currentChipId = that.currentChipId || null; 
			}
			finally {
				that.oApplicationFacade.__tileModified = true;
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("TILE_SAVED_SUCCESSFULLY"));
				if(callback) {
					callback();
				}
				else {
					that.refreshMasterList();
					//that.oApplicationFacade.getODataModel().refresh();
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context: that.context.sPath.substr(1)});
				}
			}
		}
		function publishChipErrCallBack(err) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"), err.responseText);
			that.errorMessages.push({
				"type":"Error",
				"title":that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_TILE"),
				"description" : err.responseText
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
		}

		mode = that.createMode ? "create" : (that.editMode ? "edit" : "edit");
		that.mode = mode;
		that.metadataRef.publishChip(configuration, mode, that, publishChipCallBack, publishChipErrCallBack);
		that.setFooterOnError();
	},


	checkForValidChipForActivation: function() {
		var that = this;
		var dataRef = that.modelRef.getData();
		var data = dataRef.CHIP;
		var errorLog = "";
		var configuration = null;

		if(((!(data.semanticObject) || (data.semanticObject.length == (data.semanticObject.split(" ").length - 1))) && (Number(data.navType) != 0))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT") + "\n";
			that.byId("semanticObjectText").setValueState("Error");
			that.byId("semanticObjectText").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_OBJECT"));
		}
		if(data.semanticObject.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT") + "\n";
			that.byId("semanticObjectText").setValueState("Error");
			that.byId("semanticObjectText").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_OBJECT"));
		}
		if(((!(data.semanticAction) || (data.semanticAction.length == (data.semanticAction.split(" ").length - 1))) && (Number(data.navType) != 0))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION") + "\n";
			that.byId("selectODD").setValueState("Error");
			that.byId("selectODD").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_SEMANTIC_ACTION"));
		}
		if(data.semanticAction.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION") + "\n";
			that.byId("selectODD").setValueState("Error");
			that.byId("selectODD").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_SEMANTIC_ACTION"));
		}
		if(((!(data.storyId) || (data.storyId.length == (data.storyId.split(" ").length - 1))) && (Number(data.navType) == 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID") + "\n";
			that.byId("selectStoryId").setValueState("Error");
			that.byId("selectStoryId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_STORY_ID"));
		}
		if(data.storyId.indexOf(" ") > -1) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID") + "\n";
			that.byId("selectStoryId").setValueState("Error");
			that.byId("selectStoryId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("INVALID_STORY_ID"));
		}
		if(((!(data.apfConfId) || (data.apfConfId.length == (data.apfConfId.split(" ").length - 1))) && (Number(data.navType) == 2))) {
			if((data.semanticObject === that.APF_SEMANTIC_OBECT) && (data.semanticAction === that.APF_ACTION)) {
				errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_CONFIG_ID") + "\n";
				that.byId("apfConfId").setValueState("Error");
				that.byId("apfConfId").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_CONFIG_ID"));
			}
		}
		if(!(data.title) || (data.title.length == (data.title.split(" ").length - 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE") + "\n";
			that.byId("tileTitle").setValueState("Error");
			that.byId("tileTitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_TITLE"));
		}
		if(!(data.description) || (data.description.length == (data.description.split(" ").length - 1))) {
			errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION");
			that.byId("tileSubtitle").setValueState("Error");
			that.byId("tileSubtitle").setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_DESCRIPTION"));
		}
		if((data.tileType == "CM" || data.dualTileType == "CM") && !(errorLog)) {
			configuration = that.formChipConfiguration();
			var evaluation = JSON.parse(JSON.parse(JSON.parse(configuration.configuration).tileConfiguration).EVALUATION);
			var tileProperties = JSON.parse(JSON.parse(JSON.parse(configuration.configuration).tileConfiguration).TILE_PROPERTIES);
			var evaluationMultiMeasureArray = tileProperties.COLUMN_NAMES || evaluation.COLUMN_NAMES;
			if(!(evaluationMultiMeasureArray) || !(evaluationMultiMeasureArray.length) || (evaluationMultiMeasureArray.length < 2)) {
				errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
			}
			else {
				for(var i=0,l=evaluationMultiMeasureArray.length; i<l; i++) {
					if(!(evaluationMultiMeasureArray[i].COLUMN_NAME) || !(evaluationMultiMeasureArray[i].semanticColor)) {
						errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_THREE_MEASURES");
						break;
					}
				}
				if(!errorLog) {
					if(evaluationMultiMeasureArray.length == 2) {
						if(evaluationMultiMeasureArray[0].COLUMN_NAME == evaluationMultiMeasureArray[1].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
						}
					}
					else if(evaluationMultiMeasureArray.length == 3) {
						if(evaluationMultiMeasureArray[0].COLUMN_NAME == evaluationMultiMeasureArray[1].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
						} 
						else if(evaluationMultiMeasureArray.COLUMN_NAME == evaluationMultiMeasureArray[2].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
						}
						else if(evaluationMultiMeasureArray[1].COLUMN_NAME == evaluationMultiMeasureArray[2].COLUMN_NAME) {
							errorLog += that.oApplicationFacade.getResourceBundle().getText("ERROR_DUPLICATE_MEASURE_THREE_MEASURES");
						}
					}
				}
			}
		}
		return errorLog;
	},

	selectVizRight : function(obj){
		var rightViz;
		var dataRef = this.modelRef.getData();
		dataRef.CONTROL = dataRef.CONTROL || {};
		if(obj.CHIP){
			dataRef = obj;
			var rightVizKey = obj.CHIP.dualTileType;
		}
		else{
			var rightVizKey = this.getView().byId("selectVizRight").getSelectedKey();
		}

		if(rightVizKey == "CT"){
			rightViz = sap.ui.core.Fragment.byId("tiles","compchart");
			dataRef.CONTROL.vDimension = true;
			dataRef.CONTROL.vMultiMeasure = false;
			dataRef.CONTROL.vSortOrder = true;
			dataRef.CONTROL.vSemanticColorContribution = true;
		}
		else if(rightVizKey == "CM"){
			rightViz = sap.ui.core.Fragment.byId("tiles","compchartmul");
			dataRef.CONTROL.vDimension = false;
			dataRef.CONTROL.vMultiMeasure = true;
			dataRef.CONTROL.vSortOrder = false;
			dataRef.CONTROL.vSemanticColorContribution = false;
		}
		else if(rightVizKey == "AT"){
			rightViz = sap.ui.core.Fragment.byId("tiles","bulletchart");
			dataRef.CONTROL.vDimension = false;
			dataRef.CONTROL.vMultiMeasure = false;
			dataRef.CONTROL.vSortOrder = false;
			dataRef.CONTROL.vSemanticColorContribution = false;
		}
		else if(rightVizKey == "TT"){
			rightViz = sap.ui.core.Fragment.byId("tiles","areachart");
			dataRef.CONTROL.vDimension = true;
			dataRef.CONTROL.vMultiMeasure = false;
			dataRef.CONTROL.vSortOrder = false;
			dataRef.CONTROL.vSemanticColorContribution = false;
		}
		this.getView().byId("DT").getTileContent()[1].setContent(rightViz);
		this.modelRef.setData(dataRef);
		this.getView().byId("selectVizRight").setTooltip(this.getView().byId("selectVizRight").getSelectedItem().getText());
		return dataRef;
	},

	getControlObject: function(obj) {
		var control = obj.CONTROL || {};

		this.getView().byId('NT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('TT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('AT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('CM').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId('DT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		//this.getView().byId('HT').$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiWhite"));
		this.getView().byId(obj.CHIP.tileType).$().css("border","solid 2px " + sap.ui.core.theming.Parameters.get("sapUiHighlight"));

		if(obj && obj.CHIP && obj.CHIP.tileType) {
			control.isHarvey=false;
			switch(obj.CHIP.tileType) {
			case 'NT': control.vDimension = false;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'AT': control.vDimension = false;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'CT': control.vDimension = true;
			control.vMultiMeasure = false;
			control.vSortOrder = true;
			control.vSemanticColorContribution = true;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'TT': control.vDimension = true;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'CM': control.vDimension = false;
			control.vMultiMeasure = true;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;
			case 'DT': control.vDimension = false;
			control.vDimension = true;
			control.vMultiMeasure = false;
			control.vSortOrder = true;
			control.vSemanticColorContribution = true;
			control.vVizLeft = true;
			control.vVizRight = true;
			obj.CONTROL = control;
			obj = this.selectVizRight(obj);
			control = obj.CONTROL;
			break;
			case 'HT' : control.isHarvey = true;
			control.vDimension=false;
			control.vMultiMeasure = false;
			control.vSortOrder = false;
			control.vSemanticColorContribution = false;
			control.vVizLeft = false;
			control.vVizRight = false;
			break;

			default : 	break;
			}
		}

		if(obj && obj.CHIP && obj.CHIP.navType) {
			switch(obj.CHIP.navType.toString()) {
			case '0': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = false;
			control.vStoryId = false;
			control.vSelectNavType = false;
			control.vAPFConfId = false;
			break;
			case '1': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = true;
			control.vSelectNavType = true;
			control.vAPFConfId = false;
			break;
			case '2': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			control.vAPFConfId = true;
			break;
			case '3': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			control.vAPFConfId = false;
			break;
			case '4': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			control.vAPFConfId = false;
			break;
			case '5': control.vSemanticObject = true;
			control.vAction = true;
			control.eAction = true;
			control.vStoryId = false;
			control.vSelectNavType = true;
			control.vAPFConfId = false;
			break;
			default: break; 
			}
		}
		return control;
	},

	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	},

	getInitialModelData: function() {
		var control = {};
		control.vStoryId = false;
		control.vAPFConfId = false;
		control.vDimension = false;
		control.vMultiMeasure = false;
		control.vSortOrder = false;
		control.vSemanticColorContribution = false;
		control.vVizLeft = false;
		control.vVizRight = false;
		return {CONTROL:control};
	},

});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.addEvaluation.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.addEvaluation.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.addEvaluation", {

	onInit : function() {
		var that = this;
		this.context = null;
		var saveStatus = false;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");

		var oOptions = {
				onBack : function(){
					that.navigateBack();
				},
				bSuppressBookmarkButton : {},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						if(!(that.validateEvalId())) {
							if(that.getView().getModel().getData().mode == "create"){
								saveStatus = that.saveEvaluation();
							}
							else{
								saveStatus = that.updateEvaluation();
							}
							if(saveStatus){
								that.refreshMasterList();
								that.navigateBack();
							}
							
						}
					}
				},
				buttonList : [
//				              {
//					sI18nBtnTxt : "SAVE_CREATE_NEW",
//					onBtnPressed : function(evt) {
//						if(!(that.validateEvalId())) {
//							saveStatus = that.saveEvaluation();
//							if(saveStatus){
//								sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile"});
//								that.refreshMasterList();
//							}
//						}
//					}	
//				}, 
				{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.navigateBack();
					}
				}]
		};
		this.setHeaderFooterOptions(oOptions);
		this.busyDialog = new sap.m.BusyDialog();
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle();
		this.evalCreateModel = new sap.ui.model.json.JSONModel({NO_OF_ADDITIONAL_LANGUAGES:0});
		this.getView().setModel(this.evalCreateModel);
		this.oDataServiceUrl = this.metadataRef.getDesigntimeServiceUrl();
		this.oDataModel = new sap.ui.model.odata.ODataModel(that.oDataServiceUrl,true)
		this.oModelForInputParameters = new sap.ui.model.json.JSONModel();
		this.oModelForDimensions = new sap.ui.model.json.JSONModel();

		this.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);

		this.setInputParameterAndFilterLayout();
		this.decideMode();
	},
	
	saveEvaluation : function(){
		var modelData = this.evalCreateModel.getData();
		var that=this;
		var saveStatus = false;
		var languagePayloadArray = [];
		var languagePayload = null;
		if(modelData.NO_OF_ADDITIONAL_LANGUAGES>0){
			var i;
			for (i = 0; i < modelData.NO_OF_ADDITIONAL_LANGUAGES; i++) {
				languagePayload = {};
				languagePayload.LANGUAGE = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
				languagePayload.TITLE = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
				languagePayload.DESCRIPTION = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
				languagePayloadArray.push(languagePayload);
			}
		}

		this.saveFilters(that.getView());

		var payload ={
				"keys" : {
					"ID" : modelData.ID,
					"IS_ACTIVE" : 1
				},
				"payload" : {
					"EVALUATION" : {
						"TITLE" : modelData.TITLE,
						"DESCRIPTION" : modelData.DESCRIPTION,
						"SCALING" : modelData.SCALING,
						"INDICATOR" : modelData.INDICATOR,
						"ODATA_URL" : modelData.ODATA_URL,
						"ODATA_ENTITYSET" : modelData.ODATA_ENTITYSET,
						"VIEW_NAME" : modelData.VIEW_NAME,
						"COLUMN_NAME" : modelData.COLUMN_NAME,
						"OWNER_NAME" : modelData.OWNER_NAME,
						"OWNER_E_MAIL" : modelData.OWNER_E_MAIL,
						"OWNER_ID" : modelData.OWNER_ID,
						"ODATA_PROPERTY" : modelData.ODATA_PROPERTY,
						"SEMANTIC_OBJECT" : modelData.SEMANTIC_OBJECT,
						"ACTION" : modelData.ACTION,
						"VALUES_SOURCE" : modelData.VALUES_SOURCE,
						"INDICATOR_TYPE" : modelData.INDICATOR_TYPE,
						"GOAL_TYPE" : modelData.GOAL_TYPE,
						"ENTITY_TYPE" : "EV"
					},
					"FILTERS": this.evalFiltersPayload,
					"TEXTS" : languagePayloadArray,
					"PROPERTIES" : [{
						"NAME" : "SAP:Copied_From",
						"VALUE" : that.byId('evalTemplateId').getValue(),
						"TYPE" : "EV"
					}],
					"VALUES" : modelData.VALUES
				}
		};

		this.metadataRef.create("EVALUATIONS",payload,null,function(data){
			sap.m.MessageToast.show(that.oResourceBundle.getText("EVALUATION_SAVED_SUCCESSFULLY"));
			saveStatus = true;
			
		},function(err){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_EVALUATION"));
			saveStatus = false;
		},false);
		return saveStatus;
	},

	updateEvaluation : function(){

		var modelData = this.evalCreateModel.getData();
		var that=this;
		var saveStatus = false;
		
		var languagePayloadArray = [];
		var languagePayload = null;
		if(modelData.NO_OF_ADDITIONAL_LANGUAGES>0){
			var i;
			for (i = 0; i < modelData.NO_OF_ADDITIONAL_LANGUAGES; i++) {
				languagePayload = {};
				languagePayload.LANGUAGE = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
				languagePayload.TITLE = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
				languagePayload.DESCRIPTION = modelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
				languagePayloadArray.push(languagePayload);
			}
		}
		
		this.saveFilters(that.getView());

		var payload ={
				"keys" : {
					"ID" : modelData.ID,
					"IS_ACTIVE" : 1,
				},
				"payload" : {
					"EVALUATION" : {
						"update" : {
							"TITLE" : modelData.TITLE,
							"DESCRIPTION" : modelData.DESCRIPTION,
							"SCALING" : modelData.SCALING,
							"INDICATOR" : modelData.INDICATOR,
							"ODATA_URL" : modelData.ODATA_URL,
							"ODATA_ENTITYSET" : modelData.ODATA_ENTITYSET,
							"VIEW_NAME" : modelData.VIEW_NAME,
							"COLUMN_NAME" : modelData.COLUMN_NAME,
							"OWNER_NAME" : modelData.OWNER_NAME,
							"OWNER_E_MAIL" : modelData.OWNER_E_MAIL,
							"OWNER_ID" : modelData.OWNER_ID,
							"ODATA_PROPERTY" : modelData.ODATA_PROPERTY,
							"SEMANTIC_OBJECT" : modelData.SEMANTIC_OBJECT,
							"ACTION" : modelData.ACTION,
							"VALUES_SOURCE" : modelData.VALUES_SOURCE,
						}
					},
					"FILTERS": {
						"remove" : that.OLD_FILTER_DATA,
						"create" : that.evalFiltersPayload
					},
					"TEXTS" : {
						"remove" : that.OLD_ADDITIONAL_LANGUAGE_ARRAY,
						"create" : languagePayloadArray,
					},
				}
		};

		this.metadataRef.update("EVALUATIONS",payload,null,function(data){
			sap.m.MessageToast.show(that.oResourceBundle.getText("EVALUATION_SAVED_SUCCESSFULLY"));
			saveStatus = true;
			
		},function(err){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_SAVING_EVALUATION"));
			saveStatus = false;
		},null,null,false);
		return saveStatus;
	},

	saveFilters : function(form) {
		this.evalFiltersPayload = [];
		this.getInputParamPayload(form);
		this.getFiltersPayload(form);
	},

	getInputParamPayload : function(form) {
		var evalInputParams = {}, j = 0;
		var formData = form.getModel().getData();
		if (form.getController().oModelForInputParameters) {
			evalInputParams = form.getController().oModelForInputParameters.getData();
			if (evalInputParams.inputParameters) {
				if (evalInputParams.inputParameters.length > 0) {
					var i = 0, filterValue = [], filterValue1;
					while (i < evalInputParams.inputParameters.length) {
						if (evalInputParams.inputParameters[i].operator === "BT") {
							if ((evalInputParams[i].value_1 !== "") || (evalInputParams[i].value_2 !== "")) {
								filterValue = evalInputParams.inputParameters[i].value_1.split(",");
								filterValue1 = evalInputParams.inputParameters[i].value_2.split(",");
								if ((filterValue1.length === 1) && (!filterValue.length === 1)) {

									evalInputParams.inputParameters[i].value_1 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
									? new Date(evalInputParams.inputParameters[i].value_1).toJSON() : evalInputParams.inputParameters[i].value_1;
									evalInputParams.inputParameters[i].value_2 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
									? new Date(evalInputParams.inputParameters[i].value_2).toJSON() : evalInputParams.inputParameters[i].value_2;
									this.evalFiltersPayload[j] = {};
									this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
											evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
											evalInputParams.inputParameters[i].value_1, evalInputParams.inputParameters[i].value_2);
									j++;
								}
							}
						} else {
							filterValue = evalInputParams.inputParameters[i].value_1.split(",");
							if (filterValue.length > 0) {
								for ( var k = 0; k < filterValue.length; k++) {
									if (filterValue[k] !== "") {

										filterValue[k] = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
										? new Date(filterValue[k]).toJSON() : filterValue[k];
										this.evalFiltersPayload[j] = {};
										this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
												evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
												filterValue[k]);
										j++;
									}
								}
							}
						}
						i++;
					}
				}
			}
		}
	},
	getFiltersPayload : function(form) {
		var formData = form.getModel().getData();
		var evalDimensionFilters = {}, j = this.evalFiltersPayload.length;
		if (form.getController().oModelForDimensions) {
			evalDimensionFilters = form.getController().oModelForDimensions.getData();
			if (evalDimensionFilters.selectedDimensions) {
				if (evalDimensionFilters.selectedDimensions.length > 0) {
					var i = 0, filterValue = [], filterValue1;
					while (i < evalDimensionFilters.selectedDimensions.length) 
					{
						if (evalDimensionFilters.selectedDimensions[i].operator === "BT") 
						{
							if ((evalDimensionFilters.selectedDimensions[i].value_1 !== "")
									&& (evalDimensionFilters.selectedDimensions[i].value_2 !== ""))
							{
								filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
								filterValue1 = evalDimensionFilters.selectedDimensions[i].value_2.split(",");
								if ((filterValue1.length === 1) || (!filterValue.length === 1))
								{
									evalDimensionFilters.selectedDimensions[i].value_1 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
									? new Date(evalDimensionFilters.selectedDimensions[i].value_1).toJSON() : evalDimensionFilters.selectedDimensions[i].value_1;
									evalDimensionFilters.selectedDimensions[i].value_2 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
									? new Date(evalDimensionFilters.selectedDimensions[i].value_2).toJSON() : evalDimensionFilters.selectedDimensions[i].value_2;
									this.evalFiltersPayload[j] = {};
									this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
											evalDimensionFilters.selectedDimensions[i].name,
											evalDimensionFilters.selectedDimensions[i].operator,
											evalDimensionFilters.selectedDimensions[i].value_1,
											evalDimensionFilters.selectedDimensions[i].value_2);

									j++;
								}
							}
						} else {
							filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
							if (filterValue.length > 0) 
							{
								for (var k = 0; k < filterValue.length; k++)
								{
									if (filterValue[k] != "")
									{      
										filterValue[k] = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
										? new Date(filterValue[k]).toJSON() : filterValue[k];
										this.evalFiltersPayload[j] = {};
										this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
												evalDimensionFilters.selectedDimensions[i].name,
												evalDimensionFilters.selectedDimensions[i].operator, 
												filterValue[k]);
										j++;
									}

								}
							}
						}
						i++;
					}
				}
			}
		}
	},

	navigateBack : function(){
		this.byId('evalTemplateIdLabel').setVisible(true);
		this.byId('evalTemplateId').setVisible(true);
		this.byId('evalTemplateId').setEditable(true);
		this.byId('evalTemplateId').setValue("");
		this.byId('evalId').setEditable(true);
		var eval_id = this.evalCreateModel.getData().ID || null; 
		this.getView().getModel().setData({NO_OF_ADDITIONAL_LANGUAGES:0});
		this.resetDimensionsAndInputParameters();
		if(eval_id) {
			sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"detail", context:"EVALUATIONS_MODELER(ID='" + eval_id +"',IS_ACTIVE=1)"});
		}
		else {
			sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile"});
		}
	},

	listAllActiveEvaluations : function() {
		var that = this;
		var evaluationsDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_EVALUATION"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/EVALUATIONS_MODELER",
				template : new sap.m.ObjectListItem({
					title : {parts:[{path:"TITLE"},{path:"INDICATOR_TITLE"}], formatter:jQuery.proxy(that.formatTitleInEvalDialog, that)},
					attributes : [new sap.m.ObjectAttribute({
						text : "{ID}"
					})]
				})
			},
			confirm : function(oEvent) {
				that.byId('evalTemplateId').setValue(oEvent.getParameter("selectedItem").getAttributes()[0].getText());
				that.byId('evalTemplateId').fireChange();
			},
			liveChange : function(oEvent) {
				var searchValue = oEvent.getParameter("value");
				var oFilterById = new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterByTitle = new sap.ui.model.Filter("TITLE", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterByIndTitle = new sap.ui.model.Filter("INDICATOR_TITLE", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterISActive = new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.StartsWith,".");
				var oBinding = oEvent.getSource().getBinding("items");
				var firstFilters = new sap.ui.model.Filter([oFilterById,oFilterByTitle,oFilterByIndTitle], false);
				var secondFilters = new sap.ui.model.Filter([oFilterISActive], true);
				oBinding.filter(new sap.ui.model.Filter([firstFilters,secondFilters], true));
			}
		});
		evaluationsDialog.setModel(that.oDataModel);
		var filters = [];
		filters.push(new sap.ui.model.Filter("ID", sap.ui.model.FilterOperator.StartsWith, "."));
		evaluationsDialog.getBinding("items").filter(new sap.ui.model.Filter(filters,true));
		evaluationsDialog.open();
	},
	
	formatTitleInEvalDialog: function(evalTitle, indTitle) {
		var that = this;
		return ((indTitle || that.oResourceBundle.getText("TITLE_UNAVAILABLE")) + " - " + (evalTitle || that.oResourceBundle.getText("TITLE_UNAVAILABLE")));
	},

	changeEvalTemplate : function(){
		this.resetDimensionsAndInputParameters();
		this.setInputParameterAndFilterLayout();
		this.populateEvalDetails();
	},
	decideMode : function(){
		var that = this;
		this.oRouter.attachRouteMatched(function(evt) {
			if(evt.getParameter("name") === "editEvaluation"){
				that.getView().getModel().setProperty("/mode","edit");
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var evalId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				that.populateEvalDetails(evalId);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("EDIT_EVALUATION"));
				that.byId("evalId").setEditable(false);
			}
			else if(evt.getParameter("name") === "addEvaluation"){
				that.getView().getModel().setProperty("/mode","create");
				that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
				that.populateEvalDetails(null);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("ADD_EVALUATION"));
				that.busyDialog.close();
			}
		},this);
	},

	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);     
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},

	formObjectForFilters : function(listOfFilters){
		var i = 0, j = 0, k = 0, temp = [], tempObj;
		for(i=0;i<listOfFilters.length;i++){
			if(listOfFilters[i].OPERATOR == "BT"){
				tempObj = {};
				tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2}
				temp[j++] = tempObj; 
			}
			else{
				for(k=0;k<temp.length;k++){
					if((temp[k].name == listOfFilters[i].NAME) && (temp[k].operator == listOfFilters[i].OPERATOR)){
						break;
					}
				}
				if(k == temp.length){
					tempObj = {};
					tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2}
					temp[j++] = tempObj;
				}
				else{
					temp[k].value_1+=","+listOfFilters[i].VALUE_1;
				}
			}
		}
		return temp;
	},

	populateEvalDetails : function(evalId){
		var that = this;
		var evalData = null;
		var evaluationContext = null;
		that.busyDialog.open();
		if(this.evalCreateModel.getData().mode == "create"){
			if(this.byId('evalTemplateId').getValue()){
				evalId = this.byId('evalTemplateId').getValue();
				this.byId('dataSourcePanel').setVisible(true);
				this.byId('dataSourcePanel').setExpanded(false);
			}
			else{
				this.byId('dataSourcePanel').setVisible(false);
			}
		}
		if(evalId){
			evaluationContext = {
					ID : evalId,
					IS_ACTIVE : 1
			};
			evaluationMetaData = that.metadataRef.getEvaluationById({ID:evalId,IS_ACTIVE : 1,entity:"EVALUATIONS_MODELER",async:false, texts:true,values:true,filters:true,properties:true,tags:true,model:that.oDataModel});
			if(evaluationMetaData.EVALUATION){
				evalData = {};
				var e_id = evaluationMetaData.EVALUATION.ID;
				evaluationMetaData.EVALUATION.ID = (e_id.indexOf(".") === 0) ? e_id.substring(1) : e_id; 
				evalData = that._cloneObj(evaluationMetaData.EVALUATION);
				evalTextData = that._cloneObj(evaluationMetaData.TEXTS);
				evalFilterData = that._cloneObj(evaluationMetaData.FILTERS);
				evalValueData = that._cloneObj(evaluationMetaData.VALUES);
				evalPropertiesData = that._cloneObj(evaluationMetaData.PROPERTIES);

				that.getView().getModel().setProperty("/ID",evalData.ID);
				if(that.evalCreateModel.getData().mode=="edit"){
					that.byId('evalTemplateId').setVisible(false);
					that.byId('evalTemplateIdLabel').setVisible(false);
				}
				that.getView().getModel().setProperty("/TITLE",evalData.TITLE);
				that.getView().getModel().setProperty("/DESCRIPTION",evalData.DESCRIPTION);
				that.getView().getModel().setProperty("/SEMANTIC_OBJECT",evalData.SEMANTIC_OBJECT);
				that.getView().getModel().setProperty("/SCALING",evalData.SCALING);
				that.getView().getModel().setProperty("/ACTION",evalData.ACTION);
				that.getView().getModel().setProperty("/GOAL_TYPE",evalData.GOAL_TYPE);
				that.getView().getModel().setProperty("/INDICATOR_TYPE",evalData.INDICATOR_TYPE);
				that.getView().getModel().setProperty("/OWNER_NAME",evalData.OWNER_NAME);
				that.getView().getModel().setProperty("/OWNER_ID",evalData.OWNER_ID);
				that.getView().getModel().setProperty("/OWNER_E_MAIL",evalData.OWNER_E_MAIL);
				that.getView().getModel().setProperty("/VALUES_SOURCE",evalData.VALUES_SOURCE);
				that.getView().getModel().setProperty("/VIEW_NAME",evalData.VIEW_NAME);
				that.getView().getModel().setProperty("/ODATA_URL",evalData.ODATA_URL);
				if(evalData.ODATA_ENTITYSET){
					that.getView().getModel().setProperty("/ODATA_ENTITYSET",evalData.ODATA_ENTITYSET);
					try{
						that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
					}
					catch(e){
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
						that.resetDimensionsAndInputParameters();
						that.busyDialog.close();
					}
				}
				that.getView().getModel().setProperty("/COLUMN_NAME",evalData.COLUMN_NAME);  
				that.getView().getModel().setProperty("/INDICATOR",evalData.INDICATOR);
				that.getView().getModel().updateBindings();
				
				var langSuccessHandler = function(obj, arr, localeLanguage) {
					that.SAP_LANGUAGES = obj;
					that.SAP_LANGUAGE_ARRAY = arr;
					that.languageKeyModelData = that._cloneObj(arr);
					that.localLanguage = localeLanguage;
					that.localLAISOLanguage = sap.ui.getCore().getConfiguration().getLocale().getLanguage().split("-")[0].toUpperCase();
				};

				this.metadataRef.getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});

				var additionalLanguageData = [];
				var i;
				for(i=0;i<evalTextData.length;i++){
					if(evalTextData[i].LANGUAGE != that.localLanguage){
						additionalLanguageData.push(evalTextData[i]);
					}
				}
				var languageArray = [];
				var i;
				for(i=0;i<additionalLanguageData.length;i++){
					var languageObject = {};
					languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].TITLE;
					languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].DESCRIPTION;
					languageObject.ADDITIONAL_LANGUAGE_SPRAS_KEY = additionalLanguageData[i].LANGUAGE;
					if(that.SAP_LANGUAGES) {
						languageObject.ADDITIONAL_LANGUAGE_KEY = that.SAP_LANGUAGES.SPRAS[additionalLanguageData[i].LANGUAGE]; 
					}
					else {
						languageObject.ADDITIONAL_LANGUAGE_KEY = "";
					}
					languageArray.push(languageObject);
				}
				that.OLD_ADDITIONAL_LANGUAGE_ARRAY = additionalLanguageData;
				that.getView().getModel().setProperty("/ADDITIONAL_LANGUAGE_ARRAY",languageArray);
				that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",languageArray.length);

				that.OLD_FILTER_DATA = evalFilterData;
				if(evalFilterData && evalFilterData.length > 0){
					var inputParams = [], dimensions = [],j=0,k=0;
					for(var i=0;i<evalFilterData.length;i++){
						if(evalFilterData[i].TYPE === "PA"){
							inputParams[j] = {};
							inputParams[j++] = evalFilterData[i];
						}
						else if(evalFilterData[i].TYPE === "FI"){
							dimensions[k] = {};
							dimensions[k++] = evalFilterData[i];
						}
					}
					if(inputParams.length > 0){
						var inputParamFormatted =  {};
						inputParamFormatted.inputParameters = [];
						inputParamFormatted.inputParameters = that.formObjectForFilters(inputParams);
						for(var i=0;i<that.oModelForInputParameters.getData().inputParameters.length;i++){
							for(var j=0;j<inputParamFormatted.inputParameters.length;j++){
								if(that.oModelForInputParameters.getData().inputParameters[i].name === inputParamFormatted.inputParameters[j].name){
									that.oModelForInputParameters.getData().inputParameters[i].value_1 = inputParamFormatted.inputParameters[j].value_1;
									that.oModelForInputParameters.getData().inputParameters[i].value_2 = inputParamFormatted.inputParameters[j].value_2;
								}
							}
						}
						that.oModelForInputParameters.updateBindings();
					}
					if(dimensions.length > 0){
						var filtersFormatted = {};
						filtersFormatted.selectedDimensions = [];
						filtersFormatted.selectedDimensions = that.formObjectForFilters(dimensions);
						that.oModelForDimensions.getData().selectedDimensions = filtersFormatted.selectedDimensions;
						that.oModelForDimensions.updateBindings();
					}
				}
				
				if(evalValueData){
					that.OLD_VALUES = evalValueData;
					that.getView().getModel().setProperty("/VALUES",evalValueData);
					that.formatEvalValues();
				}
				that.OLD_PROPERTIES = evalPropertiesData;
				that.getView().getModel().setProperty("/PROPERTIES",evalPropertiesData);
				
				that.busyDialog.close();

			}
			else{
				that.busyDialog.close();
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVALUATION_DOES_NOT_EXIST"));
			}
		}
	},

	formatEvalValues : function(){
		var evalData = this.evalCreateModel.getData();
		var that=this;
		evalData.TA = null;
		evalData.TC = null;
		evalData.RE = null; 
		evalData.CL = null;
		evalData.CH = null;
		evalData.WL = null;
		evalData.WH = null;

		for(var i=0;i<evalData.VALUES.length; i++) {
			if((evalData.VALUES_SOURCE == "FIXED")) {
				evalData[evalData.VALUES[i]["TYPE"]] = evalData.VALUES[i]["FIXED"];
			}
			else if(evalData.VALUES_SOURCE == "MEASURE") {
				evalData[evalData.VALUES[i]["TYPE"]] = evalData.VALUES[i]["COLUMN_NAME"];
			}
		}

		if(evalData.GOAL_TYPE == "RA"){
			this.byId('CHlabel').setText(that.oResourceBundle.getText("CRITICAL_HIGH"));
			this.byId('CLlabel').setText(that.oResourceBundle.getText("CRITICAL_LOW"));
			this.byId('WHlabel').setText(that.oResourceBundle.getText("WARNING_HIGH"));
			this.byId('WLlabel').setText(that.oResourceBundle.getText("WARNING_LOW"));
		}

		else if(evalData.GOAL_TYPE == "MA"){
			this.byId('CHlabel').setVisible(false);
			this.byId('CHinput').setVisible(false);
			this.byId('WHlabel').setVisible(false);
			this.byId('WHinput').setVisible(false);

			this.byId('CLlabel').setText(that.oResourceBundle.getText("CRITICAL"));
			this.byId('WLlabel').setText(that.oResourceBundle.getText("WARNING"));
		}

		else if(evalData.GOAL_TYPE == "MI"){
			this.byId('CLlabel').setVisible(false);
			this.byId('CLinput').setVisible(false);
			this.byId('WLlabel').setVisible(false);
			this.byId('WLinput').setVisible(false);

			this.byId('CHlabel').setText(that.oResourceBundle.getText("CRITICAL"));
			this.byId('WHlabel').setText(that.oResourceBundle.getText("WARNING"));
		}
		this.evalCreateModel.setData(evalData);
		this.evalCreateModel.updateBindings();
	},

	validateEvalId : function() {
		var that = this;
		var evalIdField = this.getView().byId('evalId');

		var is_active = 0;
		var evalId = evalIdField.getValue();
		if (evalId) {
			if ((!(/^[a-zA-Z0-9.]*$/.test(evalId))) || (evalId.indexOf(".") === 0)) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"));
				evalIdField.setValueState("Error");
				return true;
			} else {
				evalIdField.setValueState("None");
				var evalExists = this.metadataRef.getEvaluationById({ID:evalId,IS_ACTIVE : 1,model:that.oDataModel});
				if(evalExists && evalExists.EVALUATION){
					evalIdField.setValueState("Error");
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVAL_WITH_ID_EXISTS",evalId));
					return true;
				}
				else{
					evalIdField.setValueState("None");
				}
			}
		}
		return false;
	},

	formatLangCount : function(value){
		if(!this.getView().getModel().getData()){
			value = 0;
		}
		else
			value = this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES;
		return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+value+")";
	},

	addAdditionalLanguageDialog : function(){
		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData = jQuery.extend([], that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY);
		this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.TextArea({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});
		this.addedLanguagesList = new sap.m.List({
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});
		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
				        		  var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();

				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })]
			})
		}));
		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("TITLE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),
			            	        	             that.languageTextInput,
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("DESCRIPTION"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),
			            	        	             that.languageDescriptionInput,
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("LANGUAGE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,
			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){
			            	        	            		 if(that.languageTextInput.getValue() || that.languageDescriptionInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData()[i].LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getKey()){
			            	        	            					 sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getKey()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }
			            	        	            			 var addedLanguageObject = {
			            	        	            					 "ADDITIONAL_LANGUAGE_TITLE" : that.languageTextInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_DESCRIPTION" : that.languageDescriptionInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "ADDITIONAL_LANGUAGE_SPRAS_KEY" : that.languageKeySelect.getSelectedItem().getKey()
			            	        	            			 };
			            	        	            			 for(var i=0;i<that.SAP_LANGUAGE_ARRAY.length;i++){
			            	        	            				 if(that.languageKeySelect.getSelectedItem().getText() == that.SAP_LANGUAGE_ARRAY[i].LAISO){
			            	        	            					 addedLanguageObject.ADDITIONAL_LANGUAGE_KEY_DESCRIPTION = that.SAP_LANGUAGE_ARRAY[i].SPTXT
			            	        	            				 }
			            	        	            			 }
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            	 }
			            	        	             })
			            	        	             ]
			            	          })

			            	          ]
			            }).addStyleClass("languageGrid"),
			            that.addedLanguagesList],
			            beginButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            		that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY = that.addedLanguagesList.getModel("additionalLanguageListModel").getData();
			            		that.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            		that.getView().getModel().updateBindings();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("CANCEL"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		

		if(that.SAP_LANGUAGE_ARRAY && that.SAP_LANGUAGE_ARRAY.length){
			var oModel = new sap.ui.model.json.JSONModel();
			for(i=0;i<that.SAP_LANGUAGE_ARRAY.length;i++){
				if(that.SAP_LANGUAGE_ARRAY[i].LAISO == that.localLAISOLanguage){
					that.languageKeyModelData.splice(i,1);
				}
			}

			oModel.setData(that.languageKeyModelData);
			that.languageKeySelect.setModel(oModel, "otherLanguageKey");
			that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
				text: "{otherLanguageKey>LAISO}",
				key: "{otherLanguageKey>SPRAS}"
			}));
		}
		additionalLanguageDialog.open();
	},

	populateDimensionsAndInputParameters : function(dataSource, entitySet) {
		var dimensions = [];
		var inputParameters = [];
		this.oData4SAPAnalyticsModel = new sap.ui.model.analytics.odata4analytics.Model(new sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI(dataSource), null);
		this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(entitySet);
		//var queryResultObjDimensions = this.queryResultObj.getAllDimensions();
		var queryResultObjDimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensionsWithProperty(dataSource, entitySet);
		for (key in queryResultObjDimensions) {
			var name = queryResultObjDimensions[key].getName();
			var propertyType = queryResultObjDimensions[key].getKeyProperty().type;
			var newObj = {
					name : name,
					propertyType : propertyType
			};
			dimensions.push(newObj);
		}
		var data = this.oModelForDimensions.getData();
		data.dimensions = dimensions;
		data.dataSource = dataSource;
		data.entitySet = entitySet;
		if(data.selectedDimensions)
		{      
			for(var key in data.selectedDimensions)
			{
				data.selectedDimensions[key].propertyType = this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name)?
						this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name).getKeyProperty().type:"";  
						if(data.selectedDimensions[key].propertyType == "Edm.DateTime")
						{    
							var valueArray = data.selectedDimensions[key].value_1.split(",");
							for( i in valueArray)
							{      if( valueArray[i] != "")
							{
								var dateObj = new Date(valueArray[i]);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
							}
							data.selectedDimensions[key].value_1 = valueArray.join(",");
							valueArray = null;
							valueArray = data.selectedDimensions[key].value_2.split(",");
							for(var i in valueArray)
							{
								if(valueArray[i] != "")
								{
									var dateObj = new Date(data.selectedDimensions[key].value_2);
									var month = dateObj.getMonth()+1;
									month = /^\d$/.test(month) ? "0"+ month : month;
									var date = dateObj.getDate();
									date = /^\d$/.test(date) ? "0"+ date : date;
									var hours = dateObj.getHours();
									hours = /^\d$/.test(hours) ? "0"+ hours : hours;
									var minutes = dateObj.getMinutes();
									minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
									var seconds = dateObj.getSeconds();
									seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
									valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
								}
							}
							data.selectedDimensions[key].value_2 = valueArray.join(",");
							this.dimensionValue[data.selectedDimensions[key].name] = this.dimensionValue[data.selectedDimensions[key].name] ? this.dimensionValue[data.selectedDimensions[key].name] : {};
							this.dimensionValue[data.selectedDimensions[key].name]["value_1"] = data.selectedDimensions[key].value_1;
							this.dimensionValue[data.selectedDimensions[key].name]["value_2"] = data.selectedDimensions[key].value_2;                                      
						}
			}
		}
		this.oModelForDimensions.setData(data);
		var inputParametersObj = this.queryResultObj.getParameterization();
		if (inputParametersObj)
		{                              
			if(this.oModelForInputParameters.getData().inputParameters)
			{   
				var inputParameters = this.oModelForInputParameters.getData().inputParameters;
				for(var key in inputParameters)
				{
					inputParameters[key].propertyType = inputParametersObj.findParameterByName(inputParameters[key].name).getProperty().type;
					if(inputParameters[key].propertyType == "Edm.DateTime")
					{
						var valueArray = inputParameters[key].value_1.split(",");
						for( i in valueArray)
						{        
							if( valueArray[i] != "")
							{
								var dateObj = new Date(valueArray[i]);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
						}
						inputParameters[key].value_1 = valueArray.join(",");
						valueArray = null;
						valueArray = inputParameters[key].value_2.split(",");
						for(var i in valueArray)
						{
							if(valueArray[i] != "")
							{
								var dateObj = new Date(data.selectedDimensions[key].value_2);
								var month = dateObj.getMonth()+1;
								month = /^\d$/.test(month) ? "0"+ month : month;
								var date = dateObj.getDate();
								date = /^\d$/.test(date) ? "0"+ date : date;
								var hours = dateObj.getHours();
								hours = /^\d$/.test(hours) ? "0"+ hours : hours;
								var minutes = dateObj.getMinutes();
								minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
								var seconds = dateObj.getSeconds();
								seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
								valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
							}
						}
						inputParameters[key].value_2 = valueArray.join(",");
					}
				}                                       
			}
			else
			{   
				var inputParametersNames = inputParametersObj.getAllParameters();
				for ( var key in inputParametersNames) {
					var name = inputParametersNames[key].getName();
					var propertyType = inputParametersNames[key].getProperty().type;
					var optional = inputParametersNames[key].isOptional();
					var newObj = {
							name : name,
							propertyType : propertyType,
							operator : "EQ",
							value_1 : "",
							value_2 : ""
					};
					inputParameters.push(newObj);
				}
			}
			if (inputParameters.length > 0)
				this.byId("inputParameterLayoutHeaders").setVisible(true);
			data = this.oModelForInputParameters.getData();
			data.inputParameters = inputParameters;
			this.oModelForInputParameters.setData(data);
		}              

	},
	
	setFilterPayload : function(id, type, name, operator, value1, value2) {
		var obj = {};
		obj.ID = id;
		obj.IS_ACTIVE = 1;
		obj.TYPE = type;
		obj.NAME = name;
		obj.OPERATOR = operator;
		obj.VALUE_1 = value1;
		if (value2)
			obj.VALUE_2 = value2;
		else
			obj.VALUE_2 = "";
		return obj;

	},

	setInputParameterAndFilterLayout : function() {
		var that = this;
		this.dimensionValueHelpDialogs = {};
		this.dimensionValue = {};
		this.byId("inputParameterLayoutHeaders").setVisible(false);
		this.byId("inputParameterBaseLayout").setModel(this.oModelForInputParameters);
		this.byId("inputParameterBaseLayout").bindAggregation("items", "/inputParameters", function(sId, oContext) {
			var inputParameterOperator = new sap.m.Select({
				width : "100%",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				items : [new sap.ui.core.Item({
					text : that.oResourceBundle.getText("EQUAL_TO"),
					key : "EQ"
				})],
				selectedKey : "{operator}",
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var inputParameterValue = new sap.m.Input({
				value : "{value_1}",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				//showValueHelp : true,
				valueHelpRequest : jQuery.proxy(that.openInputParameterValueHelpDialog,that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				valueState : {
					path : "error_1",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var inputParameterGrid = new sap.ui.layout.Grid({
				defaultSpan : "L12 M12",
				content : [new sap.m.Input({
					value : "{name}",
					layoutData : new sap.ui.layout.GridData({
						span : "L3 M3"
					})
				}), inputParameterOperator, inputParameterValue]
			});
			return inputParameterGrid;
		});
		//Dimensions Layout
		this.byId("dimensionLayoutHeaders").setVisible(false);
		this.byId("baseDimensionLayout").setModel(this.oModelForDimensions);
		this.byId("baseDimensionLayout").bindAggregation("items", "/selectedDimensions", function(sId, oContext) {
			var dimensionOperator = new sap.m.Select({
				width : "100%",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				items : [new sap.ui.core.Item({
					text : that.oResourceBundle.getText("EQUAL_TO"),
					key : "EQ"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("GREATER_THAN"),
					key : "GT"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("LESS_THAN"),
					key : "LT"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("NOT_EQUAL_TO"),
					key : "NE"
				}), new sap.ui.core.Item({
					text : that.oResourceBundle.getText("BETWEEN"),
					key : "BT"
				})],
				selectedKey : "{operator}",
				change : jQuery.proxy(that.handleOperatorChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var dimensionValue = new sap.m.Input({
				value : "{value_1}",
				customData : [{
					key : "valueType",
					value : "value_1"
				}],
				showValueHelp : true,
				valueState : {
					path : "error_1",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				valueHelpRequest : jQuery.proxy(that.handleDimensionValueHelp, that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var dimensionValueTo = new sap.m.Input({
				value : "{value_2}",
				customData : [{
					key : "valueType",
					value : "value_2"
				}],
				showValueHelp : true,
				visible : {
					path : "operator",
					formatter : function(operator) {
						return (operator === "BT") ? true : false;
					}
				},
				valueState : {
					path : "error_2",
					formatter : function(error) {
						if (error)
							return "Error";
						else
							return "None";
					}
				},
				valueHelpRequest : jQuery.proxy(that.handleDimensionValueToHelp, that),
				change : jQuery.proxy(that.handleDimensionValueChange, that),
				layoutData : new sap.ui.layout.GridData({
					span : "L4 M4"
				})
			});
			var dimensionValueToLabel = new sap.m.Label({
				text : "To",
				visible : {
					path : "operator",
					formatter : function(operator) {
						return (operator === "BT") ? true : false;
					}
				}
			});
			var dimensionValueLayout = new sap.m.VBox({
				items : [dimensionValue, dimensionValueToLabel, dimensionValueTo],
				layoutData : new sap.ui.layout.GridData({
					span : "L3 M3"
				})
			});
			var dimensionDel = new sap.m.Button({
				icon : "sap-icon://sys-cancel",
				type : "Transparent",
				layoutData : new sap.ui.layout.GridData({
					span : "L2 M2 S2"
				}),
				press : function(evt) {
					var path = evt.getSource().getBindingContext().getPath();
					if(that.dimensionValue){
						if(that.dimensionValue[evt.getSource().getBindingContext().getObject().name]){
							delete that.dimensionValue[evt.getSource().getBindingContext().getObject().name]
						}
					}
					evt.getSource().getBindingContext().getModel().getData().selectedDimensions.splice(path.substring(path
							.lastIndexOf("/") + 1), 1);
					evt.getSource().getBindingContext().getModel().updateBindings();

					if(evt.getSource().getBindingContext().getModel().getData().selectedDimensions.length == 0){
						that.byId("dimensionLayoutHeaders").setVisible(false);
					}
				}
			});
			var dimensionGrid = new sap.ui.layout.Grid({
				defaultSpan : "L12 M12",
				content : [new sap.m.Input({
					value : "{name}",
					layoutData : new sap.ui.layout.GridData({
						span : "L3 M3"
					})
				}), dimensionOperator, dimensionValueLayout,dimensionDel]
			});
			return dimensionGrid;
		});
	},

	openInputParameterValueHelpDialog : function(name) {
		var that = this;
		var inputParameterValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VALUES"),
			multiSelect : true,
			rememberSelections : true,
			items : {
				path : "/results",
				template : new sap.m.StandardListItem({
					title : "{" + name + "}",
				})
			},
			confirm : function(oEvent) {
			},
			liveChange : function(oEvent) {
			}
		});
		inputParameterValueHelpDialog.setGrowingThreshold(100);
		inputParameterValueHelpDialog.open();
	},

	openDimensionDialog : function() {
		var that = this;
		if (!this.dimensionDialog) {
			var oSorter1 = new sap.ui.model.Sorter("name",false);
			this.dimensionDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_DIMENSIONS"),
				multiSelect : true,
				items : {
					path : "/dimensions",
					sorter : oSorter1,
					template : new sap.m.StandardListItem({title : "{name}"})
				},
				confirm : function(oEvent) {
					var selectedDimensions = that.oModelForDimensions.getData().selectedDimensions||[];
					var selectedItems = oEvent.getParameter("selectedItems");
					var aContexts = [];
					for(var key in selectedItems){
						aContexts[key] = selectedItems[key].getBindingContext();
					}
					for ( var key in aContexts) {
						var selectedObject = that._cloneObj(aContexts[key].getObject());
						selectedObject.value_1 = "";
						selectedObject.value_2 = "";
						selectedObject.operator = "EQ";
						selectedDimensions.push(selectedObject);
					}
					if (aContexts.length > 0)
						that.byId("dimensionLayoutHeaders").setVisible(true);
					else
						that.byId("dimensionLayoutHeaders").setVisible(false);
					that.oModelForDimensions.setProperty("/selectedDimensions", selectedDimensions);
				},
				liveChange : function(oEvent) {
					var searchValue = oEvent.getParameter("value");
					var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter([oFilter]);
				}
			});
			this.dimensionDialog.setGrowingThreshold(100);
			this.dimensionDialog.setModel(this.oModelForDimensions);

			/*if(that.getView().getModel().getData().mode == "edit" || that.getView().getModel().getData().mode == "duplicate")
			{
				var dialogItems = this.dimensionDialog.getItems();
				var selectedDimensions = this.oModelForDimensions.getData().selectedDimensions;
				for(var key in dialogItems)
				{      for(var dimensionKey in selectedDimensions)
				{
					if(dialogItems[key].getTitle() == selectedDimensions[dimensionKey].name)
						dialogItems[key].setSelected(true);
				}
				}
			}*/
		}
		this.dimensionDialog.open();
	},

	handleDimensionValueHelp : function(oEvent) {
		this.openDimensionValueHelpDialog(oEvent, "value_1");
	},

	handleDimensionValueToHelp : function(oEvent) {
		this.openDimensionValueHelpDialog(oEvent, "value_2");
	},

	openDimensionValueHelpDialog : function(oEvent, valueType) {
		var that = this;
		var parentInputField = oEvent.getSource();
		var baseModel = this.getView().getModel();
		var dimensionValuesModel = new sap.ui.model.json.JSONModel();
		var inputParameterArray = [];
		this.dimensionContext = oEvent.getSource().getBindingContext();
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		var dimensionOperator = oEvent.getSource().getBindingContext().getProperty("operator")
		var dimensionType = oEvent.getSource().getBindingContext().getProperty("propertyType")
		var inputParameterData = this.oModelForInputParameters.getData().inputParameters;
		for ( var key in inputParameterData) {
			inputParameterArray.push({ 
				OPERATOR: inputParameterData[key].operator, 
				NAME: inputParameterData[key].name, 
				VALUE_1: inputParameterData[key].value_1,
				VALUE_2: inputParameterData[key].value_2, 
				TYPE: "PA" // TYPE { FI, PA} 
			}); 
		}
		var queryService = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
			serviceUri : baseModel.getProperty("/ODATA_URL"),
			entitySet : baseModel.getProperty("/ODATA_ENTITYSET"),
			filter : inputParameterArray,
			dimension : dimensionName
		});
		queryService.model.read(queryService.uri, null, null, false, function(data) {
			if (that.dimensionValue[dimensionName])
			{
				that.dimensionValue[dimensionName][valueType] = that.dimensionValue[dimensionName][valueType]
				? that.dimensionValue[dimensionName][valueType] : "";
				var dimensionValueArray = that.dimensionValue[dimensionName][valueType] === ""
					? null : that.dimensionValue[dimensionName][valueType].split(",");
				for (key in dimensionValueArray)
				{      var userInputData = true;
				for ( var i in data.results)
				{   if(dimensionType == "Edm.DateTime")
				{      var date = new Date(dimensionValueArray[key]).toJSON();
				var dateFromService = new Date(data.results[i][dimensionName]).toJSON();
				if(date == dateFromService)
				{      userInputData = false;
				break;                                                                     
				}
				}
				else if (dimensionValueArray[key] === data.results[i][dimensionName])
				{  userInputData = false;
				break;
				}
				}
				if (userInputData)
				{
					var userInputValueObject = {};
					userInputValueObject[dimensionName] = dimensionValueArray[key];
					userInputValueObject.userInput = true;
					userInputValueObject.selected = true;
					data.results.push(userInputValueObject);
				}
				else
					data.results[i].selected = true;
				}
			}
			dimensionValuesModel.setData(data);
		}, function(error) {

		});

		var oSorter1 = new sap.ui.model.Sorter(dimensionName,false,function(context) {

			if (context.getProperty("userInput") === true)
				return {
				key : "USER_VALUES",
				text : that.oResourceBundle.getText("VALUES_ENTERED_BY_USER")
			};
			else
				return {
				key : "SERVICE_VALUES",
				text : that.oResourceBundle.getText("VALUES_FETCHED_FROM_SERVICE")
			};
		});
		this.dimensionValueHelpDialogs = new sap.m.SelectDialog(
				{
					title : that.oResourceBundle.getText("SELECT_VALUES"),
					multiSelect : true,
					rememberSelections : true,
					items : {
						path : "/results",
						sorter : oSorter1,
						template : new sap.m.StandardListItem({
							title : "{"+dimensionName+"}",                                                                   
							selected : "{selected}"
						})
					},
					confirm : function(oEvent) {
						var selectedDimensionValues = "";
						var aContexts = oEvent.getParameter("selectedContexts");
						for ( var key in aContexts)
						{      
							if(dimensionType == "Edm.DateTime")
							{   var dateObj = new Date(aContexts[key].getProperty(that.dimensionContext.getProperty("name")));
							var month = dateObj.getMonth()+1;
							month = /^\d$/.test(month) ? "0"+ month : month;
							var date = dateObj.getDate();
							date = /^\d$/.test(date) ? "0"+ date : date;
							var hours = dateObj.getHours();
							hours = /^\d$/.test(hours) ? "0"+ hours : hours;
							var minutes = dateObj.getMinutes();
							minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
							var seconds = dateObj.getSeconds();
							seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
							selectedDimensionValues = selectedDimensionValues + dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds()+",";     
							}
							else
								selectedDimensionValues = selectedDimensionValues + aContexts[key].getProperty(that.dimensionContext.getProperty("name")) + ",";
						}
						selectedDimensionValues = selectedDimensionValues.substring(0, selectedDimensionValues.length - 1);
						that.oModelForDimensions.setProperty(that.dimensionContext.getPath() + "/" + valueType,selectedDimensionValues);
						parentInputField.fireChange({
							value : selectedDimensionValues
						});
						that.dimensionValue[dimensionName] = that.dimensionValue[dimensionName] ? that.dimensionValue[dimensionName] : {};
						that.dimensionValue[dimensionName][valueType] = selectedDimensionValues;
					},
					liveChange : function(oEvent) {
						var searchValue = oEvent.getParameter("value");
						var oFilter = new sap.ui.model.Filter(dimensionName, sap.ui.model.FilterOperator.Contains,
								searchValue);
						var oBinding = oEvent.getSource().getBinding("items");
						oBinding.filter([oFilter]);
					}
				});
		this.dimensionValueHelpDialogs.setGrowingThreshold(100);
		this.dimensionValueHelpDialogs.setModel(dimensionValuesModel);

		var dimensions = this.oModelForDimensions.getData().selectedDimensions;
		var items = this.dimensionValueHelpDialogs.getItems();
		for(var i=0;i<dimensions.length;i++){
			if((dimensionName === dimensions[i].name) &&(dimensionOperator === dimensions[i].operator)){
				var value;
				if(dimensions[i].operator === "BT"){
					if(valueType === "value_1")
						value = dimensions[i].value_1.split(",");
					else
						value = dimensions[i].value_2.split(",");
				}
				else{
					value = dimensions[i].value_1.split(",");
				}

				for(var j=0;j<value.length;j++){
					for(var k=1;k<items.length;k++){
						if(value[j] === items[k].getTitle()){
							items[k].setSelected(true);
						}
					}
				}
			}
		}
		this.dimensionValueHelpDialogs.open();
		for(var i=1;i<items.length;i++){
			if(!items[i].getSelected()){
				this.dimensionValueHelpDialogs.getItems()[i].setSelected(true);
				this.dimensionValueHelpDialogs.getItems()[i].setSelected(false);
			}
		}
	},

	handleDimensionValueChange : function(oEvent) {
		this.validateValue(oEvent, "dimensionValue");
		var valueType = oEvent.getSource().getCustomData()[0].getValue(); //value_1 or value_2
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		if (!this.dimensionValue[dimensionName])
			this.dimensionValue[dimensionName] = {};
		this.dimensionValue[dimensionName][valueType] = oEvent.getParameter("value");
	},

	validateValue : function(oEvent, sourceType) {
		var that = this,result;
		var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
		var valueType = oEvent.getSource().getCustomData()[0].getValue();
		var valueArray = (sourceType === "dimensionValue") ? oEvent.getParameter("value").split(",") : oEvent
				.getSource().getBindingContext().getProperty("value_1");

		//Checking if multiple values for BT
		var operator = oEvent.getSource().getBindingContext().getProperty("operator");
		if (operator === "BT") {
			if (valueArray.length > 1) {
				result = false;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_MULTIPLE_VALUES_FOR_BETWEEN",dimensionName));
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, true);
					return;
			} else {
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, false);
			}
		}

		//Checking dimension value types are correct
		var expectedValueType = oEvent.getSource().getBindingContext().getProperty("propertyType");
		var errorMsg,pattern;
		for ( var key in valueArray) {
			result = true;
			var scriptTagPattern = /<(script)(.*)\/?>/i;
			var jsFunctionDefinitionPattern = /function\s*[^\(]*\(\s*([^\)]*)\)/;
			var jsFunctionCallPattern = /[^\(]*\(\s*([^\)]*)\)\s*{/;
			if (scriptTagPattern.test(valueArray[key]) || jsFunctionDefinitionPattern.test(valueArray[key])
					|| jsFunctionCallPattern.test(valueArray[key])) {
				result = false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",dimensionName);
			}
			if(expectedValueType == "Edm.Int32" || expectedValueType == "Edm.Int16" || expectedValueType == "Edm.Int64")
			{
				pattern = /^[-+]?\d+$/;
				result = pattern.test(valueArray[key]) ? true : false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_INTEGER",dimensionName);
			} 
			else if(expectedValueType == "Edm.Decimal")
			{
				pattern = /^[-+]?\d+(\.\d+)?$/;
				result = pattern.test(valueArray[key])?true:false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DECIMAL",dimensionName);
			}
			else if(expectedValueType == "Edm.DateTime")
			{
				pattern = /^[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(\s([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-9]|[0-5][0-9])[.][0-9]+)?$/;
				result = pattern.test(valueArray[key])?true:false;
				errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DATE",dimensionName);
			}

			if (!result) {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(errorMsg);
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, true);
					return;
			} else {
				var sPath = valueType === "value_1"
					? oEvent.getSource().getBindingContext().getPath() + "/error_1"
							: oEvent.getSource().getBindingContext().getPath() + "/error_2";
					oEvent.getSource().getModel().setProperty(sPath, false);
			}
		}
	},

	handleOperatorChange : function(oEvent) {
		var context = oEvent.getSource().getBindingContext();
		context.getObject().value_1 = "";
		if(this.dimensionValue){
			if(this.dimensionValue[context.getObject().name]){
				this.dimensionValue[context.getObject().name].value_1="";
			}
		}

		if (context.getProperty("operator") === "BT") {
			context.getObject().value_2 = "";
			if(this.dimensionValue){
				if(this.dimensionValue[context.getObject().name]){
					this.dimensionValue[context.getObject().name].value_2="";
				}
			}
		} 
		context.getModel().updateBindings();
	},

	validateDimensionsAndInputParameters : function() {
		var inputParameters = this.oModelForInputParameters.getData().inputParameters;
		var dimensions = this.oModelForDimensions.getData().selectedDimensions;
		var error = false;
		var errorType = "";
		var errorDimension = "";
		for ( var key in inputParameters) {
			if (inputParameters[key].error_1 === true || inputParameters[key].error_2 === true)
				error = true;
			if (inputParameters[key].value_1 === "") {
				error = true;
				errorType = "mandatoryFieldEmpty";
				inputParameters[key].error_1 = true;
			}
		}
		this.oModelForInputParameters.updateBindings();
		for ( var key in dimensions) {
			if (dimensions[key].error_1 === true || dimensions[key].error_2 === true){
				error = true;
				errorType = "invalidEntry";
				errorDimension = dimensions[key];
			}
			if (dimensions[key].value_1 === "") {
				error = true;
				errorType = "fieldEmpty";
				dimensions[key].error_1 = true;
			}
			if (dimensions[key].operator === "BT" && dimensions[key].value_2 === "") {
				error = true;
				errorType = "fieldEmpty";
				dimensions[key].error_2 = true;
			}
		}
		this.oModelForDimensions.updateBindings();
		return {
			error : error,
			errorType : errorType,
			errorDimension : errorDimension
		};
	},

	resetDimensionsAndInputParameters : function() {
		this.oModelForDimensions.setData({});
		this.oModelForInputParameters.setData({});
		this.dimensionDialog = null;
		this.dimensionValueHelpDialogs = {};
		this.dimensionValue = {};
		this.byId("inputParameterLayoutHeaders").setVisible(false);
		this.byId("dimensionLayoutHeaders").setVisible(false);
	},

	formatGoalType: function(goalType) {
		var that = this;
		var goalTypeText = null;
		switch(goalType) {
		case 'MA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
		case 'MI': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
		case 'RA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
		default : goalTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
		}
		return goalTypeText;
	},

	formatProperties: function(name, value) {
		return ((this.getView().byId("properties").getItems().length > 1) ? (', ' + name + ' : ' + value) : (name + ' : ' + value));
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	}
	
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/addEvaluation.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.emptyView.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.emptyView.controller');
/*
 * Copyright (C) 2009-2013 SAP AG or an SAP affiliate company. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


jQuery.sap.require('sap.ca.ui.images.images'); // unlisted dependency retained

jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("/") + "/sap/ca/scfld/md/css/flower.css");

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.emptyView", {

	onInit : function() {
		var oImage = this.byId("flower");
		if (oImage){
			oImage.setSrc(sap.ca.ui.images.images.Flower);
		}
//		var sLink = document.createElement('link');
//		sLink.setAttribute('rel', 'stylesheet');
//		sLink.setAttribute('type', 'text/css');
//		sLink.setAttribute('href', 'resources/sap/ca/scfld/md/css/flower.css');
//		sLink.setAttribute('id', 'emptyView_stylesheet');
//		document.getElementsByTagName('head')[0].appendChild(sLink);

		this.getView().addEventDelegate(this, this);
		this.getView().addEventDelegate({
			onBeforeShow : jQuery.proxy(function(oEvent) {
				if (oEvent.data && (oEvent.data.viewTitle || oEvent.data.languageKey || oEvent.data.infoText)){
					this.setTitleAndMessage(oEvent.data.viewTitle, oEvent.data.languageKey, oEvent.data.infoText);
				}
			}, this)                                                   
		});
		var view = this.getView();
		var that = this;
		if(this.oApplicationFacade.navigatingWithinDrilldown) {
			this.navigatingWithinDrilldown = true;
			this.oApplicationFacade.navigatingWithinDrilldown = undefined;
		} 
		else {
			this.navigatingWithinDrilldown = false;
		}
		this.busyDialog = new sap.m.BusyDialog();
		//the route handler is only here for backwards compatibility
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "noDataView") {
				this.evalContext = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				var oArgument = oEvent.getParameter("arguments");
				this.setTitleAndMessage(oArgument.viewTitle, oArgument.languageKey);
				 
				this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
				this.confRef = sap.suite.ui.smartbusiness.Configuration;
				this.constantsRef = this.confRef.Constants;
				this.tileTypeConst = this.constantsRef.TileType;
				this.PLATFORM = this.metadataRef.getPlatform();
				this.env = 0;
				this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
				
				if(this.PLATFORM == this.constantsRef.Platform.ABAP) {
					this.isPlatformABAP = true;
				}
				else {
					this.isPlatformABAP = false;
				}
				
				this.oHeaderFooterOptions = { 
						bSuppressBookmarkButton: {}, 
						oEditBtn : {
							sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("FULLSCREEN_TITLE"),
							onBtnPressed : function(evt) {
								if(that.navigatingWithinDrilldown) {
									that.oApplicationFacade.navigatingWithinDrilldown = true;
								} 
								else {
									that.oApplicationFacade.navigatingWithinDrilldown = undefined;
								}
								if(that.isPlatformABAP){
									sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addTileModelS", context: that.evalContext.sPath.substr(1)});
								}
								else {
									sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addTile", context: that.evalContext.sPath.substr(1)});
								}
							},
							bEnabled : false, // default true
						}           
				};

				if(that.isPlatformABAP){
					this.oHeaderFooterOptions.buttonList = [
//					{
//						sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("EDIT_EVALUATION"),
//						onBtnPressed : function(evt){
//							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"editEvaluation", context: that.evalContext.sPath.substr(1)});
//					    }
//					},
					{
						sI18nBtnTxt : that.oApplicationFacade.getResourceBundle().getText("DELETE_EVALUATION"),
						onBtnPressed : function(evt){
							that.handleEvalDelete();
					    }
					}					]
					this.oHeaderFooterOptions.additionalShareButtonList = [];
				}

				
				// Fetch System Environment info => Either running on SAP env or CUST env
				function sysInfoFetchCallBack(d) {
					that.env = d;
					//that.sScope = d.SYS_FLAG ? "CONF" : "CUST"; 
				}
				
				function sysInfoFetchErrCallBack(d,s,x) {
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"), d.response.body);
				}
				
				this.metadataRef.getSystemInfo({async:false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:this.oDataModel});
			}
		}, this);
	},
	
	handleEvalDelete: function() {
		var that = this;
		var modelData = {EVALUATION:that.evalContext.getObject()};
		
		sap.m.MessageBox.show(
				that.oApplicationFacade.getResourceBundle().getText("WARNING_EVALUATION_DELETE"),
				"sap-icon://hint",
				that.oApplicationFacade.getResourceBundle().getText("DELETE"),
				[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
				function(evt){
					if(evt=="OK"){
						function evalDeleteCallBack() {
							that.busyDialog.close();
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("EVALUATION_DEL_SUCCESS"));
							that.refreshMasterList();
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))}, true);
						}

						function evalDeleteErrCallBack() {
							that.busyDialog.close();
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_EVALUATION_DEL"));
						}
						var payload = {ID:modelData.EVALUATION.ID, IS_ACTIVE:modelData.EVALUATION.IS_ACTIVE};
						that.busyDialog.open();
						that.metadataRef.remove("EVALUATION", payload, evalDeleteCallBack, evalDeleteErrCallBack);
					}
					if(evt=="CANCEL"){

					}
				}
		);
	},
	
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	setTitleAndMessage : function (sViewTitle, sLanguageKey, sInfoText) {
		// set view title
		var oPage = this.byId("sap.ca.scfld.md.view.empty");
		var sTitle= this.oApplicationFacade.oApplicationImplementation.getResourceBundle().getText(sViewTitle);
		if (!sTitle || sTitle === sViewTitle) {
			//fallback: show message also as title
			if (!sInfoText){
				sTitle = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			}
			else
			{
				sTitle = sInfoText;
			}
		};
		oPage.setTitle(sTitle);

		// set message text                        
		var oLabel = this.byId("emptyLabel");
		if (!sInfoText){
			var sMessage = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(sLanguageKey);
			if (!sMessage || sMessage === sLanguageKey) {
				//fallback
				sMessage = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			};
			oLabel.setText(sMessage);
		}
		else
		{
			oLabel.setText(sInfoText);
		}
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/emptyView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S3.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S3", {

	onInit : function() {
		var that = this;
		this.errorMessages = [];
		this.errorModel =  new sap.ui.model.json.JSONModel();
		this.errorModel.setData(this.errorMessages);
		this.errorState = false;
		var view = this.getView();
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.settingModel =sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		this.oRouter.attachRouteMatched(function(evt) {
			if(evt.getParameter("name") === "multiSelect") {
				var pageContent = this.getView().getContent()[0].getContent();
				for(var i=0,l=pageContent.length; i<l; i++) {
					pageContent[i].setVisible(false);
				}
				this.oApplicationFacade.multiSelectMode = true;
			}
			else if (evt.getParameter("name") === "detail") {

				that.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");

				if(this.oApplicationFacade.multiSelectMode) {
					var pageContent = this.getView().getContent()[0].getContent();
					for(var i=0,l=pageContent.length; i<l; i++) {
						pageContent[i].setVisible(true);
					}
					this.oApplicationFacade.multiSelectMode = undefined;
				}

				this.oApplicationFacade.currentContextPath = evt.getParameter("arguments").contextPath;

				this.context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var model = new sap.ui.model.json.JSONModel();
				model.setData(that.metadataRef.getKPIById({context:this.context, tags:true, properties:true, texts:true, evaluations:true, associations:true, associationProperties: true, model:this.oApplicationFacade.getODataModel()}));
				view.setModel(model,"indicator");

				view.setBindingContext(this.context);
				view.contextPath = evt.getParameter("arguments").contextPath;

				this.updateFooterButtons(model.getData().INDICATOR);

				that.oApplicationFacade.evaluationData = model.getData().EVALUATIONS;
				that.oApplicationFacade.evaluationDetails = [];

			}
		}, this);

		this.oHeaderFooterOptions =
		{
				bSuppressBookmarkButton: {},
				buttonList : []
		};
		that.byId("directionArrowAssociation").setColor(sap.ui.core.theming.Parameters.get("sapUiLightText"));
	},

	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},

	onAfterRendering: function() {

	},

	formatOwner: function(owner) {
		return (owner || "");
	},

	formatStatus: function(status) {
		return ((status) ? (this.oApplicationFacade.getResourceBundle().getText("ACTIVE")) : this.oApplicationFacade.getResourceBundle().getText("DRAFT"));
	},

	formatGoalType: function(goalType) {
		var that = this;
		var goalTypeText = null;
		switch(goalType) {
		case 'MA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
		case 'MI': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
		case 'RA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
		default : goalTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
		}
		return goalTypeText;
	},

	formatEvaluationCount: function(evalCount) {
		return (evalCount || 0);
	},

	formatFavoriteMark: function(favMark) {
		return ((favMark) ? true : false);
	},

	formatTags: function(tag) { 
		return ((this.getView().byId("tags").getItems().length > 1) ? (', ' + tag) : (tag));
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		var that = this;
		if(sourceCount==null && targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"(0)";
		}
		if(sourceCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+targetCount+")";
		}
		if(targetCount==null){
			return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+sourceCount+")";
		}
		var count = (parseInt(sourceCount)+parseInt(targetCount));
		return that.oApplicationFacade.getResourceBundle().getText("ASSOCIATIONS")+"("+count.toString()+")";
	},

	formatAssociationCountValue: function(sourceCount,targetCount) {
		var that = this;
		if(sourceCount==null && targetCount==null){
			return 0;
		}
		if(sourceCount==null){
			return targetCount;
		}
		if(targetCount==null){
			return sourceCount;
		}
		var count = (parseInt(sourceCount)+parseInt(targetCount));
		return count;
	},

	formatProperties: function(name, value)  {
		var prop = ((this.getView().byId("assoProperties").getItems().length > 1) ? (", " + name + " : " + value) : (name + " : " + value+","));
		return prop;
	},

	formatArrowDirection: function(source_indicator) {
		return ((source_indicator == this.getView().getModel("indicator").getData().INDICATOR.ID) ? ("sap-icon://arrow-right") : ("sap-icon://arrow-left"));  
	},
	formatAssociationType: function(associationType){
		if(associationType=="SUPPORTING"){
			return this.oApplicationFacade.getResourceBundle().getText("SUPPORTING");
		}
		else{
			return this.oApplicationFacade.getResourceBundle().getText("CONFLICTING");
		}
	},
	formatTargetIndicatorText: function(sourceIndicator, targetIndicator, sourceIndicatorTitle, targetIndicatorTitle) { 
		var indicatorText = null;
		if(targetIndicator == this.getView().getModel("indicator").getData().INDICATOR.ID) {
			indicatorText = sourceIndicatorTitle;
		}
		else {
			indicatorText = targetIndicatorTitle;
		}
		return indicatorText;
	},

	formatStatusOfAssociation: function(is_active,counter){
		var that = this;
		if(counter=="2"){
			var str = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE")+","+that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT");
			return str;
		}
		if(is_active==0){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		if(is_active==1){
			return that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
	},

	formatKpiStatus: function(state, count) {
		var that = this;
		var isActive = "";
		if(count > 1) {
			isActive = (that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") + "," + that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
		}
		else if(state){
			isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
		}
		else {
			isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
		}
		return isActive;
	},

	handleEvaluationSelect: function(evt) {
		var that = this;
		var bindingContext = evt.getParameter("listItem").getBindingContext("indicator");
		var evalContext = "/EVALUATIONS_MODELER(ID='" + bindingContext.getObject().ID + "',IS_ACTIVE=" + bindingContext.getObject().IS_ACTIVE + ")";
		this.oApplicationFacade.evaluationIndex = parseInt(bindingContext.getPath().substring(bindingContext.getPath().length - 1),10);
		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"SBWorkspace", route:"evalDetail", context:(this.getView().contextPath + evalContext)});
	},

	getAllFooterButtons: function() {
		var that = this;
		var buttonList = [/*{
								sI18nBtnTxt : "Error",
								sId : "errorBtn",
								id : "errorBtn",
								bDisabled : false,
								onBtnPressed : function(event){
									sap.smartbusiness.ui.core.lib.Util.handleMessagePopover(event,that);
								}
						  },*/
		                  {
		                	  id: "addEval",
		                	  sId: "addEvaluationButton",
		                	  sI18nBtnTxt : "ADD_EVALUATION",
		                	  onBtnPressed : function(evt) {
		                		  that.errorMessages=[];
		                		  sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"createSBKPIEvaluation", route:"addEvaluation", context:(that.getView().contextPath)});
		                	  },
		                  }, {
		                	  sId: "favouriteToggleButton",
		                	  sI18nBtnTxt : "ADD_FAVOURITE",
		                	  onBtnPressed : function(evt) {
		                		  that.errorMessages=[];
		                		  var path = "/FAVOURITES";
		                		  var contextObj = that.getView().getModel("indicator").getData().INDICATOR;
		                		  var oDataModel = that.oApplicationFacade.getODataModel(); 
		                		  var payload = {ID:contextObj.ID, TYPE:contextObj.ENTITY_TYPE, USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
		                		  if(contextObj.MANUAL_ENTRY) {
		                			  //odata remove
//		                			  path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//		                			  oDataModel.remove(path,null,function(data) {
//		                			  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_SUCCESS_KPI_OPI"));
//		                			  oDataModel.refresh();
//		                			  contextObj.MANUAL_ENTRY = 0;
//		                			  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_ERROR_KPI_OPI"), err.response.body);
//		                			  });

		                			  //xsjs remove
		                			  that.metadataRef.remove("INDICATOR_FAVOURITE",payload,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_SUCCESS_KPI_OPI"));
		                				  contextObj.MANUAL_ENTRY = 0;
		                				  that.updateFooterButtons(contextObj);
		                				  that.getView().getModel("indicator").getData().INDICATOR = contextObj;
		                				  that.getView().getModel("indicator").setData(that.getView().getModel("indicator").getData());
		                				  //oDataModel.refresh();
		                				  that.refreshMasterList();
		                			  }, function(err) {
		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_ERROR_KPI_OPI"), err.responseText);
		                				  that.errorMessages.push({
                                              "type":"Error",
                                              "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_DELETE_ERROR_KPI_OPI"),
                                              "description":  err.responseText
	                                      });
	                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
		                			  });
		                		  }
		                		  else if(contextObj.MANUAL_ENTRY == 0) {
		                			  //odata update
//		                			  path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//		                			  oDataModel.update(path,payload,null,function(data) {
//		                			  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
//		                			  oDataModel.refresh();
//		                			  contextObj.MANUAL_ENTRY = 1;
//		                			  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.response.body);
//		                			  });

		                			  //xsjs update
		                			  that.metadataRef.update("INDICATOR_FAVOURITE",payload,null,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
		                				  contextObj.MANUAL_ENTRY = 1;
		                				  that.updateFooterButtons(contextObj);
		                				  that.getView().getModel("indicator").getData().INDICATOR = contextObj;
		                				  that.getView().getModel("indicator").setData(that.getView().getModel("indicator").getData());
		                				  //oDataModel.refresh();
		                				  that.refreshMasterList();
		                			  }, function(err) {
		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.responseText);
		                				  that.errorMessages.push({
                                              "type":"Error",
                                              "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), 
                                              "description":  err.responseText
	                                      });
	                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);      
		                			  });
		                		  }
		                		  else if(contextObj.MANUAL_ENTRY == null) {
		                			  //odata create
//		                			  oDataModel.create(path,payload,null,function(data) {
//		                			  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
//		                			  oDataModel.refresh();
//		                			  contextObj.MANUAL_ENTRY = 1;
//		                			  that.updateFooterButtons(contextObj);
//		                			  }, function(err) {
//		                			  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.response.body);
//		                			  });

		                			  //xsjs create
		                			  that.metadataRef.create("INDICATOR_FAVOURITE",payload,null,function(data) {
		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
		                				  contextObj.MANUAL_ENTRY = 1;
		                				  that.updateFooterButtons(contextObj);
		                				  that.getView().getModel("indicator").getData().INDICATOR = contextObj;
		                				  that.getView().getModel("indicator").setData(that.getView().getModel("indicator").getData());
		                				  //oDataModel.refresh();
		                				  that.refreshMasterList();
		                			  }, function(err) {
		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"), err.responseText);
		                				  that.errorMessages.push({
                                              "type":"Error",
                                              "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"),
                                              "description":  err.responseText
	                                      });
	                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
		                			  });
		                		  }
		                	  }
		                  }, {
		                	  sId: "activateButton",
		                	  sI18nBtnTxt : "ACTIVATE",
		                	  onBtnPressed : function(evt) {
		                		  that.errorMessages=[];
		                		  var entity = "ACTIVE_INDICATORS";
		                		  var payload = {};
		                		  var payloads = [];
		                		  payload.ID = that.getView().getModel("indicator").getData().INDICATOR.ID;
		                		  payloads.push(payload);

		                		  //Adapter Implementation Required --->>		             		  
		                		  that.oApplicationFacade.getODataModel().read(("/INDICATOR_TEXTS?$filter=ID eq '"+that.getView().getModel("indicator").getData().INDICATOR.ID + "' and IS_ACTIVE eq 0 and TITLE ne ''"), null, null, false, function(data) {
		                			  if(data && data.results && data.results.length) {
		                				  var ODataModel = that.oApplicationFacade.getODataModel();
		                				  // odata write
//		                				  ODataModel.create(entity,payload,null,function(data){
//		                				  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_SUCCESS"));
//		                				  sap.suite.ui.smartbusiness.lib.Util.utils.hashChange({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//		                				  ODataModel.refresh(); 
//		                				  },
//		                				  function(err){
//		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_ERROR"), err.response.body);
//		                				  });

		                				  //xsjs write
		                				  that.metadataRef.create("ACTIVATE_INDICATOR",payloads, null, function(data){
		                					  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_SUCCESS"));
		                					  sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")}, true);
		                					  //ODataModel.refresh();
		                					  that.refreshMasterList();
		                				  },
		                				  function(err){
		                					  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_ERROR"), err.responseText);
		                					  that.errorMessages.push({
	                                              "type":"Error",
	                                              "title":that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_KPI_OPI_ERROR"),
	                                              "description":  err.responseText
		                                      });
		                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);    
		                				  });
		                			  }
		                			  else {
		                				  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_KPI_OPI_TITLE"));
		                				  that.errorMessages.push({
                                              "type":"Error",
                                              "title":that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_KPI_OPI_TITLE"),
                                              "description":  ""
	                                      });
	                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
		                			  }
		                		  }, function() {

		                		  });
		                	  }
		                  }, {
		                	  id: "editBut",
		                	  sId: "editButton",
		                	  sI18nBtnTxt : "EDIT",
		                	  onBtnPressed : function(evt) {
		                		  that.errorMessages=[];
		                		  sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
		                		  sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
		                		  sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI || {};
		                		  sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
		                		  var contextPath = that.getView().contextPath;
		                		  contextPath = (that.getView().getBindingContext().getObject().COUNTER == 2) ? contextPath.replace("IS_ACTIVE=1","IS_ACTIVE=0") : contextPath;
		                		  contextPath = contextPath.replace("INDICATORS_MODELER","INDICATORS");
		                		  if(that.getView().getBindingContext().getObject().COUNTER == 2){
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"createSBKPI", route:"editDraftKpi", context:(contextPath)});
		                		  }
		                		  else if(that.getView().getBindingContext().getObject().COUNTER == 1){
		                			  sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"createSBKPI", route:"editKpi", context:(contextPath)});
		                		  }
		                	  }
		                  }, {
		                	  sId: "deleteButton",
		                	  sI18nBtnTxt : "DELETE_BUTTON_TEXT",
		                	  onBtnPressed : function(evt) {
		                		  that.errorMessages=[];
		                		  if(!(sap.m.MessageBox)) {
		                			  jQuery.sap.require("sap.m.MessageBox");
		                		  }	
		                		  sap.m.MessageBox.show(
		                				  that.oApplicationFacade.getResourceBundle().getText("WARNING_SINGLE_INDICATOR_DELETE_KPI_OPI"),
		                				  "sap-icon://hint",
		                				  that.oApplicationFacade.getResourceBundle().getText("DELETE_BUTTON_TEXT"),
		                				  [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
		                				  function(evt){
		                					  if(evt=="OK"){
		                						  var entity = that.getView().contextPath.substring(1).replace("INDICATORS_MODELER","INDICATORS");
		                						  var payloads = [];
		                						  payloads.push({ID:that.getView().getModel("indicator").getData().INDICATOR.ID,IS_ACTIVE:that.getView().getModel("indicator").getData().INDICATOR.IS_ACTIVE});
		                						  var ODataModel = that.oApplicationFacade.getODataModel();
		                						  //odata remove
//		                						  ODataModel.remove(entity,null,function(data){
//		                						  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_SUCCESS"));
//		                						  ODataModel.refresh();
//		                						  sap.suite.ui.smartbusiness.lib.Util.utils.hashChange({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))});
//		                						  },
//		                						  function(err){
//		                						  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_ERROR"), err.response.body);
//		                						  });

		                						  //xsjs remove
		                						  that.metadataRef.remove("INDICATOR",payloads,function(data){
		                							  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_SUCCESS"));
		                							  //ODataModel.refresh();
		                							  that.refreshMasterList();
		                							  sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:window.location.hash.substr(0,window.location.hash.indexOf("&/"))}, true);
		                						  },
		                						  function(err){
		                							  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_ERROR"), err.responseText);
		                							  that.errorMessages.push({
			                                              "type":"Error",
			                                              "title":that.oApplicationFacade.getResourceBundle().getText("DELETE_KPI_OPI_ERROR"),
			                                              "description":  err.responseText
				                                      });
				                                      sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);     
		                						  });
		                					  }
		                					  if(evt=="CANCEL"){

		                					  }
		                				  }
		                		  );
		                	  }
		                  },
		                  {
		                	  sId: "duplicateButton",
		                	  sI18nBtnTxt : "DUPLICATE",
		                	  onBtnPressed : function(evt){
		                		  that.errorMessages=[];
//		                		  sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
//		                		  sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
//		                		  sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI || {};
//		                		  sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
//		                		  sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"createSBKPI", route:"duplicateKpi", context:(that.getView().contextPath.replace("INDICATORS_MODELER","INDICATORS"))});
		                		  this.duplicateKPIDialog = this.duplicateKPIDialog || that.createDuplicateDialog();
		                		  this.duplicateKPIDialog.setContentHeight("350px");
		                		  that.vBoxForIdPrefixText.setVisible(true);
		                		  that.prefixInput.setValue();
		                		  that.prefixInput.setValueState("None");
			        	          that.prefixForm.setVisible(true);
		                		  if(!that.settingModel.getData().ID_VISIBLE){
		                			  that.vBoxForIdPrefixText.setVisible(false);
				        	          that.prefixForm.setVisible(false);
				        	          this.duplicateKPIDialog.setContentHeight("200px");
		                		  }
		                		  this.duplicateKPIDialog.open();
		                		  
		                	  }
		                  } 

		                  ];

		return buttonList;
	},

	createDuplicateDialog : function(){

		var that = this;

		var kpiOnlyRadButton = new sap.m.RadioButton({
			groupName: "DuplicateKPI",
			text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_ONLY"),
			selected:true
		});
		var kpiAndEntitiesRadBtn = new sap.m.RadioButton({
			groupName: "DuplicateKPI",
			text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_AND_ENTITIES")

		}); 
		var kpiOnlyText = new sap.m.Text({
			text: that.oApplicationFacade.getResourceBundle().getText("KPI_ONLY_TEXT")
		});
		var kpiAndEntitiesText = new sap.m.Text({
			text: that.oApplicationFacade.getResourceBundle().getText("KPI_AND_ENTITIES_TEXT")
		});
		var generatedIdInfoText = new sap.m.Text({
			text: that.oApplicationFacade.getResourceBundle().getText("GENERATED_ID_INFO")
		});
		var duplicateIdExample = new sap.m.Text({
			text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_ID_SAMPLE")
		});
		var prefixLabel = new sap.m.Label({
			text: that.oApplicationFacade.getResourceBundle().getText("ID_PREFIX")
		});
		this.prefixInput = new sap.m.Input({
			type:"Text",
			maxLength:4,
			placeholder: that.oApplicationFacade.getResourceBundle().getText("PREFIX_PLACEHOLDER"),
			showValueHelp: false
		}).attachLiveChange(function (){
       		that.validatePrefix();
       	});
		var charLimitText = new sap.m.Text({
			text: that.oApplicationFacade.getResourceBundle().getText("CHAR_LIMIT"),
		})
		var vBoxForKPIOnlyRadButton = new sap.m.VBox({
			items:[
			       kpiOnlyRadButton,
			       kpiOnlyText
			       ]
		});
		var vBoxForKPIAndEntitiesRadBtn = new sap.m.VBox({
			items:[
			       kpiAndEntitiesRadBtn,
			       kpiAndEntitiesText
			       ]
		});
		this.vBoxForIdPrefixText = new sap.m.VBox({
			items:[
			       generatedIdInfoText,
			       duplicateIdExample
			       ]
		});

		var okBtn = new sap.m.Button({
			text:that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_OK"),
			press: function(){
				if(kpiOnlyRadButton.getSelected()){
					
					if(that.prefixInput.getVisible()){
						if(that.validatePrefix()){
							that.metadataRef.create("DUPLICATE_ENTITY",{flag:"INDICATOR-ONLY", id:that.getView().getModel("indicator").getData().INDICATOR.ID, prefix:that.prefixInput.getValue()}, null,  
									function(success){
								duplicateDialog.close();
								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
								that.refreshMasterList();
							},
							function(error){
								duplicateDialog.close();
								sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
								that.errorMessages.push({
									"type":"Error",
									"title":JSON.parse(error.responseText).errorMessage,
									"description":  ""
								});
								sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  

							});
						}
					}else{
						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"INDICATOR-ONLY", id:that.getView().getModel("indicator").getData().INDICATOR.ID, prefix:""}, null,  
								function(success){
							duplicateDialog.close();
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
							that.refreshMasterList();
						},
						function(error){
							duplicateDialog.close();
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
							that.errorMessages.push({
								"type":"Error",
								"title":JSON.parse(error.responseText).errorMessage,
								"description":  ""
							});
							sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  

						});
						
					}				
					

				}else if(kpiAndEntitiesRadBtn.getSelected()){
					if(that.prefixInput.getVisible()){
						if(that.validatePrefix()){
							that.metadataRef.create("DUPLICATE_ENTITY",{flag:"INDICATOR", id:that.getView().getModel("indicator").getData().INDICATOR.ID, prefix:that.prefixInput.getValue()}, null,  
									function(success){
								duplicateDialog.close();
								sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
								that.refreshMasterList();
							},
							function(error){
								duplicateDialog.close();
								sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
								that.errorMessages.push({
									"type":"Error",
									"title":JSON.parse(error.responseText).errorMessage,
									"description":  ""
								});
								sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
							});
							
						}
					}else{
						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"INDICATOR", id:that.getView().getModel("indicator").getData().INDICATOR.ID, prefix:""}, null,  
								function(success){
							duplicateDialog.close();
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
							that.refreshMasterList();
						},
						function(error){
							duplicateDialog.close();
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
							that.errorMessages.push({
								"type":"Error",
								"title":JSON.parse(error.responseText).errorMessage,
								"description":  ""
							});
							sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
						});
					}

					
				}
			}
		});
		var cancelBtn = new sap.m.Button({
			text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_CANCEL"),
			press: function(){
				duplicateDialog.close();
			}
		});
		
		this.prefixForm = new sap.ui.layout.form.SimpleForm({
     	   editable:true, 
    	   layout:"ResponsiveGridLayout",
    	   maxContainerCols:12,
    	   labelSpanL:3,
    	   labelSpanM:3,
    	   labelSpanS:3,
    	   columnsL:4,
    	   columnsM:4,
    	   columnsS:4,
    	   content : [
    	              prefixLabel,
    	              that.prefixInput,
    	              charLimitText
    	              ]
       });
		
		var duplicateDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_DIALOG_TITLE"),
			//contentHeight:"350px",
			contentWidth:"100px",
			verticalScrolling: false,
			horizontalScrolling: false,
			content:[
			         new sap.ui.layout.Grid({
			        	 width:"100%",
			        	 defaultSpan : "L12 M12 S12",
			        	 content: [
			        	           vBoxForKPIOnlyRadButton,
			        	           vBoxForKPIAndEntitiesRadBtn,
			        	           that.vBoxForIdPrefixText,
			        	           that.prefixForm
			        	           ]})
			         ],
			         beginButton: okBtn,
			         endButton: cancelBtn
		});
		return duplicateDialog;

	},
	
	validatePrefix : function (){
		var that=this;
		this.HANA = "hana";
		this.CDS = "cds";
		this.VIEW_MODE = this.HANA;
		var successStatus = true;
		var urlParam;
		if((urlParam = jQuery.sap.getUriParameters().get("viewmode"))) {
			if(urlParam.toLowerCase && urlParam.toLowerCase() == this.CDS)
				this.VIEW_MODE = this.CDS;
		}
		var prefix = that.prefixInput.getValue();
		if(!prefix){
   			that.prefixInput.setValueState("None");
   		}
		 if(this.VIEW_MODE == this.CDS){
			that.prefixInput.setValue(prefix.toUpperCase());
		}
		if (prefix) {
			/* CDS prefix must begin with PERIOD */
			if(this.VIEW_MODE == this.CDS && prefix[0] != '.') {
				//this.kpiIdEval_reason = "NOT_START_WITH_PERIOD";
				that.prefixInput.setValueState("Error");
				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_CDS_KPI_ID_BEGIN_WITH_PERIOD"));
				successStatus = false;
			}
			/* Only CDS prefixs must begin with PERIOD */
			else if(this.VIEW_MODE == this.HANA && prefix[0] == '.') {
				//this.kpiIdEval_reason = "_START_WITH_PERIOD";
				that.prefixInput.setValueState("Error");
				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_HANA_KPI_ID_BEGIN_WITH_PERIOD"));
				successStatus = false;
			}
			else if (!(/^[a-zA-Z0-9.]*$/.test(prefix))) {
				that.prefixInput.setValueState("Error");
				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_HANA_ID_PREFIX_NO_SPL_CHAR"));
				successStatus = false;
			} else {
				that.prefixInput.setValueState("None");
				that.prefixInput.setValueStateText();
				//successStatus = true;
			}
		}
		return successStatus;
	},

	updateFooterButtons: function(indicatorObj) {
		indicatorObj = indicatorObj || this.getView().getBindingContext().getObject();
		var footerAllButtons = this.getAllFooterButtons();

		this.oHeaderFooterOptions.buttonList = [];

		if((indicatorObj.COUNTER == 2) || (indicatorObj.IS_ACTIVE)) {
			this.oHeaderFooterOptions.oEditBtn = footerAllButtons[0];
		}

		if(indicatorObj.MANUAL_ENTRY) {
			footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE");
		}
		else {
			footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"); 
		}
		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[1]);

		if(!(indicatorObj.IS_ACTIVE)) {
			this.oHeaderFooterOptions.oEditBtn = footerAllButtons[2];
		}
		
		if(indicatorObj.IS_ACTIVE) {
		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[5]);
		}

		if(indicatorObj.COUNTER == 2) {
			footerAllButtons[3].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT_DRAFT");
		}
		else {
			footerAllButtons[3].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT"); 
		}
		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[3]);

		this.oHeaderFooterOptions.buttonList.push(footerAllButtons[4]);

		this.setHeaderFooterOptions(this.oHeaderFooterOptions);
	},

	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,false);
	},
	openAdditionalLanguageDialog : function(){
		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData=[];
		this.additionalLanguageListModelData = that.getView().getModel('indicator').getData().TEXTS;
		// Fetch All Sap Languages - Adapter Implementation
		var langSuccessHandler = function(obj, arr, localeLanguage) {
			that.SAP_LANGUAGES = obj;
			that.SAP_LANGUAGE_ARRAY = arr;
			that.localLanguage = localeLanguage;
		};
		var i=0;
		var l=this.additionalLanguageListModelData.length;
		sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});
		for(i=0;i<l;i++){
			this.additionalLanguageListModelData[i].ADDITIONAL_LANGUAGE_KEY = that.SAP_LANGUAGES.SPRAS[this.additionalLanguageListModelData[i].LANGUAGE]; 
			
		}
		//this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

	

		this.addedLanguagesList = new sap.m.List({
			showNoData:false,
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});
		
		this.setEnable = function(){
			if(this.addedLanguagesList.getItems().length==0)
			{
				additionalLanguageDialog.getBeginButton().setEnabled(false); //enabling the "OK" button when an entry is added
			}else{
				additionalLanguageDialog.getBeginButton().setEnabled(true);
			}
		}
		
		
		
		
		
		
		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L7 M7 S7",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L3 M3 S3"
				        	  }),
				        	  editable : false
				          }),
				         
				          ]
			})
		}));

		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGES"),
			content :  [
			           

			            that.addedLanguagesList

			            ],

			            endButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

			additionalLanguageDialog.open();
	}


});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

// define a root UIComponent which exposes the main view
sap.ui.getCore().loadLibrary("sap.suite.ui.smartbusiness");
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.Component");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


// new Component
sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.drilldown.Component", {
    metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", 
            {
        "name" : "Smart Business Generic Drilldown",
        "version" : "1.0.0",
        "library" : "sap.suite.ui.smartbusiness.drilldown",
        "includes" : ["lib/AllLibrary.js"],
        "dependencies" : {
            "libs" : ["sap.m", "sap.ca.ui", "sap.ui.vbm", "sap.suite.ui.commons"],
            "components" : []
        },
        config : {
            resourceBundle : "i18n/i18n.properties",
            titleResource : "SAP Smart Business",
            fullWidth : true
        },
        viewPath : "sap.suite.ui.smartbusiness.drilldown.view",
        fullScreenPageRoutes : {
        	"miniChart" : {
                "pattern" : "/miniChart",
                "view" : "miniChart"
            },
            // fill the routes to your full screen pages in here.
            "fullscreen" : {
                "pattern" : ":all*:",
                "view" : "Drilldown"
            }
        },
    }),
    /**
     * Initialize the application
     * 
     * @returns {sap.ui.core.Control} the content
     */
    createContent : function() {
        var modulePath = jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.drilldown");
        jQuery.sap.require("sap.ca.ui.utils.Lessifier");
        sap.ca.ui.utils.Lessifier.lessifyCSS("sap.suite.ui.smartbusiness.drilldown", "css/colors.css"); 
    	jQuery.sap.includeStyleSheet(modulePath + "/css/override.css");
        try {
            var oViewData = this.getComponentData().startupParameters;
            oViewData.component = this;
        } catch(e) {
            oViewData = {};
            oViewData.component=this;
            jQuery.sap.log.error("Startup Parameters not found!!");  
        }
        return sap.ui.view({
            viewName : "sap.suite.ui.smartbusiness.drilldown.view.Main",
            type : sap.ui.core.mvc.ViewType.XML,
            viewData : oViewData
        });
    }
});

}; // end of sap/suite/ui/smartbusiness/drilldown/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained

sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.drilldown.Configuration", {
    getServiceParams : function() {
        return [];
    },
    /**
     * @inherit
     */
    getServiceList : function() {
        return [];
    }
});
}; // end of sap/suite/ui/smartbusiness/drilldown/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Configuration");

sap.suite.ui.smartbusiness.drilldown.lib.Configuration = (function(){
    var _cache = {};
    var _encodeUrl = function(uRi) {
        return jQuery.sap.encodeURL(uRi);
    };
    var trim = function(str) {
    	if(str) {
    		return str.trim();
    	}
    	return str;
    };
    var Header =  function(oHeader) {
        this.oHeader = oHeader;
        this.oHeader.CONFIGURATION = trim(this.oHeader.CONFIGURATION);
        if(this.oHeader.CONFIGURATION) {
        	var temp = this.oHeader.CONFIGURATION;
        	try {
        		tempObject = JSON.parse(temp);
        		for(var each in tempObject) {
        			try{
        				tempObject[each]  = JSON.parse(tempObject[each]);	
        			}catch(e){
        				tempObject[each]  = tempObject[each];
        			}
        		}
        		this.oHeader.PARSED_CONFIGURATION = tempObject;
        	} catch(e) {
        		jQuery.sap.log.error("Error Parsing Drilldown Header Configuration");
        		this.oHeader.PARSED_CONFIGURATION = null;
        	}
        } else {
        	this.oHeader.PARSED_CONFIGURATION = null;
        }
    };
    Header.prototype = {
            getVisualizationType : function() {
                return this.oHeader.VISUALIZATION_TYPE;
            },
            getReferenceEvaluationId : function() {
                return this.oHeader.REFERENCE_EVALUATION_ID;
            },
            getConfigurationId : function() {
                return this.oHeader.CONFIGURATION_ID;
            },
            getEvaluationId : function() {
                return this.oHeader.EVALUATION_ID;
            },
            getVisualizationOrder : function() {
                return this.oHeader.VISUALIZATION_ORDER;
            },
            isVisible : function() {
                return this.oHeader.VISIBILITY == 1;
            },
            isAssociated : function() {
                if(this.getReferenceEvaluationId()) {
                    if(this.getReferenceEvaluationId()!== this.getEvaluationId()) {
                        return true;
                    }
                }
                return false;
            },
            isDimensionRequired : function() {
                return this.getVisualizationType() == "TREND" || this.getVisualizationType() == "COMPARISION";
            },
            getDimension : function() {
                return this.oHeader.DIMENSION;
            },
            getTileConfiguration : function() {
            	return this.oHeader.PARSED_CONFIGURATION;
            },
            getVisibility : function() {
                return this.oHeader.VISIBILITY;
            }
    };

    /**
     * 
     * @param oChart
     * @returns {Chart}
     */
    var Chart = function(oChart) {
        this.oChart = oChart;
    };
    Chart.prototype = {
            getValueType : function() {
                return this.oChart.VALUE_TYPE; //Possible Values Absolute/Percentage
            },
            getAxisType : function() {
                return this.oChart.AXIS_TYPE; //Possible Values Single/Dual
            },
            getChartType : function() {
                var _this = this;
                return  {
                    isBar : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "BAR"; 
                    },
                    isColumn : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "COLUMN"; 
                    },
                    isLine : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "LINE"; 
                    },
                    isCombination : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "COMBINATION"; 
                    },
                    isTable : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "TABLE"; 
                    },
                    isBubble : function() {
                        return _this.oChart.CHART_TYPE.toUpperCase() == "BUBBLE"; 
                    },
                    isGeoMap : function() {
                    	return _this.oChart.CHART_TYPE.toUpperCase() == "GEOMAP"; 
                    },
                    isAnalyticalMap : function() {
                    	return _this.oChart.CHART_TYPE.toUpperCase() == "CHOROPLETH"; 
                    },
                    getText : function() {
                        return _this.oChart.CHART_TYPE;
                    }
                };
            },
            getColorScheme : function() {
                var that = this;
                return {
                    getText : function() {
                        return that.oChart.COLOR_SCHEME;
                    },
                    isManual : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC" || that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
                    },
                    isManualSemantic : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
                    },
                    isManualNonSematic : function() {
                        return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC";
                    },
                    isAutoSemantic : function() {
                        return that.oChart.COLOR_SCHEME == 'AUTO_SEMANTIC';
                    }
                };
            },
            getThresholdMeasure : function() {
                return this.oChart.THRESHOLD_MEASURE;
            },
            getDataLimit : function() {
                return this.oChart.DATA_LIMIT;
            },
            isAbsoluteValue : function() {
                return this.getValueType() == "ABSOLUTE";
            },
            isPercentageValue : function() {
                return this.getValueType() == "PERCENTAGE";
            },
            isSingleAxis : function() {
                return this.getAxisType() == "SINGLE";
            },
            isDualAxis : function() {
                return this.getAxisType() == "DUAL";
            },
            isStackingEnabled : function(viewConfiguration) {
                var flag = false;
                var columns = viewConfiguration.getColumns();
                columns.forEach(function(column) {
                    var oColumn  = viewConfiguration.findColumnByName(column);
                    if(oColumn.isStacked()) {
                        flag = true;
                        return false;
                    }
                });
                return flag;
            }

            /*Chart Types*/
    };

    /**
     * 
     * @returns {Column}
     */
    var Column = function() {
    };
    Column.prototype = {
            getName  : function() {
                return this.oParam.NAME;
            },
            getSortBy : function() {
                return this.oParam.SORT_BY;
            },
            getSortOrder : function() {
                return this.oParam.SORT_ORDER;  
            },
            getType : function() {
                return this.oParam.TYPE;
            },
            getVisibility : function() {
                return this.oParam.VISIBILITY;
            },
            isVisibleInChart : function() {
                return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "CHART";
            },
            isVisibleInTable : function() {
                return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "TABLE";
            },
            getColor : function() {
                return this.oParam.COLOR;
            },
            isStacked : function() {
                return this.oParam.STACKING == 1;
            },
            getStacking : function() {
                return this.oParam.STACKING;  
            },
            isDimension : function() {
                return this.getType().toUpperCase() == "DIMENSION";
            },
            isMeasure : function() {
                return this.getType().toUpperCase() == "MEASURE";
            },
            getAxis : function() {
                return this.oParam.AXIS;
            }
    };

    /**
     * 
     * @param oParam
     * @returns {Dimension}
     */
    var Dimension = function(oParam) {
        this.oParam = oParam;
    };
    Dimension.prototype = new Column();

    /**
     * 
     * @param oParam
     * @returns {Measure}
     */
    var Measure = function(oParam) {
        this.oParam = oParam;
    };
    Measure.prototype = new Column();


    /**
     * 
     * @param oParam
     * @returns {Filter}
     */
    var Filter = function(oParam) {
        this.oFilter = oParam;
    };
    Filter.prototype = {
            getName : function() {
                return this.oFilter.DIMENSION;
            },
            isVisible  : function() {
                return this.oFilter.VISIBILITY == 1;
            }
    };
    var View = function(oParam) {
        this._viewId = oParam.CONFIGURATION_ID;
        this._evaluationId = oParam.EVALUATION_ID;
        this._title  = oParam.TEXT;
        this._order = oParam.CONFIG_ORDER;
        this._columns = [];this._dimensions = []; this._measures = []; 
        this._dimensionMap = {}; this._measureMap = {};
        this._chartConfig = [];
    };
    View.prototype = {
            getTitle : function() {
                return this._title;
            },
            getId : function() {
                return this._viewId;
            },
            getEvaluationId : function() {
                return this._evaluationId;  
            },
            getViewOrder : function() {
                return this._order;
            },
            getColumns  : function() {
                return this._columns;
            },
            getDimensions : function () {
                return this._dimensions;  
            },
            getDimensionCount : function() {
                return this._dimensions.length;
            },
            getMeasures : function() {
                return this._measures;  
            },
            getMeasureCount : function() {
                return this._measures.length;
            },
            findDimensionByName : function (dimensionName) {
                if(this._dimensionMap[dimensionName]) {
                    return this._dimensionMap[dimensionName];
                } else {
                    throw new Error("Invalid Dimension Name : "+dimensionName);
                }

            },
            findMeasureByName : function (measureName) {
                if(this._measureMap[measureName]) {
                    return this._measureMap[measureName];
                } else {
                    throw new Error("Invalid Dimension Name : "+measureName);
                }

            },
            findColumnByName : function(columnName) {
                if(this._dimensionMap[columnName]) {
                    return this._dimensionMap[columnName];
                } else if(this._measureMap[columnName]) {
                    return this._measureMap[columnName];
                } else {
                    throw new Error("Invalid Column Name : "+columnName);
                }
            },
            getChartConfiguration : function() {
                return this._chartConfig;
            }
    };
    var Configuration = function(evaluationId, batchResponse) {
        this.evaluationId = evaluationId;
        this._batchResponse = batchResponse;
        var defautView = null;
        var viewMap = {};
        var viewIdArray = [];
        var _index = -1;
        this._filters = []; this._filterMap = {};
        this._headers = [];
        var init = function(oMaster, oConfig, oHeader, oFilter, oColumns, oChart) {
            oMaster.forEach(function(v,i,a) {
                var viewId = v.CONFIGURATION_ID;
                if(viewId) {
                    _index++;
                    viewIdArray.push(viewId);
                    var vObject = new View(v);
                    viewMap[viewId] = vObject;
                    if(_index == 0) {
                        defautView = viewId;
                    }
                    View.setDimensionAndMeasures(oColumns, vObject);
                    View.setChart(oChart, vObject);
                }
            });
            var Segments = Configuration.Constants;
            for(var eachSegment in Segments) {
                var func = Segments[eachSegment].func;
                if(jQuery.sap.startsWith(func,"is")) {
                    Configuration.prototype[func] = function() {
                        return true;  
                    };
                } else {
                    Configuration.prototype[func] = function() {
                        return null;  
                    };
                }
            }
            oConfig.forEach(function(oValue, index, aArray) {
                var tempObject = Segments[oValue.PROPERTY_TYPE];
                if(tempObject) {
                    var func = tempObject.func;
                    if(jQuery.sap.startsWith(func,"is")) {
                        Configuration.prototype[func] = function() {
                            return oValue.VISIBILITY == 1;  
                        };
                    } else {
                        Configuration.prototype[func] = function() {
                            return oValue.PROPERTY_VALUE;  
                        };
                    }
                } else {
                    jQuery.sap.log.error("Unknown Property_Name : " + oValue.PROPERTY_TYPE);
                }
            },this);
            if(oFilter.length) {
                oFilter.forEach(function(oValue, index, aArray){
                    this._filters.push(oValue.DIMENSION);
                    this._filterMap[oValue.DIMENSION] = new Filter(oValue);
                }, this);
            }
            if(oHeader.length) {
                oHeader.forEach(function(oValue, index, array) {
                    this.getHeaders().push(new Header(oValue));
                }, this);
            }
        };
        this.getFilters = function() {
            return this._filters;
        };
        this.getHeaders = function() {
            return this._headers;
        };
        this.getMaxViewOrder = function() {
            var max_order = 0;
            for (var view in viewMap) {
                max_order = Math.max(max_order, viewMap[view].getViewOrder());
            }
            return max_order;
        };
        this.findViewById  = function(vId) {
            if(viewMap[vId]) {
                return viewMap[vId];
            }
            return null;
        },
        this.getDefaultViewId = function() {
            return defautView;  
        },
        this.getDefaultView = function() {
            if(defautView) {
                return viewMap[defautView];
            }
            return null;
        };
        this.removeViewById=function(viewId){
            delete viewMap[viewId];
        };
        this.getAllViews = function() {
            var views = [];
            viewIdArray.forEach(function(viewId) {
                views.push({
                    ID : viewId,
                    TITLE : this.findViewById(viewId).getTitle() || "-NA- ("+viewId+")"
                })
            }, this);
            return views;
        };
        init.call(this, this._batchResponse[0].data.results,
                this._batchResponse[1].data.results,
                this._batchResponse[2].data.results,
                this._batchResponse[3].data.results,
                this._batchResponse[4].data.results,
                this._batchResponse[5].data.results);
    };
    Configuration.Constants = {
            SAP_FILTER : {
                desc : "Flag whether filter is enabled",
                func : "isFilterEnabled"
            },
            SAP_HEADER : {
                desc : "Flag whether header is enabled",
                func : "isHeaderEnabled"
            },
            SAP_AGGREGATE_VALUE : {
                desc : "Flag whether aggregate kpi value is enabled",
                func : "isAggregateValueEnabled"
            },
            QUERY_SERVICE_URI : {
                desc : "Evaluation Query Service Uri",
                func : "getQueryServiceUri"
            },
            QUERY_ENTITY_SET : {
                desc : "Result path for the query service uri",
                func : "getEntitySet"
            }
    };
    View.setDimensionAndMeasures = function(oColumns, oThis) {
        oColumns.forEach(function(oValue, index, aArray) {
            if(oValue.CONFIGURATION_ID == this.getId()) {
                this._columns.push(oValue.NAME);
                if(oValue.TYPE.toUpperCase() == "MEASURE") {
                    this._measureMap[oValue.NAME] = new Measure(oValue);
                    this._measures.push(oValue.NAME);
                } else if(oValue.TYPE.toUpperCase() == "DIMENSION") {
                    this._dimensionMap[oValue.NAME] = new Dimension(oValue);
                    this._dimensions.push(oValue.NAME);
                }
            }
        }, oThis);
    };
    View.setChart = function(oChart, oThis) {
        if(oChart.length) {
            oChart.forEach(function(oValue, index, array) {
                if(this.getId() == oValue.CONFIGURATION_ID) {
                    this.getChartConfiguration().push(new Chart(oValue));
                }
            }, oThis);
        }
    };
    var ConfigurationTree = function(eTitle) {
        var TILE_MAPPING = {
                TT : "Area Chart Tile",
                CT  : "Comparison Tile",
                NT  :"Numeric Tile",
                AT  : "Bullet Tile"
        };
        var tree= {name : eTitle, children : []};
        var allViews = this.getAllViews();
        for(var each in allViews) {
            var eachView = {
                    name : allViews[each].TITLE || "NA",
                    children : []
            };

            var view = this.findViewById(allViews[each].ID);

            /**
             * Configuration
             * 
             */
            var config = {
                    name : "*Configuration",
                    children : []
            };
            eachView.children.push(config);

            config.children.push({
                name : "Filter Enabled : "+this.isFilterEnabled()
            });
            config.children.push({
                name : "Kpi Aggregate Value Enabled: "+this.isAggregateValueEnabled()
            });
            config.children.push({
                name : "Header Enabled : "+this.isHeaderEnabled()
            });
            config.children.push({
                name : "OData Service Uri : "+this.getQueryServiceUri()
            });
            config.children.push({
                name : "Entity Set : "+this.getEntitySet()
            });

            /**
             * Filters
             */
            var filters = this.getFilters();
            var filter = {
                    name : "*Filters("+filters.length+")",
                    children : []
            };
            eachView.children.push(filter);
            filters.forEach(function(eachFilter){
                filter.children.push({
                    name : eachFilter
                });
            });

            /**
             * Chart Configuration
             * 
             */
            var chartConfig = view.getChartConfiguration().length ? view.getChartConfiguration()[0] : null;
            var chart = {
                    name : "*Chart",
                    children : []
            }
            eachView.children.push(chart);
            if(chartConfig) {
                chart.children.push({
                    name : "Type : "+chartConfig.getChartType().getText()
                });
                chart.children.push({
                    name : "Color Scheme : "+chartConfig.getColorScheme().getText()
                });
                chart.children.push({
                    name : "Value Type : "+chartConfig.getValueType()
                });
                chart.children.push({
                    name : "Axis Type : "+chartConfig.getAxisType()
                });
                chart.children.push({
                    name : "Data Limit : "+(chartConfig.getDataLimit() || "NA")
                });
                chart.children.push({
                    name : "Stacking Enabled : "+chartConfig.isStackingEnabled(view)
                });
                chart.children.push({
                    name : "Threshold Measure : "+chartConfig.getThresholdMeasure()
                });


            } else {
                chart.children.push({
                    name : "Oops!!!NO Chart Configuration"
                });
            }
            /**
             * Measure
             */
            var measures = view.getMeasures();
            var measure = {
                    name : "*Measures("+measures.length+")",
                    children : []
            };
            eachView.children.push(measure);
            measures.forEach(function(value, index, array) {
                var tempMeasure = {
                        name : value,
                        children : []
                };
                measure.children.push(tempMeasure);
                var oMeasure = view.findMeasureByName(value);
                tempMeasure.children.push({
                    name : "Color : "+(oMeasure.getColor() || "NA")
                });
                tempMeasure.children.push({
                    name : "Sort By : "+oMeasure.getSortBy()
                });
                tempMeasure.children.push({
                    name : "Sort Order : "+oMeasure.getSortOrder()
                });
                tempMeasure.children.push({
                    name : "Visible in Table : "+oMeasure.isVisibleInTable()
                });
                tempMeasure.children.push({
                    name : "Axis : "+oMeasure.getAxis()
                });
                tempMeasure.children.push({
                    name : "Is Stacked :" +oMeasure.isStacked()
                });

            }, this);

            /**
             * Dimension
             */
            var dimensions = view.getDimensions();
            var dimension = {
                    name : "*Dimensions("+dimensions.length+")",
                    children : []
            };
            eachView.children.push(dimension);
            dimensions.forEach(function(value, index, array) {
                var tempDimension = {
                        name : value,
                        children : []
                };
                dimension.children.push(tempDimension);
                var oDimension = view.findDimensionByName(value);
                tempDimension.children.push({
                    name : "Sort By : " +oDimension.getSortBy()
                });
                tempDimension.children.push({
                    name : "Sort Order : " +oDimension.getSortOrder()
                });
                tempDimension.children.push({
                    name : "Visible in Table : " + oDimension.isVisibleInTable()
                });
                tempDimension.children.push({
                    name : "Axis :" +oDimension.getAxis()
                });
                tempDimension.children.push({
                    name : "Is Stacked :" +oDimension.isStacked()
                });

            }, this);


            /**
             * Header
             */
            var headers = this.getHeaders();
            var header = {
                    name : "*Kpi_Headers("+headers.length+")",
                    children : []
            };
            eachView.children.push(header);
            headers.forEach(function(each, index) {
                var firstHeader = {
                        name : index+1+"",
                        children : []
                };
                header.children.push(firstHeader);

                firstHeader.children.push({
                    name : "Type : "+TILE_MAPPING[each.getVisualizationType()],
                });
                firstHeader.children.push({
                    name : "Reference Evaluation : "+each.getReferenceEvaluationId(),
                });
                firstHeader.children.push({
                    name : "Dimension : "+(each.getDimension() || "NA"),
                });
                firstHeader.children.push({
                    name : "isAssociatedOrOtherEvaluation : "+each.isAssociated(),
                });
            });
            tree.children.push(eachView);
        }
        return tree;
    };
    var getCacheKey = function(oParam) {
        var key = oParam.id;
        return key;
    };

    var formatEvaluation = function(evalData){
        var evaluationList=[];
        var filterList=[];
        var valueList=[];
        var filterCount1=parseInt(evalData.results[0].FILTERS_COUNT) || 1;
        var valueCount=parseInt(evalData.results[0].VALUES_COUNT) || 1;
        var totalCount=filterCount1*valueCount;
        for(var i=0;i<evalData.results.length;i+=totalCount){
            var filterCount=parseInt(evalData.results[i].FILTERS_COUNT) || 1;
            var valueCount=parseInt(evalData.results[i].VALUES_COUNT) || 1;
            var totalCount=filterCount*valueCount;
            var evalList={};
            evalList.keys={};

            evalList.keys.VALUES={};
            evalList.keys.VALUES.results = [];
            evalList.keys.FILTERS={};
            evalList.keys.FILTERS.results = [];
            evalList.keys.ID=evalData.results[i].ID;
            evalList.keys.DESCRIPTION =evalData.results[i].DESCRIPTION;
            evalList.keys.ACTION = evalData.results[i].ACTION;
            evalList.keys.INDICATOR = evalData.results[i].INDICATOR;
            evalList.keys.INDICATOR_TITLE = evalData.results[i].INDICATOR_TITLE;
            evalList.keys.TITLE = evalData.results[i].TITLE;
            evalList.keys.NAME = evalData.results[i].NAME;
            evalList.keys.SCALING=evalData.results[i].SCALING;
            evalList.keys.ODATA_URL=evalData.results[i].ODATA_URL;
            evalList.keys.ODATA_ENTITYSET=evalData.results[i].ODATA_ENTITYSET;
            evalList.keys.VIEW_NAME=evalData.results[i].VIEW_NAME;
            evalList.keys.COLUMN_NAME=evalData.results[i].COLUMN_NAME;
            evalList.keys.OWNER_NAME=evalData.results[i].OWNER_NAME;
            evalList.keys.OWNER_E_MAIL=evalData.results[i].OWNER_E_MAIL;
            evalList.keys.OWNER_ID=evalData.results[i].OWNER_ID;           
            evalList.keys.PROPERTIES = evalData.results[i].PROPERTIES||{};
            evalList.keys.ODATA_PROPERTY=evalData.results[i].ODATA_PROPERTY;
            evalList.keys.SEMANTIC_OBJECT=evalData.results[i].SEMANTIC_OBJECT;
            evalList.keys.VALUES_SOURCE=evalData.results[i].VALUES_SOURCE;
            evalList.keys.INDICATOR_TYPE=evalData.results[i].INDICATOR_TYPE;            
            evalList.keys.GOAL_TYPE=evalData.results[i].GOAL_TYPE;
            evalList.keys.DECIMAL_PRECISION=evalData.results[i].DECIMAL_PRECISION;

            for(var j=i;j<valueCount+i;j++){
                if(parseInt(evalData.results[i].VALUES_COUNT)){
                    var value={};
                    value.TYPE=evalData.results[j].TYPE;
                    value.FIXED=evalData.results[j].FIXED;
                    value.COLUMN_NAME=evalData.results[j].COLUMN_NAME_1;
                    value.ODATA_PROPERTY=evalData.results[j].ODATA_PROPERTY_1;
                    value.ID = evalData.results[j].ID;
                    evalList.keys.VALUES.results.push(value);
                }
            }
            for(var k=i;k<totalCount+i;k+=valueCount){
                if(parseInt(evalData.results[i].FILTERS_COUNT)){
                    var filter={};
                    filter.ID = evalData.results[k].ID;
                    filter.NAME=evalData.results[k].NAME;
                    filter.OPERATOR=evalData.results[k].OPERATOR;
                    filter.TYPE=evalData.results[k].TYPE_1;                
                    filter.VALUE_1=evalData.results[k].VALUE_1;
                    filter.VALUE_2=evalData.results[k].VALUE_2;
                    evalList.keys.FILTERS.results.push(filter);
                }
            }
            evaluationList.push(evalList.keys);
        }

        return evaluationList;
    };
    var _appendSapSystemToUri = function(serviceUri, sapSystem) {
        if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            serviceUri = urlParsingService.addSystemToServiceUrl(serviceUri, sapSystem);
        }
        return serviceUri;
    };
    return  {
        getConfigurationTree : function(evaluationId, sCallback, fCallback) {
            this.loadConfiguration({
                evaluationId : evaluationId,
                cache : true,
                success : function(batchResponse) {
                    var Configuration = this.parse(evaluationId, batchResponse);
                    sCallback.call(null, ConfigurationTree.apply(Configuration,["Evaluation"]));
                },
                error : function(errorMessage) {
                    jQuery.sap.log.error("Error Fetching Drilldown Configuration")
                },
                context : this
            });
        },
        parse : function(evaluationId, batchResponse) {
            return new Configuration(evaluationId, batchResponse);
        },
        getConfigurationFromCache : function(evalId) {
        	return _cache[evalId];
        },
        resetDrilldownConfiguration : function(evaluationId) {
        	if(evaluationId) {
            	_cache[evaluationId] = null;
        	}
        },
        _getModelerServicesAdapter : function() {
        	return sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
        },
        _getRuntimeServiceUrl : function() {
        	return this._getModelerServicesAdapter().getRuntimeServiceUrl();
        },
        loadConfiguration : function(oParam, batchCallReference) {
          var that = this;
          var evaluationId = oParam.evaluationId;
          var cache = !!oParam.cache;
          if(_cache[evaluationId] && cache) {
              oParam.success.call(oParam.context || null, _cache[evaluationId]);
          } else {
              var oDataModel = null;
              //var serviceUri = "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
              var serviceUri = this._getRuntimeServiceUrl();
              serviceUri = _appendSapSystemToUri(serviceUri, oParam.sapSystem);
              
              var callingBatch = function(model) {
                   that.loadConfigurationBatch(model, batchCallReference,oParam);
              };
              
              if(sap.suite.ui.smartbusiness.lib.Util.odata) {
                  oDataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri, callingBatch);
              } else {
                  oDataModel = new sap.ui.model.odata.ODataModel(serviceUri,{
                  json : true,
                  loadMetadataAsync : true
                  });
                  oDataModel.attachMetadataLoaded(function(){
                  callingBatch(oDataModel)
                  });
              }
              // need to check if returning modal is required, since this function is only get called twice both has the refernce parameter
              //return oDataModel;
          }
      },
      loadConfigurationBatch : function(oDataModel, callRef, oParam){
    	  var evaluationId = oParam.evaluationId;
          oDataModel.setTokenHandlingEnabled(this._getModelerServicesAdapter().isTokenHandlingEnabledForODataRead());
          var masterUri = "/DDA_MASTER?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=CONFIG_ORDER";
          var configUri = "/DDA_CONFIG?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
          var headerUri = "/DDA_HEADER?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=VISUALIZATION_ORDER";
          var filtersUri = "/DDA_FILTERS?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
          var columnsUri = "/DDA_COLUMNS?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'")+"&$orderby=COLUMNS_ORDER";
          var chartUri = "/DDA_CHART?$filter="+_encodeUrl("EVALUATION_ID eq '"+evaluationId+"'");
          var request1 = oDataModel.createBatchOperation(masterUri,"GET");
          var request2 = oDataModel.createBatchOperation(configUri,"GET");
          var request3 = oDataModel.createBatchOperation(headerUri,"GET");
          var request4 = oDataModel.createBatchOperation(filtersUri,"GET");
          var request5 = oDataModel.createBatchOperation(columnsUri,"GET");
          var request6 = oDataModel.createBatchOperation(chartUri,"GET");
          oDataModel.addBatchReadOperations([request1, request2, request3, request4, request5, request6]);
          var oDataCallReference = oDataModel.submitBatch(function(data, response) {
              var batchResponse = data.__batchResponses;
              _cache[evaluationId] = batchResponse;
              oParam.success.call(oParam.context || null, batchResponse);
              //oParam.success.call(null,A[0].data.results,A[1].data.results,A[2].data.results,A[3].data.results,A[4].data.results,A[5].data.results,A[6].data.results);
          }, function(errorObject){
              jQuery.sap.log.error("Failed to fetch DDA Configuration");
              if(oParam.error) {
                  oParam.error.call(oParam.context || null, errorObject);
              }
          }, true);
          callRef(oDataCallReference);
          return oDataCallReference;  
      },

        setEvaluationsCache : function(oParam, callback) {
            var that = this;
            if(!oParam.evalIdArray) {
                throw new Error("Evaluation Id Not Found")
            }
            var cache_key = getCacheKey(oParam);
            var model =null;
            var serviceUri = this._getModelerServicesAdapter().addSystemToServiceUrl(this._getRuntimeServiceUrl(), oParam.sapSystem);
            //var urlParsingService = sap.ushell.Container.getService("URLParsing");
            //var serviceUri = urlParsingService.addSystemToServiceUrl("/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata", oParam.sapSystem);
            if(sap.suite.ui.smartbusiness.lib.Util.odata) {
                model = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(serviceUri, true);
            }
            var filterValue = ""
                oParam.evalIdArray.forEach(function(currentEvaluationId) {
                    var cache_key = currentEvaluationId;
                    var evaluationObject = sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(cache_key);
                    if(!evaluationObject) 
                        filterValue += "ID eq '#EVALUATION_ID' or ".replace("#EVALUATION_ID",cache_key);
                });
            if(filterValue){
                filterValue = filterValue.slice(0,-4);
                var oDataParamObject = {};
                oDataParamObject["$filter"] = filterValue;
                oDataParamObject["$orderby"] = "ID,NAME,OPERATOR,VALUE_1,VALUE_2";
                var callRef = model.read("/EVALUATIONS_CORE", null, oDataParamObject, true, function(data) {
                    if(data.results && data.results.length) {
                        var evalList = formatEvaluation(data);
                        for(var i=0; i<evalList.length; i++)                            
                            sap.suite.ui.smartbusiness.lib.Util.cache.setEvaluationById(evalList[i].ID, evalList[i]);
                        oParam.success.call(oParam.context || null);
                    } else {
                        jQuery.sap.log.error("Empty Evaluation returned");
                        oParam.success.call(oParam.context || null);
                    }
                }, function(){
                    jQuery.sap.log.error("Error fetching Evaluations");
                    oParam.success.call(oParam.context || null);
                });
                return callRef;
            }
            else{
                oParam.success.call(oParam.context || null);
                return null;
            }
        },       
        getEvaluationById : function(oParam) {
            if(!oParam.id) {
                throw new Error("Evaluation Id Not Found")
            }
            var cache_key = getCacheKey(oParam);
            if(oParam.cache) {
                var evaluationObject = sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(cache_key);
                if(evaluationObject) {
                    if(oParam.success) {
                        oParam.success.call(oParam.context || null, evaluationObject);
                        return null;
                    }
                }
            }
            var model =null;
            var serviceUri = this._getModelerServicesAdapter().addSystemToServiceUrl(this._getRuntimeServiceUrl(), oParam.sapSystem);
            //var urlParsingService = sap.ushell.Container.getService("URLParsing");
            //var serviceUri = urlParsingService.addSystemToServiceUrl("/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata", oParam.sapSystem);
            if(sap.suite.ui.smartbusiness.lib.Util.odata) {
                model = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(serviceUri, true);
            }
            var filterValue = "ID eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var evalData = null;
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var callRef = model.read("/EVALUATIONS", null, oDataParamObject, true, function(data) {
                if(data.results && data.results.length) {
                    evalData = data.results[0];
                    sap.suite.ui.smartbusiness.lib.Util.cache.setEvaluationById(cache_key, evalData);
                    oParam.success.call(oParam.context || null, evalData);
                } else {
                    oParam.error.call(oParam.context || null, "Empty Results with EvaluationID : "+oParam.id);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return callRef;
        }
    };
})(); 
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.CustomTable') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.CustomTable");
sap.m.Table.extend("sap.suite.ui.smartbusiness.drilldown.lib.CustomTable", {
       metadata : {
              properties : {
                     actionItems : {
                            type : "any", multiple : true
                     }
              }
       },
       renderer  : {}
});

sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.init = function() {
       sap.m.Table.prototype.init.apply(this);
       this._selectedContext = [];
       var oCustomHeader = new sap.m.Bar({
           contentMiddle:[ new sap.m.Label({
               text:"{i18n>TABLE_POPOVER_HEADING}"
           })],
           contentRight:(jQuery.device.is.phone) ? [] :
               [new sap.m.Button({
                   icon:"sap-icon://decline",
                   width : "2.375rem",
                   press:jQuery.proxy(this._closePopover, this)
               })]
       });
       this._popOver = new sap.m.ResponsivePopover({
           modal:false,
           enableScrolling:true,
           verticalScrolling:true,
           horizontalScrolling:false,
           placement:sap.m.PlacementType.Auto,
           contentWidth:"18rem",
           customHeader:oCustomHeader
       }).addStyleClass("smartbusinessTablePopover");
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._popOver, true);
};

sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype._closePopover = function() {
       if(this._popOver.isOpen()) {
              this._popOver.close();
       }
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.setPopoverFooter = function(oContent) {
    this._popOver.removeAllContent();
    this._popOver.addContent(oContent);
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.onBeforeRendering = function() {
       this._popOver.getCustomHeader().getContentMiddle()[0].setText(this.getModel("i18n").getProperty("TABLE_POPOVER_HEADING"));
       this.attachItemPress(function(oEvent) {
    	   var a = oEvent.getParameters().listItem || oEvent.getParameters().listItems[0];
    	   this.popoverOpenAt = a;
    	   var selectedItems=[];
    	   var items = this.getSelectedItems();
    	   var columns = this.getColumns();
    	   if(items.length) {
    		   var item = items[0];
    		   var bindingData = item.getBindingContext().getObject();
    		   var obj=  {};
    		   for(var each in bindingData) {
    			   obj[each] = bindingData[each];
    		   }
    		   selectedItems.push(obj);
    		   this.setSelectedContext(selectedItems);
    		   if(true || this._notEmpty()) {
    			   this._popOver.openBy(a.getCells()[parseInt(a.getCells().length/2) || 0],false);
    		   }
    	   } else {
    		   this._closePopover();
    	   }
       });
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype._notEmpty = function() {
    var content = this._popOver.getContent()
    var notEmpty = false;
    if(content && content.length > 0) {
        var vBox = content[0];
        var listItems = vBox.getItems();
        listItems.forEach(function(list){
            if(list.getItems().length > 0) {
                notEmpty = true;
                return false;
            }
        });
    } 
    return notEmpty;
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.setSelectedContext = function(aSelected) {
       this._selectedContext = aSelected;
};
sap.suite.ui.smartbusiness.drilldown.lib.CustomTable.prototype.getSelectedContext = function(aSelected) {
       return this._selectedContext;
};
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/CustomTable.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Hash') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Hash");
sap.suite.ui.smartbusiness.drilldown.lib.Hash = (function() {
	var oldHash = null;
	var newHash = null;
	var semanticObject=null,action=null,startupParams=null,applicationParams=null;
	var HASH=null;
	var delimiter="|^",escapedDelimiter=/\|\^/g;
	function reset() {
		semanticObject = null,action=null,startupParams=null,applicationParams=null;
		HASH = null;
	}
	function getApplicationParams(paramsStr) {
		var obj= {};
		if(paramsStr) {
			var slashSplits = paramsStr.split("/");
			for(var i = 1;i < slashSplits.length;i++) {
				var each = slashSplits[i];
				var keyValue = each.split("=");
				if(obj[keyValue[0]]) {
				} else {
					obj[keyValue[0]] = [];
				}
				if(keyValue[1] || keyValue[1]=='') {
					var values = decodeURIComponent(keyValue[1]).split(",");
					var arrays = obj[keyValue[0]];
					for(var j=0;j<values.length;j++) {
						if(arrays.indexOf(values[j]) == -1) {
							values[j]=values[j].replace(escapedDelimiter,",");
							arrays.push(values[j]);
						}
					}
				}
			}
		}
		return obj;
	}
	function getStartupParams(paramsStr) {
		var obj= {};
		if(paramsStr) {
			var splits = paramsStr.split("&");
			for(var i = 0;i < splits.length;i++) {
				var each = splits[i];
				var keyValue = each.split("=");
				if(obj[keyValue[0]]) {
				} else {
					obj[keyValue[0]] = [];
				}
				var arrays = obj[keyValue[0]];
				var value = decodeURIComponent(keyValue[1])
				if(arrays.indexOf(value) == -1) {
					arrays.push(value);
				}
			}
		}
		return obj;
	}
	function parseHash(newHash) {
		newHash = newHash || window.location.hash;
		if(newHash) {
			var regex = /^(?:#|)([\S\s]*?)(&\/[\S\s]*)?$/;
			var parts = regex.exec(newHash);
			var part1 = parts[1];
			var part2  = parts[2];
			var regex2 = /^([A-Za-z0-9_]+)-([A-Za-z0-9_]+)[\?]?(.*)/;
			if(part1) {
				var semanticParts = regex2.exec(part1);
				semanticObject = semanticParts[1];
				action = semanticParts[2];
				startupParams = getStartupParams(semanticParts[3]);
			}
			applicationParams = getApplicationParams(part2);
		}
	}
	function __checkAndUpdateHash() {

	};
	if(window.addEventListener) {
//		window.addEventListener("hashchange", function(oEvent) {
//			oldHash = "#"+oEvent.oldURL.split("#")[1];
//			newHash = window.location.hash;
//			reset();
//			parseHash(newHash);
//		});
	}
	function prepareHash() {
		var str = "";
		if(semanticObject) {
			str+=semanticObject;
		}
		if(action && semanticObject) {
			str+="-"+action;
		}
		if(startupParams) {
			str+="?";
			for(var each in startupParams) {
				var params = startupParams[each];
				for(var i=0;i<params.length;i++) {
					str+=each+"="+encodeURIComponent(params[i])+"&";
				}
			}
			str=str.substring(0,str.length-1);
		}
		if(applicationParams) {
			var params = "";
			for(var each in applicationParams) {
				if(applicationParams[each] instanceof Array){
					applicationParams[each].forEach(function(s,i,a){
						a[i]=(s+"").replace(/,/g,delimiter);
					});
				}
				params+=each+"="+encodeURIComponent(applicationParams[each])+"/";
			}
			if(params.length) {
				params = params.substring(0,params.length-1);
				params = "&/"+params;
			}
			str+=params;
		}
		return str;
	};
	function getHash() {
	    return prepareHash();
	};
	function updateHash() {
		var str = prepareHash();
		window.location.hash = str;
		HASH = str;
		parseHash();
	}
	parseHash();
	function updateSemanticObject(sObject, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		semanticObject = sObject;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateAction(actionStr, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		action = actionStr;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function setStartupParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		startupParams = params;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function removeStartupParameter(paramName, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		if(startupParams && startupParams[paramName]) {
			startupParams[paramName] = null;
			delete startupParams[paramName];
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function setApplicationParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		applicationParams = params;
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function removeApplicationParameter(paramName, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		if(applicationParams && applicationParams[paramName]) {
			applicationParams[paramName] = null;
			delete applicationParams[paramName];
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateStartupParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		if(!startupParams) {
			startupParams= params;
		}  else {
			for(var each in params) {
				var values = params[each];
				if(!startupParams[each]) {
					startupParams[each] = [];
				}
				var arrays = startupParams[each];
				for(var j=0;j<values.length;j++) {
					if(arrays.indexOf(values[j]+"")==-1) {
						arrays.push(values[j]+"");
					}
				}
			}
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	function updateApplicationParameters(params, bUpdateUrl) {
		if(typeof bUpdateUrl=='undefined') {
			bUpdateUrl = true;
		}
		bUpdateUrl = !!bUpdateUrl;
		if(!applicationParams) {
			applicationParams= params;
		}  else {
			for(var each in params) {
				var values = params[each];
				if(!jQuery.isArray(values)) {
					values = [values];
				}
				if(!applicationParams[each]) {
					applicationParams[each] = [];
				}
				var arrays = applicationParams[each];
				for(var j=0;j<values.length;j++) {
					if(arrays.indexOf(values[j]+"")==-1) {
						arrays.push(values[j]+"");
					}
				}
			}
		}
		if(bUpdateUrl) {
			updateHash();
		}
	}
	return {
		getSemanticObject : function() {
            reset();
            parseHash(window.location.hash);
			return semanticObject;
		},
		getAction : function() {
            reset();
            parseHash(window.location.hash);
			return action;
		},
		getStartupParameters : function() {
            reset();
            parseHash(window.location.hash);
			return startupParams;
		},
		getApplicationParameters : function(excludeParamsArray /*Array*/) {
			reset();
			parseHash(window.location.hash);
			if(excludeParamsArray && excludeParamsArray.length) {
			    excludeParamsArray.forEach(function(excludeParam){
			        delete applicationParams[excludeParam];
			    });
			}
			return applicationParams;
			
		},
		setSemanticObject : function(sObject, bUpdateUrl) {
			updateSemanticObject(sObject, bUpdateUrl);
			return this;
		},
		setAction : function(action, bUpdateUrl) {
			updateAction(action, bUpdateUrl);
			return this;
		},
		setStartupParameters : function(params, bUpdateUrl) {
			setStartupParameters(params, bUpdateUrl);
			return this;
		},
		updateStartupParameters : function(params, bUpdateUrl) {
			updateStartupParameters(params, bUpdateUrl);
			return this;
		},
		removeStartupParameter : function(paramName, bUpdateUrl) {
			removeStartupParameter(paramName, bUpdateUrl);
			return this;
		},
		setApplicationParameters : function(params, bUpdateUrl) {
			setApplicationParameters(params, bUpdateUrl);
			return this;
		},
		updateApplicationParameters : function(params, bUpdateUrl) {
			updateApplicationParameters(params, bUpdateUrl);
			return this;
		},
		removeApplicationParameter : function(param, bUpdateUrl) {
			removeApplicationParameter(param, bUpdateUrl);
			return this;
		},
		getUrlParameters : function() {
			return jQuery.sap.getUriParameters();
		},
		updateHash : function() {
			updateHash();
		},
		getHash : function() {
			return getHash();
		}
	};
})();
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Hash.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager");
sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager = (function() {
    "use strict";
    var headerMiniCharts = [];
    var VISUALIZATION_TYPE = {
            NT: "Numeric",
            CT: "Comparison",
            AT: "Bullet",
            TT : "AreaChart",
            CM : "MeasureComparison"
//            HT: "HarveyBall"
    };
    var VisualizationTypeWeight = {
            "NT" : 5,
            "AT" : 4,
            "CT" : 3,
            "TT" : 2,
            "CM" : 1,
            "HT" : 0
    };
    var urlParsingService = sap.ushell.Container.getService("URLParsing");
    /*
     * utility function which returns relevant 
     */
    var getRelevantFilter = function(oParam, obj) {
        var evalId = "";
        if(obj.isAssociated())
            evalId = obj.getReferenceEvaluationId();
        else
            evalId = obj.getReferenceEvaluationId();

        var retFilter = [];
		var oDataUri = "";
		if(sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(evalId))
			oDataUri = sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(evalId).ODATA_URL;
		if(oDataUri){
			var sUri = urlParsingService.addSystemToServiceUrl(
					sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(evalId).ODATA_URL,
					oParam.sapSystem);
			var entitySet = sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(evalId).ODATA_ENTITYSET;
			var allDimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllDimensions(sUri,entitySet);

			for(var i = 0; i < oParam.urlFilters.length; i++){
				if(allDimensions.indexOf(oParam.urlFilters[i].NAME) != -1)
					retFilter.push(oParam.urlFilters[i]);
			}
		}
		return retFilter;
    };

    return {
        renderHeaders : function(oParam){
            if(oParam.allTiles.length){
                var headers = oParam.allTiles;
                headerMiniCharts = [];
                headers.forEach(function(obj){
                    var tileType = obj.getVisualizationType();
                    if(VISUALIZATION_TYPE[tileType]) {
                        var tileControlName = VISUALIZATION_TYPE[tileType];
                        jQuery.sap.require("sap.suite.ui.smartbusiness.tiles."+tileControlName);
                        if(sap.suite.ui.smartbusiness.tiles[tileControlName]) {
                            var filters = getRelevantFilter(oParam,obj);
                            var tile = new sap.suite.ui.smartbusiness.tiles[tileControlName]({
                                dimension : obj.getDimension(),
                                evaluationId : obj.getEvaluationId(),
                                associationEvaluationId : obj.getReferenceEvaluationId(),
                                sapSystem : oParam.sapSystem,
                                additionalFilters : filters,
                                tileConfiguration : obj.getTileConfiguration(),
                                navigation : oParam.onNavigation,
                                layoutData: new sap.ui.layout.GridData({
                                	span:"L6 M6 S6"
                                })
                            }).addStyleClass("drilldownKpiTiles");
                            headerMiniCharts.push(tile);
                            var headerItem = new sap.suite.ui.commons.HeaderCellItem();
                            var headerCell = new sap.suite.ui.commons.HeaderCell();
                            if(jQuery.device.is.desktop){
                            	oParam.headerContainer.addItem(tile);
                            }
                            else{
                            	oParam.headerContainer.addContent(tile);
                            }
                            if(oParam.urlFilters.length){
                                if(filters && filters.length){}
                                else{
                                    tile.setVisible(false);
                                    tile.setClick(false);
                                }
                            }
                        } else {
                            jQuery.sap.log.error("Ignoring the tile "+tileControlName +" : Not Implemented Yet");
                        }
                    } else {
                        jQuery.sap.log.error("No Tile Mapping  for Visualisation Type : "+tileType);
                    }
                });
            }
        },

        hashChangeListner : function(oParam){
            if(oParam.firstTimeFlag){
                var affectedTiles = [];
                var headers = oParam.allTiles;
                for(var i = 0; i <headers.length; i++){
                    var oDataModel = null;
                    var obj = headers[i];
                    var curTile = headerMiniCharts[i];
                    if(curTile){// is undefined if header strip is hidden
                        //curTile.abortODataCalls();
                        var filter = getRelevantFilter(oParam, obj);
                        if(oParam.urlFilters.length){
                            if(filter && filter.length){
                                curTile.$().css("opacity","1");
                                //curTile.setVisible(true);
                                curTile.setAdditionalFilters(filter);   
                                curTile.$().off("click");   //restore tilePresssed event(remove override click)
                            }
                            else {
                                //curTile.setVisible(false);
                                curTile.$().css("opacity","0.2");
                                curTile.$().click(function(){
                                    return false;   //disable tile click event
                                });
                            }
                        }
                        else{
                            //curTile.setVisible(true);
                            curTile.$().css("opacity","1");
                            curTile.setAdditionalFilters(filter);
                            curTile.$().off("click");
                        }
                    }
                }
            }
        },
    }
})();
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/MiniChartManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.Performance') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.Performance");
sap.suite.ui.smartbusiness.drilldown.lib.Performance = function(oParam) {
    this.oParam = oParam;
    this._init();
};
sap.suite.ui.smartbusiness.drilldown.lib.Performance.prototype = {
        _processData : function(junkData) {
            var data = [];
            for(var each in junkData) {
                var oData = junkData[each];
                data.push({
                    "TimeTaken" : (oData.time)/1000,
                    "Call" : oData.title
                });
            }
            return data;
        },
        _init : function() {
            var that = this;
            this._dataSet = new sap.viz.ui5.data.FlattenedDataset({
                data : {
                    path : "/"
                }
            });
            var dimensions = ["Call"];
            var measures = ["TimeTaken"];
            dimensions.forEach(function(sDimension) {
                var dimDefinition = new sap.viz.ui5.data.DimensionDefinition({
                    name : sDimension,
                    axis : 1,
                    value : {
                        path : sDimension
                    }
                });
                this._dataSet.addDimension(dimDefinition);
            }, this);
            measures.forEach(function(sMeasure) {
                var measureDefinition = new sap.viz.ui5.data.MeasureDefinition({
                    name : sMeasure,
                    value : {
                        path : sMeasure
                    }
                });
                this._dataSet.addMeasure(measureDefinition);
            }, this);
            this._oChart = new sap.viz.ui5.Bar({
                dataset : this._dataSet,
                width : "750px",
                height : "380px"
            });
            this._oChart.setModel(new sap.ui.model.json.JSONModel());
            this._oDialog = new sap.m.Dialog({
                title : "Performance Check",
                contentWidth : "800px",
                contentHeight : "400px",
                endButton : new sap.m.Button({
                    text : "Close",
                    press : function() {
                        that._oDialog.close();
                        
                    }
                })
            });
            this._oDialog.addContent(this._oChart);
        },
        start : function(data, bCompactMode) {
            var processedData = this._processData(data);
            this._oChart.getModel().setData(processedData);
            var that = this;
            if(!this._oDialog.isOpen()) {
                if(bCompactMode) {
                    this._oDialog.addStyleClass("sapUiSizeCompact");
                } else {
                    this._oDialog.removeStyleClass("sapUiSizeCompact"); 
                }
                this._oDialog.open();
                setTimeout(function() {
                    that._oChart.rerender();
                },200);
            }
        }
};
}; // end of sap/suite/ui/smartbusiness/drilldown/lib/Performance.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.AddToHome.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.AddToHome.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ui.controller("sap.suite.ui.smartbusiness.drilldown.view.AddToHome", {
    onInit : function() {
        this.drilldownController = this.getView().getViewData();
        this.evaluationApi  = this.drilldownController.EVALUATION;
        this.thresholds = this.evaluationApi.getThresholds();
        this.LAYOUT = this.byId("container");
        this.SAP_SYSTEM  = this.drilldownController.SAP_SYSTEM;
        try {
            this.LAYOUT_MODEL = new sap.ui.model.json.JSONModel({
                TITLE : "",
                CL : this.thresholds.getCriticalLow(),
                CH : this.thresholds.getCriticalHigh(),
                WL : this.thresholds.getWarningLow(),
                WH : this.thresholds.getWarningHigh(),
                TA : this.thresholds.getTarget(),
                TC : this.thresholds.getTrend(),
                RE : this.thresholds.getReference(),
                MINIMIZING_KPI : this.evaluationApi.isMinimizingKpi(),
                MAXIMIZING_KPI : this.evaluationApi.isMaximizingKpi(),
                TARGET_KPI : this.evaluationApi.isTargetKpi()
            });
            this.LAYOUT.setModel(this.LAYOUT_MODEL),
            this.createForm(this.evaluationApi.getThresholdValueType());
        }catch(e) {
            
        }
    },
    createForm : function(valueSource) {
        var _getVisibilityObject = function(modelProperty) {
            return  {
                parts : [
                    {path : modelProperty},
                    {path : "/TARGET_KPI"}
                ],
                formatter : function(MinOrMax, target) {
                    if(MinOrMax || target) {
                        return true;
                    }
                    return false;
                }
            }
        };
        var formLayout = null;
        var nonEditableLabel = null;
        if(valueSource == "MEASURE") {
        	formLayout = new sap.ui.layout.form.SimpleForm({
                content : [
                   new sap.m.Label({text : "{i18n>SUB_TITLE_LABEL}", required : true}),
                   new sap.m.Input({value : "{/TITLE}"})
                ]
            });
            nonEditableLabel = new sap.m.Label({
                text : "{i18n>DYNAMIC_MEASURE_NOT_EDITABLE}"
            });
            nonEditableLabel.addStyleClass("labelDynamicThresholdNotEditable");
        }
        else if(valueSource == "RELATIVE") {
        	formLayout = new sap.ui.layout.form.SimpleForm({
                content : [
                   new sap.m.Label({text : "{i18n>SUB_TITLE_LABEL}", required : true}),
                   new sap.m.Input({value : "{/TITLE}"}),
                   
                   new sap.m.Label({text : "{i18n>CRITICAL_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_HIGH_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>WARNING_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_HIGH_VALUE_HELP}"}),
                   
                   new sap.m.Label({text : "{i18n>TARGET_LABEL}"}),
                   new sap.m.Input({value : "{/TA}", valueState : sap.ui.core.ValueState.None, valueStateText : "{i18n>TARGET_VALUE_HELP}", editable:false}),
                   
                   new sap.m.Label({text : "{i18n>WARNING_LOW_LABEL}", visible : _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_LOW_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>CRITICAL_LOW_LABEL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CL}", visible : _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_LOW_VALUE_HELP}"}),
                ]
            });
        } else {
        	formLayout = new sap.ui.layout.form.SimpleForm({
                content : [
                   new sap.m.Label({text : "{i18n>SUB_TITLE_LABEL}", required : true}),
                   new sap.m.Input({value : "{/TITLE}"}),
                   
                   new sap.m.Label({text : "{i18n>CRITICAL_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_HIGH_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>WARNING_HIGH_LABEL}", visible : _getVisibilityObject("/MINIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WH}", visible : _getVisibilityObject("/MINIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_HIGH_VALUE_HELP}"}),
                   
                   new sap.m.Label({text : "{i18n>TARGET_LABEL}"}),
                   new sap.m.Input({value : "{/TA}", valueState : sap.ui.core.ValueState.None, valueStateText : "{i18n>TARGET_VALUE_HELP}"}),
                   
                   new sap.m.Label({text : "{i18n>WARNING_LOW_LABEL}", visible : _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/WL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Warning, valueStateText : "{i18n>WARNING_LOW_VALUE_HELP}"}),
                   new sap.m.Label({text : "{i18n>CRITICAL_LOW_LABEL}",visible :  _getVisibilityObject("/MAXIMIZING_KPI")}),
                   new sap.m.Input({value : "{/CL}", visible : _getVisibilityObject("/MAXIMIZING_KPI"), valueState : sap.ui.core.ValueState.Error, valueStateText : "{i18n>CRITICAL_LOW_VALUE_HELP}"}),
                ]
            });
        }
        this.LAYOUT.removeAllItems();
        this.LAYOUT.addItem(formLayout);
        if(nonEditableLabel) {
            this.LAYOUT.addItem(nonEditableLabel);
        }
    },
    validate : function(sCallback, fCallback) {
    	var i18nModel = this.drilldownController.getView().getModel("i18n");
        var modelData = this.LAYOUT_MODEL.getData();
        var object = {title : ""};
        var targetType = this.thresholds.getTargetType();
        
        if(targetType === "FIXED"){
        	
        	var notNumberErrors = this._areEvaluationValuesNumber(modelData);
        	if(notNumberErrors.length){
        		var msg = "";
        		for(i=0;i<notNumberErrors.length;i++){
        			msg = msg + i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_" + notNumberErrors[i]) + "\n";
				}
				
				fCallback.call(this, {errorMessage : msg});
				return;
        	}
        	
			var validatedEvalValues = this._validateEvaluationValues(modelData);
			if(validatedEvalValues.length){

				var msg = i18nModel.getProperty("ERROR_ENTER_VALID_THRESHOLD_VALUES");
				var i;
				for(i=0;i<validatedEvalValues.length;i++){
					if(validatedEvalValues[i]==="CL"){
						if(this.evaluationApi.getGoalType() === "RA"){
							msg = msg+"\n"+i18nModel.getProperty("CRITICAL_LOW");
						}
						else{
							msg = msg+"\n"+i18nModel.getProperty("CRITICAL");
						}
					}
					if(validatedEvalValues[i]==="WL"){
						if(this.evaluationApi.getGoalType() === "RA"){
							msg = msg+"\n"+i18nModel.getProperty("WARNING_LOW");
						}
						else{
							msg = msg+"\n"+i18nModel.getProperty("WARNING");
						}
					}
					if(validatedEvalValues[i]==="TA"){
						msg = msg+"\n"+i18nModel.getProperty("TARGET");
					}
					if(validatedEvalValues[i]==="CH"){
						if(this.evaluationApi.getGoalType() === "RA"){
							msg = msg+"\n"+i18nModel.getProperty("CRITICAL_HIGH");
						}
						else{
							msg = msg+"\n"+i18nModel.getProperty("CRITICAL");
						}
					}
					if(validatedEvalValues[i]==="WH"){
						if(this.evaluationApi.getGoalType() === "RA"){
							msg = msg+"\n"+i18nModel.getProperty("WARNING_HIGH");
						}
						else{
							msg = msg+"\n"+i18nModel.getProperty("WARNING");
						}
					}
				}
				
				fCallback.call(this, {errorMessage : msg});
				return;
			}
		}
        if(targetType === "RELATIVE"){
			var patt = /^(?=.*\d)\d*(?:\.\d\d)?$/;
			var msg="";

			if(this.evaluationApi.getGoalType() === "MA"){
				if((modelData.WL!="" && modelData.WL!=null) && (modelData.CL!="" && modelData.CL!=null) && parseInt(modelData.WL) <= parseInt(modelData.CL)){
					msg += i18nModel.getProperty("CRITICAL_SHOULD_BE_LESS_THAN_WARNING");
				}
				if(modelData.WL>=100 && (modelData.WL !="" && modelData.WL!=null)){
					msg +="\n" +i18nModel.getProperty("WARNING_SHOULD_BE_LESS_THAN_100");
				}
				if(modelData.CL!="" && (modelData.CL>=100 && modelData.CL!=null)){
					msg +="\n" +i18nModel.getProperty("CRITICAL_SHOULD_BE_LESS_THAN_100");
				}
				if((modelData.WL !="" && modelData.WL!=null) && !patt.test(modelData.WL)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_WARNING");
				}
				if((modelData.CL!="" && modelData.CL!=null) && !patt.test(modelData.CL)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_CRITICAL");
				}
			}
			if(this.evaluationApi.getGoalType() === "MI"){
				if((modelData.CH!="" && modelData.CH!=null) && (modelData.WH!="" && modelData.WH!=null) && parseInt(modelData.CH) <= parseInt(modelData.WH)){
					msg += i18nModel.getProperty("CRITICAL_SHOULD_BE_MORE_THAN_WARNING"); 
				}
				if(modelData.CH<=100 && (modelData.CH !="" && modelData.CH!=null)){
					msg += "\n"+i18nModel.getProperty("CRITICAL_SHOULD_BE_MORE_THAN_100");
				}
				if(modelData.WH<=100 && (modelData.WH !="" && modelData.WH!=null)){
					msg += "\n"+i18nModel.getProperty("WARNING_SHOULD_BE_MORE_THAN_100");
				}
				if(modelData.CH!="" && modelData.CH!=null && !patt.test(modelData.CH)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_CRITICAL");
				}
				if((modelData.WH!="" && modelData.WH!=null && !patt.test(modelData.WH))){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_WARNING");
				}
			}
			if(this.evaluationApi.getGoalType() === "RA"){
				if((modelData.CH!="" && modelData.CH!=null) && (modelData.CH!="" && modelData.CH!=null) && parseInt(modelData.CH) <= parseInt(modelData.WH)){
					msg += i18nModel.getProperty("CRITICAL_HIGH_MORE_THAN_WARNING_HIGH");
				}
				if((modelData.WL!="" && modelData.WL!=null) && (modelData.CL!="" && modelData.CL!=null) && parseInt(modelData.WL) <= parseInt(modelData.CL)){
					msg += "\n"+i18nModel.getProperty("WARNING_LOW_MORE_THAN_CRITICAL_LOW");
				}
				if(modelData.CH<=100 && (modelData.CH !="" && modelData.CH!=null)){
					msg += "\n"+i18nModel.getProperty("CRITICAL_HIGH_SHOULD_BE_MORE_THAN_100");
				}
				if(modelData.WH<=100 && (modelData.WH !="" && modelData.WH!=null)){
					msg += "\n"+i18nModel.getProperty("WARNING_HIGH_SHOULD_BE_MORE_THAN_100");
				}
				if(modelData.CL>=100 && (modelData.CL!="" && modelData.CL!=null)){
					msg += "\n"+i18nModel.getProperty("CRITICAL_LOW_SHOULD_BE_LESS_THAN_100");
				}
				if(modelData.WL>=100 && (modelData.WL !="" && modelData.WL!=null)){
					msg += "\n"+i18nModel.getProperty("WARNING_LOW_SHOULD_BE_LESS_THAN_100");
				}
				if((modelData.WL !="" && modelData.WL!=null) && !patt.test(modelData.WL)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_WARNING_LOW");
				}
				if((modelData.CL!="" && modelData.CL!=null) && !patt.test(modelData.CL)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_CRITICAL_LOW");
				}
				if(modelData.CH!="" && modelData.CH!=null && !patt.test(modelData.CH)){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_CRITICAL_HIGH");
				}
				if((modelData.WH!="" && modelData.WH!=null && !patt.test(modelData.WH))){
					msg += "\n" +i18nModel.getProperty("ENTER_NUMERIC_VALUE_FOR_WARNING_HIGH");
				}
			}
			if(msg!=""){
				fCallback.call(this, {errorMessage : msg});
				return;
			}
		}
        
        if(this.evaluationApi.getThresholdValueType() == "MEASURE") {
            if(!modelData.TITLE.trim()) {
                fCallback.call(this, {errorMessage : this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_TITLE_MISSING")});
            } else {
                object.title  = modelData.TITLE.trim();
                sCallback.call(this, object);
            }
        } else if(this.evaluationApi.getThresholdValueType() == "RELATIVE") {
        	if(!modelData.TITLE.trim()) {
                fCallback.call(this, {errorMessage : this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_TITLE_MISSING")});
                return;
            }
        	object.title  = modelData.TITLE.trim();
            object.evaluationValues = [];
            var targetValue = modelData.TA ? modelData.TA.trim() : null;
            var CLValue = modelData.CL ? modelData.CL.trim() : null;
            var CHValue = modelData.CH ? modelData.CH.trim() : null;
            var WLValue = modelData.WL? modelData.WL.trim() : null;
            var WHValue = modelData.WH? modelData.WH.trim() : null;
            if(targetValue) {
                object.evaluationValues.push({
                    TYPE :"TA",
                    FIXED : null,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : targetValue,
                    ODATA_PROPERTY : null
                });
            }
            if(CLValue) {
                object.evaluationValues.push({
                    TYPE :"CL",
                    FIXED : CLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(CHValue) {
                object.evaluationValues.push({
                    TYPE :"CH",
                    FIXED : CHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WLValue) {
                object.evaluationValues.push({
                    TYPE :"WL",
                    FIXED : WLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WHValue) {
                object.evaluationValues.push({
                    TYPE :"WH",
                    FIXED : WHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(object.evaluationValues.length == 0) {
                object.evaluationValues = null;
            }
            sCallback.call(this, object);
        } else {
            if(!modelData.TITLE.trim()) {
                fCallback.call(this, {errorMessage : this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_TITLE_MISSING")});
                return;
            }
            object.title  = modelData.TITLE.trim();
            object.evaluationValues = [];
            var targetValue = modelData.TA ? modelData.TA.trim() : null;
            var CLValue = modelData.CL ? modelData.CL.trim() : null;
            var CHValue = modelData.CH ? modelData.CH.trim() : null;
            var WLValue = modelData.WL? modelData.WL.trim() : null;
            var WHValue = modelData.WH? modelData.WH.trim() : null;
            if(targetValue) {
                object.evaluationValues.push({
                    TYPE :"TA",
                    FIXED : targetValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(CLValue) {
                object.evaluationValues.push({
                    TYPE :"CL",
                    FIXED : CLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(CHValue) {
                object.evaluationValues.push({
                    TYPE :"CH",
                    FIXED : CHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WLValue) {
                object.evaluationValues.push({
                    TYPE :"WL",
                    FIXED : WLValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(WHValue) {
                object.evaluationValues.push({
                    TYPE :"WH",
                    FIXED : WHValue,
                    ID : this.evaluationApi.getId(),
                    COLUMN_NAME : null,
                    ODATA_PROPERTY : null
                });
            }
            if(object.evaluationValues.length ==0) {
                object.evaluationValues = null;
            }
            sCallback.call(this, object);
        }
    },
    _addTileToHomePage : function(chipId) {
    	var that = this;
        var oBookmarkService = sap.ushell.Container.getService("Bookmark");
        var categoryId = null ; //Adds to Default Group (My Home)
        oBookmarkService.addCatalogTileToGroup(chipId, categoryId, {
            baseUrl : "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata",
            remoteId : "HANA_CATALOG"
        }).done(function() {
        	sap.m.MessageToast.show(that.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_ADDED_TO_HOME_SUCCESSFULLY"));
            jQuery.sap.log.info("Tile Added to HOME");
        }).fail(function(oError) {
        	sap.m.MessageToast.show(that.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_ADD_TO_HOME_FAILED"));
            jQuery.sap.log.error("Failed to add tile to home : "+oError);
        });
    },
    _notifyShell : function(chipId) {
        var oService =  sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
        if(oService) {
            oNotifyShell = oService("LaunchPage");
            if(oNotifyShell && oNotifyShell.onCatalogTileAdded) {
                oNotifyShell.onCatalogTileAdded(chipId);
            }
        }
    },
    publishTile : function(callback) {
    	var that = this;
        this.validate(function(tObject) {
        	var oCatalogService = sap.suite.ui.smartbusiness.Adapter.getService("CatalogServices");
            var response  = oCatalogService.savePersonalizedTile({
                evaluationId : this.evaluationApi.getId(),
                tileType : this.drilldownController.TILE_TYPE,
                dimension : this.drilldownController.DIMENSION,
                additionalFilters : this.drilldownController.getAdditionFiltersForChipConfiguration(),
                evaluationValues : tObject.evaluationValues ? tObject : null,
                title : tObject.title,
                sapSystem : this.SAP_SYSTEM,
                success: function(response) {
                	sap.m.MessageToast.show(that.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_CREATED_SUCCESSFULLY"));
                    callback.call();
                    that._addTileToHomePage(response.chipId);
                    that._notifyShell(response.chipId);
                },
                error: function(response) {
                	 jQuery.sap.log.error(response.message);
                     sap.m.MessageToast.show(that.drilldownController.getView().getModel("i18n").getProperty("PERSONALIZED_TILE_CREATION_FAILED"));
                     callback.call();
                }
            });
//            if(response.status == 'Success') {
//                
//            } else {
//               
//            }
        }, function(oError){
            sap.m.MessageBox.show(oError.errorMessage,null,this.drilldownController.getView().getModel("i18n").getProperty("VALIDATION_ERROR_HEADER"))
        });
    }, 
    
    _validateEvaluationValues: function(modelData) {
		var values = [];
		var errors = [];
		var score = 0;
		var duplicates = {};
		if(modelData.CL || modelData.CL === 0) {
			values.push({key: "CL", value: modelData.CL, score: score++});
		}
		if(modelData.WL || modelData.WL === 0) {
			values.push({key: "WL", value: modelData.WL, score: score++});
		}
		if(modelData.TA || modelData.TA === 0) {
			values.push({key: "TA", value: modelData.TA, score: score++});
		}
		if(modelData.WH || modelData.WH === 0) {
			values.push({key: "WH", value: modelData.WH, score: score++});
		}
		if(modelData.CH || modelData.CH === 0) {
			values.push({key: "CH", value: modelData.CH, score: score++});
		}
		values.sort(function(a,b) { return (a.value - b.value)});
		for(var i=0,l=values.length; i<l; i++) {
			if(values[i].score != i) {
				errors.push(values[i].key);
			}
			if(values[i] && values[i-1]) {
				if(values[i].value == values[i-1].value) {
					duplicates[values[i-1].key] = values[i-1].value;
					duplicates[values[i].key] = values[i].value;
				}
			}
		}
		
		
		
		
		if(!(errors.length)) {
			errors = Object.keys(duplicates);
		}
		return errors;
	},
	
	_areEvaluationValuesNumber: function(modelData) {
		 
		 var errors = [];
		 if (isNaN(modelData.CL) || isNaN(modelData.CH)) {
			errors.push("CRITICAL");
		 }
		 if (isNaN(modelData.WL) || isNaN(modelData.WH)) {
				errors.push("WARNING");
			 }
		 if (isNaN(modelData.TA)) {
				errors.push("TARGET");
		 }
		 
		return errors;
		 
	 },
	 
    onAfterRendering : function() {
        
    }
});
}; // end of sap/suite/ui/smartbusiness/drilldown/view/AddToHome.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap", {
	
	onInit: function() {
		this.parentController = null;
		if(this.getView().getViewData()) {
			var viewData = this.getView().getViewData();
			this.parentController = viewData.parent;
		}
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.getAllMapColors();
		this.mapDetails = this.getMapDetails();
	},
	onBeforeRendering: function() {
	
	},
	onAfterRendering: function() {
	
	},
	onExit: function() {
		
	},
	onRegionClick: function(e) {
		var that = this;
		jQuery.sap.log.info("Clicked on " + e.getParameter("code"));
	},
	onRegionContextMenu: function(e) {
		
	},
	formatCountryCode: function(code) {
		return code;
	},
	renderMap: function() {
		var that = this;
		var pController = that.parentController;
		var map = that.getView().analyticalMap;
		
		var tooltipBindingObject = {parts:[], formatter:jQuery.proxy(that.formatTooltip, that)};
		var allMeasures = that.mapDetails.getAllMeasures();
		tooltipBindingObject.parts.push({path:that.mapDetails.getMapDimension()});
		tooltipBindingObject.parts.push({path:that.mapDetails.getMapDimensionTextName()});
		allMeasures.forEach(function(measure){
			tooltipBindingObject.parts.push({path:measure});
		});
		
		var template = new sap.ui.vbm.Region({ 
			code: {path: that.mapDetails.getMapDimension(),formatter:jQuery.proxy(that.formatCountryCode,that)},
			color: {parts:[{path: that.mapDetails.getMapMeasure()},{path: that.mapDetails.getThresholdMeasure()}], formatter:that.getColorFormatterFunction(pController.EVALUATION, that)},
			tooltip : tooltipBindingObject//,
			//click: jQuery.proxy(that.onRegionClick, that)
		});
		
		map.bindAggregation("regions", "/data", template);
		//that.getView().analyticalMap.setModel(pController.chartModel);
	},
	getRgbaColorCode: function(sapColorCode, opacity) {
		var hexColorCode = sap.ui.core.theming.Parameters.get(sapColorCode);
		var rgba = this.utilsRef.convertHexToRgba(hexColorCode, opacity);
		return rgba;
	},
	getColorFormatterFunction: function(eval, context) {
		var colorFormatter = null;
		
		var semanticMaxFormatter = function(main, threshold) {
			main = parseFloat(main);
			threshold = parseFloat(threshold);
			return ((main > threshold) ? context.colors.semanticGoodColorRgba : ((main == threshold) ? context.colors.semanticNeutralColorRgba : context.colors.semanticBadColorRgba));
		};
		var semanticMinFormatter = function(main, threshold) {
			main = parseFloat(main);
			threshold = parseFloat(threshold);
			return ((main < threshold) ? context.colors.semanticGoodColorRgba : ((main == threshold) ? context.colors.semanticNeutralColorRgba : context.colors.semanticBadColorRgba));
		}
		var rangeFormatter = function(main, threshold) {
			main = parseFloat(main);
			threshold = parseFloat(threshold);
			return context.colors.semanticNeutralColorRgba;
		}
		var nonSemanticMaxFormatter = function(main, threshold) {
			main = parseFloat(main);
			threshold = parseFloat(threshold);
			return ((main > threshold) ? context.colors.nonSemanticGoodColorRgba : ((main == threshold) ? context.colors.nonSemanticNeutralColorRgba : context.colors.nonSemanticBadColorRgba));
		};
		var nonSemanticMinFormatter = function(main, threshold) {
			main = parseFloat(main);
			threshold = parseFloat(threshold);
			return ((main < threshold) ? context.colors.nonSemanticGoodColorRgba : ((main == threshold) ? context.colors.nonSemanticNeutralColorRgba : context.colors.nonSemanticBadColorRgba));
		}
		
		if(eval.isMaximizingKpi()) {
			colorFormatter = (context.mapDetails.isColorSchemeAutoSemantic()) ? semanticMaxFormatter : nonSemanticMaxFormatter;
		}
		else if(eval.isMinimizingKpi()) {
			colorFormatter = (context.mapDetails.isColorSchemeAutoSemantic()) ? semanticMinFormatter : nonSemanticMinFormatter;
		}
		else {
			colorFormatter = rangeFormatter;
		}
		return colorFormatter;
	},
	getAllMapColors: function() {
		this.colors = {};
		this.colors.NONSEMANTIC_GOOD_OPACITY = "1.0";
		this.colors.NONSEMANTIC_NEUTRAL_OPACITY = "0.60";
		this.colors.NONSEMANTIC_BAD_OPACITY = "0.30";
		this.colors.semanticGoodColorRgba = this.colors.semanticGoodColorRgba || this.getRgbaColorCode("sapUiPositive");
		this.colors.semanticBadColorRgba = this.colors.semanticBadColorRgba || this.getRgbaColorCode("sapUiNegative");
		this.colors.semanticNeutralColorRgba = this.colors.semanticNeutralColorRgba || this.getRgbaColorCode("sapUiNeutral");
		this.colors.nonSemanticGoodColorRgba = this.colors.nonSemanticGoodColorRgba || this.getRgbaColorCode("sapUiNeutral", this.colors.NONSEMANTIC_GOOD_OPACITY);
		this.colors.nonSemanticBadColorRgba = this.colors.nonSemanticBadColorRgba || this.getRgbaColorCode("sapUiNeutral", this.colors.NONSEMANTIC_BAD_OPACITY);
		this.colors.nonSemanticNeutralColorRgba = this.colors.nonSemanticNeutralColorRgba || this.getRgbaColorCode("sapUiNeutral", this.colors.NONSEMANTIC_NEUTRAL_OPACITY);
	},
	getMapDetails: function() {
		var pController = this.parentController;
		var selectedView = pController.SELECTED_VIEW;
		var allDimenions = selectedView.getDimensions();
		var allMeasures = selectedView.getMeasures();
		var mapDimension = (allDimenions && allDimenions.length) ? allDimenions[0] : "";
		var mapDimensionText = pController.DIMENSION_TEXT_PROPERTY_MAPPING[mapDimension];
		var chartConfiguration = (selectedView.getChartConfiguration() && selectedView.getChartConfiguration().length) ? selectedView.getChartConfiguration()[0] : null;
		var isColorSchemeAutoSemantic = chartConfiguration.getColorScheme().isAutoSemantic();
		var thresholdMeasure = "";
		var allMeasuresExceptThreshold = [];
		if(chartConfiguration) {
			thresholdMeasure = chartConfiguration.getThresholdMeasure();
			if(thresholdMeasure) {
				allMeasures.forEach(function(measure){
					if(measure != thresholdMeasure) {
						allMeasuresExceptThreshold.push(measure);
					}
				});
			}
			else {
				allMeasuresExceptThreshold = allMeasures;
			}
		}
		var mapMeasure = allMeasuresExceptThreshold[0];
		
		return {
			getMapMeasure: function() {
				return mapMeasure;
			},
			getAllMeasures: function() {
				return allMeasures;
			},
			getMapDimension: function() {
				return mapDimension;
			},
			isColorSchemeAutoSemantic: function() {
				return isColorSchemeAutoSemantic;
			},
			getThresholdMeasure: function() {
				return thresholdMeasure;
			},
			getMeasuresExceptThreshold: function() {
				return allMeasuresExceptThreshold;
			},
			setMapMeasure: function(measure) {
				mapMeasure = measure;
			},
			getMapDimensionTextName: function() {
				return mapDimensionText;
			}
		}
	},
	formatTooltip: function() {
		var pController = this.parentController;
		var values = arguments;
		var columnTextObj = pController.COLUMN_LABEL_MAPPING;
		var resourceBundle = pController.getView().getModel("i18n").getResourceBundle();
		var tooltipTxt = resourceBundle.getText("OTHER_MEASURES") + " : \n";
		var mapMeasureTxt = resourceBundle.getText("MAIN_MEASURE") + " : \n";
		var thresholdMeasureTxt = resourceBundle.getText("THRESHOLD_MEASURE") + " : \n";
		var dimensionTxt = resourceBundle.getText("DIMENSIONS") + " : \n";
		var mapMeasure = this.mapDetails.getMapMeasure();
		var thresholdMeasure = this.mapDetails.getThresholdMeasure();
		var allMeasures = this.mapDetails.getAllMeasures();
		var mapDetails = this.mapDetails;
		
		dimensionTxt += (columnTextObj[this.mapDetails.getMapDimension()] || this.mapDetails.getMapDimension()) + " - " + values[1];
		
		for(var i=0,l=allMeasures.length; i<l; i++) {
			if(allMeasures[i] == mapMeasure) { 
				mapMeasureTxt += (columnTextObj[allMeasures[i]] || allMeasures[i]) + " - " + values[i+2];
			}
			else if(allMeasures[i] == thresholdMeasure) {
				thresholdMeasureTxt += (columnTextObj[allMeasures[i]] || allMeasures[i]) + " - " + values[i+2];
			}
			else {
				tooltipTxt += (columnTextObj[allMeasures[i]] || allMeasures[i]) + " - " + values[i+2];
			}
		}
		tooltipTxt = dimensionTxt + "\n\n" + mapMeasureTxt + "\n\n" + thresholdMeasureTxt + "\n\n" + tooltipTxt;
		return tooltipTxt;
	}
	
});

}; // end of sap/suite/ui/smartbusiness/drilldown/view/AnalyticalMap.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap.view') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap.view');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ui.vbm.AnalyticMap'); // unlisted dependency retained

(function () {
    "use strict";

    sap.ui.jsview("sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap", {
        getControllerName: function () {
            return "sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap";
        },
        createContent: function (oController) {
			//sap.ui.vbm.AnalyticMap.GeoJSONURL  =  jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.lib")+"/L0.json"

        	this.analyticalMap = new sap.ui.vbm.AnalyticMap({
				width : "100%",
				plugin: false
			});
        	
        	return this.analyticalMap;
        }
    });
}());
}; // end of sap/suite/ui/smartbusiness/drilldown/view/AnalyticalMap.view.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.Drilldown.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.Drilldown.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.drilldown.view.Drilldown", {
	_getEvaluationId : function() {
		try {
			var startupParameters = this.oConnectionManager.getComponent().oComponentData.startupParameters;
			return startupParameters["evaluationId"][0];
		}catch(e) {
			return sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters().evaluationId[0];
		}
	},
	_getDataFromUrl : function() {
		try {
			var startupParameters = this.oConnectionManager.getComponent().oComponentData.startupParameters;
			this.TILE_TYPE='';
			this.DIMENSION='';
			if(startupParameters["tileType"]) {
				this.TILE_TYPE = startupParameters["tileType"][0];
			}
			if(startupParameters["dimension"]) {
				this.DIMENSION = startupParameters["dimension"][0];
			}
			if(startupParameters["sap-system"]) {
				this.SAP_SYSTEM = startupParameters["sap-system"][0];
			}
			if(startupParameters["chipId"]) {
				this.CHIP_ID = startupParameters["chipId"][0];
			}
		}catch(e) {
			var sParams = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
			if(sParams) {
				if(sParams.tileType) {
					this.TILE_TYPE = sParams.tileType[0];
				}
				if(sParams.dimension) {
					this.DIMENSION = sParams.dimension[0];
				}
				if(sParams["sap-system"]) {
					this.SAP_SYSTEM = sParams["sap-system"][0];
				}
				if(sParams["chipId"]) {
					this.CHIP_ID = sParams["chipId"][0];
				}
			}
		}
	},

	fetchAllEvaluations : function(oParam){
		var headerEvalArray = [this._getEvaluationId()];
		var oHeaders = this.CONFIGURATION.getHeaders();
		oHeaders.forEach(function(curHeader) {
			if(curHeader.isAssociated()) {
				if(headerEvalArray.indexOf(curHeader.getReferenceEvaluationId()) == -1) {
					headerEvalArray.push(curHeader.getReferenceEvaluationId());
				}
				if(headerEvalArray.indexOf(curHeader.getEvaluationId()) == -1) {
					headerEvalArray.push(curHeader.getEvaluationId());
				}
			}
		});
		this._bundled_evaluations_call_ref = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.setEvaluationsCache({
			evalIdArray : headerEvalArray,
			sapSystem : this.SAP_SYSTEM,
			success: oParam.success,
			context: oParam.context
		});
	}, 
	onAfterRendering : function() {
			},
	onInit : function() {
		var that = this;
		//prevent the routematch handler from closing the dialog whenever hash changes
//		if(jQuery.device.is.desktop){ //do the above only for desktop

		if(sap.ui.Device.system.desktop){ //do the above only for desktop
			this.getOwnerComponent().setRouterSetCloseDialogs(false);
			this.byId("header-ribbon").setShowTitleSelector(true);
		}
		// trigger this function on orientation change

		//ESLINT jQuery.device deprecated 

//		if(jQuery.device.is.ipad){

		if(sap.ui.Device.system.tablet){
			$(window ).on("orientationchange", function(event) {
				that.getUIComponents().getHeaderContainer().rerender();
			});
		}
		// invalidating cache on page load
		sap.suite.ui.smartbusiness.lib.Util.cache.invalidateKpiDetailsCache();
		this._requestTimeLog = {};
		this._busyDialog = new sap.m.BusyDialog();
		sap.sb_drilldown_app = this;
		this.EVALUATION = null;
		this.CONFIGURATION = null;
		this.SELECTED_VIEW = null;
		this.POPOVER_VIEW_NAVIGATION_MODEL = new sap.ui.model.json.JSONModel({"VIEW_NAVIGATION":[]});
		this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL = new sap.ui.model.json.JSONModel({"APP_NAVIGATION":[]});
		this.SEMANTIC_OBJECT = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getSemanticObject();
		this.ACTION = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getAction();

		//var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());

		this.urlParsingService = sap.ushell.Container.getService("URLParsing");
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		this.addExportMethodToTable();
		var EVAL_ID = this._getEvaluationId();
		var EVAL_ID_FOR_DDA_CONFIG = EVAL_ID;
		this._EVALUATION_ID = EVAL_ID;
		this.firstTimeFlag = false;
		this._getDataFromUrl();
		if(!this._proxyHashChangeListener) {
			this._proxyHashChangeListener = jQuery.proxy(this.hashChangeListener, this);
			this._attachHashChangeEvent();
		}
		this._busyDialog.open();

		var isModelSEnv = sap.suite.ui.smartbusiness.Configuration.isMetadataFromABAP();
		if(isModelSEnv) {
			var oRuntimeService = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices");
			oRuntimeService.getDataByEntity({
				entity : "PROPERTIES",
				filter : "TYPE eq 'EV' and IS_ACTIVE eq 1 and ID eq '" + EVAL_ID + "' and NAME eq 'SAP:Copied_From'",
				async : false,
				success : function(data) {
					if(data && data.length) {
						EVAL_ID_FOR_DDA_CONFIG = data[0].VALUE || EVAL_ID;
					}
				},
				error : function(err) {
					jQuery.sap.log.error(err && err.message);
				}
			});
		}
		var startTimeConfigFetch = new Date().getTime();
		var callback = function(oDataBatchReference){
            this.DDA_CONFIG_ODATA_CALL_REF = oDataBatchReference;
		};

		sap.suite.ui.smartbusiness.drilldown.lib.Configuration.loadConfiguration({
			evaluationId : EVAL_ID_FOR_DDA_CONFIG,
			cache : true,
			success : function(batchResponse) {
				var endTimeConfigFetch = new Date().getTime();
				this._requestTimeLog["DDA_CONFIG_FETCH"] = {
						title : "Configuration",
						time : endTimeConfigFetch - startTimeConfigFetch
				};
				this.CONFIGURATION = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.parse(EVAL_ID_FOR_DDA_CONFIG, batchResponse);
				var that=this;
				if( this.CONFIGURATION.getAllViews().length==0){
					jQuery.sap.log.error("drilldown not configured");
					var oI18nModel = that.getView().getModel("i18n");
					sap.m.MessageBox.alert(oI18nModel.getResourceBundle().getText("DDA_NOT_CONFIGURED"), function () {
						window.location.hash = "";
						that._busyDialog.close();
					});
					return;
				}

				var startTimeBundledEvaluationFetch = new Date().getTime();
				this.fetchAllEvaluations({
					success: function() {
						var endTimeBundledEvaluationFetch = new Date().getTime();
						this._requestTimeLog["BUNDLED_EVALUATIONS_FETCH"] = {
								title : "Evaluations",
								time : endTimeBundledEvaluationFetch - startTimeBundledEvaluationFetch
						};
						this.EVALUATION_ODATA_CALL_REF = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.getEvaluationById({
							id : EVAL_ID,
							cache : true,
							filters : true,
							thresholds : true,
							success : function(evalData) {
								this._busyDialog.close();
								this.EVALUATION = sap.suite.ui.smartbusiness.lib.Util.kpi.parseEvaluation(evalData);
								if(this.metadataRef.getPlatform().toUpperCase() === "HANA") {
									this.EVALUATION.parse_sapclient();
								}
								this._initialize();
								if(jQuery.device.is.phone){
									var objectHeader = this.getUIComponents().getHeader();
									objectHeader.addAttribute(new sap.m.ObjectAttribute({
										text : this.EVALUATION.getDescription()
									}));
								}
							},
							error : function() {
								this._busyDialog.close();
								throw new Error("Evaluation Details Not Found with ID : "+EVAL_ID);
							},
							context : this,
							sapSystem : this.SAP_SYSTEM
						});
					},
					context : this,
				});
			},
			error : function() {
				jQuery.sap.log.error("Drilldown Configuration Fetching Failed");
				this._busyDialog.close();
			},
			context : this,
			sapSystem : this.SAP_SYSTEM
		},callback);


	},
	updateFilter : function() {
		/**
		 * Show the Filters if View switched from Chart/Table Context
		 */
		var filter = this.getUIComponents().getFilter();
		var filterObj = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
		if(filter.getVisible()){
			filter.refreshFilter();
		}else{
			filter.setVisible(true);
		}
		this._fixFacetListSelection();
	},
	onBeforeRendering : function() {

	},

	isACurrencyMeasure : function(measure) {
		var sUri = this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var entitySet = this.EVALUATION.getEntitySet();
		return sap.suite.ui.smartbusiness.lib.Util.odata.getFormattingMetadata(sUri, entitySet, measure)._hasCurrency;
	},

	libFormat: function(n, isACurrencyMeasure, currencyCode) {
		isACurrencyMeasure = isACurrencyMeasure || false;
		currencyCode = currencyCode || null;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Formatter");
		return sap.suite.ui.smartbusiness.lib.Formatter.getLocaleFormattedValue(
				Number(n), this.EVALUATION.getScaling(), this.nDecimal, isACurrencyMeasure, currencyCode);
	},

	libFormat_nonscaled: function(n, isACurrencyMeasure, currencyCode) {
		isACurrencyMeasure = isACurrencyMeasure || false;
		currencyCode = currencyCode || null;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Formatter");
		return sap.suite.ui.smartbusiness.lib.Formatter.getLocaleFormattedValue_nonscaled(
				Number(n), this.EVALUATION.getScaling(), this.nDecimal, isACurrencyMeasure, currencyCode);
	},

	getLibFormatter: function(n, isACurrencyMeasure, oScale, decimals) {
		if (oScale == null || typeof oScale == "undefined") {
			oScale = this.EVALUATION.getScaling();
		}
		if (decimals == null || typeof decimals == "undefined") {
			decimals = this.nDecimal;
		}
		isACurrencyMeasure = isACurrencyMeasure || false;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Formatter");
		return sap.suite.ui.smartbusiness.lib.Formatter.getLocaleFormatter(
				Number(n), oScale, decimals, isACurrencyMeasure);
	},

	getLibFormatter_nonscaled: function(n, isACurrencyMeasure, oScale, decimals) {
		if (oScale == null || typeof oScale == "undefined") {
			oScale = this.EVALUATION.getScaling();
		}
		if (decimals == null || typeof decimals == "undefined") {
			decimals = this.nDecimal;
		}
		isACurrencyMeasure = isACurrencyMeasure || false;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Formatter");
		return sap.suite.ui.smartbusiness.lib.Formatter.getLocaleFormatter_nonscaled(
				Number(n), oScale, decimals, isACurrencyMeasure);
	},

	_initialize : function() {
		/**
		 * Fix : Header Footer Options
		 */
		var that = this;
    	this._OPEN_IN_LINKS = {};
        this._fetchNavigationLinks().done(function(results){
        	if(results && results.length) {
        		that.setHeaderFooterOptions(that.getHeaderFooterOptions());
        		that._initExternalNavigationLinks(results);
        		that.renderTitle();
        	} else {
        		that.setHeaderFooterOptionsWithoutOpenInButton();
        	}
        });

		//decimals given by user
		this.nDecimal=this.EVALUATION.getDecimalPrecision();
		if (typeof this.nDecimal == "undefined") {
			/* default to AUTO */
			this.nDecimal = -1;
		}
		this.oFormatOptions_ca= {
				style: "standard" 
		};
		this.oFormatOptions_core={style:"short"};
		this.oFormatOptions_percent={style:"percent"};
		if(!(this.nDecimal == null || this.nDecimal == -1)) {
			this.oFormatOptions_ca.decimals = this.nDecimal;
			this.oFormatOptions_core.minFractionDigits=this.nDecimal;
			this.oFormatOptions_core.maxFractionDigits=this.nDecimal;
		}
		if(this.nDecimal == -1){
			/* given a value of -1 so as to force an error when used */
			this.oFormatOptions_ca.decimals = -1;
			this.oFormatOptions_core.minFractionDigits= -1;
			this.oFormatOptions_core.maxFractionDigits= -1;
		}

		//Set Window Page Title
		var windowPageTitle = this.EVALUATION.getKpiName()+" - "+this.EVALUATION.getTitle();
		try {
			if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
				sap.ushell.services.AppConfiguration.setWindowTitle(windowPageTitle);
			}
		} catch(e){
			jQuery.sap.log.error("Error Setting Window Page Title : "+windowPageTitle)
		}
		/*Prepare OData MetaData like Label, Text Property, UnitProperty*/
		var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(),this.SAP_SYSTEM),this.EVALUATION.getEntitySet());
		//var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(),this.SAP_SYSTEM),this.EVALUATION.getEntitySet());
		this.COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
		this.DIMENSION_TEXT_PROPERTY_MAPPING = mProperties.getTextPropertyMappingObject();
		this.MEASURE_UNIT_PROPERTY_MAPPING = mProperties.getUnitPropertyMappingObject();

		/**
		 * Prepare Add To Home Dialog
		 */
		this._initAddToHomeDialogBox();

		var viewListModel = new sap.ui.model.json.JSONModel();
		viewListModel.setData(this.CONFIGURATION.getAllViews());
		var UIComponents = this.getUIComponents();

		UIComponents.getVizChartContainer().setModel(viewListModel,"VIEW_SWITCH");

		//model for chart
		this.chartModel = new sap.ui.model.json.JSONModel();
		var chartModelSize = 9999;
		this.chartModel.setSizeLimit(chartModelSize);
		UIComponents.getVizChartContainer().setModel(this.chartModel);
		//model for aggregate Number, unit etc
		this.EvaluationHeaderModel = new sap.ui.model.json.JSONModel();
		UIComponents.getHeader().setModel(this.EvaluationHeaderModel);
		//model of title lable
		this.titleModel = new sap.ui.model.json.JSONModel();
		UIComponents.getPage().getCustomHeader().getContentMiddle()[0].setModel(this.titleModel);
		this.renderDrilldownHeader();
		//act according to hash
		this._initRequestTimeLogChart();
		this.hashChangeListener();
		sap.ui.Device.orientation.attachHandler(this.renderTitle, this);        

	},
	applyTrendColor : function(WL,CL,CH,WH,goalType,kpiValue) {

		var returnColor = null;
		var wL = parseFloat(WL);
		var cL = parseFloat(CL);
		var cH = parseFloat(CH);
		var wH = parseFloat(WH);
		if(goalType=="MI") {
			if(cH && wH) {
				if(kpiValue < wH) {
					returnColor = sap.ui.core.ValueState.Success ;
				} else if(kpiValue <= cH) {
					returnColor = sap.ui.core.ValueState.Warning;
				} else {
					returnColor = sap.ui.core.ValueState.Error;
				}
			}

		} else if(goalType=="MA") {
			if(cL && wL) {
				if(kpiValue < cL) {
					returnColor = sap.ui.core.ValueState.Error;
				} else if(kpiValue <= wL) {
					returnColor = sap.ui.core.ValueState.Warning;
				} else {
					returnColor = sap.ui.core.ValueState.Success;
				}
			}
		} else {
			if(wL && wH && cL && cH) {
				if(kpiValue < cL || kpiValue > cH) {
					returnColor = sap.ui.core.ValueState.Error;
				} else if((kpiValue >= cL && kpiValue <= wL) || 
						(kpiValue >= wH && kpiValue <= cH)
				) {
					returnColor = sap.ui.core.ValueState.Warning;
				} else {
					returnColor = sap.ui.core.ValueState.Success ;
				}
			}
		}
		return returnColor;
	},
	switchedToTableView : function() {
		if(this.getUIComponents().getChart()) {
			this.setChartSelectionContextObject(null);
		}
	},
	switchedToChartView : function() {
		this.getUIComponents().getTable().setSelectedContext(null);
	},
	renderDrilldownHeader : function() {
		var aFilters = this.CONFIGURATION.getFilters();
		var objectHeaderContainer = this.getUIComponents().getHeaderContainer();
		this.renderFilters(aFilters);
		var aHeaders = this.CONFIGURATION.getHeaders();
		if(!((aHeaders && aHeaders.length) || this.EVALUATION.getDescription())){
			this.getUIComponents().getHeader().setShowTitleSelector(false);
		}
		this.renderTitle();
		this.renderEvaluationHeader();
	},
	renderTitle: function() {
		var title_label = this.getUIComponents().getPage().getCustomHeader().getContentMiddle()[0];
		if(title_label) {
			if(this.EVALUATION) {
				title_label.setText(this.EVALUATION.getKpiName());
			}
		}
	},
	renderFilters: function(filters) {
		var facetFilter = this.getUIComponents().getFilter();
		facetFilter.setEvaluationData(this.EVALUATION);
		facetFilter.setEvaluationId(this.EVALUATION.getId());
		facetFilter.setDimensions(filters);
		facetFilter.setSapSystem(this.SAP_SYSTEM);
	},

	displayMiniCharts : function(){
		var objectHeader = this.getUIComponents().getHeader();
		var objectHeaderContainer = this.getUIComponents().getHeaderContainer();
		var objectHeaderAttributes = objectHeader.getAttributes() || [];
		if(objectHeaderContainer.getVisible() || objectHeaderAttributes.length){
			objectHeaderContainer.setVisible(false);
			objectHeader.removeAllAttributes();
		}
		else{
			var aHeaders = this.CONFIGURATION.getHeaders();
			if(!(aHeaders && aHeaders.length)){
				objectHeaderContainer.setVisible(false);
			}
			else{
				objectHeaderContainer.setVisible(true);
				this.renderKpiHeaders(aHeaders);
			}
			objectHeader.removeAllAttributes();
			objectHeader.addAttribute(new sap.m.ObjectAttribute({
				text : this.EVALUATION.getDescription()
			}));
		}
		this._fixPostResizeIssue();
		$(window).trigger('resize');
		//Fixing post resize issue.
	},

	renderKpiHeaders: function(headers) {
		var self = this;
		var header_container = this.getUIComponents().getTileContainer();
		header_container.removeAllItems();
		this.miniChartManager = sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager.renderHeaders({
			allTiles : headers,
			headerContainer : header_container,
			sapSystem : this.SAP_SYSTEM,
			urlFilters : this.getUrlFilters(),
			onNavigation : function(){
				self._detachHashChangeListener();
			}
		});
	},
	renderView: function(currentView) {
		this.table = null;
		this.chart = null;
		this.geoMap = null;
		this.analyticalMap = null;
		this._addUIComponents(currentView); //based on configuration

		var chartColumns = currentView.getColumns()
		var chartConfig = currentView.getChartConfiguration();
		this.renderTable(chartColumns, chartConfig[0].getColorScheme());
		if(this.chart) {
			//first element passed since getChartConfiguration() returns an array
			this.renderChart(currentView, chartConfig[0], chartColumns);
		}
		else if(this.analyticalMap) { 
			this.renderAnalyticalMap(currentView); 
		} 
		else if(this.geoMap) { 
			this.renderGeoMap(currentView); 
		}
	},

	/**
	 * @desc fetches Evaluation data and binds value to aggregate number
	 * @param [filters] - null if only evaluation filters are to be considered
	 */
	renderEvaluationHeader : function() {
		var self = this;
		var objectHeader = this.getUIComponents().getHeader(), that = this;
		objectHeader.setTitle(this.EVALUATION.getTitle());

		var kpiMeasure = this.EVALUATION.getKpiMeasureName();

		/* 
		 * Just in case the odata service provides a formatted measure value
		 *  as sap:text, use it. Else fallback to measure value 
		 */
		var formatted_kpiMeasure = kpiMeasure;
//		if(this.DIMENSION_TEXT_PROPERTY_MAPPING[kpiMeasure]) {
//		formatted_kpiMeasure = this.DIMENSION_TEXT_PROPERTY_MAPPING[kpiMeasure];
//		}

		var kpiMeasureUnitProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[kpiMeasure];

		/*
		 * Bypass ca formatter when using formatted kpi measure value 
		 * returned by odata source
		 */




		objectHeader.bindProperty("number",{
			parts: [{path: "/data/" + formatted_kpiMeasure},
			        {path: "/data/" + kpiMeasureUnitProperty}],
			        formatter: function(value, currencyCode) {
			        	if (formatted_kpiMeasure != kpiMeasure) {
			        		return value;
			        	}
			        	if(value) {
			        		var isACurrencyMeasure = self.isACurrencyMeasure(kpiMeasure);
			        		currencyCode = currencyCode || null;
			        		return self.libFormat_nonscaled(value, isACurrencyMeasure, currencyCode);
			        	}
			        	return value;
			        }
		});

		if(kpiMeasureUnitProperty) {
			objectHeader.bindProperty("numberUnit", "/data/" + kpiMeasureUnitProperty);
		}
	},
	fetchKpiValue: function() {
		if(!this.CONFIGURATION.isAggregateValueEnabled()) {
			return;
		}
		var that = this;
		var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
			//serviceUri : this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
			serviceUri : this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
			entitySet : this.EVALUATION.getEntitySet(),
			measure: this._getEvaluationThresholdMeasures(),
			filter : this.getAllFilters()
		});
		var startTimeFetchKpiValue = new Date().getTime();
		var evaluationId = this._getEvaluationId();
		this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS = function(data) {
			var endTimeFetchKpiValue = new Date().getTime();
			that._requestTimeLog["KPI_VALUE"] = {
					title : "Kpi Value",
					time : endTimeFetchKpiValue - startTimeFetchKpiValue
			};
			if(data && data.results.length) {
				that.EvaluationHeaderModel.setData({data:data.results[0]});
				//Colouring the Aggregate Value
				var header = that.getView().byId("header-ribbon");
				var kpiObject = data.results[0];
				if(that.EVALUATION){
					var kpiValue, WL,CL,CH,WH,color;
					kpiValue = parseFloat(kpiObject[that.EVALUATION.getKpiMeasureName()]);
					var evaluationTrend = that.EVALUATION.getThresholds();

//					if(that.EVALUATION.getThresholdValueType()=="FIXED"){
//					WL = evaluationTrend.getWarningLow();
//					CL = evaluationTrend.getCriticalLow();
//					CH = evaluationTrend.getCriticalHigh();
//					WH = evaluationTrend.getWarningHigh();
//					}
					if(that.EVALUATION.getThresholdValueType()=="MEASURE"){
						var i, valuesObject = that.EVALUATION.getValues().results;
						for(i=0;i<valuesObject.length;i++){
							if(valuesObject[i].TYPE == "WL"){
								WL = kpiObject[valuesObject[i].COLUMN_NAME];
							}
							if(valuesObject[i].TYPE == "CL"){
								CL = kpiObject[valuesObject[i].COLUMN_NAME];    
							}
							if(valuesObject[i].TYPE == "CH"){
								CH = kpiObject[valuesObject[i].COLUMN_NAME];
							}
							if(valuesObject[i].TYPE == "WH"){
								WH = kpiObject[valuesObject[i].COLUMN_NAME];
							}
						}
						color = that.applyTrendColor(WL,CL,CH,WH,that.EVALUATION.getGoalType(),kpiValue);
						header.setNumberState(color);
					}
					else if(that.EVALUATION.getThresholdValueType()=="RELATIVE"){
						var i, targetValue, valuesObject = that.EVALUATION.getValues().results;
						for(i=0;i<valuesObject.length;i++){
							if(valuesObject[i].TYPE == "TA"){
								targetValue = kpiObject[valuesObject[i].COLUMN_NAME]
								break;
							}
						}

						for(i=0;i<valuesObject.length;i++){
							if(valuesObject[i].TYPE == "WL"){
								WL = Number(targetValue)*valuesObject[i].FIXED/100;
							}
							if(valuesObject[i].TYPE == "CL"){
								CL = Number(targetValue)*valuesObject[i].FIXED/100;    
							}
							if(valuesObject[i].TYPE == "CH"){
								CH = Number(targetValue)*valuesObject[i].FIXED/100;
							}
							if(valuesObject[i].TYPE == "WH"){
								WH = Number(targetValue)*valuesObject[i].FIXED/100;
							}
						}
						color = that.applyTrendColor(WL,CL,CH,WH,that.EVALUATION.getGoalType(),kpiValue);
						header.setNumberState(color);
					}
				}
				sap.suite.ui.smartbusiness.lib.Util.cache.setKpiDetailsById(evaluationId,data);
				// removing from current_calls 
				if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]) {
					var x = sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
					delete sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
					x.resolve();
				}
			} else {
				delete sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
				jQuery.sap.log.error("Couldn't fetch Aggregate Value. Response was "+data+" for uri : "+oUriObject.uri);
				that.EvaluationHeaderModel.setData({data:{}});
			}
		};
		this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_FAIL = function(err) {
			jQuery.sap.log.error(err);
			that.EvaluationHeaderModel.setData({data:{}});
			if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]){
				var x = sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
				delete sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
				x.reject();
			}
		};
		var fromCache = sap.suite.ui.smartbusiness.lib.Util.cache.getKpiDetailsById(evaluationId);
		if(fromCache) {
			this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS(fromCache);
		}
		//if the call is currently in progress
		else if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]){
			jQuery.when(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]).then(function() {
				var data = sap.suite.ui.smartbusiness.lib.Util.cache.getKpiDetailsById(evaluationId);
				that.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS(data);
			},function(errorMessage) {jQuery.sap.log.error(errorMessage)});
		}
		else {
			sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId] = jQuery.Deferred();
			this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF = oUriObject.model.read(oUriObject.uri, null, null, true,this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_SUCCESS ,this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF_FAIL);
		}
	},
	_addPopoverContent : function(oControl, bIsTable) {
		var listOfViews = new sap.m.List({
			visible : {
				path : "/VIEW_NAVIGATION",
				formatter : function(oArray) {
					if(oArray && oArray.length >0) {
						return true;
					}
					return false;
				}
			}
		});
		listOfViews.bindItems("/VIEW_NAVIGATION", new sap.m.ActionListItem({
			text : "{TITLE}",
			customData : new sap.ui.core.CustomData({
				key : "{ID}",
				value : "{ID}"
			}),
			press : jQuery.proxy(this._onViewSelection,this,{publishContext : true, isTable : !!bIsTable})
		}).addStyleClass("smartbusinessTablePopoverAction").setTooltip("{TITLE}"));
		var allViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId()); 
		listOfViews.setModel(this.POPOVER_VIEW_NAVIGATION_MODEL);

		var listOfNavigations = new sap.m.List({
			/*
            visible : {
                path : "/APP_NAVIGATION",
                formatter : function(oArray) {
                    if(oArray && oArray.length >0) {
                        return true;
                    }
                    return false;
                }
            }*/
		});
		this._popoverNavigationListReferences.push(listOfNavigations);
		listOfNavigations.bindItems("/APP_NAVIGATION", new sap.m.StandardListItem({
			title : "{text}",
			type : sap.m.ListType.Navigation,
			customData : new sap.ui.core.CustomData({
				key : "{id}",
				value : "{applicationType}"
			}),
			press : jQuery.proxy(this._onAppSelection,this,{publishContext : true, isTable : !!bIsTable})
		}).setTooltip("{text}"));
		listOfNavigations.setModel(this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL);

		var popoverContent = new sap.m.VBox({
			items : [listOfViews, listOfNavigations],
			width : "99%"
		});
		oControl.setPopoverFooter(popoverContent);
	},
	_addUIComponents : function(viewConfiguration) {
		this.table = null;
		this.chart = null;
		this.geoMap = null; 
		this.analyticalMap = null;
		var chartToolbarRef = this.getUIComponents().getVizChartContainer();
		chartToolbarRef.removeAllContent();

		var chartConfiguration = viewConfiguration.getChartConfiguration()[0];
		if(chartConfiguration) {
			var that = this;
			this._popoverNavigationListReferences =  [];
			this.table = new sap.suite.ui.smartbusiness.drilldown.lib.CustomTable({
				mode : sap.m.ListMode.SingleSelectMaster
			}).addStyleClass("smartBusinessDrilldownTable");
			this.table.attachSelectionChange(function() {
				that._onTableRowSelected(); 
			});
			this.table.addEventDelegate({
				onAfterRendering : function() {
					that.switchedToTableView();
				}
			});
			this.table.setModel(this.getView().getModel("i18n"), "i18n");
			this._addPopoverContent(this.table, true);
			if(chartConfiguration.getChartType().isTable()) {
				var tableFrame = new sap.suite.ui.commons.ChartContainerContent({
					icon: 'sap-icon://table-chart',
				});
				tableFrame.setContent(this.table);
				chartToolbarRef.addContent(tableFrame); 				
			} else if(chartConfiguration.getChartType().isGeoMap()) {
				// Add Geo Map Content
			} else if(chartConfiguration.getChartType().isAnalyticalMap()) {
				// Add Choropleth Content
				try {
					this.analyticalMap = new sap.ui.core.mvc.JSView({
						viewName : "sap.suite.ui.smartbusiness.drilldown.view.AnalyticalMap",
						viewData : {parent:this}
					});
				}
				catch(e) {
					jQuery.sap.log.error("Map view not available");
					jQuery.sap.log.error(e.message);
					throw (e);
				}
				var tableFrame = new sap.suite.ui.commons.ChartContainerContent({
					icon: 'sap-icon://table-chart',
				});
				var mapContainer = new sap.m.VBox({items:[this.analyticalMap], fitContainer:true});
				tableFrame.setContent(mapContainer);
				chartToolbarRef.addContent(tableFrame); 				
			} else {				
				this.chart = new sap.viz.ui5.controls.VizFrame({
					vizType : "bar",
					uiConfig : {
						applicationSet : 'fiori'
					},						
				});
				this.chart.setVizProperties({
					plotArea: {
						dataLabel : {
							visible: true,
							formatString: "dataLabelFormatter",
							hideWhenOverlap: false
						}
					},
					legend: {
						title: {
							visible : false
						},
						isScrollable: true
					},
					title: {
						visible: false
					},
					valueAxis:{
						label:{
							formatString:"yValueAxisFormatter"
						}
					}
				});

				this.vizChartPopover = new sap.viz.ui5.controls.Popover().setFormatString("vizPopOver");

				this.vizChartPopover.connect(this.chart.getVizUid());
				this.chart.addEventDelegate({
					onAfterRendering : function() {
						that.switchedToChartView();
					}
				});
				var vizChartContainerContent = new sap.suite.ui.commons.ChartContainerContent({
					icon: "sap-icon://bar-chart",
				});
				vizChartContainerContent.setContent(this.chart);
				chartToolbarRef.addContent(vizChartContainerContent);
				var tableFrame = new sap.suite.ui.commons.ChartContainerContent({
					icon: 'sap-icon://table-chart',
				});
				tableFrame.setContent(this.table);
				chartToolbarRef.addContent(tableFrame);
				//this._addVizPopoverContent(chartPopover, false);				
			}
		} else {
			jQuery.sap.log.error("NO Chart Configuration found!! ");
		}

	},
	_setNoDataText : function(sPropertyKey) {
		this.table.setNoDataText(this.getView().getModel("i18n").getProperty(sPropertyKey));
		if(this.chart) {
//			if(this.use_CA) {
//			this.chart.setNoData(new sap.m.Label({
//			text : this.getView().getModel("i18n").getProperty(sPropertyKey)
//			}));
//			} else {

//			}
		}
	},
	fetchDataForChart : function() {
		var chartToolbarRef = this.getUIComponents().getVizChartContainer();
		var VIEW = this.SELECTED_VIEW;
		var that = this;
		try {
			this.chartModel.setData({data:[]});
			chartToolbarRef.setBusy(true);
			var dimensions = [].concat(this.SELECTED_VIEW.getDimensions());
			/*
			 * 	dimensions.forEach(function(sDimensionName) {
				var oDimension = VIEW.findDimensionByName(sDimensionName);
				var sortByDimension = oDimension.getSortBy();
				if((dimensions.indexOf(sortByDimension) == -1)) {
					if(oDimension.getSortOrder() == "asc" || oDimension.getSortOrder() == "desc") {
						dimensions.push(sortByDimension);
					}
				}
			});
			 * 
			 */
			var measures = this.SELECTED_VIEW.getMeasures();
			var sortingToBeApplied = null;
			if(this.TABLE_SORTING && this.TABLE_SORTING.length) {
				sortingToBeApplied = this.TABLE_SORTING;
			} else if(this.COLUMNS_SORT && this.COLUMNS_SORT.length) {
				sortingToBeApplied = this.COLUMNS_SORT;
			}
			var dataLimit = null;
			try {
				var iDataLimit = window.parseInt(this.SELECTED_VIEW.getChartConfiguration()[0].getDataLimit());
				if(isNaN(iDataLimit)) {
					jQuery.sap.log.error("Invalid Data Limit Value : "+dataLimit);
				} else {
					if(iDataLimit!=-1) {
						dataLimit = iDataLimit;
					}
				}
			}catch(e) {
				jQuery.sap.log.error("Error parsing Data Limit Value")
			}
			var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
				serviceUri : this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
				//serviceUri : this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM),
				entitySet : this.EVALUATION.getEntitySet(),
				dimension : dimensions,
				measure : measures,
				filter : this.getAllFilters(),
				sort : sortingToBeApplied,
				dataLimit : dataLimit
			});
			//Set NoData Text for Chart and Table
			this._setNoDataText("DATA_LOADING");
			var startTimeChartDataFetch = new Date().getTime();
			this.CHART_TABLE_DATA_ODATA_CALL_REF = oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
				var endTimeChartDataFetch = new Date().getTime();
				that._requestTimeLog["CHART_TABLE_DATA"] = {
						title : "Chart/Table Data",
						time : endTimeChartDataFetch - startTimeChartDataFetch
				};
				if(data.results.length === 0) {
					that._setNoDataText("DATA_NODATA");
				}
				that.chartModel.setData({data:data.results});
				chartToolbarRef.setBusy(false);
				if(that.getUIComponents().getChart()) {
					that.setAllVizFormatters();					
				}
				if(data.results.length) {
					that._appendUOMToTableHeader(data.results[0]);
					that._appendUOMToVizChartAxis(data.results[0]);					
				}
			}, function() {
				jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
				that._setNoDataText("DATA_LOADING_FAILED");
				that.chartModel.setData({data:[]});
				chartToolbarRef.setBusy(false);
				that.chartModel.setData({data:[]});
			});
		} catch(e) {
			that._setNoDataText("DATA_LOADING_FAILED");
			jQuery.sap.log.error(e);
			chartToolbarRef.setBusy(false);
			this.chartModel.setData({data:[]});
		}
	},
	_getTableContextParameters : function(dimensionsArray) {
		var extraFilters = {};
		var tableSelectedContext =  this.getUIComponents().getTable().getSelectedContext();
		if(tableSelectedContext && tableSelectedContext.length) {
			tableSelectedContext.forEach(function(eachContext) {
				dimensionsArray.forEach(function(eachDimension){
					var dimensionValue = eachContext[eachDimension];
					if(dimensionValue==null){
						dimensionValue="SAP_SMARTBUSINESS_NULL";
					}
					if(dimensionValue||dimensionValue==0 ||dimensionValue=='') {
						if(dimensionValue.getTime) {
							dimensionValue = dimensionValue.getTime();
						}
						if(!extraFilters[eachDimension]) {
							extraFilters[eachDimension] = [];
						}
						extraFilters[eachDimension].push(dimensionValue);
					}
				});
			});
		}
		return extraFilters;
	},
	_getChartContextParameters : function(dimensionsArray) {
		var extraFilters, chartContexts;
		chartContexts = this.getChartSelectionContextObject();
		extraFilters = {};
		if(chartContexts) {
			var dataSet = this.getUIComponents().getChart().getDataset();
			for(var each in chartContexts) {
				var context = chartContexts[each];
				var cObject = dataSet.findContext(context).getObject();
				dimensionsArray.forEach(function(eachDimension){
					var dimensionValue = cObject[eachDimension];
					if(dimensionValue==null){
						dimensionValue="SAP_SMARTBUSINESS_NULL";
					}
					if(dimensionValue||dimensionValue==0 ||dimensionValue=='') {
						if(dimensionValue.getTime) {
							dimensionValue = dimensionValue.getTime();
						}
						if(extraFilters[eachDimension]) {
							extraFilters[eachDimension].push(dimensionValue);
						} else {
							extraFilters[eachDimension] = [];
							extraFilters[eachDimension].push(dimensionValue);
						}
					}
				});
			}
		}
		return extraFilters;
	},
	_onViewSelection : function(customParam, oEvent) {
		var viewId = oEvent.getSource().getCustomData()[0].getKey();
		var parameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		var extraFilters = this[customParam.isTable ? "_getTableContextParameters" : "_getChartContextParameters"](dimensionsArray,false);
		for(var each in extraFilters) {
			if(parameters[each]) {
				delete parameters[each];
			}
			parameters[each] = extraFilters[each]
		}
		parameters["viewId"] = viewId;
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(parameters,false);
		if(customParam.isTable){
			this.getUIComponents().getTable().setSelectedContext(null);
		}else{
			this.setChartSelectionContextObject(null);
		}
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
		//this._hideOrShowFacetFilterIfRequired();
	},
	getChartSelectionContextObject : function() {
//		if(this.use_CA) {
//		return this._chartPopoverContext;  
//		}
	},
	setChartSelectionContextObject : function(oValue) {
//		if(this.use_CA) {
//		this._chartPopoverContext = oValue;
//		}
	},
	_detachHashChangeListener : function() {
		try {
			this.hashChanger.detachEvent("hashChanged", this._proxyHashChangeListener); 
			this._proxyHashChangeListener = null;
			this.hashChangerAttached = true;
		} catch(e) {
			jQuery.sap.log.error("Error Detaching hashChanged Event");
		}
	},
	_onAppSelection : function(customParam, oEvent) {
		var cleanUp = function(appParameters, contextParameters) {
			if(contextParameters) {
				for(var sParamKey in contextParameters) {
					if(appParameters && appParameters[sParamKey]) {
						delete appParameters[sParamKey];
					}
				}
			}
		};
		var extraFilters, navId = oEvent.getSource().getCustomData()[0].getKey();
		var appType = oEvent.getSource().getCustomData()[0].getValue();
		var soAction = navId.split("~")[0];
		var splits = soAction.split("-");
		var so = splits[0];
		var action = splits[1];
		var appParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
		if(so == "AdhocAnalysis") {
			appParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		}
		var startupParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
		//var extraParameters = appParameters?jQuery.extend(true,{},appParameters):{};
		var extraParameters = {};
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		if(customParam.isFromOpenIn) {
			//Navigation Link Clicked from OpenIn
			extraFilters = this._getTableContextParameters(dimensionsArray);
			cleanUp(appParameters, extraFilters);
			jQuery.extend(true, extraParameters, extraFilters);
			extraFilters = this._getVizChartContextParameters(dimensionsArray); 
			cleanUp(appParameters, extraFilters);
			jQuery.extend(true, extraParameters, extraFilters);
		} else {
			if(customParam.isTable) {
				//Navigation Link Clicked from Table Popover
				extraFilters = this._getTableContextParameters(dimensionsArray);
				cleanUp(appParameters, extraFilters);
				jQuery.extend(true, extraParameters, extraFilters);
			} else {
				//Navigation Link Clicked From Chart Popover
				extraFilters = this._getChartContextParameters(dimensionsArray);
				cleanUp(appParameters, extraFilters);
				jQuery.extend(true, extraParameters, extraFilters);
			}
		}
		jQuery.extend(true, extraParameters, startupParameters, appParameters);

		//New Code - Using Shell API to Change the HASH
		if(sap.ushell.Container && sap.ushell.Container.getService) {
			var oCrossApplicationNavigation = sap.ushell.Container.getService("CrossApplicationNavigation");
			if(oCrossApplicationNavigation) {
				var targetAppHash = oCrossApplicationNavigation.hrefForExternal({
					target : {
						semanticObject : so,
						action : action
					},
					params : extraParameters
				});
				if(appType=="SAPUI5"){
					this._detachHashChangeListener();
				}
				window.location.hash = targetAppHash;
			} else {
				jQuery.sap.log.error("ushell CrossApplicationNavigation service returns null");
			}
		} else {
			jQuery.sap.log.error("ushell Services not running");
		}
		//Old Code - Manually Changing the hash
		/*
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setSemanticObject(so, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setAction(action, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(null, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(appParameters, false);
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		if(customParam.isFromOpenIn) {
			//Navigation Link Clicked from OpenIn
			extraFilters = this._getTableContextParameters(dimensionsArray);
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
			extraFilters = this.use_CA ? this._getChartContextParameters(dimensionsArray) : this._getVizChartContextParameters(dimensionsArray); 
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
		} else {
			if(customParam.isTable) {
				extraFilters = this._getTableContextParameters(dimensionsArray);
				sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
				//Navigation Link Clicked from Table Popover
			} else {
				extraFilters = this._getChartContextParameters(dimensionsArray);
				sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
				//Navigation Link Clicked From Chart Popover
			}
		}
		this._detachHashChangeListener();
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
		 */
	},
	_fillChartTablePopoverContent : function() {
		var that=this;
		var aViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId());
		this.POPOVER_VIEW_NAVIGATION_MODEL.setData({
			VIEW_NAVIGATION : aViews
		});
		this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
			APP_NAVIGATION : []
		});
		if(this._popoverNavigationListReferences && this._popoverNavigationListReferences.length) {
			this._popoverNavigationListReferences.forEach(function(oNavigationList) {
				oNavigationList.setNoDataText(" ");
				oNavigationList.setBusy(true);
			}, this);
		}

		that._fetchNavigationLinks().done(function(){
			var NavigationService = sap.suite.ui.smartbusiness.Adapter.getService("Navigation");
			that.SEMANTIC_OBJECT_BY_CONTEXT_LINKS_ODATA_CALL_REF = NavigationService.getLinksByContext({
				semanticObject : that.SEMANTIC_OBJECT,
				dimensions : that.SELECTED_VIEW.getDimensions(),
				context : that,
				viewId : that.EVALUATION.getId() + "_" + that.SELECTED_VIEW.getId()
			}).done(function(links){
				var OPEN_IN_LINKS = jQuery.extend({}, that._OPEN_IN_LINKS);
				var uniqueLinks = that._getUniqueNavLinks(links, OPEN_IN_LINKS);
				if(uniqueLinks.length) {
					that.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
						APP_NAVIGATION : uniqueLinks
					});
				}
				if(that._popoverNavigationListReferences && that._popoverNavigationListReferences.length) {
					that._popoverNavigationListReferences.forEach(function(oNavigationList) {
						oNavigationList.setBusy(false);
						//oNavigationList.setNoDataText("-");
					}, that);
				}
			})
		});
	},    
	_getListOfViewsForPopover : function(allViews, excludeThisViewId) {
		var array = [];
		allViews.forEach(function(view){
			if(view.ID !== excludeThisViewId) {
				array.push(jQuery.extend(false, {}, view));
			}
		});
		return array;
	},
	_onTableRowSelected : function() {
		this._fillChartTablePopoverContent();
	},

	_getStacking : function(chartColumns) {
		var stacking = {
				stacking : false,
				dimensionStacked : false,
				measureStacked : false,
				stackedDimensionName : null
		};
		var currentView  = this.SELECTED_VIEW;
		chartColumns.forEach(function(eachColumn) {
			var oColumn = currentView.findColumnByName(eachColumn);
			if(oColumn.isMeasure()) {
				if(oColumn.isStacked()) {
					stacking.stacking = true;
					stacking.measureStacked = true;
					return false;
				}
			}
		});
		if(!stacking.stacking) {
			chartColumns.forEach(function(eachColumn) {
				var oColumn = currentView.findColumnByName(eachColumn);
				if(oColumn.isDimension()) {
					if(oColumn.isStacked()) {
						stacking.stacking = true;
						stacking.dimensionStacked = true;
						if(oColumn.getAxis() == 2) {
							stacking.stackedDimensionName = oColumn.getName()
							return false;
						}
					}
				}
			});
		}
		return stacking;
	},
	_getEvaluationThresholdMeasures : function(){
		var thresholdMeasuresArray = [];
		thresholdMeasuresArray.push(this.EVALUATION.getKpiMeasureName());
		if(this.EVALUATION.getThresholdValueType() === "MEASURE" || this.EVALUATION.getThresholdValueType() === "RELATIVE") {
			var thresholdObjArray = this.EVALUATION.getValues().results ;
			if(thresholdObjArray && thresholdObjArray.length) {
				for(var i=0;i<thresholdObjArray.length;i++) {
					if((thresholdObjArray[i]).COLUMN_NAME && !((thresholdObjArray[i]).FIXED)) {
						thresholdMeasuresArray.push((thresholdObjArray[i]).COLUMN_NAME);
					}
				}
			}
		}
		return thresholdMeasuresArray;
	},

	renderChart: function(viewConfiguration, chartConfig, chartColumns) {
		var that=this;
		var chart = this.getUIComponents().getChart();

		if(!chartConfig || !chartColumns.length)
			return;

		var vizVbox = this.getUIComponents().getVIZvbox();

		// render viz chart :			
		vizVbox.setVisible(true);

		chart.addEventDelegate({                    // find another solution.              
			onAfterRendering : function() {
				that._fillVizChartPopoverContent(that.vizChartPopover, false);
			}
		});

		chart.attachSelectData(jQuery.proxy(this._onVizChartDataPointSelection, this, {chartPopover: this.vizChartPopover})); 
		var dataSet = this.create_vizDataset(chartConfig, chartColumns);
		var oViz = this.getVizTypeAndIcon(chartConfig, viewConfiguration);
		chart.setVizType(oViz.type);
		chart.getParent().setIcon(oViz.icon);
		chart.setDataset(dataSet);		
//		this.setAllVizFormatters();
		this._addFeedsToVizFrame(chart, chartConfig, chartColumns);

		this.applyColorToVizChart(chart, chartConfig);	

		// for dual axes and bubble(add formatting etc. to viz properties):
		if(chartConfig.isDualAxis() || chartConfig.getChartType().isBubble()) {
			var vProperties = this.chart.getVizProperties();
			vProperties.valueAxis2 = {
					label:{
						formatString:"y2ValueAxisFormatter"
					}
			};
			this.chart.setVizProperties(vProperties);

			if((this.EVALUATION.getScaling() == -2) && (chartConfig.isAbsoluteValue()) && (chartConfig.getChartType().isBar() || chartConfig.getChartType().isColumn())) {
				this._handleVizDualAxisWhenPercentScale(that.chart);
			}
		}

		// end.

		this._showChartLegendIfApplicable(chartConfig,chartColumns);

	},
	renderAnalyticalMap : function(viewConfiguration) {
		var analyticalMap = this.getUIComponents().getAnalyticalMap();
		var mapController = analyticalMap.analyticalMap.getParent().getController();
		mapController.renderMap();
	},
	renderGeoMap : function(viewConfiguration) {
		var geoMap = this.getUIComponents().getGeoMap();
	},
	_showChartLegendIfApplicable : function(oChartConfig, aColumns) {
		var otoolbar = this.getUIComponents().getVizChartContainer() ;
		var oStacking = this._getStacking(aColumns);
		var VIEW = this.SELECTED_VIEW;
		var oChartType = oChartConfig.getChartType();
		var isStackApplied = ((oChartType.isBar() || oChartType.isColumn()) && oStacking.dimensionStacked && oStacking.stackedDimensionName && (VIEW.getDimensionCount() > 1)) ? true : false ;        

		if((VIEW.getMeasures().length > 1) || (isStackApplied)) {             //  || ((VIEW.getMeasures()).indexOf(this.EVALUATION.getKpiMeasureName()) == -1)
			otoolbar.setShowLegend(true);
		} else {
			otoolbar.setShowLegend(false);
		}

	},

	_isEvaluationThresholdMeasure: function(oMsr) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		if(thresholdMsrsArray && thresholdMsrsArray.length) {
			if(thresholdMsrsArray.indexOf(oMsr) != -1) {
				return true;					
			} 
		}
		return false;
	},
	_getMeasuresByAxis: function() {
		var that = this;
		var VIEW = this.SELECTED_VIEW;
		var measures = VIEW.getMeasures() ;
		var axis1Msrs = [], axis2Msrs = [] ;
		for(var i=0;i<measures.length;i++) {
			var oColumn = VIEW.findColumnByName(measures[i]);
			if(oColumn.isMeasure() && (oColumn.getAxis() == 1)) {
				axis1Msrs.push(measures[i]);
			} else if(oColumn.isMeasure() && (oColumn.getAxis() == 2)) {
				axis2Msrs.push(measures[i]);
			}
		}
		return {
			axis1Msr:axis1Msrs,
			axis2Msr:axis2Msrs 
		}
	},
	_isMeasureSetPercentScaled: function(oMsrs) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		if(thresholdMsrsArray && thresholdMsrsArray.length && oMsrs && oMsrs.length) {
			for(var i=0;i<oMsrs.length;i++) {
				if(thresholdMsrsArray.indexOf(oMsrs[i]) != -1) {
					return true;					
				} 
			}
		}
		return false;
	},

	_getChartNumberFormatter:function(isStandard, decimals, measure, overridePercentScaling, formatCsv){
		var self = this;
		overridePercentScaling = overridePercentScaling || false;
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		return function(s){
			if(!isNumber(s))
				if(formatCsv)
					return '"' + s + '"';
				else
					return s;
			var isACurrencyMeasure = self.isACurrencyMeasure(measure);
			var scale = overridePercentScaling ? 0 : null;
			var chartFormatter = self.getLibFormatter(s, isACurrencyMeasure, scale, decimals);
			if(formatCsv)
				return '"' + s + '"';
			return chartFormatter.format(Number(s));
		};
	},
	_getChartPercentFormatter:function(formatCsv){
		var that = this;
		var percentFormatter = that.getLibFormatter(1, false, -2);

		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		return function(s){
			if(isNumber(s)) {
				if(formatCsv)
					return '"' + s + '"';
				else
					return percentFormatter.format(Number(s));
			} else if(formatCsv) {
				return '"' + s + '"';
			} else
				return s;
		};
	},

	getColumnValueFormatter:function(sName,bIsDimension,isPercentScaled,axisScaled,formatCsv){
		var that = this;
		var VIEW = this.SELECTED_VIEW;    	
		var oConfig = (VIEW.getChartConfiguration())[0];
		var formatter;
		if(bIsDimension){
			formatter=function (s) {
				if(formatCsv) {
					return (s===0 || s) ? '"' + s + '"' : '"'+s+'"';
				} else {
					return (s===0 || s) ? s + "" : s;
				}
			};
		}else{
			if(isPercentScaled) {
				if(oConfig.getChartType().isTable()) {
					if(that._isEvaluationThresholdMeasure(sName))
//						formatter=this._getChartPercentFormatter(true);
						formatter=this._getChartPercentFormatter(formatCsv);
						else
							formatter=this._getChartNumberFormatter(true,this.nDecimal, sName, true, formatCsv);
				} else if((oConfig.isDualAxis()) && (oConfig.isAbsoluteValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn())) {
					var oColumn = VIEW.findColumnByName(sName);
					if(axisScaled[(oColumn.getAxis())-1] && that._isEvaluationThresholdMeasure(sName))
//						formatter=this._getChartPercentFormatter(true);
						formatter=this._getChartPercentFormatter(formatCsv);
					else
						formatter=this._getChartNumberFormatter(true,this.nDecimal, sName, true, formatCsv);
				} else {
//					formatter=this._getChartPercentFormatter(true);
					if(that._isEvaluationThresholdMeasure(sName)) {
						formatter=this._getChartPercentFormatter(formatCsv);
					} else {
						formatter=this._getChartNumberFormatter(true,this.nDecimal, sName, true, formatCsv);
					}
				}
			}
			else	
				formatter=this._getChartNumberFormatter(true,this.nDecimal, sName, true, formatCsv);
		}
		//var sUri =this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var sUri =this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var oMetaData=sap.suite.ui.smartbusiness.lib.Util.odata.getEdmType(sUri,sName,true);
		var sType=oMetaData.type;
		var sFormat=oMetaData.format;
		sFormat = sFormat.toUpperCase();
		if(sType=='Edm.DateTime'){
			if(!sap.suite.ui.smartbusiness.lib.Util.odata.isTimeZoneIndependent(sUri,this.EVALUATION.getEntitySet())){
				var style;
				if(sFormat=="DATE" || sFormat=="NONE"){
					style="daysAgo";
				}else if(sFormat=="DATETIME"){
					style="";
				}
				if(style){
					var oF=new sap.ca.ui.model.type.Date({
						style: style
					});
					formatter=function(s){
						if(formatCsv)
							return '"' + oF.formatValue(s,"string") + '"';
						else
							return oF.formatValue(s,"string");
					};
				}else{
					var oF= sap.ui.core.format.DateFormat.getDateTimeInstance();
					formatter=function(ts){
						if(ts && ts.getMinutes){
							if(formatCsv)
								return '"' + oF.format(ts) + '"';
							else
								return oF.format(ts);
						}
						if(formatCsv)
							return '"' + ts + '"';
						else
							return ts;
					};
				}
			}else{
				formatter=function(ts){
					if(ts && ts.getMinutes){
						ts.setMinutes( ts.getMinutes() + ts.getTimezoneOffset());
						var instanceType=(sFormat=="DATE")?"getDateInstance":"getDateTimeInstance";
						return sap.ui.core.format.DateFormat[instanceType]().format(ts);
					}
					if(formatCsv)
						return '"' + ts + '"';
					else
						return ts;
				};
			}
		}
		return formatter;
	},
	/*	getChartPopoverFormatter:function(){
		jQuery.sap.require("sap.ui.core.format.NumberFormat");
		jQuery.sap.require("sap.ca.ui.model.format.AmountFormat");
		var oChartConfig= this.SELECTED_VIEW.getChartConfiguration()[0];
		var formatterArray=[[],[],[]] ;
		var that=this;
		var VIEW = this.SELECTED_VIEW;
		var measures=this.SELECTED_VIEW.getMeasures();
		var uom = this.MEASURE_UNIT_PROPERTY_MAPPING;
		var oChartType = oChartConfig.getChartType() ;
		var sUri =this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var entitySet = this.EVALUATION.getEntitySet();
		var data=this.getUIComponents().getChart().getModel().getData().data;

		var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance(this.oFormatOptions_percent);



		var isPercentScaled = ((this.EVALUATION.getScaling() == -2) && (this._isMeasureSetPercentScaled(measures)));


		function _getFormatter(sMeasure,sUri, entitySet, chartData) {


			var formattingMatadata  = sap.suite.ui.smartbusiness.lib.Util.odata.getFormattingMetadata(sUri, entitySet, sMeasure );
			return function(val){


				if (formattingMatadata._hasSapText) {

//						//	TODO:	sap:text based formatting
					return sap.ca.ui.model.format.AmountFormat.FormatAmountStandard(val);

				}
				else 
				if(formattingMatadata._hasCurrency){
					var currencyValue = (chartData && chartData[0])?chartData[0][formattingMatadata._currencyColumn]?chartData[0][formattingMatadata._currencyColumn]:"":"";
					return sap.ca.ui.model.format.AmountFormat.FormatAmountStandardWithCurrency(val, currencyValue);
				}
				else{
							var unit = "";
							var data=that.getUIComponents().getChart().getModel().getData().data;
							if(data && data.length) {
								unit=(data && data[0])?data[0][uom[sMeasure]]?" "+data[0][uom[sMeasure]]:"":"";
								data[0][uom[sMeasure]]
							}
							var numberFormatter= sap.ui.core.format.NumberFormat.getFloatInstance(that.oFormatOptions_core);
							return numberFormatter.format(val)+unit;
				  }
			}
		}


		function _getPercentFormatter(sMeasure) {

			return function(val) {
				return percentFormatter.format(val) ;
			} 
		}

		if(oChartConfig.isPercentageValue()){
			for(var k=0;k<measures.length;k++){


				formatterArray[0].push(function(val) {
					return percentFormatter.format(val) ;
				});
				formatterArray[1].push(function(val) {
					return percentFormatter.format(val) ;
				});
			}
		} else {			
			if((oChartConfig.isDualAxis()) && (oChartConfig.isAbsoluteValue()) && (oChartConfig.getChartType().isBar() || oChartConfig.getChartType().isColumn())) {
				var axisMeasures = this._getMeasuresByAxis();
				var isAxis1Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis1Msr);
				var isAxis2Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis2Msr);
				if(isPercentScaled && isAxis1Scaled) {
					for(var k=0;k<axisMeasures.axis1Msr.length;k++){
						formatterArray[0].push(_getPercentFormatter((axisMeasures.axis1Msr)[k]));
					}
				} else {
					for(var k=0;k<axisMeasures.axis1Msr.length;k++){
						formatterArray[0].push(_getFormatter((axisMeasures.axis1Msr)[k],sUri, entitySet, data));
					}
				}
				if(isPercentScaled && isAxis2Scaled) {
					for(var k=0;k<axisMeasures.axis2Msr.length;k++){
						formatterArray[1].push(_getPercentFormatter((axisMeasures.axis2Msr)[k]));
					}
				} else {
					for(var k=0;k<axisMeasures.axis2Msr.length;k++){
						formatterArray[1].push(_getFormatter((axisMeasures.axis2Msr)[k],sUri, entitySet, data));
					}
				}
			} else if(oChartConfig.getChartType().isBubble()) {
				for(var k=0;k<measures.length;k++){
					if(!(formatterArray[k]))
						formatterArray[k]=[];
					if(isPercentScaled)
						formatterArray[k].push(_getPercentFormatter(measures[k]));
					else
						formatterArray[k].push(_getFormatter(measures[k],sUri, entitySet, data));
				}
			} else {
				for(var k=0;k<measures.length;k++){
					if(isPercentScaled)
						formatterArray[0].push(_getPercentFormatter(measures[k]));
					else
						formatterArray[0].push(_getFormatter(measures[k],sUri, entitySet, data));
				}
			}			
		}
		return formatterArray;

	},               */

	/* TABLE Related Methods Start Here*/
	_getVisibleColumns : function(defaultColumns) {
		var visibleColumns = [];
		defaultColumns.forEach(function(column, index, array) {
			var oColumn = this.SELECTED_VIEW.findColumnByName(column);
			if(oColumn.isVisibleInTable()) {
				visibleColumns.push(column);
			}
		},this);
		return visibleColumns;
	},
	_getValueState : function(actualValue, thresholdValue) {
		if(!this.EVALUATION.isTargetKpi()) {
			if(actualValue < thresholdValue) {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
			} else if (actualValue == thresholdValue) {
				return sap.ui.core.ValueState.None;
			} else {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
			}
		} else {
			return sap.ui.core.ValueState.None;
		}
	},
	_getTableCell : function(originalMeasure, colorScheme, isPercentScaled, axisScale) {
		var sUri =this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var entitySet = this.EVALUATION.getEntitySet();
		var formattingMatadata  = sap.suite.ui.smartbusiness.lib.Util.odata.getFormattingMetadata(sUri, entitySet, originalMeasure );

		var thresholdMeasure = this.SELECTED_VIEW.getChartConfiguration()[0] && this.SELECTED_VIEW.getChartConfiguration()[0].getThresholdMeasure();
		var that = this;

		function _getCurrencyFormatter() {
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			return function(s, currencyCode){
				var isACurrencyMeasure = true;
				return that.libFormat_nonscaled(s, isACurrencyMeasure, currencyCode);
			};
		}

		if (formattingMatadata._hasCurrency && !isPercentScaled) {

			if(this.EVALUATION.isTargetKpi()) {
				return new sap.m.Label({
					text : {
						parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
						formatter:_getCurrencyFormatter()
					},
					tooltip : {
                        parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
                        formatter:_getCurrencyFormatter()
                    }
				});
			} else {
				if(colorScheme.isAutoSemantic() && thresholdMeasure) {
					return new sap.m.ObjectNumber({
						number: {
							parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
							formatter:_getCurrencyFormatter()
						},
						tooltip: {
                            parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
                            formatter:_getCurrencyFormatter()
                        },
						state : {
							parts : [
							         {path : originalMeasure},
							         {path : thresholdMeasure}
							         ],
							         formatter : function(oMeasureValue, tMeasureValue) {
							        	 try {
							        		 oMeasureValue = window.parseFloat(oMeasureValue);
							        		 tMeasureValue = window.parseFloat(tMeasureValue);
							        		 return that._getValueState(oMeasureValue, tMeasureValue);
							        	 }catch(e) {
							        		 return sap.ui.core.ValueState.None;
							        	 }
							         }
						}
					});
				} else {
					return new sap.m.Label({
						text : {
							parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
							formatter:_getCurrencyFormatter()
						},
						tooltip : {
                            parts:[{path : originalMeasure},{path : formattingMatadata._currencyColumn}],
                            formatter:_getCurrencyFormatter()
                        }
					});
				}
			}

		}
		else{
			if(this.EVALUATION.isTargetKpi()) {
				return new sap.m.Label({
					text : {
						path : originalMeasure,
						formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
					},
					tooltip : {
                        path : originalMeasure,
                        formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                    }
				});
			} else {
				if(colorScheme.isAutoSemantic() && thresholdMeasure) {
					return new sap.m.ObjectNumber({
						number: {
							path: originalMeasure,
							formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
						},
						tooltip: {
                            path: originalMeasure,
                            formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                        },
						state : {
							parts : [
							         {path : originalMeasure},
							         {path : thresholdMeasure}
							         ],
							         formatter : function(oMeasureValue, tMeasureValue) {
							        	 try {
							        		 oMeasureValue = window.parseFloat(oMeasureValue);
							        		 tMeasureValue = window.parseFloat(tMeasureValue);
							        		 return that._getValueState(oMeasureValue, tMeasureValue);
							        	 }catch(e) {
							        		 return sap.ui.core.ValueState.None;
							        	 }
							         }
						}
					});
				} else {
					return new sap.m.Label({
						text : {
							path : originalMeasure,
							formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
						},
						tooltip : {
                            path : originalMeasure,
                            formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
                        }
					});
				}
			}

		}

//		// && (originalMeasure !== thresholdMeasure) put this condition if required
//		if(this.EVALUATION.isTargetKpi()) {
//		return new sap.m.Label({
//		text : {
//		path : originalMeasure,
//		formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
//		}
//		});
//		} else {
//		if(colorScheme.isAutoSemantic() && thresholdMeasure) {
//		return new sap.m.ObjectNumber({
//		number: {
//		path: originalMeasure,
//		formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
//		},
//		state : {
//		parts : [
//		{path : originalMeasure},
//		{path : thresholdMeasure}
//		],
//		formatter : function(oMeasureValue, tMeasureValue) {
//		try {
//		oMeasureValue = window.parseFloat(oMeasureValue);
//		tMeasureValue = window.parseFloat(tMeasureValue);
//		return that._getValueState(oMeasureValue, tMeasureValue);
//		}catch(e) {
//		return sap.ui.core.ValueState.None;
//		}
//		}
//		}
//		});
//		} else {
//		return new sap.m.Label({
//		text : {
//		path : originalMeasure,
//		formatter:this.getColumnValueFormatter(originalMeasure,false,isPercentScaled,axisScale)
//		}
//		});
//		}
//		}
	},
	_sortTableByColumnName : function(oColumnHeader) {
		var iconMapping = {
				"asc" : String.fromCharCode(0xe1e1),
				"desc" : String.fromCharCode(0xe1e2)
		};
		var sortOrder = null;
		if(oColumnHeader.sort_by === void (0)) {
			sortOrder = "desc";
		} else {
			sortOrder = oColumnHeader.sort_by =="asc" ? "desc" : "asc";
		}
		oColumnHeader.sort_by = sortOrder;
		var allColumns = this.getUIComponents().getTable().getColumns();
		allColumns.forEach(function(oColumn) {
			var header = oColumn.getHeader();
			header.setText(header.dimension_label+(header.UOM?" ("+header.UOM+")":""));
		});

		oColumnHeader.setText(iconMapping[sortOrder]+" "+oColumnHeader.dimension_label+(oColumnHeader.UOM?" ("+oColumnHeader.UOM+")":""));

		var oColumn = this.SELECTED_VIEW.findColumnByName(oColumnHeader.dimension_key);
		var actualSortBy = oColumn.getSortBy();

		this.TABLE_SORTING = [{
			name : actualSortBy,
			order : sortOrder
		}];
		this.fetchDataForChart();

	},
	_appendUOMToTableHeader : function(result) {
		if(this.UOM_APPENDED_TO_HEADER) {
			return;
		}
		var columns = this.getUIComponents().getTable().getColumns();
		columns.forEach(function(oColumn) {
			var columnHeaderText = oColumn.getHeader().getText();
			var columnName = oColumn.column_name;
			var oColumnObject = this.SELECTED_VIEW.findColumnByName(columnName);
			if(oColumnObject.isMeasure()) {
				var uomProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[columnName];
				if(uomProperty!==columnName) {
					var uomValue = result[uomProperty];
					if(uomValue) {
						oColumn.getHeader().UOM = uomValue;
						oColumn.getHeader().setText(columnHeaderText+" ("+uomValue+")");
						oColumn.getHeader().setTooltip(columnHeaderText+" ("+uomValue+")");
					}
				}
			}
		},this);
		this.UOM_APPENDED_TO_HEADER = true;
	},
	renderTable: function(tableColumns, colorScheme) {
		var that = this;

		var vizVbox = this.getUIComponents().getVIZvbox();
		vizVbox.setVisible(true);

		var table = this.getUIComponents().getTable();
		var oConfig = (this.SELECTED_VIEW.getChartConfiguration())[0];
		table.removeAllColumns();
		var SELECTED_VIEW = this.SELECTED_VIEW;
		var visibleColumns = this._getVisibleColumns(tableColumns);
		this.COLUMNS_SORT = [];
		tableColumns.forEach(function(sColumn, index, allColumns) {
			var oColumn = this.SELECTED_VIEW.findColumnByName(sColumn);
			if(oColumn.getSortBy() && oColumn.getSortOrder()) {
				/*TO be on safer side.. Checking the sort order value */
				if(oColumn.getSortOrder() == "asc" || oColumn.getSortOrder() == "desc") {
					this.COLUMNS_SORT.push({
						name : oColumn.getSortBy(),
						order : oColumn.getSortOrder()
					});
				}
			}
		}, this);

		var isPercentScaled = false ;
		if((this.EVALUATION.getScaling() == -2) && !((oConfig.isPercentageValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn()))) {
			isPercentScaled = this._isMeasureSetPercentScaled(this.SELECTED_VIEW.getMeasures());			 
		}

		var axisScale = [] ;
		if(isPercentScaled) {
			if((oConfig.isDualAxis()) && (oConfig.isAbsoluteValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn())) {
				var axisMeasures = this._getMeasuresByAxis();
				axisScale.push(this._isMeasureSetPercentScaled(axisMeasures.axis1Msr));
				axisScale.push(this._isMeasureSetPercentScaled(axisMeasures.axis2Msr));
			}
		}

		var template =  new sap.m.ColumnListItem({
			type: sap.m.ListType.Active 
		});
		for (var i = 0, l= visibleColumns.length ; i < l; i++) {
			var oColumn = this.SELECTED_VIEW.findColumnByName(visibleColumns[i]);
			var Label = new sap.m.Label({
				text: this.COLUMN_LABEL_MAPPING[visibleColumns[i]], //Use the Label instead of Technical Column Name
				tooltip: this.COLUMN_LABEL_MAPPING[visibleColumns[i]]
			}).addStyleClass("tableColumnHeader");
			Label.dimension_key = visibleColumns[i];
			Label.dimension_label = this.COLUMN_LABEL_MAPPING[visibleColumns[i]];
			Label.attachBrowserEvent("click", function() {
				that._sortTableByColumnName(this);
			});
			var columns = new sap.m.Column({
				hAlign: oColumn.isMeasure() ? "End" : "Begin",
						styleClass: "qty",
						header: Label,
						minScreenWidth: "Tablet",
						demandPopin: true,
			});
			columns.column_name = visibleColumns[i];
			if(oColumn.isMeasure()) {
				//Dynamically get oCell object based on Threshold Measure
				var oCell = this._getTableCell(visibleColumns[i], colorScheme, isPercentScaled, axisScale);
				template.addCell(oCell);
			} else {
				var oCell = new sap.m.Label({
					text: {
						path: this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],
						formatter:this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],true)
					},
					tooltip: {
                        path: this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],
                        formatter:this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[visibleColumns[i]],true)
                    }
				});
				template.addCell(oCell);
			}
			table.addColumn(columns);
		}
		table.bindAggregation("items", "/data", template);
	},
	/* TABLE Related Methods End Here*/



	/*
	 * EVENT-HANDLERS :: BEGIN
	 */

	_abortPendingODataCalls : function() {
		var abort = function(oDataCallRef) {
			try {
				if(oDataCallRef) {
					oDataCallRef.abort();
				}
			}catch(e) {}
		};
		var abortArray = function(aODataCallRef) {
			if(aODataCallRef && aODataCallRef.length) {
				aODataCallRef.forEach(function(odataCallRef) {
					abort(odataCallRef);
				});
			}
		};
		abort(this.DDA_CONFIG_ODATA_CALL_REF);
		abort(this._bundled_evaluations_call_ref);
		abort(this.EVALUATION_ODATA_CALL_REF);
		abort(this.SEMANTIC_OBJECT_LINKS_ODATA_CALL_REF);
		abortArray(this.SEMANTIC_OBJECT_BY_CONTEXT_LINKS_ODATA_CALL_REF);
		abort(this.CHART_TABLE_DATA_ODATA_CALL_REF);
		abort(this.FETCH_AGREGATION_VALUE_ODATA_CALL_REF);
	},
	onBack: function(evt) {
		this._abortPendingODataCalls();
		window.history.back();

	},
	_resetConfigurations : function() {
		this.TABLE_SORTING = null;
		this.UOM_APPENDED_TO_HEADER = null;
		this.setChartSelectionContextObject(null);
	},

	_attachHashChangeEvent: function () {
		this.hashChanger = this.oRouter.oHashChanger;
		var that = this;
		if (this.hashChanger) {
			try {
				if (!that.hashChangerAttached) {
					this.hashChanger.attachEvent("hashChanged", this._proxyHashChangeListener);
					this.hashChanger.viewRef = this;
				}
				that.hashChangerAttached = true;
			} catch (e) {
				jQuery.sap.log.error("Couldn't Attach HashChange Event");
			}
		} else {

			jQuery.sap.log.error("Router HashChanger Object Found NULL");
		}
	},
	getUrlFilters : function() {
		var params = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
		var urlFilters = [];
		for (var key in params) {
			var aFilterValues = params[key];
			if(aFilterValues && aFilterValues.length) {
				aFilterValues.forEach(function(sFilterValue) {
					var Obj = {};
					Obj["NAME"] = key;
					Obj["OPERATOR"] = "EQ";
					Obj["VALUE_1"] = sFilterValue;
					Obj["VALUE_2"] = "";
					Obj["TYPE"] = "FI";
					urlFilters.push(Obj);
				});
			}
		}
		return urlFilters;
	},
	getAllFilters : function() {
		var evaluationFilters = this.EVALUATION.getFilters()["results"] || [];
		var urlFilters=this.getUrlFilters();
		var tmp={};
		urlFilters.forEach(function(o){
			tmp[o.NAME]=true;

		});
		return urlFilters.concat(evaluationFilters.filter(function(o){
			return !tmp[o.NAME];
		}));
	},
	getAdditionFiltersForChipConfiguration : function() {
		var params = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
		var urlFilters = [];
		if(params) {
			for (var key in params) {
				var filterValues = params[key];
				if(filterValues && filterValues.length) {
					filterValues.forEach(function(eachFilterValue) {
						var tempArray = [];
						tempArray[0] = key;
						tempArray[1] = "EQ";
						tempArray[2] = eachFilterValue;
						tempArray[3] = "";
						urlFilters.push(tempArray);
					});
				}
			}
		}
		return urlFilters;
	},
	_hideKpiHeaderIfRequired : function() {
		return;

		if(this.CONFIGURATION.getHeaders().length == 0) {
			return;
		}
		try {
			var appParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
			if(appParameters) {
				if(Object.keys(appParameters).length) {
					this.getUIComponents().getTileContainer().$().css("overflow","hidden");
					this.getUIComponents().getTileContainer().$().animate({
						height : "0px"
					});
					return;
				}
			}
			this.getUIComponents().getTileContainer().$().animate({
				height : "156px"
			});
		} catch(e) {
			jQuery.sap.log.error("Failed to Hide KPI Header : "+e);
		}
	},
	hashChangeListener: function (hashChangeEvent) {
		this.NEW_HASH = hashChangeEvent ? hashChangeEvent.getParameter("newHash") : "";
		this.OLD_HASH = hashChangeEvent ? hashChangeEvent.getParameter("oldHash") : "";        
		var AppParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		var Key_ViewId = "viewId";
		//when no specific view specified - take default view (default mode)
		if(!AppParameters[Key_ViewId]) {
			this.SELECTED_VIEW = this.CONFIGURATION.getDefaultView();
			if (this.SELECTED_VIEW) {
				this.renderView(this.SELECTED_VIEW);
				AppParameters.viewId = [this.SELECTED_VIEW.getId()];
				sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(AppParameters, false);
				var hash = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getHash();
				window.location.replace("#"+hash);
			} else {
				jQuery.sap.log.error("Evaluation does not have any views configured");
			}
		}
		//when application starts with a specific viewId/filter in the hash (bookmark mode)
		else if(!this.SELECTED_VIEW) {
			this.firstTimeFlag = true;
			this.SELECTED_VIEW = this.CONFIGURATION.findViewById(AppParameters[Key_ViewId][0]);
			if (this.SELECTED_VIEW) {
				this._resetConfigurations();
				this.renderView(this.SELECTED_VIEW);
				//accessing internal property _oFirstDimensionSelect to set selected View.
				//It doesn't fire the change automatically; so done manually
				this._hideKpiHeaderIfRequired();
				this._setViewComboBoxSelectedIndex();
				this.fetchKpiValue();
				this.fetchDataForChart();
				this.updateFilter();
			} else {
				jQuery.sap.log.error("The view with viewId : "+ AppParameters[Key_ViewId][0]  + " does not exist");
			}
		}
		//when viewId gets changed in the hash (viewswitch mode)
		else if(this.SELECTED_VIEW && AppParameters[Key_ViewId][0] != this.SELECTED_VIEW.getId()) {
			this.SELECTED_VIEW = this.CONFIGURATION.findViewById(AppParameters[Key_ViewId][0]);
			if(this.firstTimeFlag) {
				sap.suite.ui.smartbusiness.lib.Util.cache.invalidateKpiDetailsCache();
			}
			this._setViewComboBoxSelectedIndex();
			this._resetConfigurations();
			this.renderView(this.SELECTED_VIEW);
			this.fetchKpiValue();
			this.fetchDataForChart();
			this._hideKpiHeaderIfRequired();
			this.updateFilter();
			this._refreshKpiHeaderTiles();
		}
		//when filters/view change in the hash
		else {
			// invalidating cache on change of filters
			if(this.firstTimeFlag) {
				sap.suite.ui.smartbusiness.lib.Util.cache.invalidateKpiDetailsCache();
			}
			this._setViewComboBoxSelectedIndex();
			this._hideKpiHeaderIfRequired();
			this.updateFilter();
			this.fetchKpiValue();
			this.fetchDataForChart();
			this._refreshKpiHeaderTiles();
		}
		this.byId("vizViewSelector").setTooltip(((this.SELECTED_VIEW && this.SELECTED_VIEW.getTitle()) || ""));
	},
	_refreshKpiHeaderTiles : function() {
		var header_container = this.getUIComponents().getTileContainer();
		sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager.hashChangeListner({
			allTiles : this.CONFIGURATION.getHeaders(),
			headerContainer : header_container,
			sapSystem : this.SAP_SYSTEM,
			urlFilters : this.getUrlFilters(),
			firstTimeFlag : this.firstTimeFlag
		});
		this.firstTimeFlag = true;
	},
	_setViewComboBoxSelectedIndex : function() {
		try {
			var vizViewSelector = this.getView().byId("vizViewSelector");	
			vizViewSelector.setSelectedKey(this.SELECTED_VIEW.getId());				
		} catch(e) {
			jQuery.sap.log.error("Failed to Set Selected Index of View ComboBox");
		}
	}, 
	//Experimental
	_fixFacetListSelection : function() {
		try {
			var filter = this.getUIComponents().getFilter();
			var facetFilter = filter.getFacetFilterReference();
			var urlParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
			var facetLists = facetFilter.getLists();
			if(facetLists.length) {
				facetLists.forEach(function(facetList) {
					var dimensionName = facetList._techName;
					if(urlParameters[dimensionName]) {
						var aFilterValue = urlParameters[dimensionName];
						var items = facetList.getItems();
						if(items.length) {
							items.forEach(function(item) {
								var curKey=item.getBindingContext().getObject()[facetList._techName]||"";
								curKey=curKey.getTime?curKey.getTime()+"":curKey+"";
								if(aFilterValue.indexOf(curKey) > -1) {
									item.setSelected(true);
								} else {
									item.setSelected(false);
								}
							});
						}
					} else {
						var items = facetList.getItems();
						if(items.length) {
							items.forEach(function(item) {
								item.setSelected(false);
							});
						}
					}
				}, this);
			}
		} catch(e) {
		}
	},
	/*
	 * EVENT-HANDLERS :: END
	 */
	_getUniqueNavLinks : function(results, existingLinks) {
		var uniqueLinks=[];
		var curApp = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getSemanticObject()+"-"+sap.suite.ui.smartbusiness.drilldown.lib.Hash.getAction();
		results.forEach(function(s){
			var t=s.id.split("~")[0];
			if(t) {
				if(!existingLinks[t]) {
					existingLinks[t] = t;
					if(s.id.indexOf(curApp) == -1) {
						uniqueLinks.push(s);
					}
				}
			}
		});
		return uniqueLinks;
	},
	_initExternalNavigationLinks : function(results) {
		var that=this;
		this.noNavigationLinks = false;
		this.listOfLinks = new sap.m.List({
			//noDataText : "-"
		});		
		this._externalLinkPromiseObject = {};
		sap.suite.ui.smartbusiness.Adapter.getService("Navigation").reset();
		this._oExternalNavLinksSOPopover = new sap.m.ResponsivePopover({
			modal:false,
			showHeader : false,
			enableScrolling:true,
			verticalScrolling:true,
			horizontalScrolling:false,
			placement:sap.m.PlacementType.Top,
			contentWidth:"18rem",
			content : that.listOfLinks
		});
		if(jQuery.device.is.phone) {
			this._oExternalNavLinksSOPopover.setShowHeader(true);
		}
		var model = new sap.ui.model.json.JSONModel({"EXTERNAL_APP_LINKS" : null});
		that.listOfLinks.bindItems("/EXTERNAL_APP_LINKS", new sap.m.StandardListItem({
			title : "{text}",
			customData : new sap.ui.core.CustomData({
				key : "{id}",
				value : "{applicationType}"
			}),
			tooltip : "{text}",
			type : sap.m.ListType.Navigation,
			press : jQuery.proxy(that._onAppSelection,that,{publishContext : true,isFromOpenIn : true})
		})).setModel(model);
		that.listOfLinks.getModel().setData({"EXTERNAL_APP_LINKS" : results});
//      this._oExternalNavLinksSOPopover.attachAfterOpen(function(){
//          that._fetchNavigationLinks();
//      });
	},
	_externalLinkPromiseObject : {},
	_fetchNavigationLinks : function() {
		var key = "EXTERNAL_NAV_LINK";
		if(!this._externalLinkPromiseObject[key]) {
			var that = this;
			var deferred = new jQuery.Deferred();
	//		this._externalLinkPromiseObject[key] = deferred.promise();
	//		this._oExternalNavLinksSOPopover.setBusy(true);
			var NavigationService = sap.suite.ui.smartbusiness.Adapter.getService("Navigation");
			var so = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getSemanticObject();
			var semanticObject = [so];
			var startTimeFetchSOLinks = new Date().getTime();
			var businessParamsMap = {};
			if(this.CHIP_ID) {
				businessParamsMap["chipId"] = this.CHIP_ID;
			}
			if(this._EVALUATION_ID) {
				businessParamsMap["evaluationId"] = this._EVALUATION_ID;
			}
			that.SEMANTIC_OBJECT_LINKS_ODATA_CALL_REF = NavigationService.getLinksBySemanticObject({
				success : function(results) {
					var endTimeFetchSOLinks = new Date().getTime();
					that._requestTimeLog["SEMANTIC_OBJECT_LINKS"] = {
							title : "Semantic Object Links",
							time : endTimeFetchSOLinks - startTimeFetchSOLinks
					};
					results = that._getUniqueNavLinks(results, that._OPEN_IN_LINKS) || [];
					if(results.length){
						// that.listOfLinks.getModel().setData({"EXTERNAL_APP_LINKS" : results});
					}
					//that._oExternalNavLinksSOPopover.setBusy(false);
					deferred.resolve(results);
				},
				async : true,
				error : function(error) {
					jQuery.sap.log.error("Error fetching navigation links by semantic object : "+so);
					that._oExternalNavLinksSOPopover.setBusy(false);
					deferred.reject();
				},
				semanticObject : semanticObject,
				businessParam : businessParamsMap,
				context : that
			});
		} 
		return deferred.promise();
		//return this._externalLinkPromiseObject[key];
	},

	_showExternalNavigationLinks : function(srcControl) {
		if(!this._oExternalNavLinksSOPopover.isOpen()) {
			this._oExternalNavLinksSOPopover.openBy(srcControl);	
		}
	},
	_toggleFilter : function() {
		var oController = this;
		var filter = this.getUIComponents().getFilter();
		if(!filter.getSelectedItems())
		{
			filter.setVisible(!filter.getVisible());
		}else
			if(filter.getSelectedItems() && filter.getVisible()==true){

				this.oI18nModel = oController.getView().getModel("i18n");
				sap.m.MessageBox.alert(oController.oI18nModel.getResourceBundle().getText("Do_you_really_want_to_reset_the_filters?"),{onClose:function(oEvent){
					if(oEvent=="OK"){
						filter.resetFilter();
						filter.setVisible(false);
					}else if(oEvent=="CANCEL"){
						filter.setVisible(true);
					}
				},
				title:oController.oI18nModel.getResourceBundle().getText("Reset_Filters"),
				actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL]
				});



			}
	},
	setHeaderFooterOptionsWithoutOpenInButton : function() {
		var options = this.getHeaderFooterOptions();
		options.buttonList = [];
		this.setHeaderFooterOptions(options);
		/*
		 * On Setting Header and Footer Again,the page title is Lost 
		 */
		this.renderTitle();
	},
	getHeaderFooterOptions : function() {
		var options = this._getHeaderFooterOptions();
		var oController = this;
		var oI18nModel = oController.getView().getModel("i18n");
		var os = sap.ui.Device.os.name;
		if(os && os == sap.ui.Device.os.OS.WINDOWS) {
			options.additionalShareButtonList.push({
				sBtnTxt: oI18nModel.getResourceBundle().getText("EXPORT_AS_CSV"),
				sIcon: "sap-icon://excel-attachment",
				onBtnPressed: function (oEvent) {
					oController._exportAsCSV();
				}
			});

		}
		if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbcmode") == "99")) {
			options.additionalShareButtonList.push({
				sBtnTxt: "Enable Compact Mode",
				sIcon: "sap-icon://resize",
				onBtnPressed: function (oEvent) {
					if(oController._compactMode) {
						oController.getView().removeStyleClass("sapUiSizeCompact");
						oController._compactMode = false;
						oEvent.getSource().setText("Enable Compact Mode");
					} else {
						oController.getView().addStyleClass("sapUiSizeCompact");
						oController._compactMode = true;
						oEvent.getSource().setText("Disable Compact Mode");
					}
					//Fixing post resize issue.
					this._fixPostResizeIssue();
					jQuery(window).trigger("resize");
				}
			});
		}
		if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbrequestlog") == "99")) {
			options.additionalShareButtonList.push({
				sBtnTxt: "Request-Time Log",
				sIcon: "sap-icon://time-entry-request",
				onBtnPressed: function (oEvent) {
					oController._performance.start(oController._requestTimeLog, oController._compactMode);
				}
			});
		}
		/*
		var ELIGIBLE_TILES_TO_ENABLE_ADD_TO_HOME = ["NT","AT","TT"];
		if(true || ELIGIBLE_TILES_TO_ENABLE_ADD_TO_HOME.indexOf(this.TILE_TYPE) > -1) {
		 */
		if(oController.CHIP_ID && oController.CHIP_ID != sap.suite.ui.smartbusiness.Configuration.Constants.SMARTBUSINESS_NULL_VALUE) {
			options.additionalShareButtonList.push({
				sBtnTxt: oI18nModel.getResourceBundle().getText("SAVE_AS_TILE"),
				sIcon: "sap-icon://add-favorite",
				onBtnPressed: function (oEvent) {
					oController._openAddToHomeDialogBox();
				}
			});
		}
		return options;
	},
	_getHeaderFooterOptions : function () {
		var oController = this;
		var oI18nModel = oController.getView().getModel("i18n");
		this.oListItem = new sap.m.ObjectListItem();
		var add2HomeIcon = String.fromCharCode(0xe078);
		var oOptions = {
				onBack: function () {
					oController._abortPendingODataCalls();
					window.history.back();
				},
				sFullscreenTitle: "",
				onFacetFilter: function() {
					oController._toggleFilter();
					oController._fixPostResizeIssue();
					$(window).trigger('resize');
				},
				buttonList : [{
					sBtnTxt : oI18nModel.getResourceBundle().getText("OPEN_IN_LABEL"),
					onBtnPressed: function (oEvent) {
						oController._showExternalNavigationLinks(oEvent.getSource());
					}
				}],
				bSuppressBookmarkButton: true,
				oJamOptions: {
					fGetShareSettings: function () {
						var oHeader = oController.getView().byId("header-ribbon");
						// Create object List Item for shareToJam
						var oListItem = new sap.m.ObjectListItem();
						oListItem.setTitle(oHeader.getTitle());
						oListItem.setNumber(oHeader.getNumber());
						oListItem.setNumberUnit(oHeader.getNumberUnit());
						var oShareSettings = {
								object: {
									id: window.location.href,
									display: oListItem,
									share: "SAP Smart Business" //TODO
								}
						};
						return oShareSettings;
					},
				},additionalShareButtonList : [],
				oEmailSettings: {
					fGetMailBody: function () {
						var oHeader = oController.getView().byId("header-ribbon");
						if(oHeader.getNumberUnit()){
							return "(" + oController.EVALUATION.getKpiName().trim() + "/" + oHeader.getTitle().trim() + ": " + oHeader.getNumber() +" "+ (oHeader.getNumberUnit()) +")" + "\n" + window.location.href;
						}
						else{
							return "(" + oController.EVALUATION.getKpiName().trim() + "/" + oHeader.getTitle().trim() + ": " + oHeader.getNumber()  +")" + "\n" + window.location.href;	
						}
					}
				},
		};
		if(jQuery.device.is.phone)
		{
			oOptions.buttonList.push({
				sBtnTxt : oI18nModel.getResourceBundle().getText("SHOW_RELATED_KPIS"),
				onBtnPressed: function (oEvent) {
					var action = oController.ACTION;
					oController._detachHashChangeListener();
					sap.suite.ui.smartbusiness.lib.Util.utils.setHash({action:action, route:"miniChart"});
				}
			});
		}
		return oOptions;
	},
	_initRequestTimeLogChart : function() {
		if((window.location.hostname =="localhost") || (jQuery.sap.getUriParameters().get("sbrequestlog") == "99")) {
			jQuery.sap.require("sap.suite.ui.smartbusiness.drilldown.lib.Performance");
			this._performance = new sap.suite.ui.smartbusiness.drilldown.lib.Performance();
		}
	},

	addExportMethodToTable : function() {

		var that = this;
		sap.m.Table.prototype.exportData = sap.m.Table.prototype.exportData || function (mSettings) {

			jQuery.sap.require("sap.ui.core.util.Export");
			mSettings = mSettings || {};
			if (!mSettings.rows) {
				mSettings.rows = {
						path: "/data",
				};
			}
			var oExport = new sap.ui.core.util.Export(mSettings);
			this.addDependent(oExport);
			return oExport;
		}
	},

	_exportAsCSV : function() {
		var that = this;
		jQuery.sap.require("sap.ui.core.util.ExportTypeCSV");
		var columnNames = [];
		var configuredColumns = [];
		var oConfig = (this.SELECTED_VIEW.getChartConfiguration())[0];
		var isPercentScaled = false ;
		configuredColumns = this.SELECTED_VIEW.getColumns();
		for(var i=0;i<configuredColumns.length; i++) {
			columnNames.push(configuredColumns[i]);
			var textMappingProperty = this.DIMENSION_TEXT_PROPERTY_MAPPING[configuredColumns[i]];
			var uomProperty = this.MEASURE_UNIT_PROPERTY_MAPPING[configuredColumns[i]]
			if(textMappingProperty && textMappingProperty!=configuredColumns[i]) {
				columnNames.push(textMappingProperty);
			}
			if(uomProperty) {
				columnNames.push(uomProperty);
			}
		}

		if((that.EVALUATION.getScaling() == -2) && !((oConfig.isPercentageValue()) && (oConfig.getChartType().isBar() || oConfig.getChartType().isColumn()))) {
			isPercentScaled = that._isMeasureSetPercentScaled(that.SELECTED_VIEW.getMeasures());			 
		}

		var column = jQuery.map(columnNames, function(colName){
			return {
				name : that.COLUMN_LABEL_MAPPING[colName] || colName,
				template : {
					content : {
						path: colName,
						formatter: that.getColumnValueFormatter(colName, that.SELECTED_VIEW.getDimensions().indexOf(colName) > -1 ? true : false, isPercentScaled, false, true)
					}
				}
			};
		});

		this.getUIComponents().getTable().exportData({
			exportType : new sap.ui.core.util.ExportTypeCSV({separatorChar : ","}),
			columns : column
		}).saveFile().always(function() {
			this.destroy();
		});    

	},


	_openAddToHomeDialogBox : function() {
		this.oATHDialog.setModel(this.getView().getModel("i18n"), "i18n");
		this._compactMode ? this.oATHDialog.addStyleClass("sapUiSizeCompact") : this.oATHDialog.removeStyleClass("sapUiSizeCompact");
		this.oATHDialog.open();
	},
	_initAddToHomeDialogBox  : function() {
		var oController = this;
		this.oATHDialogContent = new sap.ui.view({
			type : "XML",
			viewName : "sap.suite.ui.smartbusiness.drilldown.view.AddToHome",
			viewData : this
		});
		this.oATHDialog = new sap.m.Dialog({
			title : "{i18n>SAVE_AS_TILE_DIALOG_TITLE}",
			content : [
			           this.oATHDialogContent  
			           ],
			           beginButton : new sap.m.Button({
			        	   text : "{i18n>OK_BUTTON}",
			        	   press : function() {
			        		   oController.oATHDialogContent.getController().publishTile(function(){
			        			   oController.oATHDialog.close();
			        		   });
			        	   }
			           }), 
			           endButton : new sap.m.Button({
			        	   text : "{i18n>CANCEL_BUTTON}",
			        	   press : function() {
			        		   oController.oATHDialog.close();
			        	   }
			           })
		});
		this.oATHDialog.addStyleClass("sbAddToHomeDialogBox");
		this.getView().addDependent(this.oATHDialog);
	},
	getUIComponents : function() {
		var page = this.getView().byId("smartbusiness_drilldown_page");
		var vizChartContainer = this.getView().byId("vizChartContainer");
		var header = this.getView().byId("header-ribbon");
		var headerContainer = this.byId('headerContainerVBox');

		var tilesContainer = this.getView().byId("header-container");
		var facetFilter = this.getView().byId("facetFilter");

		var vizVbox = this.getView().byId("vizVbox");

		var that = this;

		return {
			getChart : function() {
				return that.chart;
			},
			getTable : function() {
				return that.table;
			},
			getVizChartContainer : function() {
				return vizChartContainer;
			},
			getFilter : function() {
				return facetFilter;
			},
			getHeader : function() {
				return header;
			},
			getHeaderContainer : function() {
				return headerContainer;
			},
			getTileContainer : function() {
				return tilesContainer;
			},
			getPage : function() {
				return page;
			},
			getVIZvbox : function() {
				return vizVbox;
			},
			getAnalyticalMap : function() {
				return that.analyticalMap;
			},
			getGeoMap : function() {
				return that.geoMap;
			}
		};
	},
	onExit : function() {
		this._abortPendingODataCalls();
		this._detachHashChangeListener();
	},


//	viz charts code :	

	create_vizDataset: function(oChartConfig, aColumns) {
		var oDataset = new sap.viz.ui5.data.FlattenedDataset({
			data: {
				path: "/data"
			}
		});

		var oStacking = this._getStacking(aColumns);
		var VIEW = this.SELECTED_VIEW;
		//Adding Dimension to DataSet
		var oChartType = oChartConfig.getChartType();		
		aColumns.forEach(function(sColumn) {
			var oColumn = VIEW.findColumnByName(sColumn);
			if(oColumn.isDimension()) {
				var oDimensionDefinition = new sap.viz.ui5.data.DimensionDefinition({
					name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
					//axis : 1,
					value : {
						path : this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()],
						formatter : this.getColumnValueFormatter(this.DIMENSION_TEXT_PROPERTY_MAPPING[oColumn.getName()], true)
					}
				});
				oDimensionDefinition.column_name = oColumn.getName();
				oDataset.addDimension(oDimensionDefinition);
			}
		}, this);

		//Adding Measure to Dataset
		if(oChartType.isLine() || oChartType.isCombination() || oChartType.isBubble() || oChartType.isBar() || oChartType.isColumn()) {
			aColumns.forEach(function(sColumn) {
				var oColumn = VIEW.findColumnByName(sColumn);
				if(oColumn.isMeasure()) {
					var oMeasureDefinition = new sap.viz.ui5.data.MeasureDefinition({
						name : this.COLUMN_LABEL_MAPPING[oColumn.getName()],
						value : {
							path : oColumn.getName()
						}
					});
					oMeasureDefinition.column_name = oColumn.getName();
					oDataset.addMeasure(oMeasureDefinition);
				}
			}, this);
		}

		return oDataset;

	},

	setAllVizFormatters: function() {
		var that = this;
		sap.viz.api.env.Format.useDefaultFormatter(false);
		jQuery.sap.require("sap.ui.core.format.NumberFormat");

		var sUri =this.metadataRef.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.SAP_SYSTEM);
		var entitySet = this.EVALUATION.getEntitySet();
		var data=this.getUIComponents().getChart().getModel().getData().data;
		var vizChart = this.chart;

		var oChartConfig = (this.SELECTED_VIEW.getChartConfiguration())[0];
		var oChartType =  oChartConfig.getChartType();
		var isPercentScaled = this._isMeasureSetPercentScaled(this.SELECTED_VIEW.getMeasures());
		if((this.EVALUATION.getScaling() == -2) && (oChartConfig.isDualAxis()) && (oChartConfig.isAbsoluteValue()) && (oChartType.isBar() || oChartType.isColumn())) {
			var axisMeasures = this._getMeasuresByAxis();
			var isAxis1Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis1Msr);
			var isAxis2Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis2Msr);
		}

		function _getFormatterForPopover(value,sUri, entitySet, chartData, vizChart, isACurrencyMeasure) {
			var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, 0);
			return numberFormat.format(Number(value));
		}

		var customFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					/*************************************************************************************
					 * [FORMATTING LIMITATION] 2015-03-27
					 *  To format popover and data-label based on currency or not, the measure in scope
					 *  is required to be passed here by this viz's method, which it isn't passing.
					 *  see //sapui5.hana.ondemand.com/sdk/docs/api/symbols/sap.viz.ui5.api.env.Format.html
					 *  For the timebeing, it's assumed that this measure is not of type currency.
					 **************************************************************************************/

					var isACurrencyMeasure = false;

					if(pattern == "yValueAxisFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
								{style: 'short', 
									minFractionDigits: 1,
									maxFractionDigits: 1,}
						);
						if(oChartConfig.isPercentageValue() && (oChartType.isBar() || oChartType.isColumn())) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance();							
						} else if((that.EVALUATION.getScaling() == -2) && isPercentScaled && (oChartConfig.isDualAxis()) && (oChartType.isBar() || oChartType.isColumn())) {
							if(isAxis1Scaled) {
								numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
										{style: 'short', 
											minFractionDigits: 1,
											maxFractionDigits: 1,}
								);	
							}
						} else if((that.EVALUATION.getScaling() == -2) && isPercentScaled) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
									{style: 'short', 
										minFractionDigits: 1,
										maxFractionDigits: 1,}
							);	
						}	
						return numberFormat.format(Number(value)); 
					} else if(pattern == "y2ValueAxisFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
								{style: 'short', 
									minFractionDigits: 1,
									maxFractionDigits: 1,}
						);
						if(oChartConfig.isPercentageValue() && (oChartType.isBar() || oChartType.isColumn())) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance();							
						} else if((that.EVALUATION.getScaling() == -2) && isPercentScaled && (oChartConfig.isDualAxis()) && (oChartType.isBar() || oChartType.isColumn())) {
							if(isAxis2Scaled) {
								numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
										{style: 'short', 
											minFractionDigits: 1,
											maxFractionDigits: 1,}
								);	
							}
						} else if((that.EVALUATION.getScaling() == -2) && isPercentScaled) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
									{style: 'short', 
										minFractionDigits: 1,
										maxFractionDigits: 1,}
							);	
						}						
						return numberFormat.format(Number(value)); 
					} else if(pattern == "dataLabelFormatter"){
						var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, 0);
						if((that.EVALUATION.getScaling() == -2) && isPercentScaled && !((oChartConfig.isPercentageValue() || oChartConfig.isDualAxis()) && (oChartType.isBar() || oChartType.isColumn()))) {
							numberFormat = that.getLibFormatter(value, isACurrencyMeasure, -2);
						}
						return numberFormat.format(Number(value));  
					} else if(pattern == "dataLabelPercentFormatter"){
						var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, -2);
						return numberFormat.format(Number(value));  
					} else if(pattern == "vizPopOver"){
						if(oChartConfig.isPercentageValue() && (oChartType.isBar() || oChartType.isColumn())) {
							var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, -2);
							return numberFormat.format(Number(value)); 
						} else if((that.EVALUATION.getScaling() == -2) && isPercentScaled  && !((oChartConfig.isPercentageValue() || oChartConfig.isDualAxis()) && (oChartType.isBar() || oChartType.isColumn()))) {
							var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, -2);
							return numberFormat.format(Number(value));
						}
						return _getFormatterForPopover(value,sUri, entitySet, data, vizChart, isACurrencyMeasure); 
					} else if(pattern == "vizPercentPopOver"){
						var numberFormat = that.getLibFormatter(value, isACurrencyMeasure, -2);
						return numberFormat.format(Number(value));  
					} 
					else{
						return value;
					}
				}
		};

		jQuery.sap.require("sap.viz.ui5.api.env.Format");
		sap.viz.ui5.api.env.Format.numericFormatter(customFormatter);
	},

	_handleVizDualAxisWhenPercentScale: function(chart) {
		var that = this;
		var vProperties = chart.getVizProperties();
		var formatObj = {};
		var popopFormatter = {};
		var axisMeasures = this._getMeasuresByAxis();
		var isAxis1Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis1Msr);
		var isAxis2Scaled = this._isMeasureSetPercentScaled(axisMeasures.axis2Msr);
		if(isAxis1Scaled) {
			for(var i=0;i<axisMeasures.axis1Msr.length;i++) {
				formatObj[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis1Msr)[i])])] = "dataLabelPercentFormatter";
				popopFormatter[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis1Msr)[i])])] = "vizPercentPopOver";
			}
		} else {
			for(var i=0;i<axisMeasures.axis1Msr.length;i++) {
				formatObj[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis1Msr)[i])])] = "dataLabelFormatter";
				popopFormatter[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis1Msr)[i])])] = "vizPopOver";
			}
		}
		if(isAxis2Scaled) {
			for(var i=0;i<axisMeasures.axis2Msr.length;i++) {
				formatObj[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis2Msr)[i])])] = "dataLabelPercentFormatter";
				popopFormatter[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis2Msr)[i])])] = "vizPercentPopOver";
			}
		} else {
			for(var i=0;i<axisMeasures.axis2Msr.length;i++) {
				formatObj[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis2Msr)[i])])] = "dataLabelFormatter";
				popopFormatter[(that.COLUMN_LABEL_MAPPING[((axisMeasures.axis2Msr)[i])])] = "vizPopOver";
			}
		}
		vProperties.plotArea.dataLabel = {
				visible: true,
				formatString: formatObj
		};
		chart.setVizProperties(vProperties);
		//popover
		this.vizChartPopover.setFormatString(popopFormatter);
	},

	_appendUOMToVizChartAxis : function(data) {
		var oChart, aMeasures, oVizProperties, UOMS, uomFlag, uomPropertyName, uomValue, chartConfig, chartType;
		var getUomAsString = function (oUoms) {
			var aUoms = [];
			for(var each in oUoms) {
				aUoms.push(oUoms[each]);
			}
			return aUoms.join(" & ");
		};
		var getAxisObject = function (sAxisLabel) {
			return {
				visible : true,
				text : sAxisLabel
			};			
		}; 
		oChart = this.getUIComponents().getChart();
		if(!oChart) {
			return;
		}
		aMeasures = this.SELECTED_VIEW.getMeasures();
		oVizProperties = oChart.getVizProperties() || {};
		UOMS = {};
		uomFlag = false;
		if(aMeasures.length == 1 && aMeasures[0] == this.EVALUATION.getKpiMeasureName()) {
			var sMeasure = aMeasures[0];
			uomPropertyName = this.MEASURE_UNIT_PROPERTY_MAPPING[sMeasure];
			if(uomPropertyName) {
				uomValue = data[uomPropertyName];
				if(uomValue) {
					UOMS[sMeasure] = uomValue;
					uomFlag = true;
				} else {
					UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
				}
			} else {
				UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
			}
		} else {
			aMeasures.forEach(function(sMeasure) {
				uomPropertyName = this.MEASURE_UNIT_PROPERTY_MAPPING[sMeasure];
				if(uomPropertyName) {
					uomValue = data[uomPropertyName];
					if(uomValue) {
						UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure] +" ("+uomValue+")";
						uomFlag = true;
					} else {
						UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
					}
				} else {
					UOMS[sMeasure] = this.COLUMN_LABEL_MAPPING[sMeasure];
				}
			}, this);
		}
		chartConfig = this.SELECTED_VIEW.getChartConfiguration()[0];
		chartType = chartConfig.getChartType();
		if(uomFlag) {
			if(!(oVizProperties.valueAxis)) {
				oVizProperties.valueAxis = {};
			} 
			if(chartType.isColumn() || chartType.isBar()) {
//				if(chartConfig.isAbsoluteValue()) {
				if(chartConfig.isSingleAxis()) {
					oVizProperties.valueAxis.title = getAxisObject(getUomAsString(UOMS));					
				} else {
					var x1Axis = {}, x2Axis = {};
					aMeasures.forEach(function(sMeasure) {
						var oMeasure = this.SELECTED_VIEW.findMeasureByName(sMeasure);
						if(oMeasure.getAxis() == 1) {
							x1Axis[sMeasure] = UOMS[sMeasure];
						} else if(oMeasure.getAxis() == 2) {
							x2Axis[sMeasure] = UOMS[sMeasure];
						}
					}, this);
					oVizProperties.valueAxis.title = getAxisObject(getUomAsString(x1Axis));
					if(!(oVizProperties.valueAxis2)) {
						oVizProperties.valueAxis2 = {};
					} 
					oVizProperties.valueAxis2.title = getAxisObject(getUomAsString(x2Axis));					
				}
//				}
			} else if(chartType.isBubble()) {
				var sLabel = [];
				for(var i=0;i<2;i++) {
					sLabel[i] = UOMS[(aMeasures[i])];
				}
				oVizProperties.valueAxis.title = getAxisObject(sLabel[0]);
				if(!(oVizProperties.valueAxis2)) {
					oVizProperties.valueAxis2 = {};
				} 
				oVizProperties.valueAxis2.title = getAxisObject(sLabel[1]);								
			} else if (chartType.isTable()){
				//Nothing to do
			} else {
				oVizProperties.valueAxis.title = getAxisObject(getUomAsString(UOMS));
			}
			oChart.setVizProperties(oVizProperties);
		}
	},

	onVizViewChange: function(evt) {
		//Reseting something that needs to be reset  
		this._resetConfigurations();
		var selectedViewId = evt.getParameters().selectedItem.getProperty("key");
		/* Old Code - reseting all filters
        sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters({
            viewId : [selectedViewId]
        });
		 */

		/**
		 * New Code - Do not reset filters on view change
		 */
		var AppParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		AppParameters["viewId"] = [selectedViewId];
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(AppParameters);

	},

	getVizTypeAndIcon: function(chartConfig, viewConfiguration) {
		var vType = "bar";
		var vIcon = "sap-icon://bar-chart";
		var oType = chartConfig.getChartType();	
		if(oType.isBar()) {
			vIcon = "sap-icon://horizontal-bar-chart";
			if(chartConfig.isSingleAxis()) {
				if(chartConfig.isAbsoluteValue()) {
					if(chartConfig.isStackingEnabled(viewConfiguration)) {
						vType = "stacked_bar";
						vIcon = "sap-icon://horizontal-stacked-chart";
					} else {
						vType = "bar";
					}
				} else {
					vType = "100_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} else if(chartConfig.isDualAxis()) {
				if(chartConfig.isAbsoluteValue()) {
					vType = "dual_stacked_bar";
					vIcon = "sap-icon://horizontal-bar-chart";
				} else {
					vType = "100_dual_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			}
		} else if(oType.isColumn()) {
			vType = "column";
			vIcon = "sap-icon://vertical-bar-chart";
			if(chartConfig.isSingleAxis()) {
				if(chartConfig.isAbsoluteValue()) {
					if(chartConfig.isStackingEnabled(viewConfiguration)) {
						vType = "stacked_column";
						vIcon = "sap-icon://vertical-stacked-chart";
					} else {
						vType = "column";
					}
				} else {
					vType = "100_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} else if(chartConfig.isDualAxis()) {
				if(chartConfig.isAbsoluteValue()) {
					vType = "dual_stacked_column";
					vIcon = "sap-icon://vertical-bar-chart";
				} else {
					vType = "100_dual_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			}
		} else if(oType.isLine()) {
			vType = "line";
			vIcon = "sap-icon://line-chart";
		} else if(oType.isCombination()) {
			vType = "combination";
			vIcon = "sap-icon://business-objects-experience";
		} else if(oType.isBubble()) {
			vType = "bubble";
			vIcon = "sap-icon://bubble-chart";
		}		

		return {type:vType,icon:vIcon};
	},

	_fillVizChartPopoverContent : function(chartPopover, bIsTable) {
		var that=this;
		var aViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId());
		this.POPOVER_VIEW_NAVIGATION_MODEL.setData({
			VIEW_NAVIGATION : aViews
		});
		this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
			APP_NAVIGATION : []
		});

		var popLinks = [];

		for(var i=0;i<this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION.length;i++){
			popLinks.push({
				type: 'action', 
				text: (this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION)[i].TITLE,
				press: jQuery.proxy(that._onVizViewSelection, that, {customData: (this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION)[i], publishContext : true, isTable : !!bIsTable})
			});
		}
//		popLinks.push({
//			type: 'action',
//			text: "-",
//			press: function(){ jQuery.sap.log.error("No Navigation links available"); },
//		});

		chartPopover.setActionItems(popLinks);

		that._fetchNavigationLinks().done(function() {
			var NavigationService = sap.suite.ui.smartbusiness.Adapter.getService("Navigation");
			that.SEMANTIC_OBJECT_BY_CONTEXT_LINKS_ODATA_CALL_REF = NavigationService.getLinksByContext({
				semanticObject : that.SEMANTIC_OBJECT,
				dimensions : that.SELECTED_VIEW.getDimensions(),
				context : that,
				viewId : that.EVALUATION.getId() + "_" + that.SELECTED_VIEW.getId()
			}).done(function(links) {
				var OPEN_IN_LINKS = jQuery.extend({}, that._OPEN_IN_LINKS);
				var uniqueLinks = that._getUniqueNavLinks(links, OPEN_IN_LINKS);
				if(uniqueLinks.length) {
					that.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.setData({
						APP_NAVIGATION : uniqueLinks
					});
				}
				if(uniqueLinks.length) {
					popLinks.pop();
					for(var i=0;i<that.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION.length;i++){
						popLinks.push({
							type: 'action',
							text: (that.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION)[i].text,
							press: jQuery.proxy(that._onVizAppSelection,that,{customData: (that.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION)[i], publishContext : true, isTable : !!bIsTable}),
						});
					}
					chartPopover.setActionItems(popLinks);
				}               
			});
		});
	},    

	_addVizPopoverContent: function(chartPopover, bIsTable) {
		var that = this;

		var allViews = this._getListOfViewsForPopover(this.CONFIGURATION.getAllViews(), this.SELECTED_VIEW.getId()); 

		//this.popoverProps.actionItems = [];
		var popLinks = [];

		for(var i=0;i<this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION.length;i++){
			popLinks.push({
				type: 'action', 
				text: (this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION)[i].TITLE,
				press: jQuery.proxy(that._onVizViewSelection, that, {customData: (this.POPOVER_VIEW_NAVIGATION_MODEL.getData().VIEW_NAVIGATION)[i], publishContext : true, isTable : !!bIsTable})
			});
		}

//		var listOfNavigations = new sap.m.List({

//		});
//		this._popoverNavigationListReferences.push(listOfNavigations);
//		listOfNavigations.bindItems("/APP_NAVIGATION", new sap.m.StandardListItem({
//		title : "{text}",
//		type : sap.m.ListType.Navigation,
//		customData : new sap.ui.core.CustomData({
//		key : "{id}",
//		value : "{applicationAlias}"
//		}),
//		press : jQuery.proxy(this._onAppSelection,this,{publishContext : true, isTable : !!bIsTable})
//		}).setTooltip("{text}"));
//		listOfNavigations.setModel(this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL);

//		var popoverContent = new sap.m.VBox({
//		items : [listOfViews, listOfNavigations],
//		width : "99%"
//		});

		if(this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION.length) {
			for(var i=0;i<this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION.length;i++){
				popLinks.push({
					type: 'action',
					text: (this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION)[i].text,
					press: jQuery.proxy(that._onVizAppSelection,that,{customData: (this.POPOVER_EXTERNAL_APP_NAVIGATION_MODEL.getData().APP_NAVIGATION)[i], publishContext : true, isTable : !!bIsTable}),
				});
			}
		} 
		chartPopover.setActionItems(popLinks);
//		chartPopover = new sap.viz.ui5.controls.Popover(that.popoverProps);
//		chartPopover.connect(that.oVizFrame.getVizUid());

	},

	_onVizViewSelection: function(customParam, oEvent) {
		var viewId = customParam.customData.ID;
		var parameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		var extraFilters = this[customParam.isTable ? "_getTableContextParameters" : "_getVizChartContextParameters"](dimensionsArray,false);
		for(var each in extraFilters) {
			if(parameters[each]) {
				delete parameters[each];
			}
			parameters[each] = extraFilters[each]
		}
		parameters["viewId"] = viewId;
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(parameters,false);
		if(customParam.isTable){
			this.getUIComponents().getTable().setSelectedContext(null);
		}else{
			this.setChartSelectionContextObject(null);
		}
		
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
		//Old Code
		/*
		var parameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		parameters["viewId"] = viewId;
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(parameters, false);
		var extraFilters = {};
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		if(customParam.isTable) {
			extraFilters = this._getTableContextParameters(dimensionsArray);
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateApplicationParameters(extraFilters, false);
			this.getUIComponents().getTable().setSelectedContext(null);
		} else {
			extraFilters = this._getVizChartContextParameters(dimensionsArray);
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateApplicationParameters(extraFilters, false);
			this.setChartSelectionContextObject(null);
		}
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
		this._hideOrShowFacetFilterIfRequired();
		 */
	},

	_getVizChartContextParameters : function(dimensionsArray) {
		var that = this;
		var extraFilters, chartContexts;
		extraFilters = {};
		var dimeArray = this.DIMENSION_TEXT_PROPERTY_MAPPING;
		var x = [];
		dimensionsArray.forEach(function(dim){
			y = {};
			y.dimId = dim;
			y.dimText = dimeArray[dim];
			x.push(y); 
		})
		
		if(this.chart) {
			chartContexts = this.chart.vizSelection();
			var chartData = this.chart.getModel().getData().data; 
			if(chartContexts && chartContexts.length) {
				for(var i=0;i<chartContexts.length;i++) {
					var cObject = chartContexts[i];
					x.forEach(function(eachDimension){
						if(eachDimension.dimText) {
							var dimValArray = [];
							var selectedText = chartData[(cObject.data._context_row_number)][eachDimension.dimText];
							for(var itr = 0 ; itr < chartData.length; itr++) {
								if(chartData[itr][eachDimension.dimText] === selectedText) {
									dimValArray.push(chartData[itr][eachDimension.dimId]);
								}
							}
							for(var itr = 0; itr < dimValArray.length; itr++) {
								if(dimValArray[itr]==null){
							dimensionValue="SAP_SMARTBUSINESS_NULL";
						}
						if(dimValArray[itr] || dimValArray[itr]==0 || dimValArray[itr]=='') {
							if(dimValArray[itr].getTime) {
								dimValArray[itr] = dimValArray[itr].getTime();
							}
							if(extraFilters[eachDimension.dimId]) {
								extraFilters[eachDimension.dimId].push(dimValArray[itr]);
							} else {
								extraFilters[eachDimension.dimId] = [];
								extraFilters[eachDimension.dimId].push(dimValArray[itr]);
							}
						}
							}

						} else {
						var dimensionValue = chartData[(cObject.data._context_row_number)][eachDimension.dimId];        //(cObject.data)[(that.COLUMN_LABEL_MAPPING[eachDimension])];
						if(dimensionValue==null){
							dimensionValue="SAP_SMARTBUSINESS_NULL";
						}
						if(dimensionValue || dimensionValue==0 || dimensionValue=='') {
							if(dimensionValue.getTime) {
								dimensionValue = dimensionValue.getTime();
							}
							if(extraFilters[eachDimension.dimId]) {
								extraFilters[eachDimension.dimId].push(dimensionValue);
							} else {
								extraFilters[eachDimension.dimId] = [];
								extraFilters[eachDimension.dimId].push(dimensionValue);
							}
						}
						}
					});
				}
			}
		}
		return extraFilters;
	},

	_onVizAppSelection : function(customParam, oEvent) {
		var cleanUp = function(appParameters, contextParameters) {
			if(contextParameters) {
				for(var sParamKey in contextParameters) {
					if(appParameters && appParameters[sParamKey]) {
						delete appParameters[sParamKey];
					}
				}
			}
		};
		var extraFilters, navId = customParam.customData.id;
		var appType = customParam.customData.value ;
		var soAction = navId.split("~")[0];
		var splits = soAction.split("-");
		var so = splits[0];
		var action = splits[1];
		var appParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
		if(so == "AdhocAnalysis") {
			appParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
		}
		var startupParameters = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
		//var extraParameters = appParameters?jQuery.extend(true,{},appParameters):{};
		var extraParameters = {};
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		if(customParam.isFromOpenIn) {
			//Navigation Link Clicked from OpenIn
			extraFilters = this._getTableContextParameters(dimensionsArray);
			cleanUp(appParameters, extraFilters);
			jQuery.extend(true, extraParameters, extraFilters);
			extraFilters = this._getVizChartContextParameters(dimensionsArray); 
			cleanUp(appParameters, extraFilters);
			jQuery.extend(true, extraParameters, extraFilters);
		} else {
			if(customParam.isTable) {
				//Navigation Link Clicked from Table Popover
				extraFilters = this._getTableContextParameters(dimensionsArray);
				cleanUp(appParameters, extraFilters);
				jQuery.extend(true, extraParameters, extraFilters);
			} else {
				//Navigation Link Clicked From Chart Popover
				extraFilters = this._getVizChartContextParameters(dimensionsArray);
				cleanUp(appParameters, extraFilters);
				jQuery.extend(true, extraParameters, extraFilters);
			}
		}
		jQuery.extend(true, extraParameters, startupParameters,appParameters);

		//New Code - Using Shell API to Change the HASH
		if(sap.ushell.Container && sap.ushell.Container.getService) {
			var oCrossApplicationNavigation = sap.ushell.Container.getService("CrossApplicationNavigation");
			if(oCrossApplicationNavigation) {
				var targetAppHash = oCrossApplicationNavigation.hrefForExternal({
					target : {
						semanticObject : so,
						action : action
					},
					params : extraParameters
				});
				if(appType=="SAPUI5"){
					this._detachHashChangeListener();
				}
				window.location.hash = targetAppHash;
			} else {
				jQuery.sap.log.error("ushell CrossApplicationNavigation service returns null");
			}
		} else {
			jQuery.sap.log.error("ushell Services not running");
		}

		//Old Code - Changing hash manually
		/*
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setSemanticObject(so, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setAction(action, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(null, false);
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(appParameters, false);
		var dimensionsArray = this.SELECTED_VIEW.getDimensions();
		if(customParam.isFromOpenIn) {
			//Navigation Link Clicked from OpenIn
			extraFilters = this._getTableContextParameters(dimensionsArray);
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
			extraFilters = this._getVizChartContextParameters(dimensionsArray);
			sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
		} else {
			if(customParam.isTable) {
				extraFilters = this._getTableContextParameters(dimensionsArray);
				sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
				//Navigation Link Clicked from Table Popover
			} else {
				extraFilters = this._getVizChartContextParameters(dimensionsArray);
				sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateStartupParameters(extraFilters, false);
				//Navigation Link Clicked From Chart Popover
			}
		}
		this._detachHashChangeListener();
		sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
		 */
	},

	_onVizChartDataPointSelection: function(customParam, oEvent) {
		if(!(customParam.chartPopover.getActionItems() && customParam.chartPopover.getActionItems().length)) {
			this._fillVizChartPopoverContent(customParam.chartPopover, false);
			//this._addVizPopoverContent(customParam.chartPopover, false);
		}
	},

	_addFeedsToVizFrame: function(oVizFrame, chartConfig, aColumns) {
		var that = this;
		var oStacking = this._getStacking(aColumns);
		var VIEW = this.SELECTED_VIEW;
		var oChartType = chartConfig.getChartType();

		var dimensionLabels=[],measureLabels=[] ;
		for(var i=0;i<VIEW.getDimensions().length;i++) {
			dimensionLabels.push(that.COLUMN_LABEL_MAPPING[((VIEW.getDimensions())[i])]);
		}
		for(var i=0;i<VIEW.getMeasures().length;i++) {
			measureLabels.push(that.COLUMN_LABEL_MAPPING[((VIEW.getMeasures())[i])]);
		}

		if(oChartType.isBubble()) {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: [measureLabels[0]]
			}), feedSecondaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: [measureLabels[1]]
			}), feedBubbleWidth = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "bubbleWidth",
				type: "Measure",
				values: [measureLabels[2]]
			}), feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "regionColor",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecondaryValues);
			oVizFrame.addFeed(feedBubbleWidth);
			oVizFrame.addFeed(feedRegionColor);
		} else if((oChartType.isBar() || oChartType.isColumn()) && (chartConfig.isDualAxis())) {
			var dualMsr = this._getMeasuresByAxis();
			var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
			for(var i=0;i<dualMsr.axis1Msr.length;i++) {
				dualMsrAxis1.push(that.COLUMN_LABEL_MAPPING[dualMsr.axis1Msr[i]] || dualMsr.axis1Msr[i]);
			}
			for(var i=0;i<dualMsr.axis2Msr.length;i++) {
				dualMsrAxis2.push(that.COLUMN_LABEL_MAPPING[dualMsr.axis2Msr[i]] || dualMsr.axis2Msr[i]);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: dualMsrAxis1
			});
			var feedSecValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: dualMsrAxis2
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecValues);
			oVizFrame.addFeed(feedAxisLabels);
		} else if((oChartType.isBar() || oChartType.isColumn()) && oStacking.dimensionStacked && oStacking.stackedDimensionName && (VIEW.getDimensionCount() > 1)) {
			var index = dimensionLabels.indexOf(that.COLUMN_LABEL_MAPPING[(oStacking.stackedDimensionName)]);
			if (index > -1) {
				var oDimStackArray = dimensionLabels.splice(index, 1);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			}), feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			}); 
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
			if(oDimStackArray && oDimStackArray.length) {
				var feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
					uid: "regionColor",
					type: "Dimension",
					values: oDimStackArray
				});			
				oVizFrame.addFeed(feedRegionColor);
			}
		} else {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			}), feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
		}
	},

	applyColorToVizChart: function(chart, chartConfig) {
		// implement custom coloring ..............................
		var oController = this;

		this.oI18nModel = oController.getView().getModel("i18n");
		var oChartType = chartConfig.getChartType();
//		var colorMapper = this.getCAtoVizColorMapping();
		var thresholdMeasure = chartConfig.getThresholdMeasure();
		var colorScheme = chartConfig.getColorScheme();
		if(!colorScheme.getText()) {
			jQuery.sap.log.error("Color Scheme Value Missing");
			return;
		}
		var measures = chart.getDataset().getMeasures();
		var oVizProperties = chart.getVizProperties();
		oVizProperties.plotArea.dataPointStyle = {};
		chart.setVizProperties(oVizProperties);
		if((oChartType.isBar() || oChartType.isColumn()) && (chartConfig.isDualAxis())) {
			oVizProperties.plotArea.primaryValuesColorPalette = [];
			oVizProperties.plotArea.secondaryValuesColorPalette = [];
		} else {
			oVizProperties.plotArea.colorPalette = [];	
		}				
		if(colorScheme.isManual()) {
			measures.forEach(function(oMeasure, index, oMeasures) {
				var _color = this.SELECTED_VIEW.findMeasureByName(oMeasure.column_name).getColor();
				var _axis = this.SELECTED_VIEW.findMeasureByName(oMeasure.column_name).getAxis();
				if(!_color) {
					if(colorScheme.isManualSemantic()) {
						jQuery.sap.log.warning("Semantic Color NOT found for measure name : " + oMeasure.getName() +", assigning default to 'Neutral Light'");
						_color= "sapUiChartPaletteSemanticNeutralLight1";
					} else {
						jQuery.sap.log.warning("Color NOT found for measure name : " + oMeasure.getName() +", assigning default color");
						_color = "";
					}
				}
				var vizColor = (oController.convertCAtoVizColorCode(_color)) || ("sapUiChartPaletteQualitativeHue"+((index % 11)+1));
				if((oChartType.isBar() || oChartType.isColumn()) && (chartConfig.isDualAxis())) {
					if(_axis == 1) {
						(oVizProperties.plotArea.primaryValuesColorPalette).push(vizColor);
					} else if(_axis == 2) {
						(oVizProperties.plotArea.secondaryValuesColorPalette).push(vizColor);
					}
				} else {
					(oVizProperties.plotArea.colorPalette).push(vizColor);
				}
			}, this);
			chart.setVizProperties(oVizProperties);
		} else if(colorScheme.isAutoSemantic() && !this.EVALUATION.isTargetKpi()) {
			if(thresholdMeasure) {
				measures.forEach(function(oMeasure, index, oMeasures) {
					var _axis = this.SELECTED_VIEW.findMeasureByName(oMeasure.column_name).getAxis();
					if(oMeasure.getName() ==  thresholdMeasure) {
						if((oChartType.isBar() || oChartType.isColumn()) && (chartConfig.isDualAxis())) {
							if(_axis == 1) {
								(oVizProperties.plotArea.primaryValuesColorPalette).push("sapUiChartPaletteSemanticNeutral");
							} else if(_axis == 2) {
								(oVizProperties.plotArea.secondaryValuesColorPalette).push("sapUiChartPaletteSemanticNeutral");
							}
						} else {
							(oVizProperties.plotArea.colorPalette).push("sapUiChartPaletteSemanticNeutral");
						}						
					} else {
						if((oChartType.isBar() || oChartType.isColumn()) && (chartConfig.isDualAxis())) {
							if(_axis == 1) {
								(oVizProperties.plotArea.primaryValuesColorPalette).push("sapUiChartPaletteSemanticGood");
							} else if(_axis == 2) {
								(oVizProperties.plotArea.secondaryValuesColorPalette).push("sapUiChartPaletteSemanticGood");
							}
						} else {
							(oVizProperties.plotArea.colorPalette).push("sapUiChartPaletteSemanticGood");
						}						
					}
				}, this);
				oVizProperties.plotArea.dataPointStyle = {
						rules:
							[
							 {
								 callback: function (oContext) {
									 var data = chart.getModel().getData().data;
									 var bindingContext = oContext._context_row_number;
									 var bindingData = data[bindingContext];
									 var referenceMeasureValue = bindingData[thresholdMeasure];
									 if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
										 if(oContext[oContext.measureNames] > referenceMeasureValue) {
											 if(oController.EVALUATION.isMaximizingKpi())
												 return true;
										 } else if(oContext[oContext.measureNames] < referenceMeasureValue) {
											 if(oController.EVALUATION.isMinimizingKpi())
												 return true;
										 }
									 } else
										 return false;	
								 },
								 properties: {
									 color: "sapUiChartPaletteSemanticGoodLight1" 
								 },
								 displayName: (oController.oI18nModel.getResourceBundle().getText("GOOD"))
							 },{
								 callback: function (oContext) {
									 var data = chart.getModel().getData().data;
									 var bindingContext = oContext._context_row_number;
									 var bindingData = data[bindingContext];
									 var referenceMeasureValue = bindingData[thresholdMeasure];
									 if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
										 if(oContext[oContext.measureNames] > referenceMeasureValue) {
											 if(oController.EVALUATION.isMinimizingKpi())
												 return true;
										 } else if(oContext[oContext.measureNames] < referenceMeasureValue) {
											 if(oController.EVALUATION.isMaximizingKpi())
												 return true;
										 }
									 } else
										 return false;	
								 },
								 properties : {
									 color : "sapUiChartPaletteSemanticBadLight1"
								 },
								 displayName: (oController.oI18nModel.getResourceBundle().getText("BAD"))
							 },{
								 callback: function (oContext) {
									 var data = chart.getModel().getData().data;
									 var bindingContext = oContext._context_row_number;
									 var bindingData = data[bindingContext];
									 var referenceMeasureValue = bindingData[thresholdMeasure];
									 if(referenceMeasureValue==null || typeof referenceMeasureValue=='undefined') {
										 jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
										 return true;
									 } 	
								 },
								 properties : {
									 color : "sapUiChartPaletteSemanticNeutralLight1"
								 },
								 displayName: (oController.oI18nModel.getResourceBundle().getText("NEUTRAL"))
							 }],
							 others : {
								 properties: {
									 color: 'sapUiChartPaletteSemanticNeutral'
								 },
								 displayName: (oController.oI18nModel.getResourceBundle().getText("THRESHOLD_REFERENCE"))
							 }
				}
				chart.setVizProperties(oVizProperties);
			} else {
				jQuery.sap.log.error("Chart Color Scheme is Auto-Semantic but no threshold measure Configured!!!");
			}
		} else {
			jQuery.sap.log.debug("Color Scheme is None: Default Color will be used by viz Chart");			
		}

		if(colorScheme.isAutoSemantic()) {
			if(this.EVALUATION.isTargetKpi()) {
				jQuery.sap.log.error("Auto Semantic Coloring can not be applied on target type KPI");
			}
		}
	},

	/*	getCAtoVizColorMapping: function() {
		var colorMapper = {
				"sapUiChart1" : "sapUiChartPaletteQualitativeHue1",
				"sapUiChart2" : "sapUiChartPaletteQualitativeHue2",
				"sapUiChart3" : "sapUiChartPaletteQualitativeHue3",
				"sapUiChart4" : "sapUiChartPaletteQualitativeHue4",
				"sapUiChart5" : "sapUiChartPaletteQualitativeHue5",
				"sapUiChart6" : "sapUiChartPaletteQualitativeHue6",
				"sapUiChart7" : "sapUiChartPaletteQualitativeHue7",
				"sapUiChart8" : "sapUiChartPaletteQualitativeHue8",
				"sapUiChart9" : "sapUiChartPaletteQualitativeHue9",
				"sapUiChart10" : "sapUiChartPaletteQualitativeHue10",
				"sapUiChart11" : "sapUiChartPaletteQualitativeHue11",
				"sapCaUiChartSemanticColor-Bad" : "sapUiChartPaletteSemanticBad",
				"sapCaUiChartSemanticColor-Bad-Dark" : "sapUiChartPaletteSemanticBadDark1",
				"sapCaUiChartSemanticColor-Bad-Light" : "sapUiChartPaletteSemanticBadLight1",
				"sapCaUiChartSemanticColor-Critical" : "sapUiChartPaletteSemanticCritical",
				"sapCaUiChartSemanticColor-Critical-Dark" : "sapUiChartPaletteSemanticCriticalDark1",
				"sapCaUiChartSemanticColor-Critical-Light" : "sapUiChartPaletteSemanticCriticalLight1",
				"sapCaUiChartSemanticColor-Good" : "sapUiChartPaletteSemanticGood",
				"sapCaUiChartSemanticColor-Good-Dark" : "sapUiChartPaletteSemanticGoodDark1",
				"sapCaUiChartSemanticColor-Good-Light" : "sapUiChartPaletteSemanticGoodLight1",
				"sapCaUiChartSemanticColor-Neutral" : "sapUiChartPaletteSemanticNeutral",
				"sapCaUiChartSemanticColor-Neutral-Dark" : "sapUiChartPaletteSemanticNeutralDark1",
				"sapCaUiChartSemanticColor-Neutral-Light" : "sapUiChartPaletteSemanticNeutralLight1",
		};

		return colorMapper;
	},
	 */	
	convertCAtoVizColorCode: function(oColor) {
		var vColor = oColor;
		if(oColor) {
			var splitColorArray = oColor.match(/[a-zA-Z]+|[0-9]+/g);
			if(splitColorArray[0] === "sapUiChart") {
				vColor = "sapUiChartPaletteQualitativeHue"+splitColorArray[1];
			} else if(splitColorArray[0] === "sapCaUiChartSemanticColor") {
				if(splitColorArray.length === 2) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1];
				} else if(splitColorArray.length === 3) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1]+splitColorArray[2]+"1";
				}
			}
		}
		return vColor;
	},

	_fixPostResizeIssue : function() {
		//The CA Chart removes the selection if UI area is rerendered
		this.setChartSelectionContextObject(null);
	}
});

}; // end of sap/suite/ui/smartbusiness/drilldown/view/Drilldown.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.view.miniChart.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.drilldown.view.miniChart.controller');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.drilldown.view.miniChart", {
	_getEvaluationId : function() {
		try {
			var startupParameters = this.oConnectionManager.getComponent().oComponentData.startupParameters;
			return startupParameters["evaluationId"][0];
		}catch(e) {
			return sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters().evaluationId[0];
		}
	},
	_detachHashChangeListener : function() {
		try {
			this._proxyHashChangeListener = null;
			this.hashChangerAttached = true;
		} catch(e) {
			jQuery.sap.log.error("Error Detaching hashChanged Event");
		}
	},
	onInit : function(){
		var that=this;
		var oOptions = {
				onBack: function () {
					window.history.back();
				},
				additionalShareButtonList : [],
				sFullscreenTitle: "",
		};
		this.setHeaderFooterOptions(oOptions);
		this.getPage().getCustomHeader().getContentMiddle()[0].setText("");
		this.SAP_SYSTEM = "HANA";
		this._requestTimeLog = {};
		var EVAL_ID = this._getEvaluationId();
		var EVAL_ID_FOR_DDA_CONFIG = EVAL_ID;
		this._EVALUATION_ID = EVAL_ID;
		var startTimeConfigFetch = new Date().getTime();
		var callback = function(oDataBatchReference){
            this.DDA_CONFIG_ODATA_CALL_REF = oDataBatchReference;
		};
		sap.suite.ui.smartbusiness.drilldown.lib.Configuration.loadConfiguration({
			evaluationId : EVAL_ID_FOR_DDA_CONFIG,
			cache : true,
			success : function(batchResponse) {
				var endTimeConfigFetch = new Date().getTime();
				this._requestTimeLog["DDA_CONFIG_FETCH"] = {
						title : "Configuration",
						time : endTimeConfigFetch - startTimeConfigFetch
				};
				this.CONFIGURATION = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.parse(EVAL_ID_FOR_DDA_CONFIG, batchResponse);
				that.displayMiniCharts();
				if( this.CONFIGURATION.getAllViews().length==0){
					jQuery.sap.log.error("drilldown not configured");
					return;
				}
				var startTimeBundledEvaluationFetch = new Date().getTime();
			},
			error : function() {
				jQuery.sap.log.error("Drilldown Configuration Fetching Failed");
			},
			context : this,
			sapSystem : this.SAP_SYSTEM
		},callback);
	},
	
	getUrlFilters : function() {
		var params = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
		var urlFilters = [];
		for (var key in params) {
			var aFilterValues = params[key];
			if(aFilterValues && aFilterValues.length) {
				aFilterValues.forEach(function(sFilterValue) {
					var Obj = {};
					Obj["NAME"] = key;
					Obj["OPERATOR"] = "EQ";
					Obj["VALUE_1"] = sFilterValue;
					Obj["VALUE_2"] = "";
					Obj["TYPE"] = "FI";
					urlFilters.push(Obj);
				});
			}
		}
		return urlFilters;
	},
	renderKpiHeaders: function(headers) {
		var self = this;
		var mobileGrid = this.byId("mobileGrid");
		mobileGrid.removeAllContent();
		this.miniChartManager = sap.suite.ui.smartbusiness.drilldown.lib.MiniChartManager.renderHeaders({
			allTiles : headers,
			headerContainer : mobileGrid,
			sapSystem : this.SAP_SYSTEM,
			urlFilters : this.getUrlFilters(),
			onNavigation : function(){
				self._detachHashChangeListener();
			}
		});
	},
	displayMiniCharts : function(){
		var aHeaders = this.CONFIGURATION.getHeaders();
			if(!(aHeaders && aHeaders.length)){
				//objectHeaderContainer.setVisible(false);
			}
			else{
				this.renderKpiHeaders(aHeaders);
			}
		$(window).trigger('resize');
	},
});

}; // end of sap/suite/ui/smartbusiness/drilldown/view/miniChart.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.AppSetting') ) {
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.AppSetting")
sap.suite.ui.smartbusiness.lib.AppSetting = (function() {
	var oControl,hideElement,action,controllerReference;
	var personalizationId = {
			container : "sap.suite.ui.smartbusiness",
			item : "idVisibility"
	};
	var oPersonalizer = sap.ushell.Container.getService("Personalization").getPersonalizer(personalizationId);

	var checkBox = new sap.m.CheckBox({
		selected: true,
		layoutData : new sap.ui.layout.GridData({
			span : "L10 M10 S10",
			vAlign : "Middle"
		}),
	});
    var oCustomHeader = new sap.m.Bar({
    	width:"100%",
        contentMiddle:[ new sap.m.Label({
            text:"{i18n>TABLE_POPOVER_HEADING}"
        })],
        contentRight :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "100%",
                press : function() {
                    infoPopOver.close();
                }
            })]
    });

	var infoPopOver = new sap.m.ResponsivePopover({
		title : "Working with IDs",
		showHeader : true,
		customHeader : oCustomHeader,
		contentWidth: "20%",
		contentHeight : "25%",
		verticalScrolling : true,
		showCloseButton : true,
		horizontalScrolling : false,
		placement: sap.m.PlacementType.Right,
		content:[
		         new sap.m.Text({
		        	 width:"100%",
		        	 textAlign: "Center",
		        	 text:"\n\nIDs are used purely for identifying entities in the backend of Smart Business framework apps.\n\n While creating, although you may edit the IDs with your unique id, but they wont be extendable.\n\n Within each App you would individually need to enable this feature to work with IDs."

		         })
		         ]
	});
	var infoButton = new sap.m.Button({
		icon:"sap-icon://message-information",
		type: sap.m.ButtonType.Transparent,
		layoutData : new sap.ui.layout.GridData({
			span : "L2 M2 S2",
			vAlign : "Middle"
		}),
		press:function(){
			infoPopOver.openBy(this);
		}
	});
	var setVisibilityList = function(value){
		sap.ui.getCore().getModel("SB_APP_SETTING").getData().ID_VISIBLE = value;
		sap.ui.getCore().getModel("SB_APP_SETTING").updateBindings();
	};
	var hideListItemsSave = function(){
		if (checkBox.getSelected() == true)
		{
			setVisibilityList(true);
			oPersonalizer.setPersData({"SHOW_ID":true});
		}
		else{
			setVisibilityList(false);
			oPersonalizer.setPersData({"SHOW_ID":false});
		}
	};
	var hideCancel = function(){
		oPersonalizer.getPersData().done(function(data){
			checkBox.setSelected(data && data.SHOW_ID);
		});
	};
	var hideInputSave = function(){
		if (checkBox.getSelected() == true)
		{
			setVisibilityList(true);
			oPersonalizer.setPersData({"SHOW_ID":true});
		}
		else{
			setVisibilityList(false);
			action(controllerReference);
			oPersonalizer.setPersData({"SHOW_ID":false});
		}
	};
	
	var saveButton = new sap.m.Button({
		press : function() {
			(hideElement == "list")? hideListItemsSave() : (hideElement == "input")? hideInputSave():"";
			dialog.close();
		}
	});
	var cancelButton =   new sap.m.Button({
		press : function() {
			hideCancel();
			dialog.close();
		}
	});
	var dialog = new sap.m.Dialog({
		width:"100%",
		content:new sap.ui.layout.Grid({
			hSpacing: 1,
			vSpacing: 0,
			defaultSpan : "L12 M12 S12",
			content: [
			          checkBox,
			          infoButton
			          ]
		}),
		buttons:[
		         saveButton,
		         cancelButton
		         ]
	});
	var oButton = new sap.m.Button({
		press: function (){
			dialog.open();
		}
	});
	return  {
		init  :function(oConfig) {
			dialog.setTitle(oConfig.title);
			oControl = oConfig.oControl;
			if(oConfig.action && oConfig.controllerReference)
			{
				action = oConfig.action;
				controllerReference = oConfig.controllerReference
			}
			infoPopOver.getContent()[0].setText(oConfig.i18n.settingInfoText);
			infoPopOver.getTitle(oConfig.i18n.settingInfoTitle);
			hideElement = oConfig.hideElement;
			checkBox.setText(oConfig.i18n.checkBoxText);
			saveButton.setText(oConfig.i18n.saveText);
			cancelButton.setText(oConfig.i18n.cancelText);
			oButton.setText(oConfig.i18n.settingsText);
			oPersonalizer.getPersData().done(function(data){
				if(data){
					checkBox.setSelected(data.SHOW_ID);
					setVisibilityList(data.SHOW_ID);
				}
				else{
					checkBox.setSelected(true);
					setVisibilityList(true);
				}
			});
			sap.ushell.services.AppConfiguration.addApplicationSettingsButtons([oButton]);
		},
		setVisibility : function(){
			oPersonalizer.getPersData().done(function(data){
				if(data){
					setVisibilityList(data.SHOW_ID);
				}
				else{
					setVisibilityList(true);
				}
			});
		},

	}

})();
}; // end of sap/suite/ui/smartbusiness/lib/AppSetting.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.CatalogServices') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.CatalogServices");
sap.suite.ui.smartbusiness.lib.CatalogServices = function() {
	this.savePersonalizedTile = function(oParam){};
	
};
//Code
sap.suite.ui.smartbusiness.lib.CatalogServices.hasAdapter = true;

}; // end of sap/suite/ui/smartbusiness/lib/CatalogServices.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownConfiguration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownConfiguration");
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration = sap.suite.ui.smartbusiness.lib.DrilldownConfiguration || {};

sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Header =  function(oHeader) {
    this.oHeader = oHeader;
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Header.prototype = {
    getVisualizationType : function() {
        return this.oHeader.VISUALIZATION_TYPE;
    },
    getReferenceEvaluationId : function() {
        return this.oHeader.REFERENCE_EVALUATION_ID;
    },
    getConfigurationId : function() {
        return this.oHeader.CONFIGURATION_ID;
    },
    getEvaluationId : function() {
        return this.oHeader.EVALUATION_ID;
    },
    getVisualizationOrder : function() {
        return this.oHeader.VISUALIZATION_ORDER;
    },
    isVisible : function() {
        return this.oHeader.VISIBILITY == 1;
    },
    getEvaluation: function() {
    	var that = this;
    	var DATA = this.oHeader.REFERENCE_EVALUATION_INFO;
    	return {
    		getTitle : function() {
    			if(DATA && DATA.TITLE){
    				return DATA.TITLE;
    			}
    			else{
    				return "";
    			}
    		},
    		getSubtitle: function() {
    			if(DATA && DATA.INDICATOR_TITLE){
    				return DATA.INDICATOR_TITLE;
    			}
    			else{
    				return "";
    			}
    		}
    	};	
    },
    isAssociated : function() {
        if(this.getReferenceEvaluationId()) {
            if(this.getReferenceEvaluationId()!== this.getEvaluationId()) {
                return true;
            }
        }
        return false;
    },
    isDimensionRequired : function() {
        return this.getVisualizationType() == "TREND" || this.getVisualizationType() == "COMPARISION";
    },
    getDimension : function() {
        return this.oHeader.DIMENSION;
    },
    getMeasure : function() {
        return this.oHeader.MEASURE;
    },
    getVisibility : function() {
        return this.oHeader.VISIBILITY;
    },
    getConfiguration:function(){
    	var defaultMeasures=[{name:"",color:"Good"},{name:"",color:"Critical"},{name:"",color:"Error"}];
    	var defaultSorting={order : "desc",by : "M",};
    	var defaultHarveyFilters=[{
							        	NAME:"",
							        	OPERATOR:"EQ",
							        	VALUE_1:[],
							        	VALUE_2:[]
							        }];
    	var data={
				MEASURES:defaultMeasures,
    			SORTING : defaultSorting,
    			DIMENSION_COLOR:"Neutral",
    			HARVEY_FILTERS:defaultHarveyFilters,
    			HARVEY_MEASURE:"",
    			IS_HARVEY_FRACTION_KPIMEASURE:true
    	};
    	if(this.oHeader.CONFIGURATION){
    		try{
        		data=JSON.parse(this.oHeader.CONFIGURATION);
        		data.MEASURES=data.MEASURES?JSON.parse(data.MEASURES):defaultMeasures;
        		data.SORTING=data.SORTING?JSON.parse(data.SORTING):defaultSorting;
        		data.HARVEY_FILTERS=data.HARVEY_FILTERS ? JSON.parse(data.HARVEY_FILTERS):defaultHarveyFilters;
        		data.HARVEY_MEASURE=data.HARVEY_MEASURE||"";
        		data.IS_HARVEY_FRACTION_KPIMEASURE=(data.IS_HARVEY_FRACTION_KPIMEASURE===false)?false:true
    		}catch(e){};
    	}
    	return data;
    }
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Chart = function(oChart) {
    this.oChart = oChart;  
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Chart.prototype = {
    getValueType : function() {
        return this.oChart.VALUE_TYPE; //Possible Values Absolute/Percentage
    },
    getAxisType : function() {
        return this.oChart.AXIS_TYPE; //Possible Values Single/Dual
    },
    getThresholdMeasure : function() {
        return this.oChart.THRESHOLD_MEASURE;
    },
    getChartType : function() {
        var _this = this;
        return  {
            isBar : function() {
                return _this.oChart.CHART_TYPE.toUpperCase() == "BAR"; 
             },
             isColumn : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "COLUMN"; 
             },
             isLine : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "LINE"; 
             },
             isCombinationChart : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "COMBINATION"; 
             },
             isTable : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "TABLE"; 
             },
             isBubble : function() {
                 return _this.oChart.CHART_TYPE.toUpperCase() == "BUBBLE"; 
             },
             getText : function() {
                 return _this.oChart.CHART_TYPE;
             }
        };
    },
    getColorScheme : function() {
        var that = this;
        return {
            getText : function() {
                return that.oChart.COLOR_SCHEME;
            },
            isManual : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC" || that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
            },
            isManualSemantic : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_SEMANTIC";
            },
            isManualNonSematic : function() {
                return that.oChart.COLOR_SCHEME == "MANUAL_NON_SEMANTIC";
            },
            isAutoSemantic : function() {
                return that.oChart.COLOR_SCHEME == 'AUTO_SEMANTIC';
            }
        };
    },
    getDataLimit : function() {
       return this.oChart.DATA_LIMIT;
    },
    isAbsoluteValue : function() {
        return this.getValueType() == "ABSOLUTE";
    },
    isPercentageValue : function() {
        return this.getValueType() == "PERCENTAGE";
    },
    isSingleAxis : function() {
        return this.getAxisType() == "SINGLE";
    },
    isDualAxis : function() {
        return this.getAxisType() == "DUAL";
    },
    isStackingEnabled : function() {
        //TODO
        return false;
    }
    
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Column = function() {
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Column.prototype = {
    getName  : function() {
        return this.oParam.NAME;
    },
    getSortBy : function() {
        return this.oParam.SORT_BY;
    },
    getColumnOrder : function(){
    	return this.oParam.COLUMNS_ORDER;
    },
    getSortOrder : function() {
      return this.oParam.SORT_ORDER;  
    },
    getType : function() {
        return this.oParam.TYPE;
    },
    getVisibility : function() {
        return this.oParam.VISIBILITY;
    },
    isVisibleInChart : function() {
        return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "CHART";
    },
    isVisibleInTable : function() {
        return this.oParam.VISIBILITY == "BOTH" || this.oParam.VISIBILITY == "TABLE";
    },
    getColor : function() {
        return this.oParam.COLOR;
    },
    isStacked : function() {
        return this.oParam.STACKING == 1;
    },
    getStacking : function() {
      return this.oParam.STACKING;  
    },
    isDimension : function() {
        return this.getType().toUpperCase() == "DIMENSION";
    },
    isMeasure : function() {
        return this.getType().toUpperCase() == "MEASURE";
    },
    getAxis : function() {
        return this.oParam.AXIS;
    }
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Dimension = function(oParam) {
    this.oParam = oParam;
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Dimension.prototype = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Column();


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Measure = function(oParam) {
    this.oParam = oParam;
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Measure.prototype = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Column();



sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Filter = function(oParam) {
    this.oFilter = oParam;
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Filter.prototype = {
    getName : function() {
        return this.oFilter.DIMENSION;
    },
    isVisible  : function() {
        return this.oFilter.VISIBILITY == 1;
    }
};



sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View = function(oParam) {
    this._viewId = oParam.CONFIGURATION_ID;
    this._evaluationId = oParam.EVALUATION_ID;
    this._title  = oParam.TEXT;
    this._order = oParam.CONFIG_ORDER;
    this._columns = [];this._dimensions = []; this._measures = []; this._filters = [];
    this._dimensionMap = {}; this._measureMap = {}; this._filterMap = {};
    this._headers  = [], this._chartConfig = [];
    this._additionalLanguageTitles = [];
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.prototype = {
    getTitle : function() {
        return this._title;
    },
    getId : function() {
        return this._viewId;
    },
    getEvaluationId : function() {
      return this._evaluationId;  
    },
    getViewOrder : function() {
        return this._order;
    },
    getFilters : function() {
        return this._filters;
    },
    getColumns  : function() {
        return this._columns;
    },
    getDimensions : function () {
        return this._dimensions;  
    },
    getMeasures : function() {
      return this._measures;  
    },
    findDimensionByName : function (dimensionName) {
        if(this._dimensionMap[dimensionName]) {
            return this._dimensionMap[dimensionName];
        } else {
            throw new Error("Invalid Dimension Name : "+dimensionName);
        }
        
    },
    findMeasureByName : function (measureName) {
        if(this._measureMap[measureName]) {
            return this._measureMap[measureName];
        } else {
            throw new Error("Invalid Dimension Name : "+measureName);
        }
        
    },
    findColumnByName : function(columnName) {
        if(this._dimensionMap[columnName]) {
            return this._dimensionMap[columnName];
        } else if(this._measureMap[columnName]) {
            return this._measureMap[columnName];
        } else {
            throw new Error("Invalid Column Name : "+columnName);
        }
    },
    getHeaders : function() {
        return this._headers;
    },
    getChartConfiguration : function() {
        return this._chartConfig;
    },
    getAdditionalLanguageTitles: function() {
        return this._additionalLanguageTitles;
    }
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setDimensionAndMeasures = function(oColumns, oThis) {
    oColumns.forEach(function(oValue, index, aArray) {
        if(oValue.CONFIGURATION_ID == this.getId()) {
            this._columns.push(oValue.NAME);
            if(oValue.TYPE.toUpperCase() == "MEASURE") {
                this._measureMap[oValue.NAME] = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Measure(oValue);
                this._measures.push(oValue.NAME);
            } else if(oValue.TYPE.toUpperCase() == "DIMENSION") {
                this._dimensionMap[oValue.NAME] = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Dimension(oValue);
                this._dimensions.push(oValue.NAME);
            }
        }
    }, oThis);
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setFilters = function(oFilters, oThis) {
    oFilters.forEach(function(oValue, index, aArray){
        this._filters.push(oValue.DIMENSION);
        this._filterMap[oValue.DIMENSION] = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Filter(oValue);
    
    }, oThis);
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setConfig = function(oConfig, oThis) {
    var Segments = sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Configuration.Constants;
    for(var eachSegment in Segments) {
        var func = Segments[eachSegment].func;
        if(jQuery.sap.startsWith(func,"is")) {
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.prototype[func] = function() {
              return true;  
            };
        } else {
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.prototype[func] = function() {
              return null;  
            };
        }
    }
    oConfig.forEach(function(oValue, index, aArray) {
        var tempObject = Segments[oValue.PROPERTY_TYPE];
        if(tempObject) {
            var func = tempObject.func;
            if(jQuery.sap.startsWith(func,"is")) {
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.prototype[func] = function() {
                  return oValue.VISIBILITY == 1;  
                };
            } else {
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.prototype[func] = function() {
                  return oValue.PROPERTY_VALUE;  
                };
            }
        } else {
            jQuery.sap.log.error("Unknown Property_Name : " + oValue.PROPERTY_TYPE);
        }
    
    },oThis);
};

sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setHeader = function(oHeader, oThis) {
    if(oHeader.length) {
        oHeader.forEach(function(oValue, index, array) {
            this.getHeaders().push(new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Header(oValue));
        
        }, oThis);
        oThis.getHeaders().sort(function(o1, o2) {
            if(o1.VISUALIZATION_ORDER > o2.VISUALIZTION_ORDER) {
                return 1;
            } 
            return -1;
        });
    }
};
sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setChart = function(oChart, oThis) {
    if(oChart.length) {
        oChart.forEach(function(oValue, index, array) {
            if(this.getId() == oValue.CONFIGURATION_ID) {
                this.getChartConfiguration().push(new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Chart(oValue));
            }
        }, oThis);
    }
};

sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setAdditionalLanguageTitles = function(oMasterText, oThis) {
    if(oMasterText.length) {
        oMasterText.forEach(function(oValue, index, array) {
            if(this.getId() == oValue.CONFIGURATION_ID) {
                this.getAdditionalLanguageTitles().push(oValue);
            }
        }, oThis);
    }
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Configuration = function(evaluationId, MODE) {
    this.evaluationId = evaluationId;
    var defautView = null;
    this.MODE = !!MODE;
    var viewMap = {};
    var _notConfigured = true;
    var debugMode  = jQuery.sap.getUriParameters().get("debug_ddaconfig") == "true";
    var _index = -1;
    var init = function(oMaster, oConfig, oHeader, oFilter, oColumns, oChart, oMasterText) {
        oMaster.forEach(function(v,i,a) {
            var viewId = v.CONFIGURATION_ID;
            if(viewId) {
                _index++;
                var vObject = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View(v);
                viewMap[viewId] = vObject;
                if(_index == 0) {
                    defautView = viewId;
                }
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setConfig(oConfig, vObject);
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setDimensionAndMeasures(oColumns, vObject);
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setFilters(oFilter, vObject);
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setHeader(oHeader, vObject);
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setChart(oChart, vObject);
                sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.View.setAdditionalLanguageTitles(oMasterText, vObject);
                _notConfigured= false;
            }
        });
        
    };
    this.getMaxViewOrder = function() {
    	var max_order = 0;
    	for (var view in viewMap) {
    		max_order = Math.max(max_order, viewMap[view].getViewOrder());
    	}
    	return max_order;
    };
    this.hasNoConfiguration = function() {
        return _notConfigured;
    };
    this.findViewById  = function(vId) {
        if(viewMap[vId]) {
            return viewMap[vId];
        }
        return null;
    },
    this.getDefaultViewId = function() {
      return defautView;  
    },
    this.getDefaultView = function() {
      if(defautView) {
          return viewMap[defautView];
      }
      return null;
    };
    this.removeViewById=function(viewId){
        delete viewMap[viewId];
    };
    this.removeAllViews=function(viewId){
        viewMap = {};
    };
    this.getAllViews = function() {
        var views = [];
        for(var each in viewMap) {
            var tempObj = {};
            tempObj["ID"] = each;
            tempObj["TITLE"] = viewMap[each].getTitle() || "-NA- ("+each+")";
            views.push(tempObj);
        }
        return views;
    };
    this.getTree = function() {
        var tree= {name : "Evaluation", children : []};
        var allViews = this.getAllViews();
        for(var each in allViews) {
            var eachView = {
                    name : allViews[each].TITLE || "NA",
                    children : []
            };
            
            var view = this.findViewById(allViews[each].ID);

            var measures = view.getMeasures();
            var measure = {
                    name : "measures",
                    children : []
             };
            eachView.children.push(measure);
            measures.forEach(function(value, index, array) {
                measure.children.push({
                    name : value,
                    children :[]
                });
            }, this);

            
            var dimensions = view.getDimensions();
            var dimension = {
                    name : "dimensions",
                    children : []
             };
            eachView.children.push(dimension);
            dimensions.forEach(function(value, index, array) {
                dimension.children.push({
                    name : value,
                    children :[]
                });
            }, this);
            
            var headers = view.getHeaders();
            var header = {
                    name : "header",
                    children : []
            };
            eachView.children.push(header);
            headers.forEach(function(each) {
                
                var firstHeader = {
                        name : "1",
                        children : []
                };
                header.children.push(firstHeader);
                
                firstHeader.children.push({
                    name : "Visualization Type = "+each.getVisualizationType(),
                    children : []
                 });
                firstHeader.children.push({
                    name : "Reference Evaluation = "+each.getReferenceEvaluationId(),
                    children : []
                 });
            });
            tree.children.push(eachView);
        }
        return tree;
    };
    
    var _encodeUrl = function(uRi) {
        return jQuery.sap.encodeURL(uRi);
    };
    var _fetchConfiguration = function() {
        var that = this;
        var oDataModel = null;
        var serviceUri = "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
        if(sap.suite.ui.smartbusiness.lib.Util.odata) {
            oDataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
        } else {
            oDataModel = new sap.ui.model.odata.ODataModel(serviceUri, true);
        }
        var masterUri = "/DDA_MASTER?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'")+"&$orderby=CONFIG_ORDER";
        var configUri = "/DDA_CONFIG?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var headerUri = "/DDA_HEADER?$expand=REFERENCE_EVALUATION_INFO&$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var filtersUri = "/DDA_FILTERS?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var columnsUri = "/DDA_COLUMNS?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'")+"&$orderby=COLUMNS_ORDER";
        var chartUri = "/DDA_CHART?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var masterTextUri = "/DDA_MASTER_TEXT?$filter="+_encodeUrl("EVALUATION_ID eq '"+this.evaluationId+"'");
        var request1 = oDataModel.createBatchOperation(masterUri,"GET");
        var request2 = oDataModel.createBatchOperation(configUri,"GET");
        var request3 = oDataModel.createBatchOperation(headerUri,"GET");
        var request4 = oDataModel.createBatchOperation(filtersUri,"GET");
        var request5 = oDataModel.createBatchOperation(columnsUri,"GET");
        var request6 = oDataModel.createBatchOperation(chartUri,"GET");
        var request7 = oDataModel.createBatchOperation(masterTextUri,"GET");
        oDataModel.addBatchReadOperations([request1, request2, request3, request4, request5, request6, request7]);
        oDataModel.submitBatch(function(data, response) {
            var A = data.__batchResponses;
            if(debugMode) {
                jQuery.sap.log.info("DDA-MASTER : ",JSON.stringify(A[0]));
                jQuery.sap.log.info("DDA-CONFIG : ",JSON.stringify(A[1]));
                jQuery.sap.log.info("DDA-HEADER : ",JSON.stringify(A[2]));
                jQuery.sap.log.info("DDA-FILTERS : ",JSON.stringify(A[3]));
                jQuery.sap.log.info("DDA-COLUMNS : ",JSON.stringify(A[4]));
                jQuery.sap.log.info("DDA-CHART : ",JSON.stringify(A[5]));
                jQuery.sap.log.info("DDA-MASTER-TEXT : ",JSON.stringify(A[6]));
            }
            
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData = {};
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.MASTER = A[0].data.results;
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.CONFIG = A[1].data.results;
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER = A[2].data.results;
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.FILTERS = A[3].data.results;
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.COLUMNS = A[4].data.results;
            sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.CHART = A[5].data.results;
            
            init.call(that,A[0].data.results,A[1].data.results,A[2].data.results,A[3].data.results,A[4].data.results,A[5].data.results,A[6].data.results);
        }, function(errorObject){
            throw new Error("Failed to fetch DDA Configuration");
        },false);
    };
    _fetchConfiguration.call(this);
};

sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Configuration.Constants = {
    SAP_FILTER : {
        desc : "Flag whether filter is enabled",
        func : "isFilterEnabled"
    },
    SAP_HEADER : {
        desc : "Flag whether header is enabled",
        func : "isHeaderEnabled"
    },
    SAP_AGGREGATE_VALUE : {
        desc : "Flag whether aggregate kpi value is enabled",
        func : "isAggregateValueEnabled"
    },
    QUERY_SERVICE_URI : {
        desc : "Evaluation Query Service Uri",
        func : "getQueryServiceUri"
    },
    QUERY_ENTITY_SET : {
        desc : "Result path for the query service uri",
        func : "getEntitySet"
    }
};


sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.writeservices = (function() {
    var _instance = null;
    return {
        getInstance : function(bForce) {
            jQuery.sap.require("sap.suite.ui.smartbusiness.lib.DrilldownWriteService");
            if(_instance && !bForce) {
                return _instance;
            } else {
                _instance = new sap.suite.ui.smartbusiness.lib.DrilldownWriteService();
            }
            return _instance;
        }
    }
})();
}; // end of sap/suite/ui/smartbusiness/lib/DrilldownConfiguration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownSaveService') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownSaveService");

sap.suite.ui.smartbusiness.lib.DrilldownSaveService = {
		fetchXSRFToken:function(fnS,fnE){
			jQuery.ajax({
      		  type: "HEAD",
      		  async: false,
      		  dataType: "json",
      		  url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters("/sap/hba/r/sb/core/logic/__token.xsjs"),
      		  headers: {"X-CSRF-Token": "Fetch"},
      		  success: function(d, s, x) {
      			  if(fnS)fnS(d,s,x);
      		  },
      		  error: function() {
      			  if(fnE)fnE(d,s,x);
      		  }
      	  });
		},
		constants:{
			"write":{fn:"getWritePayload"},
			"delete":{fn:"getDeletePayload"},
			"update":{fn:"getUpdatePayload"},
			"viewServiceUrl":"/sap/hba/r/sb/core/logic/ddaViewConfiguration_cud.xsjs",
			"evalServiceUrl":"/sap/hba/r/sb/core/logic/ddaEvaluation_cud.xsjs"
		},
        doUpdate:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"PUT",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doWrite:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"POST",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                  }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
        },
        doDelete:function(oConfig){
            var that=this;
            this.fetchXSRFToken(function(d,s,x){
                  jQuery.ajax({
                         url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(oConfig.url),
                         type:"DELETE",
                         headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language": sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleLanguage()},
                         data:JSON.stringify(oConfig.payload)
                   }).done(oConfig.success||function(){}).fail(oConfig.error||function(){});
            },oConfig.error);
            
        },
        doServiceCall:function(oConfig){
            var that=this;
            if(oConfig.type=="POST"){
                  this.doWrite(oConfig);
            }else if(oConfig.type=="PUT"){
                  this.doUpdate(oConfig);
            }else if(oConfig.type="DELETE"){
                  this.doDelete(oConfig);
            }
        },

        saveEvalConfiguration:function(evalId,data,action,fnS,fnE){
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data),
                         url:this.constants.evalServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
        saveViewConfiguration:function(evalId,data,action,fnS,fnE){
            action=data.ID_EDITABLE?"write":action;
            var type = (action=="delete"?"DELETE":(action=="update"?"PUT":"POST"));
            if(this.constants[action]){
                  this.doServiceCall({
                         type:type,
                         payload:this[this.constants[action].fn](evalId,data,true),
                         url:this.constants.viewServiceUrl,
                         success:fnS,
                         error:fnE
                  });    
            }else{
                  fnE("Service Failed. Unrecognized action "+action);
            }
        },
		getUpdatePayload:function(evalId,data,isView){
			return {
				payload:this.getWritePayload(evalId,data,isView),
				keys:this.getDeletePayload(evalId,data,isView)
			};
		},
		getWritePayload:function(evalId,data,isView){
			var configId=data.SELECTED_VIEW,oReturn;
			if(isView){
				oReturn={
						DDA_COLUMNS:this.getColumnsPayload(data,evalId,configId),
						DDA_CHART:this.getChartPayload(data,evalId,configId),
						DDA_MASTER_TEXT:this.getViewTextPayload(data,evalId,configId)
				};
				if(data.ID_EDITABLE){
					oReturn.DDA_MASTER=this.getNewViewPayload(data.ALL_VIEWS,evalId,configId);
				}
			}else{
				oReturn={
						DDA_FILTERS:this.getFilterPayload(data.CURRENT_FILTERS,evalId,configId),
						DDA_HEADER:this.getHeaderPayload(data.HEADERS_VISIBLE,evalId,configId),
						DDA_CONFIGURATION:this.getConfigurationPayload(data,evalId,configId)						
				};
				var viewOrderPayload=this.getViewOrderPayload(data.ALL_VIEWS,evalId,configId);
				if(viewOrderPayload.length){
					oReturn.DDA_MASTER=viewOrderPayload;
				}
			}
			return oReturn;
		},
		getDeletePayload:function(evalId,data,isView){
			return {"EVALUATION_ID":evalId,"CONFIGURATION_ID":data.ID};
		},
		getViewTextPayload:function(data,evalId,configId){
			var viewTexts=[];
			var curL=data.CURRENT_LANGUAGE,viewText=data.TITLE;
			data=data.ADDITIONAL_LANGUAGE_TITLES||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SAP_LANGUAGE_KEY==curL)
					continue;
				viewTexts.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
     				"SAP_LANGUAGE_KEY": data[i].SAP_LANGUAGE_KEY,
     				"TEXT": data[i].TEXT,
					"IS_ACTIVE":1
				});
			}
			viewTexts.push({
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
 				"SAP_LANGUAGE_KEY": curL,
 				"TEXT": viewText,
				"IS_ACTIVE":1
			});
			return viewTexts;
		},
		getChartPayload:function(data,evalId,configId){
			return [{
				"EVALUATION_ID":evalId,
				"CONFIGURATION_ID":configId,
				"VALUE_TYPE":data.VALUE_TYPE,
				"AXIS_TYPE":data.AXIS_TYPE,
				"CHART_TYPE":data.CHART_TYPE,	
				"DATA_LIMIT":data.DATA_LIMITATIONS?data.DATA_LIMIT:-1,		
				"COLOR_SCHEME":data.COLOR_SCHEME,
				"IS_ACTIVE":1,
				"THRESHOLD_MEASURE":data.THRESHOLD_MEASURE
			}];
		},
		getColumnsPayload:function(data,evalId,configId){
			var columns=[];
			var colorScheme=data.COLOR_SCHEME;
			data=data.items||[];
			for(var i=0;i<data.length;i++){
				if(data[i].SELECTED)
				columns.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"NAME":data[i].NAME,	
					"TYPE":data[i].TYPE.toUpperCase(),
					"SORT_BY":data[i].SORT_BY,
					"VISIBILITY":data[i].VISIBILITY,
					"COLOR":(colorScheme=="MANUAL_NON_SEMANTIC"? data[i].COLOR1:colorScheme=="MANUAL_SEMANTIC"?data[i].COLOR2:"")||"",
					"STACKING":data[i].STACKING,		
					"AXIS":data[i].AXIS,
					"SORT_ORDER":data[i].SORT_ORDER,	
					"COLUMNS_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return columns;
		},
		getFilterPayload:function(data,evalId,configId){
			var filters=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				filters.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"DIMENSION":data[i],	
					"VISIBILITY":1,
					"IS_ACTIVE":1
				});
			}
			return filters;
		},
		_getHeaderConfiguration:function(header){
			var data;
			switch (header.VISUALIZATION_TYPE) {
			    case "CM":
			        data = [{
			            name: header.MEASURE1,
			            color: header.COLOR1
			        }, {
			            name: header.MEASURE2,
			            color: header.COLOR2
			        }];
			        (header.MEASURE3 && header.MEASURE3!="_none^") ? data.push({

			            name: header.MEASURE3,
			            color: header.COLOR3
			        }) : "";
			        data = JSON.stringify({MEASURES: JSON.stringify(data)});
			        break;
			    case "CT":
			        data = {
			            order: header.SORT_ORDER[1] == "D" ? "desc" : "asc",
			            by: header.SORT_ORDER[0],
			            dimension_color: header.DIMENSION_COLOR
			        };
			        data = JSON.stringify({SORTING: JSON.stringify(data)});
			        break;
			}
			return data;
		},
		getHeaderPayload:function(data,evalId,configId){
			var headers=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				if(data[i])//.visible)
				headers.push({
					"CONFIGURATION_ID":configId,
					"EVALUATION_ID":evalId,
					"VISUALIZATION_TYPE":data[i].VISUALIZATION_TYPE,
					"VISIBILITY":1,
					"REFERENCE_EVALUATION_ID":data[i].REFERENCE_EVALUATION_ID,
					"VISUALIZATION_ORDER":i,
					"DIMENSION":data[i].DIMENSION,
					"IS_ACTIVE":1,
					"CONFIGURATION":this._getHeaderConfiguration(data[i])
				});
			}
			return headers;			
		},
		getConfigurationPayload:function(data,evalId,configId){
			var config={
					"SAP_FILTER":{value:"",visibility:1},
					"SAP_AGGREGATE_VALUE":{value:"",visibility:(data.CONFIG.SAP_AGGREGATE_VALUE?1:0)},
					"SAP_HEADER":{value:"",visibility:1},
					"QUERY_SERVICE_URI":{value:data.QUERY_SERVICE_URI,visibility:1},
					"QUERY_ENTITY_SET":{value:data.QUERY_ENTITY_SET,visibility:1},
			};
			var configs=[];
			for(var each in config){
				configs.push({
					"EVALUATION_ID":evalId,
					"CONFIGURATION_ID":configId,
					"PROPERTY_TYPE":each,
					"PROPERTY_VALUE":config[each].value,		
					"VISIBILITY":config[each].visibility,
					"IS_ACTIVE":1
				});
			}
			return configs;
		},
		getNewViewPayload:function(data,evalId,configId){
			return [{
				"CONFIGURATION_ID":configId,
				"EVALUATION_ID":evalId,
				"CONFIG_ORDER":(data.length+1),
				"IS_ACTIVE":1
			}];
		},
		getViewOrderPayload:function(data,evalId,configId){
			var configOrder=[];
			data=data||[];
			for(var i=0;i<data.length;i++){
				configOrder.push({
					"CONFIGURATION_ID":data[i].ID,
					"EVALUATION_ID":evalId,
					"CONFIG_ORDER":i,
					"IS_ACTIVE":1
				});
			}
			return configOrder;	
		}

};
}; // end of sap/suite/ui/smartbusiness/lib/DrilldownSaveService.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownServices') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownServices");
sap.suite.ui.smartbusiness.lib.DrilldownServices = {
		saveEvalConfiguration:function(oParam){},
		saveViewConfiguration:function(oParam){}
};
sap.suite.ui.smartbusiness.lib.DrilldownServices.hasAdapter = true;
}; // end of sap/suite/ui/smartbusiness/lib/DrilldownServices.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownWriteService') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownWriteService");
sap.suite.ui.smartbusiness.lib.DrilldownWriteService = function() {
    var oDataModel = null;
    var serviceUri = "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
    if(sap.suite.ui.smartbusiness.lib.Util.odata) {
        oDataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
    } else {
        oDataModel = new sap.ui.model.odata.ODataModel(serviceUri, true);
    }
    this.getODataModel = function() {
       return oDataModel;
    };
    this.getEntitySet = function() {
       var Entities = {
              CHART_CONFIGURATION : "/DDA_CHART",
            MASTER_CONFIGURATION : "/DDA_MASTER",
            COLUMNS_CONFIGURATION : "/DDA_COLUMNS",
            HEADER_CONFIGURATION : "/DDA_HEADER",
            FILTER_CONFIGURATION : "/DDA_FILTERS",
            DDA_CONFIGURATION : "/DDA_CONFIG",
            DDA_MASTER_TEXT_CONFIGURATION : "/DDA_MASTER_TEXT"
       };
       return  {
              getChartEntity : function() {
                     return Entities.CHART_CONFIGURATION;
              },
            getMasterEntity : function() {
                return Entities.MASTER_CONFIGURATION;
            },
            getColumnEntity : function() {
                return Entities.COLUMNS_CONFIGURATION;
            },
            getHeaderEntity : function() {
              return Entities.HEADER_CONFIGURATION;
            },
            getFilterEntity : function() {
              return Entities.FILTER_CONFIGURATION;
            },
            getConfigEntity : function() {
              return Entities.DDA_CONFIGURATION;
            },
            getMasterTextEntity : function() {
              return Entities.DDA_MASTER_TEXT_CONFIGURATION;
            }
       };
    };
};

sap.suite.ui.smartbusiness.lib.DrilldownWriteService.prototype = {
		_executeBatch  : function(entitySet, payLoads, httpMethod, sCallback, fCallback) {
			var requests= [];
			for(var i=0, l= payLoads.length; i< l ;i++) {
				var payload = payLoads[i];
				if(httpMethod == "POST"){
					requests.push(this.getODataModel().createBatchOperation(entitySet, httpMethod, payload));
				} else if(httpMethod == "DELETE"){
					requests.push(this.getODataModel().createBatchOperation(payload, httpMethod));
				} else if(httpMethod == "PUT"){
					requests.push(this.getODataModel().createBatchOperation(entitySet[i], httpMethod, payload));         
				}

			}
			this.getODataModel().addBatchChangeOperations(requests);
			this.getODataModel().submitBatch(function(data, response){
				if(sCallback) {
					sCallback.call(null, data, response);
				}
			},function() {
				if(fCallback) {
					fCallback.apply(null, arguments);
				}
			}, true);
		},
    
    /**
     * Write Services
     */
    createMasterEntry : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getMasterEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createConfig : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getConfigEntity(), payLoads, "POST", sCallback, fCallback);        
    },
    createFilters : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getFilterEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createHeader : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getHeaderEntity(), payLoads, "POST", sCallback, fCallback);
    },
    createColumns : function(payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getColumnEntity(), payLoads, "POST", sCallback, fCallback);
    },
       createChartConfiguration : function(payLoads, sCallback, fCallback) {
           this._executeBatch(this.getEntitySet().getChartEntity(), payLoads, "POST", sCallback, fCallback);
       },
       createMasterTextEntry : function(payLoads, sCallback, fCallback) {
              this._executeBatch(this.getEntitySet().getMasterTextEntity(), payLoads, "POST", sCallback, fCallback);
       },
       
       /**
       * Update Services
       */
    updateMasterEntry : function(payLoads, sCallback, fCallback) {
    	   var entities = [];
    	   for(var i=0;i<payLoads.length;i++){
    		   entities.push(this.getEntitySet().getMasterEntity()+"(EVALUATION_ID='"+payLoads[i].EVALUATION_ID+"',CONFIGURATION_ID='"+payLoads[i].CONFIGURATION_ID+"',IS_ACTIVE="+payLoads[i].IS_ACTIVE+")");
    	   }
    	   this._executeBatch(entities, payLoads, "PUT", sCallback, fCallback);
       },
    updateConfig : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getConfigEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);        
    },
    updateFilters : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getFilterEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateHeader : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getHeaderEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateColumns : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getColumnEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateChartConfiguration : function(id, payLoads, sCallback, fCallback) {
        this._executeBatch(this.getEntitySet().getChartEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
    updateMasterTextEntry : function(id, payLoads, sCallback, fCallback) {
       this._executeBatch(this.getEntitySet().getMasterTextEntity()+"("+this.formId(id)+")", payLoads, "PUT", sCallback, fCallback);
    },
       
       /**
       * Delete Services
       */
    deleteMasterEntry : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push(this.getEntitySet().getMasterEntity()+"(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch( null, entities, "DELETE", sCallback, fCallback);
    },
    deleteMasterEntry_Eval : function(id, sCallback, fCallback) {
        var entities = [];
        for(var i=0;i<id.length;i++){
               entities.push("DDA_DEL_EVAL_LEVEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
        }
         this._executeBatch( null, entities, "DELETE", sCallback, fCallback);
    },
    deleteConfig : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_CONFIG_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities,  "DELETE", sCallback, fCallback);        
    },
    deleteFilters : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_FILTERS_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteHeader : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_HEADER_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
       this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteColumns : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_COLUMNS_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteChartConfiguration : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push(this.getEntitySet().getChartEntity()+"(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
        this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    deleteMasterTextEntry : function(id, sCallback, fCallback) {
       var entities = [];
       for(var i=0;i<id.length;i++){
              entities.push("DDA_MASTEXT_DEL(EVALUATION_ID='"+id[i].EVALUATION_ID+"',CONFIGURATION_ID='"+id[i].CONFIGURATION_ID+"',IS_ACTIVE="+id[i].IS_ACTIVE+")");
       }
       this._executeBatch(null, entities, "DELETE", sCallback, fCallback);
    },
    
    /**
     * id={EVALUATION_ID : 'x', CONFIGURATION_ID :'y'}
     * formId loops through the object id and returns key value pairs as string
     */
    formId : function(id){
       var tempId = '';
       for(each in id){
              if(isNaN(id[each])){
              tempId = tempId+(each+"='"+id[each]+"',");
              } else {
                     tempId = tempId+(each+"="+id[each]+","); 
              }
       }
       return tempId.substring(0,tempId.length-1);
    },
    
    
   
    
    /**
     * Master Write Service. In one Batch Call, Save Everything
     * @param : oParam
     * {
     *      masterPayload : {EVALUATION_ID :'', CONFIGURATION_ID:'', CONFIG_ORDER : 1, TEXT : ''},
     *      configPayload :[
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_FILTER', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_HEADER', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'SAP_AGGREGATE_VALUE', PROPERTY_VALUE:'', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'QUERY_SERVICE_URI', PROPERTY_VALUE:'/a/b.xsodata', VISIBILITY : 1},
     *          {EVALUATION_ID :'', CONFIGURATION_ID:'', PROPERTY_NAME : 'QUERY_ENTITY_SET', PROPERTY_VALUE:'XYZ', VISIBILITY : 1}
     *      ],
     *      columnsPayload : [
     *          {
     *              EVALUATION_ID :'', 
     *              CONFIGURATION_ID:'',
     *              NAME:'COUNTRY', 
     *              TYPE:'DIMENSION', 
     *              SORT_BY:'COUNTRY', 
     *              SORT_ORDER : 'asc',
     *              COLOR : '',
     *              STACKING : 1, //tiny int
     *              AXIS : 1 //integer
     *          }
     *          //Multiple Columns
     *      ],
     *      chartPayload : {
     *          EVALUATION_ID :'', 
                CONFIGURATION_ID:'',
     *          CHART_TYPE : 'TABLE',
     *          AXIS_TYPE : 'DUAL', //SINGLE/DUAL
     *          VALUE_TYPE : 'PERCENTAGE', //PERCENTAGE/ABSOLUTE,
     *          COLOR_SCHEME : 'AUTO_SEMANTIC',
     *          DATA_LIMIT : 0 //Integer ; 0 means no limit
     *      },
     *      filterPayload : [
     *          {
     *              EVALUATION_ID :'',
     *              CONFIGURATION_ID:'',
     *              DIMENSION :''
     *          }
     *          //Multiple Filters
     *      ],
     *      headerPayload : [
     *          {
     *              EVALUATION_ID :'',
     *              CONFIGURATION_ID:'',
     *              
     *          }
     *      ]
     * }
     */
    saveDDAConfiguration : function(oParams) {
        
    },
    
};

}; // end of sap/suite/ui/smartbusiness/lib/DrilldownWriteService.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Filter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Filter");
sap.ui.core.Control.extend("sap.suite.ui.smartbusiness.lib.Filter", {
	metadata : {
		properties : {
			evaluationId:"string",
			dimensions : {
				type : "any",
				defaultValue : []
			},
			visible:{
				type:"boolean",
				defaultValue:true
			},
			advancedSetting : {
				type : "object",
				defaultValue : {}
			},
			mode:{
				type:"string",
				defaultValue:"Runtime"
			},
			suppressAction:{
				type:"boolean",
				defaultValue:false
			},
			sapSystem : {
				type : "string",
				defaultValue : null
			}
		},
		aggregations : {
			"_filter" : {
				type : "sap.ui.core.Control",
				multiple : false,
				visibility : "hidden"
			},
			"_popover":{
				type:"sap.m.Popover",
				multiple:false,
				visibility:"hidden"
			}
		},
		events : {
			filterChange : {}
		}
	},
	renderer : function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("SmartBusinessFilter");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_filter"));
		oRm.write("</div>");
	}
});
sap.suite.ui.smartbusiness.lib.Filter.prototype.init  = function() {
	this._filterObj={};
	if(sap.ushell && sap.ushell.Container) {
		this.urlParsingService = sap.ushell.Container.getService("URLParsing");
	}
	else {
		this.urlParsingService = undefined;
	}
	//this.urlParsingService = sap.ushell.Container.getService("URLParsing");
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.onBeforeRendering = function() {
	if(this.getEvaluationId()){
		try{
			this._updateOdataProperties();
			this._facetListsReference={};
			var childControl=this._getChildControl();
			childControl.setVisible(this.getVisible());
			this.setAggregation("_filter",childControl );
			this._initModel();
			if(this.getMode()=="Runtime"){
				this._addDimensions(this.getDimensions());
			}else{
				this._addDimensionsDesignTime(this.getDimensions());
			}
		}catch(e){jQuery.sap.log.error(e);}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.onAfterRendering = function() {
	if(this.getMode()=="Runtime"){
		this.refreshFilter(true);	
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.getFacetFilterReference  = function() {
	return this.getAggregation("_filter");
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.getSelectedItems  = function() {
	var filter= this.getAggregation("_filter");
	var list= filter.getLists();
	var c=0;
	for(var i=0;i<list.length;i++){
		if(list[i].getSelectedItems().length>0){
			c++;
		}
	}
	if(c>0)
	{
		return true;
	}else{
		return false;
	}

};
//sap.suite.ui.smartbusiness.lib.Filter.prototype.setVisible=function(visibility){
//if(visibility){
//this.$().show();
//}else{
//this.$().hide();
//}
//}
sap.suite.ui.smartbusiness.lib.Filter.prototype._updateOdataProperties=function(){
	if(this.urlParsingService) {
		this._serviceUri = this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.getSapSystem());	
	}
	else {
		this._serviceUri = this.EVALUATION.getODataUrl();
	}
	//this._serviceUri = this.urlParsingService.addSystemToServiceUrl(this.EVALUATION.getODataUrl(), this.getSapSystem());
	this._entitySet = this.EVALUATION.getEntitySet();
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getChildControl=function(){
	var control,that=this;
	function _getInHBoxWrapper(oControl, width){
		return new sap.m.HBox({
			items:oControl,
			width:width
		})
	}
	if(this.getMode()=="Runtime"){
		control= new sap.m.FacetFilter({
			showReset:false,
			showPersonalization:true,
			showPopoverOKButton:true,
			reset:jQuery.proxy(function(){
				that.resetFilter.call(this);
			},this)
		});
	}else{ 
		this._facetContainer=new sap.m.ScrollContainer({
			vertical:false,
			horizontal:true,
		}).addStyleClass("facetFilterContainer");
		control= new sap.m.HBox({
			justifyContent:"SpaceBetween",
			alignItems:"Center",
			items:[   _getInHBoxWrapper([this._facetContainer]),
			          _getInHBoxWrapper([new sap.m.Button({
			        	  icon:"sap-icon://undo",
			        	  type:"Transparent",
			        	  visible:(!that.getSuppressAction()),
			        	  press:function(){
			        		  if(!that.getSuppressAction()){ that.rerender();}
			        	  }
			          }),
			          new sap.m.Button({
			        	  icon:((!that.getSuppressAction())? "sap-icon://add-filter" : "sap-icon://filter"),
			        	  type:"Transparent",
			        	  enabled:((!that.getSuppressAction()) ? true : false),
			        	  press:function(){
			        		  if(!that.getSuppressAction()){
			        			  that._popover.openBy(this);
			        		  }    
			        	  }
			          })])]
		});
	}
	return control;
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.resetFilter=function(){
	this._filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
	var viewId=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters().viewId[0];
	var newUrlParams={viewId:[viewId]};
	var that=this;
	var dimensions= sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(this._serviceUri,this._entitySet);
	dimensions.forEach(function(s){
		delete that._filterObj[s];
	});
	for(var each in this._filterObj){
		newUrlParams[each]=this._filterObj[each];
	}
	sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(newUrlParams);
	this.rerender();
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._addDimensions = function(dimensions) {
	var allDimensions=[];
	if(dimensions && dimensions.length) {
		if(typeof dimensions == 'string') {
			dimensions = dimensions.split(",");
		}
	}
	if(this.getEvaluationId()){
		var deltaDimensions=sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(this._serviceUri,this._entitySet);
	}
	for(var i=0;i<dimensions.length;i++){
		allDimensions.push({name:dimensions[i],isDelta:false});
	}
	for(var i=0;i<deltaDimensions.length;i++){
		if(dimensions.indexOf(deltaDimensions[i])==-1)
			allDimensions.push({name:deltaDimensions[i],isDelta:true});
	}
	var mProperties=sap.suite.ui.smartbusiness.lib.Util.odata.properties(this._serviceUri,this._entitySet);
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	try{
		allDimensions.sort(function(a,b){return COLUMN_LABEL_MAPPING[a.name]>COLUMN_LABEL_MAPPING[b.name]?1:-1;});
	}catch(e){jQuery.sap.log.error(e);}
	
	for(var i = 0; i < allDimensions.length ; i++) {
		this.addFacetList(allDimensions[i].name,allDimensions[i].isDelta, mProperties);
	}
	
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.facetListClosed = function(oEvent) {
	this.fireFilterChange(oEvent);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.setEvaluationData = function(evaluation) {
	this.EVALUATION = evaluation;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.getSelectedKeys=function(oList){
	var selectedKeys=[];
	if(oList.getActive()){
		var items=oList.getSelectedItems();
		for(var i=0;i<items.length;i++){
			if(items[i].getSelected()){
				var val=items[i].getKey();
				var selection=(val||val==0)?val:(val==null)?"SAP_SMARTBUSINESS_NULL":"";
				selection=selection.getTime?selection.getTime():selection;
				selectedKeys.push(selection+"");
			}
		}
	}
	return selectedKeys;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.addFacetList = function(facetListName,isDelta, mProperties /*oData Metadata Properties*/) {
	var that = this;
	var facetFilter = this.getAggregation("_filter");
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	var TEXT_PROPERTY_MAPPING=mProperties.getTextPropertyMappingObject();
	var facetList = new sap.m.FacetFilterList({
		key : facetListName,
		title : COLUMN_LABEL_MAPPING[facetListName],
		displaySecondaryValues: true,
		growingThreshold:999,
		active:!isDelta,
		listOpen:function(){
			that._fetchListData(this);
		}
	});
	this._facetListsReference[facetListName]=facetList;
	facetList._techName=facetListName;
	facetList._isDelta=isDelta;
	facetList._isFilterDirty=true;
	facetList._prevSelectedKeys=[];
	if(this.getMode()=="Runtime"){
		facetList.attachListClose(function() {
			var prevFilters=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(['viewId']);
			this._prevSelectedKeys = prevFilters[this._techName]||[];              
			if(JSON.stringify(this._prevSelectedKeys)!=JSON.stringify(that.getSelectedKeys(this))){
				this._prevSelectedKeys=that.getSelectedKeys(this);
				that._setFilterDirty(this.getKey());
				that._updateFilter(this.getKey(),this._prevSelectedKeys);          
			}
			if(!this.getActive()){
				this._isFilterDirty=true
			}
		});
	}
	facetList.bindAggregation("items", "/",new sap.m.FacetFilterItem({
		key : {
			path : facetListName
		},

		text : {
			formatter: that._getColumnValueFormatter(TEXT_PROPERTY_MAPPING[facetListName]), 
			path : TEXT_PROPERTY_MAPPING[facetListName]
		}
	})).setModel(new sap.ui.model.json.JSONModel());
	facetFilter.addList(facetList);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.refreshFilter=function(bNoRerender){
	if(this.getVisible()){
		var prevFilter=this._filterObj||{};
		var isRefreshNecessary=false;
		try {
			var facetLists=this._facetListsReference;
			if(facetLists && this.getMode() == "Runtime") {
				this._filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
				for(var each in this._filterObj){
					if(((prevFilter[each]+"")!=(this._filterObj[each]+"")) ||(this._filterObj[each]+"" && !facetLists[each].getActive())){
						facetLists[each].setActive(true);
						facetLists[each]._isSelectionChanged=true;
						isRefreshNecessary=true;
					}
				}
				for(var each in prevFilter){
					if(((prevFilter[each]+"")!=(this._filterObj[each]+"")) || (prevFilter[each]+"" && !facetLists[each].getActive())){
						facetLists[each].setActive(true);
						facetLists[each]._isSelectionChanged=true;
						isRefreshNecessary=true;
					}
				}
				bNoRerender = !!bNoRerender;
				if(this.getAggregation("_filter") && !bNoRerender) {
					//this.getAggregation("_filter").rerender();
				}
			}

			var filter=this.getAggregation("_filter");
			if(filter && isRefreshNecessary){
				var filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
				for(var each in facetLists){
					if(facetLists[each]._isSelectionChanged){
						this.updateSelections(facetLists[each],filterObj[each] || []);
					}
				}
			}
		} catch(e) {
			jQuery.sap.log.error(e);
		}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype.updateSelections= function(facetList, selectedKeys){
	var facetData=facetList.getModel().getData();
	if(!(facetData instanceof Array) || !facetData.length) {
		if(selectedKeys.length==1){
			facetList._isFilterDirty=true;
			this._fetchListData(facetList); 
		}else{
			this._fetchPseudoListData(facetList,selectedKeys);
			facetList._isFilterDirty=true;
		}
	}else{
		this._retainListSelections(facetList);
	}

	
	
}
sap.suite.ui.smartbusiness.lib.Filter.prototype._updateFilter=function(sDimensionName,oFilters){
	this._filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters();
	var viewId=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters().viewId[0];
	var newUrlParams={viewId:[viewId]};
	if(oFilters.length) {
		this._filterObj[sDimensionName]=oFilters;
	} else {
		delete this._filterObj[sDimensionName];
	}
	for(var each in this._filterObj){
		newUrlParams[each]=this._filterObj[each];
	}
	sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(newUrlParams);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getValidFilters=function(sDimensionName){
	var obj=[];
	
	var filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId", sDimensionName]);
	for(var each in filterObj) {
		var filterValues = filterObj[each];
		if(filterValues && filterValues.length) {
			filterValues.forEach(function(sFilterValue) {
				obj.push({
					NAME : each,
					VALUE_1 : sFilterValue,
					VALUE_2 : "",
					TYPE : "FI",
					OPERATOR : "EQ"
				});
			});
		}
	}
	return obj;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype.getActiveDimensions=function(){
	var tmp=[];
	if(this.getMode()=="RunTime"){
		var filterLists=this.getAggregation("_filter").getLists();
		filterLists.forEach(function(s){
			if(s.getActive()){
				tmp.push(s._techName);
			}         
		});
	}else{
		var listData=this._designTimeModel.getProperty("/");
		listData.forEach(function(s){
			if(s.selected){tmp.push(s.name);}
		});
	}
	return tmp;
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._retainListSelections=function(oList){
	if(this.getMode()=="Runtime"){
		this._filterObj=sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
		var curFilterObj=this._filterObj[oList.getKey()]||[];
		for(var i=0,items=oList.getItems();i<items.length;i++){
			var curKey=items[i].getBindingContext().getObject()[oList._techName];
			curKey=(curKey==null)?"SAP_SMARTBUSINESS_NULL":(curKey||curKey==0?curKey:"");
			curKey=curKey.getTime?curKey.getTime()+"":curKey+"";
			items[i].setSelected(curFilterObj.indexOf(curKey)!=-1);
		}
		oList._isSelectionChanged=false;
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._getFilterString=function(sDim,obj) {
	return sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
		entitySet:this._entitySet,
		serviceUri:this._serviceUri,
		dimension:sDim,
		filter :obj.concat(this.EVALUATION.getFilters().results)
	}).uri;
};

sap.suite.ui.smartbusiness.lib.Filter.prototype._setFilterDirty=function(excludableListKey){
	var facetFilter=this.getAggregation("_filter");
	for(var i=0,lists=facetFilter.getLists();i<lists.length;i++){
		if(lists[i].getKey()!=excludableListKey){
			lists[i]._isFilterDirty=true;
		}
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._onAfterListDataFetch=function(oList,data){
	oList.getModel().setData(data);
	this._retainListSelections(oList);
	oList._isFilterDirty=false;
	oList.setBusy(false);
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._fetchPseudoListData=function(oList,pseudoValues){
	var dummyData=[];
	var a=oList.getKey();
	for(var each in pseudoValues){
		var obj={};
		obj[a]=pseudoValues[each];
		dummyData.push(obj);
	}
	this._onAfterListDataFetch(oList,dummyData);
	// 
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._fetchListData=function(oList,oFilter){
	if(oList._isFilterDirty){
		var that=this;
		if(this.getMode()=="Runtime"){
			oList.setBusy(true);
			this.oDataModel.read(this._getFilterString(oList.getKey(),this._getValidFilters(oList.getKey())),
					null, null, true, function(data) {
				that._onAfterListDataFetch(oList,data.results);
				
			},function(){

			});
		}
	}else if(oList._isSelectionChanged) {
		this._retainListSelections(oList);
	}
};
sap.suite.ui.smartbusiness.lib.Filter.prototype._initModel = function() {
	if(this.getEvaluationId()) {
		if(sap.suite.ui.smartbusiness.lib.Util.odata) {
			this.oDataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(this._serviceUri);
		} else {
			this.oDataModel=  new sap.ui.model.odata.ODataModel(this._serviceUri, true);
		}
	}
};





sap.suite.ui.smartbusiness.lib.Filter.prototype._getColumnValueFormatter=function(sName){
	var formatter=function (s) {return s==0?s+"":s;}
	var oMetaData=sap.suite.ui.smartbusiness.lib.Util.odata.getEdmType(this._serviceUri,sName,true);
	var sType=oMetaData.type;
	var sFormat=oMetaData.format.toUpperCase();
	if(sType=='Edm.DateTime'){
		if(!sap.suite.ui.smartbusiness.lib.Util.odata.isTimeZoneIndependent(this._serviceUri,this._entitySet)){
    		var style;
    		if(sFormat=="DATE" || sFormat=="NONE"){
    			style="daysAgo";
    		}else if(sFormat=="DATETIME"){
    			style="";
    		}
    		if(style){
				var oF=new sap.ca.ui.model.type.Date({
					style: style
				});
				formatter=function(s){
					return oF.formatValue(s,"string");
				}
    		}else{
    			/*
    			 * if displayformat is datetime, format the date to show both date and time
    			 * */
    			var oF=sap.ui.core.format.DateFormat.getDateTimeInstance();
        		formatter=function(ts){
        			if(ts && ts.getMinutes){
            			return oF.format(ts);
        			}
        			return ts;
        		}
    		}
		}else{
    		formatter=function(ts){
    			if(ts && ts.getMinutes){
    				ts= new Date(ts.getTime());
        			ts.setMinutes( ts.getMinutes() + ts.getTimezoneOffset());
        			var instanceType=(sFormat=="DATE")?"getDateInstance":"getDateTimeInstance";
        			return sap.ui.core.format.DateFormat[instanceType]().format(ts);
    			}
    			return ts;
    		}
		}
	}
	return formatter;

};
/**
 * DesignTime Related Methods
 */
sap.suite.ui.smartbusiness.lib.Filter.prototype._getDesignTimeModel=function(dimensions){
	var d=[];
	dimensions=dimensions||[];
	var mProperties=sap.suite.ui.smartbusiness.lib.Util.odata.properties(this._serviceUri,this._entitySet);
	var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
	var allDimensions=sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(this._serviceUri,this._entitySet);
	if(dimensions && dimensions.length) {
		if(typeof dimensions == 'string') {
			dimensions = dimensions.split(",");
		}
	}
	allDimensions.forEach(function(s){
		d.push({name:s,label:COLUMN_LABEL_MAPPING[s],selected:dimensions.indexOf(s)!=-1});
	});
	return new sap.ui.model.json.JSONModel(d);
};


sap.suite.ui.smartbusiness.lib.Filter.prototype._addDimensionsDesignTime=function(dimensions){
	function onDimensionSearch(oEvent){
		var filter = [];
		var sQuery = oEvent.getSource().getValue();
		var binding = popoverList.getBinding("items");
		if (sQuery && sQuery.length > 0) {
			filter= [new sap.ui.model.Filter("label", sap.ui.model.FilterOperator.Contains, sQuery)] 
		}
		binding.filter(filter);
	}

	this._designTimeModel=this._getDesignTimeModel(dimensions);
	this._designTimeModel.setSizeLimit(999);
	this._facetContainer.setModel(this._designTimeModel);
	var popoverList= new sap.m.List({
		mode:"MultiSelect"
	});
	var searchField= new sap.m.SearchField({
		width:"100%",
		liveChange:jQuery.proxy(onDimensionSearch,this)
	});  
	this._popover= new sap.m.Popover({
		customHeader:searchField,
		content:[popoverList],
		showHeader:false,
		placement:"Bottom"
	});
	this._popover.setModel(this._designTimeModel);
	var sorter=new sap.ui.model.Sorter('label',false);
	popoverList.bindAggregation("items",{
		path:"/",
		template:new sap.m.StandardListItem({
			title:"{label}",
			selected:"{selected}"
		}),
		sorter:sorter
	});
	var facetListTemplate=new sap.m.HBox({
		visible:"{selected}",
		justifyContent:"SpaceBetween",
		items:[new sap.m.Label({
			text:"{label}"
		}).addStyleClass("dimensionName"),new sap.ui.core.Icon({
			src:"sap-icon://sys-cancel",
			visible:!this.getSuppressAction(),
			press:function(){
				this.getParent().setVisible(false);
			}
		})]
	}).addStyleClass("facetFilterDimension");
	var facetListContainer= new sap.m.HBox();
	facetListContainer.bindAggregation("items","/",facetListTemplate);
	this._facetContainer.addContent(facetListContainer);    
};

}; // end of sap/suite/ui/smartbusiness/lib/Filter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Formatter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Formatter");

var autoFormat = (function(){
	/*****************************
	 * INTERNAL METHODS
	 ****************************/
	
	this._getMantissaLength = function(num){
        var sNum = num.toString();
        var initPos = 0;
        if(num < 0){
            initPos = 1;
        }
        return (sNum.indexOf('.') === -1 ) ? (num < 0 ? sNum.length -1:sNum.length):  
            sNum.substring(initPos, sNum.indexOf('.')).length;
    };        

    this._getLocaleFormatter_FormattedValue = function(num, oScale, oDecimal, style, isACurrencyMeasure, currencyCode) {
    	jQuery.sap.require("sap.ui.core.format.NumberFormat");
    	var formatter;
    	var formatted_value;
    	if (isACurrencyMeasure) {
    		formatter = sap.ui.core.format.NumberFormat.getCurrencyInstance({style:style, showMeasure: false});
    		currencyCode = currencyCode || null;
    		formatted_value = formatter.format(num, currencyCode);
    		return {formatter: formatter, formatted_value: formatted_value};
    	}

		/* The auto-formatter doesn't take care of %s */
		if (oScale === -2) {
			if(oDecimal == -1 || oDecimal == null || typeof oDecimal == "undefined") {
				oDecimal = 2;
	            var mantissaLength  = this._getMantissaLength(num * 100)
	            if(!(mantissaLength % 3)){
	            	oDecimal = 1;
	            }
	            if(mantissaLength % 3 === 1){
	            	oDecimal = 3;
	            }
	            if(mantissaLength % 3 === 2){
	            	oDecimal = 2;
	            }
	            if(Math.abs(num) % Math.pow(10, mantissaLength-1) == 0) {
	            	oDecimal = 0;
	            }
	            else if((Math.abs(num) % Math.pow(10, mantissaLength-1)) < 6*Math.pow(10, mantissaLength - 4)) {
	            	oDecimal = 0;
	            }
			}
			var oFormatOptions= {
					minFractionDigits: oDecimal,
					maxFractionDigits: oDecimal
			};
			formatter = sap.ui.core.format.NumberFormat.getInstance(oFormatOptions)
			formatted_value = formatter.format(num * 100);
			return {formatter: formatter, formatted_value: formatted_value};
		}
    	
        /* var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage()); */
        var sD = 2;
    	var oFormatOptions = {
    		style : style
    	};
        var fNum;
    	if(!(oDecimal==-1 || oDecimal==null)){
    		oFormatOptions.shortDecimals=Number(oDecimal);
    		oFormatOptions.minFractionDigits=Number(oDecimal);
    		oFormatOptions.maxFractionDigits=Number(oDecimal);
    	}
    	var valFormatter = sap.ui.core.format.NumberFormat.getFloatInstance(oFormatOptions);
        if(oDecimal == -1 || oDecimal == null) {
            var mantissaLength  = this._getMantissaLength(num)
            if(!(mantissaLength % 3)){
                sD = 1;
            }
            if(mantissaLength % 3 === 1){
                sD = 3;
            }
            if(mantissaLength % 3 === 2){
                sD = 2;
            }
            if(Math.abs(num) % Math.pow(10, mantissaLength-1) == 0) {
                sD = 0;
            }
            else if((Math.abs(num) % Math.pow(10, mantissaLength-1)) < 6*Math.pow(10, mantissaLength - 4)) {
                sD = 0;
            }                
            valFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({ style: style ,
            										shortDecimals:sD,
													minFractionDigits:sD,
													maxFractionDigits:sD
													});
            fNum = valFormatter.format(num);
        } else {
        	fNum = valFormatter.format(num);
        }
        return {formatter: valFormatter, formatted_value: fNum};
    };
    
    this._getLocaleFormattedValue = function(num, oScale, oDecimal, style, isACurrencyMeasure, currencyCode) {
    	return this._getLocaleFormatter_FormattedValue(num, oScale, oDecimal, style, isACurrencyMeasure, currencyCode)["formatted_value"];
    }
    
    this._getLocaleFormatter = function(num, oScale, oDecimal, style, isACurrencyMeasure) {
    	return this._getLocaleFormatter_FormattedValue(num, oScale, oDecimal, style, isACurrencyMeasure, null)["formatter"];
    }
    
    
    /********************************
     * API METHODS
     *******************************/
    /**
     * Returns value according to smartbusiness formatting logic
     *
     * @param {Number} num
     * 		Value to be formatted
     * @param {Number} oScale
     * 		Scaling Factor
     * @param {Number} oDecimal
     * 		Decimal Precision (-1 for Auto)
     * @param {boolean} isACurrencyMeasure
     *   	whether the value has to be formatted as currency
     */
    this.getLocaleFormattedValue = function(num, oScale, oDecimal, isACurrencyMeasure, currencyCode) {
    	isACurrencyMeasure = isACurrencyMeasure || false;
    	return this._getLocaleFormattedValue(num, oScale, oDecimal, "short", isACurrencyMeasure, currencyCode);
    };
    
    this.getLocaleFormattedValue_nonscaled = function(num, oScale, oDecimal, isACurrencyMeasure, currencyCode) {
    	isACurrencyMeasure = isACurrencyMeasure || false;
    	return this._getLocaleFormattedValue(num, oScale, oDecimal, "standard", isACurrencyMeasure, currencyCode);
    };
    
    this.getLocaleFormatter = function(num, oScale, oDecimal, isACurrencyMeasure) {
    	isACurrencyMeasure = isACurrencyMeasure || false;
    	return this._getLocaleFormatter(num, oScale, oDecimal, "short", isACurrencyMeasure);
    };
    
    this.getLocaleFormatter_nonscaled = function(num, oScale, oDecimal, isACurrencyMeasure) {
    	isACurrencyMeasure = isACurrencyMeasure || false;
    	return this._getLocaleFormatter(num, oScale, oDecimal, "standard", isACurrencyMeasure);
    };
});

sap.suite.ui.smartbusiness.lib.Formatter = new autoFormat();

}; // end of sap/suite/ui/smartbusiness/lib/Formatter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.IDGenerator') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.IDGenerator");
(function() {
	var defaultSettings = {
			EVALUATION_ID_PREFIX : "E",	
			KPI_ID_PREFIX : "K",	
			VIEW_ID_PREFIX : "V"	
	};
	//URL Should be read from Adapter
	//var PUNYCODE_SERVICE_URL = sap.......Adapter.getService("AppConfiguration").getPunyCodeServiceUrl();
	var PUNYCODE_SERVICE_URL = "/tmp/aijaz/rnd/test.xsjs"; //for testing purpose
	var F = function() {};
	var IDGenerationStrategy = {
		TIMESTAMP : "TIMESTAMP",
		PUNYCODE : "PUNYCODE"
	};
	var CURRENT_STRATEGY = IDGenerationStrategy.TIMESTAMP;
	var padding = function(number, maxLength) {
		var str = ""+number;
		if(str.length >= maxLength) {
			return str;
		} else {
			return new Array(maxLength - str.length + 1).join('0') + number;
		}
	};
	var fnGenerateId = null;
	(function(strategy) {
		switch(strategy) {
			case IDGenerationStrategy.TIMESTAMP:
				fnGenerateId =  function(oParam) {
					var deferred = new jQuery.Deferred();
					var prefix = oParam.prefix;
					if(oParam.title) {
						prefix = (oParam.title+"").replace(/[\s]+/g, ".")
					}
					prefix = prefix + "." + new Date().getTime();
					deferred.resolve(prefix);
					return deferred.promise();
				};
				break;
			case IDGenerationStrategy.PUNYCODE : 
				fnGenerateId = function(oParam) {
					jQuery.sap.require("sap.ui.thirdparty.punycode");
					var title = punycode.encode(oParam.title.replace(/\s|\W/g,""));
					//Length Restriction Should be read from Adapter - Hardcoding 35
					if(title.length > 35) {
						title = title.substring(0, 35);
					}
					return jQuery.ajax({
						url : PUNYCODE_SERVICE_URL,
						type : "get",
						data : {
							type : oParam.type,
							id : title
						},
						dataType : "json"
					}).pipe(function(data) {
						if(data.found) {
							var id = data.id.substring(0,35), numberSuffix, finalId;
							var lastPart = data.id.substring(35);
							if(lastPart.length) {
								numberSuffix = -1;
								if(isNaN(lastPart)) {
									numberSuffix = 0;
								} else {
									numberSuffix = Number(lastPart);
									++numberSuffix;
								}
								finalId = id + padding(numberSuffix, 4);
							} else {
								finalId = id + padding(0, 4);
							}
							return finalId;
						} else {
							return title + padding(0, 4);
						}
					});
				};
				break;
			default : 
				throw new Error("Please use a valid ID Generation Strategy");
		}
		
	})(CURRENT_STRATEGY);
	F.prototype = {
		//Parameter 'type' is used by backend service to query the corresponding table (If Strategy is NOT TIMESTAMP)
		generateEvaluationId : function (oSetting) {
			return fnGenerateId({prefix : defaultSettings.EVALUATION_ID_PREFIX, title : oSetting && oSetting.title, type:"evaluation"});
		},
		generateKpiId : function(oSetting) {
			return fnGenerateId({prefix : defaultSettings.KPI_ID_PREFIX, title : oSetting && oSetting.title, type:"kpi"});
		},
		generateViewId : function(oSetting) {
			return fnGenerateId({prefix : defaultSettings.VIEW_ID_PREFIX, title : oSetting && oSetting.title, type:"view"});
		}
	};
	sap.suite.ui.smartbusiness.lib.IDGenerator = new F();
})();
}; // end of sap/suite/ui/smartbusiness/lib/IDGenerator.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.ListPersona') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.ListPersona");
/**
 * 
 * @param oParam
 * @returns {sap.suite.ui.smartbusiness.lib.ListPersona}
 * 
 * oParam should be an Object with following Properties
 * {
 *   title:'', //Title of Dialog Box
 *   namedModel : "DDA", //Named model name, if any("optional")
 *   context : "/CHART_TYPES",  context path of list binded.('Absolute Path')
 *   view : this.getView(),// view reference, using this the controller will get the reference of Model Data,
 *                          view.getModel().getData();   
 *   listItemContext : 'key' //  dialogbox  will use this context to bind each list item of LIST.  (Relative to 'context')  
 *   filter : { //if list if filtered, pass the filter property and filter value ("OPTIONAL")
 *      property : '',
 *      value ; ''
 *   }
 *   
 * }
 * 
 */

sap.suite.ui.smartbusiness.lib.ListPersona = function(oParam) {
    this.oParam = oParam;
    this.init();
};
sap.suite.ui.smartbusiness.lib.ListPersona.prototype = {
   init : function() {
       this.CHANGE_STATE = false;
       this.oContext = this.oParam.context;
       if(jQuery.sap.startsWith(this.oContext,"/")) {
           this.oContext = this.oContext.substring(1);
       }
       this.oView = this.oParam.view;
       this.namedModel = this.oParam.namedModel;
       this.oModel = this.oView.getModel();
       if(this.namedModel) {
           this.oModel = this.oView.getModel(this.namedModel);
       }
       
       var viewDataRef = this.oModel.getContext("/"+this.oContext).getObject();
       this.oData = [];
       this.oBackupData = [];
       jQuery.extend(true, this.oData, viewDataRef);
       jQuery.extend(true, this.oBackupData, viewDataRef);
       this.iLength = this.oData.length;
       if(this.oParam.filter) {
           this.iLength = this._getArrayIndex(this.oData.length-1) + 1;
       }
       this.oTempModel = new sap.ui.model.json.JSONModel({data : this.oData});
       this._initializeDialogView();
       this.oDialog.setModel(this.oTempModel);
       if(this.oParam.filter) {
           this.oList.getBinding("items").filter(new sap.ui.model.Filter(this.oParam.filter.property,sap.ui.model.FilterOperator.EQ,this.oParam.filter.value));
       }
   },
   _getArrayIndex : function(sIndex) {
       var aIndex = -1;
       for(var i=0;i<=sIndex;i++) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               aIndex++;
           }
       }
       return aIndex;
   },
   handleListSelection : function(oEvent) {
       if(this.iLength > 1) {
           this._oSelectedItemIndex = +((oEvent.getParameter("listItem").getBindingContext().getPath()).split('/').pop());
           var sIndex = this._oSelectedItemIndex;
           if(this.oParam.filter) {
               sIndex = this._getArrayIndex(this._oSelectedItemIndex);
           }
           this.setSelectedIndex(sIndex);
       }
   },
   setSelectedIndex : function(sIndex, bChangeListSelection) {
       this.selectedIndex = sIndex;
       if(this.selectedIndex == 0) {
           this.moveDownButton.setEnabled(true);
           this.moveUpButton.setEnabled(false);
       } else if(this.selectedIndex > 0 && this.selectedIndex < this.iLength-1) {
           this.moveDownButton.setEnabled(true);
           this.moveUpButton.setEnabled(true);
       } else if(this.selectedIndex == this.iLength -1) {
           this.moveDownButton.setEnabled(false);
           this.moveUpButton.setEnabled(true);
       } else {
           jQuery.sap.log.error("Invalid Selected Index");
       }
       if(bChangeListSelection) {
           this.oList.setSelectedItem(this.oList.getItems()[this.selectedIndex], true);
       }
   },
   _getPreviousIndex : function(sIndex) {
       var rIndex = -1;
       for(var i=0;i<sIndex;i++) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               rIndex = i;
           }
       }
       return rIndex;
   },
   _getNextIndex : function(sIndex) {
       var rIndex = -1;
       for(var i=this.oData.length-1;i>sIndex;i--) {
           var eachRecord = this.oData[i];
           if(eachRecord[this.oParam.filter.property] == this.oParam.filter.value) {
               rIndex = i;
           }
       }
       return rIndex;
   },
   moveItemUp : function() {
       var temp = this.oData[this._oSelectedItemIndex];
       var previousIndex = this._oSelectedItemIndex -1;
       if(this.oParam.filter) {
           previousIndex = this._getPreviousIndex(this._oSelectedItemIndex);
       }
       this.oData[this._oSelectedItemIndex] = this.oData[previousIndex];
       this.oData[previousIndex] = temp;
       this.oTempModel.updateBindings();
       this.setSelectedIndex(this.selectedIndex-1, true);
       this.CHANGE_STATE = true;
       this._oSelectedItemIndex = previousIndex;
   },
   moveItemDown : function() {
       var temp = this.oData[this._oSelectedItemIndex];
       var nextIndex = this._oSelectedItemIndex + 1;
       if(this.oParam.filter) {
           nextIndex = this._getNextIndex(this._oSelectedItemIndex);
       }
       this.oData[this._oSelectedItemIndex] = this.oData[nextIndex];
       this.oData[nextIndex] = temp;
       this.oTempModel.updateBindings();
       this.setSelectedIndex(this.selectedIndex+1, true);
       this.CHANGE_STATE = true;
       this._oSelectedItemIndex = nextIndex;
   },
   resetEverything : function() {
       if(this.CHANGE_STATE) {
           this.oData = [];
           jQuery.extend(true, this.oData, this.oBackupData);
           this.oList.removeSelections();
           this.oTempModel = new sap.ui.model.json.JSONModel({data : this.oData});
           this.oDialog.setModel(this.oTempModel);
           this.oTempModel.updateBindings();
           if(this.oParam.filter) {
               this.oList.getBinding("items").filter(new sap.ui.model.Filter(this.oParam.filter.property,sap.ui.model.FilterOperator.EQ,this.oParam.filter.value));
           }
           this.moveDownButton.setEnabled(false);
           this.moveUpButton.setEnabled(false);
           this.CHANGE_STATE = false;
       }
   },
   _initializeDialogView : function() {
	
       var that = this;
       this.oList = new sap.m.List({
           mode : "SingleSelectMaster",
           selectionChange : jQuery.proxy(this.handleListSelection, this)
       }).bindAggregation("items", "/data", new sap.m.StandardListItem({
           title : {
               path : this.oParam.listItemContext
           }
       }));
       this.moveUpButton = new sap.m.Button({
           icon :"sap-icon://arrow-top",
           enabled : false,
           press : function() {
               that.moveItemUp();
           }
       });
       this.moveDownButton = new sap.m.Button({
           icon : "sap-icon://arrow-bottom",
           enabled : false,
           press : function() {
               that.moveItemDown();
           }
       });
       this.undoButton = new sap.m.Button({
           icon : "sap-icon://undo",
           press : function() {
               that.resetEverything();
           }
       });
       this.oDialog =  new sap.m.Dialog({
           title : this.oParam.title || "Change Order of List Item",
           content :[
                     this.oList,
                     new sap.m.Bar({
                         design : "Header",
                         contentLeft : [
                                        this.moveUpButton,
                                        this.moveDownButton
                         ],
                         contentRight : [
                                         this.undoButton
                         ]
                     })
           ],
           beginButton : new sap.m.Button({
               text : this.oView.getModel("i18n").getProperty("OK"),
               press : jQuery.proxy(this.okDialog,this)
           }),
           endButton : new sap.m.Button({
               text : this.oView.getModel("i18n").getProperty("CANCEL"),
               press : jQuery.proxy(this.closeDialog,this)
           })
       });
   },
   start : function() {
       this.oDialog.open();
   },
   closeDialog : function() {
       this.oDialog.close();
   },
   okDialog : function() {
       if(this.CHANGE_STATE) {
           this.oModel.getData()[this.oContext] = this.oData;
           this.oModel.updateBindings();
       }
       this.oDialog.close();
       if(this.oParam.callback) {
           this.oParam.callback.call(null);
       }
   }
};
}; // end of sap/suite/ui/smartbusiness/lib/ListPersona.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.ModelerServices') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.ModelerServices");
sap.suite.ui.smartbusiness.lib.ModelerServices = {
		getKPIById : function(oParam) {},
		getEvaluationById : function(oParam) {},
		getChipById : function(oParam) {},
		getDataByEntity : function(oParam) {},
		getDataByBatch : function(oParam) {}
};
sap.suite.ui.smartbusiness.lib.ModelerServices.hasAdapter = true;
}; // end of sap/suite/ui/smartbusiness/lib/ModelerServices.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Navigation') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Navigation");
sap.suite.ui.smartbusiness.lib.Navigation = {
	getLinksBySemanticObject : function(oParam) {},
	getLinksByContext : function(oParam) {},
	reset : function() {}
};
sap.suite.ui.smartbusiness.lib.Navigation.hasAdapter = true;
}; // end of sap/suite/ui/smartbusiness/lib/Navigation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.OData') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.OData");
sap.suite.ui.smartbusiness.lib.OData = (function() {
    var modelCache  = {};
    var cacheO4Analytics ={};
    function getOD4AObject(oModel) {
    	if(oModel && oModel.sServiceUrl) {
    		if(cacheO4Analytics[oModel.sServiceUrl]) {
    			return cacheO4Analytics[oModel.sServiceUrl];
    		}
    	}
        var O4A = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oModel));
        if(oModel && oModel.sServiceUrl) {
        	cacheO4Analytics[oModel.sServiceUrl] = O4A;
        }
        return O4A;
    };
    return {
        getModelByServiceUri : function(sServiceUri,useCache) {
        	// temp fix
        	var modelerRef = new sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
        	sServiceUri = modelerRef.addSystemToServiceUrl(sServiceUri);
            if(typeof sServiceUri == 'string') {
                if(!modelCache[sServiceUri]) {
                    var oModel = new sap.ui.model.odata.ODataModel(sServiceUri,true);
                    modelCache[sServiceUri] = oModel;
                }
                return modelCache[sServiceUri];
            }
            return sServiceUri;
        },
        getUri : function(params) {
            /*
             * params will be an object
             * { 
             *    oDataModel : "String Relative Uri" OR sap.ui.model.odata.ODataModel Object,
             *    serviceUri : "string"
             *    entitySet : "string",
             *    filter : [] //array of {NAME : 'x', VALUE_1 : 'val', VALUE_2 : 'val2', OPERATOR : 'BT/EQ', TYPE:'FI/PA'}
             *    dimension : ["A","B"] OR "A" OR "A,B"
             *    measure :   array of String OR one String OR comma separated String
             *    dataLimit : intervalue value to limit number of records;
             *    includeDimensionKeyTextAttribute : true/false, default true
             *    includeMeasureRawFormattedValueUnit : true/false, default True,
             *    sort : [{name:'DIm1',order:'asc'},{name:'Msr2',order:desc}]
             * } 
             */
        	
            function _replaceSingleQuoteWithDoubleSingleQuote(str) {
            	if(str && str.replace){
            		str=str.replace(/'/g,"''");
            	}
                return str;
            }
            function getExplicitMeasuresToBeAdded(aSort,aMsr){
            /* Measures present in sort*/
            	var aReturn=[];
            	if(aSort && aSort.length){
                	aSort.forEach(function(oSort){
                		if(aMsr.indexOf(oSort.name)!=-1){
                			aReturn.push(oSort.name);
                		}
                	});
            	}
            	return aReturn;
            }
            
            function getExplicitDimensionsToBeAdded(aSort,aMapping){
            	/*
            	 * In sort either the dimension or text property can be present.
            	 * This function returns an array of dimensions related to dimension/textproperty
            	 * */
            	var aReturnDims=[];
            	if(aSort && aSort.length){
                	aSort.forEach(function(oSort){
                		if(aMapping[oSort.name]){
                			aReturnDims.push(aMapping[oSort.name]);
                		}
                	});
            	}
            	return aReturnDims;
            }
            
            try {
                var O4A = getOD4AObject(this.getModelByServiceUri(params.oDataModel || params.serviceUri));
                var oQueryResult = O4A.findQueryResultByName(params.entitySet);
                var oQueryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(oQueryResult);
                
                /* Adding Measures */
                var measures = params.measure;
                if(measures) {
                    if(typeof measures == 'string') {
                        measures = measures.split(",");
                    }
                    var allMeasures=this.getAllMeasures(params.serviceUri,params.entitySet);
                    oQueryResultRequest.setMeasures(measures.concat(getExplicitMeasuresToBeAdded(params.sort,allMeasures)));
                    if(typeof params.includeMeasureRawFormattedValueUnit == 'undefined') {
                        params.includeMeasureRawFormattedValueUnit = true;
                    }
                    if(params.includeMeasureRawFormattedValueUnit) {
                        oQueryResultRequest.includeMeasureRawFormattedValueUnit(null, true, true, true);
                    }
                }
                
                /* Adding Dimensions*/
                var dimensions = params.dimension||[];
                if(dimensions) {
                    if(typeof dimensions == 'string') {
                        dimensions = dimensions.split(",");
                    }
                    /*
                     *adding the sortby dimensions to select 
                     */
                    var propertyToDimensionMap=this.getPropertyToDimensionMap(O4A.getODataModel().sServiceUrl,params.entitySet);

                    oQueryResultRequest.addToAggregationLevel(dimensions.concat(getExplicitDimensionsToBeAdded(params.sort,propertyToDimensionMap)));
                    if(typeof params.includeDimensionKeyTextAttribute == 'undefined') {
                        params.includeDimensionKeyTextAttribute = true;
                    }
                    if(params.includeDimensionKeyTextAttribute) {
                        oQueryResultRequest.includeDimensionKeyTextAttributes(null, true, true, null);
                    }
                }
                /*
                 * adding orderby
                 * */
                var sortExpression = oQueryResultRequest.getSortExpression();
                sortExpression.clear();//clearing previous sort conditions
                var sortEntry={};//to keep track of sorts already added, so that only unique sorts are added
                if(params.sort && params.sort.length) {
                	params.sort.forEach(function(oSort){
                		if(!sortEntry[oSort.name]){
                			sortExpression.addSorter( oSort.name,oSort.order);
                			sortEntry[oSort.name]=true;
                		}
                	});
                }
                

                /*Adding Input Params And Filters*/
                if(params.filter && params.filter.length) {
                    var variants = params.filter;
                    var filterVariants = new Array();
                    var inputParamsVariants = new Array();
                    for(var i=0, l = variants.length; i<l; i++) {
                        var each = variants[i];
                        if(each.VALUE_1=="SAP_SMARTBUSINESS_NULL")
                        	continue;
                        if(each.TYPE === "PA") {
                            inputParamsVariants.push(each);
                        } else if(each.TYPE === "FI") {
                            filterVariants.push(each);
                        }
                    }
                    function changeToYYYYMMDDHHMMSS(odate){ 
                        var dateStr = odate.toJSON();
                        var lastChar = dateStr.charAt(dateStr.length-1).toUpperCase();
                        if(lastChar.charCodeAt(0) >= 65 && lastChar.charCodeAt(0) <= 90) {
                            dateStr = dateStr.slice(0,-1);
                        }
                        return dateStr;
                    }
                    function _processODataDateTime(junkValue) {
                        if(junkValue) {
                            try {
                                if(junkValue == +junkValue) {
                                    junkValue = window.parseInt(junkValue);
                                }
                                var date = new Date(junkValue);
                                var time = date.getTime();
                                if(isNaN(time)) {
                                    return junkValue;
                                } else {
                                    return changeToYYYYMMDDHHMMSS(date);
                                }
                            }catch(e) {

                            }
                        }
                        return junkValue;
                    }
                    if(filterVariants.length) {
                        var oFilterExpression = oQueryResultRequest.getFilterExpression();
                        for(var i=0, l=filterVariants.length; i<l; i++) {
                            var each = filterVariants[i];
                            if(this.getEdmType(params.serviceUri, each.NAME) == "Edm.DateTime") {
                                each.VALUE_1 = _processODataDateTime(each.VALUE_1);
                                each.VALUE_2 = _processODataDateTime(each.VALUE_2);
                            }
                            each.VALUE1=(each.VALUE_1 && each.VALUE_1.replace)?each.VALUE_1.replace(/\|\^/g,","):each.VALUE_1;
                            if(each.OPERATOR == sap.ui.model.FilterOperator.BT) {
                                oFilterExpression.addCondition(each.NAME,each.OPERATOR,_replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1),each.VALUE_2);
                            } else {
                                oFilterExpression.addCondition(each.NAME, each.OPERATOR, _replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1), null);
                            }

                        }
                    }
                    if(inputParamsVariants.length) {
                    	if (oQueryResult.getParameterization()) {
                            var oParamRequest = new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(oQueryResult.getParameterization());
                            var paramererizationObj = oQueryResult.getParameterization();
                            var eachInputParam, findParameter, peerInterval, fromVal,toVal,toValParam ; 
                            for (var y = 0, z = inputParamsVariants.length; y < z; y++) {
                                eachInputParam = inputParamsVariants[y];
                                findParameter = paramererizationObj.findParameterByName(eachInputParam.filterPropertyName);
                                                       if(findParameter.isIntervalBoundary() === true && findParameter.isLowerIntervalBoundary() === true){
                                                              peerInterval = findParameter.getPeerIntervalBoundaryParameter();
                                                              toValParam = peerInterval.getPeerIntervalBoundaryParameter();
                                                              for(var i = 0, l = inputParamsVariants.length; i < l; i++) {
                                                                     if(inputParamsVariants[i].filterPropertyName === toValParam) {
                                                                           toVal = _replaceSingleQuoteWithDoubleSingleQuote(inputParamsVariants[i].value);
                                                                           break;
                                                                     }
                                                              }
                                                              fromVal = _replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.value);
                                                              if(toVal) {
                                                                     oParamRequest.setParameterValue(eachInputParam.filterPropertyName,fromVal,toVal);
                                                              }
                                                              else {
                                                                     //Handle error case Boundary Value not found
                                                              }
                                                       }
                                                       else if(findParameter.isIntervalBoundary()===true && findParameter.isLowerIntervalBoundary() === false) {
                                                              // Do nothing for upper Boundary
                                                       }
                                                       else{
                                                              oParamRequest.setParameterValue(eachInputParam.filterPropertyName,_replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.value));
                                                       }
                            }
                            oQueryResultRequest.setParameterizationRequest(oParamRequest);
                        }
                    }
                }
                var finalUri = oQueryResultRequest.getURIToQueryResultEntries();
                if(params.dataLimit) {
                    finalUri = finalUri + "&$top="+params.dataLimit;
                }
                return {uri : finalUri, model: O4A.getODataModel()};
            } catch(e) {
                jQuery.sap.log.error("Error Preparing Query Service Uri using OData4Analytics Library : "+e.toString());
                return null;
            }
        },
        getEdmType : function(sUri, propertyName,displayFormatRequired) {
        	function _getDisplayFormat(prop){
        		var format="None";
        		var extensions=prop.extensions||[];
        		for(var i=0;i<extensions.length;i++){
        			if(extensions[i].name=="display-format"){
        				format=extensions[i].value.toUpperCase();
        				break;
        			}
        		}
        		return format;
        	}
            var oDataModel = null;
            var returnValue=null;
            if(sUri instanceof sap.ui.model.odata.ODataModel) {
                oDataModel = sUri;
            } else  {
                oDataModel = this.getModelByServiceUri(sUri);
            }
            if(oDataModel && oDataModel.getServiceMetadata()) {
                var serviceMetaData = oDataModel.getServiceMetadata();
                var entitySets = serviceMetaData.dataServices.schema[0].entityType;
                if(entitySets) {
                    for(var i = 0; i<entitySets.length;i++) {
                        var entity = entitySets[i];
                        var properties = entity.property;
                        for(var j=0;j<properties.length;j++) {
                            var property=  properties[j];
                            if(property.name == propertyName) {
                            	if(displayFormatRequired){
                            		returnValue={type:property.type,format:_getDisplayFormat(property)};
                            	}else{
                            		returnValue=property.type;
                            	}
                            }
                        }
                    }
                }
            }
            return returnValue;
        },
        getAllEntitySet : function(sUri) {
            var entitySets = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                entitySets = o4a.getAllQueryResultNames();
            } catch(e) {
                jQuery.sap.log.error("Error fetching Enity Set : "+e.toString());
            }
            return entitySets;

        },
        measures : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var measureNames = queryResult.getAllMeasureNames();
            return  {
              getAsStringArray : function() {
                  return measureNames;
              },
              getAsObjectArray : function(sKey) {
                  sKey = sKey || "name";
                  var measures = [];
                  measureNames.forEach(function(sMeasure){
                      var obj = {};
                      obj[sKey] = sMeasure;
                      measures.push(obj);
                  });
                  return measures;
              },
              getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                  sOriginalKey = sOriginalKey || "name";
                  sLabelKey = sLabelKey || "label";
                  var measures = [];
                  measureNames.forEach(function(sMeasure){
                      var oMeasure = queryResult.findMeasureByName(sMeasure);
                      var obj = {};
                      obj[sOriginalKey] = sMeasure;
                      obj[sLabelKey] = oMeasure.getLabelText() || sMeasure;
                      measures.push(obj);
                  });
                  return measures;
              },
              getUnitProperty : function(measureName) {
                  var oMeasure = queryResult.findMeasureByName(measureName);
                  if(oMeasure.getUnitProperty()) {
                      return oMeasure.getUnitProperty().name;
                  }
                  return null;
              }
            };
        },
        properties : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            var measureNames = queryResult.getAllMeasureNames();
            return {
                getLabelMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                mapping[property] = oDimension.getLabelText() || property;
                            } catch(e) {
                                var oMeasure = queryResult.findMeasureByName(property);
                                mapping[property] = oMeasure.getLabelText() || property;
                            }
                        });
                        return mapping;
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            mapping[sDimension] = oDimension.getLabelText() || sDimension;
                        });
                        measureNames.forEach(function(sMeasure){
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            mapping[sMeasure] = oMeasure.getLabelText() || sMeasure;
                        });
                        return mapping;
                    }
                },
                getTextPropertyMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                if(oDimension.getTextProperty()) {
                                    mapping[property] = oDimension.getTextProperty().name || property;
                                } else {
                                    mapping[property] = property;
                                }
                            } catch(e) {
                                jQuery.sap.log.error("Invalid Dimension Name : "+property);
                            }
                        });
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            if(oDimension.getTextProperty()) {
                                mapping[sDimension] = oDimension.getTextProperty().name || sDimension;
                            } else {
                                mapping[sDimension] = sDimension;
                            }
                        });
                        measureNames.forEach(function(sMeasure) {
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            if(oMeasure.getFormattedValueProperty && oMeasure.getFormattedValueProperty()) {
                                mapping[sMeasure] = oMeasure.getFormattedValueProperty().name;
                            } else {
                                mapping[sMeasure] = null;
                            }
                        });
                    }
                    return mapping;
                },
                getUnitPropertyMappingObject : function() {
                    var mapping = {};
                    measureNames.forEach(function(sMeasure) {
                       var oMeasure = queryResult.findMeasureByName(sMeasure);
                       if(oMeasure.getUnitProperty()) {
                           mapping[sMeasure] = oMeasure.getUnitProperty().name;
                       } else {
                           mapping[sMeasure] = null;
                       }
                    });
                    return mapping;
                }                
            };
        },
        dimensions : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            var oDimensions = queryResult.getAllDimensions();
            return {
            	all : function() {
            		return oDimensions;
            	},
                getAsStringArray : function() {
                    var entityType= queryResult.getEntityType();
                    return dimensionNames;
                },
                getAsObjectArray : function(sKey) {
                    sKey = sKey || "name";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var obj = {};
                        obj[sKey] = sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                    sOriginalKey = sOriginalKey || "name";
                    sLabelKey = sLabelKey || "label";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var oDimension = queryResult.findDimensionByName(sDimension);
                        var obj = {};
                        obj[sOriginalKey] = sDimension;
                        obj[sLabelKey] = oDimension.getLabelText() || sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getTextProperty : function(dimensionName) {
                    var oDimension = queryResult.findDimensionByName(dimensionName);
                    if(oDimension.getTextProperty()) {
                        return oDimension.getTextProperty().name;
                    }
                    return null;
                }
            }
        },
        filter : function(sUri, sEntitySet) {
        	var dimensions = this.dimensions(sUri, sEntitySet).all();
        	var oDimension;
        	return  {
        		getAsArray : function() {
        			var aReturnValue = [];
        			for(sDimension in dimensions) {
        				var oDimension = dimensions[sDimension]; 
    					var tempObject = {};
    					tempObject.name = sDimension;
        				oDimension._oProperty.extensions.forEach(function(oExtension) {
        					tempObject[oExtension.name] = oExtension.value;
        				});
						aReturnValue.push(tempObject);
        			}
        			return aReturnValue;
        		},
        		getAsObject : function() {
        			return dimensions;
        		},
        		getMandatoryList : function() {
        			var aReturnValue = [];
        			for(sDimension in dimensions) {
        				var oDimension = dimensions[sDimension]; 
        				oDimension._oProperty.extensions.forEach(function(oExtension) {
        					if(oExtension.name === "required-in-filter" && oExtension.value == "true") {
        						aReturnValue.push(sDimension);
        					}
        				});
        			}
        			return aReturnValue;
        		}
        	};
        },
        getAllMeasures : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                measures = queryResult.getAllMeasureNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        getAllMeasuresWithLabelText : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var measureNames = queryResult.getAllMeasureNames();
                for(var i=0; i<measureNames.length; i++) {
                    var each = measureNames[i];
                    var oMeasure = queryResult.findMeasureByName(each);
                    measures.push({
                        key : each,
                        value : oMeasure.getLabelText()
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        isTimeZoneIndependent:function(sUri,entitySet){
        	var isTimeZoneInDependent=false;
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                var allProperties=entityType._oPropertySet;
                for(var each in allProperties){
                	if(each.match(/TimeZone$/gi)){
                		isTimeZoneInDependent=true;
                		//break;
                	}
                }
            } catch(e) {
                jQuery.sap.log.error("TimeZone dependency check failed : "+e.toString());
            }
            return isTimeZoneInDependent;
        },
        getAllFilterables : function(sUri, entitySet) {
            var aFilterablePropertyNames = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aFilterablePropertyNames = entityType.getFilterablePropertyNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Filterable dimensions : "+e.toString());
            }
            return aFilterablePropertyNames;
        },
        getSortableProperties:function(sUri,entitySet){
            var aSortableProperties = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aSortableProperties = entityType.getSortablePropertyNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Sortable dimensions : "+e.toString());
            }
            return aSortableProperties;
        },
        getPropertyToDimensionMap:function(sUri,entitySet){
        	var propertyToDimensionMap={};
        	var dimensions = this.getAllDimensionsWithProperty(sUri, entitySet);
        	var curDimName;
        	var curTextProperty;
        	for(var curDimName in dimensions){
        		propertyToDimensionMap[curDimName]=curDimName;
        		if((curTextProperty=dimensions[curDimName].getTextProperty())){
        			propertyToDimensionMap[curTextProperty.name]=curDimName;
        		}
        	}
            return propertyToDimensionMap;
        },
        getAllDimensions:function(sUri,entitySet){
            var dimensions = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                dimensions = queryResult.getAllDimensionNames()||[];
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        
        },
        getAllFilterableDimensions : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = new Array();
                while( ai < array1.length && bi < array2.length ){
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result.push(array1[ai]);
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            var dimensions = this.getAllDimensions(sUri, entitySet);
            var aFilterablePropertyNames = this.getAllFilterables(sUri, entitySet);
            return intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
        },
        getAllFilterableDimensionsWithProperty : function(sUri, entitySet) {
        	function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = {};
                while( ai < array1.length && bi < array2.length )
                {
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result[array1[ai]] = dimensionsObject[array1[ai]];
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            try {
            	var aResult={};
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensions = queryResult.getAllDimensionNames()||[];
                var dimensionsObject = queryResult.getAllDimensions() || {};
                var aFilterablePropertyNames = this.getAllFilterables(sUri, entitySet);
                aResult= intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return aResult;
        },
        getAllDimensionsWithProperty : function(sUri, entitySet) {
            try {
            	var aResult={};
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var aResult = queryResult.getAllDimensions() || {};
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return aResult;
        },
        getAllDimensionsWithLabelText : function(sUri, entitySet) {
            var dimensions = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensionNames = queryResult.getAllDimensionNames();
                for(var i=0; i<dimensionNames.length ;i++) {
                    var each = dimensionNames[i];
                    var oDimension = queryResult.findDimensionByName(each);
                    var textProperty = null;
                    if(oDimension.getTextProperty() != null)textProperty = oDimension.getTextProperty().name;
                    dimensions.push({
                        key : each,
                        value : oDimension.getLabelText(),
                        textProperty: textProperty
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllInputParams : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    inputParams = oParams.getAllParameterNames();
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
           }
            return inputParams;
        },
        getAllInputParamsWithFlag : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    var inputParamsArray = oParams.getAllParameterNames();
                    for(var i=0; i<inputParamsArray.length; i++) {
                        var each = inputParamsArray[i];
                        var paramObject  = oParams.findParameterByName(each);
                        inputParams.push({
                            name : each,
                            optional : paramObject.isOptional()
                        });
                    }
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },
        formatOdataEdmTimeToString : function (value){
            if(value && value.constructor.name == "Object"){
                if(value.__edmType=="Edm.Time"){
                    var milliseconds = value.ms;
                    var seconds = Math.floor((milliseconds / 1000) % 60 );
                    var minutes = Math.floor((milliseconds / 60000) % 60);
                    var hours   = Math.floor((milliseconds / 3600000) % 24);
                    return hours+"H"+minutes+"M"+seconds+"S";
                }
            }
            return value;
        },
        formatValue : function (val,scaleFactor,precision,MAX_LEN) {            
            MAX_LEN= MAX_LEN || 4;
            var unit={3:"K",6:"M",9:"B",12:"T",0:""};
            var temp,pre,suff;
            temp=Number(val).toPrecision(MAX_LEN);
            pre=Number(temp.split("e")[0]);
            suff=Number(temp.split("e")[1])||0;
            if(!val && val!=0)
                return {value:"",unitPrefix:""};

                if(suff%3!=0){
                    if(suff%3==2){
                        if(suff+1==scaleFactor){
                            suff=suff+1;
                            pre=pre/10;
                        }
                        else{
                            suff=suff-2;
                            pre=pre*100;
                        }
                    }
                    else{
                        if(suff+2==scaleFactor){
                            suff=suff+2;
                            pre=pre/100;

                        }
                        else{
                            suff--;
                            pre=pre*10;
                        }
                    }
                }

                else if(suff==15){
                    pre=pre*1000;
                    suff=12;
                }
                pre+="";

                if((pre).indexOf(".")<MAX_LEN){
                    pre=Number(pre).toPrecision(MAX_LEN);
                    var currPrec=pre.split(".")[1]?pre.split(".")[1].length:0;
                    if((precision || precision==0)&& precision<currPrec){
                        pre=Number(pre).toFixed(precision);
                    }


                }
                else
                    pre=Number(pre).toPrecision(MAX_LEN);
                return {value:Number(pre),unitPrefix:unit[suff]};
                },
                
                
                
                getFormattingMetadata: function(sUri, entitySet, propertyName) {
                 	
                	var formattingMetadata = {};
	               	 formattingMetadata._hasCurrency = false;
	               	 formattingMetadata._hasSapText = false;
	               	 
	               	 var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
	                    var queryResult = o4a.findQueryResultByName(entitySet);
	                    
	                    var measures = queryResult.getAllMeasures();
	                    
	                    if (measures[propertyName] ) {
	                    	
	                    	var sapTextPropertyName = (measures[propertyName]._oTextProperty && measures[propertyName]._oTextProperty.name) ? 
	                                 measures[propertyName]._oTextProperty.name : "";
	                                 
	                    	if (sapTextPropertyName != "") {
	                    		formattingMetadata._hasSapText = true;
	                    		formattingMetadata._sapTextColumn = sapTextPropertyName;
							}
	                    	else if(measures[propertyName].hasOwnProperty("_oUnitProperty")){
	                    		var extensions = measures[propertyName]._oUnitProperty.extensions;
			       				for (var i = 0; i < measures[propertyName]._oUnitProperty.extensions.length; i++) {
			       					if (extensions[i].name === "semantics" && extensions[i].value === "currency-code") {
			       						formattingMetadata._hasCurrency = true;
			       						formattingMetadata._currencyColumn =  measures[propertyName]._oUnitProperty.name;
			       					}
			       				}
	                    	}
		                   	
				       	}
	                    
                   return formattingMetadata; 
                       }

    };
})();

}; // end of sap/suite/ui/smartbusiness/lib/OData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.RuntimeServices') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.RuntimeServices");
sap.suite.ui.smartbusiness.lib.RuntimeServices = {
		getKPIById : function(oParam) {},
		getEvaluationById : function(oParam) {},
		getChipById : function(oParam) {},
		getDataByEntity : function(oParam) {}
};
sap.suite.ui.smartbusiness.lib.RuntimeServices.hasAdapter = true;
}; // end of sap/suite/ui/smartbusiness/lib/RuntimeServices.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Util') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Util");
jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.suite.ui.smartbusiness.lib.Util = sap.suite.ui.smartbusiness.lib.Util || {};
sap.suite.ui.smartbusiness.lib.Util.odata = (function() {
    var modelCache  = {};
    var cacheO4Analytics ={};
    function getOD4AObject(oModel) {
        if(oModel && oModel.sServiceUrl) {
            if(cacheO4Analytics[oModel.sServiceUrl]) {
                return cacheO4Analytics[oModel.sServiceUrl];
            }
        }
        var O4A = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oModel));
        if(oModel && oModel.sServiceUrl) {
            cacheO4Analytics[oModel.sServiceUrl] = O4A;
        }
        return O4A;
    };
    return {
    	getModelByServiceUri : function(sServiceUri,callback) {
            var oModel;
             var tileComponentCache;
             var sServiceUriWithSysteInfo;
             var modelerRef = new sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
             var odataPropObj = {};
             sServiceUri = sServiceUri.replace(/;(.)*$/gi,""); // sometimes tile cache is set without system info in the url. to check for both the cases
             sServiceUriWithSysteInfo = modelerRef.addSystemToServiceUrl(sServiceUri);
             try{ // if app is launched through tile, then use the metadata from the tile component cache
                 tileComponentCache = sap.ushell.components.tiles.indicatorTileUtils.util;
                 // check for the model in the ushell tiles metadata cache
                 if((oModel = (tileComponentCache.getODataModelByServiceUri(sServiceUri) || tileComponentCache.getODataModelByServiceUri(sServiceUriWithSysteInfo)))){
                     if(oModel) {
                     if(callback) {
                            callback(oModel);
                         }
                     } else {
                     // check for the model in the drilldown metadata cache
                     if(modelCache[sServiceUri]) {
                            if(callback) {
                                   callback(modelCache[sServiceUri]);
                             }
                            oModel = modelCache[sServiceUri]
                     } else {
                            if(callback) {
                                   odataPropObj = {
                                          json : true,
                                          loadMetadataAsync : true
                                     };
                            } else {
                                   odataPropObj = true;
                            }
                            // create the model async and on metadata load update cache
                            oModel = new sap.ui.model.odata.ODataModel(sServiceUri, odataPropObj);
                            modelCache[sServiceUri] = oModel;
                            if(callback) {
                                   modelCache[sServiceUri].attachMetadataLoaded(function(oModel){
                                   if(callback) {
                                          callback(oModel);
                                   }
                                 });
                            } 
                      }
                     }
                     return oModel;
                 }    
             }catch(e){
                 if(typeof sServiceUri == 'string') {
                      if(modelCache[sServiceUri]) {
                            if(callback) {
                            callback(modelCache[sServiceUri]);
                         }
                            oModel = modelCache[sServiceUri]
                      } else {
                            if(callback) {
                                   odataPropObj = {
                                   json : true,
                                   loadMetadataAsync : true
                                 };
                            } else {
                                   odataPropObj = true;
                            }
                            // create the model async and on metadata load update cache
                            oModel = new sap.ui.model.odata.ODataModel(sServiceUri, odataPropObj);
                            modelCache[sServiceUri] = oModel;
                            if(callback) {
                                   modelCache[sServiceUri].attachMetadataLoaded(function(){
                                   if(callback) {
                                          callback(modelCache[sServiceUri]);
                                   }
                             });
                            } 
                      }
                      return oModel;
                 }
                 return sServiceUri;
             }
         },

        getUri : function(params) {
            /*
             * params will be an object
             * { 
             *    oDataModel : "String Relative Uri" OR sap.ui.model.odata.ODataModel Object,
             *    serviceUri : "string"
             *    entitySet : "string",
             *    filter : [] //array of {NAME : 'x', VALUE_1 : 'val', VALUE_2 : 'val2', OPERATOR : 'BT/EQ', TYPE:'FI/PA'}
             *    dimension : ["A","B"] OR "A" OR "A,B"
             *    measure :   array of String OR one String OR comma separated String
             *    dataLimit : intervalue value to limit number of records;
             *    includeDimensionKeyTextAttribute : true/false, default true
             *    includeMeasureRawFormattedValueUnit : true/false, default True,
             *    sort : [{name:'DIm1',order:'asc'},{name:'Msr2',order:desc}]
             * } 
             */

            function _replaceSingleQuoteWithDoubleSingleQuote(str) {
                if(str && str.replace){
                    str=str.replace(/'/g,"''");
                }
                return str;
            }
            function getExplicitMeasuresToBeAdded(aSort,aMsr){
                /* Measures present in sort*/
                var aReturn=[];
                if(aSort && aSort.length){
                    aSort.forEach(function(oSort){
                        if(aMsr.indexOf(oSort.name)!=-1){
                            aReturn.push(oSort.name);
                        }
                    });
                }
                return aReturn;
            }

            function getExplicitDimensionsToBeAdded(aSort,aMapping){
                /*
                 * In sort either the dimension or text property can be present.
                 * This function returns an array of dimensions related to dimension/textproperty
                 * */
                var aReturnDims=[];
                if(aSort && aSort.length){
                    aSort.forEach(function(oSort){
                        if(aMapping[oSort.name]){
                            aReturnDims.push(aMapping[oSort.name]);
                        }
                    });
                }
                return aReturnDims;
            }

            try {
                var O4A = getOD4AObject(this.getModelByServiceUri(params.oDataModel || params.serviceUri));
                var oQueryResult = O4A.findQueryResultByName(params.entitySet);
                var oQueryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(oQueryResult);

                /* Adding Measures */
                var measures = params.measure;
                if(measures) {
                    if(typeof measures == 'string') {
                        measures = measures.split(",");
                    }
                    var allMeasures=this.getAllMeasures(params.serviceUri,params.entitySet);
                    oQueryResultRequest.setMeasures(measures.concat(getExplicitMeasuresToBeAdded(params.sort,allMeasures)));
                    if(typeof params.includeMeasureRawFormattedValueUnit == 'undefined') {
                        params.includeMeasureRawFormattedValueUnit = true;
                    }
                    if(params.includeMeasureRawFormattedValueUnit) {
                        oQueryResultRequest.includeMeasureRawFormattedValueUnit(null, true, true, true);
                    }
                }

                /* Adding Dimensions*/
                var dimensions = params.dimension||[];
                if(dimensions) {
                    if(typeof dimensions == 'string') {
                        dimensions = dimensions.split(",");
                    }
                    /*
                     *adding the sortby dimensions to select 
                     */
                    var propertyToDimensionMap=this.getPropertyToDimensionMap(O4A.getODataModel().sServiceUrl,params.entitySet);

                    oQueryResultRequest.addToAggregationLevel(dimensions.concat(getExplicitDimensionsToBeAdded(params.sort,propertyToDimensionMap)));
                    if(typeof params.includeDimensionKeyTextAttribute == 'undefined') {
                        params.includeDimensionKeyTextAttribute = true;
                    }
                    if(params.includeDimensionKeyTextAttribute) {
                        oQueryResultRequest.includeDimensionKeyTextAttributes(null, true, true, null);
                    }
                }
                /*
                 * adding orderby
                 * */
                var sortExpression = oQueryResultRequest.getSortExpression();
                sortExpression.clear();//clearing previous sort conditions
                var sortEntry={};//to keep track of sorts already added, so that only unique sorts are added
                if(params.sort && params.sort.length) {
                    params.sort.forEach(function(oSort){
                        if(!sortEntry[oSort.name]){
                            sortExpression.addSorter( oSort.name,oSort.order);
                            sortEntry[oSort.name]=true;
                        }
                    });
                }


                /*Adding Input Params And Filters*/
                if(params.filter && params.filter.length) {
                    var variants = params.filter;
                    var filterVariants = new Array();
                    var inputParamsVariants = new Array();
                    for(var i=0, l = variants.length; i<l; i++) {
                        var each = variants[i];
                        if(each.VALUE_1=="SAP_SMARTBUSINESS_NULL")
                            continue;
                        if(each.TYPE === "PA") {
                            inputParamsVariants.push(each);
                        } else if(each.TYPE === "FI") {
                            filterVariants.push(each);
                        }
                    }
                    function changeToYYYYMMDDHHMMSS(odate){ 
                        var dateStr = odate.toJSON();
                        var lastChar = dateStr.charAt(dateStr.length-1).toUpperCase();
                        if(lastChar.charCodeAt(0) >= 65 && lastChar.charCodeAt(0) <= 90) {
                            dateStr = dateStr.slice(0,-1);
                        }
                        return dateStr;
                    }
                    function _processODataDateTime(junkValue) {
                        if(junkValue) {
                            try {
                                if(junkValue == +junkValue) {
                                    junkValue = window.parseInt(junkValue);
                                }
                                var date = new Date(junkValue);
                                var time = date.getTime();
                                if(isNaN(time)) {
                                    return junkValue;
                                } else {
                                    return changeToYYYYMMDDHHMMSS(date);
                                }
                            }catch(e) {

                            }
                        }
                        return junkValue;
                    }
                    if(filterVariants.length) {
                        var oFilterExpression = oQueryResultRequest.getFilterExpression();
                        for(var i=0, l=filterVariants.length; i<l; i++) {
                            var each = filterVariants[i];
                            if(this.getEdmType(params.serviceUri, each.NAME) == "Edm.DateTime") {
                                each.VALUE_1 = _processODataDateTime(each.VALUE_1);
                                each.VALUE_2 = _processODataDateTime(each.VALUE_2);
                            }
                            each.VALUE1=(each.VALUE_1 && each.VALUE_1.replace)?each.VALUE_1.replace(/\|\^/g,","):each.VALUE_1;
                            if(each.OPERATOR == sap.ui.model.FilterOperator.BT) {
                                oFilterExpression.addCondition(each.NAME,each.OPERATOR,_replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1),each.VALUE_2);
                            } else {
                                oFilterExpression.addCondition(each.NAME, each.OPERATOR, _replaceSingleQuoteWithDoubleSingleQuote(each.VALUE_1), null);
                            }

                        }
                    }
                    if(inputParamsVariants.length) {
                        if (oQueryResult.getParameterization()) {
                            var oParamRequest = new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(oQueryResult.getParameterization());
                            var paramererizationObj = oQueryResult.getParameterization();
                            var eachInputParam, findParameter, fromVal,toVal,toValParam;
                            for (var y = 0, z = inputParamsVariants.length; y < z; y++) {
                                eachInputParam = inputParamsVariants[y];
                                findParameter = paramererizationObj.findParameterByName(eachInputParam.NAME);
                                if (findParameter.isIntervalBoundary() === true && findParameter.isLowerIntervalBoundary() === true){
                                    //peerInterval = findParameter.getPeerIntervalBoundaryParameter();
                                    toValParam = findParameter.getPeerIntervalBoundaryParameter();
                                    for (var i = 0, l = inputParamsVariants.length; i < l; i++) {
                                        if (inputParamsVariants[i].NAME === toValParam.getName()) {
                                            toVal = _replaceSingleQuoteWithDoubleSingleQuote(inputParamsVariants[i].VALUE_1);
                                            break;
                                        }
                                    }
                                    fromVal = _replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.VALUE_1);
                                    if (toVal) {
                                        oParamRequest.setParameterValue(eachInputParam.NAME,fromVal,toVal);

                                    }
                                } else if (findParameter.isIntervalBoundary() === true && findParameter.isLowerIntervalBoundary() === false) {
                                    // Do nothing for upper Boundary
                                    jQuery.sap.log.info("Future development");
                                } else {
                                    oParamRequest.setParameterValue(eachInputParam.NAME,_replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.VALUE_1));
                                }
                            }
                            oQueryResultRequest.setParameterizationRequest(oParamRequest);
                        }
                    }
                }
                var finalUri = oQueryResultRequest.getURIToQueryResultEntries();
                if(params.dataLimit) {
                    finalUri = finalUri + "&$top="+params.dataLimit;
                }
                return {uri : finalUri, model: O4A.getODataModel()};
            } catch(e) {
                jQuery.sap.log.error("Error Preparing Query Service Uri using OData4Analytics Library : "+e.toString());
                return null;
            }
        },
        getEdmType : function(sUri, propertyName,displayFormatRequired) {
            function _getDisplayFormat(prop){
                var format="None";
                var extensions=prop.extensions||[];
                for(var i=0;i<extensions.length;i++){
                    if(extensions[i].name=="display-format"){
                        format=extensions[i].value.toUpperCase();
                        break;
                    }
                }
                return format;
            }
            var oDataModel = null;
            var returnValue=null;
            if(sUri instanceof sap.ui.model.odata.ODataModel) {
                oDataModel = sUri;
            } else  {
                oDataModel = this.getModelByServiceUri(sUri);
            }
            if(oDataModel && oDataModel.getServiceMetadata()) {
                var serviceMetaData = oDataModel.getServiceMetadata();
                var entitySets = serviceMetaData.dataServices.schema[0].entityType;
                if(entitySets) {
                    for(var i = 0; i<entitySets.length;i++) {
                        var entity = entitySets[i];
                        var properties = entity.property;
                        for(var j=0;j<properties.length;j++) {
                            var property=  properties[j];
                            if(property.name == propertyName) {
                                if(displayFormatRequired){
                                    returnValue={type:property.type,format:_getDisplayFormat(property)};
                                }else{
                                    returnValue=property.type;
                                }
                            }
                        }
                    }
                }
            }
            return returnValue;
        },
        getAllEntitySet : function(sUri) {
            var entitySets = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                entitySets = o4a.getAllQueryResultNames();
            } catch(e) {
                jQuery.sap.log.error("Error fetching Enity Set : "+e.toString());
            }
            return entitySets;

        },
        measures : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var measureNames = queryResult.getAllMeasureNames();
            return  {
                getAsStringArray : function() {
                    return measureNames;
                },
                getAsObjectArray : function(sKey) {
                    sKey = sKey || "name";
                    var measures = [];
                    measureNames.forEach(function(sMeasure){
                        var obj = {};
                        obj[sKey] = sMeasure;
                        measures.push(obj);
                    });
                    return measures;
                },
                getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                    sOriginalKey = sOriginalKey || "name";
                    sLabelKey = sLabelKey || "label";
                    var measures = [];
                    measureNames.forEach(function(sMeasure){
                        var oMeasure = queryResult.findMeasureByName(sMeasure);
                        var obj = {};
                        obj[sOriginalKey] = sMeasure;
                        obj[sLabelKey] = oMeasure.getLabelText() || sMeasure;
                        measures.push(obj);
                    });
                    return measures;
                },
                getUnitProperty : function(measureName) {
                    var oMeasure = queryResult.findMeasureByName(measureName);
                    if(oMeasure.getUnitProperty()) {
                        return oMeasure.getUnitProperty().name;
                    }
                    return null;
                }
            };
        },
        properties : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            var measureNames = queryResult.getAllMeasureNames();
            return {
                getLabelMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                mapping[property] = oDimension.getLabelText() || property;
                            } catch(e) {
                                var oMeasure = queryResult.findMeasureByName(property);
                                mapping[property] = oMeasure.getLabelText() || property;
                            }
                        });
                        return mapping;
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            mapping[sDimension] = oDimension.getLabelText() || sDimension;
                        });
                        measureNames.forEach(function(sMeasure){
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            mapping[sMeasure] = oMeasure.getLabelText() || sMeasure;
                        });
                        return mapping;
                    }
                },
                getTextPropertyMappingObject : function(aProperties) {
                    var mapping = {};
                    if(aProperties && aProperties.length) {
                        aProperties.forEach(function(property, index, array){
                            try {
                                var oDimension = queryResult.findDimensionByName(property);
                                if(oDimension.getTextProperty()) {
                                    mapping[property] = oDimension.getTextProperty().name || property;
                                } else {
                                    mapping[property] = property;
                                }
                            } catch(e) {
                                jQuery.sap.log.error("Invalid Dimension Name : "+property);
                            }
                        });
                    } else {
                        dimensionNames.forEach(function(sDimension){
                            var oDimension = queryResult.findDimensionByName(sDimension);
                            if(oDimension.getTextProperty()) {
                                mapping[sDimension] = oDimension.getTextProperty().name || sDimension;
                            } else {
                                mapping[sDimension] = sDimension;
                            }
                        });
                        measureNames.forEach(function(sMeasure) {
                            var oMeasure = queryResult.findMeasureByName(sMeasure);
                            if(oMeasure.getFormattedValueProperty && oMeasure.getFormattedValueProperty()) {
                                mapping[sMeasure] = oMeasure.getFormattedValueProperty().name;
                            } else {
                                mapping[sMeasure] = null;
                            }
                        });
                    }
                    return mapping;
                },
                getUnitPropertyMappingObject : function() {
                    var mapping = {};
                    measureNames.forEach(function(sMeasure) {
                        var oMeasure = queryResult.findMeasureByName(sMeasure);
                        if(oMeasure.getUnitProperty()) {
                            mapping[sMeasure] = oMeasure.getUnitProperty().name;
                        } else {
                            mapping[sMeasure] = null;
                        }
                    });
                    return mapping;
                }                
            };
        },
        dimensions : function(sUri, entitySet) {
            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);
            var dimensionNames = queryResult.getAllDimensionNames();
            return {
                getAsStringArray : function() {
                    var entityType= queryResult.getEntityType();
                    return dimensionNames;
                },
                getAsObjectArray : function(sKey) {
                    sKey = sKey || "name";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var obj = {};
                        obj[sKey] = sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getAsObjectArrayWithLabel : function(sOriginalKey, sLabelKey) {
                    sOriginalKey = sOriginalKey || "name";
                    sLabelKey = sLabelKey || "label";
                    var dimensions = [];
                    dimensionNames.forEach(function(sDimension){
                        var oDimension = queryResult.findDimensionByName(sDimension);
                        var obj = {};
                        obj[sOriginalKey] = sDimension;
                        obj[sLabelKey] = oDimension.getLabelText() || sDimension;
                        dimensions.push(obj);
                    });
                    return dimensions;
                },
                getTextProperty : function(dimensionName) {
                    var oDimension = queryResult.findDimensionByName(dimensionName);
                    if(oDimension.getTextProperty()) {
                        return oDimension.getTextProperty().name;
                    }
                    return null;
                }
            }
        },
        getAllMeasures : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                measures = queryResult.getAllMeasureNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        getAllMeasuresWithLabelText : function(sUri, entitySet) {
            var measures = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var measureNames = queryResult.getAllMeasureNames();
                for(var i=0; i<measureNames.length; i++) {
                    var each = measureNames[i];
                    var oMeasure = queryResult.findMeasureByName(each);
                    measures.push({
                        key : each,
                        value : oMeasure.getLabelText()
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Measures : "+e.toString());
            }
            return measures;
        },
        isTimeZoneIndependent:function(sUri,entitySet){
            var isTimeZoneInDependent=false;
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                var allProperties=entityType._oPropertySet;
                for(var each in allProperties){
                    if(each.match(/TimeZone$/gi)){
                        isTimeZoneInDependent=true;
                        //break;
                    }
                }
            } catch(e) {
                jQuery.sap.log.error("TimeZone dependency check failed : "+e.toString());
            }
            return isTimeZoneInDependent;
        },
        getAllFilterables : function(sUri, entitySet) {
            var aFilterablePropertyNames = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aFilterablePropertyNames = entityType.getFilterablePropertyNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Filterable dimensions : "+e.toString());
            }
            return aFilterablePropertyNames;
        },
        getSortableProperties:function(sUri,entitySet){
            var aSortableProperties = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType= queryResult.getEntityType();
                aSortableProperties = entityType.getSortablePropertyNames();
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Sortable dimensions : "+e.toString());
            }
            return aSortableProperties;
        },
        getPropertyToDimensionMap:function(sUri,entitySet){
            var propertyToDimensionMap={};
            var dimensions = this.getAllDimensionsWithProperty(sUri, entitySet);
            var curDimName;
            var curTextProperty;
            for(var curDimName in dimensions){
                propertyToDimensionMap[curDimName]=curDimName;
                if((curTextProperty=dimensions[curDimName].getTextProperty())){
                    propertyToDimensionMap[curTextProperty.name]=curDimName;
                }
            }
            return propertyToDimensionMap;
        },
        getAllDimensions:function(sUri,entitySet){
            var dimensions = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                dimensions = queryResult.getAllDimensionNames()||[];
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;

        },
        getAllFilterableDimensions : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = new Array();
                while( ai < array1.length && bi < array2.length ){
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result.push(array1[ai]);
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            var dimensions = this.getAllDimensions(sUri, entitySet);
            var aFilterablePropertyNames = this.getAllFilterables(sUri, entitySet);
            return intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
        },
        getAllFilterableDimensionsWithProperty : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai=0, bi=0;
                var result = {};
                while( ai < array1.length && bi < array2.length )
                {
                    if      (array1[ai] < array2[bi] ){ ai++; }
                    else if (array1[ai] > array2[bi] ){ bi++; }
                    else /* they're equal */
                    {
                        result[array1[ai]] = dimensionsObject[array1[ai]];
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            try {
                var aResult={};
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensions = queryResult.getAllDimensionNames()||[];
                var dimensionsObject = queryResult.getAllDimensions() || {};
                var aFilterablePropertyNames = this.getAllFilterables(sUri, entitySet);
                aResult= intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return aResult;
        },
        getAllDimensionsWithProperty : function(sUri, entitySet) {
            try {
                var aResult={};
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var aResult = queryResult.getAllDimensions() || {};
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return aResult;
        },
        getAllDimensionsWithLabelText : function(sUri, entitySet) {
            var dimensions = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensionNames = queryResult.getAllDimensionNames();
                for(var i=0; i<dimensionNames.length ;i++) {
                    var each = dimensionNames[i];
                    var oDimension = queryResult.findDimensionByName(each);
                    var textProperty = null;
                    if(oDimension.getTextProperty() != null)textProperty = oDimension.getTextProperty().name;
                    dimensions.push({
                        key : each,
                        value : oDimension.getLabelText(),
                        textProperty: textProperty
                    });
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching All Dimesions : "+e.toString());
            }
            return dimensions;
        },
        getAllInputParams : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    inputParams = oParams.getAllParameterNames();
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },
        getAllInputParamsWithFlag : function(sUri, entitySet) {
            var inputParams = new Array();
            try {
                var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
                var queryResult = o4a.findQueryResultByName(entitySet);
                if(queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    var inputParamsArray = oParams.getAllParameterNames();
                    for(var i=0; i<inputParamsArray.length; i++) {
                        var each = inputParamsArray[i];
                        var paramObject  = oParams.findParameterByName(each);
                        inputParams.push({
                            name : each,
                            optional : paramObject.isOptional()
                        });
                    }
                }
            } catch(e) {
                jQuery.sap.log.error("Error Fetching Input Params : "+e.toString());
            }
            return inputParams;
        },
        formatOdataEdmTimeToString : function (value){
            if(value && value.constructor.name == "Object"){
                if(value.__edmType=="Edm.Time"){
                    var milliseconds = value.ms;
                    var seconds = Math.floor((milliseconds / 1000) % 60 );
                    var minutes = Math.floor((milliseconds / 60000) % 60);
                    var hours   = Math.floor((milliseconds / 3600000) % 24);
                    return hours+"H"+minutes+"M"+seconds+"S";
                }
            }
            return value;
        },
        formatValue : function (val,scaleFactor,precision,MAX_LEN) {            
            MAX_LEN= MAX_LEN || 4;
            var unit={3:"K",6:"M",9:"B",12:"T",0:""};
            var temp,pre,suff;
            temp=Number(val).toPrecision(MAX_LEN);
            pre=Number(temp.split("e")[0]);
            suff=Number(temp.split("e")[1])||0;
            if(!val && val!=0)
                return {value:"",unitPrefix:""};

                if(suff%3!=0){
                    if(suff%3==2){
                        if(suff+1==scaleFactor){
                            suff=suff+1;
                            pre=pre/10;
                        }
                        else{
                            suff=suff-2;
                            pre=pre*100;
                        }
                    }
                    else{
                        if(suff+2==scaleFactor){
                            suff=suff+2;
                            pre=pre/100;

                        }
                        else{
                            suff--;
                            pre=pre*10;
                        }
                    }
                }

                else if(suff==15){
                    pre=pre*1000;
                    suff=12;
                }
                pre+="";

                if((pre).indexOf(".")<MAX_LEN){
                    pre=Number(pre).toPrecision(MAX_LEN);
                    var currPrec=pre.split(".")[1]?pre.split(".")[1].length:0;
                    if((precision || precision==0)&& precision<currPrec){
                        pre=Number(pre).toFixed(precision);
                    }


                }
                else
                    pre=Number(pre).toPrecision(MAX_LEN);
                return {value:Number(pre),unitPrefix:unit[suff]};
        },



        getFormattingMetadata: function(sUri, entitySet, propertyName) {

            var formattingMetadata = {};
            formattingMetadata._hasCurrency = false;
            formattingMetadata._hasSapText = false;

            var o4a = getOD4AObject(this.getModelByServiceUri(sUri));
            var queryResult = o4a.findQueryResultByName(entitySet);

            var measures = queryResult.getAllMeasures();

            if (measures[propertyName] ) {

                var sapTextPropertyName = (measures[propertyName]._oTextProperty && measures[propertyName]._oTextProperty.name) ? 
                        measures[propertyName]._oTextProperty.name : "";

                        if (sapTextPropertyName != "") {
                            formattingMetadata._hasSapText = true;
                            formattingMetadata._sapTextColumn = sapTextPropertyName;
                        }
                        else if(measures[propertyName].hasOwnProperty("_oUnitProperty")){
                            var extensions = measures[propertyName]._oUnitProperty.extensions;
                            for (var i = 0; i < measures[propertyName]._oUnitProperty.extensions.length; i++) {
                                if (extensions[i].name === "semantics" && extensions[i].value === "currency-code") {
                                    formattingMetadata._hasCurrency = true;
                                    formattingMetadata._currencyColumn =  measures[propertyName]._oUnitProperty.name;
                                }
                            }
                        }

            }

            return formattingMetadata; 
        }

    };
})();

sap.suite.ui.smartbusiness.lib.Util.cache = (function() {
    var BIGMAP = {};
    var DATAMAP = {};
    var sessionContext = "HANA_CLIENT";
    return {
        getCacheHanaClient : function(){
            if(BIGMAP[sessionContext]){
                return BIGMAP[sessionContext];
            }
            return null;
        },
        setCacheHanaClient : function(data){
            BIGMAP[sessionContext] = data;
        },
        getEvaluationById : function(key) {
            if(BIGMAP[key]) {
                return BIGMAP[key];
            } 
            return null; 
        },
        setEvaluationById : function(key, data) {
            BIGMAP[key] = data;
        },
        getKpiDetailsById : function(key) {
            if(DATAMAP[key]) {
                return DATAMAP[key];
            } 
            return null; 
        },
        setKpiDetailsById : function(key, data) {
            DATAMAP[key] = data;
        },
        invalidateKpiDetailsCache : function(){
            DATAMAP = {};
        },
        current_calls : {}
    }
})();
/**
 * Show error message
 */
sap.suite.ui.smartbusiness.lib.Util.utils = (function(){
    return {
        convertHexToRgba : function(color/*in Hexadecimal*/, opacity) {
            opacity = opacity || "1.0";
            var hexCodeRegex = /^(#[a-fA-F0-9]{3}$)|(#[a-fA-F0-9]{6}$)/;
            if(color.match(hexCodeRegex)) {
                var matches = color.match(/^#([A-Fa-f0-9]{1,2})([A-Fa-f0-9]{1,2})([A-Fa-f0-9]{1,2})$/);
                var aColors = [];
                matches.forEach(function(colorCode, index) {
                    if(index > 0) {
                        if(colorCode.length == 1) {
                            colorCode += colorCode; 
                        }
                        aColors.push(colorCode);
                    } 
                });
                var rgba = "rgba(";
                aColors.forEach(function(hexColorCode) {
                    //converto decimal
                    rgba += window.parseInt(hexColorCode, 16)+",";
                });
                rgba += (opacity +")");
                return rgba;
            }
            jQuery.sap.log.error("Not a valid Hex Color Code : "+color);
            return color;
        },
        /* this function is to override sap.ca.scfld.md.controller.ScfldMasterController.prototype.applySearchPatternToListItem
         * where only search needs to be done on title and tags
         */
        applySearchPatternToListItem : function(oItem, sFilterValue) {
            if (sFilterValue == "") {
                return true;
            }
            var propertyList = oItem.getBindingContext(this.sModelName).getProperty();
            for (var key in propertyList) {
                if(key != "TITLE") {
                    continue;
                }
                var currentValue = propertyList[key];
                if (typeof currentValue == "string") {
                    if (currentValue.toLowerCase().indexOf(sFilterValue) != -1) {
                        return true;
                    }
                }
            }
            if ((oItem.getIntro() && oItem.getIntro().toLowerCase().indexOf(sFilterValue) != -1) || (oItem.getTitle() && oItem.getTitle().toLowerCase().indexOf(sFilterValue) != -1) || (oItem.getNumber() && oItem.getNumber().toLowerCase().indexOf(sFilterValue) != -1) || (oItem.getNumberUnit() && oItem.getNumberUnit().toLowerCase().indexOf(sFilterValue) != -1) || (oItem.getFirstStatus() && oItem.getFirstStatus().getText().toLowerCase().indexOf(sFilterValue) != -1) || (oItem.getSecondStatus() && oItem.getSecondStatus().getText().toLowerCase().indexOf(sFilterValue) != -1)) {
                return true;
            }
            var dependents = oItem.getDependents();
            for(var x=0,l=dependents.length; x<l; x++) {
                if(dependents[x].getText() && dependents[x].getText().toLowerCase().indexOf(sFilterValue) != -1) {
                    return true;
                }
            }

            return false;
        },

        //Code Copied from Shell
        addSystemToServiceUrl : function(sServiceUrl, sSystem) {
            if(sSystem) {
                if (sServiceUrl.indexOf('/') !== 0 || sServiceUrl.indexOf('//') === 0) {
                    throw new Error("addSystemToServiceUrl: Invalid URL: " + sServiceUrl,"sap.suite.ui.smartbusiness.lib.Util.utils");
                }
                //sSystem = sSystem || this.getSystemAlias();
                if (/^[^?]*(;o=([\/;?]|$))/.test(sServiceUrl)) { // URL with ";o=" *not* followed by system
                    return sServiceUrl.replace(/;o=([\/;?]|$)/, (sSystem ? ";o=" + sSystem : "") + "$1");
                }
                if (/^[^?]*;o=/.test(sServiceUrl)) { // URL with ";o=" followed by system
                    return sServiceUrl;
                }
                if (sSystem) { // there is no marker for system in the URL so add system to last segment
                    return sServiceUrl.replace(/(\/[^?]*?)(\/$|$|(\/?\?.*))/, "$1;o=" + sSystem + "$2");
                }
            } else {
                jQuery.sap.log.warning("Not adding System to Service URL : "+sServiceUrl);
            }
            return sServiceUrl;
        },
        showErrorMessage: function(errorMessage, detailErrorMessage){

            var MessageBox = sap.m.MessageBox;
            if(detailErrorMessage==null || detailErrorMessage==''){
                MessageBox.show(errorMessage, {
                    icon: MessageBox.Icon.ERROR,
                    title: "Error",
                    actions: [MessageBox.Action.OK],
                });
            }
            else{
                MessageBox.show(errorMessage, {
                    icon: MessageBox.Icon.ERROR,
                    title: "Error",
                    actions: [MessageBox.Action.OK],
                    details: detailErrorMessage,
                });
            }
        },

        handleMessagePopover : function(event,oController){
            var that =this;

            var errorModel = new sap.ui.model.json.JSONModel();
            errorModel.setData({
                messagesLength : oController.errorMessages.length,
                errorMessages : oController.errorMessages
            });
            var oMessageTemplate = new sap.m.MessagePopoverItem({
                type: '{type}',
                title: '{title}',
                description: '{description}'
            });

            var oMessagePopover = new sap.m.MessagePopover({
                items: {
                    path: '/errorMessages',
                    template: oMessageTemplate
                }
            });
            oMessagePopover.setModel(errorModel);
            if(event){
                oMessagePopover.openBy(event.getSource());
            }
        },

        setErrorState : function(oController){
            if(oController.errorMessages.length>1){
                oController.setBtnEnabled("errorBtn",true);
                oController.errorState = true;
            }
            else{
                oController.setBtnEnabled("errorBtn",false);
                oController.errorState = false;
            }
        },



        getMantissaLength : function(num){
            var sNum = num.toString();
            var initPos = 0;
            if(num < 0){
                initPos = 1;
            }
            return (sNum.indexOf('.') === -1 ) ? (num < 0 ? sNum.length -1:sNum.length):  
                sNum.substring(initPos, sNum.indexOf('.')).length;
        },
        getLocaleFormattedValue : function(num, oScale, oDecimal){
            //var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
            var sD = 2;
            var oFormatOptions = {
                    style : "short"
            };
            var fNum;
            if(!(oDecimal==-1 || oDecimal==null)){
                oFormatOptions.shortDecimals=oDecimal;
            }
            var valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance(oFormatOptions);
            if(oScale == -2) {
                if(num > 9999) {
                    fNum = "????";
                } else if(num < 0.001) {
                    fNum = "0";
                } else {
                    if(num.toString().indexOf('.') != -1) {
                        fNum = Number(num).toFixed(4-num.toString().indexOf('.'));
                    } else {
                        fNum = Number(num);
                    } 
                    fNum = valFormatter.format(fNum);
                }
            } else if(oDecimal == -1 || oDecimal == null) {
                var mantissaLength  = this.getMantissaLength(num)
                if(!(mantissaLength % 3))
                    sD = 1;
                if(Math.abs(num) % Math.pow(10, mantissaLength-1) == 0) {
                    sD = 0;
                }
                else if((Math.abs(num) % Math.pow(10, mantissaLength-1)) < 6*Math.pow(10, mantissaLength - 4)) {
                    sD = 0;
                }                
                valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({ style: "short" , shortDecimals:sD});
                fNum = valFormatter.format(num);
            } else {
                fNum = valFormatter.format(num);
            }
            return fNum;
        },

        getRandomNumber:function(max){
            return Math.floor(Math.random() * 10000) % max;
        },
        getObjectOrder:function (object_type) {
            var dictionary = {
                    TAGS : ["ID","IS_ACTIVE","TYPE","TAG"],
                    PROPERTIES : ["ID","IS_ACTIVE","TYPE","NAME","VALUE"],
                    EVALUATION_TEXTS : ["ID","IS_ACTIVE","LANGUAGE","TITLE","DESCRIPTION"],
                    INDICATOR_TEXTS : ["ID","IS_ACTIVE","LANGUAGE","TITLE","DESCRIPTION"],
                    CHIP_TEXTS : ["id","isActive","language","title","description"],
                    EVALUATION_VALUES : ["ID","IS_ACTIVE","TYPE","FIXED","COLUMN_NAME","ODATA_PROPERTY"],
                    EVALUATION_FILTERS : ["ID","IS_ACTIVE","TYPE","NAME","VALUE_1","OPERATOR","VALUE_2"],
                    ASSOCIATION_PROPERTIES : ["TYPE","SOURCE_INDICATOR","TARGET_INDICATOR","IS_ACTIVE","NAME","VALUE"],
                    APP_PARAMETERS: ["NAME","VALUE"],
                    AUTHORIZATION: ["NAME","TYPE"]
            };
            return dictionary[object_type];
        },

        getFilterArray: function(items, filterObject) {
            var filtersArray = [];
            var filters = {};
            for(var i=0,l=items.length; i<l; i++) {
                filters[items[i].getParent().getKey()] = filters[items[i].getParent().getKey()] || [];
                filters[items[i].getParent().getKey()].push(filterObject[items[i].getKey()]);
            } 

            for(var filter in filters) {
                filtersArray.push(new sap.ui.model.Filter(filters[filter], false));
            }
            return filtersArray;
        },

        dirtyBitCheck:function(obj)  {
            var oldPayload = obj.oldPayload;
            var newPayload = obj.newPayload;
            var type = obj.objectType;
            if((oldPayload instanceof Array) && (newPayload instanceof Array)) {
                var o = {};
                var n = {};
                var updateArr = [];
                var deleteArr = [];
                o = this.arrayToObject(oldPayload, type);
                n = this.arrayToObject(newPayload, type);

                for(var obj in n) {
                    if(!(o[obj])) {
                        updateArr.push(n[obj]);
                    }
                    else {
                        delete o[obj];
                    }
                }

                for(var obj in o) {
                    deleteArr.push(o[obj]);
                }

                return {
                    updates : updateArr,
                    deletes : deleteArr
                };
            }
            else if((oldPayload instanceof Object) && (newPayload instanceof Object)) {
                var updateObject = {};
                for(var key in newPayload) {
                    if(newPayload.hasOwnProperty(key)) {
                        if(newPayload[key] != oldPayload[key]) {
                            updateObject = newPayload;
                            if(type == "ASSOCIATIONS") {
                                return {updates : [updateObject], deletes : [oldPayload]};
                            }
                            return {updates : [updateObject]};
                        }
                    }
                }
                return {updates : []};
            }
        },

        updateChips: function (obj, model) {
            var indicators = null;
            var evaluations = null;

            model = model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);

            if(obj.INDICATORS) {
                indicators = obj.INDICATORS; 
            }
            else if(obj.EVALUATIONS) {
                evaluations = obj.EVALUATIONS; 
            }

            if(indicators && indicators.length) {
                for(var i=0,l=indicators.length; i<l; i++) {

                }
            }

            if(evaluations && evaluations.length) {
                for(var i=0,l=evaluations.length; i<l; i++) {
                    model.read(("/CHIPS?$filter=evaluationId eq '" + evaluations[i].EVALUATIONS.ID + "' and isActive eq 1"), null, null, false, function(data) {
                        if(data.results && data.results.length) {
                            var chips = data.results;
                            var updateBatch = [];
                            var values = [];
                            var filters = [];
                            var isUpdatesSuccessful = true;
                            var obj = {};
                            for(var j=0,m=chips.length; j<m; j++) {
                                var configuration = JSON.parse(chips[j].configuration);
                                var tileConfiguration = JSON.parse(configuration.tileConfiguration); 

                                for(var k=0,n=evaluations[i].EVALUATION_VALUES.length; k<n; k++) {
                                    obj = {};
                                    obj.TYPE = evaluations[i].EVALUATION_VALUES[k].TYPE;
                                    obj.FIXED = evaluations[i].EVALUATION_VALUES[k].FIXED;
                                    obj.COLUMN_NAME = evaluations[i].EVALUATION_VALUES[k].COLUMN_NAME;
                                    obj.ODATA_PROPERTY = evaluations[i].EVALUATION_VALUES[k].ODATA_PROPERTY;
                                    values.push(obj);
                                }

                                for(var k=0,n=evaluations[i].EVALUATION_FILTERS.length; k<n; k++) {
                                    obj = {};
                                    obj.TYPE = evaluations[i].EVALUATION_FILTERS[k].TYPE;
                                    obj.NAME = evaluations[i].EVALUATION_FILTERS[k].NAME;
                                    obj.VALUE_1 = evaluations[i].EVALUATION_FILTERS[k].VALUE_1;
                                    obj.OPERATOR = evaluations[i].EVALUATION_FILTERS[k].OPERATOR;
                                    obj.VALUE_2 = evaluations[i].EVALUATION_FILTERS[k].VALUE_2;
                                    filters.push(obj);
                                }

                                tileConfiguration.EVALUATION = JSON.stringify(evaluations[i].EVALUATIONS);
                                tileConfiguration.EVALUATION_VALUES = JSON.stringify(values);
                                tileConfiguration.EVALUATION_FILTERS = JSON.stringify(filters);

                                configuration.tileConfiguration = JSON.stringify(tileConfiguration);
                                configuration.timeStamp = Date.now().toString();

                                configuration = JSON.stringify(configuration);

                                if (configuration.length > 4096) {
                                    tileConfiguration.EVALUATION_FILTERS = JSON.stringify([]);
                                    configuration = JSON.stringify({tileConfiguration: JSON.stringify(tileConfiguration),isSufficient: "0"});
                                }

                                for(var ele in data.results[j]) {
                                    if(data.results[j].hasOwnProperty(ele)) {
                                        if((data.results[j][ele] instanceof Object) && !(data.results[j][ele] instanceof Array) && !(data.results[j][ele] instanceof Date)) {
                                            delete data.results[j][ele];
                                        }
                                    } 
                                }

                                data.results[j].configuration = configuration;
                                var entity = "CHIPS(id='" + data.results[j].id + "',isActive=1)";
                                updateBatch.push(model.createBatchOperation(entity,"PUT",data.results[j]));
                            }

                            model.addBatchChangeOperations(updateBatch); 
                            model.submitBatch(function(data,response,errorResponse){
                                if(errorResponse.length)
                                {       isUpdatesSuccessful = false;
                                return;
                                }
                                var responses = data.__batchResponses[0].__changeResponses;
                                for(var key in responses)
                                    if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
                                        isUpdatesSuccessful = false;      
                                    }

                            },function(err){
                                isUpdatesSuccessful = false;
                            },false);

                            if(!isUpdatesSuccessful) {
                                //sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"));
                            }
                        }      
                    }, function(err) {
                        //sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                    });
                }
            }
        },

        arrayToObject:function(arr, type) {
            var order = this.getObjectOrder(type);
            var obj = {};
            var key = "";
            for(var i=0,l=arr.length; i<l; i++) {
                if(!(arr[i] instanceof Array) && (arr[i] instanceof Object)) {
                    key = "";
                    for(var j=0,m=order.length; j<m; j++) {
                        key += (j) ? "^|" : "";
                        key += arr[i][order[j]];
                    }
                    obj[key] = arr[i];
                }
            }
            return obj;
        },

        refreshMasterList: function(controllerRef, isMasterList) {
            var ref = null;
            var masterControllerRef = null;
            var oApplicationImplementation = null;
            var oApplicationFacade = controllerRef.oApplicationFacade;
            var isManualRefresh = true;
            var oDataModel = oApplicationFacade.getODataModel();
            if(isMasterList) {
                oApplicationImplementation = controllerRef._oApplicationImplementation;
            }
            else {
                oApplicationImplementation = controllerRef.oApplicationImplementation;
            }
            if(oApplicationImplementation && oApplicationImplementation.oMHFHelper && oApplicationFacade.masterListControllerRef) {
                ref = oApplicationImplementation.oMHFHelper;
                masterControllerRef = oApplicationFacade.masterListControllerRef;
                ref.refreshList(masterControllerRef, isManualRefresh);
            }
            else {
                oDataModel.refresh();
            }
        },

        appToAppNavigation:function(obj) {
            var hash = "#";
            var hashArr = window.hasher.getHashAsArray();
            var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?"));
            if(hashParameters && (hashParameters.charAt(hashParameters.length - 1) == "&")) {
                hashParameters = hashParameters.substr(0,hashParameters.length - 1);
            } 
            if(obj.action) {
                if(obj.context || obj.route) {
                    if(obj.context.charAt(0) == "/") {
                        obj.context = obj.context.substr(1);
                    }
                    obj.context = "&/" + ((obj.route + "/") || "") + (obj.context || ""); 
                }
                hash += (obj.semanticObject || "FioriApplication-") + obj.action + hashParameters + (obj.context || "");
            }
            if(!(sap.ui.core.routing)) {
                jQuery.sap.require("sap.ui.core.routing");
            }
            var hashChanger = new sap.ui.core.routing.HashChanger();
            sap.suite.ui.smartbusiness.lib.Util.utils.setPrevAppHash();
            hashChanger.setHash(hash);
        },

        hashChange:function(obj) {
            if(!(sap.ui.core.routing)) {
                jQuery.sap.require("sap.ui.core.routing");
            }
            var hashChanger = new sap.ui.core.routing.HashChanger();
            hashChanger.setHash(obj.hash || "#");
        },

        replaceHash:function(obj, isHash) {
            if(isHash) {
                window.location.replace(obj.hash);
            }
            else {
                var hash = "#";
                var hashArr = window.hasher.getHashAsArray();
                var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?"));
                if(hashParameters && (hashParameters.charAt(hashParameters.length - 1) == "&")) {
                    hashParameters = hashParameters.substr(0,hashParameters.length - 1);
                } 
                if(obj.action) {
                    if(obj.context || obj.route) {
                        if(obj.context && obj.context.charAt(0) == "/") {
                            obj.context = obj.context.substr(1);
                        }
                        obj.context = "&/" + ((obj.route + "/") || "") + (obj.context || ""); 
                    }
                    hash += (obj.semanticObject || "FioriApplication-") + obj.action + hashParameters + (obj.context || "");
                }
                window.location.replace(hash);
            }
        },

        setHash:function(obj, isHash) {
            if(isHash) {
                window.location.hash = obj.hash;
            }
            else {
                var hash = "#";
                var hashArr = window.hasher.getHashAsArray();
                var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?"));
                if(hashParameters && (hashParameters.charAt(hashParameters.length - 1) == "&")) {
                    hashParameters = hashParameters.substr(0,hashParameters.length - 1);
                } 
                if(obj.action) {
                    if(obj.context || obj.route) {
                        if(obj.context && obj.context.charAt(0) == "/") {
                            obj.context = obj.context.substr(1);
                        }
                        obj.context = "&/" + ((obj.route + "/") || "") + (obj.context || ""); 
                    }
                    hash += (obj.semanticObject || "FioriApplication-") + obj.action + hashParameters + (obj.context || "");
                }
                window.location.hash = hash;
            }
        },

        setPrevAppHash: function() {
            hasher = hasher || window.hasher;
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache.prevApp = sap.suite.ui.smartbusiness.modelerAppCache.prevApp || {};
            sap.suite.ui.smartbusiness.modelerAppCache.prevApp.prevAppHash = hasher.getHash();
            sap.suite.ui.smartbusiness.modelerAppCache.prevApp.prevAppHashAsArray = hasher.getHashAsArray();
        },

        backToHome: function() {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            if(sap.suite.ui.smartbusiness.modelerAppCache.prevApp) {
                delete sap.suite.ui.smartbusiness.modelerAppCache.prevApp;
            }
            sap.suite.ui.smartbusiness.modelerAppCache.SBWorkspace = {};
            sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI = {};
            sap.suite.ui.smartbusiness.modelerAppCache.createSBKPIEvaluation = {};
            sap.suite.ui.smartbusiness.modelerAppCache.configureSBKPITile = {};
            sap.suite.ui.smartbusiness.modelerAppCache.manageSBKPIAssociation = {};
            sap.suite.ui.smartbusiness.modelerAppCache.configureSBKPIDrilldown = {};
            sap.suite.ui.smartbusiness.modelerAppCache.authorizeSBEvaluation = {};
        },

        isHanaViewValid: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(!(obj.VIEW_NAME)) {
                return false;
            }
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewValid;
            }
            else {
                var flag = false;
                var entity = "/HANA_VIEWS" + "?$filter=" + "PACKAGE eq " + "'" + obj.VIEW_NAME.substr(0, obj.VIEW_NAME.indexOf("/")) + "'" + " and " + "OBJECT eq " + "'" +  obj.VIEW_NAME.substr(obj.VIEW_NAME.indexOf("/") + 1) + "'";   
                obj.model = obj.model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);
                obj.model.read(entity, null, null, false, function(data) {
                    if(data.results.length) {
                        flag = true;
                    }
                    else {
                        flag = false;
                    }
                }, function() {
                    flag = true;
                });
                if(obj.app) {
                    sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewValid = flag;
                }
                return flag;
            }
        },

        isHanaViewFormatValid: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(!(obj.VIEW_NAME)) {
                return false;
            }
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid;
            }
            else {
                if((obj.VIEW_NAME.indexOf("/") == -1) && (obj.VIEW_NAME.indexOf("::") == -1)) {
                    if(obj.app) {
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid = false;
                    }
                    return false;
                }
                if(obj.app) {
                    sap.suite.ui.smartbusiness.modelerAppCache[obj.app].hanaViewFormatValid = true;
                }
                return true;
            }
        },

        isODataURLValidForHanaView: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid;
            }
            else {
                var entity = "/ODATA_FOR_ENTITY" + "(" + "P_PACKAGE=" + "'" + obj.VIEW_NAME.substr(0, obj.VIEW_NAME.indexOf("/")) + "'" + "," + "P_OBJECT=" + "'" +  obj.VIEW_NAME.substr(obj.VIEW_NAME.indexOf("/") + 1) + "'" + ")/Results";
                obj.model = obj.model || new sap.ui.model.odata.ODataModel("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata", true);
                obj.model.read(entity, null, null, false, function(data) {
                    if(data.results.length) {
                        if(data.results.indexOf(odata)) {
                            if(obj.app) {
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid = true;
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = true;
                            }
                            return true;
                        }
                        else {
                            if(obj.app) {
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                            }
                            return false;
                        }
                    }
                    else {
                        if(obj.app) {
                            sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                            sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                        }
                        return false;
                    }
                }, function() {
                    if(obj.app) {
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid = false;
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValidForHanaView = false;
                    }
                    return false;
                });
            }
        },

        isODataURLValidByExistence: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid;
            }
            else {
                var model = new sap.ui.model.odata.ODataModel(obj.ODATA_URL,true);
                if(model.getServiceMetadata()) {
                    odataExists = true;
                }
                else {
                    odataExists = false;
                }
                if(obj.app) {
                    sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValid = odataExists;
                    sap.suite.ui.smartbusiness.modelerAppCache[obj.app].oDataURLValidByExistence = odataExists;
                }
                return odataExists;
            }
        },

        isODataURLValid: function(obj) {
            if(obj.VIEW_NAME) {
                return sap.suite.ui.smartbusiness.lib.Util.utils.isODataURLValidForHanaView(obj);
            }
            else {
                return sap.suite.ui.smartbusiness.lib.Util.utils.isODataURLValidByExistence(obj);
            }
        },

        isEntitysetValid: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].entitysetValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].entitysetValid;
            }
            else {
                try {
                    if(obj.VIEW_NAME) {

                    }
                    else {
                        if(sap.suite.ui.smartbusiness.lib.Util.odata.getAllEntitySet(obj.ODATA_URL).indexOf(obj.ODATA_ENTITYSET) == -1){
                            if(obj.app) {
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].entitysetValid = false;
                            }
                            return false;
                        }
                        else {
                            if(obj.app) {
                                sap.suite.ui.smartbusiness.modelerAppCache[obj.app].entitysetValid = true;
                            }
                            return true;
                        }
                    }
                } catch(e) {
                    if(obj.app) {
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].entitysetValid = false; 
                    }
                    return false;
                }
            }
        },

        isMeasureValid: function(obj) {
            sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
            sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
            sap.suite.ui.smartbusiness.modelerAppCache[obj.app] = sap.suite.ui.smartbusiness.modelerAppCache[obj.app] || {};
            if(obj.cache && obj.app && (sap.suite.ui.smartbusiness.modelerAppCache[obj.app].measureValid !== undefined)) {
                return sap.suite.ui.smartbusiness.modelerAppCache[obj.app].measureValid;
            }
            try {
                if(sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(obj.ODATA_URL, obj.ODATA_ENTITYSET).indexOf(obj.COLUMN_NAME) == -1) {
                    if(obj.app) {
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].measureValid = false;
                    }
                    return false;
                } 
                else {
                    if(obj.app) {
                        sap.suite.ui.smartbusiness.modelerAppCache[obj.app].validValueMeasure = true;
                    }
                    return true;
                }
            } catch(e) {
                if(obj.app) {
                    sap.suite.ui.smartbusiness.modelerAppCache[obj.app].validValueMeasure = false;
                }
                return false;
            }
        },

        getHanaSystem : function() {
            var hashObj = hasher || window.hasher; 
            var hashArr = hashObj.getHashAsArray();
            if(hashArr && hashArr.length && hashArr[0]) {
                var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
                for(var i=0,l=hashParameters.length; i<l; i++) {
                    if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                        return hashParameters[i].split("=")[1]; 
                    }
                }
            }
            return "";
        },

        fetchCSRFToken: function() {
            var tokenFetchServiceUrl = "/sap/hba/r/sb/core/logic/__token.xsjs";
            if(sap.ushell && sap.ushell.Container) {
                tokenFetchServiceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(tokenFetchServiceUrl, this.getHanaSystem());
            }
            return jQuery.ajax({
                type: "HEAD",
                async: false,
                dataType: "json",
                url: tokenFetchServiceUrl,
                headers: {"X-CSRF-Token": "Fetch"},
                success: function(d, s, x) {

                },
                error: function() {

                }
            });
        },

        appendUrlParameters: function(url, urlParameters) {
            var urlParts = url.split("?");
            if(urlParts.length > 2) {
                throw new Error("Url not formed properly");
            }
            if(sap.ushell && sap.ushell.Container) {
                urlParts[0] = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(urlParts[0], this.getHanaSystem());
            }
            url = urlParts[0];
            if(urlParts.length == 2) {
                url += "?" + urlParts[1];
            }
            if(urlParameters && Object.keys(urlParameters) && Object.keys(urlParameters).length) {
                url = url + "?" + jQuery.param(urlParameters);
            }
            return url;
        },

        getLocaleLanguage: function() {
            return ((sap.ui.getCore().getConfiguration().getLanguage()) ? sap.ui.getCore().getConfiguration().getLanguage().split("-")[0].toUpperCase() : "");
        },

        create: function(url, payload, parameters, success, error, async, urlParameters) {
            var that = this;
            async = async ? true : false;
            sap.suite.ui.smartbusiness.lib.Util.utils.fetchCSRFToken().done(function(d,s,x) {
                jQuery.ajax({
                    type: "POST",
                    async: async,
                    url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(url, urlParameters),
                    data: encodeURIComponent(JSON.stringify(payload)),
                    headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage()},
                    success: success,
                    error: error
                });
            });
        },

        update: function(url, payload, parameters, success, error, merge, eTag, async, urlParameters) {
            var that = this;
            async = async ? true : false;
            sap.suite.ui.smartbusiness.lib.Util.utils.fetchCSRFToken().done(function(d,s,x) {
                jQuery.ajax({
                    type: "PUT",
                    async: async,
                    url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(url, urlParameters),
                    data: encodeURIComponent(JSON.stringify(payload)),
                    headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage(), "If-None-Match": (eTag || "")},
                    success: success,
                    error: error
                });
            });
        },

        remove: function(url, payload, success, error, eTag, additionalPayload, async, urlParameters) {
            var that = this;
            async = async ? true : false;
            sap.suite.ui.smartbusiness.lib.Util.utils.fetchCSRFToken().done(function(d,s,x) {
                jQuery.ajax({
                    type: "DELETE",
                    async: async,
                    url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(url, urlParameters),
                    data: encodeURIComponent(JSON.stringify(payload)),
                    headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token"), "Accept-Language":that.getLocaleLanguage(), "If-None-Match": (eTag || "")},
                    success: success,
                    error: error
                });
            });
        },

        serviceUrl: function(url) {
            var Constants = {
                    INDICATOR_SERVICE_URI : "/sap/hba/r/sb/core/logic/indicators.xsjs",
                    EVALUATION_SERVICE_URI : "/sap/hba/r/sb/core/logic/evaluations.xsjs",
                    CHIP_SERVICE_URI: "/sap/hba/r/sb/core/logic/chips.xsjs",
                    ACTIVATE_INDICATOR_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateIndicator.xsjs",
                    ACTIVATE_EVALUATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateEvaluation.xsjs",
                    INDICATOR_FAVOURITE_SERVICE_URI: "/sap/hba/r/sb/core/logic/favouriteIndicator.xsjs",
                    EVALUATION_FAVOURITE_SERVICE_URI: "/sap/hba/r/sb/core/logic/favouriteEvaluation.xsjs",
                    ASSOCIATIONS_CUD: "/sap/hba/r/sb/core/logic/associations_cud.xsjs",
                    ACTIVATE_ASSOCIATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateAssociation.xsjs",
                    ACTIVATE_CHIP_SERVICE_URI: "/sap/hba/r/sb/core/logic/activateChip.xsjs",
                    AUTHORIZATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/authorization.xsjs",
                    COPY_DDA_CONFIGURATION_SERVICE_URI: "/sap/hba/r/sb/core/logic/copyDrilldownConfiguration.xsjs"
            }
            return Constants[url];
        }
    }
})();
/**
 * KPI Related API
 */
sap.suite.ui.smartbusiness.lib.Util.kpi = (function() {
    var Constants = {
            KPI_SERVICE_URI : "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata",
            KPI_RUNTIME_SERVICE_URI : "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata",
            EVALUATIONS_ENTITY_SET : "/EVALUATIONS",
            EVALUATIONS_DDA_ENTITY_SET: "/EVALUATIONS_DDA",
            ASSOCIATED_INDICATORS_ENTITY_SET:"ASSOCIATED_INDICATORS",
            DESIGN_TIME_SERVICE_URI:"/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata"
    };
    function getCacheKey(oParam, bRuntime) {
        var prefix = bRuntime ? "_rt" : "_dt";
        var key = oParam.id;
        if(oParam.filters) {
            key+="_FILTERS";
        } if(oParam.thresholds) {
            key+="_VALUES";
        }
        key+=prefix;
        return key;
    };
    var _appendSystemAlias = function(uri, sysAlias) {
        if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            if(urlParsingService) {
                uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
            }
        }
        return uri;
    };
    return  {
        /**
         * @param :oParam
         * @retrurn  : evaluationObject
         * @description : OParam should be an object with following properties
         * {
         *   id : 'evaluationId',
         *   success : function(data) {}, //callback function with OData Evaluation Response
         *   error : function() {},
         *   cache :  true/false //default false
         *   expand : 'csv' //will add expand params to Evaluation OData Call
         *   
         * }
         * 
         * If Success property is specified, then call will  be made async, other wise synchronous
         */
        getSiblingEvaluations:function(oParam){

            if(!oParam.indicator) {
                throw new Error("Indicator Not Found")
            }
            var model =null;
            if(sap.suite.ui.smartbusiness.lib.Util.odata){
                model = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(Constants.KPI_SERVICE_URI);
            } else {
                model = new sap.ui.model.odata.ODataModel(Constants.KPI_SERVICE_URI, true);
            }
            var async = !!oParam.success;
            var filterValue = "INDICATOR eq '#INDICATOR_ID'".replace("#INDICATOR_ID",oParam.indicator);
            var siblingData = [];
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var entity = Constants.EVALUATIONS_ENTITY_SET;
            if(oParam.getDDAEvaluation) {
                entity = Constants.EVALUATIONS_DDA_ENTITY_SET;
            }
            model.read(entity,null, oDataParamObject, async, function(data) {
                if(data.results && data.results.length) {
                    var tmp=data.results||[];
                    siblingData=tmp;

                    // sap.suite.ui.smartbusiness.lib.Util.cache.setEvaluationById(cache_key, evalData);
                }
                if(async) {
                    oParam.success.call(oParam.context || null, siblingData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return siblingData;

        },
        getAssociatedEvaluations:function(oParam){

            if(!oParam.id) {
                throw new Error("Evaluation Not Found")
            }
            var model =null;
            if(sap.suite.ui.smartbusiness.lib.Util.odata){
                model = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(Constants.DESIGN_TIME_SERVICE_URI);
            } else {
                model = new sap.ui.model.odata.ODataModel(Constants.DESIGN_TIME_SERVICE_URI, true);
            }
            var async = !!oParam.success;
            var filterValue = "SOURCE_EVALS eq '#EVALUATION_ID' or TARGET_EVALS eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var associatedEvalsData = [];
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "SOURCE_EVALUATION,TARGET_EVALUATION";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length);
            }
            model.read(Constants.ASSOCIATED_INDICATORS_ENTITY_SET,null, oDataParamObject, async, function(data) {
                data=(data.results && data.results.length)?data.results:[];
                data.forEach(function(o){
                    if(o.TARGET_EVALS==oParam.id){
                        associatedEvalsData.push(o.SOURCE_EVALUATION);
                    }else if(o.SOURCE_EVALS==oParam.id){
                        associatedEvalsData.push(o.TARGET_EVALUATION);
                    }
                });
                if(async) {
                    oParam.success.call(oParam.context || null, associatedEvalsData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return associatedEvalsData;

        },
        getEvaluationById : function(oParam) {
            if(!oParam.id) {
                throw new Error("Evaluation Id Not Found")
            }
            var bUseRuntimeService = !!oParam.useRuntimeService; 
            var cache_key = getCacheKey(oParam, bUseRuntimeService);
            if(oParam.cache) {
                var evaluationObject = sap.suite.ui.smartbusiness.lib.Util.cache.getEvaluationById(cache_key);
                if(evaluationObject) {
                    if(oParam.success) {
                        oParam.success.call(oParam.context || null, evaluationObject);
                        return null;
                    } else {
                        return evaluationObject;
                    }
                }
            }
            var model =null;
            var _serviceUri = bUseRuntimeService ? Constants.KPI_RUNTIME_SERVICE_URI : Constants.KPI_SERVICE_URI;
            var _serviceUri = _appendSystemAlias(_serviceUri, oParam.sapSystem);
            if(sap.suite.ui.smartbusiness.lib.Util.odata){
                model = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(_serviceUri);
            } else {
                model = new sap.ui.model.odata.ODataModel(_serviceUri, true);
            }
            var async = !!oParam.success;
            var filterValue = "ID eq '#EVALUATION_ID'".replace("#EVALUATION_ID",oParam.id);
            var evalData = null;
            var oDataParamObject = {};
            oDataParamObject["$filter"] = filterValue;
            var expandParams = "";
            if(oParam.filters) {
                expandParams += "FILTERS,";
            }
            if(oParam.thresholds) {
                expandParams += "VALUES,";
            }
            if(expandParams) {
                oDataParamObject["$expand"] = expandParams.substring(0,expandParams.length-1);
            }
            var entity = Constants.EVALUATIONS_ENTITY_SET;
            if(oParam.getDDAEvaluation) {
                entity = Constants.EVALUATIONS_DDA_ENTITY_SET; 
            }
            else {

            }
            model.read(entity,null, oDataParamObject, async, function(data) {
                if(data.results && data.results.length) {
                    evalData = data.results[0];
                    sap.suite.ui.smartbusiness.lib.Util.cache.setEvaluationById(cache_key, evalData);
                }
                if(async) {
                    oParam.success.call(oParam.context || null, evalData);
                }
            }, function(){
                jQuery.sap.log.error("Error fetching Evaluation : ",oParam.id);
                if(oParam.error) {
                    oParam.error.apply(oParam.context || null, arguments);
                }
            });
            return evalData;
        },
        parseEvaluation : function(evaluationData) {
            return new sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation(evaluationData);
        }
    } 
})();

/**
 *  EVALUATION - Parse Evaluation Json Response and Form JavaScript Object
 */
sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds = function(thresholdsData) {
    this.thresholdsData = thresholdsData;
    var T_MAPPING = {
            "TA" : {
                prop : '_target',
                func : "getTarget"
            },
            "CL" : {
                prop : '_criticalLow',
                func : "getCriticalLow"
            },
            "CH" : {
                prop : '_criticalHigh',
                func : "getCriticalHigh"
            },
            "WL" : {
                prop : '_warningLow',
                func : "getWarningLow"
            },
            "WH" : {
                prop : '_warningHigh',
                func : "getWarningHigh"
            },
            "TC" : {
                prop : '_trend',
                func : "getTrend"
            },
            "RE" : {
                prop : "_reference",
                func : "getReference"
            }
    }
    var getType = function(obj) {
        if(obj.FIXED) {
            return 'FIXED';
        }
        if(obj.COLUMN_NAME) {
            return 'COLUMN_NAME';
        }
        if(obj.ODATA_URL) {
            return 'ODATA_URL'
        }
        return null;
    };
    this.parse = function(allThresholds) {
        allThresholds.forEach(function(oThreshold) {
            var mapping = T_MAPPING[oThreshold.TYPE];
            if(mapping) {
                var tType = getType(oThreshold);
                this[mapping.prop+"Type"] = tType;
                this[mapping.prop+"Value"] = oThreshold[tType];
                sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds.prototype[mapping.func+"Type"] = function() {
                    return this[mapping.prop+"Type"];
                };
                sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds.prototype[mapping.func] = function() {
                    return this[mapping.prop+"Value"];
                };
            }
        },this);
        for(var each in T_MAPPING) {
            var o = T_MAPPING[each]
            if(!sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds.prototype[o.func]) {
                sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds.prototype[o.func+"Type"] = function() {
                    return null;
                };
                sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds.prototype[o.func] = function() {
                    return null;
                };
            }
        }
    };
    this.parse(this.thresholdsData.results);
};
sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation = function(evaluationData) {
    this.evaluationData = evaluationData;
    this.thresholds = null;
    if(this.evaluationData && this.evaluationData.VALUES) {
        this._init();
        this.thresholds = new sap.suite.ui.smartbusiness.lib.Util.kpi.Thresholds(this.evaluationData.VALUES);
    }
};
sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation.PropertyMapping = {
        ID : "getId",
        ODATA_URL : "getODataUrl",
        ODATA_ENTITYSET : "getEntitySet",
        GOAL_TYPE : "getGoalType",
        INDICATOR : "getKpiId",
        TITLE : "getTitle",
        DESCRIPTION : "getDescription",
        SCALING : "getScaling",
        COLUMN_NAME : "getKpiMeasureName",
        INDICATOR_TITLE : "getKpiName",
        SEMANTIC_OBJECT : "getSemanticObject",
        ACTION : "getAction",
        OWNER_NAME : "getOwnerName",
        OWNER_ID : "getOwnerId",
        VALUES_SOURCE : "getThresholdValueType",
        //EXPAND PROPERTIES
        FILTERS : "getFilters",
        VALUES : "getValues",
        PROPERTIES : "getProperties",
        TAGS : "getTags",
        INDICATOR_PROPERTIES : "getKpiDetail",
        DECIMAL_PRECISION : "getDecimalPrecision"
};
sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation.prototype = {
        _init : function() {
            for(var each in sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation.PropertyMapping) {
                (function(each){
                    var func = sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation.PropertyMapping[each];
                    sap.suite.ui.smartbusiness.lib.Util.kpi.Evaluation.prototype[func] = function() {
                        return this.evaluationData[each];
                    }
                })(each);
            }
        },
        getThresholds : function() {
            return this.thresholds;
        },
        isMaximizingKpi : function() {
            return this.getGoalType() == "MA";
        },
        isMinimizingKpi : function() {
            return this.getGoalType() == "MI";
        },
        isTargetKpi : function() {
            return this.getGoalType() == "RA";
        },
        get_hana_client : function(){
            var sessionClient;
            var cacheHanaClient = sap.suite.ui.smartbusiness.lib.Util.cache.getCacheHanaClient();
            if(cacheHanaClient){
                sessionClient = cacheHanaClient;
                return sessionClient;
            }
            jQuery.ajax({
                type: "GET",
                async: false,
                dataType: "json",
                url: "/sap/hba/r/sb/core/logic/GetSessionClient.xsjs",
                success: function(d, s, x) {
                    sessionClient = d.sessionClient;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                                	jQuery.sap.log.error(jqXHR.responseText);
                        }
            });
            sap.suite.ui.smartbusiness.lib.Util.cache.setCacheHanaClient(sessionClient);
            return sessionClient;
        },


        /*
         * Replaces all "$$$" set for SAP CLIENT ("P_SAPClient") with HANA SESSION CLIENT
         * Has side effects on the Evaluation Object
         */

        parse_sapclient : function() {
            var e;
            var results;
            var result;
            var SAP_CLIENT;
            var reserved_placeholder;

            /* TODO: get this from an xsjs service
             * something like:
             * var HANA_USER_CLIENT = get_hana_client();
             */
            var HANA_USER_CLIENT = this.get_hana_client();

            e = this.evaluationData;
            SAP_CLIENT = "P_SAPClient";
            reserved_placeholder = "$$$";

            /* expected syntax
             *  evaluationData
             *	|-- FILTERS
             *	|   |-- results[]
             *	|   	|-- NAME
             *	|   	|-- VALUE_1
             */

            if(!e.hasOwnProperty("FILTERS") && !e.FILTERS.hasOwnProperty("results")) {
                return;
            }

            if(e.FILTERS.results.constructor !== Array) {
                return;
            }

            if(e.FILTERS.results.length < 1) {
                return;
            }

            results = e.FILTERS.results;

            for (var i in e.FILTERS.results) {
                var result = results[i];
                if (result["NAME"] === SAP_CLIENT && result["VALUE_1"] === reserved_placeholder) {
                    result["VALUE_1"] = HANA_USER_CLIENT;
                    return;
                }
            }
        }
};


}; // end of sap/suite/ui/smartbusiness/lib/Util.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.formatters') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.formatters");

sap.suite.ui.smartbusiness.lib.formatters = {
		getBundleText : function(oController, iText, iPlaceholder1, iPlaceholder2) {
			var oBundle;

			if (oController === undefined) {
				var oApplicationFacade = sap.ca.scfld.md.app.Application.getImpl().oConfiguration.oApplicationFacade;
				oBundle = oApplicationFacade.getResourceBundle();
			} else {
				oBundle = oController.oApplicationFacade.getResourceBundle();
			}

			var sText = oBundle.getText(iText, [iPlaceholder1, iPlaceholder2]);
			return sText;
		},
		
		kpiStatus : function(state) {
			return (state ? sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS", sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS_ACTIVE")) : sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS", sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS_DRAFT")));
		},
		kpiStatusText : function(state) {
			return (state ? sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS_ACTIVE") : sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "STATUS_DRAFT"));
		},
		kpiStatusState : function(state) {
			return (state ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.None);
		},
		kpiOwner : function(owner) {
			if(owner)
				return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "ADDED_BY", owner);
			return;
		},
		kpiOwnerInOH : function(owner) {
			if(owner)
				return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "OWNER", owner);
			return;
		},
		kpiID : function(id, type) {
			if(id) {
				if(type && type == "KPI") {
					return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "KPI", id);
				}
				else {
					return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, ("OPI ID:" + id));
				}
			}
			return;
		},
		kpiIDInOH : function(id, type) {
			if(id) {
				if(type && type == "KPI") {
					return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "KPI", id);
				}
				else {
					return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, ("OPI: " + id));
				}
			}
			return;
		},
		evalStatus : function(status) {
			try {
				if(status)
					return "Success";
				return "None";
			} catch (e) {
				return;
			}
		},
};


}; // end of sap/suite/ui/smartbusiness/lib/formatters.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.suite.ui.smartbusiness (1.28.28)
 */
jQuery.sap.declare("sap.suite.ui.smartbusiness.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.suite.ui.smartbusiness
 *
 * @namespace
 * @name sap.suite.ui.smartbusiness
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.suite.ui.smartbusiness",
	dependencies : ["sap.ui.core","sap.m"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	noLibraryCSS: true,
	version: "1.28.28"
});


}; // end of sap/suite/ui/smartbusiness/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.mpt.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.mpt.Component");
//jQuery.sap.require("sap.suite.ui.smartbusiness.mpt.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained

//jQuery.sap.require("sap.ushell.Container");

sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.mpt.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("FS", {
		"name" : "Fullscreen Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.mpt",
		"includes" : ["../lib/Util.js", "themes/visualization.css","../Adapter.js"],
			"dependencies" : {
			"libs" : ["sap.m","sap.suite.ui.commons"],
			"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "FULLSCREEN_TITLE",
			"icon" : "sap-icon://Fiori5/F0820",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0820_Edit_Tiles.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.mpt.view",
//	detailPageRoutes : {
//		"noDataView" : {
//			pattern : "noDataView/{contextPath}",
//            view : "emptyView",
//		}
//	},
	fullScreenPageRoutes : {
		// fill the routes to your full screen pages in here.
		"fullscreen" : {
			"pattern" : "",
			"view" : "S1",
		}
	}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.mpt.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/mpt/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.mpt.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.mpt.view.S1.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.mpt.view.S1", {

	onInit : function() {
		var that = this;
		var view = this.getView();
		this.dateFormatter = sap.ui.core.format.DateFormat.getInstance({style:"long"});
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "fullscreen") {
				var context = new sap.ui.model.Context(view.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
				view.setBindingContext(context);
				// Make sure the master is here
			}
		}, this);
		var that = this;
		that.selectedTile = null;
		that.runtimeRef = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices");
		that.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		sap.sb_mpt = that;
		that.byId("tileGrid").getBinding("items").attachDataReceived(function() {
			that.updateChipsCount();
		});
	},

	onAfterRendering: function() {

	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		
		function tileDeleteCallBack() {
			that.getView().getModel().refresh();
			that.selectedTile = null;
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		}
		
		function tileDeleteErrCallBack(d) {
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("CANNOT_DELETE_TILE"), d.response.body);
		}
		
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton: {}, 
				onBack : function(){
					window.history.back();
				},
				oEditBtn : {
					sI18nBtnTxt : "DELETE_TILE",
					onBtnPressed : function(evt) {
						var selectedTiles = that.byId("tileGrid").getSelectedItems();
						if(selectedTiles.length) {
							that.handleDelete(selectedTiles);
						}
						else {
							that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_A_TILE_TO_DELETE"));
						}
					},
					bEnabled : false, // default true
				}
		};
		return this.oHeaderFooterOptions;
	},
	
	_notifyShell : function(chipId) {
        var oService =  sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
        if(oService) {
            oNotifyShell = oService("LaunchPage");
            if(oNotifyShell && oNotifyShell.onCatalogTileAdded) {
                oNotifyShell.onCatalogTileAdded(chipId);
            }
        }
    },
	
	handleDelete: function(tiles) {
		var that = this;
		var obj = [];
		for(var i=0,l=tiles.length; i<l; i++) {
			obj.push({id:tiles[i].getBindingContext().getObject().id});
		}
		
		function tileDeleteCallBack(res) {
			var chipId = null;
			try {
				chipId = JSON.parse(res).chipId;
			}
			catch(e) {
				jQuery.sap.log.error("Failed to parse the response");
			}
			if(chipId) {
				that._notifyShell(chipId);
			}
			that.getView().getModel().refresh();
//			that.selectedTile = null;
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETION_SUCCESSFUL"));
		}
		
		function tileDeleteErrCallBack(d) {
			that.utilsRef.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("CANNOT_DELETE_TILE"), d.response.body);
		}
		
		sap.m.MessageBox.show(
				that.oApplicationFacade.getResourceBundle().getText("WANT_TO_DELETE_SELECTED_TILE"),
				"sap-icon://hint",
				that.oApplicationFacade.getResourceBundle().getText("DELETE"),
				[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
				function(evt){
					if(evt=="OK"){
						that.runtimeRef.handlePersonalizedTileDelete(obj, tileDeleteCallBack, tileDeleteErrCallBack);
					}
					if(evt=="CANCEL"){

					}
				}
		);
	},
	
	updateChipsCount: function() {
		var count = this.byId("tileGrid").getBinding("items").getLength();
		this.byId("chipsTableLabel").setText(this.oApplicationFacade.getResourceBundle().getText("PERS_TILE") + " (" + (count || 0) + ")");
	},
	
	_evalValueMapping: function() {
		return {
			"TA" : "TARGET",
			"CL" : "CRITICAL_LOW",
			"WL" : "WARNING_LOW",
			"CH" : "CRITICAL_HIGH",
			"WH" : "WARNING_HIGH"
		}
	},
	
	prepareFilterArray: function(filters) {
		var groupFilters = {};
		var filtersArr = [];
		var key = "";
		for(var i=0,l=filters.length; i<l; i++) {
			if(filters[i].OPERATOR != 'BT') {
				key = filters[i].NAME + "_" + filters[i].OPERATOR;
				if(groupFilters[key]) {
					groupFilters[key].VALUE_1.push(filters[i].VALUE_1);
				}
				else {
					groupFilters[key] = {};
					groupFilters[key].NAME = filters[i].NAME;
					groupFilters[key].OPERATOR = filters[i].OPERATOR;
					groupFilters[key].VALUE_1 = [filters[i].VALUE_1];
					groupFilters[key].VALUE_2 = "";
				}
			}
			else {
				key = filters[i].NAME + "_" + filters[i].OPERATOR + "_" + filters[i].VALUE_1 + "_" + filters[i].VALUE_2;
				groupFilters[key] = {};
				groupFilters[key].NAME = filters[i].NAME;
				groupFilters[key].OPERATOR = filters[i].OPERATOR;
				groupFilters[key].VALUE_1 = [filters[i].VALUE_1];
				groupFilters[key].VALUE_2 = [filters[i].VALUE_2];
			}
			 
		}
		
		for(var filter in groupFilters) {
			if(groupFilters.hasOwnProperty(filter)) {
				filtersArr.push(groupFilters[filter]);
			}
		}
		return filtersArr;
	},
	
	getTile: function(id,context){
		var that = this;
		var tileContents = [];
		var rBundle = that.oApplicationFacade.getResourceBundle();
		var chipObj = context.getObject();
		var config = {}, tileProperties = {}, evalValues = [], evaluation = {}, additionalFilters = [], addlFilters = [];
		try {
			config = JSON.parse(JSON.parse(chipObj.configuration).tileConfiguration);
			tileProperties = JSON.parse(config.TILE_PROPERTIES);
			evalValues = JSON.parse(config.EVALUATION_VALUES);
			evaluation = JSON.parse(config.EVALUATION);
			additionalFilters = JSON.parse(config.ADDITIONAL_FILTERS);
		}
		catch(e) {
			//sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_PARSE_CHIP_INFO"), (that.oApplicationFacade.getResourceBundle().getText("TILE_TITLE") + " : " + context.getObject().title + "\n" +  that.oApplicationFacade.getResourceBundle().getText("TILE_SUBTITLE") + " : " + context.getObject().description));
			config = config || {};
			tileProperties = tileProperties || {};
			evalValues = evalValues || [];
			evaluation = evaluation || {}; 
			additionalFilters = additionalFilters || [];
			//throw new Error("parsing of Chip Failed");
			jQuery.sap.log.error("parsing of Chip Failed");
		}
		
		var tileType = chipObj.tileType;
		var tileContentByTileType = {
				"NT": function() {
						return new sap.suite.ui.commons.NumericContent({value:"9999", size:sap.suite.ui.commons.InfoTileSize.Auto, scale:"K", valueColor:"Error"});
					},
				"CT": function() {
						return new sap.suite.ui.commons.ComparisonChart({
							scale: "M",
							size:sap.suite.ui.commons.InfoTileSize.Auto,
							data: [new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("USA"), value: 1550}),
							       new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("INDIA"), value: 219.2}),
							       new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("GERMANY"), value: 66.46})]
							});
					},
				"TT" : function(){
						return new sap.suite.ui.commons.MicroAreaChart({
							size:sap.suite.ui.commons.InfoTileSize.Auto,
							width: "164px",
							height: "74px",
							minXValue: 0,
							maxXValue: 100,
							minYValue: 0,
							maxYValue: 100,
							firstXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:rBundle.getText("JAN_01"), color:"Neutral"}),
							lastXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:rBundle.getText("JAN_31"), color:"Neutral"}),
							firstYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"3 M", color:"Error"}),
							lastYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"23 M", color:"Good"}),
							target: new sap.suite.ui.commons.MicroAreaChartItem({
								points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:30}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:40}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:90})]
							}),
							innerMinThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
							innerMaxThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
							minThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
								color:"Error",
								points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
							}),
							maxThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
								color:"Error",
								points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:20}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:30}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:70})]
							}),
							chart: new sap.suite.ui.commons.MicroAreaChartItem({
								points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
								        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
							}),
						});
				},
			"AT": function(){
					return new sap.suite.ui.commons.BulletChart({
						scale: "M",
						size:sap.suite.ui.commons.InfoTileSize.Auto,
						minValue: 0,
						maxvalue: 312,
						targetValue: 150,
						actual: new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
						thresholds: [new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
						             new sap.suite.ui.commons.BulletChartData({value:200, color:"Critical"})]
					});
				},
			"CM": function() {
					return new sap.suite.ui.commons.ComparisonChart({
						scale: "M",
						size:sap.suite.ui.commons.InfoTileSize.Auto,
						data: [new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("MEASURE_1"), value: 34, color: "Good"}),
						       new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("MEASURE_2"), value: 125, color: "Error"}),
						       new sap.suite.ui.commons.ComparisonData({title:rBundle.getText("MEASURE_3"), value: 97, color: "Critical"})]
					});
				},
			"HT": function() {
					return new sap.suite.ui.commons.HarveyBallMicroChart({
						total:100,
						size:sap.suite.ui.commons.InfoTileSize.Auto,
						scale: "M",
						items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
						    	   fraction:30,
						    	   color: "Good"
						       })]
					});
				}
		};
		
		var valueSource = "COLUMN_NAME";
		if(evaluation.VALUES_SOURCE == "FIXED") {
			valueSource = "FIXED";
		}
		
		var evaluationValuesBox = new sap.m.VBox();
		for(var i=0,l=evalValues.length; i<l; i++) {
			if(evalValues[i].TYPE && that._evalValueMapping()[evalValues[i].TYPE]) {
				evaluationValuesBox.addItem(new sap.m.Text({text : rBundle.getText(that._evalValueMapping()[evalValues[i].TYPE]) + " - " + evalValues[i][valueSource]}).addStyleClass("evalValItems"));
			}
		}
		
		if(additionalFilters && additionalFilters.length) {
			addlFilters = that.prepareFilterArray(additionalFilters) || [];
		}
		var additionalFiltersBox = new sap.m.VBox();
		for(var i=0,l=addlFilters.length; i<l; i++) {
			if(jQuery.sap.getUriParameters().get("op")) {
				additionalFiltersBox.addItem(new sap.m.Text({text : addlFilters[i].NAME + " " + addlFilters[i].OPERATOR + " " + addlFilters[i].VALUE_1.join(",")}).addStyleClass("evalValItems"));
			}
			else {
				additionalFiltersBox.addItem(new sap.m.Text({text : addlFilters[i].NAME + " - " + addlFilters[i].VALUE_1.join(",")}).addStyleClass("evalValItems"));
			}
			
		}
		
		var tile = new sap.suite.ui.commons.GenericTile({
			//layoutData: new sap.ui.layout.GridData({span:"L4 M6 S12"}),
			size:sap.suite.ui.commons.InfoTileSize.Auto, 
			header: context.getProperty("title"),
			subheader: context.getProperty("description"),
			customData: [new sap.ui.core.CustomData({key:"tileType",value:context.getProperty("tileType")})],
//			tileContent: new sap.suite.ui.commons.TileContent({content:tileContent}),
			press: function(evt) {
//				that.selectedTile = evt.getSource();
//				var tiles = that.byId("tileGrid").getContent();
//				for(var i=0,l=tiles.length; i<l; i++) {
//					tiles[i].removeStyleClass("sbSelectedTile");
//				}
//				that.selectedTile.addStyleClass("sbSelectedTile");
			}
		}).addStyleClass("sbTile");
		
		if(tileType && (tileType.split("-").length == 2)) {
			 tile.setFrameType("TwoByOne");
		}
		
		if(tileType=="NT") {
			tileContents.push(tileContentByTileType["NT"]());
		}
		else if(tileType=="CT") {
			tileContents.push(tileContentByTileType["CT"]());
		}
			
		else if(tileType=="AT") {
			tileContents.push(tileContentByTileType["AT"]());
		}
			
		else if(tileType=="TT") {
			tileContents.push(tileContentByTileType["TT"]());
		} 
		
		else if(tileType=="HT"){
			tileContents.push(tileContentByTileType["HT"]());
		}
		
		else if(tileType=="CM") {
			tileContents.push(tileContentByTileType["CM"]());
		}
		else if(tileType == "DT-AT") {
            tileContents.push(tileContentByTileType["NT"]());
            tileContents.push(tileContentByTileType["AT"]());
        }
        else if(tileType == "DT-CT") {
        	tileContents.push(tileContentByTileType["NT"]());
            tileContents.push(tileContentByTileType["CT"]());
        }
        else if(tileType == "DT-CM") {
        	tileContents.push(tileContentByTileType["NT"]());
            tileContents.push(tileContentByTileType["CM"]());
        }
        else if(tileType == "DT-TT") {
        	tileContents.push(tileContentByTileType["NT"]());
            tileContents.push(tileContentByTileType["TT"]());
        }
        else if(tileType == "DT-HT") {
        	tileContents.push(tileContentByTileType["NT"]());
            tileContents.push(tileContentByTileType["HT"]());
        }
		
		tile.removeAllTileContent();
		
		for(var i=0,l=tileContents.length; i<l; i++) {
			tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContents[i], size: sap.suite.ui.commons.InfoTileSize.Auto}));
		}
		
		//return tile;
		var deleteButton = new sap.m.Button({
			icon:"sap-icon://sys-cancel",
			type:sap.m.ButtonType.Transparent,
			press: function(evt) {
				that.handleDelete(this);
			}
		});
		
		var cells = [tile,
		             evaluationValuesBox,
		             additionalFiltersBox,
		             new sap.m.Text({text: this.dateFormatter.format(new Date(chipObj.createdOn)), visible:true}),
		             //deleteButton
		             ];

		var columnListItem = new sap.m.ColumnListItem({
			type: "Inactive",
			cells: cells
		}); 
		
		return columnListItem;
	},
	
	searchTile: function(evt) {
		var searchValue = "'" + evt.getParameter("query").toLowerCase() + "'";
		var oFilterTitle = new sap.ui.model.Filter("tolower(title)", sap.ui.model.FilterOperator.Contains,searchValue);
		var oFilterSubtitle = new sap.ui.model.Filter("tolower(description)", sap.ui.model.FilterOperator.Contains,searchValue);
		var oBinding = this.byId("tileGrid").getBinding("items");
		oBinding.filter(new sap.ui.model.Filter([oFilterTitle, oFilterSubtitle], false));
	},
	
	setSorting: function(key, groupDescending) {
		groupDescending = groupDescending || false;
		var list = this.getView().byId("tileGrid");
		if(key == "tileType") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("tileType",groupDescending,null)]); 
		}
		else if(key == "title") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("title",groupDescending,null)]);
		}
		else if(key == "subtitle") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("description",groupDescending,null)]);
		}
		else if(key == "creation") {
			list.getBinding("items").sort([new sap.ui.model.Sorter("createdOn",groupDescending,null)]);
		}
		else if(key == "none") {
			list.getBinding("items").sort([]);
		}
	},

	setFiltering: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("tileGrid");

		var filterObject = {
				"NT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'NT')),
				"CT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CT')),
				"AT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'AT')),
				"TT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'TT')),
				"CM": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CM')),
				"HT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'HT')),
				"DT-CM" : (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CM')), 
                "DT-CT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CT')),
                "DT-AT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-AT')),
                "DT-TT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-TT'))
		};
		
		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray, true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
		
	},
	
	setFilteringN: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("tileGrid");

		var filterObject = {
				"NT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'NT')),
				"CT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CT')),
				"AT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'AT')),
				"TT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'TT')),
				"CM": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'CM')),
				"HT": (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'HT')),
				"DT-CM" : (new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CM')), 
                "DT-CT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-CT')),
                "DT-AT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-AT')),
                "DT-TT" :(new sap.ui.model.Filter("tileType", sap.ui.model.FilterOperator.EQ, 'DT-TT'))
		};
		
		filtersArray = this.getFilterArrayN(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray, true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},
	
	getFilterArrayN: function(items, filterObject) {
  	  var filtersArray = [];
  	  var filters = {}, key, pKey;
  	  for(var i=0,l=items.length; i<l; i++) {
  		  key = items[i].getDependents()[0].getText();
  		  pKey = "tileType";
  		  filters[pKey] = filters[pKey] || [];
  		  filters[pKey].push(filterObject[key]);
  	  } 

  	  for(var filter in filters) {
  		  filtersArray.push(new sap.ui.model.Filter(filters[filter], false));
  	  }
  	  return filtersArray;
    },

	
	handleSortPress: function() {
		var that = this;
		this.sortOptionsDialog = this.sortOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
						key: "tileType"
					}), 
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("TITLE"),
						key: "title"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("SUBTITLE"),
						key: "subtitle"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("CREATION_TIME"),
						key: "creation"
					}),
					new sap.m.ViewSettingsItem({
						text: that.oApplicationFacade.getResourceBundle().getText("NONE"),
						key: "none"
					})
					],
			confirm : function(evt) {
				if(evt.getParameter("sortItem")) {
					that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
            	}
			}
		});
		this.sortOptionsDialog.open();
	},
	
	handleFilterPressN: function() {
		var that = this;
		this.filterOptionsDialog = this.filterOptionsDialog || new sap.m.SelectDialog({
			id: this.createId("filterOptionsDialog"),
			title: "Filter By",
			multiSelect: true,
			rememberSelections: true,
			items: [
			  new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("NUMERIC_TILE"),
	        	  dependents: [ new sap.m.Label({text:"NT"})]
	        	  //key: "NT"
	          }),
	          new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_TILE"),
	        	  dependents: [ new sap.m.Label({text:"CT"})]
	        	  //key: "CT"
	          }),
	          new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("TREND_TILE"),
	        	  dependents: [ new sap.m.Label({text:"TT"})]
	        	  //key: "TT"
	          }),
	          new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("ACTUAL_VS_TARGET_TILE"),
	        	  dependents: [ new sap.m.Label({text:"AT"})]
	        	  //key: "AT"
	          }),
	          new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_MM_TILE"),
	        	  dependents: [ new sap.m.Label({text:"CM"})]
	        	  //key: "CM"
	          }),
	          new sap.m.StandardListItem({
	        	  title: that.oApplicationFacade.getResourceBundle().getText("HARVEY_BALL_TILE"),
	        	  dependents: [ new sap.m.Label({text:"HT"})]
	        	  //key: "HT"
	          }),
              new sap.m.StandardListItem({
            	  title: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_TILE"),
            	  dependents: [ new sap.m.Label({text:"DT-CT"})]
            	  //key: "DT-CT"
              }),
              new sap.m.StandardListItem({
            	  title: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_MM_TILE"),
            	  dependents: [ new sap.m.Label({text:"DT-CM"})]
            	  //key: "DT-CM"
              }),
              new sap.m.StandardListItem({
            	  title: that.oApplicationFacade.getResourceBundle().getText("DUAL_DEVIATION_TILE"),
            	  dependents: [ new sap.m.Label({text:"DT-AT"})]
            	  //key: "DT-AT"
              }),
              new sap.m.StandardListItem({
            	  title: that.oApplicationFacade.getResourceBundle().getText("DUAL_TREND_TILE"),
            	  dependents: [ new sap.m.Label({text:"DT-TT"})]
            	  //key: "DT-TT"
              })
			 ],
			 confirm: function(evt) {
				 var infoBarText = "";
				 var selectedFilters = evt.getParameter("selectedItems");

				 that.setFilteringN(selectedFilters);

				 if(selectedFilters && selectedFilters.length) {
					 var filterObj = {};
					 for(var i=0,l=selectedFilters.length; i<l; i++) {
						 var key = selectedFilters[i].getDependents()[0].getText();
						 filterObj[key] = filterObj[key] || "";
						 filterObj[key] += (filterObj[key]) ? (",") : "";
						 filterObj[key] += selectedFilters[i].getTitle(); 
					 }

					 for(var filter in filterObj) {
						 if(filterObj.hasOwnProperty(filter)) {
							 infoBarText += (infoBarText) ? ", " : "";
							 infoBarText += filterObj[filter];
						 }
					 }
					 infoBarText = that.oApplicationFacade.getResourceBundle().getText("FILTERED_BY") + " : " + infoBarText;
					 that.byId("filterToolbar").setVisible(true);
					 that.byId("mptInfo").setText(infoBarText);	
				 }
				 else {
					 that.byId("mptInfo").setText("");
					 that.byId("filterToolbar").setVisible(false);
				 }

			 }
		});
		this.filterOptionsDialog.open();
	},
	
	handleFilterPress: function() {
		var that = this;
		this.filterOptionsDialog = this.filterOptionsDialog || new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("TILE_TYPE"),
			            	  key: "tileType",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("NUMERIC_TILE"),
			            	        	  key: "NT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_TILE"),
			            	        	  key: "CT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("TREND_TILE"),
			            	        	  key: "TT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("ACTUAL_VS_TARGET_TILE"),
			            	        	  key: "AT"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("COMPARISON_MM_TILE"),
			            	        	  key: "CM"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("HARVEY_BALL_TILE"),
			            	        	  key: "HT"
			            	          }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_TILE"),
                                          key: "DT-CT"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_COMPARISON_MM_TILE"),
                                          key: "DT-CM"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_DEVIATION_TILE"),
                                          key: "DT-AT"
                                      }),
                                      new sap.m.ViewSettingsItem({
                                          text: that.oApplicationFacade.getResourceBundle().getText("DUAL_TREND_TILE"),
                                          key: "DT-TT"
                                      })
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("mptInfo").setText(infoBarText);	
			            	  }
			            	  else {
			            		  that.byId("mptInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		this.filterOptionsDialog.open();
	}
	
});

}; // end of sap/suite/ui/smartbusiness/mpt/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Generic') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Generic");

sap.ui.core.Control.extend("sap.suite.ui.smartbusiness.tiles.Generic", {
    metadata : {
        properties : {
            evaluationId : "string",
            associationEvaluationId : {
                type : "string",
                defaultValue : null
            },
            header : "string",
            subheader : "string",
            mode : {
                type : "string",
                defaultValue : "RUNTIME"
            },
            size : {
                type : "string",
                defaultValue : "S"
            },
            dimension : {
                type : "string",
                defaultValue : null
            },
            frameType : {
                type : "string",
                defaultValue :"OneByOne"
            },
            contentOnly : {
            	type : "boolean",
            	defaultValue : false
            },
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true
            },
            sapSystem : {
                type : "string",
                defaultValue : null
            },
            additionalFilters : {
                type: "object",
                defaultValue: {}
            	
            },
            visible : {
                type : "boolean",
                defaultValue : true
            },
            click : {
                type : "boolean",
                defaultValue: true
            },
            onNavigation : {
            	type : "function",
            	defaultValue: null
            },
            tileConfiguration : {
            	type : "object",
            	defaultValue : null
            	/** Expected Format
            	 {
            	 	MEASURES : [
            	  		{name : 'X', color : <SemanticName>}
            	  	],
            	  	SORTING : {
            	  		order : 'asc/desc',
            	  		by : 'M/D'
            	  	}, 
            	  	
            	 }
            	 */
            }
        },
        events : {
        	navigation : {}
        },
        aggregations : {
            _tile : {
                type:"sap.ui.core.Control",
                multiple:false,
                visibility : "hidden"
            }
        }
    }
});
sap.suite.ui.smartbusiness.tiles.Generic.Mode = {
        "RUNTIME" : "RUNTIME",
        "DUMMY" : "DUMMY",
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype._addSystemAliasToUri = function(uri, sysAlias) {
	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
		var parsingService = sap.ushell.Container.getService("URLParsing");
		if(parsingService) {
			uri = parsingService.addSystemToServiceUrl(uri, sysAlias);
		}
	}
	return uri;
}; 
sap.suite.ui.smartbusiness.tiles.Generic.prototype.init = function () {
    this._oScalingFactor = {
            "0" : "",    
            "3" : "Kilo",
            "6" : "Million",
            "9" : "Billion",
            "-9" : "Nano",
            "-6" : "Micro",
            "-3" : "Milli"
    };
    this.EVALUATION_DATA = null;
    this.evaluationApi = null;
    this.THRESHOLD_MAPPING = {
        "TA" : {
            prop : 'TARGET_VALUE',
        },
        "CL" : {
            prop : 'CRITICAL_LOW_VALUE'
        },
        "CH" : {
            prop : 'CRITICAL_HIGH_VALUE'
        },
        "WL" : {
            prop : 'WARNING_LOW_VALUE'
        },
        "WH" : {
            prop : 'WARNING_HIGH_VALUE'
        },
        "TC" : {
            prop : 'TREND_VALUE',
        },
        "RE" : {
            prop : "REFERENCE_VALUE"
        }
    };
    for(var each in this.THRESHOLD_MAPPING) {
        var prop = this.THRESHOLD_MAPPING[each].prop;
        this[prop] = null;
    }
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        
    }));
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering = function () {
    //do nothing
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._initODataMetadata = function() {
	var serviceUrl = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    var oProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(serviceUrl, this.evaluationApi.getEntitySet());
    var columns = [];
    columns.push(this.evaluationApi.getKpiMeasureName());
    if(this.getDimension()) {
        columns.push(this.getDimension()); 
    }
    this.LABEL_PROPERTY_MAPPING = oProperties.getLabelMappingObject();
    this.TEXT_PROPERTY_MAPPING = oProperties.getTextPropertyMappingObject();
    this.UOM_PROPERTY_MAPPING = oProperties.getUnitPropertyMappingObject();
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.renderTile = function() {
    var evaluationId = this.getEvaluationId();
    if(this.isAssociatedKpi()) {
        evaluationId  = this.getAssociationEvaluationId();
    }
    this.setLoadingState();
    this.oData_Call_Ref_Evaluation_Details = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.getEvaluationById({
        id : evaluationId,
        cache : true,
        filters : true,
        thresholds : true,
        sapSystem : this.getSapSystem(),
        success : function(evaluationData) {
            if(evaluationData.ID) {
                this.EVALUATION_DATA = evaluationData;
                if (this.EVALUATION_DATA.hasOwnProperty("DECIMAL_PRECISION") &&
                		(typeof this.EVALUATION_DATA.DECIMAL_PRECISION == "undefined")) {
                	/* default to AUTO */
                	this.EVALUATION_DATA.DECIMAL_PRECISION = -1;
                }
                this.evaluationApi = sap.suite.ui.smartbusiness.lib.Util.kpi.parseEvaluation(evaluationData);
                this.evaluationApi.parse_sapclient();
                this._initODataMetadata();
                this._fetchKpiValue(function() {
                    if(!this.getVisible()){
                        //this.$().hide(1000);
                        this.$().css("opacity","0.2");
                    }
                    else{
                        this.$().show(1000);
                       //this.$().css("display", "inline-block");
                    }
                    if(this.getClick())
                        this.$().off("click");
                    else
                        this.$().click(function(){
                            return false;
                        });
                    this._initThresholdPopOver();
                    try {
                        this.doProcess();
                    } catch(e) {
                        jQuery.sap.log.error("Error in doProcess() : "+ e.message);
                        this.setFailedState();
                    }
                });
            } else {
                this.logError("Empty results for evaluation Id : "+evaluationId);
            }
        },
        error : function(errorMessage) {
            this.logError(errorMessage);
        },
        context : this
    })
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._getOtherThresholdMeasures = function() {
    var thresholds = this.EVALUATION_DATA.VALUES.results;
    var mObject = {};
    if(this.evaluationApi.getThresholdValueType() == "MEASURE" || this.evaluationApi.getThresholdValueType() == "RELATIVE") {
        thresholds.forEach(function(threshold) {
            var sMeasureColumn = threshold.COLUMN_NAME;
            if(sMeasureColumn) {
            	var tType = this.THRESHOLD_MAPPING[threshold.TYPE];
            	if(tType) {
                    mObject[tType.prop] = sMeasureColumn;
            	}
            }
        },this);
        return mObject;
    } else {
        thresholds.forEach(function(threshold) {
            var tType = this.THRESHOLD_MAPPING[threshold.TYPE];
            if(tType) {
                this[tType.prop] = threshold.FIXED;
            }
        }, this);
        return null;
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._getThresholdsValues = function(queryResult, thresholdMeasures) {
    if(thresholdMeasures) {
        for(var each in thresholdMeasures) {
            this[each] = queryResult[thresholdMeasures[each]];
        }
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._fetchKpiValue = function(sCallback) {
    if(this.getKpiValueRequired()) {
        var kpiMeasure = this.evaluationApi.getKpiMeasureName();
        var thresholdMeasures = this._getOtherThresholdMeasures();
        var kpiMeasures = [kpiMeasure];
        if(thresholdMeasures) {
            kpiMeasures.push(this.evaluationApi.getKpiMeasureName());
            for(var each in thresholdMeasures) {
                kpiMeasures.push(thresholdMeasures[each]);
            }
        }
        var uom = this.UOM_PROPERTY_MAPPING[kpiMeasure];
        var urlFilters = this.getUrlFilters();
        var evaluationFilters = this.evaluationApi.getFilters()["results"];
        var oQueryUri = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
            serviceUri : this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem()),
            entitySet : this.evaluationApi.getEntitySet(),
            measure : kpiMeasures,
            dimension : null,
            filter : this.getAllFilters()
        });
        var oThis = this;
        var evaluationId = this.getEvaluationId();
        if(this.isAssociatedKpi()) {
            evaluationId  = this.getAssociationEvaluationId();
        }
        this.Fetch_Kpi_Value_Success = function(data) {
            if(data && data.results.length && data.results[0][kpiMeasure]) {
                var results = data.results[0];
                oThis.KPI_VALUE = results[kpiMeasure];
                oThis.UOM = "";
                if(uom) {
                    oThis.UOM = results[uom];
                }
                oThis._getThresholdsValues(results, thresholdMeasures);
                // entering data into cache
                sap.suite.ui.smartbusiness.lib.Util.cache.setKpiDetailsById(evaluationId,data);
                // removing from current_calls 
              
				if(oThis.evaluationApi.getThresholdValueType() =="MEASURE"){
					var i, valuesObject = oThis.evaluationApi.getValues().results;
					for(i=0;i<valuesObject.length;i++){
						if(valuesObject[i].TYPE == "WL"){
							oThis.WARNING_LOW_VALUE = results[valuesObject[i].COLUMN_NAME];
						}
						if(valuesObject[i].TYPE == "CL"){
							oThis.CRITICAL_LOW_VALUE = results[valuesObject[i].COLUMN_NAME];    
						}
						if(valuesObject[i].TYPE == "CH"){
							oThis.CRITICAL_HIGH_VALUE = results[valuesObject[i].COLUMN_NAME];
						}
						if(valuesObject[i].TYPE == "WH"){
							oThis.WARNING_HIGH_VALUE = results[valuesObject[i].COLUMN_NAME];
						}
					}
				}
				else if(oThis.evaluationApi.getThresholdValueType() =="RELATIVE"){
					var i, targetValue, valuesObject = oThis.evaluationApi.getValues().results;
					for(i=0;i<valuesObject.length;i++){
						if(valuesObject[i].TYPE == "TA"){
							targetValue = results[valuesObject[i].COLUMN_NAME]
							break;
						}
					}

					for(i=0;i<valuesObject.length;i++){
						if(valuesObject[i].TYPE == "WL"){
							oThis.WARNING_LOW_VALUE = Number(targetValue)*valuesObject[i].FIXED/100;
						}
						if(valuesObject[i].TYPE == "CL"){
							oThis.CRITICAL_LOW_VALUE = Number(targetValue)*valuesObject[i].FIXED/100;    
						}
						if(valuesObject[i].TYPE == "CH"){
							oThis.CRITICAL_HIGH_VALUE = Number(targetValue)*valuesObject[i].FIXED/100;
						}
						if(valuesObject[i].TYPE == "WH"){
							oThis.WARNING_HIGH_VALUE = Number(targetValue)*valuesObject[i].FIXED/100;
						}
					}
				}
              
                if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]) {
                    var x = sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
                    delete sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId];
                    x.resolve();
                    
                }
                sCallback.call(oThis);
                
            } else {
                oThis.setNoData();
            }
        };
   
        this.Fetch_Kpi_Value_Fail = function(errObject) {
            if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]){
                sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId].reject();
            }
            oThis.logError("Error Fetching Kpi Value : "+oQueryUri.uri);
        };
        var fromCache = sap.suite.ui.smartbusiness.lib.Util.cache.getKpiDetailsById(evaluationId);
        //checking if data exists in cache or not
        if(fromCache) {
            this.Fetch_Kpi_Value_Success(fromCache);
        }
        //if the call is currently in progress
        else if(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]){
            jQuery.when(sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId]).then(function() {
                var data = sap.suite.ui.smartbusiness.lib.Util.cache.getKpiDetailsById(evaluationId);
                oThis.Fetch_Kpi_Value_Success(data);
            },function(errorMessage){oThis.logError(errorMessage)});
        }
        else {
            sap.suite.ui.smartbusiness.lib.Util.cache.current_calls[evaluationId] = jQuery.Deferred();
            this.OData_Call_Ref_Fetch_Kpi_Value = oQueryUri.model.read(oQueryUri.uri, null, null, true, this.Fetch_Kpi_Value_Success,this.Fetch_Kpi_Value_Fail);
        }
    } else {
        sCallback.call(this, null);
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getAllFilters = function() {
	   //return this.getUrlFilters().concat(this.evaluationApi.getFilters()["results"]);
		var evaluationFilters = this.evaluationApi.getFilters()["results"]|| [];
		var urlFilters=this.getAdditionalFilters()||[];
		var tmp={};
		urlFilters.forEach(function(o){
			tmp[o.NAME]=true;
		});
		return urlFilters.concat(evaluationFilters.filter(function(o){
			return !tmp[o.NAME];
		}));     
	   return ret;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getUrlFilters = function() {
    var params = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]/*Excludes array keys*/);
    var urlFilters = [];
    for (var key in params) {
        var aFilterValues = params[key];
        if(aFilterValues && aFilterValues.length) {
            aFilterValues.forEach(function(sFilterValue) {
                var Obj = {};
                Obj["NAME"] = key;
                Obj["OPERATOR"] = "EQ";
                Obj["VALUE_1"] = sFilterValue;
                Obj["VALUE_2"] = "";
                Obj["TYPE"] = "FI";
                urlFilters.push(Obj);
            });
        }
    }
    return urlFilters;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onAfterRendering = function () {
    try {
        if(this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
            this.renderTile();
        } else {
            this.doDummyProcess();
        }
    } catch(e) {
        jQuery.sap.log.error(e);
        this.setFailedState();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.numberOfLeadingZeros = function(num) {
    num = String(num);
    var count = 0;
    var decimal_index = num.indexOf('.');
    if (decimal_index == -1) return 0;
    if(Number(num.split('.')[0]) != 0)
        return 0;
    var i = decimal_index + 1;
    while(num[i++] == '0') {
        ++count;
    }
    return count;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.formatValue = function(value, scalingFactor, MAX_LEN) {
    MAX_LEN= MAX_LEN || 4;
    var unit={3:"K",6:"M",9:"B",12:"T",0:""};
    unit["-3"] = "m";
    unit["-6"] = "u";
    unit["-9"] = "n";
    unit["-12"] = "t";
    unit["-2"] = "%";
    var temp,pre,suff;
    temp=Number(value).toPrecision(MAX_LEN);
    var zeroes = this.numberOfLeadingZeros(temp);
    if(zeroes > 0 && scalingFactor < 0){
        pre = temp*Math.pow(10,zeroes+MAX_LEN);
        suff = -(zeroes+MAX_LEN);
    }
    else
    {
        pre=Number(temp.split("e")[0]);
        suff=Number(temp.split("e")[1])||0;
    }
    if(!value && value!=0)
        return {value:"",unitPrefix:""};
        if(scalingFactor>=0)
        {
            if(suff%3!=0){
                if(suff%3==2){
                    if(suff+1==scalingFactor){
                        suff=suff+1;
                        pre=pre/10;
                    }
                    else{
                        suff=suff-2;
                        pre=pre*100;
                    }
                }
                else{
                    if(suff+2==scalingFactor){
                        suff=suff+2;
                        pre=pre/100;
                    }
                    else{
                        suff--;
                        pre=pre*10;
                    }
                }
            }


            else if(suff==15){
                pre=pre*1000;
                suff=12;
            }
        }
        // for negative scale factor and suff
        else{
        	if (scalingFactor=="-2"){
        		var x = this.formatValue((value*100),0);
            }
            else if (suff>=0 && value<10 && scalingFactor=="-3"){
                pre = value*Math.pow(10,3);
                suff = -3;
            }
            else if(suff>=0)
                return this.formatValue(value,0);

            else{
                suff = Math.abs(suff);
                scalingFactor = Math.abs(scalingFactor);
                if(scalingFactor > suff){
                    pre = pre/(Math.pow(10,suff%3));
                    suff = suff - (suff%3);
                }
                else{
                    var diff = suff - scalingFactor;
                    pre = pre/(Math.pow(10,diff));
                    suff  = suff - diff;
                }
                suff = 0-suff;
            }

        }
        // ending of neg scale factor
        pre+="";
        if(scalingFactor=="-2"){
            var valstr = (x.unitPrefix == "") ? Number(x.value+"").toFixed(4 - (x.value+"").indexOf('.')) : Number(x.value+"").toFixed(3 - (x.value+"").indexOf('.')) ;
            return {value:Number(valstr),unitPrefix:(x.unitPrefix)+unit[-2]};
        }
        pre = Number(pre).toFixed(4 - pre.indexOf('.'));
        return {value:Number(pre),unitPrefix:unit[suff]};
   
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.formatOdataObjectToString = function (value){
    if(value && value.constructor == Object){
        if(value.__edmType=="Edm.Time"){
            var milliseconds = value.ms;
            var seconds = Math.floor((milliseconds / 1000) % 60 );
            var minutes = Math.floor((milliseconds / 60000) % 60);
            var hours   = Math.floor((milliseconds / 3600000) % 24);
            return hours+"H"+minutes+"M"+seconds+"S";
        }
    }
    return value;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getScalingFactorMapping = function() {
    return this._oScalingFactor;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.isAssociatedKpi = function(){
    if(this.getAssociationEvaluationId() && (this.getAssociationEvaluationId() !== this.getEvaluationId())){
        return true;
    }
    return false;
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getTileControl = function() {
    return this.getAggregation("_tile");
};  
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setFailedState = function() {
	if(this.getTileControl().setState) {
	    this.getTileControl().setState(sap.suite.ui.commons.LoadState.Failed);
	}
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setLoadingState = function() {
	if(this.getTileControl().setState) {
		this.getTileControl().setState(sap.suite.ui.commons.LoadState.Loading);
	}
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setDoneState = function() {
	if(this.getTileControl().setState) {
		this.getTileControl().setState(sap.suite.ui.commons.LoadState.Loaded);
	}
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype.logError = function(errorMessage) {
    jQuery.sap.log.error(errorMessage);
    this.setFailedState();
}; 
sap.suite.ui.smartbusiness.tiles.Generic.prototype.setNoData = function(){
	this.getModel().setProperty('/footerNum',"No data available");
	this.getModel().setProperty('/footerComp',"No data available");
	this.getModel().setProperty('/header',this.EVALUATION_DATA.INDICATOR_TITLE);
	this.getModel().setProperty('/subheader',this.EVALUATION_DATA.TITLE);	
	this.setDoneState();
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.abortODataCalls = function() {
    var _abort = function(ref) {
        if(ref) {
            ref.abort();
        }
    };
    _abort(this.comparisionChartODataRef);
    _abort(this.OData_Call_Ref_Fetch_Kpi_Value);
    _abort(this.areaChartODataRef);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.onExit = function() {
    this.abortODataCalls();
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype.isACurrencyMeasure = function(measure) {
	jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Util");
	var sUri = this.EVALUATION_DATA.ODATA_URL;
	var entitySet = this.EVALUATION_DATA.ODATA_ENTITYSET;
	return sap.suite.ui.smartbusiness.lib.Util.odata.getFormattingMetadata(sUri, entitySet, measure)._hasCurrency;
};

sap.suite.ui.smartbusiness.tiles.Generic.prototype.libFormat = function(n, isACurrencyMeasure, currencyCode, overridePercentScaling) {
	isACurrencyMeasure = isACurrencyMeasure || false;
	currencyCode = currencyCode || null;
	overridePercentScaling = overridePercentScaling || false;
	var scaling = this.EVALUATION_DATA.SCALING;
	if (overridePercentScaling) {
		scaling = 0;
	}
	jQuery.sap.require("sap.suite.ui.smartbusiness.lib.Formatter");
	return sap.suite.ui.smartbusiness.lib.Formatter.getLocaleFormattedValue(
			Number(n), scaling, this.EVALUATION_DATA.DECIMAL_PRECISION, isACurrencyMeasure, currencyCode);
};

/**
 * Dummy Department Below
 */

sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForNumericTile = function() {
    var data = {  
        subheader : "Expenses by Region",
        header : "Comparative Annual Totals",
        footerNum : "",
        footerComp : "",
        scale: "M",
        unit: "EUR",
        value: "10.34",
        size:"Auto",
        color:"Good",
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForBulletTile = function() {
    var data =  {
        subheader : "Lorem Epsom" ,
        header : "Lorem Epsom" ,
        footerNum : "",
        footerComp : "Compare across regions",
        frameType:"OneByOne",
        scale: "M",
        actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
        targetValue: 100,
        thresholds: [
                     { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                     { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                     { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                     { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                     ],
                     showActualValue: true,
                     showTargetValue: true
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForComparisonTile = function(){
    var data = {
        subheader : "Expenses By Region",
        header : "Comparative Anual Totals",
        footerNum : "",
        footerComp : "Compare across regions",
        scale: "MM",
        unit: "EUR",
        value: 8888,
        data: [
               { title: "Americas", value: 10},
               { title: "EMEA", value: 50},
               { title: "APAC", value: -20}
               ],
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForMeasureComparisonTile = function(){
    var data = {
        subheader : "Lorem Epsom",
        header : "Lorem Epsom",
        footerNum : "",
        footerComp : "Compare across regions",
        scale: "M",
        unit: "EUR",
        value: 8888,
        data: [
               { title: "Measure 1", value: 50, color: "Good" },
               { title: "Measure 2", value: -20, color: "Error" },
               { title: "Measure 3", value: 10, color: "Critical" }
               ],
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.getDummyDataForAreaChartTile = function(){
    var data = {
        subheader: "Expenses By Region",
        header: "Comparative Anual Totals",
        footerNum: "",
        footerComp: "Compare across regions",
        scale: "MM",
        unit: "EUR",
        value: 8888,
        size: "S",
        frameType: "OneByOne",
        state: sap.suite.ui.commons.LoadState.Loaded,
        title: "US Profit Margin",
        footer: "Current Quarter",
        description: "Maximum deviation",
        width: "100%",
        height: "100%",
        chart: {
            color: "Good",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 20
            }, {
                day: 60,
                balance: 20
            }, {
                day: 100,
                balance: 80
            }]
        },
        target: {
            color: "Error",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 30
            }, {
                day: 60,
                balance: 40
            }, {
                day: 100,
                balance: 90
            }]
        },
        maxThreshold: {
            color: "Good",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 40
            }, {
                day: 60,
                balance: 50
            }, {
                day: 100,
                balance: 100
            }]
        },
        innerMaxThreshold: {
            color: "Error",
            data: []
        },
        innerMinThreshold: {
            color: "Neutral",
            data: []
        },
        minThreshold: {
            color: "Error",
            data: [{
                day: 0,
                balance: 0
            }, {
                day: 30,
                balance: 20
            }, {
                day: 60,
                balance: 30
            }, {
                day: 100,
                balance: 70
            }, ]
        },
        minXValue: 0,
        maxXValue: 100,
        minYValue: 0,
        maxYValue: 100,
        firstXLabel: {
            label: "June 123",
            color: "Error"
        },
        lastXLabel: {
            label: "June 30",
            color: "Error"
        },
        firstYLabel: {
            label: "0M",
            color: "Good"
        },
        lastYLabel: {
            label: "80M",
            color: "Critical"
        },
        minLabel: {},
        maxLabel: {}
    };
    return this._cleanUpDummyData(data);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._cleanUpDummyData = function(data) {
    /*
    if(!this.isAssociatedKpi()) {
        data.header = "";
        data.subheader = "";
    }*/
    data.header = this.getHeader() || "Lorem Epsom";
    data.subheader = this.getSubheader() || "Lorem Epsom";
    return data;
};
sap.suite.ui.smartbusiness.tiles.GenericRenderer = {};
sap.suite.ui.smartbusiness.tiles.GenericRenderer.render = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("drilldownKpiTile");
    oRm.writeClasses();
    oRm.write(">");
    oRm.renderControl(oControl.getTileControl());
    oRm.write("</div>");
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._closePopover = function() {
    if(this._popOver.isOpen()) {
        this._popOver.close();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype._initThresholdPopOver = function() {
    var model = new sap.ui.model.json.JSONModel(modelData);
    var modelData = {"THRESHOLDS":[]};
    var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    jQuery.sap.require("sap.ui.core.format.NumberFormat");
    this.VALUE_FORMATTER = sap.ui.core.format.NumberFormat.getFloatInstance({
    			style: "standard"
    		},locale);
    var thresholdList = new sap.m.List({
    });
    thresholdList.bindItems("/THRESHOLDS", new sap.m.ObjectListItem({
        title : "{name}",
        number : "{value}",
        numberState : sap.ui.core.ValueState.None
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = {} ; 
	thresholdVals.targetVal = this.TARGET_VALUE ;
	thresholdVals.critLowVal = this.CRITICAL_LOW_VALUE ;
	thresholdVals.warnLowVal = this.WARNING_LOW_VALUE ;
	thresholdVals.critHighVal = this.CRITICAL_HIGH_VALUE ;
	thresholdVals.warnHighVal = this.WARNING_HIGH_VALUE ;
	
    if(this.evaluationApi.getScaling() == -2) {    	
//    	if(this.evaluationApi.getThresholdValueType() == "FIXED") {
//    		for(var each in thresholdVals) {
//    			if(thresholdVals[each])
//    				thresholdVals[each] = thresholdVals[each] + " %" ;
//    		}
//    	} else if(this.evaluationApi.getThresholdValueType() == "MEASURE") {
//    		for(var each in thresholdVals) {
//    			if(thresholdVals[each]) {
//    				var otemp = this.formatValue(thresholdVals[each], "-2") ;
//    				thresholdVals[each] = otemp.value + otemp.unitPrefix ;
//    			}    				
//    		}
//    	}
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				//var otemp = sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleFormattedValue((thresholdVals[each]*100), -2);
				thresholdVals[each] = (thresholdVals[each]*100) + " %" ;
			}    				
		}
    } 
    
    if(this.evaluationApi.isMaximizingKpi()) {
        if(thresholdVals.targetVal != undefined)
	    	modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
        if(thresholdVals.warnLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnLowVal)
	        });
        if(thresholdVals.critLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critLowVal)
	        });
    } else if(this.evaluationApi.isMinimizingKpi()) {
    	if(thresholdVals.critHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critHighVal)
	        });
    	if(thresholdVals.warnHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnHighVal)
	        });
    	if(thresholdVals.targetVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
    } else if(this.evaluationApi.isTargetKpi()) {
    	if(thresholdVals.critHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL_HIGH_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critHighVal)
	        });
    	if(thresholdVals.warnHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING_HIGH_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnHighVal)
	        });
    	if(thresholdVals.targetVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
    	if(thresholdVals.warnLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING_LOW_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnLowVal)
	        });
    	if(thresholdVals.critLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL_LOW_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critLowVal)
	        });
    }
    
    model.setData(modelData);
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text:this.getModel("i18n").getProperty("THRESHOLD_LABEL")
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(this._closePopover, this)
            })]
    });
    this._popOver = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._popOver, true);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.showThresholds = function(){
    this._popOver.openBy(this);
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.tilePressed = function() {
    if(!this.isAssociatedKpi() && this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
    	if(this.getTileType()=="NT" || this.getTileType() == "AT") {
            this.showThresholds();
         }
    	else if(this.getTileType() == "TT") {
        	this.showTTPopup && this.showTTPopup();
        }
    	else if(this.getTileType() == "CT") {
        	this.showCTPopup && this.showCTPopup();
        }
    	else if(this.getTileType() == "CM") {
        	this.showCMPopup && this.showCMPopup();
        }
    }
    //tiles should navigate to the drilldown of associated evaluations
    else if(this.isAssociatedKpi() && this.getMode() == sap.suite.ui.smartbusiness.tiles.Generic.Mode.RUNTIME) {
    	var startupParam = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
    	var appParam = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getApplicationParameters(["viewId"]);
    	startupParam["evaluationId"] = [];
    	startupParam["chipId"] = [];
    	var evalId = this.getAssociationEvaluationId();
    	startupParam.evaluationId.push(evalId);
    	jQuery.sap.require("sap.suite.ui.smartbusiness.Configuration");
    	startupParam.chipId.push(sap.suite.ui.smartbusiness.Configuration.Constants.SMARTBUSINESS_NULL_VALUE);
    	sap.suite.ui.smartbusiness.drilldown.lib.Hash.setApplicationParameters(appParam, false);
    	sap.suite.ui.smartbusiness.drilldown.lib.Hash.setStartupParameters(startupParam, false);
    	var configuration = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.getConfigurationFromCache(evalId);
    	try {
        	if(configuration) {
        		configurationApi = sap.suite.ui.smartbusiness.drilldown.lib.Configuration.parse(evalId, configuration);
        		if(configurationApi) {
        			var defaultView =  configurationApi.getDefaultView();
        			if(defaultView) {
        				var viewId = defaultView.getId();
        				if(viewId) {
        					this.fireNavigation();
        					sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateApplicationParameters({"viewId" : [viewId]}, false);
        				}
        			}
        		}
        	}
    	} catch(e) {
    		//Just to handle Exception
    	}
    	this.fireNavigation()
    	sap.suite.ui.smartbusiness.drilldown.lib.Hash.updateHash();
    }
};
sap.suite.ui.smartbusiness.tiles.Generic.prototype.hasSomeValue = function() {
    var flag = true;
    if(arguments.length) {
        for(var i=0, l=arguments.length; i< l; i++) {
            if(arguments[i] || arguments[i] == "0") {
            } else {
                flag = false;
                break;
            }
        }
    } else {
        flag = false;
    }
    return flag;
};


}; // end of sap/suite/ui/smartbusiness/tiles/Generic.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.HarveyBall') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.HarveyBall");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.HarveyBall", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true
            },
            tileType : {
                type : "string",
                defaultValue : "CM"
            },
            size : {
                type : "string",
                defaultValue : "S"
            },
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    this._bShowUOM = false;
    this._bUseFormattedVDMValue = false;
    this._bShowKpiMeasureUOMInFooter = true;
    this._bHasKpiMeasure = null;
    this._oDataRequestReference={};
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            size: "S",
            content: new sap.suite.ui.commons.HarveyBallMicroChart({
				total:"{/totalValue}",
				size:"S",
				items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
				    	   fraction:"{/fractionValue}",
				    	   color : "{/color}"
				       })]
			})
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            size: "S",
            content: new sap.suite.ui.commons.HarveyBallMicroChart({
				total:"{/totalValue}",
				size: "S",
				items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
				    	   fraction:"{/fractionValue}",
				    	   color : "{/color}"
				       })]
			})
        }));
    }
};

sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype._getTrendColor = function() {

    var returnColor = null;
    var wL = window.parseFloat(this.WARNING_LOW_VALUE);
    var cL = window.parseFloat(this.CRITICAL_LOW_VALUE);
    var cH = window.parseFloat(this.CRITICAL_HIGH_VALUE);
    var wH = window.parseFloat(this.WARNING_HIGH_VALUE);
    var improvementDirection = this.EVALUATION_DATA.GOAL_TYPE;
    if(this.evaluationApi.isMinimizingKpi()) {
        if(this.hasSomeValue(cH, wH)) {
            if(this.KPI_VALUE < wH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            } else if(this.KPI_VALUE <= cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            }
        }

    } else if(this.evaluationApi.isMaximizingKpi()) {
        if(this.hasSomeValue(cL, wL)) {
            if(this.KPI_VALUE < cL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if(this.KPI_VALUE <= wL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    } else {
        if(this.hasSomeValue(wL, wH, cL, cH)) {
            if(this.KPI_VALUE < cL || this.KPI_VALUE > cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if((this.KPI_VALUE >= cL && this.KPI_VALUE <= wL) || 
                    (this.KPI_VALUE >= wH && this.KPI_VALUE <= cH)
            ) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    }
    return returnColor;
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForHarveyBallTile(function(data) {
    	var isTotalMeasureACurrency = this.isACurrencyMeasure(this.getVariable("totalMeasure"));
    	var isFractionalMeasureACurrency = this.isACurrencyMeasure(this.getVariable("fractionMeasure"));
        var jsonData={
        		totalValue:Number(data.totalValue),
        		totalValueLabel  : this.libFormat(Number (data.totalValue), isTotalMeasureACurrency, data.totalValueUnit) +" "+data.totalValueUnit,
        		fractionValue:Number(data.fractionValue),
        		fractionValueLabel : this.libFormat(Number(data.fractionValue), isFractionalMeasureACurrency, data.fractionValueUnit) +" "+data.fractionValueUnit
        };
        if(that.getTileConfiguration().IS_HARVEY_FRACTION_KPIMEASURE){
        	jsonData.color = that._getTrendColor();
        }
        if(true || that.isAssociatedKpi()) {
        	jsonData.subheader= this.evaluationApi.getTitle();
        	jsonData.header= this.evaluationApi.getKpiName();
        }
        if(this._bShowKpiMeasureUOMInFooter && this._bHasKpiMeasure) {
        	
        }
        that.jsonModel.setData(jsonData);
        that.setDoneState();
        that.initPopup();
    }, this.logError);
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype._getFormattedHarveyFilters = function(aHarveyFilters){
	var tmp=[];
	if( aHarveyFilters && aHarveyFilters[0] && aHarveyFilters[0].VALUE_1){
		aHarveyFilters[0].VALUE_1.forEach(function(curVal){    			
			harveyFilters.push({
				NAME:aHarveyFilters[0].NAME,
				TYPE: "FI",
				VALUE_1:[curVal],
				OPERATOR:tileConfiguration.HARVEY_FILTERS[0].OPERATOR,
				VALUE_2:[]
			})
		})
	}
	if(tileConfiguration.HARVEY_FILTERS[0] && tileConfiguration.HARVEY_FILTERS[0].VALUE_1){
	}
	
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype._fetchDataForHarveyBallTile = function(fnSuccess,fnError){
	function makeODataRequest(oModel,sUri,sMeasure,valType,fnS,fnE){
		var uom = that.UOM_PROPERTY_MAPPING[sMeasure];
	    var oDataRef = oModel.read(sUri, null, null, true, function(data) {
	    	that.deregisterODataRequest(valType);
	        if(data && data.results && data.results.length) {
	        	kpiData[valType] = data.results[0][sMeasure];
	        	kpiData[valType+"Unit"] = data.results[0][uom]|| ""; //kpiData.unit||data.results[0][unit]||"";
	        	fnS.call(that,kpiData);		
	        } else {
	            fnE.call(that,"no Response from QueryServiceUri");
	        }
	    },function(eObject) {
	    	that.deregisterODataRequest(valType);
	        if(eObject && eObject.response) {
	            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
	        }
	    });
		that.registerODataRequest(valType,oDataRef);
	}
	var that = this;
    /* Preparing arguments for the prepareQueryServiceUri function */
    var tileConfiguration=this.getTileConfiguration();
    this._bHasKpiMeasure = true;
    var oQuery;
    var kpiData={};
    var harveyFilters=[];
    var valueType;// totalValue or fractionValue
    var oParam ={
    		serviceUri : this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem()),
    		entitySet  : this.evaluationApi.getEntitySet(),
    		measure    : this.evaluationApi.getKpiMeasureName(),
    		filter	   : this.getAllFilters()
    };
    if(tileConfiguration.IS_HARVEY_FRACTION_KPIMEASURE){
    	oParam.measure = tileConfiguration.HARVEY_TOTAL_MEASURE;
    	kpiData.fractionValue = this.KPI_VALUE;
    	kpiData.fractionValueUnit = this.UOM;
    	valueType = "totalValue";
    }else{
    	tileConfiguration.HARVEY_FILTERS=tileConfiguration.HARVEY_FILTERS||[];

    	kpiData.totalValue = this.KPI_VALUE;
    	kpiData.totalValueUnit = this.UOM;
    	oParam.filter = oParam.filter.concat(harveyFilters);
    	valueType = "fractionValue";
    }
    this.setVariable('fractionMeasure', this.evaluationApi.getKpiMeasureName());
    this.setVariable('totalMeasure', oParam.measure);
    
    oQuery = sap.suite.ui.smartbusiness.lib.Util.odata.getUri(oParam);
    
    makeODataRequest(oQuery.model,oQuery.uri,oParam.measure,valueType,fnSuccess,fnError);
   // makeODataRequest(fractionValueQuery.model,fractionValueQuery.uri,oParam2.measure,"fractionValue",fnSuccess,fnError);
        
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyData());
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.getDummyData=function(){
	return this._cleanUpDummyData({
        subheader : "Expenses by Region",
        header : "Comparative Annual Totals",
        footerNum : "",
        footerComp : "",
        scale: "M",
        unit: "EUR",
		fractionValue: 34,
		totalValue:100,
        size:"S",
        color:"Good",
	});
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.showPopup = function() {
	this._popover.openBy(this);
};

sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.initPopup = function() {
	var self = this;
	var model = new sap.ui.model.json.JSONModel();
    var modelData = {"THRESHOLDS":[]};
    var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    jQuery.sap.require("sap.ui.core.format.NumberFormat");
    this.VALUE_FORMATTER = sap.ui.core.format.NumberFormat.getFloatInstance({
    			style: "standard"
    		},locale);
    var thresholdList = new sap.m.List({
    });
    
    var getValueState = function(color){
        return {
        "Error" : sap.ui.core.ValueState.Error,
        "Neutral" : sap.ui.core.ValueState.None,
        "Good" : sap.ui.core.ValueState.Success,
        "Warning" : sap.ui.core.ValueState.Warning,
        "Critical" : sap.ui.core.ValueState.Warning
        }[color] || sap.ui.core.ValueState.None;
    };
    
    thresholdList.bindItems("/THRESHOLDS", new sap.m.ObjectListItem({
    	title : "{name}",
    	number : "{value}",
    	numberState: {
            path: "color",
            formatter: getValueState
        }
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = this.jsonModel.getData().data;
    
    if(this.evaluationApi.getScaling() == -2) {    	
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				thresholdVals[each].value = (thresholdVals[each].value *100) + " %" ;
			}    				
		}
    }
    
    for (var j in thresholdVals) {
	    modelData.THRESHOLDS.push({
	        name : thresholdVals[j].title,
	        value : this.VALUE_FORMATTER.format(thresholdVals[j].value),
	        color: thresholdVals[j].color
	    });
    }
    
    model.setData(modelData);
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text: this.getModel("i18n").getProperty("DETAILS")
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(function(){if(this._popover.isOpen()){this._popover.close();}},
                	this)
            })]
    });
    this._popover = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._popover, true);
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.registerODataRequest=function(sKey,oRef){
	this._oDataRequestReference[sKey]=oRef;
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.deregisterODataRequest=function(sKey){
	delete this._oDataRequestReference[sKey];
};
sap.suite.ui.smartbusiness.tiles.HarveyBall.prototype.abortODataCalls = function() {
	for(var each in this._oDataRequestReference){
		this._oDataRequestReference[each].abort();
		this.deregisterODataRequest(each);
	}
};

}; // end of sap/suite/ui/smartbusiness/tiles/HarveyBall.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.MeasureComparison') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.MeasureComparison");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.MeasureComparison", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "CM"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    this._bShowUOM = false;
    this._bUseFormattedVDMValue = false;
    this._bShowKpiMeasureUOMInFooter = true;
    this._bHasKpiMeasure = null;
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }));
    }
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForMeasureComparisonTile(function(comparisionData) {
        var jsonData={};
        this._processedComparisionData = this._processMeasureComparisionData(comparisionData);
        jsonData.data = this._processedComparisionData;
        if(true || that.isAssociatedKpi()) {
        	jsonData.subheader= this.evaluationApi.getTitle();
        	jsonData.header= this.evaluationApi.getKpiName();
        }
        if(this._bShowKpiMeasureUOMInFooter && this._bHasKpiMeasure) {
        	var kpiMeasureUOMProperty = this.UOM_PROPERTY_MAPPING[this.evaluationApi.getKpiMeasureName()];
        	if(kpiMeasureUOMProperty) {
        		jsonData.unit = comparisionData[kpiMeasureUOMProperty];
        	}
        }
        that.jsonModel.setData(jsonData);
        that.setDoneState();
        that.initCMPopup();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype._fetchDataForMeasureComparisonTile = function(fnSuccess,fnError){
    var that = this;
    var _getAllMeasures  = function(tileConfiguration) {
    	var measures = [];
    	if(tileConfiguration && tileConfiguration.MEASURES && tileConfiguration.MEASURES.length) {
    		var configMeasures = tileConfiguration.MEASURES;
    		for(var i=0, l=configMeasures.length; i < l;i++) {
    			measures.push(configMeasures[i].name);
    		}
    	}
    	if(measures.length) {
        	return measures;
    	} else {
    		throw new Error("No Measures Defined for Measure Comparision Tile");
    	}
    };
	function checkIfDataPresent(data,columnNames){
		var isPresent = false;
		if(data && data.results && data.results.length){
    		for(var i=0,l=columnNames.length;i<l && !isPresent ;i++){
    			isPresent = data.results[0][columnNames[i]] !== null;
    		}
		}
		return isPresent;
	}
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    oParam.serviceUri = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    oParam.entitySet = this.evaluationApi.getEntitySet();
    oParam.measure = _getAllMeasures(this.getTileConfiguration());
    if(oParam.measure.indexOf(this.evaluationApi.getKpiMeasureName()) > -1) {
    	this._bHasKpiMeasure = true;
    }
    oParam.filter = this.getAllFilters();
    var finalQuery = sap.suite.ui.smartbusiness.lib.Util.odata.getUri(oParam);
    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(checkIfDataPresent(data,oParam.measure)) {
            fnSuccess.call(that,data.results[0]);
        } else {
            that.setNoData();
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype._processMeasureComparisionData = function(rawComparisionData) {
	var processedData = [],formattedValue, VDMFormattedProperty,UOM,measureTile, measureName,i, measures, obj;
	measures = this.getTileConfiguration().MEASURES;
	for(i=0, l=measures.length; i < l; i++) {
		obj = {};
		measureName = measures[i].name;
		measureTile = this.LABEL_PROPERTY_MAPPING[measureName];
		obj["title"] = measureTile;
		
		UOM = this.UOM_PROPERTY_MAPPING[measureName];
		VDMFormattedProperty = this.TEXT_PROPERTY_MAPPING[measureName];
		var calculatedValueForScaling = Number(rawComparisionData[measureName]);
		if(this._bUseFormattedVDMValue && VDMFormattedProperty && (VDMFormattedProperty != measureName)) {
			formattedValue = rawComparisionData[VDMFormattedProperty];
		} else {
			/*
		    if(this.evaluationApi.getScaling() == -2)
		        calculatedValueForScaling *= 100;
	        formattedValue = sap.suite.ui.smartbusiness.lib.Util.utils.getLocaleFormattedValue(calculatedValueForScaling, this.evaluationApi.getScaling());
	        if(this.evaluationApi.getScaling() == -2) 
	            formattedValue += " %"
	        */
			var isACurrency = this.isACurrencyMeasure(measureName);
			var unitValue = null;
			
			var isEvaluationThresholdMeasure = false;
			var kpiMeasure = this.evaluationApi.getKpiMeasureName();
			var thresholdMeasures = this._getOtherThresholdMeasures();
			if (measureName ===  kpiMeasure) {
				isEvaluationThresholdMeasure = true;
			} else if(thresholdMeasures) {
				for(var each in thresholdMeasures) {
					if (thresholdMeasures[each] === measureName) {
						isEvaluationThresholdMeasure = true;
					}
				}
			}

			if(isACurrency) {
				var kpiMeasureUOMProperty = this.UOM_PROPERTY_MAPPING[this.evaluationApi.getKpiMeasureName()];
	        	if(kpiMeasureUOMProperty) {
	        		unitValue = rawComparisionData[kpiMeasureUOMProperty];
	        	}
			}
	        formattedValue = this.libFormat(calculatedValueForScaling, isACurrency, unitValue);
		    if(this.evaluationApi.getScaling() == -2) {
		        /*calculatedValueForScaling = calculatedValueForScaling * 100;*/
		    	if(isEvaluationThresholdMeasure) {
		    		formattedValue = this.libFormat(calculatedValueForScaling, isACurrency, null, true);
		    	} else {
		    		formattedValue = this.libFormat(calculatedValueForScaling, isACurrency);
		    	}
	            /*formattedValue += " %"*/
		    }
		}
        obj.value = Number(rawComparisionData[measureName]); 
        obj.displayValue = "" + formattedValue;
        if(this._bShowUOM && UOM) {
        	obj.displayValue += " " + rawComparisionData[UOM];
        }
        obj.color = measures[i].color;
        processedData.push(obj);
	}
	return processedData;
};
sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForMeasureComparisonTile());
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.showCMPopup = function() {
	this._CTpopOver.openBy(this);
};

sap.suite.ui.smartbusiness.tiles.MeasureComparison.prototype.initCMPopup = function() {
	var self = this;
	var model = new sap.ui.model.json.JSONModel();
    var modelData = {"THRESHOLDS":[]};
    var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    jQuery.sap.require("sap.ui.core.format.NumberFormat");
    this.VALUE_FORMATTER = sap.ui.core.format.NumberFormat.getFloatInstance({
    			style: "standard"
    		},locale);
    var thresholdList = new sap.m.List({
    });
    
    var getValueState = function(color){
        return {
        "Error" : sap.ui.core.ValueState.Error,
        "Neutral" : sap.ui.core.ValueState.None,
        "Good" : sap.ui.core.ValueState.Success,
        "Warning" : sap.ui.core.ValueState.Warning,
        "Critical" : sap.ui.core.ValueState.Warning
        }[color] || sap.ui.core.ValueState.None;
    };
    
    thresholdList.bindItems("/THRESHOLDS", new sap.m.ObjectListItem({
    	title : "{name}",
    	number : "{value}",
    	numberState: {
            path: "color",
            formatter: getValueState
        }
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = this.jsonModel.getData().data;
    
    if(this.evaluationApi.getScaling() == -2) {    	
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				thresholdVals[each].value = (thresholdVals[each].value *100) + " %" ;
			}    				
		}
    }
    
    for (var j in thresholdVals) {
	    modelData.THRESHOLDS.push({
	        name : thresholdVals[j].title,
	        value : this.VALUE_FORMATTER.format(thresholdVals[j].value),
	        color: thresholdVals[j].color
	    });
    }
    
    model.setData(modelData);
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text: this.getModel("i18n").getProperty("DETAILS")
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(function(){if(this._CTpopOver.isOpen()){this._CTpopOver.close();}},
                	this)
            })]
    });
    this._CTpopOver = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._CTpopOver, true);
};


}; // end of sap/suite/ui/smartbusiness/tiles/MeasureComparison.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Numeric') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Numeric");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Numeric", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true//For Comparision Tile, this can be set as false
            },
            tileType : {
                type : "string",
                defaultValue : "NT" //All Tiles Should define their type "Numeric/Bullet/Comparison/AreaChart"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.Numeric.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);

    //Write Init Code Here

    //Tiles will be always in Full/Complete Mode
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.NumericContent({
                value : "{/value}",
                scale : "{/scale}",
                valueColor: "{/valueColor}",
                size: this.getSize(),
                state: "{/state}",
                formatterValue : true,
                truncateValueTo : 5,
                nullifyValue : false
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)        
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    //Write onBeforeRendering Code Here

    //Override fulltile to only COntent
    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.NumericContent({
                value : "{/value}",
                scale : "{/scale}",
                valueColor: "{/valueColor}",
                size: this.getSize(),
                state: "{/state}",
                formatterValue : true,
                truncateValueTo : 5,
                nullifyValue : false
            })
        }));
    }

    //Later Just Update the Model Data

};

sap.suite.ui.smartbusiness.tiles.Numeric.prototype.switchOffFormatting = function() {
    try{
        this.getTileControl().getTileContent()[0].getContent().setFormatterValue(false);
    }
    catch(exp){
    }
};
/*
 * All Tiles must implement this methods.. This method is called once parent controls finishes loading Evaluation Details and 
 * Kpi Value(if required)
 * 
 * Don't enclose your any code in try/Catch. Parent Control is already doing it.
 * In other words, Do not handle any exception
 */
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.doProcess = function() {
    /**
     * PROPERTIES AVAILABLE which can be accessed in this Method
     * 
     * 
     * this.EVALUATION_ID
     * this.EVALUATION_DATA //Evaluation-Data
     * this.KPI_VALUE
     * this.UOM //if present else empty string
     * this.WARNING_LOW_VALUE
     * this.WARNING_HIGH_VALUE,
     * this.CRITICAL_LOW_VALUE
     * this.CRITICAL_HIGH_VALUE
     * this.TARGET_VALUE
     * this.TREND_VALUE
     * this.LABEL_PROPERTY_MAPPING //Object with key as Original Dimension/Measure and value as Dimension/Measure Label
     * this.TEXT_PROPERTY_MAPPING //
     * this.UOM_PROPERTY_MAPPING //
     * this.getScalingFactorMapping() //{"0":"","3" : "Kilo" ......}
     * this.getTileControl() //returns the Aggregation _tile reference
     * 
     * to Check if current kpi is associated call
     * this.isAssociatedKpi()
     * 
     * Note* : All the thresholds values at this point will be ABSOLUTE VALUE. So you don't need to check, whether its FIXED or MEASURE
     * Use these value blindly (But react on NULL)
     */

    var numericTileObj={};
    numericTileObj.valueColor = this._applyTrendColor();
    numericTileObj.indicator = this._applyTrendIndicator();
    numericTileObj.frameType = this.getFrameType();
    numericTileObj.unit = this.UOM;
    var oScaledValue = "";
    var calculatedValueForScaling = this.KPI_VALUE;
    if(this.EVALUATION_DATA.SCALING == -2){
        /*calculatedValueForScaling *= 100;*/
        numericTileObj.formatterValue = false;
    }
    var isACurrencyMeasure = this.isACurrencyMeasure(this.EVALUATION_DATA.COLUMN_NAME);
    var formatValue = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, this.UOM);
    if(this.EVALUATION_DATA.SCALING == -2){ 
        numericTileObj.scale = "%";
        this.switchOffFormatting();
    }

    if(formatValue){
        numericTileObj.value = formatValue.toString();
    }
    else{
        numericTileObj.value = "0";
    }
    if(true || this.isAssociatedKpi()){
        numericTileObj.header = this.EVALUATION_DATA.INDICATOR_TITLE;
        numericTileObj.subheader = this.EVALUATION_DATA.TITLE;
    }
    this.jsonModel.setData(numericTileObj);
    this.jsonModel.updateBindings();
    this.setDoneState();


};

/**
 * This method is called if tile is runing in DUMMY Mode
 */
sap.suite.ui.smartbusiness.tiles.Numeric.prototype.doDummyProcess = function() {
    /*
     * this.getDummyDataForNumericTile();
     * this.getDummyDataForBulletTile();
     * this.getDummyDataForAreaChartTile();
     * this.getDummyDataForComparisonTile();
     * 
     * and bind with Control
     */
    this.jsonModel.setData(this.getDummyDataForNumericTile());
};

sap.suite.ui.smartbusiness.tiles.Numeric.prototype._applyTrendColor = function() {

    var returnColor = null;
    var wL = window.parseFloat(this.WARNING_LOW_VALUE);
    var cL = window.parseFloat(this.CRITICAL_LOW_VALUE);
    var cH = window.parseFloat(this.CRITICAL_HIGH_VALUE);
    var wH = window.parseFloat(this.WARNING_HIGH_VALUE);
    var improvementDirection = this.EVALUATION_DATA.GOAL_TYPE;
    if(this.evaluationApi.isMinimizingKpi()) {
        if(this.hasSomeValue(cH, wH)) {
            if(this.KPI_VALUE < wH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            } else if(this.KPI_VALUE <= cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            }
        }

    } else if(this.evaluationApi.isMaximizingKpi()) {
        if(this.hasSomeValue(cL, wL)) {
            if(this.KPI_VALUE < cL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if(this.KPI_VALUE <= wL) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    } else {
        if(this.hasSomeValue(wL, wH, cL, cH)) {
            if(this.KPI_VALUE < cL || this.KPI_VALUE > cH) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } else if((this.KPI_VALUE >= cL && this.KPI_VALUE <= wL) || 
                    (this.KPI_VALUE >= wH && this.KPI_VALUE <= cH)
            ) {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
    }
    return returnColor;
};

sap.suite.ui.smartbusiness.tiles.Numeric.prototype._applyTrendIndicator = function() {

    var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
    if(this.TREND_VALUE || this.TREND_VALUE == "0") {
        if(this.TREND_VALUE > this.KPI_VALUE){
            trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
        }
        else if(this.TREND_VALUE < this.KPI_VALUE){
            trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
        }
    }
    return trendIndicator;
}



}; // end of sap/suite/ui/smartbusiness/tiles/Numeric.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.Configuration");
(function() {
	 
	var ROOT,LIB,sPlatform, adapter_paths, _hanaModelerServiceUrl,_hanaRuntimeServiceUrl;
	var _SBMetadataServicePath, _NavigationService, _CatalogServicePath;
	// SoH
	//*****
	// _SBMetadataServicePath = /sap/hba/r/sb/core/modeler/SMART_BUSINESS.xsodata
	// _NavigationService = /sap/opu/../INETEROP
	// _CatalogServicePath = /sap/hba/r/sb/core/modeler/SMART_BUSINESS.xsodata
	//
	// SimplifiedSuite
	//****************
	// _SBMetadataServicePath = /sap/opu/...
	// _NavigationService = /sap/opu/../INETEROP
	// _CatalogServicePath = /sap/opu/.../catalog
	//
	//HCP
	//***
	// _SBMetadataServicePath = /sap/hba/r/sb/core/modeler/SMART_BUSINESS.xsodata
	// _NavigationService = /sap/1/uis/...
	// _CatalogServicePath = /sap/1/uis/... (?)
	
	//_hanaModelerServiceUrl = "/sap/hba/apps/r/sb/core/modeler/SMART_BUSINESS.xsodata";
	//_hanaRuntimeServiceUrl = "/sap/hba/apps/r/sb/core/runtime/SMART_BUSINESS.xsodata";
	adapter_paths= {
		"abap" : "adapter.abap",
		"hana" : "adapter.hana"
	};
	ROOT= "sap.suite.ui.smartbusiness";
	LIB = ROOT + ".lib";
	/**
	 * There should be a way to know the platform
	 * For the time being reading it from URL
	 */
	//sPlatform = jQuery.sap.getUriParameters().get("platform") || "soh";
	try {
		var sParams = sap.suite.ui.smartbusiness.drilldown.lib.Hash.getStartupParameters();
		if(sParams) {
			if(sParams.sb_metadata) {
				_SBMetadataServicePath = sParams.sb_metadata[0];
			}
			if(sParams.sb_navigation) {
				_NavigationService = sParams.sb_navigation[0];
			}
			if(sParams.sb_catalog) {
				_CatalogServicePath = sParams.sb_catalog[0];
			}
		}
	}catch(e) {
		
	}
	finally {
		_SBMetadataServicePath = _SBMetadataServicePath || jQuery.sap.getUriParameters().get("sb_metadata") || "hana";
		_NavigationService = _NavigationService || jQuery.sap.getUriParameters().get("sb_navigation") || "abap";
		_CatalogServicePath = _CatalogServicePath || jQuery.sap.getUriParameters().get("sb_catalog") || "hana";
	}
//	_SBMetadataServicePath = _SBMetadataServicePath || jQuery.sap.getUriParameters().get("sb_metadata") || "hana";
//	_NavigationService = _NavigationService || jQuery.sap.getUriParameters().get("sb_navigation") || "abap";
//	_CatalogServicePath = _CatalogServicePath || jQuery.sap.getUriParameters().get("sb_catalog") || "hana";

	var Config = {
		getLibraryModulePath : function() {
			return LIB;
		},
		getMetadataPath : function(){
			return ROOT+"."+adapter_paths[_SBMetadataServicePath];
		},
		getNavigationServicePath : function(){
			return ROOT+"."+adapter_paths[_NavigationService];
		},
		getCatalogServicePath : function(){
			return ROOT+"."+adapter_paths[_CatalogServicePath];	
		},
		isMetadataFromABAP:function(){
			return _SBMetadataServicePath.toUpperCase()=="ABAP"
		},
		
		getMetadataServicePlatfrom : function(){
			return _SBMetadataServicePath;
		},
		
		getNavigationServicePlatform : function(){
			return _NavigationService;
		},
		
		getCatalogServicePlatform : function(){
			return _CatalogServicePath;
		}
		
	};

	Config.Constants = {
		TileType : {
			"NT" : "NT",
			"CT" : "CT",
			"TT" : "TT",
			"AT" : "AT",
			"CM" : "CM",
			"DT-AT" : "DT-AT",
			"DT-CT" : "DT-CT",
			"DT-TT" : "DT-TT",
			"DT-CM" : "DT-CM",
			"HT":"HT"
		},
		ChipUrl : {
            "NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
            "CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
            "TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
            "AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml",
            "CM" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/ComparisionTileChip.xml",
            "HT":	"/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorHarveyBall/HarveyBallTileChip.xml"
		},
		Platform : {
			"ABAP" : "abap",
			"HANA" : "hana",
			"SOH" : "soh",
			"MODELS" : "modelS",
			"IOT" : "iot"
		},
		SMARTBUSINESS_NULL_VALUE : "sap_smartbusiness_null"
	};
	sap.suite.ui.smartbusiness.Configuration = Config;
})();
}; // end of sap/suite/ui/smartbusiness/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.association.view.S2.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained



sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.association.view.S2", {

	onInit: function() {
		var that = this;
		this.oApplicationFacade.masterListControllerRef = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		sap.suite.ui.smartbusiness.lib.AppSetting.init({
			oControl : this.byId("list"),
			hideElement  : "list",
			i18n: {
				checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
				saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
				cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
				settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
				settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
			},
			title :that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
		});
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		that.selectedGroupItemKey = "workspace";
		that.selectedGroupItemIndex = 0;
		that.lastSavedIndex = 0;
		that.lastGroupingOption = new sap.ui.model.Sorter("MANUAL_ENTRY",true,function(context){
			var indicator_type = context.getProperty("MANUAL_ENTRY");
			var groupTitle = "";
			switch(indicator_type) {
			case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
			break;
			case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
			break;
			default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
			}
			return {
				key: groupTitle,
				text: groupTitle
			}
		});
		that.lastSortingOrder =  new sap.ui.model.Sorter("CHANGED_ON",true,null);
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			//Adapter Implementation ----
			var sessionUserFetchCallBack = function(user) {
				that.oApplicationFacade.currentLogonHanaUser = user;
			};
			
			var sessionUserFetchErrCallBack = function(d,s,x) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), d.response.body);
			};
			 
			this.metadataRef.getSessionUser({async:true, success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
		}
		this.byId("list").getBinding("items").filter(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
		
	},
	createFilterOptions: function() {
		var that = this; 
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVOURITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  that.setFiltering(evt.getParameter("filterItems"));
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_CHANGE_DATE"),
			            	key: "changedate"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	key: "type"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NAME"),
			            	key: "name"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_ID"),
			            	key: "id"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
//			            	else {
//			            		that.setGrouping("workspace", true);
//			            	}
			            }
		});
		sortOptionsDialog.setSelectedSortItem("changedate");
		sortOptionsDialog.setSortDescending(true);
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var jsonData = {groupItems:[
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),key:"workspace", index:0},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),key:"type", index:1},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),key:"status", index:2},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),key:"owner", index:3},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("NONE"),key:"none", index:4}
		                            ]};
		var model = new sap.ui.model.json.JSONModel(jsonData);
		var groupOptionsDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("GROUP_BY"),
			id: this.createId("groupOptionsDialog"),
			content: [new sap.m.List({
				items:{
					path: "/groupItems",
					template: new sap.m.ObjectListItem({
						type:"Active",
					    title:"{text}"
					})
				},
				itemPress: function(evt){
					evt.getParameter("listItem").setSelected(true);
					that.selectedGroupItemKey = evt.getParameter("listItem").getBindingContext().getProperty("key");
					that.selectedGroupItemIndex = evt.getParameter("listItem").getBindingContext().getProperty("index");
					if(that.selectedGroupItemKey=="workspace"){
        				that.setGrouping(that.selectedGroupItemKey,true);
        			}
        			else{
        				that.setGrouping(that.selectedGroupItemKey,false);
        			}
        			that.lastSavedIndex = that.selectedGroupItemIndex;
        			this.getParent().close();
				}
			})
			],
//			beginButton: new sap.m.Button({
//        		text: that.oApplicationFacade.getResourceBundle().getText("OK"),
//        		press: function(evt){
//        			if(that.selectedGroupItemKey=="workspace"){
//        				that.setGrouping(that.selectedGroupItemKey,true);
//        			}
//        			else{
//        				that.setGrouping(that.selectedGroupItemKey,false);
//        			}
//        			that.lastSavedIndex = that.selectedGroupItemIndex;
//        			this.getParent().close();
//        		}
//        	}),
        	endButton: new sap.m.Button({
        		text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
        		press: function(evt){
        			that.selectedGroupItemIndex = that.lastSavedIndex;
        			this.getParent().close();
        		}
        	})
		});
		groupOptionsDialog.setModel(model);
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "MASTER_TITLE",
			onBack : function() {
				window.history.back();
			},
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					if(that.byId("groupOptionsDialog")){
						that.byId("groupOptionsDialog").destroy();
					}
					that.getView().groupOptionDialog = that.createGroupOptions();
					that.getView().groupOptionDialog.open();
					that.byId("groupOptionsDialog").getContent()[0].getItems()[that.selectedGroupItemIndex].setSelected(true);
				}
			}
		};
	},

	formatTitle: function(title) {
		return (title || "");
	},

	formatAssociationCount: function(sourceCount,targetCount) {
		if(sourceCount==null && targetCount==null){
			return 0;
		}
		if(sourceCount==null){
			return parseInt(targetCount);
		}
		if(targetCount==null){
			return parseInt(sourceCount);
		}
		return (parseInt(sourceCount)+parseInt(targetCount));
	},

	formatID: function(id,type) {
		if(type == "KPI") {
			return (this.oApplicationFacade.getResourceBundle().getText(type, id));
		}
		else {
			return (this.oApplicationFacade.getResourceBundle().getText(type) + ": " + id);
		}
	},
	setVisibility : function(){
		return sap.suite.ui.smartbusiness.lib.AppSetting.setVisibilty();
	},
	formatOwnerName: function(ownerName) {
		return (this.oApplicationFacade.getResourceBundle().getText("ADDED_BY",ownerName));
	},

	formatState: function(state) {
		return (state ? "ACTIVE" : "DRAFT");
	},

	formatGroupName: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = this.getView().byId("list");
		var groupOption;
		if(key == "type") {
			groupOption = new sap.ui.model.Sorter("TYPE",groupDescending,function(context){
				return {
					key: context.getProperty("TYPE"),
					text: (context.getProperty("TYPE") + "S")
				}
			});
		} 
		else if(key == "status") {
			groupOption = new sap.ui.model.Sorter("IS_ACTIVE",groupDescending,function(context){
				return {
					key: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") : that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"),
							text: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("ACTIVE_KPI_OPI") : that.oApplicationFacade.getResourceBundle().getText("DRAFT_KPI_OPI"),
				}
			});
		}
		else if(key == "owner") { 
			groupOption = new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "workspace") {
			groupOption = new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "none") {
			groupOption = null;
		}
		
		if(that.lastSortingOrder && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder],true);
		}
		else{
			list.getBinding("items").sort([that.lastSortingOrder]);
		}
		this.lastGroupingOption = groupOption;
	},

	setFiltering: function(items) {
		var that = this
		var filtersArray = [];
		var list = this.getView().byId("list");

		var filterObject = {
				"drafts": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 0)),
				"activated": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1)),
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},
	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var sortOrder;
		if(key == "changedate") {
			sortOrder = new sap.ui.model.Sorter("CHANGED_ON",groupDescending,null);
		}
		else if(key == "type") { 
			sortOrder = new sap.ui.model.Sorter("TYPE",groupDescending,null);
		}
		else if(key == "name") {
			sortOrder = new sap.ui.model.Sorter("TITLE",groupDescending,null);
		}
		else if(key == "id") {
			sortOrder = new sap.ui.model.Sorter("ID",groupDescending,null);
		}
		
		if(that.lastGroupingOption){
			list.getBinding("items").sort([that.lastGroupingOption,sortOrder],true); 
		}
		else{
			list.getBinding("items").sort([sortOrder]);
		}
		this.lastSortingOrder = sortOrder;
	},
	
	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.ui.smartbusiness.lib.Util.utils.backToHome();
		}
	},
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,true);
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/association/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.authorization.view.S2.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained



sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.authorization.view.S2", {

	onInit: function() {
		var that = this;             
		this.oApplicationFacade.masterListControllerRef = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		sap.suite.ui.smartbusiness.lib.AppSetting.init({
			oControl : this.byId("list"),
			hideElement  : "list",
			i18n: {
				checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
				saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
				cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
				settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
				settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
			},
			title :that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
		});
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		that.selectedGroupItemKey = "workspace";
		that.selectedGroupItemIndex = 0;
		that.lastSavedIndex = 0;
		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		
		that.lastGroupingOption = new sap.ui.model.Sorter("MANUAL_ENTRY",true,function(context){
			var indicator_type = context.getProperty("MANUAL_ENTRY");
			var groupTitle = "";
			switch(indicator_type) {
			case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
			break;
			case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
			break;
			default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
			}
			return {
				key: groupTitle,
				text: groupTitle
			}
		});
		that.lastSortingOrder =  {indicatorTextOrder:null, order:new sap.ui.model.Sorter("CHANGED_ON",true,null)};
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			this.oApplicationFacade.getODataModel().read("/SESSION_USER",null,null,true,function(data) {
				that.oApplicationFacade.currentLogonHanaUser = (data.results && data.results.length) ? data.results[0].LOGON_USER : null; 
			}, function(err) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
			});
		}
		this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("IS_ACTIVE","EQ",1)]);
	},
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVORITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("visualizationInfo").setText(infoBarText);   
			            	  }
			            	  else {
			            		  that.byId("visualizationInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_CHANGE_DATE"),
			            	key: "changedate"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NAME"),
			            	key: "name"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_ID"),
			            	key: "id"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
			            }
		});
		sortOptionsDialog.setSelectedSortItem("changedate");
		sortOptionsDialog.setSortDescending(true);
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var jsonData = {groupItems:[
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),key:"workspace", index:0},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_INDICATOR"),key:"indicator", index:1},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),key:"owner", index:2},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("NONE"),key:"none", index:3},
		                            ]};
		var model = new sap.ui.model.json.JSONModel(jsonData);
		var groupOptionsDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("GROUP_BY"),

			id: this.createId("groupOptionsDialog"),
			content: [new sap.m.List({
				items:{
					path: "/groupItems",
					template: new sap.m.ObjectListItem({
						type:"Active",
					    title:"{text}"
					})
				},
				itemPress: function(evt){
					evt.getParameter("listItem").setSelected(true);
					that.selectedGroupItemKey = evt.getParameter("listItem").getBindingContext().getProperty("key");
					that.selectedGroupItemIndex = evt.getParameter("listItem").getBindingContext().getProperty("index");
					if(that.selectedGroupItemKey=="workspace"){
        				that.setGrouping(that.selectedGroupItemKey,true);
        			}
        			else{
        				that.setGrouping(that.selectedGroupItemKey,false);
        			}
        			that.lastSavedIndex = that.selectedGroupItemIndex;
        			this.getParent().close();
				}
			})
			],
//			beginButton: new sap.m.Button({
//        		text: that.oApplicationFacade.getResourceBundle().getText("OK"),
//        		press: function(evt){
//        			if(that.selectedGroupItemKey=="workspace"){
//        				that.setGrouping(that.selectedGroupItemKey,true);
//        			}
//        			else{
//        				that.setGrouping(that.selectedGroupItemKey,false);
//        			}
//        			that.lastSavedIndex = that.selectedGroupItemIndex;
//        			this.getParent().close();
//        		}
//        	}),
        	endButton: new sap.m.Button({
        		text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
        		press: function(evt){
        			that.selectedGroupItemIndex = that.lastSavedIndex;
        			this.getParent().close();
        		}
        	})
		});
		groupOptionsDialog.setModel(model);
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		return {
			sI18NMasterTitle : "MASTER_TITLE",
			onBack: function() {
				window.history.back();
			},
			oFilterOptions : {
				onFilterPressed: function(evt) {
					that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
					that.getView().filterOptionDialog.open();
				}
			},
			oSortOptions : {
				onSortPressed: function(evt) {
					that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
					that.getView().sortOptionDialog.open();
				}
			},
			oGroupOptions : {
				onGroupPressed: function(evt) {
					if(that.byId("groupOptionsDialog")){
						that.byId("groupOptionsDialog").destroy();
					}
					that.getView().groupOptionDialog = that.createGroupOptions();
					that.getView().groupOptionDialog.open();
					that.byId("groupOptionsDialog").getContent()[0].getItems()[that.selectedGroupItemIndex].setSelected(true);
				}
			},
		};
	},
	formatEvaluationHeader:function(indicatorTitle,evaluationTitle){
		var that = this;
		if(indicatorTitle==null && evaluationTitle!=null){
			return(that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+"- "+evaluationTitle);
		}
		else if(indicatorTitle!=null && evaluationTitle==null){
			return(indicatorTitle+" -"+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else if(indicatorTitle==null && evaluationTitle==null){
			return (that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+" - "+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else{
			return (indicatorTitle+" - "+evaluationTitle);
		}
	},
	formatIndicatorId: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
		//return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var groupOption;
		if(key == "workspace") {
			groupOption = new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})
		} 
		else if(key == "indicator") {
			groupOption = new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			});
		}
		else if(key == "owner") {
			groupOption = new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "none") {
			groupOption = null;
		}
		
		if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order,that.lastSortingOrder.indicatorTextOrder],true);
		}
		else if(!that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order],true);
		}
		else{
			if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order){
				list.getBinding("items").sort([that.lastSortingOrder.indicatorTextOrder, that.lastSortingOrder.order]);
			}
			else{
				list.getBinding("items").sort([that.lastSortingOrder.order]);
			}
		}
		this.lastGroupingOption = groupOption;
	},

	setFiltering: function(items) {
		var that = this;
		var filtersArray = [];
		var list = that.getView().byId("list");

		var filterObject = {
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},

	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var sortOrder,sortByIndicator;
		if(key == "changedate") {
			sortOrder = new sap.ui.model.Sorter("CHANGED_ON",groupDescending,null);
		}
		else if(key == "name") {
			sortOrder = new sap.ui.model.Sorter("TITLE",groupDescending,null);
			sortByIndicator = new sap.ui.model.Sorter("INDICATOR_TITLE",groupDescending,null);
		}
		else if(key == "id") {
			sortOrder = new sap.ui.model.Sorter("ID",groupDescending,null);
		}
		
		if(that.lastGroupingOption){
			if(sortByIndicator){
				list.getBinding("items").sort([that.lastGroupingOption,sortByIndicator,sortOrder],true); 
			}
			else{
				list.getBinding("items").sort([that.lastGroupingOption,sortOrder],true); 
			}
		}
		else{
			if(sortByIndicator){
				list.getBinding("items").sort([sortByIndicator,sortOrder]);
			}
			else{
				list.getBinding("items").sort([sortOrder]);
			}
		}
		this.lastSortingOrder = {indicatorTextOrder:sortByIndicator, order:sortOrder};
	}, 
	
	applySearchPatternToListItem : function(oItem, sfilterPattern) {
		return sap.suite.ui.smartbusiness.lib.Util.utils.applySearchPatternToListItem.apply(this,arguments);
	
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,true);
	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/authorization/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained



jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained

jQuery.sap.require('sap.ui.vbm.AnalyticMap'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained



sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.configureNewView",{
	onInit:function(){
		var that = this;
		this.chartDummyData = {MEASURES:[[50,80,40,120,60,200,170,20,160,190],
		                                 [30,40,20,90,130,150,200,50,70,90],
		                                 [120,60,200,20,160,190,200,30,40,20],
		                                 [100,160,20,120,60,80,150,130,80,90],
		                                 [180,70,90,30,20,80,130,40,160,190],
		                                 [70,20,190,40,80,120,130,10,60,60],
		                                 [90,80,100,50,160,90,80,30,140,120],
		                                 [80,90,120,200,50,150,140,20,150,130],
		                                 [90,130,150,180,70,90,70,20,190,40],
		                                 [20,160,190,10,160,20,100,50,160,90],
		                                 [40,160,190,30,40,20,90,130,150,180]
						 				]
							  };
		//this.errorMessages = [];
		this.CDS = "cds";
		var viewmode = jQuery.sap.getUriParameters().get("viewmode");
		viewmode = viewmode ? viewmode.toUpperCase() : null;
		if(viewmode === this.CDS.toUpperCase()) {
			this.isCDS = true;
		}
		this.errorState = false;
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.COLUMN_LABEL_MAPPING={};
		//this.getView().getModel("SB_DDACONFIG").getData().NO_OF_ADDITIONAL_LANGUAGES = 0;
		this.measureDimensionList=this.byId(sap.ui.core.Fragment.createId('measureDimensionsList','measureDimensionsList'));
		this._oDimensionList=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.list",this);
		this._oMeasureList=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.list",this);

		try{
			if(sap.ui.core.Fragment.byId("measureDimensionDialog","measureDimensionDialog")){
				sap.ui.core.Fragment.byId("measureDimensionDialog","measureDimensionDialog").destroy();
			} 
			if(sap.ui.core.Fragment.byId("thresholdDialog","dialogRef")){
				sap.ui.core.Fragment.byId("thresholdDialog","dialogRef").destroy();
			}
			if(sap.ui.core.Fragment.byId("editDialog","editDialog")){
				sap.ui.core.Fragment.byId("editDialog","editDialog").destroy();
			}
			if(sap.ui.core.Fragment.byId("editChartDialog","editChartDialog")){
				sap.ui.core.Fragment.byId("editChartDialog","editChartDialog").destroy();
			}
			if(sap.ui.core.Fragment.byId("dualAxisConfig","dualAxisConfig")){
				sap.ui.core.Fragment.byId("dualAxisConfig","dualAxisConfig").destroy();
			}
			if(sap.ui.core.Fragment.byId("msrDialogForStack1","stack1SelectDialog")){
				sap.ui.core.Fragment.byId("msrDialogForStack1","stack1SelectDialog").destroy();
			}
			if( sap.ui.core.Fragment.byId("additionalLanguageDialog","additionalLanguageDialog")){
				sap.ui.core.Fragment.byId("additionalLanguageDialog","additionalLanguageDialog").destroy();
			}
			if( sap.ui.core.Fragment.byId("chartTypeConfig","chartTypeConfig")){
				sap.ui.core.Fragment.byId("chartTypeConfig","chartTypeConfig").getParent().destroy();
			}
			if(sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethSettingsDialog")){
				sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethSettingsDialog").destroy();
			}
		}
		catch(e){};
		this._oShowMeasureDialog = sap.ui.xmlfragment("measureDimensionDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.measureDimensionDialog", this);
		this._oShowMeasureDialog.addStyleClass("dialog");
		this.addThresholdMeasureDialog=sap.ui.xmlfragment("thresholdDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addThresholdMeasure", this);
		this._editMeasureDialog = sap.ui.xmlfragment("editDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.editDialog", this);
		this._editChartDialog = sap.ui.xmlfragment("editChartDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.editChartDialog", this);
		this._dualAxisConfig = sap.ui.xmlfragment("dualAxisConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.dualAxisConfig", this);
		this._msrDialogForStack1 = sap.ui.xmlfragment("msrDialogForStack1","sap.suite.ui.smartbusiness.designtime.drilldown.view.msrDialogForStack1", this);
		this.AdditionalLanguagesDialog = new sap.ui.xmlfragment("additionalLanguageDialog" ,"sap.suite.ui.smartbusiness.designtime.drilldown.view.additionalLanguagesDialog", this);
		this.choroplethSettingsDialog = new sap.ui.xmlfragment("choroplethSettingsDialog" ,"sap.suite.ui.smartbusiness.designtime.drilldown.view.choroplethSettingsDialog", this);
		this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);		
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		this.busyIndicator = new sap.m.BusyDialog();
		
		if(this.oApplicationFacade.navigatingWithinDrilldown) {
			this.navigatingWithinDrilldown = true;
			this.oApplicationFacade.navigatingWithinDrilldown = undefined;
		} 
		else {
			this.navigatingWithinDrilldown = false;
		}
		
		this.choroplethSettingsDialog.attachAfterOpen(jQuery.proxy(that.afterChoroplethSettingsDialogOpen,that));
//		this.byId("chartTitleInput").attachChange(function (){
//			that.copyConfigSnapshot();
//		});
	},
	onError : function(event){
		sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,this);
	},
	afterChoroplethSettingsDialogOpen : function(controller){
		var that=this;
		var aFilterMeasure = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true)];
		var aFilterDimension = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"DIMENSION"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true)];
		//var aFilterThresholdMeasure = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true),new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,sap.ui.getCore().byId("choroplethSettingsDialog--choroplethKpiMeasure").getSelectedKey())];
		
		sap.ui.getCore().byId("choroplethSettingsDialog--choroplethKpiMeasure").getBinding("items").filter(new sap.ui.model.Filter(aFilterMeasure,true));
		sap.ui.getCore().byId("choroplethSettingsDialog--choroplethKpiMeasure").rerender();
		//sap.ui.getCore().byId("choroplethSettingsDialog--choroplethGeoDimension").getBinding("items").filter(new sap.ui.model.Filter(aFilterDimension,true));
		this.handleMainMeasureChange();
		//sap.ui.getCore().byId("choroplethSettingsDialog--choroplethThresholdMeasure").getBinding("items").filter(new sap.ui.model.Filter(aFilterThresholdMeasure,true));

/*		sap.ui.core.Fragment.byId("choroplethSettingsDialog","thresholdMeasureList").setVisible(false);
		sap.ui.core.Fragment.byId("choroplethSettingsDialog","displaySelectedParametersGrid").setVisible(true);
		
		if(this.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE == this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE){
			sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethThresholdMeasure").setValue("");
		}
		
		if(!(this.choroplethSettingsDialog.getBeginButton())){
			this.choroplethSettingsDialog.setBeginButton(new sap.m.Button({
				text : "{i18n>OK}",
				id : "okButton",
				press : jQuery.proxy(that.onChoroplethSettingsOk,that)
			}));
		}
*/
	},

	onRoutePatternMatched:function(oEvent){
		var that=this;
		var newViewFlag;
		if (oEvent.getParameter("name") === "configureChart") {
			that.errorState = undefined; 
			that.errorMsg = undefined;
			try {
				this.evaluationId = oEvent.getParameter("arguments")["evaluationId"];
				this.currentViewId = oEvent.getParameter("arguments")["viewId"];
				this.DDA_MODEL = sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.getInstance(this.evaluationId,false,this.getView().getModel("i18n"));
				if(this.currentViewId !== this.DDA_MODEL.NEW_VIEWID) {
					this.DDA_MODEL.setViewId(this.currentViewId);	
				}
				else{
					this.DDA_MODEL.setViewId(this.DDA_MODEL.NEW_VIEWID);
					newViewFlag = true;
				}
				this.EVALUATION = sap.suite.ui.smartbusiness.lib.Util.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
				this.mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this.EVALUATION.getODataUrl(),this.EVALUATION.getEntitySet());
				this.COLUMN_LABEL_MAPPING = this.mProperties.getLabelMappingObject();
				this.bindUiToModel();
				this._oModel = this.getView().getModel("SB_DDACONFIG");
				this._oModel.getData().NO_OF_ADDITIONAL_LANGUAGES = this._oModel.getData().ADDITIONAL_LANGUAGE_TITLES.length ? (this._oModel.getData().ADDITIONAL_LANGUAGE_TITLES.length - 1) : 0;
				this._oTextsModel = this.getView().getModel("i18n");
				this._editMeasureDialog.setModel(this._oTextsModel,"i18n");
				this._editChartDialog.setModel(this._oTextsModel,"i18n");
				this._dualAxisConfig.setModel(this._oTextsModel,"i18n");
				this._msrDialogForStack1.setModel(this._oTextsModel,"i18n");
				this._oShowMeasureDialog.setModel(this._oTextsModel,"i18n");
				this.addThresholdMeasureDialog.setModel(this._oTextsModel,"i18n");
				this.prepareInitialModelData(this._oModel);

				this._updateMeasureDimensionBindings();
				this.choroplethSettingsDialog.setModel(this._oTextsModel,"i18n");

                this.choroplethSettingsDialog.setModel(this._oModel,"SB_DDACONFIG");

                //decimals given by user
        		this.nDecimal = this.EVALUATION.getDecimalPrecision();
        		this.oFormatOptions_core = { style: "short" };
        		if(!(this.nDecimal === null || this.nDecimal === -1)) {
        			this.oFormatOptions_core.minFractionDigits = this.nDecimal;
        			this.oFormatOptions_core.maxFractionDigits = this.nDecimal;
        		}
        		if(this.nDecimal === -1){
        			this.oFormatOptions_core.minFractionDigits = 2;
        			this.oFormatOptions_core.maxFractionDigits = 2;
        		}
                
				this.refreshChart();
				this.chartTypeInit();
				jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
				
				var viewData=this.getView().getModel("SB_DDACONFIG").getData();
				/*moving this above ID generation so as to open Measure&Dimension
				 * dialog on navigation to configureNewView 
				 */
/*				if(viewData.SELECTED_VIEW==""){
					var newViewFlag = true;
				}*/
				if(this.currentViewId == this.DDA_MODEL.NEW_VIEWID) {
					this.generateViewId(this);
				}
				this.takeConfigMasterSnapShot();
				this.initCopy = this.getView().getModel("SB_DDACONFIG").getJSON();
				
				
				
				sap.suite.ui.smartbusiness.lib.AppSetting.init({
					oControl : this.byId("chartIdInput"),		
					controllerReference : that,		
					hideElement  : "input",		
					i18n: {		
						checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),		
						saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),		
						cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),		
						settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
						settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
						settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")		
					},		
					title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),		
					action: that.generateViewId		
				});
				this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
				sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
				this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
			}
			catch(e) {
				that.errorState = true;
				that.errorMsg = e.message;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(this.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			}
			finally {
				this.setTooltipForAllSelect();
			}
			//open this dialog on navigation to configureNewView 
			if(newViewFlag){
			this.openAllMeasuresDimension();
			}
		}
	},
	setTooltipForAllSelect: function() {
		var select, text, i, l;
		var data = this.getView().getModel("SB_DDACONFIG").getData();
		select = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
		for(i = 0, l = data.CHART_TYPES.length; i < l; i++) {
			if(data.CHART_TYPES[i].key == data.CHART_TYPE) {
				text = data.CHART_TYPES[i].text;
			}
		}
		select.setTooltip(text);
		
		select = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual"));
		for(i = 0, l = data.AXIS_TYPES.length; i < l; i++) {
			if(data.AXIS_TYPES[i].key == data.AXIS_TYPE) {
				text = data.AXIS_TYPES[i].text;
			}
		}
		select.setTooltip(text);
		
		select = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute"));
		for(i = 0, l = data.VALUE_TYPES.length; i < l; i++) {
			if(data.VALUE_TYPES[i].key == data.VALUE_TYPE) {
				text = data.VALUE_TYPES[i].text;
			}
		}
		select.setTooltip(text);
		
		select = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));
		for(i = 0, l = data.COLOR_SCHEMES.length; i < l; i++) {
			if(data.COLOR_SCHEMES[i].key == data.COLOR_SCHEME) {
				text = data.COLOR_SCHEMES[i].text;
			}
		}
		select.setTooltip(text);
		
		select = this.getView().byId("chartDataMode");
		// data mode always defaulted to dummy value
		text = data.DATA_MODES[0].text;
		select.setTooltip(text);
	},
	displayLabelsFormatter:function(s){
		return this.COLUMN_LABEL_MAPPING[s]||s;
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._editMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._editMeasureDialog);
		this.DDA_MODEL.bindModel(this._editChartDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._editChartDialog);
		this.DDA_MODEL.bindModel(this._oShowMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._oShowMeasureDialog);
		this.DDA_MODEL.bindModel(this.addThresholdMeasureDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this.AdditionalLanguagesDialog,"SB_DDACONFIG");
	},
	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);  
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},
	takeConfigMasterSnapShot:function(){
		this._masterConfig=this._cloneObj(this._oModel.getData());
	},
	restoreFromConfigMasterSnapShot:function(){
		this._oModel.setData(this._cloneObj(this._masterConfig));
	},
	copyConfigSnapshot:function(){
		this._config=this._cloneObj(this._oModel.getData());
		this.enableOrDisableSave();//check for presence of atleast 1 msr or dim, disable save if nothing is selected
	},
	restorePrevConfig:function(){
		this._oModel.setData(this._cloneObj(this._config));
	},
	prepareInitialModelData:function(oModel){
		var tmpData=oModel.getData();
		var isSingleAxis = (tmpData.AXIS_TYPE === "SINGLE");
		var dim=tmpData.ALL_DIMENSIONS;
		var msr=tmpData.ALL_MEASURES;
		var data=[],isColumnConfigured={};
		var configuredColumns=tmpData.COLUMNS;
		for(var i=0;i<configuredColumns.length;i++){
			if(isSingleAxis && configuredColumns[i].TYPE === "MEASURE"){
				configuredColumns[i].AXIS = 1;
			}
			configuredColumns[i].SELECTED=true;
			configuredColumns[i].LABEL=this.COLUMN_LABEL_MAPPING[configuredColumns[i].NAME];
			data.push(configuredColumns[i]);
			isColumnConfigured[configuredColumns[i].NAME]=true;
		}
		for(var i=0;i<dim.length;i++){
			if(isColumnConfigured[dim[i]])
				continue;
			data.push({AXIS: 1,NAME: dim[i],SORT_BY: dim[i],SORT_ORDER: "none",STACKING: 0,
				TYPE: "DIMENSION",VISIBILITY: "BOTH",SELECTED:false,LABEL:this.COLUMN_LABEL_MAPPING[dim[i]]});
		}
		for(var i=0;i<msr.length;i++){
			if(isColumnConfigured[msr[i]]){
				continue;
			}
			data.push({0: Object,AXIS: 1,COLOR1: "",COLOR2:"",NAME: msr[i],SORT_BY: msr[i],
				SORT_ORDER: "none",STACKING: 0,TYPE: "MEASURE",VISIBILITY: "BOTH",SELECTED:tmpData.SELECTED_VIEW==""?this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME==msr[i]:false,LABEL:this.COLUMN_LABEL_MAPPING[msr[i]]
			});
		}
		tmpData.items=data;
		oModel.setData(tmpData);
	},
	_updateMeasureDimensionBindings:function(){
		var filter = new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true);
		var sorter = new sap.ui.model.Sorter("COLUMNS_ORDER",false,null);
		var binding=this.measureDimensionList.getBinding("items");
		binding.filter(filter);
		binding.sort(sorter);
	},
	onChartTypeChange:function(oEvent){
		var that=this;
		//this.copyConfigSnapshot();
		if (! this._chartTypeConfig) {
			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);
		}
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartTypeConfig"));
		var chart_type = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
//		if(chart_type.getSelectedKey().toUpperCase()!="BUBBLE")
//			this.copyConfigSnapshot();
		
/*        if(chart_type.getSelectedKey().toUpperCase()=="CHOROPLETH" ){
            this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","choroplethSettingsLink")).setVisible(true);
	    }else{
	            this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","choroplethSettingsLink")).setVisible(false);
	    }*/
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" && chart_type.getSelectedKey().toUpperCase()!="TABLE" && chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION" && chart_type.getSelectedKey().toUpperCase()!="GEOMAP" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH")?true:false);
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" &&  chart_type.getSelectedKey().toUpperCase()!="TABLE"&& chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH")?true:false);
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).setVisible(chart_type.getSelectedKey().toUpperCase()!="GEOMAP" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH" );
		this.updateSemanticColorComboBox(chart_type.getSelectedKey());
		this._updateMeasureDimensionBindings();
		
		this.getView().getModel('SB_DDACONFIG').setProperty("/AXIS_TYPE","SINGLE");
		this.getView().getModel('SB_DDACONFIG').setProperty("/VALUE_TYPE","ABSOLUTE");
		this.getView().getModel('SB_DDACONFIG').setProperty("/COLOR_SCHEME","NONE");
		
		if(chart_type.getSelectedKey().toUpperCase()=="LINE" || chart_type.getSelectedKey().toUpperCase()=="COMBINATION"||chart_type.getSelectedKey().toUpperCase()=="BUBBLE"||chart_type.getSelectedKey().toUpperCase()=="TABLE")
			this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","openchartsettings")).setEnabled(false);
		else
			this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","openchartsettings")).setEnabled(true);
		if(chart_type.getSelectedKey().toUpperCase()=="CHOROPLETH"){
			if(this.chartMeasures.length < 2){
				this.refreshChart();
			}
			else if(this.chartDimensions.length > 1){
				this.refreshChart();
			}
			else{
				that.choroplethSettingsDialog.open();
			}
		}
		else{
			this.refreshChart();
		}

		this.enableOrDisableSave();
		chart_type.setTooltip(chart_type.getSelectedItem().getText());
	},

	chartTypeInit:function(oEvent){
		var that=this;
		//this.copyConfigSnapshot();
		if (! this._chartTypeConfig) {
			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);
		}
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartTypeConfig"));
		var chart_type = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
		if(chart_type.getSelectedKey().toUpperCase()!="BUBBLE")
			this.copyConfigSnapshot();
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" && chart_type.getSelectedKey().toUpperCase()!="TABLE" && chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION" && chart_type.getSelectedKey().toUpperCase()!="GEOMAP" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH")?true:false);
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).setVisible((chart_type.getSelectedKey().toUpperCase()!="BUBBLE" &&  chart_type.getSelectedKey().toUpperCase()!="TABLE"&& chart_type.getSelectedKey().toUpperCase().toUpperCase()!="LINE" && chart_type.getSelectedKey().toUpperCase()!="COMBINATION" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH")?true:false);	
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).setVisible(chart_type.getSelectedKey().toUpperCase()!="GEOMAP" && chart_type.getSelectedKey().toUpperCase()!="CHOROPLETH" );

		/*if(chart_type.getSelectedKey().toUpperCase()=="CHOROPLETH"){
            this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","choroplethSettingsLink")).setVisible(true);
		}*/
		this.setSemanticColorComboBox(chart_type.getSelectedKey());
		this.refreshChart();
		this.enableOrDisableSave();
	},

	updateSemanticColorComboBox:function(chart_type){
		if (! this._chartTypeConfig) {

			this._chartTypeConfig = sap.ui.xmlfragment("chartTypeConfig","sap.suite.ui.smartbusiness.designtime.drilldown.view.chartTypeConfig", this);

		}
		chart_type = chart_type.toUpperCase();

		var semanticComboBox = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));

		if(chart_type == "BAR" || chart_type=="COLUMN"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);

			// if stacking by dimension is applied , disable manual coloring .
			if(this.isStackDim) {
				semanticComboBox.setSelectedKey("NONE");
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			}

		}else if(chart_type=="BUBBLE"){
			semanticComboBox.setSelectedKey("NONE");
			semanticComboBox.setVisible(false);

		} else if(chart_type=="TABLE"){

			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			if(!(semanticComboBox.getSelectedKey().toUpperCase() == "NONE" || semanticComboBox.getSelectedKey().toUpperCase() == "AUTO_SEMANTIC"))
				semanticComboBox.setSelectedKey("NONE");
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);

		} else if(chart_type=="CHOROPLETH"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			
			if(this.dda_config.chartConfig.colorScheme == "AUTO_SEMANTIC"){
				semanticComboBox.setSelectedKey("AUTO_SEMANTIC");
				if(!(this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE)){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_THRESHOLD_MEASURE"));
					return;
				}
			}
			else{
				semanticComboBox.setSelectedKey("NONE");
			}
		} else if(chart_type=="LINE"|| chart_type=="COMBINATION" ){
			semanticComboBox.setSelectedKey("MANUAL_NON_SEMANTIC");
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);
		}

	},

	setSemanticColorComboBox:function(chart_type){
		chart_type = chart_type.toUpperCase();
		var semanticComboBox = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));
		if(chart_type == "BAR" || chart_type=="COLUMN"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);

			// if stacking by dimension is applied , disable manual coloring .
			if(this.isStackDim) {
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			}

		}else if(chart_type=="BUBBLE"){
			semanticComboBox.setVisible(false);

		} else if(chart_type=="TABLE"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);

		} else if(chart_type=="CHOROPLETH"){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);
			
			if(this.dda_config.chartConfig.colorScheme == "AUTO_SEMANTIC"){
				semanticComboBox.setSelectedKey("AUTO_SEMANTIC");
				if(!(this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE)){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("SELECT_THRESHOLD_MEASURE"));
					return;
				}
			}
			else{
				semanticComboBox.setSelectedKey("NONE");
			}
		} else if(chart_type=="LINE"|| chart_type=="COMBINATION" ){
			semanticComboBox.setVisible(true);
			semanticComboBox.setEnabled(true);
			semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
			semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
			semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);
		}

	},

	formatcolor:function(s){

		return s?sap.ui.core.theming.Parameters.get(s):"transparent";
	},
	formatEditColor:function(s){

		return s?sap.ui.core.theming.Parameters.get(s):"black";
	},
	sortByMeasureVisibility:function(s){
		return s?(s.toUpperCase()=="MEASURE"||s.toUpperCase()=="KPI MEASURE"):false;
	},
	sortByDimensionVisibility:function(s){
		return s?s.toUpperCase()=="DIMENSION":false;
	},
	openAllMeasuresDimension:function(){
		this.copyConfigSnapshot();
		this._oShowMeasureDialog.open();
		var buttonContainer=this._oShowMeasureDialog.getContent()[0];
		buttonContainer.getButtons()[1].firePress();
		if(buttonContainer.getSelectedButton()==buttonContainer.getButtons()[1].getId()){
			this.showDimensionList();
		}else{
			this.showMeasureList();
		}

	},
	_isAddDimensionMode:function(){
		var buttonContainer=this._oShowMeasureDialog.getContent()[0];
		return buttonContainer.getSelectedButton()==buttonContainer.getButtons()[1].getId()
	},
	onMeasureDimensionSearch:function(oEvt){
		var mode=this._isAddDimensionMode()?"DIMENSION":"MEASURE";
		var curList=this._isAddDimensionMode()?this._oDimensionList:this._oMeasureList;
		var filter=[new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.Contains,mode)];
		var sKey = oEvt.getSource().getValue();
		if (sKey && sKey.length > 0) {
			filter.push(new sap.ui.model.Filter("LABEL", sap.ui.model.FilterOperator.StartsWith, sKey));
		}
		var binding = curList.getBinding("items");
		binding.filter(filter);
	},
	onMeasureDimensionAdded:function(){
		//this.refreshChart();
/*		var count = 0;
		for(var i=0;i<this._oDimensionList.getItems().length;i++){
			if(this._oDimensionList.getItems()[i].getContent()[0].getItems()[0].getSelected()==true){
				count++;
			}
		}
*/
		var count = this._oDimensionList.getSelectedItems().length;
		if(this.chartMeasures.length == 0 || count == 0){
			if(this.chartMeasures.length==0){
				sap.ca.ui.message.showMessageBox({
					type: sap.ca.ui.message.Type.ERROR,
					message: this.getView().getModel("i18n").getProperty("NO_MEASURES")
				});
			}
			if(count==0){
				sap.ca.ui.message.showMessageBox({
					type: sap.ca.ui.message.Type.ERROR,
					message: this.getView().getModel("i18n").getProperty("SELECT_AT_LEAST_ONE_DIMENSION")
				});
			}
		}
		else{
			this._updateMeasureDimensionBindings();
			this._oShowMeasureDialog.close();
			this.refreshChart();
			this.enableOrDisableSave(); //check for presence of atleast 1 msr or dim, disable save if nothing is selected
		}
	},
	onMeasureDimensionCancel:function(){
		this.restorePrevConfig();
		this._updateMeasureDimensionBindings();
		this._oShowMeasureDialog.close();
	},

	showDimensionList:function(){
		this._oShowMeasureDialog.removeContent(this._oMeasureList);
		this._oShowMeasureDialog.addContent(this._oDimensionList);
		this._oDimensionList.getBinding("items").filter(new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"DIMENSION"));

	},
	showMeasureList:function(){
		this._oShowMeasureDialog.removeContent(this._oDimensionList);
		this._oShowMeasureDialog.addContent(this._oMeasureList);
		this._oMeasureList.getBinding("items").filter(new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"));

	},
	formatSortOrder:function(s){
		if(s=="asc"){
			return "sap-icon://up"
		}else if(s=="desc"){
			return "sap-icon://down"
		}
		else{
			return "";
		}
	},
	colorButtonVisiblity:function(s,colorMode){
		if(s)
			return (colorMode=="MANUAL_SEMANTIC"||colorMode=="MANUAL_NON_SEMANTIC")&& s.toLowerCase()=='measure';
	},
	colorButton1Visiblity:function(s){
		return s=="MANUAL_NON_SEMANTIC";
	},
	colorButton2Visiblity:function(s){
		return s=="MANUAL_SEMANTIC";
	},
	openChartSettings : function(oEvent){
		var that = this;
		this.copyConfigSnapshot();
		// if dual axis charts chosen .
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {
			//sap.ui.core.Fragment.byId("editChartDialog","Dual_config_1").setVisible(true);
			sap.ui.core.Fragment.byId("editChartDialog","Dual_config_2").setVisible(true);
			this.copyStackConfigSnapshot();
			this.setDualStackModel(this.chartMeasures);
		} else {
			sap.ui.core.Fragment.byId("editChartDialog","Dual_config_2").setVisible(false);
		}

		var StackConfig = that.getStacking(that.chartMeasures, that.chartDimensions);
		sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setEnabled(true);
		if (StackConfig.isEnabled) {
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setSelected(true);
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(true);
			if(StackConfig.type === "M") {
				sap.ui.core.Fragment.byId("editChartDialog","addMsrToStack").setSelected(true);
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setVisible(false);
			} else if(StackConfig.type === "D") {
				sap.ui.core.Fragment.byId("editChartDialog","addMsrToStack").setSelected(false);
				sap.ui.core.Fragment.byId("editChartDialog","dimStack").setSelected(true);
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setVisible(true);
				var oJSONModel = new sap.ui.model.json.JSONModel();
				oJSONModel.setData({STdata:that.chartDimensions});
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setModel(oJSONModel);
				var otemplate = new sap.ui.core.Item({
					key: "{name}",
					text: {path:"name",
						   formatter : jQuery.proxy(that.formatMeasureName,that),
					   } 
				});
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").bindItems("/STdata",otemplate);
				if(that.getDimensionToBeStacked(that.chartDimensions)) {
					sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setSelectedKey(that.getDimensionToBeStacked(that.chartDimensions).name);
				}
			}
		} else {
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setSelected(false);
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(false);
		}

		// disable stacking option if dual charts / percentage charts :
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && (((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL") || ((this.dda_config.chartConfig.value).toUpperCase() === "PERCENTAGE"))) {
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(false);
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setSelected(true);
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setEnabled(false);
		}
		// disable stacking option for all charts except bar and column :
		if(!(((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN"))) {
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(false);
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setVisible(false);
		}
		else{
			sap.ui.core.Fragment.byId("editChartDialog","enableStacking").setVisible(true);
		}
		
		if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (this.dda_config.chartConfig.type).toUpperCase() === "CHOROPLETH"){
			var filters=[];
			var filterObject;
			if((this.dda_config.chartConfig.type).toUpperCase() === "CHOROPLETH"){
				sap.ui.core.Fragment.byId("editChartDialog","messageAddThresholdMeasure").setVisible(false);
				//sap.ui.core.Fragment.byId("editChartDialog","Dual_config_1").setVisible(false);
				sap.ui.core.Fragment.byId("editChartDialog","Dual_config_2").setVisible(false);
				sap.ui.core.Fragment.byId("editChartDialog","ThresholdMeasureSettings").setVisible(true);
				sap.ui.core.Fragment.byId("editChartDialog","MainMeasureSettings").setVisible(true);
				var filterObject = {
						"type": (new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE")),
						"name": (new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,sap.ui.core.Fragment.byId("editChartDialog","choroplethKpiMeasurechartsetting").getSelectedKey())),
						"selected": (new sap.ui.model.Filter("SELECTED", sap.ui.model.FilterOperator.EQ,true)),
				};
				var aFilterMeasure = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true)];
				sap.ui.core.Fragment.byId("editChartDialog","choroplethKpiMeasurechartsetting").getBinding('items').filter(new sap.ui.model.Filter(aFilterMeasure,true));
			}
			else{
				sap.ui.core.Fragment.byId("editChartDialog","MainMeasureSettings").setVisible(false);
				sap.ui.core.Fragment.byId("editChartDialog","ThresholdMeasureSettings").setVisible(true);
				var filterObject = {
						"type": (new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE")),
//						"name": (new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME)),   // commenting this to include kpi measure in the dropdown
						"selected": (new sap.ui.model.Filter("SELECTED", sap.ui.model.FilterOperator.EQ,true)),
				};
			}

			for(var item in filterObject) {
				filters.push(filterObject[item]);
			}
			var selectionBox=sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editChartDialog","thresholdMeasureChart"));
			var selectionItems= selectionBox.getItems()?selectionBox.getItems():[];
			if(selectionItems.length && selectionBox.getBinding('items')) {
				selectionBox.getBinding('items').filter(filters);
			}
			if(this._oModel.getData().THRESHOLD_MEASURE)  
				selectionBox.setSelectedKey(this._oModel.getData().THRESHOLD_MEASURE); 
				selectionBox.setTooltip(this._oModel.getData().THRESHOLD_MEASURE);
		}
		else{
			sap.ui.core.Fragment.byId("editChartDialog","ThresholdMeasureSettings").setVisible(false);
			sap.ui.core.Fragment.byId("editChartDialog","MainMeasureSettings").setVisible(false);
		}

/*		if(bindingContext.getObject().TYPE.toUpperCase()=="MEASURE") {
			sap.ui.core.Fragment.byId("editChartDialog","useAsThreshold").setVisible(true);     
			if(bindingContext.getObject().NAME === that._oModel.getData().THRESHOLD_MEASURE)
				sap.ui.core.Fragment.byId("editChartDialog","useAsThreshold").setSelected(true);     
			else
				sap.ui.core.Fragment.byId("editChartDialog","useAsThreshold").setSelected(false);     
		} else if(bindingContext.getObject().TYPE.toUpperCase()=="DIMENSION") {
			sap.ui.core.Fragment.byId("editChartDialog","useAsThreshold").setVisible(false);          
		}*/
		this._editChartDialog.open();
	},
	
	onEditIconPress:function(oEvent){
		var that = this;
		this.copyConfigSnapshot();
		var bindingContext=oEvent.getSource().getBindingContext("SB_DDACONFIG");

		this.columnBeingEdited = bindingContext.getObject();

		this._editMeasureDialog.bindElement(bindingContext.getPath());

		if(bindingContext.getObject().TYPE.toLowerCase()=="kpi measure"){
			sap.ui.core.Fragment.byId("editDialog","typeOf").setText(this.getView().getModel("i18n").getProperty("KPI_MEASURE"));
		}

		// showing fields relevant to measure or dimension :
		if(bindingContext.getObject().VISIBILITY.toUpperCase() === "CHART")
			sap.ui.core.Fragment.byId("editDialog","hideInTable").setSelected(true);
		else
			sap.ui.core.Fragment.byId("editDialog","hideInTable").setSelected(false);              

		sap.ui.core.Fragment.byId("editDialog","allMeasures").setTooltip(sap.ui.core.Fragment.byId("editDialog","allMeasures").getSelectedItem().getText());
		sap.ui.core.Fragment.byId("editDialog","allDimensions").setTooltip(sap.ui.core.Fragment.byId("editDialog","allDimensions").getSelectedItem().getText());
		sap.ui.core.Fragment.byId("editDialog","sortOrder").setTooltip(sap.ui.core.Fragment.byId("editDialog","sortOrder").getSelectedItem().getText());
		this._editMeasureDialog.open();
	},

	onEnableStacking: function() {
		var isChecked = sap.ui.core.Fragment.byId("editChartDialog","enableStacking").getSelected();
		if(isChecked) {
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(true);
		} else {
			sap.ui.core.Fragment.byId("editChartDialog","stackingOptions").setVisible(false);
		}
	},

	onMsrStacking: function() {
		if(sap.ui.core.Fragment.byId("editChartDialog","addMsrToStack").getSelected()) {
			sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setVisible(false);
		}
	},

	onDimStacking: function() {
		var that = this;
		if(sap.ui.core.Fragment.byId("editChartDialog","dimStack").getSelected()) {
			sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setVisible(true);
			var oJSONModel = new sap.ui.model.json.JSONModel();
			oJSONModel.setData({STdata:that.chartDimensions});
			sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setModel(oJSONModel);
			var otemplate = new sap.ui.core.Item({
				key: "{name}",
				text: {path:"name",
					   formatter : jQuery.proxy(that.formatMeasureName,that),
				   } 
			});
			sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").bindItems("/STdata",otemplate);
			if(that.getDimensionToBeStacked(that.chartDimensions)) {
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setSelectedKey(that.getDimensionToBeStacked(that.chartDimensions).name);
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setTooltip(this.COLUMN_LABEL_MAPPING[that.getDimensionToBeStacked(that.chartDimensions).name]);
			}
			else {
				sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setTooltip(this.COLUMN_LABEL_MAPPING[that.chartDimensions[0].name]);
			}
		} else {
			sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").setVisible(false);
		}
	},

	onAfterRendering : function() {
		this._fixSplitterHeight();
		sap.ui.Device.resize.attachHandler(this._fixSplitterHeight,this);
	},
	_fixSplitterHeight : function() {
		var _height = $(window).height();
		var _headerHeight = 48;
		var _footerHeight = 49;
		this.byId('splitContainer').$().css("height",(_height-(_headerHeight + _footerHeight + _headerHeight))+"px");
	},

	onEditChartDialogOk : function(oEvent){
		var that = this;

		if(sap.ui.core.Fragment.byId("editChartDialog","enableStacking").getSelected()) {                                                   // setting stacking options   
			if(sap.ui.core.Fragment.byId("editChartDialog","addMsrToStack").getSelected()) {
				that.setStacking(true, "M", that._oModel.getData().items);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					// semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
				}
			} else if(sap.ui.core.Fragment.byId("editChartDialog","dimStack").getSelected()) {
				var oDim = sap.ui.core.Fragment.byId("editChartDialog","dimsToStack").getSelectedKey();
				that.setStacking(true, "D", that._oModel.getData().items);
				that.setDimensionToBeStacked(that._oModel.getData().items, oDim);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);                    
				}
			}
		} else {
			that.setStacking(false, "N", that._oModel.getData().items);
			var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
			var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
			if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
				// semanticComboBox.setSelectedKey("NONE");
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
			}
		}

		// dual axis config setting :
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {

			var tmpData = this._oModel.getData();           
			for(var i=0;i<tmpData.items.length;i++){
				if(tmpData.items[i].TYPE.toUpperCase() === "MEASURE") {
					tmpData.items[i].AXIS = 1;              
					for(var j=0;j<that.chartMeasures.length;j++) {
						if(tmpData.items[i].NAME === that.chartMeasures[j].name) {
							tmpData.items[i].AXIS = that.chartMeasures[j].axis ;
							break;
						}
					}
				}
			}
			this._oModel.setData(tmpData);
//			}
		}
		if((this.dda_config.chartConfig.type).toUpperCase() == "CHOROPLETH"){
			var choroplethKpiMeasureSelected = sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethKpiMeasure").getSelectedKey();
			var choroplethThresholdMeasureSelected = sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethThresholdMeasure").getSelectedKey();
			this.updateMeasuresAndDimensionsInmodel(choroplethKpiMeasureSelected, choroplethThresholdMeasureSelected);
		}
		this.copyConfigSnapshot();
		this._updateMeasureDimensionBindings();
		this.refreshChart();
		this._editChartDialog.close();
	},
	onEditChartDialogCancel : function(oEvent){
		this.restorePrevConfig();
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {
			this.restoreStackPrevConfig();
		}
		this._updateMeasureDimensionBindings();
		this._editChartDialog.close();
	},
	onEditDialogOk:function(oEvent){
		var that = this;
		// updating the model
		var bindingContext=oEvent.getSource().getBindingContext("SB_DDACONFIG");

		if(sap.ui.core.Fragment.byId("editDialog","hideInTable").getSelected()) {                                                     // hide in table
			that.updateColumnProperty(that._oModel.getData().items, that.columnBeingEdited.NAME, "VISIBILITY", "CHART");
		} else {
			that.updateColumnProperty(that._oModel.getData().items, that.columnBeingEdited.NAME, "VISIBILITY", "BOTH");
		}

/*		if(that.columnBeingEdited.TYPE.toUpperCase() === "MEASURE") {                                                            // setting threshold measure
			if(sap.ui.core.Fragment.byId("editDialog","useAsThreshold").getSelected()) {
				that._oModel.getData().THRESHOLD_MEASURE = that.columnBeingEdited.NAME ;
			}
			else {
				if(that.columnBeingEdited.NAME === that._config.THRESHOLD_MEASURE) {
					that._oModel.getData().THRESHOLD_MEASURE = "";
				}
			}
		}*/

		/*if(sap.ui.core.Fragment.byId("editDialog","enableStacking").getSelected()) {                                                   // setting stacking options   
			if(sap.ui.core.Fragment.byId("editDialog","addMsrToStack").getSelected()) {
				that.setStacking(true, "M", that._oModel.getData().items);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					// semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
				}
			} else if(sap.ui.core.Fragment.byId("editDialog","dimStack").getSelected()) {
				var oDim = sap.ui.core.Fragment.byId("editDialog","dimsToStack").getSelectedKey();
				that.setStacking(true, "D", that._oModel.getData().items);
				that.setDimensionToBeStacked(that._oModel.getData().items, oDim);
				var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
				var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
				if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
					semanticComboBox.setSelectedKey("NONE");
					semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(false);
					semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(false);                    
				}
			}
		} else {
			that.setStacking(false, "N", that._oModel.getData().items);
			var semanticComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));     
			var chartTypeComboBox = that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType"));
			if(chartTypeComboBox.getSelectedKey().toUpperCase() == "BAR" || chartTypeComboBox.getSelectedKey().toUpperCase()=="COLUMN") {
				// semanticComboBox.setSelectedKey("NONE");
				semanticComboBox.getItemByKey("AUTO_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_NON_SEMANTIC").setEnabled(true);
				semanticComboBox.getItemByKey("MANUAL_SEMANTIC").setEnabled(true);                    
			}
		}

		// dual axis config setting :
		if((((this.dda_config.chartConfig.type).toUpperCase() === "BAR") || ((this.dda_config.chartConfig.type).toUpperCase() === "COLUMN")) && ((this.dda_config.chartConfig.axis).toUpperCase() === "DUAL")) {
			var axis1 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr1_edit"));
			var axis2 = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editDialog","AxisMsr2_edit"));
			if(axis1.getSelectedKey() === axis2.getSelectedKey()) {
//				var alert_text = "Please choose a different measure for each axis .";
//				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("SAME_MEASURE_CHOSEN_FOR_BOTH_AXES"));     
				jQuery.sap.log.error("Same measure chosen for both axes");
			} //else {
			var tmpData = this._oModel.getData();           
			for(var i=0;i<tmpData.items.length;i++){
				if(tmpData.items[i].TYPE.toUpperCase() === "MEASURE") {
					tmpData.items[i].AXIS = 2;              
					for(var j=0;j<that.chartMeasures.length;j++) {
						if(tmpData.items[i].NAME === that.chartMeasures[j].name) {
							tmpData.items[i].AXIS = that.chartMeasures[j].axis ;
							break;
						}
					}
				}
			}
			this._oModel.setData(tmpData);
//			}
		}*/

		this._updateMeasureDimensionBindings();
		this._editMeasureDialog.close();
		this.refreshChart();
	},
	onEditDialogCancel:function(){
		this.restorePrevConfig();
		this._updateMeasureDimensionBindings();
		this._editMeasureDialog.close();
	},
	_getColorPaletteTemplate:function(oButton){

		var iconTemplate= new sap.ui.core.Icon({
			color:{
				path:"SB_DDACONFIG>color",
				formatter:this.formatcolor
			},
			src:"sap-icon://color-fill",
			size:"32px",
			width:"5%",
			press:function(e){
				var colorType=oButton.getModel("SB_DDACONFIG").getProperty("/COLOR_SCHEME");
				colorType=(colorType=="MANUAL_NON_SEMANTIC")?"COLOR1":(colorType=="MANUAL_SEMANTIC")?"COLOR2":"";
				oButton.getBindingContext().getObject()[colorType]=this.getBindingContext("SB_DDACONFIG").getProperty("color");
				oButton.getModel().refresh();
			}
		});
		var colorCategory= new sap.m.Label({
			text:{
				path:"SB_DDACONFIG>index",
				formatter:function(ind){
					var text="";
					switch(ind){
					case 1 : text="Neutral";break;
					case 4    : text="Good";break;
					case 7:   text="Warning";break;
					case 10: text="Bad";
					}
					return text;
				}
			},
			visible:{
				path:"SB_DDACONFIG>/COLOR_SCHEME",
				formatter:function(s){return s=="MANUAL_SEMANTIC"}
			}
		})
		return new sap.m.HBox({items:[iconTemplate,colorCategory]});

	},
	showColorPopUp:function(oEvent){
		var chosenColor;
		var oButton = oEvent.getSource();
		var colorScheme=this._oModel.getProperty("/COLOR_SCHEME");
		var colorsVerticalLayout = new sap.m.VBox();
		colorsVerticalLayout.bindAggregation("items","SB_DDACONFIG>/"+colorScheme,this._getColorPaletteTemplate(oButton));
		var colorPopup = new sap.m.Popover({
			visible:{
				path:"SB_DDACONFIG>/COLOR_SCHEME",
				formatter:function(s){return s=="MANUAL_SEMANTIC"||s=="MANUAL_NON_SEMANTIC";}
			},
			showHeader:false,
			content:[ colorsVerticalLayout],

		});
		colorPopup.setModel(this._oModel,"SB_DDACONFIG");
		colorPopup.openBy(oButton);  
	},

	onEditDialogCloseButton:function(){
		this._editMeasureDialog.close();
	},

	onSingleDualChange: function(){
		var that=this;
		var selectedAxis = ((this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual"))).getSelectedKey()).toUpperCase() ;
		this.byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setTooltip(this.byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).getSelectedItem().getText());
		switch(selectedAxis) {
		case "SINGLE":
			if(!(this.prevStack && this.prevStack.isEnabled)) {
				this.setStacking(false, "N", that._oModel.getData().items);
			}
			this.refreshChart();
			break;
		case "DUAL":
			if(this.chartMeasures.length < 2) {
				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("DUAL_AXIS_CHART_MIN_MEASURE"),{onClose:function(){
					that.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setSelectedKey("SINGLE");
				}});                    
			} else {
				// to get stacking info for previous single axis chart :
				this.prevStack = this.getStacking(this.chartMeasures,this.chartDimensions);	

				// if dual chart is chosen , disable stacking by dimension :        
				this.setStacking(true, "M", this._oModel.getData().items);
				this.copyStackConfigSnapshot();
				this.dualStackValue(this.chartMeasures);
				this.setDualStackModel(this.chartMeasures);
				
				this._dualAxisConfig.open();               
			}
			break;
		default:
			break;
		}
	},
	setDualStackModel : function(measures){
		var that = this;
		var dualMsr = this.getMeasuresByAxis(measures);
		
		var DualModelStack1 = new sap.ui.model.json.JSONModel();
		DualModelStack1.setData({DATA: dualMsr.axis1.objArr});
		this._dualAxisConfig.setModel(DualModelStack1,"DUAL_AXIS1");
		this._editChartDialog.setModel(DualModelStack1,"DUAL_AXIS1");
		
		
		var DualModelStack2 = new sap.ui.model.json.JSONModel();
		DualModelStack2.setData({DATA: dualMsr.axis2.objArr});
		this._dualAxisConfig.setModel(DualModelStack2,"DUAL_AXIS2");
		this._editChartDialog.setModel(DualModelStack2,"DUAL_AXIS2");
		
		sap.ui.core.Fragment.byId("dualAxisConfig","stack1list").setText("");
		sap.ui.core.Fragment.byId("editChartDialog","stack1list_edit").setText("");
		sap.ui.core.Fragment.byId("dualAxisConfig","stack2list").setText("");
		sap.ui.core.Fragment.byId("editChartDialog","stack2list_edit").setText("");
		
		sap.ui.core.Fragment.byId("dualAxisConfig","stack1list").setText("(" + dualMsr.axis1.objArr.length + ")");
		sap.ui.core.Fragment.byId("editChartDialog","stack1list_edit").setText("(" + dualMsr.axis1.objArr.length + ")");
		sap.ui.core.Fragment.byId("dualAxisConfig","stack2list").setText("(" + dualMsr.axis2.objArr.length + ")");
		sap.ui.core.Fragment.byId("editChartDialog","stack2list_edit").setText("(" + dualMsr.axis2.objArr.length + ")");
	},
	
	copyStackConfigSnapshot:function(){
		this._stackConfig = this._cloneObj(this.chartMeasures);
	},
	restoreStackPrevConfig:function(){
		this.chartMeasures = this._stackConfig;
		this.setDualStackModel(this._stackConfig);
	},
	
	stack1removed : function(oEvent){
		var removed = new sap.ui.model.Context(this._dualAxisConfig.getModel("DUAL_AXIS1"),oEvent.getSource().getBindingContextPath()).getProperty();
		var that = this;
		if(oEvent.getSource().getModel("DUAL_AXIS1").getData().DATA.length === 1){
			sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("STACK_ERROR_MSG"));
		} else {
		for(var i=0;i<that.chartMeasures.length;i++) {           
				if(that.chartMeasures[i].name === removed.name) {
					that.chartMeasures[i].axis = 2;
				}
			}
		this.setDualStackModel(this.chartMeasures);
		}
	},
	
	stack2removed : function(oEvent){
		var removed = new sap.ui.model.Context(this._dualAxisConfig.getModel("DUAL_AXIS2"),oEvent.getSource().getBindingContextPath()).getProperty();
		var that = this;
		if(oEvent.getSource().getModel("DUAL_AXIS2").getData().DATA.length === 1){
			sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("STACK_ERROR_MSG"));
		} else {
		for(var i=0;i<that.chartMeasures.length;i++) {           
				if(that.chartMeasures[i].name === removed.name) {
					that.chartMeasures[i].axis = 1;
				}
			}
		this.setDualStackModel(this.chartMeasures);
		
		}
	},
	onDualAxisDialogOk: function(){
		var that=this;

		var tmpData = this._oModel.getData();           
		for(var i=0;i<tmpData.items.length;i++){
			if(tmpData.items[i].TYPE.toUpperCase() === "MEASURE") {
				tmpData.items[i].AXIS = 1;              
				for(var j=0;j<that.chartMeasures.length;j++) {
					if(tmpData.items[i].NAME === that.chartMeasures[j].name) {
						tmpData.items[i].AXIS = that.chartMeasures[j].axis ;
						break;
					}
				}
			}
		}
		this._oModel.setData(tmpData);        
		this.refreshChart();
		this._dualAxisConfig.close();
	},

	onDualAxisDialogCancel: function(){
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","singleDual")).setSelectedKey("SINGLE");
		this.restoreStackPrevConfig();
		this._dualAxisConfig.close();
	},

	formatAxisToBool: function(a) {
		if(a === 1)
			return true;
		else
			return false;
	},

	openMsrDialogForStack1: function() {
		var that = this;
		if (! this._msrDialogForStack1) {
			this._msrDialogForStack1 = sap.ui.xmlfragment("msrDialogForStack1","sap.suite.ui.smartbusiness.designtime.drilldown.view.msrDialogForStack1", this);
		}

		var Stack1Model = new sap.ui.model.json.JSONModel();
		Stack1Model.setData({DATA: that.chartMeasures});
		this._msrDialogForStack1.setModel(Stack1Model);
		this._msrDialogForStack1.open();
	},

	onSearchInStack1SelectDialog: function(oEvent) {
		var sValue = oEvent.getParameter("value");
		var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sValue);
		var oBinding = oEvent.getSource().getBinding("items");
		oBinding.filter([oFilter]);
	},

	onStack1SelectDialogOK: function(oEvent) {
		var that=this;
		var aContexts = oEvent.getParameter("selectedItems");
		if(!(aContexts.length)) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("SELECT_MEASURE_FOR_AXIS",1));
			}
		else if(aContexts.length == that.chartMeasures.length){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("STACK_ALL_MEASURES"));
			}
		else {
			for(var i=0;i<that.chartMeasures.length;i++) {
				that.chartMeasures[i].axis = 1;            
				for(var j=0;j<aContexts.length;j++) {
					if(that.chartMeasures[i].name === aContexts[j].getTitle()) {
						that.chartMeasures[i].axis = 2;
						break;
					}
				}
			}
			oEvent.getSource().getBinding("items").filter([]);
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			sap.ui.core.Fragment.byId("dualAxisConfig","stack1MsrsLabel").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("dualAxisConfig","stack2MsrsLabel").setText(dualMsr.axis2.nameArr.join(","));          
			if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr1").setSelectedKey(dualMsr.axis1.nameArr[0])};
			if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("dualAxisConfig","AxisMsr2").setSelectedKey(dualMsr.axis2.nameArr[0])};

			sap.ui.core.Fragment.byId("editChartDialog","stack1MsrsLabel_edit").setText(dualMsr.axis1.nameArr.join(","));
			sap.ui.core.Fragment.byId("editChartDialog","stack2MsrsLabel_edit").setText(dualMsr.axis2.nameArr.join(","));          
			if(dualMsr.axis1.nameArr.length) {sap.ui.core.Fragment.byId("editChartDialog","AxisMsr1_edit").setSelectedKey(dualMsr.axis1.nameArr[0])};
			if(dualMsr.axis2.nameArr.length) {sap.ui.core.Fragment.byId("editChartDialog","AxisMsr2_edit").setSelectedKey(dualMsr.axis2.nameArr[0])};
		}          
	},

	onStack1SelectDialogCancel: function() {

	},

	onDataModeChange: function() {
		this.refreshChart();
		var datalimit = this.getView().byId("chartDataMode");
		datalimit.setTooltip(datalimit.getSelectedItem().getText());
	},

	onIsAbsoluteChange: function(){
		var valueType = ((this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute"))).getSelectedKey()).toUpperCase() ;
		// if percentage is chosen , disable stacking by dimension :
		if(valueType === "PERCENTAGE")
			this.setStacking(true, "M", this._oModel.getData().items);
		this.refreshChart();
		this.byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).setTooltip(this.byId(sap.ui.core.Fragment.createId("chartTypeConfig","isAbsolute")).getSelectedItem().getText());
	},

	onSemanticColorOptionChange: function(){

		var that = this;

		var semanticColorSelect = this.byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors"));
		semanticColorSelect.setTooltip(semanticColorSelect.getSelectedItem().getText());
		
		if(this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).getSelectedKey()=="AUTO_SEMANTIC"){
			if(this.chartMeasures.length >= 2){

				if(!(this.dda_config.chartConfig.type.toUpperCase() == "CHOROPLETH" && this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE)){
					var filters=[];
					var filterObject = {
							"type": (new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE")),
//							"name": (new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME)),   // commenting this to include kpi measure in the dropdown
							"selected": (new sap.ui.model.Filter("SELECTED", sap.ui.model.FilterOperator.EQ,true)),
					};
					for(var item in filterObject) {
						filters.push(filterObject[item]);
					}
					var selectionBox=sap.ui.getCore().byId(sap.ui.core.Fragment.createId("thresholdDialog","thresholdMeasure"));
					var selectionItems= selectionBox.getItems()?selectionBox.getItems():[];
					if(selectionItems.length && selectionBox.getBinding('items')) {
						selectionBox.getBinding('items').filter(filters);
					}
					if(this._oModel.getData().THRESHOLD_MEASURE)  
						selectionBox.setSelectedKey(this._oModel.getData().THRESHOLD_MEASURE); 
					this.addThresholdMeasureDialog.open();
					if(selectionBox && selectionBox.getSelectedItem()) {
						selectionBox.setTooltip(selectionBox.getSelectedItem().getText());
					}
					return;
				}
			}
		}
		this.refreshChart();
	},
	onThresholdMeasureAdded:function(){
		var threshold = sap.ui.getCore().byId(sap.ui.core.Fragment.createId("thresholdDialog","thresholdMeasure")).getSelectedKey();
		this.updateMeasuresAndDimensionsInmodel(this.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE, threshold);
		this.copyConfigSnapshot();
		this.refreshChart();
		this.addThresholdMeasureDialog.close();

	},
	onThresholdMeasureCancel:function(){
		this.addThresholdMeasureDialog.close();

	},

	/******* methods for Chart Name Additional Languages : BEGIN ************/
	//utility fn
	getLAISOfromSPRAS: function(key) {
		var allLangs = this.getView().getModel('SB_DDACONFIG').getData().ALL_LANGUAGES;
		for(var i = 0; i < allLangs.length; ++i) {
			if(allLangs[i]["SPRAS"] == key)
				return allLangs[i]["LAISO"];
		}
	},
	//utilify fn: gives the index of duplicate if exists, else returns -1. @param data. @param SAP_LANGUAGE_KEY.
	getIndexOfDuplicate: function(data, lang){
		for(var i = 0; i < data.length; ++i) {
			if(data[i]["SAP_LANGUAGE_KEY"] == lang)
				return i; //duplicate at position i
		}
		//no duplicate
		return -1;
	},

	openAdditionalLanguagesDialog: function() {
		var self = this;
		this.AdditionalLanguagesDialog.setModel(this._oTextsModel,"i18n");
		//take a copy of model incase the user needs to cancel
		this.copyConfigSnapshot();
		//reset input field as blank
		sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitle").setValue("")
		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		ALTable.bindAggregation("items", "SB_DDACONFIG>/ADDITIONAL_LANGUAGE_TITLES", new sap.m.ColumnListItem({
			cells:[
			       new sap.m.Label({text: "{SB_DDACONFIG>TEXT}"}),
			       new sap.m.Label({text: {path: "SB_DDACONFIG>SAP_LANGUAGE_KEY", formatter: function(s){return self.getLAISOfromSPRAS(s)}}}),
			       new sap.ui.core.Icon({src: "sap-icon://decline", press: this.deleteEntry})
			       ],
			       //text in locale language not to be shown
			       visible: {
			    	   path: "SB_DDACONFIG>SAP_LANGUAGE_KEY",
			    	   formatter: function(s){
			    		   return s != self._oModel.getData()["CURRENT_LANGUAGE"]
			    	   }
			       }
		}));
		this.AdditionalLanguagesDialog.open();
		return;
	},

	closeAdditionalLanguagesDialog_OK: function(evt) {
		//set the clipboard variable since OK pressed
		this.copyConfigSnapshot();
		this.AdditionalLanguagesDialog.close();
		return;
	},

	closeAdditionalLanguagesDialog_Cancel: function(evt) {
		//restore to the model copied when dialog is open
		this.restorePrevConfig();
		this.AdditionalLanguagesDialog.close();
		return;
	},
	
	formatAdditionalLanguageLink : function(sValue){
		return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
	},



	deleteEntry: function(evt) {
		var bindingPath = evt.getSource().getParent().getBindingContextPath();
		var index = parseInt(bindingPath.split("/").pop());
		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		//remove the entry from model
		ALTable.getModel("SB_DDACONFIG").getData()["ADDITIONAL_LANGUAGE_TITLES"].splice(index, 1);
		ALTable.getModel("SB_DDACONFIG").getData().NO_OF_ADDITIONAL_LANGUAGES = ALTable.getModel("SB_DDACONFIG").getData().NO_OF_ADDITIONAL_LANGUAGES - 1;
		ALTable.getModel("SB_DDACONFIG").refresh();
		return;
	},

	addEntry: function() {
		var newTitle = sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitle").getValue();
		var newTitleLanguage = sap.ui.core.Fragment.byId("additionalLanguageDialog", "newTitleLanguage").getSelectedKey();

		//die silently if both not valid
		if (newTitle && newTitleLanguage) {} else return;

		var ALTable = sap.ui.core.Fragment.byId("additionalLanguageDialog", "ALTable");
		var tableData = ALTable.getModel("SB_DDACONFIG").getData();
		//add entry to the model
		var newEntry = {
				EVALUATION_ID : this.DDA_MODEL.getConfigurator().evaluationId,
				CONFIGURATION_ID : this._oModel.getData().SELECTED_VIEW || this._oModel.getData().ID,
				SAP_LANGUAGE_KEY : newTitleLanguage,
				TEXT : newTitle,
				IS_ACTIVE : this._oModel.getData()["IS_ACTIVE"] || 1
		};
		var index;
		if((index = this.getIndexOfDuplicate(tableData["ADDITIONAL_LANGUAGE_TITLES"], newTitleLanguage)) == -1)
			tableData["ADDITIONAL_LANGUAGE_TITLES"].push(newEntry);
		else {
			tableData["ADDITIONAL_LANGUAGE_TITLES"].splice(index, 1);
			tableData["ADDITIONAL_LANGUAGE_TITLES"].push(newEntry);
		}
		ALTable.getModel("SB_DDACONFIG").getData().NO_OF_ADDITIONAL_LANGUAGES = ALTable.getModel("SB_DDACONFIG").getData().NO_OF_ADDITIONAL_LANGUAGES + 1;
		ALTable.getModel("SB_DDACONFIG").refresh();
		return;
	},
	formatName:function(a,b){
		return a+" "+b;
	},

	formatColorForMap : function(main_measure,threshold_measure){
		var semanticColorOption = this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).getSelectedKey();
		var goal_type = this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE;
		
		if(semanticColorOption=="AUTO_SEMANTIC" && threshold_measure){
				if(goal_type == "MA" || goal_type == "RA"){
					if(main_measure > threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
					}
					else if(main_measure == threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
					}
					else if(main_measure < threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
					}
				}
				else if(goal_type == "MI"){
					if(main_measure < threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
					}
					else if(main_measure == threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
					}
					else if(main_measure > threshold_measure){
						return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
					}
				}
			}
		else if(semanticColorOption=="NONE" && threshold_measure){
			if(goal_type == "MA" || goal_type == "RA"){
				if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
			else if(goal_type == "MI"){
				if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
		}
			else{
				return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));
			}
	},
	
	formatCode : function(code){
		return code;
	},

	/******* methods for Chart Name Additional Languages : END ************/

//	All Chart Refresh Functions :

	refreshChart: function() {

		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;
		// for checking proper configuration while saving .
		this.canSave = false;
		
		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;

		var tmpData = this._oModel.getData();
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,  
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.items.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.items[i].NAME,
				type: tmpData.items[i].TYPE,
				selected: tmpData.items[i].SELECTED || false,
				visibility: tmpData.items[i].VISIBILITY || "BOTH",
				sortOrder: tmpData.items[i].SORT_ORDER || "NONE",
				sortBy: tmpData.items[i].SORT_BY || "",
				axis: tmpData.items[i].AXIS || 2,
				stacking: tmpData.items[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.items[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.items[i].COLOR2:""
			}) ;
		}             

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			if(this.dda_config.columnsConfig[i].selected) {
				this.oColumns.push(this.dda_config.columnsConfig[i]);
				if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
					this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
						this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
					}
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
						this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
					}     
				} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
					this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
						this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
					}
					if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
						this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
						this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
					}
				}
			} 
		}
		
		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;		                           

		//getting labels , texts etc.
		try {
			var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this._oModel.getData().QUERY_SERVICE_URI,this._oModel.getData().QUERY_ENTITY_SET); 
		}
		catch(e) {
			jQuery.sap.log.error("Failed to instantiate the odata model");
			throw e;
		}
		this.column_labels_mapping = mProperties.getLabelMappingObject();
		this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
		this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();			

		// create viz chart :
		vizVbox.setVisible(true);
		choroplethVbox.setVisible(false);
		// get data for chart.....................
		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
			this.oChartDataModel.setData({businessData: oController.oChartData}) ;
		} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
		} 
		
		if((this.dda_config.chartConfig.type).toUpperCase() == "CHOROPLETH"){
			this.plotMapForChoropleth();
		}
		else{
			this.createVizChart(this.chartDimensions,this.chartMeasures);
		}
						
	},  

	plotMapForChoropleth : function(){
		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;

		if(this.chartMeasures.length < 2){
			sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("CHOROPLETH_CHART_MIN_MEASURE"),{onClose:function(){
				if(oController._config){
					oController.restorePrevConfig();
				}
				else{
					oController.restoreFromConfigMasterSnapShot();
				}
					oController.onChartTypeChange();
					oController.refreshChart();
				
				}});
			return;
		}
		else if(this.chartDimensions.length > 1){
			sap.m.MessageBox.alert(oController._oTextsModel.getResourceBundle().getText("CHOROPLETH_CHART_MIN_DIMENSION"),{onClose:function(){
				if(oController._config){
					oController.restorePrevConfig();
				}
				else{
					oController.restoreFromConfigMasterSnapShot();
				}
					oController.onChartTypeChange();
					oController.refreshChart();
				
				}});
			return;
		}

		vizVbox.setVisible(false);
		choroplethVbox.setVisible(true);
		choroplethVbox.removeAllItems();
		this.oModelForMap = new sap.ui.model.json.JSONModel();

		var items = this.getView().getModel("SB_DDACONFIG").getData().items;
		var itemsLength = items.length;
		var measuresArray = [];
		for(var i=0;i<itemsLength;i++){
			if(items[i].TYPE=='MEASURE' && items[i].SELECTED==true){
				if(items[i].MAIN_MEASURE){
					this.getView().getModel("SB_DDACONFIG").getData().MAIN_MEASURE = items[i].NAME;
				}
				measuresArray.push(items[i]);
			}
			else if(items[i].TYPE=='DIMENSION' && items[i].SELECTED==true){
				this.getView().getModel("SB_DDACONFIG").getData().GEO_DIMENSION = items[i].NAME;
			}
		}
		
		for(var i=0;i<itemsLength;i++){
			if(items[i].TYPE=='DIMENSION'){
				items[i].COLUMNS_ORDER = 4
			}
			else if(items[i].TYPE='MEASURE'){
				if(items[i].NAME==this.getView().getModel("SB_DDACONFIG").getData().MAIN_MEASURE){
					items[i].COLUMNS_ORDER = 1
				}
				else if(items[i].NAME==this.getView().getModel("SB_DDACONFIG").getData().THRESHOLD_MEASURE){
					items[i].COLUMNS_ORDER = 2
				}
				else{
					items[i].COLUMNS_ORDER = 3
				}
			}
		}
		this._updateMeasureDimensionBindings();
		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			geoDimensionForChoropleth = "CustomerCountry";
			mainMeasureForChoropleth = "DaysSalesOutstanding";
			thresholdMeasureForChoropleth = "BestPossibleDaysSalesOutstndng";
			
			var oData = 
			{
					businessData :
						[
						 { "CustomerCountry": "IT","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "IN","DaysSalesOutstanding" : 500,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "RU","DaysSalesOutstanding" : 40,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AU","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "BR","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "NO","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AR","DaysSalesOutstanding" : 130,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "ZA","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "CA","DaysSalesOutstanding" : 75,"BestPossibleDaysSalesOutstndng" : 125}
						 ],
			};
			this.oModelForMap.setData(oData);
		}
		else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			geoDimensionForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().GEO_DIMENSION;
			mainMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE;
			thresholdMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE;
			
			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures);
		}
		//sap.ui.vbm.AnalyticMap.GeoJSONURL  =  jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.lib")+"/L0.json";
		choroplethVbox.addItem(new sap.ui.vbm.AnalyticMap({
			width : "100%",
			height : "700px",
			regions : {
				path : "mapModel>/businessData",
				template: new sap.ui.vbm.Region({
					code: {
						path: "mapModel>"+geoDimensionForChoropleth,
						formatter:jQuery.proxy(oController.formatCode,oController)
					},
					color: {
						parts:[{
							path: "mapModel>"+mainMeasureForChoropleth
						},
						{
							path: "mapModel>"+thresholdMeasureForChoropleth
						}], 
						formatter:jQuery.proxy(oController.formatColorForMap,oController)
					},
				})
			}
		}).addStyleClass('choroplethMap')).setModel(this.oModelForMap,"mapModel");

		return;
	},

	showChartLegendIfApplicable : function(dimensions, measures) {
		var that = this;
		var otoolbar = this.getView().byId("vizChartContainer") ;
		
		var chtype = this.dda_config.chartConfig.type ;
		var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        
		
		if((measures.length > 1) || (isStackApplied)) {             
			otoolbar.setShowLegend(true);
		} else {
			otoolbar.setShowLegend(false);
		}		
			
	},

	getStacking: function(measures,dimensions) {                                                                 // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";

		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}                  
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}                  
			}
		}

		return oStacking;
	},

	setStacking: function(isEnabled,type,columns) {                                                                         // TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}    
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}                  
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}         
	},

	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}

		return oDim ;
	},

	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},

	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},
	
	dualStackValue : function(columns){
		var count = 1;
		for(var i=0;i<columns.length;i++){
			if(columns[i].axis === 1){
				count++
			}
			if(columns.length === count ){
				columns[columns.length - 1].axis = 2;
			}
		}
	},

	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];

		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},


	getAxisOfMsr: function(oMeasure) {
		var axis = 1 ; 
		for(var i=0;i<this.chartMeasures.length;i++) {
			if((this.chartMeasures[i]).name === oMeasure) {
				axis = (this.chartMeasures[i]).axis ;
				break;
			}
		}
		return axis;
	},
	
	getSelectedMeasuresCount: function(msrObjArray) {
		var count=0;
		for(var i=0;i<msrObjArray.length;i++) {
			if((msrObjArray[i].TYPE).toUpperCase() == "MEASURE" && (msrObjArray[i].SELECTED))
				++count;
		}
		return count;
	},

	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
		if(!this.EVALUATION.isTargetKpi()) {
			if(actualValue < thresholdValue) {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
			} else if (actualValue == thresholdValue) {
				return sap.ui.core.ValueState.None;
			} else {
				return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
			}
		} else {
			return sap.ui.core.ValueState.None;
		}
	},
	_getTableCellFormatter: function(originalMeasure, isPercentScaled, axisScaled) {
		var that = this;
		var formatter;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if(isPercentScaled) {
			if(chartType.toUpperCase() == "TABLE") {
				if(that._isEvaluationThresholdMeasure(originalMeasure))
					formatter= this.getChartPercentFormatter(true);
				else
					formatter= this.getChartNumberFormatter(true);
			} else if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				if(axisScaled[(that.getAxisOfMsr(originalMeasure))-1])
					formatter= this.getChartPercentFormatter(true);
				else
					formatter= this.getChartNumberFormatter(true);
			} else {
				formatter= this.getChartPercentFormatter(true);
			}
		}
		else	
			formatter= this.getChartNumberFormatter(true);
		return formatter;
	},
	_getTableCell : function(originalMeasure, thresholdMeasure, is_percent_scale, axisScale) {
		var that = this;
		if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
			return new sap.m.ObjectNumber({
				number: {
					path: originalMeasure,
					formatter: that._getTableCellFormatter(originalMeasure, is_percent_scale, axisScale)  
				},
				state : {
					parts : [
					         {path : originalMeasure},
					         {path : thresholdMeasure}
					         ],
					         formatter : function(oMeasureValue, tMeasureValue) {
					        	 try {
					        		 oMeasureValue = window.parseFloat(oMeasureValue);
					        		 tMeasureValue = window.parseFloat(tMeasureValue);
					        		 return that._getValueState(oMeasureValue, tMeasureValue);
					        	 }catch(e) {
					        		 return sap.ui.core.ValueState.None;
					        	 }
					         }
				}
			});
		} else {
			return new sap.m.Label({
				text : {
					path : originalMeasure,
					formatter: that._getTableCellFormatter(originalMeasure, is_percent_scale, axisScale)
				}
			})
		}
	},



	formatChartNumbers: function (value) {
		//var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				if (dec || dec==0){
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short',
						minFractionDigits: dec,
						maxFractionDigits: dec
					});
				}

				else{
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short'
					});
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},
	get_hana_client : function(){
		var sessionClient;
		var cacheHanaClient = sap.suite.ui.smartbusiness.lib.Util.cache.getCacheHanaClient();
		if(cacheHanaClient){
			sessionClient = cacheHanaClient;
			return sessionClient;
		}
		jQuery.ajax({
			type: "GET",
			async: false,
			dataType: "json",
			url: sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters("/sap/hba/r/sb/core/logic/GetSessionClient.xsjs"),
			success: function(d, s, x) {
				sessionClient = d.sessionClient;
			},
			error: function (jqXHR, textStatus, errorThrown) {
				            	jQuery.sap.log.error(jqXHR.responseText);
				    }
		});
		sap.suite.ui.smartbusiness.lib.Util.cache.setCacheHanaClient(sessionClient);
		return sessionClient;
	},

	getRuntimeChartData: function(dimensions,measures,dimObjArr,msrObjArr) {                          // TODO
		var that = this;

		var chartToolbarRef = this.getView().byId("vizChartContainer");
		chartToolbarRef.setBusy(true);

		var oDims = [];
		var oMsrs = [];

		dimensions.forEach(function(x){oDims.push(x)}) ;
		measures.forEach(function(x){oMsrs.push(x)}) ;

		this.COLUMNS_SORT = [];
		for(var i=0;i<that.oColumns.length;i++) {
			if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
				if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase() == "DESC") {
					this.COLUMNS_SORT.push({
						name : that.oColumns[i].sortBy,
						order : that.oColumns[i].sortOrder
					});
					if(that.oColumns[i].sortBy != that.oColumns[i].name) {
						if((that.oColumns[i].type).toUpperCase() == "DIMENSION") {
							if((oDims.indexOf(that.oColumns[i].sortBy)) == -1) {
								oDims.push(that.oColumns[i].sortBy) ;
							}
						} else if((that.oColumns[i].type).toUpperCase() == "MEASURE") {
							if((oMsrs.indexOf(that.oColumns[i].sortBy)) == -1) {
								oMsrs.push(that.oColumns[i].sortBy) ;
							}
						}
					}
				}
			}
		}        

		try{
			/* TODO: get this from an xsjs service
			 * something like:
			 * var HANA_USER_CLIENT = get_hana_client();
			 */
			var modelerService = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
			if(!(this.isCDS)) {
				var HANA_USER_CLIENT = that.get_hana_client();
				//var HANA_USER_CLIENT = "ERR_sapclient_getRuntimeChartData";
				this.DDA_MODEL.EVALUATION_DATA.FILTERS.results.forEach(function(r,i,a){
					if(r["NAME"] === "P_SAPClient" && r["VALUE_1"] === "$$$") {
						r["VALUE_1"] = HANA_USER_CLIENT;
					}
				});
			}

			var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
				serviceUri : this._oModel.getData().QUERY_SERVICE_URI,
				entitySet : this._oModel.getData().QUERY_ENTITY_SET,
				dimension : oDims,
				measure : oMsrs,
				filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
				sort : this.COLUMNS_SORT,
				dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
				//includeDimensionKeyTextAttribute : true/false, default true,
				//includeMeasureRawFormattedValueUnit : true/false, default True,
			});

			oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
				if(data.results.length) {
					that.oChartData = data.results ;      
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
					if((that.getView().getModel('SB_DDACONFIG').getData().CHART_TYPE).toUpperCase()=='CHOROPLETH'){
						that.oModelForMap.setData({businessData: that.oChartData});
					}					
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];        
					that.oChartDataModel.setData({businessData: that.oChartData});
				}
				chartToolbarRef.setBusy(false);				
			}, function() {
				jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
				that.oChartData = [];        
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
			});
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];        
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},

	getChartPercentFormatter: function(isStandard){
		//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ui.core.format.NumberFormat.getPercentInstance(formatterConstructor);
		return function(s){
			return isNumber(s)?chartFormatter.format_percentage(Number(s)):s;
		};
	},

	getChartNumberFormatter: function(isStandard){
		//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		var formatterConstructor={style:isStandard?'standard':'short'};
		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
		var chartFormatter=sap.ui.core.format.NumberFormat.getFloatInstance(formatterConstructor);
		return function(s){
			return isNumber(s)?chartFormatter.format(Number(s)):s;
		};
	},

	getIsPercentScaled: function(measures) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		var isPercentScaled = false ;
		if(thresholdMsrsArray && thresholdMsrsArray.length) {
			for(var i=0;i<measures.length;i++) {
				if(thresholdMsrsArray.indexOf(measures[i]) != -1) {
					isPercentScaled = true ;
					break ;
				} 
			}
		}
		return isPercentScaled;
	},

	_getEvaluationThresholdMeasures : function(){
		var thresholdMeasuresArray = [];
		thresholdMeasuresArray.push(this.EVALUATION.getKpiMeasureName());
		if(this.EVALUATION.getThresholdValueType() === "MEASURE") {
			var thresholdObjArray = this.EVALUATION.getValues().results ;
			if(thresholdObjArray && thresholdObjArray.length) {
				for(var i=0;i<thresholdObjArray.length;i++) {
					if((thresholdObjArray[i]).COLUMN_NAME && !((thresholdObjArray[i]).FIXED)) {
						thresholdMeasuresArray.push((thresholdObjArray[i]).COLUMN_NAME);
					}
				}
			}
		}
		return thresholdMeasuresArray;
	},

	_isEvaluationThresholdMeasure : function(oMsr) {
		if(this.thresholdMeasuresArray && this.thresholdMeasuresArray.length) {
			var thresholdMsrsArray = this.thresholdMeasuresArray;
		} else {
			var thresholdMsrsArray = this._getEvaluationThresholdMeasures();
		}
		if(thresholdMsrsArray && thresholdMsrsArray.length) {
			if(thresholdMsrsArray.indexOf(oMsr) != -1) {
				return true;					
			} 
		}
		return false;
	},

	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		var that = this;
		MAX_D=MAX_D|| 10;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={},p;
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}
		p=MAX_D-1;
		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=that.chartDummyData.MEASURES[i][j];
			}
			chartData.push(tmp);
			p--;
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},

	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},

	// --------------------------------------------------------------------------------------------

	/*
	 * START - VALIDATE AND SAVE FUNCTIONS
	 */
	/**
	 * No need to make odata call, as all the configurations available locally.
	 */
	//called on change as well as before save
	validateChartId: function(oEvent){
		//@TODO get Field reference using fragment
		var chartIdField = oEvent ? oEvent.getSource() : this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[1];
		var chartId =  chartIdField.getValue();
		
		//chartId shouldn't be blank, must contain only words,numbers,.,_
		if(/^[\w\d\.\_]+$/.test(chartId)) {
			if(this.DDA_MODEL.getConfigurator().findViewById(chartId)) {
				if(!this._oModel.getData().ID_EDITABLE){
					chartIdField.setValueState(sap.ui.core.ValueState.None);
					return true;
				} else {
					chartIdField.setValueState(sap.ui.core.ValueState.Error);
					chartIdField.focus();
					return false;
				}
			} else {
				chartIdField.setValueState(sap.ui.core.ValueState.None);
				return true;
			}
		} else {
			chartIdField.setValueState(sap.ui.core.ValueState.Error);
			return false;
		}
	},

	validateChartName: function() {
		//@TODO get Field reference using fragment
		var chartNameField = this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[3];
		var chartName = chartNameField.getValue();
		if(chartName) {
			chartNameField.setValueState(sap.ui.core.ValueState.None);
			return true;
		} else {
			chartNameField.setValueState(sap.ui.core.ValueState.Error);
			chartNameField.focus();
			return false;
		}
	},

	validateDataLimit:function(oEvent){
		var datafield = oEvent ? oEvent.getSource() :this.getView().getContent()[0].getContent()[0].getMasterPages()[0].getContent()[2].getItems()[7];	
		var dataLimit = datafield.getValue();
		if(/^\d+$/gi.test(dataLimit)) {

			var parseDataLimit=parseInt(dataLimit,10);
			if( parseDataLimit>0){
				datafield.setValueState(sap.ui.core.ValueState.None);
				return true;
			}
		}else{
			datafield.setValueState(sap.ui.core.ValueState.Error);
			return false; 
		}

	},
	onSave:function(){
		var that = this;
		if(that.errorState) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
			return;
		}
		if(this.validateChartName()&&this.validateDataLimit()) {
			var self = this;
			if(this.currentViewId == this.DDA_MODEL.NEW_VIEWID) {
				this.oApplicationFacade.__newViewAdded = true;
				this.oApplicationFacade.createdViewId = this.getView().getModel("SB_DDACONFIG").getData().SELECTED_VIEW;
			}
			this.busyIndicator.open() && this.getView().setBusy(true);
			var modelData=this.getView().getModel("SB_DDACONFIG").getData();
			var saveService=sap.suite.ui.smartbusiness.Adapter.getService("DrilldownServices");
			saveService.saveViewConfiguration(this.evaluationId,modelData,"update",function(){
				jQuery.sap.log.info("all calls success");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.m.MessageToast.show(self._oTextsModel.getResourceBundle().getText("CHART_CONFIG_SAVE_SUCCESS"));
				self.oApplicationFacade.__refreshModel = 1;
				/*
				 * oApplicationFacade.__contextViewId stores view id on save
				 * so that configurator view can init under this context.
				 */
				self.oApplicationFacade.__contextViewId = self.getView().getModel("SB_DDACONFIG").getData()["SELECTED_VIEW"];
				try {
					if(sap.suite && sap.suite.ui && sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.drilldown.lib.Configuration && sap.suite.ui.smartbusiness.drilldown.lib.Configuration.resetDrilldownConfiguration) {
						sap.suite.ui.smartbusiness.drilldown.lib.Configuration.resetDrilldownConfiguration(self.evaluationId);
					}
				} catch(e) {}
//				if(self.DDA_MODEL.getConfigurator().getAllViews().length==0){
//                    //self.oRouter.navTo("configurator", {evaluationId: self.DDA_MODEL.EVALUATION_DATA.ID, viewId: self.getView().getModel("SB_DDACONFIG").getData().SELECTED_VIEW});
//                    sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"configurator", context: self.DDA_MODEL.EVALUATION_DATA.ID + "/" + self.getView().getModel("SB_DDACONFIG").getData().SELECTED_VIEW});
//                }
//                else{
//                    window.history.back();
//                }
				if(self.navigatingWithinDrilldown) {
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"configurator", context: self.DDA_MODEL.EVALUATION_DATA.ID + "/" + self.getView().getModel("SB_DDACONFIG").getData().SELECTED_VIEW});
					self.takeConfigMasterSnapShot();
				}
				else {
					window.history.back();
				}
			},function(){
				jQuery.sap.log.error(x + " failed");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR"));
				});
		}
	},
	formatMeasureName : function(s){
		var label = this.COLUMN_LABEL_MAPPING[s];
		if(s==this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME){       
			label+= "(" + this.getView().getModel("i18n").getProperty("KPI_MEASURE") +")";
		}  
		return label;
	},
	formatMeasureNameInList: function(name,type){
		var text = null;
		var kpiMeasure = this.DDA_MODEL.EVALUATION_DATA.COLUMN_NAME;
		var mainMeasure = this.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE;
		var thresholdMeasure = this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE;
		
		if(type=="DIMENSION"){
			text=this.getView().getModel("i18n").getProperty("DIMENSION");
		}
		if(type=="MEASURE"){
			text=this.getView().getModel("i18n").getProperty("MEASURE");

			if(name==kpiMeasure){
				text=this.getView().getModel("i18n").getProperty("KPI_MEASURE");
			}
			if(name==thresholdMeasure){
				if(name === kpiMeasure) {
					text = this.getView().getModel("i18n").getProperty("KPI_MEASURE_THRESHOLD_MEASURE");
				} else {
					text=this.getView().getModel("i18n").getProperty("THRESHOLD_MEASURE");
				}
			}
		}
		
		if((this.getView().getModel('SB_DDACONFIG').getData().CHART_TYPE).toUpperCase() == "CHOROPLETH"){
			if(type=="DIMENSION"){
				text=this.getView().getModel("i18n").getProperty("GEO_DIMENSION");
			}
			if(type=="MEASURE"){
				if(name==mainMeasure){
					text=this.getView().getModel("i18n").getProperty("MAIN_MEASURE");
				}
			}
		}
		return text;
	},

	formatType:  function(type){
		if(type=="MEASURE")
			type=this.getView().getModel("i18n").getProperty("MEASURE");
		if(type=="DIMENSION")
			type=this.getView().getModel("i18n").getProperty("DIMENSION");
		return type;
	},

	/**
	 * Change the order of Dimensions And Measures Added
	 */
	sortDimensionsAndMeasures : function() {
		var oController = this;
		new sap.suite.ui.smartbusiness.lib.ListPersona({
			title : this.getView().getModel("i18n").getProperty("CHANGE_ORDER"),
			view : this.getView(),
			context : '/items',
			listItemContext : 'LABEL',
			formatter:jQuery.proxy(this.formatMeasureName,this),
			namedModel : 'SB_DDACONFIG',
			filter : {
				property : 'SELECTED',
				value : true
			},
			callback : function() {
				oController.refreshChart();
			}
		}).start();
	},

	onBack : function() {
		var self = this;
		
		var replaceHashObject = {};
		if(self.DDA_MODEL.getConfigurator().getAllViews().length) {
			replaceHashObject = {action:"configureSBKPIDrilldown", route:"configurator", context: self.DDA_MODEL.EVALUATION_DATA.ID + "/" + self.oApplicationFacade.configuratorViewId};
		}
		else {
			replaceHashObject = {action:"configureSBKPIDrilldown", route:"noDataView", context: "EVALUATIONS_MODELER(ID='" + self.DDA_MODEL.EVALUATION_DATA.ID + "',IS_ACTIVE=1)"};
		}
		
		if(this.isModelChanged()){
			new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:self._oTextsModel.getResourceBundle().getText("WARNING"),
				state:"Error",
				type:"Message",
				content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
				beginButton: new sap.m.Button({
					text:self._oTextsModel.getResourceBundle().getText("OK"),
					press: function(){
						self.restoreFromConfigMasterSnapShot();
						this.getParent().close();
						if(self.navigatingWithinDrilldown) {
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash(replaceHashObject);
						}
						else {
							window.history.back();
						}
					}
				}),
				endButton: new sap.m.Button({
					text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
					press:function(){this.getParent().close();}
				})                                           
			}).open();
		}
		else{
			self.restoreFromConfigMasterSnapShot();
			//this.getParent().close();
			if(self.navigatingWithinDrilldown) {
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash(replaceHashObject);
			}
			else {
				window.history.back();
			}
		}

	},

	onCancel: function() {
		var self = this;
		
		var replaceHashObject = {};
		if(self.DDA_MODEL.getConfigurator().getAllViews().length) {
			replaceHashObject = {action:"configureSBKPIDrilldown", route:"configurator", context: self.DDA_MODEL.EVALUATION_DATA.ID + "/" + self.oApplicationFacade.configuratorViewId};
		}
		else {
			replaceHashObject = {action:"configureSBKPIDrilldown", route:"noDataView", context: "EVALUATIONS_MODELER(ID='" + self.DDA_MODEL.EVALUATION_DATA.ID + "',IS_ACTIVE=1)"};
		}
		
		if(this.isModelChanged()){
			new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:self._oTextsModel.getResourceBundle().getText("WARNING"),
				state:"Error",
				type:"Message",
				content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
				beginButton: new sap.m.Button({
					text:self._oTextsModel.getResourceBundle().getText("OK"),
					press: function(){
						self.restoreFromConfigMasterSnapShot();
						this.getParent().close();
						if(self.navigatingWithinDrilldown) {
							sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash(replaceHashObject);
						}
						else {
							window.history.back();
						}
					}
				}),
				endButton: new sap.m.Button({
					text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
					press:function(){this.getParent().close();}
				})                                           
			}).open();
		}
		else{
			self.restoreFromConfigMasterSnapShot();
			//this.getParent().close();
			if(self.navigatingWithinDrilldown) {
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash(replaceHashObject);
			}
			else {
				window.history.back();
			}
		}
	},
	onExit:function(){
		this.restoreFromConfigMasterSnapShot();
	},

	//disable save button when no measure/dimension is selected
	enableOrDisableSave : function(){
		var msrDimArr = this._config.items.filter(function(s){return s.SELECTED});
		if(this.dda_config.chartConfig.type.toUpperCase() == "TABLE") this.canSave = true;
		if(this.dda_config.chartConfig.type.toUpperCase() == "CHOROPLETH") this.canSave = true;
		if(msrDimArr.length && this.canSave){
			this.getView().byId("save-btn").setEnabled(true);
		}
		else{
			this.getView().byId("save-btn").setEnabled(false);
		}
	},

	isModelChanged : function(){
		this.currentCopy = this._oModel.getJSON();
		if(this.initCopy.length == this.currentCopy.length){
			if(this.initCopy === this.currentCopy){
				return false;
			}
		}
		return true;
	},

//	viz charts code :

	createVizChart: function(dimensions, measures) {
		var that = this;
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;	
		var mode = this.dda_config.chartConfig.mode ;
		var vizChartContainer = this.getView().byId("vizChartContainer");
		vizChartContainer.removeAllContent();
		
		// if auto semantic color is chosen, but less than 2 measures selected
		if(chartType.toUpperCase() === "BAR" || chartType.toUpperCase() === "COLUMN" || chartType.toUpperCase() === "TABLE") {
			if(this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","semanticColors")).getSelectedKey() === "AUTO_SEMANTIC"){
				if(this.chartMeasures.length < 2){
					sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("AUTO_SEMANTICS_CHART_MIN_MEASURE"),{onClose:function(){
						if(that._config){
							that.restorePrevConfig();
						}
						else{
							that.restoreFromConfigMasterSnapShot();
						}
						//that.onChartTypeChange();
						that.refreshChart();
					}});
					return;
				}
			}
		}
		
		// get table view for the toolbar :
		var vTableFrame = this.getTableForViz(this.tableDimensions, this.tableMeasures);	
		
		if(chartType.toUpperCase() == "TABLE") {
			vizChartContainer.addContent(vTableFrame); 
			setTimeout(function(){
				vizChartContainer.rerender();	
			},0);			
			//return;
		} 
		else {
			var oViz = this.getVizTypeAndIcon();
			
			var vizChartContainerContent = new sap.suite.ui.commons.ChartContainerContent({
				icon: oViz.icon,
			});
			
			var oVizFrame = new sap.viz.ui5.controls.VizFrame({
				vizType : oViz.type,
				uiConfig : {
					applicationSet : 'fiori'
				},	
			});
			oVizFrame.setVizProperties({
				plotArea: {
					dataLabel : {
						visible: true,
						formatString: "dataLabelFormatter",
						hideWhenOverlap: false
					}
				},
				legend: {
			        title: {
			        	visible : false
			        	},
			        isScrollable: true
			    },
				title: {
		              visible: false,
		        },
				valueAxis:{
					label:{
							formatString:"yValueAxisFormatter"
					}
				}
			});		
			
			oVizFrame.addEventDelegate({                    // should be handled by vizframe library.              
				onBeforeRendering : function() {
					var oSplitContainer = that.byId('splitContainer');
					var oHeight = oSplitContainer.$().css("height");
					oVizFrame.setHeight(oHeight);
				}
			});
	
			// check for atleast one dimension & measure :
			if((!(this.chartDimensions.length)) || (!(this.chartMeasures.length))) {
				oVizFrame.setDataset(new sap.viz.ui5.data.FlattenedDataset({}));
				vizChartContainerContent.setContent(oVizFrame);				
				vizChartContainer.addContent(vizChartContainerContent); 
				vizChartContainer.addContent(vTableFrame); 
				return;
			}  
			// if bubble chart chosen , but less than 3 measures selected .
			if((chartType.toUpperCase() === "BUBBLE") && (this.chartMeasures.length < 3)) {
				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("BUBBLE_CHART_MEASURE_COUNT"),{onClose:function(){
					if(that._config && (((that._config.CHART_TYPE).toUpperCase() != "BUBBLE") || (that.getSelectedMeasuresCount(that._config.COLUMNS) >= 3)))
						that.restorePrevConfig();
					else
						that.restoreFromConfigMasterSnapShot();
					that.onChartTypeChange();
					that.refreshChart();
					//that.oVizFrame.setDataset(new sap.viz.ui5.data.FlattenedDataset({}));
				}});
				return;
			}  		
			// if combination chart chosen , but less than 2 measures selected .
			if((chartType.toUpperCase() === "COMBINATION") && (this.chartMeasures.length < 2)) {
				sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("COMBINATION_CHART_MEASURE_COUNT"),{onClose:function(){
					if(that._config && (((that._config.CHART_TYPE).toUpperCase() != "COMBINATION") || (that.getSelectedMeasuresCount(that._config.COLUMNS) >= 2))) {
						that.restorePrevConfig();
					} else {
						that.restoreFromConfigMasterSnapShot();
					}
					that.onChartTypeChange();
					that.refreshChart();
					//that.oVizFrame.setDataset(new sap.viz.ui5.data.FlattenedDataset({}));
				}});
				return;
			}  
			// if dual chart is chosen and there is no measure with axis 1 or 2 :
			if((chartType.toUpperCase() === "BAR" || chartType.toUpperCase() === "COLUMN") && (axisType === "DUAL")) {
				var isOneMsrAxis1 = false, isOneMsrAxis2 = false, i;
				for(i=0;i<this.chartMeasures.length;i++) {
					if(this.chartMeasures[i].axis === 1)
						isOneMsrAxis1 = true;
					else if(this.chartMeasures[i].axis === 2)
						isOneMsrAxis2 = true;
				}

				if(!(isOneMsrAxis1) || !(isOneMsrAxis2)) {
					sap.m.MessageBox.alert(that._oTextsModel.getResourceBundle().getText("STACK_REMOVE_MSG"),{onClose:function(){
						that.restorePrevConfig();
						that._updateMeasureDimensionBindings();
						that.refreshChart();
					}}); 
					return;
				}
			}
			
			this.addFeedsToVizFrame(oVizFrame);		
			
			var vDataset = this.create_vizDataset(dimensions, measures);
			oVizFrame.setDataset(vDataset);
			oVizFrame.setModel(this.oChartDataModel);	
			
			var vizChartPopover = new sap.viz.ui5.controls.Popover().setFormatString("vizPopOver");
			vizChartPopover.connect(oVizFrame.getVizUid());
			
			this.setAllVizFormatters();		
			
			if(axisType === "DUAL" || chartType.toUpperCase() === "BUBBLE") {
				var vProperties = oVizFrame.getVizProperties();
				vProperties.valueAxis2 = {
						label:{
							formatString:"y2ValueAxisFormatter"
						}
				};
				oVizFrame.setVizProperties(vProperties);
				
				if((mode === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && (valueType === "ABSOLUTE") && (chartType === "BAR" || chartType === "COLUMN")) {
					this._handleVizDualAxisWhenPercentScale(oVizFrame, vizChartPopover);
				}
			}
			
			this.applyColorToViz(oVizFrame);
	
			vizChartContainerContent.setContent(oVizFrame);
			
			vizChartContainer.addContent(vizChartContainerContent); 
			vizChartContainer.addContent(vTableFrame); 
			
			// show or hide legend 
			this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);		
			
		}
		this.canSave = true;
		this.copyConfigSnapshot();
	},
	
	addFeedsToVizFrame: function(oVizFrame) {
		var that=this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
		var dimensionToBeStacked = this.getDimensionToBeStacked(this.chartDimensions);
		
		var dimensionLabels=[],measureLabels=[] ;
		for(var i=0;i<that.chartDimNames.length;i++) {
			dimensionLabels.push(that.column_labels_mapping[that.chartDimNames[i]] || that.chartDimNames[i]);
		}
		for(var i=0;i<that.chartMsrNames.length;i++) {
			measureLabels.push(that.column_labels_mapping[that.chartMsrNames[i]] || that.chartMsrNames[i]);
		}

		if(oChartType == "BUBBLE") {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: [measureLabels[0]]
			}), feedSecondaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: [measureLabels[1]]
			}), feedBubbleWidth = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "bubbleWidth",
				type: "Measure",
				values: [measureLabels[2]]
			}), feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "regionColor",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecondaryValues);
			oVizFrame.addFeed(feedBubbleWidth);
			oVizFrame.addFeed(feedRegionColor);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
			for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
				dualMsrAxis1.push(that.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
			}
			for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
				dualMsrAxis2.push(that.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: dualMsrAxis1
			});
			var feedSecValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: dualMsrAxis2
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecValues);
			oVizFrame.addFeed(feedAxisLabels);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (dimensionLabels.length > 1)) {
			var index = dimensionLabels.indexOf(that.column_labels_mapping[(dimensionToBeStacked.name)]);
			if (index > -1) {
			    var oDimStackArray = dimensionLabels.splice(index, 1);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			}), feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			}); 
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
			if(oDimStackArray && oDimStackArray.length) {
				var feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
					uid: "regionColor",
					type: "Dimension",
					values: oDimStackArray
				});			
				oVizFrame.addFeed(feedRegionColor);
			}
		} else {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
		}		
	},

	create_vizDataset: function(dimensions,measures){
		var that = this;
		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);

		var dataset = new sap.viz.ui5.data.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});
		// setting dimensions :
		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			//var oAxis = 1;			
			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				//axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}
		// setting measures :
		if ((chtype == "LINE") || (chtype == "COMBINATION") || (chtype == "BUBBLE") || (chtype == "BAR") || (chtype == "COLUMN")) {   

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		}
		
		return dataset;

	},
	
	applyColorToViz: function(oVizFrame) {
		var that=this;
		var chType = (this.dda_config.chartConfig.type).toUpperCase();
		// implement custom coloring ..............................
		if((chType == "BAR") || (chType == "COLUMN") || (chType == "COMBINATION") || (chType == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: "sapUiChartPaletteSemanticGoodLight1"}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = "sapUiChartPaletteSemanticNeutral";
				this.applyVizCustomColoring(oVizFrame, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.setVizCustomColors(oVizFrame, this.chartMeasures, this.dda_config.chartConfig.colorScheme) ;
			}
		}	
	},
	
	applyVizCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)
		var that = this;
		var oVizProperties = oChart.getVizProperties();
		
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       
			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {                                                                
				that.setVizCustomColors(oChart,arr,colorScheme) ;
				oVizProperties.plotArea.dataPointStyle = {
					    rules:
							  [
								{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											}
										} else
											return false;	
									},
									properties: {
									   color:"sapUiChartPaletteSemanticGoodLight1" 
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("GOOD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											}
										} else
											return false;	
									},
									properties : {
										color : "sapUiChartPaletteSemanticBadLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("BAD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue==null || typeof referenceMeasureValue=='undefined') {
											jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
											return true;
										} 	
									},
									properties : {
										color : "sapUiChartPaletteSemanticNeutralLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("NEUTRAL"))
							}],
						 others : {
						  properties: {
							 color: 'sapUiChartPaletteSemanticNeutral'
						  },
						  displayName: (that._oTextsModel.getResourceBundle().getText("THRESHOLD_REFERENCE"))
						 }
					 }
				oChart.setVizProperties(oVizProperties);
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}
		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			that.setVizCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setVizCustomColors: function(vFrame,msrObj,colorScheme){                           // pass chart reference and msr obj.
		var that = this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
//		var colorMapper = this.getCAtoVizColorMapping();
		
		var dset = vFrame.getDataset() ;
		var msr = dset.getMeasures() ;

		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = "sapUiChartPaletteSemanticNeutral";

		var oVizProperties = vFrame.getVizProperties();
		
		if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			oVizProperties.plotArea.primaryValuesColorPalette = [];
			oVizProperties.plotArea.secondaryValuesColorPalette = [];
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			for(var i=0;i<dualMsr.axis1.objArr.length;i++) {
				(oVizProperties.plotArea.primaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis1.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}
			for(var i=0;i<dualMsr.axis2.objArr.length;i++) {
				(oVizProperties.plotArea.secondaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis2.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+(((i+(dualMsr.axis1.objArr.length)) % 11)+1));
			}
		} else {
			oVizProperties.plotArea.colorPalette = [];
			for(var i=0;i<msr.length;i++)
			{
				(oVizProperties.plotArea.colorPalette)[i] = (that.convertCAtoVizColorCode(msrObj[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}       
		}

		vFrame.setVizProperties(oVizProperties);

	},

	setAllVizFormatters: function() {
		var that = this;
		sap.viz.api.env.Format.useDefaultFormatter(false);
		jQuery.sap.require("sap.ui.core.format.NumberFormat");
		
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;	
		var mode = this.dda_config.chartConfig.mode ;	
		
		if(mode === "RUNTIME") {
			var isPercentScaled = this.getIsPercentScaled(this.chartMsrNames);
			if((this.EVALUATION.getScaling() == -2) && (axisType === "DUAL") && (valueType === "ABSOLUTE") && (chartType === "BAR" || chartType === "COLUMN")) {
				var axisMeasures = this.getMeasuresByAxis(this.chartMeasures);
				var isAxis1Scaled = this.getIsPercentScaled(axisMeasures.axis1.nameArr);
				var isAxis2Scaled = this.getIsPercentScaled(axisMeasures.axis2.nameArr);
			}
		}
		
		var customerFormatter = {
				locale: function(){},
				format: function(value, pattern) {

					if(pattern == "yValueAxisFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
								{style: 'short', 
									minFractionDigits: 1,
									maxFractionDigits: 1,}
						);
						if(valueType === "PERCENTAGE" && (chartType === "BAR" || chartType === "COLUMN")) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance();							
						} else if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled && (axisType === "DUAL") && (chartType === "BAR" || chartType === "COLUMN")) {
							if(isAxis1Scaled) {
								numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
										{style: 'short', 
											minFractionDigits: 1,
											maxFractionDigits: 1,}
								);	
							}
						} else if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
									{style: 'short', 
										minFractionDigits: 1,
										maxFractionDigits: 1,}
							);	
						}	
						return numberFormat.format(Number(value)); 
					} else if(pattern == "y2ValueAxisFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
								{style: 'short', 
									minFractionDigits: 1,
									maxFractionDigits: 1,}
						);
						if(valueType === "PERCENTAGE" && (chartType === "BAR" || chartType === "COLUMN")) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance();							
						} else if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled && (axisType === "DUAL") && (chartType === "BAR" || chartType === "COLUMN")) {
							if(isAxis2Scaled) {
								numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
										{style: 'short', 
											minFractionDigits: 1,
											maxFractionDigits: 1,}
								);	
							}
						} else if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
									{style: 'short', 
										minFractionDigits: 1,
										maxFractionDigits: 1,}
							);	
						}						
						return numberFormat.format(Number(value)); 
					} else if(pattern == "dataLabelFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(that.oFormatOptions_core);
						if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled && !((valueType === "PERCENTAGE" || axisType === "DUAL") && (chartType === "BAR" || chartType === "COLUMN"))) {
							numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(that.oFormatOptions_core);
						}
						return numberFormat.format(Number(value));  
					} else if(pattern == "dataLabelPercentFormatter"){
						var numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(that.oFormatOptions_core);
						return numberFormat.format(Number(value));  
					} else if(pattern == "vizPopOver"){
						if(valueType === "PERCENTAGE" && (chartType === "BAR" || chartType === "COLUMN")) {
							var numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(that.oFormatOptions_core);
							return numberFormat.format(Number(value)); 
						} else if((mode === "RUNTIME") && (that.EVALUATION.getScaling() == -2) && isPercentScaled  && !((valueType === "PERCENTAGE" || axisType === "DUAL") && (chartType === "BAR" || chartType === "COLUMN"))) {
							var numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(that.oFormatOptions_core);
							return numberFormat.format(Number(value));
						} else {
							var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(that.oFormatOptions_core);
							return numberFormat.format(Number(value)); 
						}
					} else if(pattern == "vizPercentPopOver"){
						var numberFormat = sap.ui.core.format.NumberFormat.getPercentInstance(that.oFormatOptions_core);
						return numberFormat.format(Number(value));  
					}
				}
		};
		
		jQuery.sap.require("sap.viz.ui5.api.env.Format");
		sap.viz.ui5.api.env.Format.numericFormatter(customerFormatter);

	},
	
	_handleVizDualAxisWhenPercentScale: function(chart, vizChartPopover) {
		var that = this;
		var vProperties = chart.getVizProperties();
		var formatObj = {};
		var popopFormatter = {};
		var axisMeasures = this.getMeasuresByAxis(this.chartMeasures);
		var isAxis1Scaled = this.getIsPercentScaled(axisMeasures.axis1.nameArr);
		var isAxis2Scaled = this.getIsPercentScaled(axisMeasures.axis2.nameArr);
		if(isAxis1Scaled) {
			for(var i=0;i<axisMeasures.axis1.nameArr.length;i++) {
				formatObj[(that.column_labels_mapping[((axisMeasures.axis1.nameArr)[i])])] = "dataLabelPercentFormatter";
				popopFormatter[(that.column_labels_mapping[((axisMeasures.axis1.nameArr)[i])])] = "vizPercentPopOver";
			}
		} else {
			for(var i=0;i<axisMeasures.axis1.nameArr.length;i++) {
				formatObj[(that.column_labels_mapping[((axisMeasures.axis1.nameArr)[i])])] = "dataLabelFormatter";
				popopFormatter[(that.column_labels_mapping[((axisMeasures.axis1.nameArr)[i])])] = "vizPopOver";
			}
		}
		if(isAxis2Scaled) {
			for(var i=0;i<axisMeasures.axis2.nameArr.length;i++) {
				formatObj[(that.column_labels_mapping[((axisMeasures.axis2.nameArr)[i])])] = "dataLabelPercentFormatter";
				popopFormatter[(that.column_labels_mapping[((axisMeasures.axis2.nameArr)[i])])] = "vizPercentPopOver";
			}
		} else {
			for(var i=0;i<axisMeasures.axis2.nameArr.length;i++) {
				formatObj[(that.column_labels_mapping[((axisMeasures.axis2.nameArr)[i])])] = "dataLabelFormatter";
				popopFormatter[(that.column_labels_mapping[((axisMeasures.axis2.nameArr)[i])])] = "vizPopOver";
			}
		}
		vProperties.plotArea.dataLabel = {
				visible: true,
				formatString: formatObj
		};
		chart.setVizProperties(vProperties);
		//popover
		vizChartPopover.setFormatString(popopFormatter);
	},
	
	getVizTypeAndIcon: function() {
		var vType = "bar";
		var vIcon = "sap-icon://bar-chart";
		var oType = this.dda_config.chartConfig.type || "BAR";	
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;
		if(oType.toUpperCase() == "BAR") {
			vType = "bar";
			vIcon = "sap-icon://horizontal-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_bar";
						vIcon = "sap-icon://horizontal-stacked-chart";
					} else {
						vType = "bar";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_bar";
					vIcon = "sap-icon://horizontal-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} 
		} else if(oType.toUpperCase() == "COLUMN") {
			vType = "column";
			vIcon = "sap-icon://vertical-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_column";
						vIcon = "sap-icon://vertical-stacked-chart";
					} else {
						vType = "column";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_column";
					vIcon = "sap-icon://vertical-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} 
		} else if(oType.toUpperCase() == "LINE") {
			vType = "line";
			vIcon = "sap-icon://line-chart";
		} else if(oType.toUpperCase() == "COMBINATION") {
			vType = "combination";
			vIcon = "sap-icon://business-objects-experience";
		} else if(oType.toUpperCase() == "BUBBLE") {
			vType = "bubble";
			vIcon = "sap-icon://bubble-chart";
		}

		return {type:vType,icon:vIcon};
	},

	getTableForViz: function(dimensions,measures) {

		var vizChartContainerTable = new sap.suite.ui.commons.ChartContainerContent({
			icon: 'sap-icon://table-chart',
		});

		var vTable = new sap.m.Table({
			showUnread: true,
		});

		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Begin",                                      
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "End",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,              
		});

		for(var i=0;i<dimensions.length;i++){
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
			template.addCell(ocell);

		}
		var thresholdmsr = this._oModel.getData()["THRESHOLD_MEASURE"];

		var is_percent_scale = false;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if(chartType.toUpperCase() === "TABLE")
			var oMsrs = this.tableMsrNames ;
		else
			var oMsrs = this.chartMsrNames ;
		if(((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && this.getIsPercentScaled(oMsrs) && !(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE'))) {
			is_percent_scale = true;
		}
		var axisScale = [] ;
		if(is_percent_scale) {
			if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				var msrsObj = this.getMeasuresByAxis(this.chartMeasures);	        	
				axisScale.push(this.getIsPercentScaled(msrsObj.axis1.nameArr));
				axisScale.push(this.getIsPercentScaled(msrsObj.axis2.nameArr));
			}
		}

		for(var i=0;i<measures.length;i++){
			var val = measures[i].name;
			if(this._oModel.getData()["COLOR_SCHEME"] == "AUTO_SEMANTIC")
				var ocell = this._getTableCell(val, thresholdmsr, is_percent_scale, axisScale);
			else
				var ocell = this._getTableCell(val, val, is_percent_scale, axisScale);
			template.addCell(ocell);
		}

		vTable.setModel(this.oChartDataModel);
		vTable.bindAggregation("items", "/businessData", template);

		vizChartContainerTable.setContent(vTable);
		return vizChartContainerTable;
	},   

/*	getCAtoVizColorMapping: function() {
		var colorMapper = {
				"sapUiChart1" : "sapUiChartPaletteQualitativeHue1",
				"sapUiChart2" : "sapUiChartPaletteQualitativeHue2",
				"sapUiChart3" : "sapUiChartPaletteQualitativeHue3",
				"sapUiChart4" : "sapUiChartPaletteQualitativeHue4",
				"sapUiChart5" : "sapUiChartPaletteQualitativeHue5",
				"sapUiChart6" : "sapUiChartPaletteQualitativeHue6",
				"sapUiChart7" : "sapUiChartPaletteQualitativeHue7",
				"sapUiChart8" : "sapUiChartPaletteQualitativeHue8",
				"sapUiChart9" : "sapUiChartPaletteQualitativeHue9",
				"sapUiChart10" : "sapUiChartPaletteQualitativeHue10",
				"sapUiChart11" : "sapUiChartPaletteQualitativeHue11",
				"sapCaUiChartSemanticColor-Bad" : "sapUiChartPaletteSemanticBad",
				"sapCaUiChartSemanticColor-Bad-Dark" : "sapUiChartPaletteSemanticBadDark1",
				"sapCaUiChartSemanticColor-Bad-Light" : "sapUiChartPaletteSemanticBadLight1",
				"sapCaUiChartSemanticColor-Critical" : "sapUiChartPaletteSemanticCritical",
				"sapCaUiChartSemanticColor-Critical-Dark" : "sapUiChartPaletteSemanticCriticalDark1",
				"sapCaUiChartSemanticColor-Critical-Light" : "sapUiChartPaletteSemanticCriticalLight1",
				"sapCaUiChartSemanticColor-Good" : "sapUiChartPaletteSemanticGood",
				"sapCaUiChartSemanticColor-Good-Dark" : "sapUiChartPaletteSemanticGoodDark1",
				"sapCaUiChartSemanticColor-Good-Light" : "sapUiChartPaletteSemanticGoodLight1",
				"sapCaUiChartSemanticColor-Neutral" : "sapUiChartPaletteSemanticNeutral",
				"sapCaUiChartSemanticColor-Neutral-Dark" : "sapUiChartPaletteSemanticNeutralDark1",
				"sapCaUiChartSemanticColor-Neutral-Light" : "sapUiChartPaletteSemanticNeutralLight1",
		};
		
		return colorMapper;
	},
*/	
	convertCAtoVizColorCode: function(oColor) {
		var vColor = oColor;
		if(oColor) {
			var splitColorArray = oColor.match(/[a-zA-Z]+|[0-9]+/g);
			if(splitColorArray[0] === "sapUiChart") {
				vColor = "sapUiChartPaletteQualitativeHue"+splitColorArray[1];
			} else if(splitColorArray[0] === "sapCaUiChartSemanticColor") {
				if(splitColorArray.length === 2) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1];
				} else if(splitColorArray.length === 3) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1]+splitColorArray[2]+"1";
				}
			}
		}
		return vColor;
	},
	
	generateViewId : function(oController){       
		var x = {};
		x.title = "";		
		var promiseObj = sap.suite.ui.smartbusiness.lib.IDGenerator.generateViewId(x);		
		var id;		
		promiseObj.done(function(vId){		
			id = vId;
			oController.getView().getModel("SB_DDACONFIG").setProperty("/SELECTED_VIEW",id);		
			oController.bindUiToModel();		
			oController.copyConfigSnapshot();		
		});		
	},

	openChoroplethSettingsDialog: function(){
		this.choroplethSettingsDialog.open();
	}, 
	onChoroplethSettingsOk: function(){
		if (! this.choroplethSettingsDialog) {
			this._choroplethSettingsDialog = sap.ui.xmlfragment("choroplethSettingsDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.choroplethSettingsDialog", this);
		}

		var choroplethKpiMeasureSelected = sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethKpiMeasure").getSelectedKey();
		var choroplethThresholdMeasureSelected = sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethThresholdMeasure").getSelectedKey();

		this.updateMeasuresAndDimensionsInmodel(choroplethKpiMeasureSelected, choroplethThresholdMeasureSelected);		
		this.copyConfigSnapshot();
		this.refreshChart();
		this.enableOrDisableSave();
		this.choroplethSettingsDialog.close();
	},
	onChoroplethSettingsCancel:function(){
		this.restorePrevConfig();
		this.getView().byId(sap.ui.core.Fragment.createId("chartTypeConfig","chartType")).fireChange();
		this.choroplethSettingsDialog.close();
	},      
                       
	chooseMeasureForThreshold : function(){
		var that=this;
		sap.ui.core.Fragment.byId("choroplethSettingsDialog","displaySelectedParametersGrid").setVisible(false);
		var thresholdList = sap.ui.core.Fragment.byId("choroplethSettingsDialog","thresholdMeasureList");
		
		this.choroplethSettingsDialog.setTitle(this.oApplicationFacade.getResourceBundle().getText("SELECT_THRESHOLD_MEASURE"));
		this.choroplethSettingsDialog.destroyBeginButton();
		
		thresholdList.bindItems({
			path : "SB_DDACONFIG>/items",
			template : new sap.m.StandardListItem({
				title: "{SB_DDACONFIG>NAME}",
				type:"Active",
				press : jQuery.proxy(that.selectedThresholdMeasure,that)
			})
		});
		
		var choroplethKpiMeasureSelected = sap.ui.core.Fragment.byId("choroplethSettingsDialog","choroplethKpiMeasure").getSelectedKey();

		var aFilterMeasure = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true),new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,choroplethKpiMeasureSelected)];
		var aFilterDimension = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"DIMENSION"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true)];
		
		sap.ui.getCore().byId("choroplethSettingsDialog--thresholdMeasureList").getBinding("items").filter(new sap.ui.model.Filter(aFilterMeasure,true));
		sap.ui.core.Fragment.byId("choroplethSettingsDialog","thresholdMeasureList").setVisible(true);
	},
	
	selectedThresholdMeasure : function(oEvent){
		var that=this;
		sap.ui.core.Fragment.byId("choroplethSettingsDialog","thresholdMeasureList").setVisible(false);
		sap.ui.core.Fragment.byId("choroplethSettingsDialog","displaySelectedParametersGrid").setVisible(true);
		this.choroplethSettingsDialog.setTitle(this.oApplicationFacade.getResourceBundle().getText("CHOROPLETH_MAP_SETTING"));
		if(!(this.choroplethSettingsDialog.getBeginButton())){
			this.choroplethSettingsDialog.setBeginButton(new sap.m.Button({
				text : "{i18n>OK}",
				press : jQuery.proxy(that.onChoroplethSettingsOk,that)
			}));
		}
		
		this.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE = oEvent.getSource().getTitle();
		this.getView().getModel('SB_DDACONFIG').updateBindings();
		
	},
	
	handleMainMeasureChange : function(){
		//sap.ui.getCore().byId("choroplethSettingsDialog--choroplethKpiMeasure").rerender();
		var aFilterThresholdMeasure = [new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE"),new sap.ui.model.Filter("SELECTED",sap.ui.model.FilterOperator.EQ,true),new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,sap.ui.getCore().byId("choroplethSettingsDialog--choroplethKpiMeasure").getSelectedKey())];
		sap.ui.getCore().byId("choroplethSettingsDialog--choroplethThresholdMeasure").getBinding("items").filter(new sap.ui.model.Filter(aFilterThresholdMeasure,true));
	},
	handleMainMeasureChangechartsettings : function(){
		var filters = [];
		sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editChartDialog","choroplethKpiMeasurechartsetting")).rerender();
		var selectionBox=sap.ui.getCore().byId(sap.ui.core.Fragment.createId("editChartDialog","thresholdMeasureChart"));
		var filterObject = {
				"type": (new sap.ui.model.Filter("TYPE",sap.ui.model.FilterOperator.EQ,"MEASURE")),
				"name": (new sap.ui.model.Filter("NAME",sap.ui.model.FilterOperator.NE,sap.ui.core.Fragment.byId("editChartDialog","choroplethKpiMeasurechartsetting").getSelectedKey())),
				"selected": (new sap.ui.model.Filter("SELECTED", sap.ui.model.FilterOperator.EQ,true)),
		};
		for(var item in filterObject) {
			filters.push(filterObject[item]);
		}
		var selectionItems= selectionBox.getItems()?selectionBox.getItems():[];
		if(selectionItems.length && selectionBox.getBinding('items')) {
			selectionBox.getBinding('items').filter(filters);
		}
	},
	
	helpPopOver : function(oEvent){
		var that=this;
		var title = null;
		var content = null;
		if(oEvent.getSource().getId() == "choroplethSettingsDialog--kpiMeasureHelp"){
			title = that.oApplicationFacade.getResourceBundle().getText("MAIN_MEASURE");
			content = that.oApplicationFacade.getResourceBundle().getText("MAIN_MEASURE_HELP_CONTENT");
		}
		/*else if(oEvent.getSource().getId() == "choroplethSettingsDialog--geoDimensionHelp"){
			title = that.oApplicationFacade.getResourceBundle().getText("GEO_DIMENSION");
			content = that.oApplicationFacade.getResourceBundle().getText("GEO_DIMENSION_HELP_CONTENT");
		}*/
		else if(oEvent.getSource().getId() == "choroplethSettingsDialog--thresholdMeasureHelp"){
			title = that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_MEASURE");
			content = that.oApplicationFacade.getResourceBundle().getText("THRESHOLD_MEASURE_HELP_CONTENT");
		}
		this.helpPopOver = new sap.m.ResponsivePopover({
			contentWidth : '15%',
			contentHeight : '10%',
			placement : sap.m.PlacementType.Right,
			content : new sap.m.Text({
				text : content,
				width : "100%"
			}),
			title : title,
			verticalScrolling : true,
			horizontalScrolling : false
		});
		this.helpPopOver.openBy(oEvent.getSource());
	},
	updateMeasuresAndDimensionsInmodel : function(mainMeasure,thresholdMeasure){
		var items=this.choroplethSettingsDialog.getModel("SB_DDACONFIG").getData().items;
		var itemsLength = items.length;

		for(var i=0;i<itemsLength;i++){
			if(items[i].NAME==mainMeasure){
				items[i].MAIN_MEASURE = true;
				items[i].SELECTED=true;
				delete items[i].THRESHOLD_MEASURE;
				this.choroplethSettingsDialog.getModel("SB_DDACONFIG").getData().MAIN_MEASURE = mainMeasure;
			}
			else if(items[i].NAME==thresholdMeasure ){
				items[i].THRESHOLD_MEASURE = true;
				items[i].SELECTED=true;
				delete items[i].MAIN_MEASURE;
				this.choroplethSettingsDialog.getModel("SB_DDACONFIG").getData().THRESHOLD_MEASURE = thresholdMeasure;
			}
			else{
				delete items[i].MAIN_MEASURE;
				delete items[i].THRESHOLD_MEASURE;
			}
		}
		for(var i=0;i<itemsLength;i++){
			if(items[i].TYPE=='DIMENSION' && items[i].SELECTED){
				items[i].COLUMNS_ORDER = 4
				items[i].GEO_DIMENSION = true;
			}
			else if(items[i].TYPE=='MEASURE'){
				if(items[i].NAME==this.getView().getModel("SB_DDACONFIG").getData().MAIN_MEASURE){
					items[i].COLUMNS_ORDER = 1
				}
				else if(items[i].NAME==this.getView().getModel("SB_DDACONFIG").getData().THRESHOLD_MEASURE){
					items[i].COLUMNS_ORDER = 2
				}
				else{
					items[i].COLUMNS_ORDER = 3
				}
			}
		}
		this._updateMeasureDimensionBindings();

	},
	onThresholdMeasureChange: function(evt) {
		evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
	},
	
	genericSelectTooltipChange: function(evt) {
		evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
	}

});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/configureNewView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.evaluation.view.S1.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained



jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/evaluation/view/evaluationParameters.css");

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.evaluation.view.S1",{	
    onAfterRendering : function(){
        var that = this;
        that.initialModel = that._cloneObj(that.getView().getModel().getData());
        if(that.showDataSourceError) {
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
            that.errorMessages.push({
                "type" : "Error",
                "title" : that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
                "description" : that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS")
            });
            that.errorState = true;
        }
        if(that.inputParameterSapClientCheckBox){
            that.inputParameterSapClientCheckBox.fireSelect();
        }
        if(that.mandatoryFilterSapClientCheckBox){
            that.mandatoryFilterSapClientCheckBox.fireSelect();
        }
        that.byId("scaleFactorSelect").setTooltip(that.byId("scaleFactorSelect").getSelectedItem().getText());
        that.byId("decimalPrecisionSelect").setTooltip(that.byId("decimalPrecisionSelect").getSelectedItem().getText());
    },
    navigateBack : function(){
        var that = this;
        var isActive;
        var backDialog = new sap.m.Dialog({
            icon:"sap-icon://warning2",
            title:that.oResourceBundle.getText("WARNING"),
            state:"Warning",
            type:"Message",
            content:[new sap.m.Text({text:that.oResourceBundle.getText("NAVIGATION_DATA_LOSS")})],
            beginButton: new sap.m.Button({
                text:that.oResourceBundle.getText("CONTINUE"),
                press: function(){
                    backDialog.close();
                    window.history.back();
                }
            }),
            endButton: new sap.m.Button({
                text:that.oResourceBundle.getText("CANCEL"),
                press:function(){
                    backDialog.close();
                }
            })                                                
        });
        var updateRequired = false;
        if(that.getView().getModel().getData().mode === "create"){
            var batch = {};
            batch.oldPayload = that.getEvalParamPayload(that.initialModel);
            batch.newPayload = that.getEvalParamPayload(that.getView().getModel().getData());
            batch.objectType = "Evaluations";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.updates.length > 0){
                updateRequired = true;
            }
        }
        else{
            var that = this,i = 0;

            var batch = {};
            that.saveFilters(that.getView());
            that.saveValues(that.getView());
            that.saveTags(that.getView());
            that.saveProperties(that.getView());
            that.saveAdditionalLanguages(that.getView());

            //checking for changes in evaluation parameters
            batch.oldPayload = that.getEvalParamPayload(that.evalDetails);
            batch.oldPayload.DATA_SPECIFICATION = "";
            isActive = batch.oldPayload.IS_ACTIVE;
            batch.oldPayload.IS_ACTIVE = 0;
            batch.newPayload = that.getEvalParamPayload(that.getView().getModel().getData());
            batch.newPayload.DATA_SPECIFICATION = "";
            batch.objectType = "Evaluations";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.updates.length > 0){
                updateRequired = true;
            }

            //for changes in evaluation filters
            batch.oldPayload = that.evalDetails.FILTERS;
            for(var key in batch.oldPayload){
                batch.oldPayload[key].IS_ACTIVE = 0;
            }
            batch.newPayload = that.evalFiltersPayload;
            batch.objectType = "EVALUATION_FILTERS";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.deletes.length > 0){
                updateRequired = true;
            }
            if(batch.updates.length > 0){
                updateRequired = true;
            }

            //for changes in evaluation values
            for(i=0;i<that.evalDetails.VALUES.length;i++){
                if(that.evalDetails.VALUES[i].COLUMN_NAME){
                    delete that.evalDetails.VALUES[i].FIXED;
                }
                else{
                    delete that.evalDetails.VALUES[i].COLUMN_NAME;
                }
            }
            batch.oldPayload = that.evalDetails.VALUES;
            for(var key in batch.oldPayload){
                batch.oldPayload[key].IS_ACTIVE = 0;
            }
            batch.newPayload = that.valuesPayload;
            batch.objectType = "EVALUATION_VALUES";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.deletes.length > 0){
                updateRequired = true;
            }
            if(batch.updates.length > 0){
                updateRequired = true;
            }

            //for changes in evaluation tags
            batch.oldPayload = that.evalDetails.TAGS;
            for(var key in batch.oldPayload){
                batch.oldPayload[key].IS_ACTIVE = 0;
            }
            batch.newPayload = that.tagsPayload;
            batch.objectType = "TAGS";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.deletes.length > 0){
                updateRequired = true;
            }
            if(batch.updates.length > 0){
                updateRequired = true;
            }

            //for changes in evaluation properties
            batch.oldPayload = that.evalDetails.PROPERTIES;
            for(var key in batch.oldPayload){
                batch.oldPayload[key].IS_ACTIVE = 0;
            }
            batch.newPayload = that.propPayload
            batch.objectType = "PROPERTIES";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.deletes.length > 0){
                updateRequired = true;
            }
            if(batch.updates.length > 0){
                updateRequired = true;
            }

            //for changes in additional languages
            batch.oldPayload = that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY;
            for(var key in batch.oldPayload){
                batch.oldPayload[key].IS_ACTIVE = 0;
            }
            batch.newPayload = that.languagesPayload
            batch.objectType = "EVALUATION_TEXTS";
            batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
            if(batch.deletes.length > 0){
                updateRequired = true;
            }
            if(batch.updates.length > 0){
                updateRequired = true;
            }

        }
        if(updateRequired){
            backDialog.open();
        }
        else{
            window.history.back();
        }
    },
    onInit : function() {
        var that = this;
        that.hasSapClient = false;
        that.userSessionClient="";
        this.showDataSourceError = false;
        this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
        sap.suite.ui.smartbusiness.sb_createevaluation = this;
        this.RESERVED_EVAL_ID_NAMESPACE = ".sap.sample";

        this.errorMessages = [];
        this.errorState = false;

        this.CDS = "cds";
        this.HANA = "hana";
        this.VIEW_MODE = this.HANA;
        var urlParam;
        var sessionClientUrl = "/sap/hba/r/sb/core/logic/GetSessionClient.xsjs";
        jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
        sap.suite.ui.smartbusiness.lib.AppSetting.init({
            oControl : this.byId("evalId"),
            controllerReference : this,
            hideElement  : "input",
            i18n: {
                checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
                saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
                cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
                settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
                settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
                settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
            },
            title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
            action: that.generateEvalId
        });
        this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
        sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
        this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");

        /* use url parameter `?viewmode=cds` to launch app based on an CDS view */
        if(urlParam = jQuery.sap.getUriParameters().get("viewmode")) {
            if(urlParam.toLowerCase && urlParam.toLowerCase() == this.CDS)
                this.VIEW_MODE = this.CDS;
        }

        that.fromHome = false;
        this.oOptionsForCreate = {
                onBack : function(){
                    that.navigateBack();
                },

                bSuppressBookmarkButton : {},
                oEditBtn : {
                    sI18nBtnTxt : "SAVE",
                    onBtnPressed : function(evt) {
                        that.saveAndExit();
                    }
                },
                buttonList : [{
                    sI18nBtnTxt : "SAVE_CREATE_NEW",
                    onBtnPressed : function(evt) {
                        that.saveAndCreateNew();
                    }
                }, 
                {
                    sI18nBtnTxt : "SAVE_AND_ACTIVATE",
                    onBtnPressed : function(evt) {
                        that.saveAndActivate();
                    }
                },{
                    sI18nBtnTxt : "ACTIVATE_CREATE_NEW",
                    onBtnPressed : function(evt) {
                        that.activateAndCreateNew();
                    }
                },{
                    sI18nBtnTxt : "ACTIVATE_CONFIGURE",
                    onBtnPressed : function(evt) {
                        that.activateAndAddTiles();
                    }
                },{
                    sI18nBtnTxt : "CANCEL",
                    onBtnPressed : function(evt) {
                        that.navigateBack();
                    }
                }]
        };

        this.oOptionsForEdit = {
                bSuppressBookmarkButton : {},
                onBack : function(){
                    that.navigateBack();
                },
                oEditBtn : {
                    sI18nBtnTxt : "SAVE",
                    onBtnPressed : function(evt) {
                        that.saveAndExit();
                    }
                },
                buttonList : [{
                    sI18nBtnTxt : "SAVE_AND_ACTIVATE",
                    onBtnPressed : function(evt) {
                        that.saveAndActivate();
                    }
                }, {
                    sI18nBtnTxt : "DELETE",
                    onBtnPressed : function(evt) {
                        that.deleteDraft();
                    }
                }, {
                    sI18nBtnTxt : "CANCEL",
                    onBtnPressed : function(evt) {
                        that.navigateBack();
                    }
                }]
        };

        this.oOptionsOnErrorForCreate = {
                onBack : function(){
                    that.navigateBack();
                },
                bSuppressBookmarkButton : {},
                oNegativeAction : {
                    sIcon : "sap-icon://alert",
                    sId : "errorBtn",
                    sControlId : "errorBtn",
                    onBtnPressed : function(event) {
                        sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
                    }
                },
                buttonList : [{
                    sI18nBtnTxt : "SAVE",
                    onBtnPressed : function(evt) {
                        that.saveAndExit();
                    }
                }, {
                    sI18nBtnTxt : "SAVE_CREATE_NEW",
                    onBtnPressed : function(evt) {
                        that.saveAndCreateNew();
                    }
                }, 
                {
                    sI18nBtnTxt : "SAVE_AND_ACTIVATE",
                    onBtnPressed : function(evt) {
                        that.saveAndActivate();
                    }
                },{
                    sI18nBtnTxt : "ACTIVATE_CREATE_NEW",
                    onBtnPressed : function(evt) {
                        that.activateAndCreateNew();
                    }
                },{
                    sI18nBtnTxt : "ACTIVATE_CONFIGURE",
                    onBtnPressed : function(evt) {
                        that.activateAndAddTiles();
                    }
                },{
                    sI18nBtnTxt : "CANCEL",
                    onBtnPressed : function(evt) {
                        that.navigateBack();
                    }
                }]
        };

        this.oOptionsOnErrorForEdit = {
                bSuppressBookmarkButton : {},
                onBack : function(){
                    that.navigateBack();
                },
                oNegativeAction : {
                    sIcon : "sap-icon://alert",
                    sId : "errorBtn",
                    sControlId : "errorBtn",
                    onBtnPressed : function(event) {
                        sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
                    }
                },
                buttonList : [{
                    sI18nBtnTxt : "SAVE",
                    onBtnPressed : function(evt) {
                        that.saveAndExit();
                    }
                }, {
                    sI18nBtnTxt : "SAVE_AND_ACTIVATE",
                    onBtnPressed : function(evt) {
                        that.saveAndActivate();
                    }
                }, {
                    sI18nBtnTxt : "DELETE",
                    onBtnPressed : function(evt) {
                        that.deleteDraft();
                    }
                }, {
                    sI18nBtnTxt : "CANCEL",
                    onBtnPressed : function(evt) {
                        that.navigateBack();
                    }
                }]
        };
        this.setHeaderFooterOptions(that.oOptionsForCreate);
        this.busyDialog = new sap.m.BusyDialog();
        this.oResourceBundle = this.oApplicationFacade.getResourceBundle();
        var oModel = new sap.ui.model.json.JSONModel({NO_OF_ADDITIONAL_LANGUAGES:0, VIEW_MODE:this.VIEW_MODE});
        this.getView().setModel(oModel); 
        this.oDataModel = this.oApplicationFacade.getODataModel();

        //Fetching Session Client
        if(that.VIEW_MODE != "cds"){
            $.ajax({
                url:sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters(sessionClientUrl),
                async : false,
                success:function(data){
                    that.userSessionClient = data.sessionClient;
                },
                error:function(jqXHR, textStatus, errorThrown){
                    if(jqXHR.status == 404){
                        that.sessionClientXsjsMissing = true;
                    }	
                    else{
                        that.sessionClientFetchError = true;
                        that.errorMessages.push({
                            "type" : "Error",
                            "title" : that.oResourceBundle.getText("SESSION_CLIENT_FETCH_FAILED")
                        });
                        sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
                    }
                }});
        }

        /**********************************************CDS based OData services****************************************************
         * >get all CDS views
         * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/CDSViewSet
         * >get all OData urls
         * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/PackOdataSet
         * >get OData urls from selected CDS view (example)
         * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/CDSViewSet(CdsName='%2FSSB%2FEVAL_FILTRS')/?$expand=ODATAnameSet
         * >get relevant EntitySets from selected CDS view and selected odata (example)
         * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/ODATAnameSet(CdsName='%2FSSB%2FC_EVALUATIONFILTERS',OdataName='',OdataURL='%2Fsap%2Fopu%2Fodata%2FSSB%2FSMART_BUSINESS_SRV',SrvName='',SrvVersion='',SrvNamespace='')/?$expand=EntityTypeSet
         ****************************************************************************************************************************/
        if(this.VIEW_MODE == this.CDS) {
            this.oDataModelCDS = new sap.ui.model.odata.ODataModel("/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01");
            this.oDataModelCDS.attachMetadataFailed(function(s){
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_CDS_MODE"));
                that.errorMessages.push({
                    "type" : "Error",
                    "title" : that.oResourceBundle.getText("ERROR_CDS_MODE")
                });
                that.errorState = true;
            });
            this.byId("evalId").setMaxLength(40);
        }
        else if(this.VIEW_MODE == this.HANA){
            this.byId("evalId").setMaxLength(512);
        }

        this.editDraft = false;
        //this.oDataModel.attachRequestCompleted(that.onODataServiceLoad, that); // this is to ensure that we fire
        // select event on the odata
        // service field only after we
        // receive the data
        this.oModelForInputParameters = new sap.ui.model.json.JSONModel();
        this.oModelForDimensions = new sap.ui.model.json.JSONModel();

        var evalContext = this.evalContext || "";
        that.getView().byId("propertyNameValueBox").bindAggregation("items", "/PROPERTIES", function(a, b) {
            return new sap.ui.layout.Grid({
                content : [new sap.m.Input({
                    value : "{NAME}",
                    layoutData : new sap.ui.layout.GridData({
                        span : "L4 M4 S4"
                    })
                }), new sap.m.Input({
                    value : "{VALUE}",
                    layoutData : new sap.ui.layout.GridData({
                        span : "L4 M4 S4"
                    })
                }), new sap.m.Button({
                    icon : "sap-icon://sys-cancel",
                    type : "Transparent",
                    layoutData : new sap.ui.layout.GridData({
                        span : "L2 M2 S2"
                    }),
                    press : function(evt) {
                        that.removeProperty(evt);
                    }
                })],
                defaultSpan : "L12 M12 S12"
            }).addStyleClass("propertyEntryGrid");;
        });

        //Adapter Implementation ---

        // Fetch All Sap Languages - Adapter Implementation
        var langSuccessHandler = function(obj, arr, localeLanguage) {
            that.SAP_LANGUAGES = obj;
            that.SAP_LANGUAGE_ARRAY = arr;
            that.localLanguage = localeLanguage;
        };
        this.metadataRef.getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});
        this.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
        this.setInputParameterAndFilterLayout();
        this.decideMode();

        this.valid_maxlength = {};
        this.valid_maxlength.hana = {
                id: 512,
                title: 128,
        };
        this.valid_maxlength.cds = {
                id: 40,
                title: 40,
        };

    },
    decideMode : function(){
        var that = this;
        this.oRouter.attachRouteMatched(function(evt) {
            this.showDataSourceError = false;
            this.getView().getModel().setProperty("/SCALING","0")
            if(evt.getParameter("name") === "duplicateEvaluation"){
                try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                        sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_DUPLICATE"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_DUPLICATE"))
                }
                this.evalContext = evt.getParameter("arguments").evaluationContext;
                this.indicatorContext = evt.getParameter("arguments").indicatorContext;
                that.getView().getModel().setProperty("/mode","create");
                that.generateEvalId(that);
                that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE_DUPLICATE"));
                that.byId("evalId").setEditable(true);
                that.populateEvalDetails();
                that.duplicateEval = true;
                that.fromHome = false;
            }
            else if(evt.getParameter("name") === "editEvaluationDraft"){
                that.setHeaderFooterOptions(that.oOptionsForEdit);
                try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                        sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"))
                }
                this.evalContext = evt.getParameter("arguments").evaluationContext;
                this.indicatorContext = evt.getParameter("arguments").indicatorContext;
                that.getView().getModel().setProperty("/mode","edit");
                this.editDraft = true;
                that.populateEvalDetails();
                that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                that.byId("evalId").setEditable(false);
                that.fromHome = false;
            }
            else if(evt.getParameter("arguments").indicatorContext && evt.getParameter("arguments").evaluationContext){
                try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                        sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                    }
                } catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"))
                }
                this.evalContext = evt.getParameter("arguments").evaluationContext;
                this.indicatorContext = evt.getParameter("arguments").indicatorContext;
                that.getView().getModel().setProperty("/mode","edit");
                that.populateEvalDetails();
                that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE_EDIT"));
                that.byId("evalId").setEditable(false);
                that.fromHome = false;
            }
            else if(evt.getParameter("arguments").indicatorContext){
                that.getView().getModel().setProperty("/mode","create");
                that.generateEvalId(that);
                that.busyDialog.open();
                this.indicatorContext = evt.getParameter("arguments").indicatorContext;
                that.getView().getModel().setProperty("/IS_ACTIVE",0);
                that.getView().getModel().setProperty("/DECIMAL_PRECISION",-1);
                that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
                that.getKpiDetails();
                that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE"));
                that.byId("indicatorId").setEditable(false);
                that.fromHome = false;
            }
            else{
                that.byId("selectKpi").setText(that.oResourceBundle.getText("SELECT_KPI_OPI"));
                that.generateEvalId(that);
                that.getView().getModel().setProperty("/mode","create");
                that.getView().getModel().setProperty("/IS_ACTIVE",0);
                that.getView().getModel().setProperty("/DECIMAL_PRECISION",-1);
                that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES", 0);
                that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE"));
                that.fromHome = true;
            }

        }, this);
    },
    populateEvalDetails : function(){
        var that = this;
        that.busyDialog.open();

        var indicatorFetchCallBack = function(kpiData) {
            kpiData = kpiData.INDICATOR;
            that.getView().getModel().setProperty("/INDICATOR",kpiData.ID);
            that.byId("indicatorId").setEditable(false);
            that.getView().getModel().setProperty("/INDICATORTITLE",kpiData.TITLE);
            that.getView().getModel().setProperty("/GOAL_TYPE",kpiData.GOAL_TYPE);
            if(kpiData.DATA_SPECIFICATION){
                that.getView().getModel().setProperty("/DATA_SPECIFICATION",kpiData.DATA_SPECIFICATION);
                that.byId("additionalInfo").setVisible(true);
            }
            else{
                that.byId("additionalInfo").setVisible(false);
            }
            that.getView().getModel().setProperty("/INDICATOR_TYPE",kpiData.TYPE);
        };
        var indicatorFetchErrCallBack = function(d,s,x) {
            that.busyDialog.close();
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"));
            that.errorMessages.push({
                "type" : "Error",
                "title" : that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST")
            });
            that.errorState = true;
        };
        var indicatorContext = new sap.ui.model.Context(that.getView().getModel(), '/' + that.indicatorContext);
        that.metadataRef.getKPIById({context:indicatorContext, success:indicatorFetchCallBack, error:indicatorFetchErrCallBack, async:false, model:that.oDataModel});



        var evaluationFetchErrCallBack = function(d,s,x) {
            that.busyDialog.close();
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVALUATION_DOES_NOT_EXIST"));
            that.errorMessages.push({
                "type" : "Error",
                "title" : that.oResourceBundle.getText("ERROR_EVALUATION_DOES_NOT_EXIST")
            });
            that.errorState = true;
        };
        var evaluationFetchCallBack = function(data) {
            var evaluation = data.EVALUATION;
            that.evalDetails = {};
            that.evalDetails = jQuery.extend(true,evaluation,data);
            delete that.evalDetails.EVALUATION;
            that.getView().getModel().setProperty("/ID",evaluation.ID);
            that.getView().getModel().setProperty("/TITLE",evaluation.TITLE);
            that.getView().getModel().setProperty("/DESCRIPTION",evaluation.DESCRIPTION);
            that.getView().getModel().setProperty("/IS_ACTIVE",0);
            that.getView().getModel().setProperty("/SEMANTIC_OBJECT",evaluation.SEMANTIC_OBJECT);
            that.getView().getModel().setProperty("/ACTION",evaluation.ACTION);
            if(evaluation.GOAL_TYPE){
                that.getView().getModel().setProperty("/GOAL_TYPE",evaluation.GOAL_TYPE);
            }
            that.getView().getModel().setProperty("/INDICATOR_TYPE",evaluation.INDICATOR_TYPE);
            that.getView().getModel().setProperty("/OWNER_NAME",evaluation.OWNER_NAME);
            that.getView().getModel().setProperty("/OWNER_ID",evaluation.OWNER_ID);
            that.getView().getModel().setProperty("/OWNER_E_MAIL",evaluation.OWNER_E_MAIL);
            that.getView().getModel().setProperty("/VIEW_NAME",evaluation.VIEW_NAME);
            that.getView().getModel().setProperty("/ODATA_URL",evaluation.ODATA_URL);
            that.getView().getModel().setProperty("/COLUMN_NAME",evaluation.COLUMN_NAME);  
            that.getView().getModel().setProperty("/SCALING",evaluation.SCALING);
            that.getView().getModel().setProperty("/DECIMAL_PRECISION",evaluation.DECIMAL_PRECISION);
            that.getView().getModel().setProperty("/VALUES_SOURCE",evaluation.VALUES_SOURCE);
            that.createTargetThresholdLayout();
            if(evaluation.ODATA_ENTITYSET){
                that.getView().getModel().setProperty("/ODATA_ENTITYSET",evaluation.ODATA_ENTITYSET);
                try{
                    that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                    that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                }
                catch(e){
                    that.showDataSourceError = true;
                    that.resetDimensionsAndInputParameters();
                }
            }
            that.getView().getModel().updateBindings();

            //Texts
            languageData = data.TEXTS || [];
            var languageArray = [];
            that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY = [];
            for(i=0;i<languageData.length;i++){
                var languageObject = {};
                languageObject.TITLE = languageData[i].TITLE;
                languageObject.DESCRIPTION = languageData[i].DESCRIPTION;
                that.oDataModel.read("/LANGUAGE?$filter=SPRAS eq '"+languageData[i].LANGUAGE+"'", null, null, false, function(langData) {
                    languageObject.LANGUAGE_KEY = langData.results[0].SPRAS;
                    languageObject.LANGUAGE = langData.results[0].LAISO;
                    languageObject.IS_ACTIVE = that.getView().getModel().getData().IS_ACTIVE;
                    languageObject.ID = that.getView().getModel().getData().ID;
                });
                if(languageObject.LANGUAGE_KEY!=that.localLanguage){
                    languageArray.push(languageObject);
                }
            }
            that.getView().getModel().setProperty("/ADDITIONAL_LANGUAGE_ARRAY",languageArray);
            that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",languageArray.length); 
            for(var i=0;i<languageArray.length;i++){
                var langObj = {};
                langObj.ID = languageArray[i].ID;
                langObj.IS_ACTIVE = languageArray[i].IS_ACTIVE;
                langObj.LANGUAGE = languageArray[i].LANGUAGE_KEY;
                langObj.TITLE = languageArray[i].TITLE;
                langObj.DESCRIPTION = languageArray[i].DESCRIPTION;
                that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY.push(langObj);
            }
            //that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
            that.evalDetails.NO_OF_ADDITIONAL_LANGUAGES = languageArray.length;


            //Tags
            var tagsArr = data.TAGS || [];
            if(tagsArr.length > 0){
                var tags = "";
                for(var i=0;i<tagsArr.length;i++){
                    tags+=tagsArr[i].TAG+",";
                }
                tags = tags.substring(0,tags.length-1);
                that.getView().getModel().setProperty("/TAG",tags);
            }

            //Filters
            var filtersArr = data.FILTERS || [];
            if(filtersArr.length){
                var inputParams = [], dimensions = [],j=0,k=0;
                for(var i=0;i<filtersArr.length;i++){
                    if(filtersArr[i].TYPE === "PA"){
                        inputParams[j] = {};
                        inputParams[j++] = filtersArr[i];
                    }
                    else if(filtersArr[i].TYPE === "FI"){
                        dimensions[k] = {};
                        dimensions[k++] = filtersArr[i];
                    }
                }
                if(inputParams.length > 0){
                    var inputParamFormatted =  {};
                    inputParamFormatted.inputParameters = [];
                    inputParamFormatted.inputParameters = that.formObjectForFilters(inputParams);
                    if(that.oModelForInputParameters.getData().inputParameters && that.oModelForInputParameters.getData().inputParameters.length) {
                        for(var i=0;i<that.oModelForInputParameters.getData().inputParameters.length;i++){
                            for(var j=0;j<inputParamFormatted.inputParameters.length;j++){
                                if(that.oModelForInputParameters.getData().inputParameters[i].name === inputParamFormatted.inputParameters[j].name){
                                    that.oModelForInputParameters.getData().inputParameters[i].value_1 = inputParamFormatted.inputParameters[j].value_1;
                                    that.oModelForInputParameters.getData().inputParameters[i].value_2 = inputParamFormatted.inputParameters[j].value_2;
                                }
                            }
                        }
                        that.oModelForInputParameters.updateBindings();

                    }
                }
                if(dimensions.length > 0){
                    var filtersFormatted = {};
                    filtersFormatted.selectedDimensions = [];
                    filtersFormatted.selectedDimensions = that.formObjectForFilters(dimensions);
                    that.oModelForDimensions.getData().selectedDimensions = filtersFormatted.selectedDimensions;
                    that.oModelForDimensions.updateBindings();

                }
            }

            //Properties
            var propertiesArr = data.PROPERTIES || [];
            if(propertiesArr.length > 0){
                that.getView().getModel().setProperty("/PROPERTIES",propertiesArr);
                that.getView().getModel().updateBindings();
            }

            //Values
            var valuesArr = data.VALUES || [];
            if(valuesArr.length > 0){
                for(i=0;i<valuesArr.length;i++){
                    if(valuesArr[i].FIXED){
                        that.populateTargetAndTresholds(valuesArr[i].TYPE,valuesArr[i].FIXED);
                    }
                    else{
                        that.populateTargetAndTresholds(valuesArr[i].TYPE,valuesArr[i].COLUMN_NAME);
                    }
                } 
            }

            that.busyDialog.close();
        };

        var evaluationContext = new sap.ui.model.Context(that.getView().getModel(), '/' + that.evalContext);
        that.metadataRef.getEvaluationById({context:evaluationContext, success:evaluationFetchCallBack, error:evaluationFetchErrCallBack, async:false, filters:true, values:true, properties:true, tags: true, texts:true, model:that.oDataModel});		
    },
    populateAdditionalMeasures : function(type,value){
        var that = this;
        var multiInput = that.getView().byId("additionalMeasures");
        multiInput.addToken(new sap.m.Token({text : value}));
        that.getView().byId("additionalMeasures").setVisible(true);
        that.getView().byId("additionalMeasureLabel").setVisible(true);
        that.getView().byId("selectedLabel").setVisible(true);
        that.getView().byId("selectedadditionalMeasures").setVisible(true);
        that.selectedMeasure();
    },
    populateTargetAndTresholds : function(type,value){
        var that = this;
        switch(type){
        case "CL" : that.getView().getModel().setProperty("/CRITICALLOW",value);break;
        case "WL" : that.getView().getModel().setProperty("/WARNINGLOW",value);break;
        case "TA" : that.getView().getModel().setProperty("/TARGET",value);break;
        case "CH" : that.getView().getModel().setProperty("/CRITICALHIGH",value);break;
        case "WH" : that.getView().getModel().setProperty("/WARNINGHIGH",value);break;
        case "TC" : that.getView().getModel().setProperty("/TREND",value);break;
        case "RE" : that.getView().getModel().setProperty("/REFERENCE_VALUE",value);break;
        default : that.populateAdditionalMeasures(type,value);
        }
    },
    formObjectForFilters : function(listOfFilters){
        var i = 0, j = 0, k = 0,l=0, temp = [], tempObj;
        var dataSource = this.evalDetails.ODATA_URL;
        var entitySet = this.evalDetails.ODATA_ENTITYSET;
        var queryResultObjDimensions = sap.suite.ui.smartbusiness.lib.OData.filter(dataSource,entitySet).getAsObject();
        var extensions = null;
        var requiredProperty = false;
        var filterRestriction = null;

        for(i=0;i<listOfFilters.length;i++){
            requiredProperty = false;
            filterRestriction = null;
            if(queryResultObjDimensions && queryResultObjDimensions[listOfFilters[i].NAME] && 
                    queryResultObjDimensions[listOfFilters[i].NAME].getKeyProperty() && 
                    queryResultObjDimensions[listOfFilters[i].NAME].getKeyProperty().extensions){
                extensions = queryResultObjDimensions[listOfFilters[i].NAME].getKeyProperty().extensions;
                for(l=0;l<extensions.length;l++){
                    if(extensions[l].name == "required-in-filter" && extensions[l].value == "true"){
                        requiredProperty = true;						
                    }
                    if(extensions[l].name == "filter-restriction"){
                        filterRestriction = extensions[l].value;
                    }
                }
            }
            if(listOfFilters[i].OPERATOR == "BT"){
                tempObj = {};
                tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2};
                tempObj.required = requiredProperty;
                tempObj.filterRestriction = filterRestriction;
                temp[j++] = tempObj; 
            }
            else{
                for(k=0;k<temp.length;k++){
                    if((temp[k].name == listOfFilters[i].NAME) && (temp[k].operator == listOfFilters[i].OPERATOR)){
                        break;
                    }
                }
                if(k == temp.length){
                    tempObj = {};
                    tempObj = {"name":listOfFilters[i].NAME, "operator":listOfFilters[i].OPERATOR,  "value_1":listOfFilters[i].VALUE_1, "value_2":listOfFilters[i].VALUE_2};
                    tempObj.required = requiredProperty;
                    tempObj.filterRestriction = filterRestriction;
                    temp[j++] = tempObj;
                }
                else{
                    temp[k].value_1+=","+listOfFilters[i].VALUE_1;
                }
            }
        }
        return temp;
    },

    // Adapter Implementation ----

    getKpiDetails : function() {
        var that = this;
        if(!that.indicatorContext){
            that.busyDialog.close();
            that.indicatorContext = "INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)"
        }

        var indicatorContext = new sap.ui.model.Context(that.getView().getModel(), '/' + that.indicatorContext);
        var indicatorFetchCallBack = function(data) {
            var indicator = data.INDICATOR;

            if(indicator.IS_ACTIVE == 0){
                sap.m.MessageToast.show(that.oResourceBundle.getText("ERROR_INACTIVE_KPI_CANNOT_HAVE_EVALUATION"));
                window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + 
                "&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=0)";
                return;
            }
            that.getView().byId("indicatorId").setValueState("None");

            that.getView().getModel().setProperty("/INDICATOR", indicator.ID);
            that.getView().getModel().setProperty("/INDICATORTITLE", indicator.TITLE);
            that.getView().getModel().setProperty("/DESCRIPTION", indicator.DESCRIPTION);
            that.getView().getModel().setProperty("/OWNER_NAME", indicator.OWNER_NAME);
            that.getView().getModel().setProperty("/OWNER_ID", indicator.OWNER_ID);
            that.getView().getModel().setProperty("/OWNER_E_MAIL", indicator.OWNER_E_MAIL);
            that.getView().getModel().setProperty("/SEMANTIC_OBJECT", indicator.SEMANTIC_OBJECT);
            that.getView().getModel().setProperty("/ACTION", indicator.ACTION);
            that.getView().getModel().setProperty("/INDICATOR_TYPE", indicator.TYPE);
            that.getView().getModel().setProperty("/VIEW_NAME", indicator.VIEW_NAME);
            that.getView().getModel().setProperty("/ODATA_URL", indicator.ODATA_URL);
            that.getView().getModel().setProperty("/COLUMN_NAME", indicator.COLUMN_NAME);
            that.getView().getModel().setProperty("/GOAL_TYPE", indicator.GOAL_TYPE);
            that.getView().getModel().setProperty("/DATA_SPECIFICATION", indicator.DATA_SPECIFICATION);
            if(indicator.DATA_SPECIFICATION != ""){
                that.byId("additionalInfo").setVisible(true);
            }
            else{
                that.byId("additionalInfo").setVisible(false);
            }
            that.createTargetThresholdLayout();
            if (indicator.ODATA_ENTITYSET) {
                that.getView().getModel().setProperty("/ODATA_ENTITYSET", indicator.ODATA_ENTITYSET);
                that.resetDimensionsAndInputParameters();
                try{
                    that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                    that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                    if(that.inputParameterSapClientCheckBox){
                        that.inputParameterSapClientCheckBox.fireSelect();
                    }
                }
                catch(e) {
                    sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
                        "description" : that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS")
                    });
                    that.errorState = true;
                    that.resetDimensionsAndInputParameters();
                }

            }

            //Tags
            var tagsArr = data.TAGS || [];
            if(tagsArr.length > 0){
                var tags = "";
                for(var i=0;i<tagsArr.length;i++){
                    tags+=tagsArr[i].TAG+",";
                }
                tags = tags.substring(0,tags.length-1);
                that.getView().getModel().setProperty("/TAG",tags);
            }

            //Properties
            var propertiesArr = data.PROPERTIES || [];
            if(propertiesArr.length > 0){
                that.getView().getModel().setProperty("/PROPERTIES",propertiesArr);
                that.getView().getModel().updateBindings();
            }

            that.busyDialog.close();
        };

        var indicatorFetchErrCallBack = function(d,s,k) {
            that.busyDialog.close(); 
            that.getView().byId("indicatorId").setValueState("Error");
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST")
            });
            that.errorState = true;
        };

        that.metadataRef.getKPIById({context:indicatorContext, async:false, texts:true, tags:true, properties:true, success:indicatorFetchCallBack, error:indicatorFetchErrCallBack, model:that.oDataModel});
    },
    getEvalParamPayload : function(formData) {
        var evalPayload = {};
        evalPayload.ID = formData.ID;
        evalPayload.DESCRIPTION = formData.DESCRIPTION;
        evalPayload.INDICATOR = formData.INDICATOR;
        evalPayload.ODATA_URL = formData.ODATA_URL;
        evalPayload.VIEW_NAME = formData.VIEW_NAME;
        evalPayload.COLUMN_NAME = formData.COLUMN_NAME;
        evalPayload.OWNER_NAME = formData.OWNER_NAME;
        evalPayload.OWNER_E_MAIL = formData.OWNER_E_MAIL;
        evalPayload.OWNER_ID = formData.OWNER_ID;
        evalPayload.CREATED_BY = "";
        evalPayload.CHANGED_BY = "";
        evalPayload.IS_ACTIVE = formData.IS_ACTIVE;
        evalPayload.SCALING = parseInt(formData.SCALING)||0;
        evalPayload.TITLE = formData.TITLE;
        evalPayload.ENTITY_TYPE = "";
        evalPayload.ODATA_ENTITYSET = formData.ODATA_ENTITYSET;
        evalPayload.ODATA_PROPERTY = "";
        evalPayload.SEMANTIC_OBJECT = formData.SEMANTIC_OBJECT;
        evalPayload.ACTION = formData.ACTION;
        evalPayload.DATA_SPECIFICATION = formData.DATA_SPECIFICATION;
        evalPayload.GOAL_TYPE = formData.GOAL_TYPE;
        evalPayload.INDICATOR_TYPE = formData.INDICATOR_TYPE;
        evalPayload.VALUES_SOURCE = formData.VALUES_SOURCE;
        evalPayload.DECIMAL_PRECISION = parseInt(formData.DECIMAL_PRECISION)||0;
        return evalPayload;
    },
    setFilterPayload : function(id, type, name, operator, value1, value2) {
        var obj = {};
        obj.ID = id;
        obj.IS_ACTIVE = this.getView().getModel().getData().IS_ACTIVE;
        obj.TYPE = type;
        obj.NAME = name;
        obj.OPERATOR = operator;
        obj.VALUE_1 = value1;
        if (value2)
            obj.VALUE_2 = value2;
        else
            obj.VALUE_2 = "";
        return obj;

    },
    getInputParamPayload : function(form) {
        var evalInputParams = {}, j = 0;
        var formData = form.getModel().getData();
        if (form.getController().oModelForInputParameters) {
            evalInputParams = form.getController().oModelForInputParameters.getData();
            if (evalInputParams.inputParameters) {
                if (evalInputParams.inputParameters.length > 0) {
                    var i = 0, filterValue = [], filterValue1;
                    while (i < evalInputParams.inputParameters.length) {
                        if (evalInputParams.inputParameters[i].operator === "BT") {
                            if ((evalInputParams[i].value_1 !== "") || (evalInputParams[i].value_2 !== "")) {
                                filterValue = evalInputParams.inputParameters[i].value_1.split(",");
                                filterValue1 = evalInputParams.inputParameters[i].value_2.split(",");
                                if ((filterValue1.length === 1) && (!filterValue.length === 1)) {

                                    evalInputParams.inputParameters[i].value_1 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
                                    ? new Date(evalInputParams.inputParameters[i].value_1).toJSON() : evalInputParams.inputParameters[i].value_1;
                                    evalInputParams.inputParameters[i].value_2 = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
                                    ? new Date(evalInputParams.inputParameters[i].value_2).toJSON() : evalInputParams.inputParameters[i].value_2;
                                    this.evalFiltersPayload[j] = {};
                                    this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
                                            evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
                                            evalInputParams.inputParameters[i].value_1, evalInputParams.inputParameters[i].value_2);
                                    j++;
                                }
                            }
                        } else {
                            filterValue = evalInputParams.inputParameters[i].value_1.split(",");
                            if (filterValue.length > 0) {
                                for ( var k = 0; k < filterValue.length; k++) {
                                    if (filterValue[k] !== "") {

                                        filterValue[k] = (evalInputParams.inputParameters[i].propertyType == "Edm.DateTime")
                                        ? new Date(filterValue[k]).toJSON() : filterValue[k];
                                        this.evalFiltersPayload[j] = {};
                                        this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "PA",
                                                evalInputParams.inputParameters[i].name, evalInputParams.inputParameters[i].operator,
                                                filterValue[k]);
                                        j++;
                                    }
                                }
                            }
                        }
                        i++;
                    }
                }
            }

        }
    },
    getFiltersPayload : function(form) {
        var formData = form.getModel().getData();
        var evalDimensionFilters = {}, j = this.evalFiltersPayload.length;
        if (form.getController().oModelForDimensions) {
            evalDimensionFilters = form.getController().oModelForDimensions.getData();
            if (evalDimensionFilters.selectedDimensions) {
                if (evalDimensionFilters.selectedDimensions.length > 0) {
                    var i = 0, filterValue = [], filterValue1;
                    while (i < evalDimensionFilters.selectedDimensions.length) 
                    {
                        if (evalDimensionFilters.selectedDimensions[i].operator === "BT") 
                        {
                            if ((evalDimensionFilters.selectedDimensions[i].value_1 !== "")
                                    && (evalDimensionFilters.selectedDimensions[i].value_2 !== ""))
                            {
                                filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
                                filterValue1 = evalDimensionFilters.selectedDimensions[i].value_2.split(",");
                                if ((filterValue1.length === 1) || (!filterValue.length === 1))
                                {
                                    evalDimensionFilters.selectedDimensions[i].value_1 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
                                    ? new Date(evalDimensionFilters.selectedDimensions[i].value_1).toJSON() : evalDimensionFilters.selectedDimensions[i].value_1;
                                    evalDimensionFilters.selectedDimensions[i].value_2 = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
                                    ? new Date(evalDimensionFilters.selectedDimensions[i].value_2).toJSON() : evalDimensionFilters.selectedDimensions[i].value_2;
                                    this.evalFiltersPayload[j] = {};
                                    this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
                                            evalDimensionFilters.selectedDimensions[i].name,
                                            evalDimensionFilters.selectedDimensions[i].operator,
                                            evalDimensionFilters.selectedDimensions[i].value_1,
                                            evalDimensionFilters.selectedDimensions[i].value_2);

                                    j++;
                                }
                            }
                        } else {
                            filterValue = evalDimensionFilters.selectedDimensions[i].value_1.split(",");
                            if (filterValue.length > 0) 
                            {
                                for (var k = 0; k < filterValue.length; k++)
                                {
                                    if (filterValue[k] != "")
                                    {      
                                        filterValue[k] = (evalDimensionFilters.selectedDimensions[i].propertyType == "Edm.DateTime")
                                        ? new Date(filterValue[k]).toJSON() : filterValue[k];
                                        this.evalFiltersPayload[j] = {};
                                        this.evalFiltersPayload[j] = this.setFilterPayload(formData.ID, "FI",
                                                evalDimensionFilters.selectedDimensions[i].name,
                                                evalDimensionFilters.selectedDimensions[i].operator, 
                                                filterValue[k]);
                                        j++;
                                    }

                                }
                            }
                        }
                        i++;
                    }
                }
            }
        }
    },

    getThresholdValue : function(id, type, state, value) {
        var obj = {};
        obj.ID = id;
        obj.TYPE = type;
        obj.IS_ACTIVE = state;

        var form = this.getView();
        var formData = form.getModel().getData();
        var valueType = formData.VALUES_SOURCE;
        if (valueType === "MEASURE") {
            obj.COLUMN_NAME = value;
        }
        if (valueType === "FIXED") {
            obj.FIXED = value;
        }
        if (valueType === "RELATIVE"){
            if(type=="TA" || type=="TC" || type=="RE"){
                obj.COLUMN_NAME = value;
            }
            else{
                obj.FIXED = value;
            }
        }
        obj.ODATA_PROPERTY = "";
        return obj;
    },
    getRangePayload : function(form) {
        var formData = form.getModel().getData();
        var i = 0;
        if (formData.CRITICALHIGH && formData.CRITICALHIGH !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CH", formData.IS_ACTIVE, formData.CRITICALHIGH);
            i++;
        }
        if (formData.WARNINGHIGH && formData.WARNINGHIGH !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WH", formData.IS_ACTIVE, formData.WARNINGHIGH);
            i++;
        }
        if (formData.TARGET && formData.TARGET !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE,formData.TARGET);
            i++;
        }
        if (formData.CRITICALLOW && formData.CRITICALLOW !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CL", formData.IS_ACTIVE,formData.CRITICALLOW);
            i++;
        }
        if (formData.WARNINGLOW && formData.WARNINGLOW !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WL", formData.IS_ACTIVE,formData.WARNINGLOW);
            i++;
        }
    },
    getMaximizingPayload : function(form) {
        var formData = form.getModel().getData();
        var i = this.valuesPayload.length;

        if (formData.TARGET && formData.TARGET !== "") {
            this.valuesPayload[i] = this
            .getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE, formData.TARGET);
            i++;
        }
        if (formData.CRITICALLOW && formData.CRITICALLOW !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CL", formData.IS_ACTIVE,formData.CRITICALLOW);
            i++;
        }
        if (formData.WARNINGLOW && formData.WARNINGLOW !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WL", formData.IS_ACTIVE,formData.WARNINGLOW);
            i++;
        }
    },
    getMinimizingPayload : function(form) {
        var formData = form.getModel().getData();
        var i = this.valuesPayload.length;

        if (formData.CRITICALHIGH && formData.CRITICALHIGH !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "CH", formData.IS_ACTIVE,formData.CRITICALHIGH);
            i++;
        }
        if (formData.WARNINGHIGH && formData.WARNINGHIGH !== "") {
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "WH", formData.IS_ACTIVE,formData.WARNINGHIGH);
            i++;
        }
        if (formData.TARGET && formData.TARGET !== "") {
            this.valuesPayload[i] = this
            .getThresholdValue(formData.ID, "TA", formData.IS_ACTIVE, formData.TARGET);
            i++;
        }

    },
    saveFilters : function(form) {
        this.evalFiltersPayload = [];
        this.getInputParamPayload(form);
        this.getFiltersPayload(form);
    },
    saveValues : function(form) {
        var that = this;
        this.valuesPayload = [];
        var formData = form.getModel().getData();
        switch (formData.GOAL_TYPE) {
        case "RA" :
            that.getRangePayload(form);
            break;
        case "MA" :
            that.getMaximizingPayload(form);
            break;
        case "MI" :
            that.getMinimizingPayload(form);
            break;
        }
        if (formData.TREND && formData.TREND !== "") {
            var i = this.valuesPayload.length;
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "TC", formData.IS_ACTIVE, formData.TREND);
            i++;
        }
        if (formData.REFERENCE_VALUE && formData.REFERENCE_VALUE !== "") {
            var i = this.valuesPayload.length;
            this.valuesPayload[i] = this.getThresholdValue(formData.ID, "RE", formData.IS_ACTIVE, formData.REFERENCE_VALUE);
            i++;
        }
        if(that.getView().byId("additionalMeasures").getTokens().length){
            var tokens = that.getView().byId("additionalMeasures").getTokens();
            for(var i=0,j=this.valuesPayload.length;i<tokens.length;i++){
                var type = "0";
                if (i.toString().length === 1) { 
                    type = "0"+i; 
                }
                else{
                    type = i.toString();
                }
                this.valuesPayload[j++] = {
                        ID:formData.ID,
                        IS_ACTIVE:formData.IS_ACTIVE,
                        TYPE:type,
                        COLUMN_NAME:tokens[i].getText(),
                        ODATA_PROPERTY:""
                }
            }
        }
    },
    saveTags : function(form) {
        var formData = form.getModel().getData();
        this.tagsPayload = [];
        if (formData.TAG) {
            var tags = [];

            tags = formData.TAG.split(",");
            for ( var i = 0; i < tags.length; i++) {
                this.tagsPayload[i] = {};
                this.tagsPayload[i].ID = formData.ID;
                this.tagsPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
                this.tagsPayload[i].TYPE = "EV";
                this.tagsPayload[i].TAG = tags[i];
            }
        }

    },
    saveProperties : function(form) {
        var formData = form.getModel().getData();
        this.propPayload = [];
        if (formData.PROPERTIES) {
            for ( var i = 0; i < formData.PROPERTIES.length; i++) {
                this.propPayload[i] = {};
                this.propPayload[i].ID = formData.ID;
                this.propPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
                this.propPayload[i].TYPE = "EV";
                this.propPayload[i].NAME = formData.PROPERTIES[i].NAME;
                this.propPayload[i].VALUE = formData.PROPERTIES[i].VALUE;
            }

        }
    },
    saveAdditionalLanguages : function(form){
        var that = this;
        var formData = form.getModel().getData();
        this.languagesPayload = [];
        if(formData.NO_OF_ADDITIONAL_LANGUAGES > 0){
            var i=0,j=0,k=0,temp;
            for(i=0;i<formData.ADDITIONAL_LANGUAGE_ARRAY.length;i++){
                this.languagesPayload[i] = {};
                this.languagesPayload[i].ID = formData.ID;
                this.languagesPayload[i].IS_ACTIVE = formData.IS_ACTIVE;
                this.languagesPayload[i].LANGUAGE = formData.ADDITIONAL_LANGUAGE_ARRAY[i].LANGUAGE_KEY;
                this.languagesPayload[i].TITLE = formData.ADDITIONAL_LANGUAGE_ARRAY[i].TITLE;
                this.languagesPayload[i].DESCRIPTION = formData.ADDITIONAL_LANGUAGE_ARRAY[i].DESCRIPTION;
            }
        }

    },
    createBatchForEvalCreateMode : function(oEvent){
        var that = this;
        that.evalPayload = {};
        that.evalPayload.ID = that.evalParamPayload.ID;
        that.evalPayload.IS_ACTIVE = that.evalParamPayload.IS_ACTIVE;
        that.evalPayload.EVALUATION = that.evalParamPayload;
        delete that.evalPayload.EVALUATION.ID;
        delete that.evalPayload.EVALUATION.IS_ACTIVE;

        that.evalPayload.FILTERS = [];
        that.evalPayload.FILTERS = that.evalFiltersPayload;
        for(var i=0;i<that.evalPayload.FILTERS.length;i++){
            delete that.evalPayload.FILTERS[i].ID;
            delete that.evalPayload.FILTERS[i].IS_ACTIVE;
        }
        that.evalPayload.VALUES = [];
        that.evalPayload.VALUES = that.valuesPayload;
        for(var i=0;i<that.evalPayload.VALUES.length;i++){
            delete that.evalPayload.VALUES[i].ID;
            delete that.evalPayload.VALUES[i].IS_ACTIVE;
        }
        that.evalPayload.TAGS = [];
        that.evalPayload.TAGS = that.tagsPayload;
        for(var i=0;i<that.evalPayload.TAGS.length;i++){
            delete that.evalPayload.TAGS[i].ID;
            delete that.evalPayload.TAGS[i].IS_ACTIVE;
        }
        that.evalPayload.PROPERTIES = [];
        that.evalPayload.PROPERTIES = that.propPayload;
        for(var i=0;i<that.evalPayload.PROPERTIES.length;i++){
            delete that.evalPayload.PROPERTIES[i].ID;
            delete that.evalPayload.PROPERTIES[i].IS_ACTIVE;
        }


        that.evalPayload.TEXTS = [];
        that.evalPayload.TEXTS = that.languagesPayload;
        for(var i=0;i<that.evalPayload.TEXTS.length;i++){
            delete that.evalPayload.TEXTS[i].ID;
            delete that.evalPayload.TEXTS[i].IS_ACTIVE;
        }

        var evalPayload = {payload:that.evalPayload};
        evalPayload.keys = {};
        evalPayload.keys.ID = that.evalPayload.ID;
        evalPayload.keys.IS_ACTIVE = that.evalPayload.IS_ACTIVE;
        delete evalPayload.ID;
        delete evalPayload.IS_ACTIVE;

        var url = "EVALUATION";

        that.metadataRef.create(url,evalPayload,null,function(data){
            that.saveSuccessHandling(oEvent);
        },function(error){
            that.saveErrorHandling(error);
        });
    },

    createBatchPayload:function(oEvent){
        var that = this,i = 0;
        var path, updateRequired = false;
        var updatePayload = {};
        var batch = {};
        var formData = that.getView().getModel().getData();
        updatePayload.ID = formData.ID;
        updatePayload.IS_ACTIVE = formData.IS_ACTIVE;
        //checking for changes in evaluation parameters
        batch.oldPayload = that.getEvalParamPayload(that.evalDetails);
        batch.newPayload = that.evalParamPayload;
        batch.objectType = "Evaluations";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        if(batch.updates.length > 0){
            updatePayload.EVALUATION = {};
            updatePayload.EVALUATION.update = {}
            updatePayload.EVALUATION.update = that.evalParamPayload;
            delete updatePayload.EVALUATION.update.ID;
            delete updatePayload.EVALUATION.update.IS_ACTIVE;
            updateRequired = true;
        }

        //for changes in evaluation filters
        batch.oldPayload = that.evalDetails.FILTERS;
        batch.newPayload = that.evalFiltersPayload;
        batch.objectType = "EVALUATION_FILTERS";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        updatePayload.FILTERS = {};
        if(batch.deletes.length > 0){
            for(i=0;i<batch.deletes.length;i++){
                delete batch.deletes[i].ID;
                delete batch.deletes[i].IS_ACTIVE;
            }
            updatePayload.FILTERS.remove = batch.deletes;
            updateRequired = true;
        }
        if(batch.updates.length > 0){
            for(var i=0;i<batch.updates.length;i++){
                delete batch.updates[i].ID;
                delete batch.updates[i].IS_ACTIVE;
            }
            updatePayload.FILTERS.create = batch.updates;
            updateRequired = true;
        }

        //for changes in evaluation values
        for(i=0;i<that.evalDetails.VALUES.length;i++){
            if(that.evalDetails.VALUES[i].COLUMN_NAME){
                delete that.evalDetails.VALUES[i].FIXED;
            }
            else{
                delete that.evalDetails.VALUES[i].COLUMN_NAME;
            }
        }
        batch.oldPayload = that.evalDetails.VALUES;
        batch.newPayload = that.valuesPayload;
        batch.objectType = "EVALUATION_VALUES";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        updatePayload.VALUES = {};
        if(batch.deletes.length > 0){
            for(var i=0;i<batch.deletes;i++){
                delete batch.deletes[i].ID;
                delete batch.deletes[i].IS_ACTIVE;
            }
            updatePayload.VALUES.remove = batch.deletes;
            updateRequired = true;
        }
        if(batch.updates.length > 0){
            for(var i=0;i<batch.updates.length;i++){
                delete batch.updates[i].ID;
                delete batch.updates[i].IS_ACTIVE;
            }
            updatePayload.VALUES.create = batch.updates;
            updateRequired = true;
        }

        //for changes in evaluation tags
        batch.oldPayload = that.evalDetails.TAGS;
        batch.newPayload = that.tagsPayload;
        batch.objectType = "TAGS";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        updatePayload.TAGS = {};
        if(batch.deletes.length > 0){
            for(i=0;i<batch.deletes.length;i++){
                delete batch.deletes[i].ID;
                delete batch.deletes[i].IS_ACTIVE;
            }
            updatePayload.TAGS.remove = batch.deletes;
            updateRequired = true;
        }
        if(batch.updates.length > 0){
            for(var i=0;i<batch.updates.length;i++){
                delete batch.updates[i].ID;
                delete batch.updates[i].IS_ACTIVE;
            }
            updatePayload.TAGS.create = batch.updates;
            updateRequired = true;
        }


        //for changes in evaluation properties
        batch.oldPayload = that.evalDetails.PROPERTIES;
        batch.newPayload = that.propPayload
        batch.objectType = "PROPERTIES";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        updatePayload.PROPERTIES = {};
        if(batch.deletes.length > 0){
            for(i=0;i<batch.deletes.length;i++){
                delete batch.deletes[i].ID;
                delete batch.deletes[i].IS_ACTIVE;
            }
            updatePayload.PROPERTIES.remove = batch.deletes;
            updateRequired = true;
        }
        if(batch.updates.length > 0){
            for(var i=0;i<batch.updates.length;i++){
                delete batch.updates[i].ID;
                delete batch.updates[i].IS_ACTIVE;
            }
            updatePayload.PROPERTIES.create = batch.updates;
            updateRequired = true;
        }

        //for changes in additional languages
        batch.oldPayload = that.evalDetails.ADDITIONAL_LANGUAGE_ARRAY;
        batch.newPayload = that.languagesPayload
        batch.objectType = "EVALUATION_TEXTS";
        batch = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck(batch);
        updatePayload.TEXTS = {}
        if(batch.deletes.length > 0){
            for(i=0;i<batch.deletes.length;i++){
                delete batch.deletes[i].ID;
                delete batch.deletes[i].IS_ACTIVE;
            }
            updatePayload.TEXTS.remove = batch.deletes;
            updateRequired = true;
        }
        if(batch.updates.length > 0){
            for(var i=0;i<batch.updates.length;i++){
                delete batch.updates[i].ID;
                delete batch.updates[i].IS_ACTIVE;
            }
            updatePayload.TEXTS.create = batch.updates;
            updateRequired = true;
        }
        if(!updateRequired){
            that.busyDialog.close();   
            that.saveSuccessHandling(oEvent);
            return;
        }
        else{
            var evalPayload = {payload:updatePayload};
            evalPayload.keys = {};
            evalPayload.keys.ID = updatePayload.ID;
            evalPayload.keys.IS_ACTIVE = updatePayload.IS_ACTIVE;
            delete evalPayload.ID;
            delete evalPayload.IS_ACTIVE;

            var url = "EVALUATION";
            that.metadataRef.update(url,evalPayload,null,function(data){
                that.saveSuccessHandling(oEvent);
            },function(error){
                that.saveErrorHandling(error);
            });
        }
    },
    saveErrorHandling : function(error){
        var that = this;
        sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVAL_SAVE"));
        that.errorMessages.push({
            "type":"Error",
            "title":that.oResourceBundle.getText("ERROR_EVAL_SAVE")
        });
        that.errorState = true;
        that.busyDialog.close();
    },
    saveSuccessHandling : function(oEvent){
        var that = this;
        sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_EVAL_SAVE"));
        if(oEvent === "activate" || oEvent === "saveActivate" || oEvent === "activateAndCreateNew"){
            var obj = {};
            obj.ID = that.getView().getModel().getData().ID;
            var url = "ACTIVATE_EVALUATION";
            that.metadataRef.create(url,obj,null,function(data){
                that.busyDialog.close();
                sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_EVAL_ACTIVATE"));
                if(oEvent === "activate") {
                    window.location.hash = "FioriApplication-configureSBKPITile?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/detail/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
                }
                else if(oEvent === "saveActivate" && !that.fromHome) {
                    window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
                } else if(oEvent === "activateAndCreateNew") {
                    that.byId("evalId").setEditable(true);
                    that.getView().getModel().setData({});
                    that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",0);
                    that.getKpiDetails();
                    window.location.hash = "FioriApplication-createSBKPIEvaluation&/addEvaluation/"+that.indicatorContext;
                }
                else if(that.fromHome){
                    window.location.hash = "";
                }
            },function(error){
                that.busyDialog.close(); 
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ACTIVATING_EVALUATION"));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ACTIVATING_EVALUATION")
                });
                that.errorState = true;
            });
        }
        else if(oEvent == "create"){
            that.busyDialog.close(); 
            if(that.fromHome){
                window.location.hash = "";
            }
            else{
                if(this.editDraft){
                    window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)";
                }
                else
                    if(that.duplicateEval){
                        window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=0)";
                    }
                    else
                        if(that.evalDetails){
                            var isActive = that.evalDetails.IS_ACTIVE;
                            window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE="+isActive+")";
                        }
                        else{
                            window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/evalDetail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)/EVALUATIONS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=0)";
                        }
            }
        }
        else if(oEvent == "createNew"){
            that.busyDialog.close(); 
            that.byId("evalId").setEditable(true);
            that.getView().getModel().setData({});
            that.getView().getModel().setProperty("/NO_OF_ADDITIONAL_LANGUAGES",0);
            that.getKpiDetails();
            window.location.hash = "FioriApplication-createSBKPIEvaluation&/addEvaluation/"+that.indicatorContext;
        }
        that.busyDialog.close();
    },
    setFooterOnError : function(){
        if(this.editDraft === true){
            if(this.errorMessages.length > 1){
                this.setHeaderFooterOptions(this.oOptionsOnErrorForEdit);
            }
            else{
                this.setHeaderFooterOptions(this.oOptionsForEdit);
            }
        }
        else{
            if(this.errorMessages.length > 1){
                this.setHeaderFooterOptions(this.oOptionsOnErrorForCreate);
            }
            else{
                this.setHeaderFooterOptions(this.oOptionsForCreate);
            }
        }
    },
    saveAndExit : function(oEvent) {
        var that = this;
        that.createBatch = [];
        that.deleteBatch = [];

        this.errorMessages = [];
        this.errorState = false;

        var errorCheck = false;
        var formData = that.getView().getModel().getData();
        var data = {
                errorMsg : [] 
        };

        if(this.VIEW_MODE === "hana"){
            that.byId("odataServiceInput").setValueState("None");
        }
        else{
            that.byId("odataServiceInputCDS").setValueState("None");
        }
        that.byId("entitySetInput").setValueState("None");
        that.byId("valueMeasureInput").setValueState("None");

        if (!(formData.INDICATOR) || formData.INDICATOR.trim() === "") {
            that.byId("indicatorId").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_SELECT_KPI"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_SELECT_KPI")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (!(formData.ID)) {
            that.byId("evalId").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID")
            });
            that.errorState = true;			
            errorCheck = true;
        }

        if (!(formData.TITLE) || formData.TITLE.trim() === "") {
            that.byId("evalTitle").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_TITLE"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_TITLE")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        var oTable = new sap.m.Table({
            columns : [new sap.m.Column({
                header : new sap.m.Text({
                    text : that.oResourceBundle.getText("ERRORHEADERSAVE")
                })
            })]
        });
        var oTemplate = new sap.m.ColumnListItem({
            cells : [
                     new sap.ui.layout.Grid({        
                         vSpacing:0,
                         hSpacing:1,
                         content:[
                                  new sap.m.ObjectStatus({
                                      icon:"{icon}",
                                      state:"{state}",
                                      layoutData: new sap.ui.layout.GridData({span: "L2 M2 S2"})
                                  }),
                                  new sap.m.Text({
                                      maxLines:3, 
                                      text : "{text}",
                                      layoutData: new sap.ui.layout.GridData({span: "L10 M10 S10"})
                                  })
                                  ]
                     })]
        });
        this.setFooterOnError();
        var oModel = new sap.ui.model.json.JSONModel();
        oModel.setData(data);
        oTable.setModel(oModel);
        oTable.bindAggregation("items", "/errorMsg", oTemplate);
        if(errorCheck){
            var oDialog = new sap.m.Dialog({
                icon:"sap-icon://error",
                content: [oTable],
                contentWidth : "25%",
                title: that.oResourceBundle.getText("ERRORCOUNT",data.errorMsg.length),
                state: "Error",
                buttons : [new sap.m.Button({
                    text : that.oResourceBundle.getText("OK"),
                    press : function(){
                        oDialog.close();
                    }
                })]
            });
            oDialog.open();
            return;
        }
        if (that.byId("indicatorId").getValueState() === "Error") {
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_KPI_DOES_NOT_EXIST")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (that.byId("evalOwnerEmail").getValueState() === "Error") {
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (that.byId("semanticObject").getValueState() === "Error") {
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (that.byId("action").getValueState() === "Error") {
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (that.byId("evalTitle").getValueState() === "Error") {
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_VALID_EVALUATION_TITLE"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVALUATION_TITLE")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if(formData.mode === "edit"){
            if (!formData.ID) {
                that.byId("evalId").setValueState("Error");
                data.errorMsg.push({
                    text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"),
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID")
                });
                that.errorState = true;			
                errorCheck = true;
            }
            if (that.byId("evalId").getValueState() === "Error") {
                if(that.evalIdEval_reason == "NOT_START_WITH_PERIOD") {
                    data.errorMsg.push({
                        text : that.oResourceBundle.getText("ERROR_CDS_EVAL_ID_BEGIN_WITH_PERIOD"),
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ERROR_CDS_EVAL_ID_BEGIN_WITH_PERIOD")
                    });
                    that.errorState = true;			
                    errorCheck = true;
                    that.evalIdEval_reason = null;
                } else if(that.evalIdEval_reason == "_START_WITH_PERIOD") {
                    data.errorMsg.push({
                        text : that.oResourceBundle.getText("ERROR_HANA_EVAL_ID_BEGIN_WITH_PERIOD"),
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ERROR_HANA_EVAL_ID_BEGIN_WITH_PERIOD")
                    });
                    that.errorState = true;			
                    errorCheck = true;
                    that.evalIdEval_reason = null;
                } else {
                    data.errorMsg.push({
                        text : that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"),
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID")
                    });
                    that.errorState = true;			
                    errorCheck = true;
                }
            }
        }
        else{
            if(!that.validateEvalId()){
                if (!formData.ID) {
                    that.byId("evalId").setValueState("Error");
                    data.errorMsg.push({
                        text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"),
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID")
                    });
                    that.errorState = true;			
                    errorCheck = true;
                }
                if (that.byId("evalId").getValueState() === "Error") {
                    if(that.evalIdEval_reason == "NOT_START_WITH_PERIOD") {
                        data.errorMsg.push({
                            text : that.oResourceBundle.getText("ERROR_CDS_EVAL_ID_BEGIN_WITH_PERIOD"),
                            icon : "sap-icon://error",
                            state : sap.ui.core.ValueState.Error
                        });
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_CDS_EVAL_ID_BEGIN_WITH_PERIOD")
                        });
                        that.errorState = true;			
                        errorCheck = true;
                        that.evalIdEval_reason = null;
                    } else if(that.evalIdEval_reason == "_START_WITH_PERIOD") {
                        data.errorMsg.push({
                            text : that.oResourceBundle.getText("ERROR_HANA_EVAL_ID_BEGIN_WITH_PERIOD"),
                            icon : "sap-icon://error",
                            state : sap.ui.core.ValueState.Error
                        });
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_HANA_EVAL_ID_BEGIN_WITH_PERIOD")
                        });
                        that.errorState = true;			
                        errorCheck = true;
                        that.evalIdEval_reason = null;
                    } else {
                        data.errorMsg.push({
                            text : that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"),
                            icon : "sap-icon://error",
                            state : sap.ui.core.ValueState.Error
                        });
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID")
                        });
                        that.errorState = true;			
                        errorCheck = true;
                    }
                }
            }
            else{
                return;
            }
        }
        if(formData.VALUES_SOURCE === "FIXED"){

            var notNumberErrors = this._areEvaluationValuesNumber(this.getView().getModel().getData());
            if(notNumberErrors.length){
                var msg = "";
                for(i=0; i < notNumberErrors.length; i++){
                    msg = msg + this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_" + notNumberErrors[i]) + "\n";
                }

                data.errorMsg.push({
                    text : msg,
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type":"Error",
                    "title":msg
                });
                that.errorState = true;			
                errorCheck = true;
            }
            else{
                var validatedEvalValues = this.validateEvaluationValues(this.getView().getModel().getData());
                if(validatedEvalValues.length){

                    var msg = this.oResourceBundle.getText("ERROR_ENTER_VALID_THRESHOLD_VALUES");
                    var i;
                    for(i=0;i<validatedEvalValues.length;i++){
                        if(validatedEvalValues[i]==="CL"){
                            if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
                                msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL_LOW");
                            }
                            else{
                                msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL");
                            }
                        }
                        if(validatedEvalValues[i]==="WL"){
                            if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
                                msg = msg+"\n"+this.oResourceBundle.getText("WARNING_LOW");
                            }
                            else{
                                msg = msg+"\n"+this.oResourceBundle.getText("WARNING");
                            }
                        }
                        if(validatedEvalValues[i]==="TA"){
                            msg = msg+"\n"+this.oResourceBundle.getText("TARGET");
                        }
                        if(validatedEvalValues[i]==="CH"){
                            if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
                                msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL_HIGH");
                            }
                            else{
                                msg = msg+"\n"+this.oResourceBundle.getText("CRITICAL");
                            }
                        }
                        if(validatedEvalValues[i]==="WH"){
                            if(this.getView().getModel().getData().GOAL_TYPE === "RA"){
                                msg = msg+"\n"+this.oResourceBundle.getText("WARNING_HIGH");
                            }
                            else{
                                msg = msg+"\n"+this.oResourceBundle.getText("WARNING");
                            }
                        }
                    }
                    data.errorMsg.push({
                        text : msg,
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":msg
                    });
                    that.errorState = true;			
                    errorCheck = true;
                }
            }
        }
        if(formData.VALUES_SOURCE === "RELATIVE"){
            var thresholdData = this.getView().getModel().getData();
            var patt = /^(?=.*\d)\d*(?:\.\d\d)?$/;
            var msg="";

            if(thresholdData.GOAL_TYPE === "MA"){
                if((thresholdData.WARNINGLOW!="" && thresholdData.WARNINGLOW!=null) && (thresholdData.CRITICALLOW!="" && thresholdData.CRITICALLOW!=null) && parseInt(thresholdData.WARNINGLOW) <= parseInt(thresholdData.CRITICALLOW)){
                    msg += this.oResourceBundle.getText("CRITICAL_SHOULD_BE_LESS_THAN_WARNING");
                }
                if(thresholdData.WARNINGLOW>=100 && (thresholdData.WARNINGLOW !="" && thresholdData.WARNINGLOW!=null)){
                    msg +="\n" +this.oResourceBundle.getText("WARNING_SHOULD_BE_LESS_THAN_100");
                }
                if(thresholdData.CRITICALLOW!="" && (thresholdData.CRITICALLOW>=100 && thresholdData.CRITICALLOW!=null)){
                    msg +="\n" +this.oResourceBundle.getText("CRITICAL_SHOULD_BE_LESS_THAN_100");
                }
                if((thresholdData.WARNINGLOW !="" && thresholdData.WARNINGLOW!=null) && !patt.test(thresholdData.WARNINGLOW)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_WARNING");
                }
                if((thresholdData.CRITICALLOW!="" && thresholdData.CRITICALLOW!=null) && !patt.test(thresholdData.CRITICALLOW)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_CRITICAL");
                }
            }
            if(thresholdData.GOAL_TYPE === "MI"){
                if((thresholdData.CRITICALHIGH!="" && thresholdData.CRITICALHIGH!=null) && (thresholdData.WARNINGHIGH!="" && thresholdData.WARNINGHIGH!=null) && parseInt(thresholdData.CRITICALHIGH) <= parseInt(thresholdData.WARNINGHIGH)){
                    msg += this.oResourceBundle.getText("CRITICAL_SHOULD_BE_MORE_THAN_WARNING"); 
                }
                if(thresholdData.CRITICALHIGH<=100 && (thresholdData.CRITICALHIGH !="" && thresholdData.CRITICALHIGH!=null)){
                    msg += "\n"+this.oResourceBundle.getText("CRITICAL_SHOULD_BE_MORE_THAN_100");
                }
                if(thresholdData.WARNINGHIGH<=100 && (thresholdData.WARNINGHIGH !="" && thresholdData.WARNINGHIGH!=null)){
                    msg += "\n"+this.oResourceBundle.getText("WARNING_SHOULD_BE_MORE_THAN_100");
                }
                if(thresholdData.CRITICALHIGH!="" && thresholdData.CRITICALHIGH!=null && !patt.test(thresholdData.CRITICALHIGH)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_CRITICAL");
                }
                if((thresholdData.WARNINGHIGH!="" && thresholdData.WARNINGHIGH!=null && !patt.test(thresholdData.WARNINGHIGH))){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_WARNING");
                }
            }
            if(thresholdData.GOAL_TYPE === "RA"){
                if((thresholdData.CRITICALHIGH!="" && thresholdData.CRITICALHIGH!=null) && (thresholdData.CRITICALHIGH!="" && thresholdData.CRITICALHIGH!=null) && parseInt(thresholdData.CRITICALHIGH) <= parseInt(thresholdData.WARNINGHIGH)){
                    msg += this.oResourceBundle.getText("CRITICAL_HIGH_MORE_THAN_WARNING_HIGH");
                }
                if((thresholdData.WARNINGLOW!="" && thresholdData.WARNINGLOW!=null) && (thresholdData.CRITICALLOW!="" && thresholdData.CRITICALLOW!=null) && parseInt(thresholdData.WARNINGLOW) <= parseInt(thresholdData.CRITICALLOW)){
                    msg += "\n"+this.oResourceBundle.getText("WARNING_LOW_MORE_THAN_CRITICAL_LOW");
                }
                if(thresholdData.CRITICALHIGH<=100 && (thresholdData.CRITICALHIGH !="" && thresholdData.CRITICALHIGH!=null)){
                    msg += "\n"+this.oResourceBundle.getText("CRITICAL_HIGH_SHOULD_BE_MORE_THAN_100");
                }
                if(thresholdData.WARNINGHIGH<=100 && (thresholdData.WARNINGHIGH !="" && thresholdData.WARNINGHIGH!=null)){
                    msg += "\n"+this.oResourceBundle.getText("WARNING_HIGH_SHOULD_BE_MORE_THAN_100");
                }
                if(thresholdData.CRITICALLOW>=100 && (thresholdData.CRITICALLOW!="" && thresholdData.CRITICALLOW!=null)){
                    msg += "\n"+this.oResourceBundle.getText("CRITICAL_LOW_SHOULD_BE_LESS_THAN_100");
                }
                if(thresholdData.WARNINGLOW>=100 && (thresholdData.WARNINGLOW !="" && thresholdData.WARNINGLOW!=null)){
                    msg += "\n"+this.oResourceBundle.getText("WARNING_LOW_SHOULD_BE_LESS_THAN_100");
                }
                if((thresholdData.WARNINGLOW !="" && thresholdData.WARNINGLOW!=null) && !patt.test(thresholdData.WARNINGLOW)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_WARNING_LOW");
                }
                if((thresholdData.CRITICALLOW!="" && thresholdData.CRITICALLOW!=null) && !patt.test(thresholdData.CRITICALLOW)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_CRITICAL_LOW");
                }
                if(thresholdData.CRITICALHIGH!="" && thresholdData.CRITICALHIGH!=null && !patt.test(thresholdData.CRITICALHIGH)){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_CRITICAL_HIGH");
                }
                if((thresholdData.WARNINGHIGH!="" && thresholdData.WARNINGHIGH!=null && !patt.test(thresholdData.WARNINGHIGH))){
                    msg += "\n" +this.oResourceBundle.getText("ENTER_NUMERIC_VALUE_FOR_WARNING_HIGH");
                }
            }
            if(msg!=""){
                data.errorMsg.push({
                    text : msg,
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type":"Error",
                    "title":msg
                });
                that.errorState = true;			
                errorCheck = true;
            }
        }


        if(!that.indicatorContext){
            that.indicatorContext = "INDICATORS_MODELER(ID='"+formData.INDICATOR+"',IS_ACTIVE=1)";
        }
        var oTable = new sap.m.Table({
            columns : [new sap.m.Column({
                header : new sap.m.Text({
                    text : that.oResourceBundle.getText("ERRORHEADERSAVE")
                })
            })]
        });
        var oTemplate = new sap.m.ColumnListItem({
            cells : [
                     new sap.ui.layout.Grid({        
                         vSpacing:0,
                         hSpacing:1,
                         content:[
                                  new sap.m.ObjectStatus({
                                      icon:"{icon}",
                                      state:"{state}",
                                      layoutData: new sap.ui.layout.GridData({span: "L2 M2 S2"})
                                  }),
                                  new sap.m.Text({
                                      maxLines:3, 
                                      text : "{text}",
                                      layoutData: new sap.ui.layout.GridData({span: "L10 M10 S10"})
                                  })
                                  ]
                     })]
        });
        this.setFooterOnError();
        var oModel = new sap.ui.model.json.JSONModel();
        oModel.setData(data);
        oTable.setModel(oModel);
        oTable.bindAggregation("items", "/errorMsg", oTemplate);
        if(errorCheck){
            var oDialog = new sap.m.Dialog({
                icon:"sap-icon://error",
                content: [oTable],
                contentWidth : "25%",
                title: that.oResourceBundle.getText("ERRORCOUNT",data.errorMsg.length),
                state: "Error",
                buttons : [new sap.m.Button({
                    text : that.oResourceBundle.getText("OK"),
                    press : function(){
                        oDialog.close();
                    }
                })]
            });
            oDialog.open();
            return;
        }
        //usability improvement - Save appParams without explicit click on "+"
        that.isPropertyAdded = true;
        if(that.getView().byId("propertyName").getValue() || that.getView().byId("propertyValue").getValue()){
            that.addNewProperty();
        }
        if(!that.isPropertyAdded){
            return;
        }

        that.busyDialog.open();
        that.evalParamPayload = {};
        that.evalParamPayload = that.getEvalParamPayload(that.getView().getModel().getData());
        that.saveFilters(that.getView());
        that.saveValues(that.getView());
        that.saveTags(that.getView());
        that.saveProperties(that.getView());
        that.saveAdditionalLanguages(that.getView());
        if(!oEvent){
            oEvent = "create";
        }

        if(formData.mode === "create"){
            that.createBatch = that.createBatchForEvalCreateMode(oEvent);
        }
        else if(formData.mode === "edit"){
            if(that.evalDetails.IS_ACTIVE === 0 && formData.IS_ACTIVE === 0){
                that.createBatchPayload(oEvent);
            }
            else if(that.evalDetails.IS_ACTIVE === 1 && formData.IS_ACTIVE === 0){
                that.getView().getModel().setProperty("/mode","create");
                that.createBatch = that.createBatchForEvalCreateMode(oEvent); 
            }
        }

    },

    saveAndCreateNew : function(oEvent) {
        this.saveAndExit("createNew");
    },
    saveAndActivate : function(){
        var that = this;
        that.checkForActivation("saveActivate");
    },
    activateAndCreateNew : function() {
        this.checkForActivation("activateAndCreateNew")
    },
    checkForActivation : function(param){
        var that = this;
        var errorCheck = false;
        var formData = that.getView().getModel().getData();

        this.errorMessages = [];
        this.errorState = false;

        var data = {
                errorMsg : [] 
        };
        if (!(formData.INDICATOR) || formData.INDICATOR.trim() === "") {
            that.byId("indicatorId").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_SELECT_KPI"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_SELECT_KPI")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if (!(formData.ID)) {
            that.byId("evalId").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_ID")
            });
            that.errorState = true;			
            errorCheck = true;
        }

        if (!(formData.TITLE) || formData.TITLE.trim() === "") {
            that.byId("evalTitle").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_TITLE"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_EVALUATION_TITLE")
            });
            that.errorState = true;			
            errorCheck = true;
        }

        var error = that.validateDimensionsAndInputParameters();
        if (error.error) {
            if (error.errorType === "mandatoryFieldEmpty") {
                data.errorMsg.push({
                    text : that.oResourceBundle.getText("ERROR_ENTER_ALL_INPUT_PARAMETERS"),
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_ALL_INPUT_PARAMETERS")
                });
                that.errorState = true;			
                errorCheck = true;
            }
            if (error.errorType === "fieldEmpty") {
                data.errorMsg.push({
                    text : that.oResourceBundle.getText("ERROR_ENTER_ALL_DIMENSION_VALUES"),
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_ALL_DIMENSION_VALUES")
                });
                that.errorState = true;			
                errorCheck = true;
            }
            if(error.errorType === "invalidEntry"){
                data.errorMsg.push({
                    text : that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",error.errorDimension.name),
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });                        
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",error.errorDimension.name)
                });
                that.errorState = true;			
                errorCheck = true;
            }
        }
        if(formData.ODATA_URL === ""){
            if(this.VIEW_MODE === "hana"){
                that.byId("odataServiceInput").setValueState("Error");
            }
            else{
                that.byId("odataServiceInputCDS").setValueState("Error");
            }

            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if(!formData.ODATA_ENTITYSET || formData.ODATA_ENTITYSET === ""){
            that.byId("entitySetInput").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET")
            });
            that.errorState = true;			
            errorCheck = true;
        }
        if(!formData.COLUMN_NAME || formData.COLUMN_NAME === ""){
            that.byId("valueMeasureInput").setValueState("Error");
            data.errorMsg.push({
                text : that.oResourceBundle.getText("ERROR_ENTER_MEASURE"),
                icon : "sap-icon://error",
                state : sap.ui.core.ValueState.Error
            });
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_MEASURE")
            });
            that.errorState = true;			
            errorCheck = true;
        }

        if(this.inputParameterSapClientCheckBox && this.inputParameterSapClientCheckBox.getSelected()){
            if(this.sessionClientFetchError && this.VIEW_MODE != "cds"){
                data.errorMsg.push({
                    text : that.oResourceBundle.getText("SESSION_CLIENT_FETCH_FAILED"),
                    icon : "sap-icon://error",
                    state : sap.ui.core.ValueState.Error
                });
                that.errorMessages.push({
                    "type" : "Error",
                    "title" : that.oResourceBundle.getText("SESSION_CLIENT_FETCH_FAILED")
                });
                that.errorState = true;			
                errorCheck = true;
            }
        }

        if(that.getView().byId("additionalMeasures").getTokens().length){
            var additionalMeasures = that.getView().byId("additionalMeasures").getTokens();
            for(var i=0,l=additionalMeasures.length; i<l; i++) {
                if(additionalMeasures[i].getText() == formData.COLUMN_NAME) {
                    that.byId("additionalMeasures").setValueState("Error");
                    data.errorMsg.push({
                        text : that.oResourceBundle.getText("ADDI_MEASURE_HAS_MAIN_MEASURE"),
                        icon : "sap-icon://error",
                        state : sap.ui.core.ValueState.Error
                    });
                    that.errorMessages.push({
                        "type":"Error",
                        "title":that.oResourceBundle.getText("ADDI_MEASURE_HAS_MAIN_MEASURE")
                    });
                    that.errorState = true;			
                    errorCheck = true;
                }
            }
        }
        var oTable = new sap.m.Table({
            columns : [new sap.m.Column({
                header : new sap.m.Text({
                    text : that.oResourceBundle.getText("ERRORHEADER")
                })
            })]
        });
        var oTemplate = new sap.m.ColumnListItem({
            cells : [
                     new sap.ui.layout.Grid({        
                         vSpacing:0,
                         hSpacing:1,
                         content:[
                                  new sap.m.ObjectStatus({
                                      icon:"{icon}",
                                      state:"{state}",
                                      layoutData: new sap.ui.layout.GridData({span: "L2 M2 S2"})
                                  }),
                                  new sap.m.Text({
                                      maxLines:3, 
                                      text : "{text}",
                                      layoutData: new sap.ui.layout.GridData({span: "L10 M10 S10"})
                                  })
                                  ]
                     })]
        });
        this.setFooterOnError();
        var oModel = new sap.ui.model.json.JSONModel();
        oModel.setData(data);
        oTable.setModel(oModel);
        oTable.bindAggregation("items", "/errorMsg", oTemplate);
        if(errorCheck){
            var oDialog = new sap.m.Dialog({
                icon:"sap-icon://error",
                content: [oTable],
                contentWidth : "25%",
                title: that.oResourceBundle.getText("ERRORCOUNT",data.errorMsg.length),
                state: "Error",
                buttons : [new sap.m.Button({
                    text : that.oResourceBundle.getText("OK"),
                    press : function(){
                        oDialog.close();
                    }
                })]
            });
            oDialog.open();
            return;
        }

        if(!formData.TARGET  || formData.TARGET == ""){
            var backDialog = new sap.m.Dialog({
                icon:"sap-icon://warning2",
                title:that.oResourceBundle.getText("WARNING"),
                state:"Warning",
                type:"Message",
                content:[new sap.m.Text({text:that.oResourceBundle.getText("ERROR_TARGET_NOT_ENTERED")})],
                beginButton: new sap.m.Button({
                    text:that.oResourceBundle.getText("CONTINUE"),
                    press: function(){
                        backDialog.close();
                        that.saveAndExit(param);
                    }
                }),
                endButton: new sap.m.Button({
                    text:that.oResourceBundle.getText("CANCEL"),
                    press:function(){
                        backDialog.close();
                    }
                })                                                
            });
            backDialog.open();
        }
        else{
            that.saveAndExit(param);
        }
    },
    activateAndAddTiles:function(){
        var that = this;
        that.checkForActivation("activate");
    },
    cancel : function() {
        this.navigateBack();
    },

    deleteDraft:function(){
        var that = this;
        var obj = {};
        obj.ID = that.getView().getModel().getData().ID;
        obj.IS_ACTIVE = that.getView().getModel().getData().IS_ACTIVE;

        var url = "EVALUATION";

        that.metadataRef.remove(url,obj,function(data){
            sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_DELETING_DRAFT"));
            window.location.hash = "FioriApplication-SBWorkspace?sap-system=" + sap.suite.ui.smartbusiness.lib.Util.utils.getHanaSystem() + "&/detail/INDICATORS_MODELER(ID='"+that.getView().getModel().getData().INDICATOR+"',IS_ACTIVE=1)";
        },function(error){
            sap.suite.ui.smartbusiness.lib.Utlib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_DELETING_DRAFT"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_DELETING_DRAFT")
            });
            that.errorState = true;
        });

    },
    validateEvalId : function() {
        var that = this;
        var evalIdField = this.getView().byId('evalId');

        var is_active = 0;
        var evalId = evalIdField.getValue();
        if(this.VIEW_MODE == this.CDS){
            evalIdField.setValue(evalId.toUpperCase());
        }

        if (evalId) {
            /* reserved for test data */
            if(evalId.lastIndexOf(this.RESERVED_EVAL_ID_NAMESPACE, 0) === 0) {
                evalIdField.setValueState("Error");
                return false;
            }
            /* CDS evalIds must begin with PERIOD */
            else if(this.VIEW_MODE == this.CDS && evalId[0] != '.') {
                this.evalIdEval_reason = "NOT_START_WITH_PERIOD";
                evalIdField.setValueState("Error");
                return false;
            }
            /* only CDS evalIds must begin with PERIOD */
            else if(this.VIEW_MODE == this.HANA && evalId[0] == '.') {
                this.evalIdEval_reason = "_START_WITH_PERIOD";
                evalIdField.setValueState("Error");
                return false;
            }
            else if (!(/^[a-zA-Z0-9.]*$/.test(evalId)) || evalId.length > this.valid_maxlength[this.VIEW_MODE].id) {
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID"));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_ID")
                });
                that.errorState = true;
                evalIdField.setValueState("Error");
                return true;
            } else {
                evalIdField.setValueState("None");

                var evaluationCheckCallBack = function(data) {
                    if(data.length > 0){
                        if (data[0].ID) {
                            evalIdField.setValueState("Error");
                            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_EVAL_WITH_ID_EXISTS",evalId));
                            that.errorMessages.push({
                                "type":"Error",
                                "title":that.oResourceBundle.getText("ERROR_EVAL_WITH_ID_EXISTS",evalId)
                            });
                            that.errorState = true;
                            return true;
                        } else {
                            evalIdField.setValueState("None");
                        }
                    }
                    else{
                        evalIdField.setValueState("None");
                    }
                };

                var evaluationCheckErrCallBack = function() {
                    evalIdField.setValueState("None");
                };
                this.metadataRef.getDataByEntity({entity:"EVALUATIONS", filter:"ID eq '" + evalId + "'", async:false, success:evaluationCheckCallBack, error:evaluationCheckErrCallBack, model:this.oDataModel});
            }
        }
        return false;
    },

    validateEvalTitle: function() {
        var evalTitleField = this.getView().byId('evalTitle');
        var evalTitle = evalTitleField.getValue();
        if(!evalTitle) {
            evalTitleField.setValueState("Error");
            return false;
        }

        if (evalTitle.length > this.valid_maxlength[this.VIEW_MODE].title) {
            evalTitleField.setValueState("Error");
            return false
        } else {
            evalTitleField.setValueState("None");
            return true;
        }
    },

    validateEmailAddress : function() {
        var that = this;
        var evalOwnerEmailField = this.getView().byId('evalOwnerEmail');
        var evalOwnerEmailValue = evalOwnerEmailField.getValue();
        if (evalOwnerEmailValue) {
            if (!(/^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]/.test(evalOwnerEmailValue))) {
                evalOwnerEmailField.setValueState("Error");
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL"));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_VALID_EVAL_E_MAIL")
                });
                that.errorState = true;
            } else {
                evalOwnerEmailField.setValueState("None");
            }
        } else {
            evalOwnerEmailField.setValueState("None");
        }
    },

    /// Adapter Implementation Fail ---->>> SelectDialog does not liveChange for json model
    listAllKpis : function() {
        var that = this;
        var hanaViewValueHelpDialog = new sap.m.SelectDialog({
            title : that.oResourceBundle.getText("SELECT_KPI"),
            noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
            items : {
                path : "/INDICATORS_MODELER",
                template : new sap.m.ObjectListItem({
                    title : "{TITLE}",
                    number : "{EVALUATION_COUNT}",
                    firstStatus : new sap.m.ObjectStatus({
                        text : "Evaluations",
                    }),
                    attributes : [new sap.m.ObjectAttribute({
                        text : "{ID}",
                        visible : "{SB_APP_SETTING>/ID_VISIBLE}"
                    })]

                })
            },
            confirm : function(oEvent) {
                that.busyDialog.open(); 
                that.indicatorContext = "INDICATORS_MODELER(ID='"+oEvent.getParameter("selectedItem").getBindingContext().getProperty("ID")+"',IS_ACTIVE=1)"
                that.getKpiDetails();

            },
            liveChange : function(oEvent) {
                var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
                var oFilterById = new sap.ui.model.Filter("tolower(ID)", sap.ui.model.FilterOperator.Contains,
                        searchValue);
                var oFilterByTitle = new sap.ui.model.Filter("tolower(TITLE)", sap.ui.model.FilterOperator.Contains,
                        searchValue);
                var oFilterISActive = new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ,1);
                var oBinding = oEvent.getSource().getBinding("items");
                var firstFilters = new sap.ui.model.Filter([oFilterById,oFilterByTitle], false);
                var secondFilters = new sap.ui.model.Filter([oFilterISActive], true);
                oBinding.filter(new sap.ui.model.Filter([firstFilters, secondFilters], true));
            }
        });
        hanaViewValueHelpDialog.setModel(that.oDataModel);
        var filters = [];
        filters.push(new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1));
        hanaViewValueHelpDialog.getBinding("items").filter(new sap.ui.model.Filter(filters,true));
        hanaViewValueHelpDialog.open();
    },

    /// Adapter Implementation Fail ---->>> SelectDialog does not liveChange for json model
    handleHanaViewValueHelp : function() {
        var that = this;
        var hanaViewValueHelpDialog = new sap.m.SelectDialog({
            title : that.oResourceBundle.getText("SELECT_VIEW"),
            noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
            items : {
                path : "/HANA_VIEWS",
                template : new sap.m.StandardListItem({
                    title : {
                        parts : [{
                            path : "OBJECT",
                            type : new sap.ui.model.type.String()
                        }, {
                            path : "PACKAGE",
                            type : new sap.ui.model.type.String()
                        }, {
                            path : "SUFFIX",
                            type : new sap.ui.model.type.String()
                        }],
                        formatter : function(o, p, s) {
                            if (s.indexOf("view") != -1)
                                return p + "/" + o;
                            else
                                return p + "::" + o;
                        }
                    },
                    description : "{SUFFIX}"
                })
            },
            confirm : function(oEvent) {
                that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
                that.getView().getModel().setProperty("/ODATA_URL","");
                that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
                that.getView().getModel().setProperty("/COLUMN_NAME","");
                var viewFieldId = that.VIEW_MODE == that.CDS ? "viewInputCDS" : "viewInput";
                that.getView().byId(viewFieldId).setValueState("None");
                var odataFieldId = that.VIEW_MODE == that.CDS ? "odataServiceInputCDS" : "odataServiceInput";
                that.getView().byId(odataFieldId).setValueState("None");
                that.getView().byId("entitySetInput").setValueState("None");
                that.getView().byId("valueMeasureInput").setValueState("None");

                that.currentSelectedHanaViewObject = oEvent.getParameter("selectedItem").getBindingContext().getObject();
                that.byId('viewInput').fireChange();
            },
            liveChange : function(oEvent) {
                var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
                var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
                        searchValue);
                var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
                        searchValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
            }

        });
        hanaViewValueHelpDialog.setModel(this.oDataModel);
        hanaViewValueHelpDialog.open();
    },
    /* pick @CDS view*/
    handleCDSViewValueHelp : function() {
        var that = this;
        var hanaViewValueHelpDialog = new sap.m.SelectDialog({
            title : that.oResourceBundle.getText("SELECT_VIEW"),
            noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
            items : {
                path : "/",
                template : new sap.m.StandardListItem({
                    title : {
                        parts : [{
                            path : "PackName",
                            type : new sap.ui.model.type.String()
                        }, {
                            path : "CdsName",
                            type : new sap.ui.model.type.String()
                        }],
                        formatter : function(p, c) {
                            return p + "::" + c;
                        }
                    }
                })
            },
            confirm : function(oEvent) {
                that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
                that.getView().getModel().setProperty("/VIEW_NAME_CdsName", oEvent.getParameter("selectedItem").getBindingContext().getProperty("CdsName"));
                that.getView().getModel().setProperty("/VIEW_NAME_PackName", oEvent.getParameter("selectedItem").getBindingContext().getProperty("PackName"));
                that.getView().getModel().setProperty("/ODATA_URL","");
                that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
                that.getView().getModel().setProperty("/COLUMN_NAME","");
                var viewFieldId = that.VIEW_MODE == that.CDS ? "viewInputCDS" : "viewInput";
                that.getView().byId(viewFieldId).setValueState("None");
                var odataFieldId = that.VIEW_MODE == that.CDS ? "odataServiceInputCDS" : "odataServiceInput";
                that.getView().byId(odataFieldId).setValueState("None");
                that.getView().byId("entitySetInput").setValueState("None");
                that.getView().byId("valueMeasureInput").setValueState("None");

                that.resetAdditionalMeasures();
                that.currentSelectedHanaViewObject = oEvent.getParameter("selectedItem").getBindingContext().getObject();
            },
            liveChange : function(oEvent) {
                var i, s, s1, s2, both;
                /* can expect syntax <PackName>::<CdsName> */
                s = s1 = s2 = oEvent.getParameter("value").toUpperCase();
                both = false;
                if((i = s.lastIndexOf("::")) !== -1) {
                    s1 = s.substring(0, i);
                    s2 = s.substring(i + 2, s.length);
                    both = true;
                }
                var oFilterPackage = new sap.ui.model.Filter("PackName", sap.ui.model.FilterOperator.Contains,s1);
                var oFilterObject = new sap.ui.model.Filter("CdsName", sap.ui.model.FilterOperator.Contains,s2);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], both));
            }
        });
        this.oDataModelCDS.read("/CDSViewSet", null, null, false, function(data) {
            var data = data.results;
            var cdsViewListModel = new sap.ui.model.json.JSONModel();
            cdsViewListModel.setData(data);
            hanaViewValueHelpDialog.setModel(cdsViewListModel);
        });
        hanaViewValueHelpDialog.open();
    },	
    hanaViewChange : function(value){
        var that = this;
        that.getView().getModel().setProperty("/ODATA_URL","");
        that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
        that.getView().getModel().setProperty("/COLUMN_NAME","");
        var viewFieldId = this.VIEW_MODE == this.CDS ? "viewInputCDS" : "viewInput";
        if(!(value.getSource().getValue() === "")){
            that.getView().byId(viewFieldId).setValueState("None");
        }
        var odataFieldId = this.VIEW_MODE == this.CDS ? "odataServiceInputCDS" : "odataServiceInput";
        that.getView().byId(odataFieldId).setValueState("None");
        that.getView().byId("entitySetInput").setValueState("None");
        that.getView().byId("valueMeasureInput").setValueState("None");
        that.resetAdditionalMeasures();
        that.resetDimensionsAndInputParameters();
    },


    /// Adapter Implementation Fail ---->>> SelectDialog does not liveChange for json model
    handleOdataServiceValueHelp:function(){
        var that = this;
        if(!that.byId("viewInput").getValue()){
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_A_HANA_VIEW"));
            that.getView().byId("viewInput").setValueState("Error");
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_A_HANA_VIEW")
            });
            that.errorState = true;
        }
        else{
            var selectedHanaView = that.getView().getModel().getProperty("/VIEW_NAME");
            selectedHanaView = (selectedHanaView.indexOf("/") != -1 ? selectedHanaView.split("/") : selectedHanaView
                    .split("::"));
            var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
                title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
                noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
                items : {
                    path : "/ODATA_FOR_ENTITY(P_PACKAGE='" + selectedHanaView[0] + "',P_OBJECT='" + selectedHanaView[1] + "')/Results",
                    template : new sap.m.StandardListItem({
                        title : {
                            parts : [{
                                path : "PACKAGE",
                                type : new sap.ui.model.type.String()
                            }, {
                                path : "OBJECT",
                                type : new sap.ui.model.type.String()
                            }],
                            formatter : function(o, p, s) {
                                o = o.replace(/\./g, '/');
                                return "/" + o + "/" + p + ".xsodata";
                            }
                        },
                    })
                },
                confirm : function(oEvent) {
                    that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
                    that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
                    that.getView().getModel().setProperty("/COLUMN_NAME","");
                    var odataFieldId = that.VIEW_MODE == that.CDS ? "odataServiceInputCDS" : "odataServiceInput";
                    that.getView().byId(odataFieldId).setValueState("None");
                    that.getView().byId("entitySetInput").setValueState("None");
                    that.getView().byId("valueMeasureInput").setValueState("None");

                    that.resetAdditionalMeasures();
                    that.currentSelectedODataUrlObject = oEvent.getParameter("selectedItem").getBindingContext().getObject();
                },
                liveChange : function(oEvent) {
                    var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
                    var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
                }

            });
            hanaOdataServiceHelpDialog.setModel(that.oDataModel);
            hanaOdataServiceHelpDialog.open();
        }

    },

    /* pick @CDS odata */
    handleOdataServiceValueHelpCDS:function(){
        var that = this;
        if(!that.byId("viewInputCDS").getValue()){
            var readUri = "/PackOdataSet";
            var expandParam = null;
        }
        else{
            var selectedCDSView_CdsName = encodeURIComponent(that.getView().getModel().getProperty("/VIEW_NAME_CdsName"));
            var selectedCDSView_PackName = encodeURIComponent(that.getView().getModel().getProperty("/VIEW_NAME_PackName"));
            var readUri = "/CDSViewSet(CdsName='" + selectedCDSView_CdsName + "')/?$expand=ODATAnameSet";
            var expandParam = "ODATAnameSet";
        }
        var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
            title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
            noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
            items : {
                path : "/",
                template : new sap.m.StandardListItem({
                    title : {
                        parts : [{
                            path : "OdataURL",
                            type : new sap.ui.model.type.String()
                        }],
                        formatter : function(o) {
                            /* strip the hostname and querystring */
                            return (function(h) {return jQuery("<a>").attr("href",h)[0]["pathname"]})(o);
                        }
                    },
                })
            },
            confirm : function(oEvent) {
                that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
                var odataFieldId = that.VIEW_MODE == that.CDS ? "odataServiceInputCDS" : "odataServiceInput";
                that.getView().byId(odataFieldId).setValueState("None");
                that.getView().byId("entitySetInput").setValueState("None");
                that.getView().byId("valueMeasureInput").setValueState("None");

            },
            liveChange : function(oEvent) {
                var searchValue = oEvent.getParameter("value");
                var oFilterPackage = new sap.ui.model.Filter("OdataURL", sap.ui.model.FilterOperator.Contains,searchValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
            }
        });

        this.oDataModelCDS.read(readUri, null, null, false, function(data) {
            var data = expandParam ? data[expandParam].results : data.results;
            var cdsViewListModel = new sap.ui.model.json.JSONModel();
            cdsViewListModel.setData(data);
            hanaOdataServiceHelpDialog.setModel(cdsViewListModel);
        });
        hanaOdataServiceHelpDialog.open();
    },

    oDataUrlChange : function(value){
        var that = this;
        that.getView().getModel().setProperty("/ODATA_ENTITYSET","");
        that.getView().getModel().setProperty("/COLUMN_NAME","");
        var odataFieldId = this.VIEW_MODE == this.CDS ? "odataServiceInputCDS" : "odataServiceInput";
        if(!(value.getSource().getValue() === "")){
            that.getView().byId(odataFieldId).setValueState("None");
        }
        that.getView().byId("entitySetInput").setValueState("None");
        that.getView().byId("valueMeasureInput").setValueState("None");
        that.resetAdditionalMeasures();
        that.resetDimensionsAndInputParameters();
    },

    handleEntitySetValueHelp : function(){
        var that = this;
        var odataFieldId = this.VIEW_MODE == this.CDS ? "odataServiceInputCDS" : "odataServiceInput";
        if(!that.byId(odataFieldId).getValue()){
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ODATA_URL")
            });
            that.errorState = true;
        }
        else{
            var that = this;
            that.oModelForEntity;
            var hanaEntitySetHelpDialog = new sap.m.SelectDialog({
                title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
                noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
                items : {
                    path : "/entitySet",
                    template : new sap.m.StandardListItem({
                        title : {
                            parts : [{
                                path : "entityName",
                                type : new sap.ui.model.type.String()
                            }],
                            formatter : function(o,s) {
                                return o;
                            }
                        },
                    })
                },
                confirm : function(oEvent) {
                    that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
                    that.resetDimensionsAndInputParameters();
                    that.getView().byId("entitySetInput").setValueState("None");					
                    that.resetAdditionalMeasures();
                    try {
                        that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                    }
                    catch(e) {
                        sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
                            "description" : that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS")
                        });
                        that.errorState = true;
                        that.resetDimensionsAndInputParameters();
                    }

                },
                liveChange : function(oEvent) {
                    var searchValue = oEvent.getParameter("value");
                    var oFilterPackage = new sap.ui.model.Filter("entityName", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
                }

            });

            var CDSEntitySetHelpDialog = new sap.m.SelectDialog({
                title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
                noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
                items : {
                    path : "/",
                    template : new sap.m.StandardListItem({
                        title : {
                            parts : [{
                                path : "EntityName",
                                type : new sap.ui.model.type.String()
                            }],
                            formatter : function(o,s) {
                                return o;
                            }
                        },
                    })
                },
                confirm : function(oEvent) {
                    that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
                    that.resetDimensionsAndInputParameters();
                    that.resetAdditionalMeasures();
                    try {
                        that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                    }
                    catch(e) {
                        sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
                            "description" : that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS")
                        });
                        that.errorState = true;
                        that.resetDimensionsAndInputParameters();
                    }

                },
                liveChange : function(oEvent) {
                    var searchValue = oEvent.getParameter("value");
                    var oFilterPackage = new sap.ui.model.Filter("entityName", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
                }

            });

            try {
                if(that.getView().getModel().getData().VIEW_NAME)  {
                    if(this.VIEW_MODE != this.CDS) {
                        that.populateRelevantEntitySet(hanaEntitySetHelpDialog);
                    } else {
                        that.populateRelevantEntitySet_CDS(CDSEntitySetHelpDialog);
                    }
                }
                else {
                    that.oModelForEntity = that.populateEntitySet(that.getView().byId(odataFieldId).getValue());
                    hanaEntitySetHelpDialog.setModel(that.oModelForEntity);
                    hanaEntitySetHelpDialog.open();
                }
            } catch (err) {

            } 
        }
    },
    entitySetChange : function(value){
        var that = this;
        that.resetAdditionalMeasures();
        if(that.getView().getModel().getProperty("/ODATA_URL") && that.getView().getModel().getProperty("/ODATA_ENTITYSET")) {

            try {
                that.populateDimensionsAndInputParameters(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                that.getView().byId("entitySetInput").setValueState("None");
            }
            catch(e) {
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"), that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS"));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"),
                    "description" : that.oResourceBundle.getText("ERROR_ODATA_ANALYTICS")
                });
                that.errorState = true;
                that.resetDimensionsAndInputParameters();
            }
        }
        else {
            that.resetDimensionsAndInputParameters();
            that.getView().byId("entitySetInput").setValueState("None");
            that.getView().getModel().setProperty("/COLUMN_NAME","");
        }

    },
    handleMeasureValueHelp : function(){
        var that = this;
        var that = this;
        if(!that.byId("entitySetInput").getValue()){
            that.byId("entitySetInput").setValueState("Error");
            that.byId("valueMeasureInput").setValueState("None");
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET")
            });
            that.errorState = true;
        }

        else{
            try {
                that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                that.mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                var measureObj = that.mProperties.getLabelMappingObject();
                var measureArray = that.oModelForMeasure.getData().measures;
                for(var i=0,l=measureArray.length; i<l; i++) {
                    measureArray[i].measureLabel = measureObj[measureArray[i].measureName];
                }
                that.oModelForMeasure.setData({measures:measureArray});
            } catch (err) {

            }
            var hanaMeasureHelpDialog = new sap.m.SelectDialog({
                title : that.oResourceBundle.getText("SELECT_MEASURE"),
                noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
                items : {
                    path : "/measures",
                    template : new sap.m.StandardListItem({
                        title : {
                            parts : [{
                                path : "measureLabel",
                                type : new sap.ui.model.type.String()
                            }],
                            formatter : function(o,s) {
                                return o;
                            }
                        }
                    ,
                    description : {
                        parts : [{
                            path : "measureName",
                            type : new sap.ui.model.type.String()
                        }],
                        formatter : function(o,s) {
                            return o;
                        }
                    }
                    })
                },
                confirm : function(oEvent) {
                    that.getView().getModel().setProperty("/COLUMN_NAME", oEvent.getParameter("selectedItem").getBindingContext().getProperty("measureName"));
                    that.getView().byId("valueMeasureInput").setValueState("None");
                },
                liveChange : function(oEvent) {
                    var searchValue = oEvent.getParameter("value");
                    var oFilter = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oFilter1 = new sap.ui.model.Filter("measureLabel", sap.ui.model.FilterOperator.Contains,
                            searchValue);
                    var oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter(new sap.ui.model.Filter([oFilter,oFilter1], false));
                }

            });
            hanaMeasureHelpDialog.setModel(that.oModelForMeasure);
            hanaMeasureHelpDialog.open();

        }
    },

    measureChange : function(value){
        var that = this;
        if(!that.byId("entitySetInput").getValue()){
            that.byId("entitySetInput").setValueState("Error");
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET")
            });
            that.errorState = true;
        }
        else{
            try {
                that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that
                        .getView().getModel().getProperty("/ODATA_ENTITYSET"));
                that.getView().byId("valueMeasureInput").setValueState("None");

            } catch (err) {

            }
        }
    },

    validateSemantic : function(oEvent) {
        var that = this;
        if( oEvent.getParameter("value").indexOf(' ') === -1 ){
            this.byId(oEvent.getParameter("id")).setValueState("None");
        }
        else{
            this.byId(oEvent.getParameter("id")).setValueState("Error");
        }


    },

    handleChangeAdditionalInfo : function(oEvent) {
        var that = this;
        that.getView().getModel().setProperty("info", that.getView().byId("additionalInfoId"));

    },
    populateRelevantEntitySet : function(dialog) {
        var that = this;
        var modelData = this.getView().getModel().getData();

        //Adapter Implementation ----
        that.metadataRef.populateRelevantEntitySet(dialog, modelData, that);
    },

    populateRelevantEntitySet_CDS : function(dialog) {
        var selectedCDSView_CdsName = encodeURIComponent(this.getView().getModel().getProperty("/VIEW_NAME_CdsName"));
        var selected_odata_url = encodeURIComponent(this.getView().getModel().getProperty("/ODATA_URL"));
        var expandParam = "EntityTypeSet";
        var uri = "/ODATAnameSet(CdsName='" + 
        selectedCDSView_CdsName
        +
        "\',OdataName='',OdataURL='" +
        selected_odata_url
        +
        "',SrvName='',SrvVersion='',SrvNamespace='')/?$expand=" +
        expandParam;

        this.oDataModelCDS.read(uri, null, null, false, function(data) {
            var data = data[expandParam].results;
            var cdsEntitySetModel = new sap.ui.model.json.JSONModel();
            cdsEntitySetModel.setData(data);
            dialog.setModel(cdsEntitySetModel);
            dialog.open();
        });
    },
    //Odata For Analytics
    populateEntitySet : function(dataSource) {
        var oController = this;
        var oModel = new sap.ui.model.json.JSONModel();
        var resultEntity = [], entityDataArray = [], obj = {};
        var i;
        resultEntity = sap.suite.ui.smartbusiness.lib.Util.odata.getAllEntitySet(dataSource);
        for (i = 0; i < resultEntity.length; i++) {
            obj = {};
            obj.entityName = resultEntity[i];
            entityDataArray.push(obj);
        }
        oModel.setData({
            entitySet : entityDataArray
        });
        return oModel;
    },

    validateQueryServiceURI : function(dataSource) {
        dataSource = jQuery.trim(dataSource);
        if (!jQuery.sap.startsWith(dataSource, "/")) {
            dataSource = "/" + dataSource;
        }
        if (jQuery.sap.endsWith(dataSource, "/")) {
            dataSource = dataSource.substring(0, dataSource.length - 1);
        }
        return dataSource;
    },

    populateMeasure : function(dataSource, entitySet) {
        dataSource = this.validateQueryServiceURI(dataSource) + "";
        entitySet = entitySet + "";
        var measures = [], measureDataArray = [], obj = {};
        var i;

        measures = sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(dataSource, entitySet);

        for (i = 0; i < measures.length; i++) {
            obj = {};
            obj.measureName = measures[i];
            measureDataArray.push(obj);
        }
        var oModel = new sap.ui.model.json.JSONModel();
        oModel.setData({
            measures : measureDataArray
        });
        return oModel;
    },

    additionalInformationForKpi : function(evt) {
        var that = this;
        that.dialogAdditionalInfo = new sap.m.Dialog({
            type : "Message",
            title : that.oResourceBundle.getText("ADDITIONAL_INFO_FROM_KPI"),
            content : [new sap.m.Label({text:{path:'/DATA_SPECIFICATION', formatter:function(value){
                if(that.getView().getModel().getData().DATA_SPECIFICATION){
                    return that.getView().getModel().getData().DATA_SPECIFICATION;
                }
                else{
                    return that.oResourceBundle.getText("ERROR_NO_DATA_TO_DISPLAY");
                }
            }}})],//.setText(oController.getView().getModel().getData().DATA_SPECIFICATION)],
            beginButton : new sap.m.Button({
                text : that.oResourceBundle.getText("CLOSE"),
                press : function(oEvent) {
                    oEvent.getSource().getParent().close();
                }
            })
        });
        that.dialogAdditionalInfo.setModel(that.getView().getModel());
        that.dialogAdditionalInfo.open();
    },


    openDecimalInfo: function(oEvent){
        var that=this;
        var oCustomHeader = new sap.m.Bar({
            width:"100%",
            contentMiddle:
                [new sap.m.Label({
                    text:that.oResourceBundle.getText("DECIMAL_PRECISION")
                })],
                contentRight :
                    [new sap.m.Button({
                        icon:"sap-icon://decline",
                        press : function() {
                            infoPopOver.close();
                        }
                    })]
        });

        var infoPopOver = new sap.m.ResponsivePopover({

            showHeader:true,
            customHeader:oCustomHeader,
            contentWidth: "15%",
            contentHeight : "20%",
            verticalScrolling : true,
            horizontalScrolling : false,
            placement: sap.m.PlacementType.Right,
            content:[
                     new sap.m.Text({
                         width:"100%",
                         textAlign: "Left",
                         text:that.oResourceBundle.getText("INFO_TEXT_DECIMAL_PRECISION")

                     }).addStyleClass("evaluationThresholdInfoHeader")
                     ]
        });
        infoPopOver.openBy(oEvent.getSource());

    },


    addNewProperty : function() {
        var that = this;
        if (this.getView().byId("propertyName").getValue()) {
            this.getView().byId("propertyName").setValueState("None");
            if (this.getView().byId("propertyValue").getValue()) {
                this.getView().byId("propertyValue").setValueState("None");
                var propertyModel = this.getView().byId('propertyNameValueBox').getModel();
                propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];
                for(var i=0; i<propertyModel.getData().PROPERTIES.length;i++){
                    if((propertyModel.getData().PROPERTIES[i].NAME === this.getView().byId("propertyName").getValue()) && (propertyModel.getData().PROPERTIES[i].VALUE === this.getView().byId("propertyValue").getValue())){
                        sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(this.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS"));
                        that.errorMessages.push({
                            "type":"Error",
                            "title":that.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS")
                        });
                        that.errorState = true;
                    }
                }

                propertyModel.getData().PROPERTIES.push({
                    NAME : this.getView().byId("propertyName").getValue(),
                    VALUE : this.getView().byId("propertyValue").getValue()
                });
                propertyModel.updateBindings();
                this.getView().byId("propertyName").setValue("");
                this.getView().byId("propertyValue").setValue("");
            } else {
                that.isPropertyAdded = false;
                this.getView().byId("propertyValue").setValueState("Error");
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_VALUE"));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_VALUE")
                });
                that.errorState = true;
            }
        } else {
            that.isPropertyAdded = false;
            this.getView().byId("propertyName").setValueState("Error");
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_NAME"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_PROPERTY_NAME")
            });
            that.errorState = true;
        }
    },

    removeProperty : function(evt) {
        var path = evt.getSource().getBindingContext().getPath();
        evt.getSource().getBindingContext().getModel().getData().PROPERTIES.splice(path.substring(path
                .lastIndexOf("/") + 1), 1);
        evt.getSource().getBindingContext().getModel().updateBindings();
    },

    _appendSystemAlias : function(uri, sysAlias) {
        if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
            var urlParsingService = sap.ushell.Container.getService("URLParsing");
            if(urlParsingService) {
                uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
            }
        }
        return uri;
    },

    populateDimensionsAndInputParameters : function(dataSource, entitySet) {
        var that = this;
        dataSource = this._appendSystemAlias(dataSource);
        var dimensions = [];
        var inputParameters = [];
        var mandatoryFilters = [];
        var mandatoryFilterNames = [];
        this.oData4SAPAnalyticsModel = new sap.ui.model.analytics.odata4analytics.Model(new sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI(dataSource), null);
        this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(entitySet);
        this.queryResultFilters = sap.suite.ui.smartbusiness.lib.OData.filter(dataSource,entitySet);
        var queryResultObjDimensions = this.queryResultFilters.getAsObject();

        for (key in queryResultObjDimensions) {
            var name = queryResultObjDimensions[key].getName();
            var propertyType = queryResultObjDimensions[key].getKeyProperty().type;
            var extensions = queryResultObjDimensions[key].getKeyProperty().extensions;
            var requiredProperty = false;
            var filterRestriction = null;
            var mandatoryFiltersPresent = this.queryResultFilters.getMandatoryList().length;
            for(var i=0;i<extensions.length;i++){
                if(extensions[i].name == "required-in-filter" && extensions[i].value == "true"){
                    requiredProperty = true;
                }
                if(extensions[i].name == "filter-restriction"){
                    filterRestriction = extensions[i].value;
                }
            }
            var newObj = {
                    name : name,
                    propertyType : propertyType,
                    required : requiredProperty,
                    filterRestriction : filterRestriction
            };
            dimensions.push(newObj);
        }
        var data = this.oModelForDimensions.getData();
        data.dimensions = dimensions;
        data.dimensions.sort();
        data.dataSource = dataSource;
        data.entitySet = entitySet;

        if(data.selectedDimensions){
            for(var key in data.selectedDimensions){
                data.selectedDimensions[key].propertyType = this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name)?this.queryResultObj.findDimensionByName(data.selectedDimensions[key].name).getKeyProperty().type:"";  
                if(data.selectedDimensions[key].propertyType == "Edm.DateTime"){    
                    var valueArray = data.selectedDimensions[key].value_1.split(",");
                    for( i in valueArray){      
                        if( valueArray[i] != ""){
                            var dateObj = new Date(valueArray[i]);
                            var month = dateObj.getMonth()+1;
                            month = /^\d$/.test(month) ? "0"+ month : month;
                            var date = dateObj.getDate();
                            date = /^\d$/.test(date) ? "0"+ date : date;
                            var hours = dateObj.getHours();
                            hours = /^\d$/.test(hours) ? "0"+ hours : hours;
                            var minutes = dateObj.getMinutes();
                            minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
                            var seconds = dateObj.getSeconds();
                            seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
                            valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
                        }
                    }
                    data.selectedDimensions[key].value_1 = valueArray.join(",");
                    valueArray = null;
                    valueArray = data.selectedDimensions[key].value_2.split(",");
                    for(var i in valueArray){
                        if(valueArray[i] != ""){
                            var dateObj = new Date(data.selectedDimensions[key].value_2);
                            var month = dateObj.getMonth()+1;
                            month = /^\d$/.test(month) ? "0"+ month : month;
                            var date = dateObj.getDate();
                            date = /^\d$/.test(date) ? "0"+ date : date;
                            var hours = dateObj.getHours();
                            hours = /^\d$/.test(hours) ? "0"+ hours : hours;
                            var minutes = dateObj.getMinutes();
                            minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
                            var seconds = dateObj.getSeconds();
                            seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
                            valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
                        }
                    }
                    data.selectedDimensions[key].value_2 = valueArray.join(",");
                    this.dimensionValue[data.selectedDimensions[key].name] = this.dimensionValue[data.selectedDimensions[key].name] ? this.dimensionValue[data.selectedDimensions[key].name] : {};
                    this.dimensionValue[data.selectedDimensions[key].name]["value_1"] = data.selectedDimensions[key].value_1;
                    this.dimensionValue[data.selectedDimensions[key].name]["value_2"] = data.selectedDimensions[key].value_2;                                      
                }
            }
        }
        else{
            if(mandatoryFiltersPresent){
                data.selectedDimensions = [];
                for(var i=0;i<data.dimensions.length;i++){
                    if(data.dimensions[i].required==true){
                        var dimensionObject = this._cloneObj(data.dimensions[i]);
                        dimensionObject.value_1 = "";
                        dimensionObject.value_2 = "";
                        if(data.dimensions[i].filterRestriction == "interval") {
                            dimensionObject.operator = "BT";
                        }
                        else if(data.dimensions[i].filterRestriction == "single-value") {
                            dimensionObject.operator = "EQ";
                        }
                        else {
                            dimensionObject.operator = "EQ";
                        }
                        data.selectedDimensions.push(dimensionObject);
                    }
                }
            }
        }

        if(mandatoryFiltersPresent){
            this.byId("mandatoryFiltersDataGrid").setVisible(true);
            if(that.VIEW_MODE != "cds"){
                var sapClientMandFilters;
                for(key in data.selectedDimensions){
                    if((that.sessionClientXsjsMissing !== true) && (data.selectedDimensions[key].name === "P_SAPClient" || data.selectedDimensions[key].name === "V_SAPClient" || data.selectedDimensions[key].name === "SAPClient") && data.selectedDimensions[key].required){
                        sapClientMandFilters = data.selectedDimensions.splice(key,1);
                        if(this.getView().getModel().getData().mode === "create" && (!this.evalDetails || this.evalDetails.IS_ACTIVE === 0)){
                            sapClientMandFilters[0].value_1 = "$$$";
                            that.hasSapClient = true;
                        }
                        data.selectedDimensions.push(sapClientMandFilters[0]);
                        break;
                    }
                }
            }
        }
        else{
            this.byId("mandatoryFiltersDataGrid").setVisible(false);
        }
        this.oModelForDimensions.setData(data);

        //inputParameters
        var inputParametersObj = this.queryResultObj.getParameterization();
        if (inputParametersObj)
        {                              
            if(this.oModelForInputParameters.getData().inputParameters)
            {   
                var inputParameters = this.oModelForInputParameters.getData().inputParameters;
                for(var key in inputParameters)
                {
                    inputParameters[key].propertyType = inputParametersObj.findParameterByName(inputParameters[key].name).getProperty().type;
                    if(inputParameters[key].propertyType == "Edm.DateTime")
                    {
                        var valueArray = inputParameters[key].value_1.split(",");
                        for( i in valueArray)
                        {        
                            if( valueArray[i] != "")
                            {
                                var dateObj = new Date(valueArray[i]);
                                var month = dateObj.getMonth()+1;
                                month = /^\d$/.test(month) ? "0"+ month : month;
                                var date = dateObj.getDate();
                                date = /^\d$/.test(date) ? "0"+ date : date;
                                var hours = dateObj.getHours();
                                hours = /^\d$/.test(hours) ? "0"+ hours : hours;
                                var minutes = dateObj.getMinutes();
                                minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
                                var seconds = dateObj.getSeconds();
                                seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
                                valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
                            }
                        }
                        inputParameters[key].value_1 = valueArray.join(",");
                        valueArray = null;
                        valueArray = inputParameters[key].value_2.split(",");
                        for(var i in valueArray)
                        {
                            if(valueArray[i] != "")
                            {
                                var dateObj = new Date(data.selectedDimensions[key].value_2);
                                var month = dateObj.getMonth()+1;
                                month = /^\d$/.test(month) ? "0"+ month : month;
                                var date = dateObj.getDate();
                                date = /^\d$/.test(date) ? "0"+ date : date;
                                var hours = dateObj.getHours();
                                hours = /^\d$/.test(hours) ? "0"+ hours : hours;
                                var minutes = dateObj.getMinutes();
                                minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
                                var seconds = dateObj.getSeconds();
                                seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
                                valueArray[i] = dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds();
                            }
                        }
                        inputParameters[key].value_2 = valueArray.join(",");
                    }
                }                                       
            }
            else
            {   
                var inputParametersNames = inputParametersObj.getAllParameters();
                for ( var key in inputParametersNames) {
                    var name = inputParametersNames[key].getName();
                    var propertyType = inputParametersNames[key].getProperty().type;
                    var optional = inputParametersNames[key].isOptional();
                    var newObj = {
                            name : name,
                            propertyType : propertyType,
                            operator : "EQ",
                            value_1 : "",
                            value_2 : ""
                    };
                    inputParameters.push(newObj);
                }
            }
            if (inputParameters.length > 0){
                this.byId("noInputParameterGrid").setVisible(false);
                this.byId("inputParameterDataGrid").setVisible(true);
            }
            else{
                this.byId("noInputParameterGrid").setVisible(true);
                this.byId("inputParameterDataGrid").setVisible(false);
            }
            data = this.oModelForInputParameters.getData();
            data.inputParameters = inputParameters;
            var sapClient;
            if(data.inputParameters.length>0){
                if(that.VIEW_MODE != "cds"){
                    for(key in data.inputParameters){
                        if((that.sessionClientXsjsMissing !== true) && data.inputParameters[key].name === "P_SAPClient" || data.inputParameters[key].name === "V_SAPClient" || data.inputParameters[key].name === "SAPClient"){
                            //that.hasSapClient = true;
                            sapClient = data.inputParameters.splice(key,1);
                            if(this.getView().getModel().getData().mode === "create" && (!this.evalDetails || this.evalDetails.IS_ACTIVE === 0)){
                                sapClient[0].value_1 = "$$$";
                            }
                            data.inputParameters.push(sapClient[0]);

                            break;
                        }
                    }
                }
            }
            this.oModelForInputParameters.setData(data);
        }              
    },

    setInputParameterAndFilterLayout : function() {
        var that = this;
        this.dimensionValueHelpDialogs = {};
        this.dimensionValue = {};

        this.byId("noInputParameterGrid").setVisible(true);
        this.byId("inputParameterDataGrid").setVisible(false);
        this.byId("mandatoryFiltersDataGrid").setVisible(false);

        this.byId("inputParameterBaseLayout").setModel(this.oModelForInputParameters);

        //inputParameter Layout
        this.byId("inputParameterBaseLayout").bindAggregation("items", "/inputParameters", function(sId, oContext) {
            that.inputParameterOperator = new sap.m.Select({
                width : "100%",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                items : [new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("EQUAL_TO"),
                    key : "EQ"
                })],
                selectedKey : "{operator}",
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            that.inputParameterValue = new sap.m.Input({
                value : "{value_1}",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                //showValueHelp : true,
                valueHelpRequest : jQuery.proxy(that.openInputParameterValueHelpDialog,that),
                change : jQuery.proxy(that.handleDimensionValueChange, that),
                valueState : {
                    path : "error_1",
                    formatter : function(error) {
                        if (error)
                            return "Error";
                        else
                            return "None";
                    }
                },
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            if((that.VIEW_MODE != "cds") && (oContext.getProperty().name === "P_SAPClient" || oContext.getProperty().name === "V_SAPClient" || oContext.getProperty().name === "SAPClient") && (that.sessionClientXsjsMissing !== true)){
                that.inputParameterSapClientCheckBox = new sap.m.CheckBox({
                    text : that.oResourceBundle.getText("PICK_FROM_HANA_SESSION_CLIENT"),
                    selected : {
                        path:"value_1",
                        formatter: function(value){
                            if(value === "$$$"){
                                return true;
                            }
                            else{
                                return false;
                            }
                        }
                    },
                    select : function(){
                        var len = this.getModel().getData().inputParameters.length;
                        if(this.getSelected()===true){ //When Checked
                            if(that.sessionClientFetchError){
                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("SESSION_CLIENT_FETCH_FAILED"));
                            }
                            that.inputParameterValue.setVisible(false);
                            this.getModel().getData().inputParameters[len-1].value_1 = "$$$";
                        }
                        else{ //When Unchecked
                            that.inputParameterValue.setVisible(true);
                            if(this.getModel().getData().inputParameters[len-1].value_1 === "$$$"){
                                that.inputParameterValue.setValue("");
                            }
                        }
                    },
                    layoutData : new sap.ui.layout.GridData({
                        span : "L3 M3"
                    })
                });
                that.inputParameterOperator = that.inputParameterSapClientCheckBox;
                if(that.getView().getModel().getData().mode === "create"){
                    that.inputParameterValue.setVisible(false);
                }
            }
            that.inputParameterGrid = new sap.ui.layout.Grid({
                defaultSpan : "L9 M9",
                content : [new sap.m.Input({
                    value : "{name}",
                    width : "100%",
                    textAlign : sap.ui.core.TextAlign.End,
                    editable:false,
                    layoutData : new sap.ui.layout.GridData({
                        span : "L3 M3"
                    })
                }), that.inputParameterOperator, that.inputParameterValue]
            });
            return that.inputParameterGrid;
        });


        this.byId("mandatoryFilterBaseLayout").setModel(this.oModelForDimensions);

        //mandatory Filters Layout
        this.byId("mandatoryFilterBaseLayout").bindAggregation("items", "/selectedDimensions", function(sId, oContext) {
            that.mandatoryFilterOperator = new sap.m.Select({
                width : "100%",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                items : [new sap.ui.core.Item({
                    text : (oContext.getObject().filterRestriction != "interval") ? that.oResourceBundle.getText("EQUAL_TO") : that.oResourceBundle.getText("BETWEEN"),
                            key : (oContext.getObject().filterRestriction != "interval") ? "EQ" : "BT"	
                })],
                selectedKey : "{operator}",
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            that.mandatoryFilterValue = new sap.m.Input({
                value : "{value_1}",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                //showValueHelp : true,
                valueHelpRequest : jQuery.proxy(that.openInputParameterValueHelpDialog,that),
                change : jQuery.proxy(that.handleDimensionValueChange, that),
                valueState : {
                    path : "error_1",
                    formatter : function(error) {
                        if (error)
                            return "Error";
                        else
                            return "None";
                    }
                },
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            that.mandatoryFilterValueTo = new sap.m.Input({
                value : "{value_2}",
                visible : (oContext.getObject().filterRestriction != "interval") ? false : true,
                        customData : [{
                            key : "valueType",
                            value : "value_2"
                        }],
                        //showValueHelp : true,
                        valueHelpRequest : jQuery.proxy(that.openInputParameterValueHelpDialog,that),
                        change : jQuery.proxy(that.handleDimensionValueChange, that),
                        valueState : {
                            path : "error_1",
                            formatter : function(error) {
                                if (error)
                                    return "Error";
                                else
                                    return "None";
                            }
                        },
                        layoutData : new sap.ui.layout.GridData({
                            span : "L3 M3"
                        })
            });
            if((that.VIEW_MODE != "cds") && (oContext.getProperty().name === "P_SAPClient" || oContext.getProperty().name === "V_SAPClient" || oContext.getProperty().name === "SAPClient") && (that.sessionClientXsjsMissing !== true)){
                that.mandatoryFilterSapClientCheckBox = new sap.m.CheckBox({
                    text : that.oResourceBundle.getText("PICK_FROM_HANA_SESSION_CLIENT"),
                    selected : {
                        path:"value_1",
                        formatter: function(value){
                            if(value === "$$$"){
                                return true;
                            }
                            else{
                                return false;
                            }
                        }
                    },
                    select : function(){
                        var len = this.getModel().getData().selectedDimensions.length;
                        if(this.getSelected()===true){ //When Checked
                            that.mandatoryFilterValue.setVisible(false);
                            this.getModel().getData().selectedDimensions[len-1].value_1 = "$$$"; 
                        }
                        else{ //When Unchecked
                            that.mandatoryFilterValue.setVisible(true);
                            if(this.getModel().getData().selectedDimensions[len-1].value_1 === "$$$"){
                                that.mandatoryFilterValue.setValue("");
                            }
                        }
                    },
                    layoutData : new sap.ui.layout.GridData({
                        span : "L3 M3"
                    })
                });
                that.mandatoryFilterOperator = that.mandatoryFilterSapClientCheckBox;
                if(that.getView().getModel().getData().mode === "create"){
                    that.mandatoryFilterValue.setVisible(false);
                }
            }
            that.mandatoryFilterGrid = new sap.ui.layout.Grid({
                defaultSpan : "L9 M9",
                content : [new sap.m.Input({
                    value : "{name}",
                    width : "100%",
                    textAlign : sap.ui.core.TextAlign.End,
                    editable:false,
                    layoutData : new sap.ui.layout.GridData({
                        span : "L3 M3"
                    })
                }), that.mandatoryFilterOperator, that.mandatoryFilterValue, that.mandatoryFilterValueTo]
            });
            return that.mandatoryFilterGrid;
        });

        var aFilterMandatory = new sap.ui.model.Filter("required",sap.ui.model.FilterOperator.EQ,true);
        this.byId("mandatoryFilterBaseLayout").getBinding("items").filter(aFilterMandatory);

        //Dimensions Layout
        this.byId("dimensionLayoutHeaders").setVisible(false);
        this.byId("baseDimensionLayout").setModel(this.oModelForDimensions);
        this.byId("baseDimensionLayout").bindAggregation("items", "/selectedDimensions", function(sId, oContext) {
            var dimensionOperator = new sap.m.Select({
                width : "100%",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                items: that.formatOptionalFiltersOperators(oContext),
                /*items : [new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("EQUAL_TO"),
                    key : "EQ"
                }), new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("GREATER_THAN"),
                    key : "GT"
                }), new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("LESS_THAN"),
                    key : "LT"
                }), new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("NOT_EQUAL_TO"),
                    key : "NE"
                }), new sap.ui.core.Item({
                    text : that.oResourceBundle.getText("BETWEEN"),
                    key : "BT"
                })],*/
                selectedKey : "{operator}",
                change : jQuery.proxy(that.handleOperatorChange, that),
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            var dimensionValue = new sap.m.Input({
                value : "{value_1}",
                customData : [{
                    key : "valueType",
                    value : "value_1"
                }],
                showValueHelp : true,
                valueState : {
                    path : "error_1",
                    formatter : function(error) {
                        if (error)
                            return "Error";
                        else
                            return "None";
                    }
                },
                valueHelpRequest : jQuery.proxy(that.handleDimensionValueHelp, that),
                change : jQuery.proxy(that.handleDimensionValueChange, that),
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            var dimensionValueTo = new sap.m.Input({
                value : "{value_2}",
                customData : [{
                    key : "valueType",
                    value : "value_2"
                }],
                showValueHelp : true,
                visible : {
                    path : "operator",
                    formatter : function(operator) {
                        return (operator === "BT") ? true : false;
                    }
                },
                valueState : {
                    path : "error_2",
                    formatter : function(error) {
                        if (error)
                            return "Error";
                        else
                            return "None";
                    }
                },
                valueHelpRequest : jQuery.proxy(that.handleDimensionValueToHelp, that),
                change : jQuery.proxy(that.handleDimensionValueChange, that),
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            var dimensionValueToLabel = new sap.m.Label({
                text : "To",
                visible : {
                    path : "operator",
                    formatter : function(operator) {
                        return (operator === "BT") ? true : false;
                    }
                }
            });
            var dimensionValueLayout = new sap.m.VBox({
                items : [dimensionValue, dimensionValueToLabel, dimensionValueTo],
                layoutData : new sap.ui.layout.GridData({
                    span : "L3 M3"
                })
            });
            var dimensionDel = new sap.m.Button({
                icon : "sap-icon://sys-cancel",
                type : "Transparent",
                layoutData : new sap.ui.layout.GridData({
                    span : "L1 M1 S1"
                }),
                press : function(evt) {
                    var path = evt.getSource().getBindingContext().getPath();
                    if(that.dimensionValue){
                        if(that.dimensionValue[evt.getSource().getBindingContext().getObject().name]){
                            delete that.dimensionValue[evt.getSource().getBindingContext().getObject().name];
                        }
                    }
                    evt.getSource().getBindingContext().getModel().getData().selectedDimensions.splice(path.substring(path
                            .lastIndexOf("/") + 1), 1);
                    evt.getSource().getBindingContext().getModel().updateBindings();

                    if(evt.getSource().getBindingContext().getModel().getData().selectedDimensions.length == 0){
                        that.byId("dimensionLayoutHeaders").setVisible(false);
                    }
                }
            });
            var dimensionGrid = new sap.ui.layout.Grid({
                defaultSpan : "L12 M12",
                content : [new sap.m.Input({
                    value : "{name}",
                    width : "100%",
                    textAlign : sap.ui.core.TextAlign.End,
                    editable:false,
                    layoutData : new sap.ui.layout.GridData({
                        span : "L3 M3"
                    })
                }), dimensionOperator, dimensionValueLayout,dimensionDel]
            });
            return dimensionGrid;
        });

        var aFilterMandatory = new sap.ui.model.Filter("required",sap.ui.model.FilterOperator.NE,true);
        this.byId("baseDimensionLayout").getBinding("items").filter(aFilterMandatory);
    },
    
    formatOptionalFiltersOperators : function(oContext){
    	var sPath = oContext.getPath().replace(/\D/g, '');
    	var sFilterRestriction = oContext.getModel().oData.selectedDimensions[sPath].filterRestriction || null;
    switch(sFilterRestriction){
    	case "single-value":
    		return [new sap.ui.core.Item({
                text : this.oResourceBundle.getText("EQUAL_TO"),
                key : "EQ"
            })];
    		break;
    		
    	default: 
    		return [new sap.ui.core.Item({
                text : this.oResourceBundle.getText("EQUAL_TO"),
                key : "EQ"
            }), new sap.ui.core.Item({
                text : this.oResourceBundle.getText("GREATER_THAN"),
                key : "GT"
            }), new sap.ui.core.Item({
                text : this.oResourceBundle.getText("LESS_THAN"),
                key : "LT"
            }), new sap.ui.core.Item({
                text : this.oResourceBundle.getText("NOT_EQUAL_TO"),
                key : "NE"
            }), new sap.ui.core.Item({
                text : this.oResourceBundle.getText("BETWEEN"),
                key : "BT"
            })];
    		break;  
    	
    	}
    },

    openInputParameterValueHelpDialog : function(name) {
        var that = this;
        var inputParameterValueHelpDialog = new sap.m.SelectDialog({
            title : that.oResourceBundle.getText("SELECT_VALUES"),
            multiSelect : true,
            rememberSelections : true,
            items : {
                path : "/results",
                template : new sap.m.StandardListItem({
                    title : "{" + name + "}",
                })
            },
            confirm : function(oEvent) {
            },
            liveChange : function(oEvent) {
            }
        });
        inputParameterValueHelpDialog.setGrowingThreshold(100);
        inputParameterValueHelpDialog.open();
    },

    openDimensionDialog : function() {
        var that = this;
        var sapClientFilter1 = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.NE, "P_SAPClient");
        var sapClientFilter2 = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.NE, "V_SAPClient");
        var sapClientFilter3 = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.NE, "SAPClient");
        var oFilterRequired = new sap.ui.model.Filter("required", sap.ui.model.FilterOperator.NE, true);
        var filterSapClient = new sap.ui.model.Filter([sapClientFilter1,sapClientFilter2,sapClientFilter3],true);

        if (!this.dimensionDialog) {
            var oSorter1 = new sap.ui.model.Sorter("label",false);
            this.dimensionDialog = new sap.m.SelectDialog({
                title : that.oResourceBundle.getText("SELECT_DIMENSION_TO_ADD_FILTERS"),
                multiSelect : true,
                items : {
                    path : "/dimensions",
                    sorter : oSorter1,
                    template : new sap.m.StandardListItem({title : "{label}",description : "{name}"})
                },
                confirm : function(oEvent) {
                    var selectedDimensions = that.oModelForDimensions.getData().selectedDimensions||[];
                    var selectedItems = oEvent.getParameter("selectedItems");
                    var aContexts = [];
                    for(var key in selectedItems){
                        aContexts[key] = selectedItems[key].getBindingContext();
                    }
                    for ( var key in aContexts) {
                        var selectedObject = that._cloneObj(aContexts[key].getObject());
                        selectedObject.value_1 = "";
                        selectedObject.value_2 = "";
                        selectedObject.operator = "EQ";
                        selectedDimensions.unshift(selectedObject);
                    }
                    if (aContexts.length > 0)
                        that.byId("dimensionLayoutHeaders").setVisible(true);
                    else
                        that.byId("dimensionLayoutHeaders").setVisible(false);
                    that.oModelForDimensions.setProperty("/selectedDimensions", selectedDimensions);
                },
                liveChange : function(oEvent) {
                    var searchValue = oEvent.getParameter("value");
                    var thirdFilters;
                    var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, searchValue);
                    var oFilterLabel = new sap.ui.model.Filter("label", sap.ui.model.FilterOperator.Contains, searchValue);


                    var firstFilters = new sap.ui.model.Filter([oFilter,oFilterLabel], false);
                    var secondFilters = new sap.ui.model.Filter([oFilterRequired], true);
                    if(that.hasSapClient === true){
                        thirdFilters = new sap.ui.model.Filter([filterSapClient,secondFilters],true);
                    }
                    else{
                        thirdFilters = new sap.ui.model.Filter([secondFilters],true);
                    }
                    var oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter(new sap.ui.model.Filter([firstFilters, thirdFilters], true));
                }
            });
            this.dimensionDialog.setGrowingThreshold(100);

            try {
                that.mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
                var columnLabelObj = that.mProperties.getLabelMappingObject();
                var dimensionModelData = that.oModelForDimensions.getData();
                var dimensionArray = that.oModelForDimensions.getData().dimensions;
                for(var i=0,l=dimensionArray.length; i<l; i++) {
                    dimensionArray[i].label = columnLabelObj[dimensionArray[i].name];
                }
                dimensionModelData.dimensions = dimensionArray;
                that.oModelForDimensions.setData(dimensionModelData);
            }
            catch(e) {
                jQuery.sap.log.error("Failed to instantiate the odata model");
                throw e;
            }

            this.dimensionDialog.setModel(this.oModelForDimensions);
            
        }
        if(that.hasSapClient === true){
            this.dimensionDialog.getBinding("items").filter([filterSapClient,oFilterRequired],false);
        }
        this.dimensionDialog.open();
    },


    handleDimensionValueHelp : function(oEvent) {
        this.openDimensionValueHelpDialog(oEvent, "value_1");
    },

    handleDimensionValueToHelp : function(oEvent) {
        this.openDimensionValueHelpDialog(oEvent, "value_2");
    },

    getMandatoryFilters : function(){
        var that = this;
        var mandatoryFiltersArray = [];
        var selectedDimensions = this.oModelForDimensions.getData().selectedDimensions;
        for(var i in selectedDimensions){
            if(selectedDimensions[i].required==true){
                if(selectedDimensions[i].value_1 === "$$$"){
                    if(that.VIEW_MODE != "cds"){
                        mandatoryFiltersArray.push({ 
                            OPERATOR: selectedDimensions[i].operator, 
                            NAME: selectedDimensions[i].name, 
                            VALUE_1: that.userSessionClient,
                            VALUE_2: selectedDimensions[i].value_2, 
                            TYPE: "FI"
                        });
                    }
                }
                else{
                    mandatoryFiltersArray.push({ 
                        OPERATOR: selectedDimensions[i].operator, 
                        NAME: selectedDimensions[i].name, 
                        VALUE_1: selectedDimensions[i].value_1,
                        VALUE_2: selectedDimensions[i].value_2, 
                        TYPE: "FI"
                    });
                }
            }
        }
        return mandatoryFiltersArray;
    },

    openDimensionValueHelpDialog : function(oEvent, valueType) {
        var that = this;
        var parentInputField = oEvent.getSource();
        var baseModel = this.getView().getModel();
        var dimensionValuesModel = new sap.ui.model.json.JSONModel();
        var inputParameterArray = [];
        this.dimensionContext = oEvent.getSource().getBindingContext();
        var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
        var dimensionOperator = oEvent.getSource().getBindingContext().getProperty("operator");
        var dimensionType = oEvent.getSource().getBindingContext().getProperty("propertyType");
        var inputParameterData = this.oModelForInputParameters.getData().inputParameters;
        for ( var key in inputParameterData) {
            if(inputParameterData[key].value_1 === "$$$"){
                if(that.VIEW_MODE != "cds"){
                    inputParameterArray.push({ 
                        OPERATOR: inputParameterData[key].operator, 
                        NAME: inputParameterData[key].name, 
                        VALUE_1: that.userSessionClient,
                        VALUE_2: inputParameterData[key].value_2, 
                        TYPE: "PA" // TYPE { FI, PA} 
                    }); 
                }
            }
            else{
                inputParameterArray.push({ 
                    OPERATOR: inputParameterData[key].operator, 
                    NAME: inputParameterData[key].name, 
                    VALUE_1: inputParameterData[key].value_1,
                    VALUE_2: inputParameterData[key].value_2, 
                    TYPE: "PA" // TYPE { FI, PA} 
                }); 
            }
        }
        var allMandatoryFiltersEntered = this.allMandatoryFiltersEntered();
        if(!allMandatoryFiltersEntered){
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ALL_MANDATORY_FILTERS"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_ENTER_ALL_MANDATORY_FILTERS")
            });
            that.errorState = true;
        }
        var queryService = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
            serviceUri : baseModel.getProperty("/ODATA_URL"),
            entitySet : baseModel.getProperty("/ODATA_ENTITYSET"),
            filter : inputParameterArray.concat(that.getMandatoryFilters()),
            dimension : dimensionName
        });
        queryService.model.read(queryService.uri, null, null, false, function(data) {
            if (that.dimensionValue[dimensionName])
            {
                that.dimensionValue[dimensionName][valueType] = that.dimensionValue[dimensionName][valueType]
                ? that.dimensionValue[dimensionName][valueType] : "";
                var dimensionValueArray = that.dimensionValue[dimensionName][valueType] === ""
                    ? null : that.dimensionValue[dimensionName][valueType].split(",");
                for (key in dimensionValueArray)
                {      var userInputData = true;
                for ( var i in data.results)
                {   if(dimensionType == "Edm.DateTime")
                {      var date = new Date(dimensionValueArray[key]).toJSON();
                var dateFromService = new Date(data.results[i][dimensionName]).toJSON();
                if(date == dateFromService)
                {      userInputData = false;
                break;                                                                     
                }
                }
                else if (dimensionValueArray[key] === data.results[i][dimensionName])
                {  userInputData = false;
                break;
                }
                }
                if (userInputData)
                {
                    var userInputValueObject = {};
                    userInputValueObject[dimensionName] = dimensionValueArray[key];
                    userInputValueObject.userInput = true;
                    userInputValueObject.selected = true;
                    data.results.push(userInputValueObject);
                }
                else
                    data.results[i].selected = true;
                }
            }
            dimensionValuesModel.setData(data);
        }, function(error) {

        });

        var oSorter1 = new sap.ui.model.Sorter(dimensionName,false,function(context) {

            if (context.getProperty("userInput") === true)
                return {
                key : "USER_VALUES",
                text : that.oResourceBundle.getText("VALUES_ENTERED_BY_USER")
            };
            else
                return {
                key : "SERVICE_VALUES",
                text : that.oResourceBundle.getText("VALUES_FETCHED_FROM_SERVICE")
            };
        });
        this.dimensionValueHelpDialogs = new sap.m.SelectDialog(
                {
                    title : that.oResourceBundle.getText("SELECT_VALUES"),
                    multiSelect : true,
                    rememberSelections : true,
                    items : {
                        path : "/results",
                        sorter : oSorter1,
                        template : new sap.m.StandardListItem({
                            title : "{"+dimensionName+"}",                                                                   
                            selected : "{selected}"
                        })
                    },
                    confirm : function(oEvent) {
                        var selectedDimensionValues = "";
                        var aContexts = oEvent.getParameter("selectedContexts");
                        for ( var key in aContexts)
                        {      
                            if(dimensionType == "Edm.DateTime")
                            {   var dateObj = new Date(aContexts[key].getProperty(that.dimensionContext.getProperty("name")));
                            var month = dateObj.getMonth()+1;
                            month = /^\d$/.test(month) ? "0"+ month : month;
                            var date = dateObj.getDate();
                            date = /^\d$/.test(date) ? "0"+ date : date;
                            var hours = dateObj.getHours();
                            hours = /^\d$/.test(hours) ? "0"+ hours : hours;
                            var minutes = dateObj.getMinutes();
                            minutes = /^\d$/.test(minutes) ? "0"+ minutes : minutes;
                            var seconds = dateObj.getSeconds();
                            seconds = /^\d$/.test(seconds) ? "0"+ seconds : seconds;
                            selectedDimensionValues = selectedDimensionValues + dateObj.getFullYear()+"-"+ month +"-"+date+" "+hours+":"+minutes+":"+seconds+"."+dateObj.getMilliseconds()+",";     
                            }
                            else
                                selectedDimensionValues = selectedDimensionValues + aContexts[key].getProperty(that.dimensionContext.getProperty("name")) + ",";
                        }
                        selectedDimensionValues = selectedDimensionValues.substring(0, selectedDimensionValues.length - 1);
                        that.oModelForDimensions.setProperty(that.dimensionContext.getPath() + "/" + valueType,selectedDimensionValues);
                        parentInputField.fireChange({
                            value : selectedDimensionValues
                        });
                        that.dimensionValue[dimensionName] = that.dimensionValue[dimensionName] ? that.dimensionValue[dimensionName] : {};
                        that.dimensionValue[dimensionName][valueType] = selectedDimensionValues;
                    },
                    liveChange : function(oEvent) {
                        var searchValue = oEvent.getParameter("value");
                        var oFilter = new sap.ui.model.Filter(dimensionName, sap.ui.model.FilterOperator.Contains,
                                searchValue);
                        var oBinding = oEvent.getSource().getBinding("items");
                        oBinding.filter([oFilter]);
                    }
                });
        this.dimensionValueHelpDialogs.setGrowingThreshold(100);
        this.dimensionValueHelpDialogs.setModel(dimensionValuesModel);

        var dimensions = this.oModelForDimensions.getData().selectedDimensions;
        var items = this.dimensionValueHelpDialogs.getItems();
        for(var i=0;i<dimensions.length;i++){
            if((dimensionName === dimensions[i].name) &&(dimensionOperator === dimensions[i].operator)){
                var value;
                if(dimensions[i].operator === "BT"){
                    if(valueType === "value_1")
                        value = dimensions[i].value_1.split(",");
                    else
                        value = dimensions[i].value_2.split(",");
                }
                else{
                    value = dimensions[i].value_1.split(",");
                }

                for(var j=0;j<value.length;j++){
                    for(var k=1;k<items.length;k++){
                        if(value[j] === items[k].getTitle()){
                            items[k].setSelected(true);
                        }
                    }
                }
            }
        }

        this.dimensionValueHelpDialogs.open();
        for(var i=1;i<items.length;i++){
            if(!items[i].getSelected()){
                this.dimensionValueHelpDialogs.getItems()[i].setSelected(true);
                this.dimensionValueHelpDialogs.getItems()[i].setSelected(false);
            }
        }
    },

    allMandatoryFiltersEntered : function(){
        var dataSource = this.getView().getModel().getData().ODATA_URL;
        var entitySet = this.getView().getModel().getData().ODATA_ENTITYSET;

        if(dataSource && entitySet){
            this.queryResultFilters = sap.suite.ui.smartbusiness.lib.OData.filter(dataSource,entitySet);
            var mandatoryFilters = this.queryResultFilters.getMandatoryList();

            var mandatoryFiltersLength = mandatoryFilters.length;
            var i=0;j=0,l=0;
            var selectedDimensionsLength = 0;
            var selectedDimensions = this.oModelForDimensions.getData().selectedDimensions;
            if(selectedDimensions){
                selectedDimensionsLength = selectedDimensions.length;
                if(selectedDimensionsLength){
                    for(i=0;i<mandatoryFiltersLength;i++){
                        for(j=0;j<selectedDimensionsLength;j++){
                            if(mandatoryFilters[i]===selectedDimensions[j].name){
                                if(!selectedDimensions[j].value_1){
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    },



    handleDimensionValueChange : function(oEvent) {
        this.validateValue(oEvent, "dimensionValue");
        var valueType = oEvent.getSource().getCustomData()[0].getValue(); //value_1 or value_2
        var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
        if (!this.dimensionValue[dimensionName])
            this.dimensionValue[dimensionName] = {};
        this.dimensionValue[dimensionName][valueType] = oEvent.getParameter("value");
    },

    validateValue : function(oEvent, sourceType) {
        var that = this,result;
        var dimensionName = oEvent.getSource().getBindingContext().getProperty("name");
        var valueType = oEvent.getSource().getCustomData()[0].getValue();
        var valueArray = (sourceType === "dimensionValue") ? oEvent.getParameter("value").split(",") : oEvent
                .getSource().getBindingContext().getProperty("value_1");

        //Checking if multiple values for BT
        var operator = oEvent.getSource().getBindingContext().getProperty("operator");
        if (operator === "BT") {
            if (valueArray.length > 1) {
                result = false;
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_MULTIPLE_VALUES_FOR_BETWEEN",dimensionName));
                that.errorMessages.push({
                    "type":"Error",
                    "title":that.oResourceBundle.getText("ERROR_MULTIPLE_VALUES_FOR_BETWEEN",dimensionName)
                });
                that.errorState = true;
                var sPath = valueType === "value_1"? oEvent.getSource().getBindingContext().getPath() + "/error_1"	: oEvent.getSource().getBindingContext().getPath() + "/error_2";
                oEvent.getSource().getModel().setProperty(sPath, true);
                return;
            } else {
                var sPath = valueType === "value_1"
                    ? oEvent.getSource().getBindingContext().getPath() + "/error_1"
                            : oEvent.getSource().getBindingContext().getPath() + "/error_2";
                    oEvent.getSource().getModel().setProperty(sPath, false);
            }
        }


        //Checking filter restrictions

        //to implement this for single value filter restrictions

        /*		var filterRestriction = oEvent.getSource().getBindingContext().getProperty("filterRestriction");
		if(filterRestriction === "single-value"){
			if (valueArray.length > 1) {
				result = false;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_MULTIPLE_VALUES_FOR_SINGLE_VALUE_FILTER",dimensionName));
				var sPath = oEvent.getSource().getBindingContext().getPath() + "/error_1";
				oEvent.getSource().getModel().setProperty(sPath, true);
				return;
			}
		}
         */		

        //to implement this for multiple value filter restirctions

        /*		else if(filterRestriction === "multiple-value"){
			if (valueArray.length <= 1) {
				result = false;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_VALUES_FOR_MULTIPLE_VALUE_FILTER",dimensionName));
				var sPath = oEvent.getSource().getBindingContext().getPath() + "/error_1";
				oEvent.getSource().getModel().setProperty(sPath, true);
				return;
			}
		}
         */
        //Checking dimension value types are correct
        var expectedValueType = oEvent.getSource().getBindingContext().getProperty("propertyType");
        var errorMsg,pattern;
        for ( var key in valueArray) {
            result = true;
            var scriptTagPattern = /<(script)(.*)\/?>/i;
            var jsFunctionDefinitionPattern = /function\s*[^\(]*\(\s*([^\)]*)\)/;
            var jsFunctionCallPattern = /[^\(]*\(\s*([^\)]*)\)\s*{/;
            if (scriptTagPattern.test(valueArray[key]) || jsFunctionDefinitionPattern.test(valueArray[key])
                    || jsFunctionCallPattern.test(valueArray[key])) {
                result = false;
                errorMsg = that.oResourceBundle.getText("ERROR_INVALID_TEXT_FOR",dimensionName);
            }
            if(expectedValueType == "Edm.Int32" || expectedValueType == "Edm.Int16" || expectedValueType == "Edm.Int64")
            {
                pattern = /^[-+]?\d+$/;
                result = pattern.test(valueArray[key]) ? true : false;
                errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_INTEGER",dimensionName);
            } 
            else if(expectedValueType == "Edm.Decimal")
            {
                pattern = /^[-+]?\d+(\.\d+)?$/;
                result = pattern.test(valueArray[key])?true:false;
                errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DECIMAL",dimensionName);
            }
            else if(expectedValueType == "Edm.DateTime")
            {
                pattern = /^[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(\s([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-9]|[0-5][0-9])[.][0-9]+)?$/;
                result = pattern.test(valueArray[key])?true:false;
                errorMsg = that.oResourceBundle.getText("ERROR_INVALID_ENTRY_ENTER_DATE",dimensionName);
            }

            if (!result) {
                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(errorMsg);
                that.errorMessages.push({
                    "type":"Error",
                    "title":errorMsg
                });
                that.errorState = true;
                var sPath = valueType === "value_1"
                    ? oEvent.getSource().getBindingContext().getPath() + "/error_1"
                            : oEvent.getSource().getBindingContext().getPath() + "/error_2";
                    oEvent.getSource().getModel().setProperty(sPath, true);
                    return;
            } else {
                var sPath = valueType === "value_1"
                    ? oEvent.getSource().getBindingContext().getPath() + "/error_1"
                            : oEvent.getSource().getBindingContext().getPath() + "/error_2";
                    oEvent.getSource().getModel().setProperty(sPath, false);
            }
        }
    },

    handleOperatorChange : function(oEvent) {
        var context = oEvent.getSource().getBindingContext();
        context.getObject().value_1 = "";
        if(this.dimensionValue){
            if(this.dimensionValue[context.getObject().name]){
                this.dimensionValue[context.getObject().name].value_1="";
            }
        }

        if (context.getProperty("operator") === "BT") {
            context.getObject().value_2 = "";
            if(this.dimensionValue){
                if(this.dimensionValue[context.getObject().name]){
                    this.dimensionValue[context.getObject().name].value_2="";
                }
            }
        } 
        context.getModel().updateBindings();
    },

    validateDimensionsAndInputParameters : function() {
        var inputParameters = this.oModelForInputParameters.getData().inputParameters;
        var dimensions = this.oModelForDimensions.getData().selectedDimensions;
        var error = false;
        var errorType = "";
        var errorDimension = "";
        for ( var key in inputParameters) {
            if (inputParameters[key].error_1 === true || inputParameters[key].error_2 === true)
                error = true;
            if (inputParameters[key].value_1 === "") {
                error = true;
                errorType = "mandatoryFieldEmpty";
                inputParameters[key].error_1 = true;
            }
        }
        this.oModelForInputParameters.updateBindings();
        for ( var key in dimensions) {
            if (dimensions[key].error_1 === true || dimensions[key].error_2 === true){
                error = true;
                errorType = "invalidEntry";
                errorDimension = dimensions[key];
            }
            if (dimensions[key].value_1 === "") {
                error = true;
                errorType = "fieldEmpty";
                dimensions[key].error_1 = true;
            }
            if (dimensions[key].operator === "BT" && dimensions[key].value_2 === "") {
                error = true;
                errorType = "fieldEmpty";
                dimensions[key].error_2 = true;
            }
        }
        this.oModelForDimensions.updateBindings();
        return {
            error : error,
            errorType : errorType,
            errorDimension : errorDimension
        };
    },

    resetDimensionsAndInputParameters : function() {
        this.oModelForDimensions.setData({});
        this.oModelForInputParameters.setData({});
        this.dimensionDialog = null;
        this.dimensionValueHelpDialogs = {};
        this.dimensionValue = {};

        this.byId("noInputParameterGrid").setVisible(true);
        this.byId("inputParameterDataGrid").setVisible(false);
        this.byId("mandatoryFiltersDataGrid").setVisible(false);
    },

    createTargetThresholdLayout : function() {
        var that = this;
        var trend = this.getView().getModel().getData().TREND;
        var reference_value = this.getView().getModel().getData().REFERENCE_VALUE;
        if (this.getView().getModel().getData().INDICATOR) {
            this.getView().byId('targetThresholdPanel').setVisible(true);
            this.getView().byId("additionalMeasures").setVisible(true);
            this.getView().byId("additionalMeasureLabel").setVisible(true);
            this.getView().byId("selectedLabel").setVisible(true);
            this.getView().byId("selectedadditionalMeasures").setVisible(true);
            this.selectedMeasure();
            this.getView().byId('targetThresholdPanel').getContent()[0].destroy();
            if(this.getView().getModel().getData().mode !== "edit"){
                delete this.getView().getModel().getData().CRITICALHIGH;
                delete this.getView().getModel().getData().WARNINGHIGH;
                delete this.getView().getModel().getData().TARGET;
                delete this.getView().getModel().getData().WARNINGLOW;
                delete this.getView().getModel().getData().CRITICALLOW;
                delete this.getView().getModel().getData().TREND;
                delete this.getView().getModel().getData().REFERENCE_VALUE;
            }
            that.getView().byId('targetThresholdPanel').addContent(new sap.ui.core.mvc.XMLView({
                viewName : "sap.suite.ui.smartbusiness.designtime.evaluation.view.createEvalTargetThresholdTrendInput",
                viewData : {controller:that}
            }));
        }
        if (!this.getView().getModel().getData().INDICATOR) {
            this.getView().byId('targetThresholdPanel').setVisible(false);
            this.getView().byId("additionalMeasures").setVisible(false);
            this.getView().byId("additionalMeasureLabel").setVisible(false);
            this.getView().byId("selectedLabel").setVisible(true);
            this.getView().byId("selectedadditionalMeasures").setVisible(true);
        }
        this.getView().getModel().setProperty("TREND",trend);
        this.getView().getModel().setProperty("REFERENCE_VALUE",reference_value);

    },

    addAdditionalLanguageDialog : function(){
        var that=this;
        this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
        this.additionalLanguageListModelData = jQuery.extend([], that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY);
        this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
        this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

        this.languageTextInput = new sap.m.Input({
            layoutData : new sap.ui.layout.GridData({
                span : "L8 M8 S8"
            })
        });
        this.languageDescriptionInput = new sap.m.TextArea({
            layoutData : new sap.ui.layout.GridData({
                span : "L8 M8 S8"
            })
        });
        this.languageKeySelect = new sap.m.Select({
            layoutData : new sap.ui.layout.GridData({
                span : "L6 M6 S6"
            })
        });
        this.addedLanguagesList = new sap.m.Table({
            showNoData:true,
            columns:[
                     new sap.m.Column({

                     }),
                     new sap.m.Column({

                     }),
                     new sap.m.Column({

                     })
                     ],
                     layoutData : new sap.ui.layout.GridData({
                         span : "L5 M5 S5"
                     }),
        });
        this.setEnable = function(){
            if(this.addedLanguagesList.getItems().length==0)
            {
                additionalLanguageDialog.getBeginButton().setEnabled(false); //enabling the "OK" button when an entry is added
            }else{
                additionalLanguageDialog.getBeginButton().setEnabled(true);
            }
        }
        this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.ColumnListItem({
            cells : [
                     new sap.m.ObjectIdentifier({
                         title : "{additionalLanguageListModel>TITLE}",
                         text : "{additionalLanguageListModel>DESCRIPTION}",
                         layoutData : new sap.ui.layout.GridData({
                             span : "L12 M12 S12",
                             vAlign : "Middle"
                         }),
                     }),
                     new sap.m.Label({
                         text : "{additionalLanguageListModel>LANGUAGE}",
                         design : "Bold",
                         layoutData : new sap.ui.layout.GridData({
                             span : "L6 M6 S6",
                             vAlign : "Middle"
                         }),
                     }),
                     new sap.m.Button({
                         icon : "sap-icon://sys-cancel",
                         type : "Transparent",
                         layoutData : new sap.ui.layout.GridData({
                             span : "L2 M2 S2"
                         }),
                         press : function(oEvent){
                             var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
                             var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().splice(deletedIndex,1);
                             that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
                             that.setEnable();
                         },
                     })
                     ]
        }));
        this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

        var additionalLanguageDialog = new sap.m.Dialog({
            contentHeight : "50%",
            contentWidth : "25%",
            title : this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE"),
            content :  [
                        new sap.ui.layout.Grid({
                            hSpacing: 1,
                            vSpacing: 4,
                            defaultSpan : "L12 M12 S12",
                            content: [
                                      new sap.ui.layout.form.SimpleForm({
                                          editable:true, 
                                          layout:"ResponsiveGridLayout", 
                                          content : [
                                                     new sap.m.Label({
                                                         text : that.oResourceBundle.getText("TITLE"),
                                                         required:true,
                                                         layoutData : new sap.ui.layout.GridData({
                                                             span : "L3 M3 S3",
                                                         })
                                                     }),
                                                     that.languageTextInput,
                                                     new sap.m.Label({
                                                         text : that.oResourceBundle.getText("DESCRIPTION"),
                                                         layoutData : new sap.ui.layout.GridData({
                                                             span : "L3 M3 S3",
                                                         })
                                                     }),
                                                     that.languageDescriptionInput,
                                                     new sap.m.Label({
                                                         text : that.oResourceBundle.getText("LANGUAGE"),
                                                         layoutData : new sap.ui.layout.GridData({
                                                             span : "L3 M3 S3"
                                                         })
                                                     }),

                                                     that.languageKeySelect,
                                                     new sap.m.Button({
                                                         icon:"sap-icon://add",
                                                         layoutData : new sap.ui.layout.GridData({
                                                             span : "L2 M2 S2"
                                                         }),
                                                         press : function(){
                                                             var str = that.languageTextInput.getValue().replace(/\s+/g, '');
                                                             if(str===""){
                                                                 that.languageTextInput.setValueState(sap.ui.core.ValueState.Error); 
                                                             }else{
                                                                 that.languageTextInput.setValueState(sap.ui.core.ValueState.None);
                                                             }

                                                             if(that.languageTextInput.getValue() && str !== ""){
                                                                 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().length;i++){
                                                                     if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData()[i].LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getKey()){
                                                                         sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
                                                                         return;
                                                                     }
                                                                 }

                                                                 var addedLanguageObject = {
                                                                         "TITLE" : that.languageTextInput.getValue(),
                                                                         "DESCRIPTION" : that.languageDescriptionInput.getValue(),
                                                                         "LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getKey(),
                                                                         "LANGUAGE" : that.languageKeySelect.getSelectedItem().getText()
                                                                 };
                                                                 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().push(addedLanguageObject);
                                                                 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
                                                                 that.languageTextInput.setValue("");
                                                                 that.languageDescriptionInput.setValue("");

                                                             }
                                                             that.setEnable();

                                                         }
                                                     })
                                                     ]
                                      })

                                      ]
                        }).addStyleClass("languageGrid"),
                        that.addedLanguagesList],
                        beginButton : new sap.m.Button({
                            text : that.oResourceBundle.getText("OK"),

                            press : function(){
                                additionalLanguageDialog.close();
                                that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY = that.addedLanguagesList.getModel("additionalLanguageListModel").getData();
                                that.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY.length;
                                that.getView().getModel().updateBindings();
                            }
                        }),
                        endButton : new sap.m.Button({
                            text : that.oResourceBundle.getText("CANCEL"),
                            press : function(){
                                additionalLanguageDialog.close();
                            }
                        })
        });

        var data = jQuery.extend(true, [], that.SAP_LANGUAGE_ARRAY, []);
        for(var i=0;i<data.length;i++){

            if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
                data.splice(i,1);
            }
        }
        var oModel = new sap.ui.model.json.JSONModel();
        oModel.setData(data);
        that.languageKeySelect.setModel(oModel, "otherLanguageKey");
        that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
            text: "{otherLanguageKey>LAISO}",
            key: "{otherLanguageKey>SPRAS}"
        }));

        this.setEnable();
        additionalLanguageDialog.open();

    },
    _cloneObj:function(ele){
        var tmp;
        if(ele instanceof Array){
            tmp=[];
            for(var i=0;i<ele.length;i++){
                tmp[i]=this._cloneObj(ele[i]);
            }
        }else if(ele instanceof Object){
            tmp={};
            for(var each in ele){
                if(ele.hasOwnProperty(each)){
                    tmp[each]=this._cloneObj(ele[each]);     
                }
            }
        }else{
            tmp=ele;
        }
        return tmp;
    },
    formatLangCount : function(value){
        if(!this.getView().getModel().getData()){
            value = 0;
        }
        else
            value = this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES;
        return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+value+")";
    },
    convert:function(value){

        jQuery.sap.require("sap.ca.ui.model.format.NumberFormat");
        var valFormatter = sap.ca.ui.model.format.NumberFormat.getInstance({ style: "standard" , decimals:value});
        var fNum = valFormatter.format(0);
        return fNum;
    },
    validateEvaluationValues: function(data) {
        data = data || this.getView().getModel().getData();
        var values = [];
        var errors = [];
        var score = 0;
        var duplicates = {};
        if(data.CRITICALLOW || data.CRITICALLOW === 0) {
            values.push({key: "CL", value: data.CRITICALLOW, score: score++});
        }
        if(data.WARNINGLOW || data.WARNINGLOW === 0) {
            values.push({key: "WL", value: data.WARNINGLOW, score: score++});
        }
        if(data.TARGET || data.TARGET === 0) {
            values.push({key: "TA", value: data.TARGET, score: score++});
        }
        if(data.WARNINGHIGH || data.WARNINGHIGH === 0) {
            values.push({key: "WH", value: data.WARNINGHIGH, score: score++});
        }
        if(data.CRITICALHIGH || data.CRITICALHIGH === 0) {
            values.push({key: "CH", value: data.CRITICALHIGH, score: score++});
        }
        values.sort(function(a,b) { return (a.value - b.value)});
        for(var i=0,l=values.length; i<l; i++) {
            if(values[i].score != i) {
                errors.push(values[i].key);
            }
            if(values[i] && values[i-1]) {
                if(values[i].value == values[i-1].value) {
                    duplicates[values[i-1].key] = values[i-1].value;
                    duplicates[values[i].key] = values[i].value;
                }
            }
        }
        if(!(errors.length)) {
            errors = Object.keys(duplicates);
        }
        return errors;
    },

    resetAdditionalMeasures : function(){
        var that = this;
        if(that.getView().getModel().getData().ODATA_URL && that.getView().getModel().getData().ODATA_ENTITYSET){
            /*			if(that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog){
				var measureModel = that.getView().byId('targetThresholdPanel').getContent()[0].getController().populateMeasure(that.getView().getModel().getData().ODATA_URL,that.getView().getModel().getData().ODATA_ENTITYSET);
				that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog.setModel(measureModel);
			}*/
            if(that.measureDialog){
                var measureModel = that.populateMeasure(that.getView().getModel().getData().ODATA_URL,that.getView().getModel().getData().ODATA_ENTITYSET);
                that.measuresDialog.setModel(measureModel);
            }

        }
        else{
            /*			if(that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog){
				var measureModel = new sap.ui.model.json.JSONModel({});
				that.getView().byId('targetThresholdPanel').getContent()[0].getController().measuresDialog.setModel(measureModel);
			}*/
            if(that.measureDialog){
                var measureModel = new sap.ui.model.json.JSONModel({});
                that.measuresDialog.setModel(measureModel);
            }
        }
        //that.getView().byId('targetThresholdPanel').getContent()[0].byId('additionalMeasures').removeAllTokens();
        that.getView().byId("additionalMeasures").removeAllTokens();
    },

    isCDSMode: function(mode) {
        return mode == this.CDS;
    },

    isHANAMode: function(mode) {
        return mode != this.CDS;
    },
    createMeasuresDialog : function(){
        this.parentController = this.getView().getController();
        var that = this;
        var oDataUrl = this.parentController.getView().getModel().getData().ODATA_URL;
        var oDataEntitySet = this.parentController.getView().getModel().getData().ODATA_ENTITYSET;
        if(!(oDataUrl && oDataEntitySet)){
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("ERROR_WRONG_ENTITY_SET")
            });
            that.errorState = true;
            return;
        }
        var measureModel = this.populateMeasure(oDataUrl,oDataEntitySet);
        that.measuresDialog = new sap.m.SelectDialog({
            title: that.oResourceBundle.getText("SELECT_MEASURE"),
            noDataText: that.oResourceBundle.getText("NO_DATA_FOUND"),
            multiSelect : true,
            items: {
                path: "/measures",
                template: new sap.m.StandardListItem({
                    title:"{measureName}",

                })},
                confirm : function(oEvent){
                    var oSelectedItem = oEvent.getParameter("selectedItems");
                    for ( var key in oSelectedItem)
                    {   
                        that.byId("additionalMeasures").addToken(new sap.m.Token({text : oSelectedItem[key].getTitle()}));
                        that.measuresDialog.removeItem(oSelectedItem[key]);
                    }
                    that.selectedMeasure();
                }
        });
        that.measuresDialog.setModel(measureModel);
    },
    selectedMeasure : function(){
        var that = this;
        that.byId("selectedadditionalMeasures").setVisible(true);
        that.byId("selectedLabel").setVisible(true);
        var measures = [];
        measures = that.byId("additionalMeasures").getTokens();
        if(measures.length == 0){
            that.byId("selectedadditionalMeasures").setVisible(false);
            that.byId("selectedLabel").setVisible(false);
            that.byId("selectedadditionalMeasures").setText("");
        }
        else{
            var selectedText = "";
            for(var i=0;i<measures.length;i++){
                if(i == 0){
                    selectedText = selectedText + measures[i].getText();
                }
                else{
                    selectedText = selectedText +", "+ measures[i].getText();
                }
            }
            that.byId("selectedadditionalMeasures").setText(selectedText);
        }
    },
    multiMeasureTokenChange : function(oEvent){
        var that = this;
        if(oEvent.getParameter("type") == "removed"){
            if(!that.measuresDialog){
                that.createMeasuresDialog();
            }
            var item = oEvent.getParameter("token");
            var measures = [];
            measures = that.measuresDialog.getModel().getData().measures;
            for(var i=0;i<measures.length;i++){
                if(measures[i].measureName === item.getText()){
                    that.measuresDialog.addItem(
                            new sap.m.StandardListItem({
                                title : item.getText(),
                            })
                    );
                }
            }
            that.selectedMeasure();	
        }
        var measures = [];
        measures = that.byId("additionalMeasures").getTokens();
        for(var i=0,l=measures.length; i<l; i++) {
            if(measures[i].getText() == that.getView().getModel().getData().COLUMN_NAME) {
                that.byId("additionalMeasures").setValueState("Error");
                return;
            }
            else{
                that.byId("additionalMeasures").setValueState("None");
            }
        }
    },
    openAdditionalMeasures : function(oEvent){
        var that = this;
        var oMeasure = this.getView().getModel().getData().COLUMN_NAME;
        if(!oMeasure || oMeasure === ""){
            that.byId("valueMeasureInput").setValueState("Error");
            sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("SELECT_VALUE_MEASURE"));
            that.errorMessages.push({
                "type":"Error",
                "title":that.oResourceBundle.getText("SELECT_VALUE_MEASURE")
            });
            that.errorState = true;
            return;
        }

        if(!that.measuresDialog){
            that.createMeasuresDialog();
        }

        var oFilterMeasure = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.NE,oMeasure);
        that.measuresDialog.getBinding("items").filter([oFilterMeasure],false);
        var items = that.measuresDialog.getItems();
        var tokens = that.byId("additionalMeasures").getTokens();
        for(var i=0;i<tokens.length;i++){
            for(var j=0;j<items.length;j++){
                if(tokens[i].getText() === items[j].getTitle()){
                    that.measuresDialog.removeItem(items[j]);
                }
            }
        }
        that.measuresDialog.open();
    },


    generateEvalId : function(oController){

        var x = {};
        x.title = "";
        var promiseObj = sap.suite.ui.smartbusiness.lib.IDGenerator.generateEvaluationId(x);
        var id;
        promiseObj.done(function(eId){
            id = eId;
            oController.getView().getModel().getData().ID = id;
            oController.getView().getModel().updateBindings();
        });
    },
    multiMeasureChange : function(value){
        var that = this;
        var measures = [];
        measures = that.byId("additionalMeasures").getValue().split(",");
        for(var i=0;i<measures.length;i++){
            that.byId("additionalMeasures").setValue("")
            that.byId("additionalMeasures").addToken(new sap.m.Token({text : measures[i]}));
        }
        measures = that.byId("additionalMeasures").getTokens();
        if(measures.length == 0){
            that.byId("additionalMeasures").setValueState("None");
        }
        for(var i=0,l=measures.length; i<l; i++) {
            if(measures[i].getText() == that.getView().getModel().getData().COLUMN_NAME) {
                that.byId("additionalMeasures").setValueState("Error");
                return;
            }
            else{
                that.byId("additionalMeasures").setValueState("None");
            }
        }
    },

    _areEvaluationValuesNumber: function(data) {

        var errors = [];
        if ( (data.CRITICALLOW && isNaN(data.CRITICALLOW)) || 
                (data.CRITICALHIGH && isNaN(data.CRITICALHIGH))) {
            errors.push("CRITICAL");
        }
        if ( (data.WARNINGLOW && isNaN(data.WARNINGLOW)) || 
                (data.WARNINGHIGH && isNaN(data.WARNINGHIGH))) {
            errors.push("WARNING");
        }
        if (data.TARGET && isNaN(data.TARGET)) {
            errors.push("TARGET");
        }
        return errors;
    },

    scaleFactorChange: function(evt) {
        evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
    },

    decimalPrecisionChange: function(evt) {
        evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
    }
});



}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.view.S1.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.kpi.view.S1.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained


jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/kpi/view/KpiParametersCss.css");

sap.ca.scfld.md.controller.BaseFullscreenController.extend("sap.suite.ui.smartbusiness.designtime.kpi.view.S1", {

	onInit : function() {
		var that = this;
		this.RESERVED_KPI_ID_NAMESPACE = ".sap.sample";
		
		this.HANA = "hana";
		this.CDS = "cds";
		this.VIEW_MODE = this.HANA;
		var urlParam;

		this.errorMessages = [];
		this.errorState = false;

		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		sap.suite.ui.smartbusiness.lib.AppSetting.init({
			oControl : that.byId("kpiId"),
			controllerReference : that,
			hideElement  : "input",
			i18n: {
				checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
				saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
				cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
				settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
				settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
			},
			title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
			action: that.generateKpiId
		});
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		/* use url parameter `?viewmode=cds` to launch app based on an CDS view */
		if(urlParam = jQuery.sap.getUriParameters().get("viewmode")) {
			if(urlParam.toLowerCase && urlParam.toLowerCase() == this.CDS)
				this.VIEW_MODE = this.CDS;
		}
		this.getView().getModel().oData["VIEW_MODE"] = this.VIEW_MODE;
		
		
		//Adapter Implementation ---
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		sap.suite.ui.smartbusiness.sb_createkpi = this;
		
		this.kpiCreateModel = new sap.ui.model.json.JSONModel();
		this.oDataModel = this.oApplicationFacade.getODataModel();
		
		/**********************************************CDS based OData services****************************************************
		 * >get all CDS views
		 * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/CDSViewSet
		 * >get all OData urls
		 * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/PackOdataSet
		 * >get OData urls from selected CDS view (example)
		 * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/CDSViewSet(CdsName='%2FSSB%2FEVAL_FILTRS')/?$expand=ODATAnameSet
		 * >get relevant EntitySets from selected CDS view and selected odata (example)
		 * 		/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01/ODATAnameSet(CdsName='%2FSSB%2FC_EVALUATIONFILTERS',OdataName='',OdataURL='%2Fsap%2Fopu%2Fodata%2FSSB%2FSMART_BUSINESS_SRV',SrvName='',SrvVersion='',SrvNamespace='')/?$expand=EntityTypeSet
		 ****************************************************************************************************************************/
		if(this.VIEW_MODE == this.CDS) {
			this.oDataModelCDS = new sap.ui.model.odata.ODataModel("/sap/opu/odata/SSB/CDS_ODATA_ENTITY_FETCH_SRV_01");
			this.oDataModelCDS.attachMetadataFailed(function(s){sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_CDS_MODE"))});
			this.byId("kpiId").setMaxLength(40);
		}
		else if(this.VIEW_MODE == this.HANA){
			this.byId("kpiId").setMaxLength(512);
		}
		
		this.viewData = {};
		this.oResourceBundle = this.oApplicationFacade.getResourceBundle();
		
		//Adapter Implementation ---
		
		// Fetch All Sap Languages - Adapter Implementation
		var langSuccessHandler = function(obj, arr, localeLanguage) {
			that.SAP_LANGUAGES = obj;
			that.SAP_LANGUAGE_ARRAY = arr;
			that.localLanguage = localeLanguage;
		};
		this.metadataRef.getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});

		this.oOptions = {
				bSuppressBookmarkButton : {},
				onBack : function(){
					that.cancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.activateAndCreateNew();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_ADD_EVAL",
					onBtnPressed : function(evt) {
						that.activateAndAddEvaluation();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		this.oErrorOptions = {
				bSuppressBookmarkButton : {},
				onBack : function(){
					that.cancel();
				},
				oNegativeAction : {
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
					}
				},

				buttonList : [{
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},{
					sI18nBtnTxt : "SAVE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.saveAndCreateNew();
					}
				},{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_CREATE_NEW",
					onBtnPressed : function(evt) {
						that.activateAndCreateNew();
					}
				},{
					sI18nBtnTxt : "ACTIVATE_ADD_EVAL",
					onBtnPressed : function(evt) {
						that.activateAndAddEvaluation();
					}
				},{
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		this.editDraftOptions = {
				bSuppressBookmarkButton : {},
				sI18NFullscreenTitle : "FULLSCREEN_EDIT_TITLE",
				onBack : function(){
					that.cancel();
				},
				oEditBtn : {
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},
				buttonList : [{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				}, {
					sI18nBtnTxt : "DELETE_DRAFT",
					onBtnPressed : function(evt) {
						that.deleteDraft();
					}
				}, {
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		this.oErrorOptionsForDraft = {
				bSuppressBookmarkButton : {},
				sI18NFullscreenTitle : "FULLSCREEN_EDIT_TITLE",
				onBack : function(){
					that.cancel();
				},
				oNegativeAction : {
					sControlId : "errorBtn",
					sId : "errorBtn",
					sIcon : "sap-icon://alert",
					bDisabled : false,
					onBtnPressed : function(event){
						sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
					}
				},

				buttonList : [{
					sI18nBtnTxt : "SAVE",
					onBtnPressed : function(evt) {
						that.save();
					}
				},{
					sI18nBtnTxt : "SAVE_ACTIVATE",
					onBtnPressed : function(evt) {
						that.saveAndActivate();
					}
				}, {
					sI18nBtnTxt : "DELETE_DRAFT",
					onBtnPressed : function(evt) {
						that.deleteDraft();
					}
				}, {
					sI18nBtnTxt : "CANCEL",
					onBtnPressed : function(evt) {
						that.cancel();
					}
				}]
		};

		this.valid_maxlength = {};
		this.valid_maxlength.hana = {
				id: 512,
				title: 128,
		};
		this.valid_maxlength.cds = {
				id: 40,
				title: 40,
		};

		this.setHeaderFooterOptions(this.oOptions);

		this.byId("kpiGoalTypeSelect").attachChange(function goalTypeChange(evt) {
			evt.getSource().setTooltip(evt.getParameters().selectedItem.getText());
		});
		
		this.oRouter.attachRouteMatched(function(evt){
			that.route = evt.getParameter("name");
			if(evt.getParameter("name") == "editKpi"){
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "EDIT",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active)
				}
				if(that.viewData.IS_ACTIVE == 1){
					that.viewData.IS_DRAFT = true;
				}
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
                    }
				} catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"))
				}
			}
			else if(evt.getParameter("name") == "editDraftKpi"){
				that.editDraft = true;
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "EDIT",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active),
						IS_DRAFT : true
				}
				that.setHeaderFooterOptions(that.editDraftOptions);
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
				try {
                    if(sap.ushell.services.AppConfiguration && sap.ushell.services.AppConfiguration.setWindowTitle){
                            sap.ushell.services.AppConfiguration.setWindowTitle(that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"));
                    }
				} catch(e){
                    jQuery.sap.log.error("Error Setting Window Page Title : "+that.oResourceBundle.getText("FULLSCREEN_EDIT_TITLE"))
				}
			}
			else if(evt.getParameter("name") == "duplicateKpi"){
				that.context = new sap.ui.model.Context(that.getView().getModel(), '/' + (evt.getParameter("arguments").contextPath));

				var id = (/ID=\'.*\'/).exec(evt.getParameter("arguments").contextPath)[0];
				var kpiId = id.slice(id.indexOf("'")+1,id.lastIndexOf("'"));

				var active = (/IS_ACTIVE=.*/).exec(evt.getParameter("arguments").contextPath)[0];
				var is_active = active.slice(active.indexOf("=")+1,active.lastIndexOf(")"));

				that.viewData = {
						mode : "DUPLICATE",
						ID : kpiId,
						IS_ACTIVE : parseInt(is_active)
				}
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE"));
			}
			else{
				that.viewData = {
						mode : "CREATE",
				}
				that._oControlStore.oTitle.setText(that.oResourceBundle.getText("FULLSCREEN_TITLE"));
			}

			if (that.viewData.mode == "CREATE") {
				var kpiModelData = {};
				kpiModelData.MODE = "CREATE";
				kpiModelData.TYPE = "KPI";
				kpiModelData.KPITYPE = true;
				kpiModelData.OPITYPE = false;
				kpiModelData.NO_OF_ADDITIONAL_LANGUAGES = 0;
				kpiModelData.ADDITIONAL_LANGUAGE_ARRAY = [];
				kpiModelData.GOAL_TYPE = "MA";
				kpiModelData.VIEW_MODE = that.VIEW_MODE;

				that.kpiModelDataForDirtyBitCheck = $.extend(true,{},kpiModelData);

				that.kpiCreateModel.setData(kpiModelData);
				that.getView().setModel(that.kpiCreateModel);
				that.generateKpiId(that);
			} else if (that.viewData.mode == "EDIT" || that.viewData.mode == "DUPLICATE") {
				
				//Adapter Implementation ---

				var indicatorFetchCallBack = function(indicator) {
					var indicatorData = indicator.INDICATOR;
					that.indicatorPayloadForDirtyBitTest = $.extend(true,{},indicatorData);
					var tagData = indicator.TAGS;
					var propertiesData = indicator.PROPERTIES;
					var languageData = indicator.TEXTS;
					
					//indicator info
					indicatorData.MODE = that.viewData.mode;
					indicatorData.VIEW_MODE = that.VIEW_MODE;
					if (indicatorData.TYPE == "KPI") {
						indicatorData.KPITYPE = true;
						indicatorData.OPITYPE = false;
					} else if (indicatorData.TYPE == "OPI") {
						indicatorData.KPITYPE = false;
						indicatorData.OPITYPE = true;
					}

					//tags
					tagData = (tagData.results) ? tagData.results : tagData;
					var tagArray = [];
					var i;
					for(i=0;i<tagData.length;i++){
						tagArray.push(tagData[i].TAG);
					}
					indicatorData.TAGS = tagArray;
					indicatorData.TAG = indicatorData.TAGS.toString(",");
					that.OLD_TAGS = tagArray;

					//properties
					propertiesData = (propertiesData.results) ? propertiesData.results : propertiesData;
					var propertiesArray = [];
					var i;
					for(i=0;i<propertiesData.length;i++){
						var propertiesObject = {};
						propertiesObject.NAME = propertiesData[i].NAME,
						propertiesObject.VALUE = propertiesData[i].VALUE
						propertiesArray.push(propertiesObject);
					}
					indicatorData.PROPERTIES = propertiesArray;
					that.OLD_PROPERTIES = $.extend(true,[], propertiesArray);

					//languages
					languageData = (languageData.results) ? languageData.results : languageData;
					var additionalLanguageData = [];
					var i;
					for(i=0;i<languageData.length;i++){
						if(languageData[i].LANGUAGE != that.localLanguage){
							additionalLanguageData.push(languageData[i]);
						}
					}
					var languageArray = [];
					var i;
					for(i=0;i<additionalLanguageData.length;i++){
						var languageObject = {};
						languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].TITLE;
						languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].DESCRIPTION;
						languageObject.ADDITIONAL_LANGUAGE_SPRAS_KEY = additionalLanguageData[i].LANGUAGE;
						if(that.SAP_LANGUAGES) {
							languageObject.ADDITIONAL_LANGUAGE_KEY = that.SAP_LANGUAGES.SPRAS[additionalLanguageData[i].LANGUAGE]; 
						}
						else {
							languageObject.ADDITIONAL_LANGUAGE_KEY = "";
						}
						languageArray.push(languageObject);
					}
					indicatorData.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
					indicatorData.NO_OF_ADDITIONAL_LANGUAGES = indicatorData.ADDITIONAL_LANGUAGE_ARRAY.length; 
					that.OLD_ADDITIONAL_LANGUAGE_ARRAY = languageArray;


					/// Code to be removed

					/*
                                                                                that.oDataModel.read("/TAGS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(tagData) {

                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_TAGS"));
                                                                                });

                                                                                that.oDataModel.read("/PROPERTIES?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(propertiesData) {

                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_PROPERTIES"));
                                                                                });

                                                                                that.oDataModel.read("/INDICATOR_TEXTS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE, null, null, false, function(languageData) {

                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_ADDITIONAL_LANGUAGES"));
                                                                                });
					 */

					that.kpiCreateModel.setData(indicatorData);
					that.getView().setModel(that.kpiCreateModel);

					if(indicatorData.MODE == "EDIT"){
						that.getView().byId("kpiId").setEditable(false);
					}
					if(indicatorData.MODE == "DUPLICATE"){
						that.generateKpiId(that);
					}
				};

				var indicatorFetchErrCallBack = function(error){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("YMSG_ERROR_RETRIEVING_DATA"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("YMSG_ERROR_RETRIEVING_DATA")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);

				};

				that.metadataRef.getKPIById({ID:that.viewData.ID, IS_ACTIVE:that.viewData.IS_ACTIVE, texts:true, tags:true, properties:true, async:false, entity:"INDICATORS", success:indicatorFetchCallBack, error:indicatorFetchErrCallBack, model:that.oDataModel});


				/// Code to be removed
				/*
                                                                that.oDataModel.read("/INDICATORS(ID='" + that.viewData.ID  + "',IS_ACTIVE="             + that.viewData.IS_ACTIVE + ")", null, null, false, function(indicatorData) {
                                                                                that.indicatorPayloadForDirtyBitTest = $.extend(true,{},indicatorData);

                                                                                indicatorData.MODE = that.viewData.mode;
                                                                                indicatorData.VIEW_MODE = that.VIEW_MODE;
                                                                                if (indicatorData.TYPE == "KPI") {
                                                                                                indicatorData.KPITYPE = true;
                                                                                                indicatorData.OPITYPE = false;
                                                                                } else if (indicatorData.TYPE == "OPI") {
                                                                                                indicatorData.KPITYPE = false;
                                                                                                indicatorData.OPITYPE = true;
                                                                                }

                                                                                that.oDataModel.read("/TAGS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(tagData) {
                                                                                                tagData = tagData.results;
                                                                                                var tagArray = [];
                                                                                                var i;
                                                                                                for(i=0;i<tagData.length;i++){
                                                                                                                tagArray.push(tagData[i].TAG);
                                                                                                }
                                                                                                indicatorData.TAGS = tagArray;
                                                                                                indicatorData.TAG = indicatorData.TAGS.toString(",");
                                                                                                that.OLD_TAGS = tagArray;
                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_TAGS"));
                                                                                });

                                                                                that.oDataModel.read("/PROPERTIES?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE + " and TYPE eq 'IN'", null, null, false, function(propertiesData) {
                                                                                                propertiesData = propertiesData.results;
                                                                                                var propertiesArray = [];
                                                                                                var i;
                                                                                                for(i=0;i<propertiesData.length;i++){
                                                                                                                var propertiesObject = {};
                                                                                                                propertiesObject.NAME = propertiesData[i].NAME,
                                                                                                                propertiesObject.VALUE = propertiesData[i].VALUE

                                                                                                                propertiesArray.push(propertiesObject);
                                                                                                }
                                                                                                indicatorData.PROPERTIES = propertiesArray;
                                                                                                that.OLD_PROPERTIES = $.extend(true,[], propertiesArray);
                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_PROPERTIES"));
                                                                                });

                                                                                that.oDataModel.read("/INDICATOR_TEXTS?$filter=ID eq '" + indicatorData.ID + "' and IS_ACTIVE eq " + indicatorData.IS_ACTIVE, null, null, false, function(languageData) {
                                                                                                languageData = languageData.results;
                                                                                                var additionalLanguageData = [];
                                                                                                var i;
                                                                                                for(i=0;i<languageData.length;i++){
                                                                                                                if(languageData[i].LANGUAGE != that.localLanguage){
                                                                                                                                additionalLanguageData.push(languageData[i]);
                                                                                                                }
                                                                                                }
                                                                                                var languageArray = [];
                                                                                                var i;
                                                                                                for(i=0;i<additionalLanguageData.length;i++){
                                                                                                                var languageObject = {};
                                                                                                                languageObject.ADDITIONAL_LANGUAGE_TITLE = additionalLanguageData[i].TITLE;
                                                                                                                languageObject.ADDITIONAL_LANGUAGE_DESCRIPTION = additionalLanguageData[i].DESCRIPTION;
                                                                                                                languageObject.ADDITIONAL_LANGUAGE_SPRAS_KEY = additionalLanguageData[i].LANGUAGE;
                                                                                                                that.oDataModel.read("/LANGUAGE?$filter=SPRAS eq '"+additionalLanguageData[i].LANGUAGE+"'", null, null, false, function(data) {
                                                                                                                                languageObject.ADDITIONAL_LANGUAGE_KEY = data.results[0].LAISO;
                                                                                                                });
                                                                                                                languageArray.push(languageObject);
                                                                                                }
                                                                                                indicatorData.ADDITIONAL_LANGUAGE_ARRAY = languageArray;
                                                                                                indicatorData.NO_OF_ADDITIONAL_LANGUAGES = indicatorData.ADDITIONAL_LANGUAGE_ARRAY.length; 
                                                                                                that.OLD_ADDITIONAL_LANGUAGE_ARRAY = languageArray;
                                                                                },function(error){
                                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_FETCHING_ADDITIONAL_LANGUAGES"));
                                                                                });

                                                                                that.kpiCreateModel.setData(indicatorData);
                                                                                that.getView().setModel(that.kpiCreateModel);

                                                                                if(indicatorData.MODE == "EDIT"){
                                                                                                that.getView().byId("kpiId").setEditable(false);
                                                                                }

                                                                },function(error){
                                                                                sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("YMSG_ERROR_RETRIEVING_DATA"));
                                                                });
				 */

			}
			var form = that.getView().byId('kpiParameterInputForm');
			form.addContent(new sap.m.Label({
				text : that.oResourceBundle.getText("PROPERTY_NAME_VALUE")
			}));

			if (that.viewData.mode === "EDIT" || that.viewData.mode === "DUPLICATE") {
				that.byId("odataServiceInput").fireChange();
			}

			that.getView().byId("propertyNameValueBox").bindAggregation("items", "/PROPERTIES", function(a, b) {
				return new sap.ui.layout.Grid({
					content : [new sap.m.Input({
						value : "{NAME}",
						layoutData : new sap.ui.layout.GridData({
							span : "L4 M4 S4"
						})
					}), new sap.m.Input({
						value : "{VALUE}",
						layoutData : new sap.ui.layout.GridData({
							span : "L4 M4 S4"
						})
					}), new sap.m.Button({
						icon : "sap-icon://sys-cancel",
						type : "Transparent",
						layoutData : new sap.ui.layout.GridData({
							span : "L2 M2 S2"
						}),
						press : function(evt) {
							that.removeProperty(evt);
						}
					})],
					defaultSpan : "L12 M12 S12"
				}).addStyleClass("propertyEntryGrid");
			});

		});
	},

	onAfterRendering: function() {
		this.byId("kpiGoalTypeSelect").setTooltip(this.byId("kpiGoalTypeSelect").getSelectedItem().getText());
	},
	
	setFooterOnError : function(){
		var that = this;
		
		if(this.editDraft === true){
			if(this.errorMessages.length > 1){
				this.setHeaderFooterOptions(this.oErrorOptionsForDraft);
			}
			else{
				this.setHeaderFooterOptions(this.editDraftOptions);
			}
		}
		else{
			if(this.errorMessages.length > 1){
				this.setHeaderFooterOptions(this.oErrorOptions);
			}
			else{
				this.setHeaderFooterOptions(this.oOptions);
			}
		}
	},

	save : function() {

		var that = this;
		that.errorMessages = [];
		this.errorState = false;
		var successStatus = this.saveKpiDetails();
		if(successStatus){
			if(this.viewData.IS_DRAFT){
				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
			}
			else{
				if(sap.suite.ui.smartbusiness.modelerAppCache && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=0)"});
				}
				else{
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
				}
			}
		}
		else{
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(this);
		}
	},

	activateAndAddEvaluation : function() {
		var that=this;
		var successStatus = false;
		var activationStatus = false;
		that.errorMessages = [];
		that.errorState = false;
		successStatus = this.saveKpiDetails();
		if(successStatus){
			var payload = {
					ID : this.getView().getModel().getData().ID
			};
			//Adapter Implementation ---->> NOT DONE

			that.metadataRef.create('ACTIVATE_INDICATOR',payload,null,function(data){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_KPI_SUCCESS"));
				}
				else{
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_OPI_SUCCESS"));
				}
				activationStatus = true;
			},function(error){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_KPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_KPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				else{
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_OPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_OPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				activationStatus = false;
			});                                           
		}
		else{
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(this);
		}
		if(activationStatus){
			sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "addEvaluation", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
		}

	},

	saveAndCreateNew : function() {

		var that = this;
		this.errorMessages = [];
		this.errorState = false;
		var successStatus = this.saveKpiDetails();
		if(successStatus){

			var kpiModelData = {};
			kpiModelData.MODE = "CREATE";
			kpiModelData.NO_OF_ADDITIONAL_LANGUAGES = 0;
			kpiModelData.ADDITIONAL_LANGUAGE_ARRAY = [];
			kpiModelData.GOAL_TYPE = "MA";
			kpiModelData.KPITYPE = true;
			kpiModelData.OPITYPE = false;
			kpiModelData.TYPE = "KPI";
			this.kpiCreateModel.setData(kpiModelData);

			this.getView().setModel(this.kpiCreateModel);
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().byId("KPI").setSelected(true);
			this.getView().byId("OPI").setSelected(false);
			this.getView().getModel().updateBindings();

			this.getView().byId('kpiId').setEditable(true);
			this.getView().byId('viewInput').fireChange();
			this.kpiModelDataForDirtyBitCheck = $.extend(true,{},kpiModelData);
			sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPI"});
			that.generateKpiId(that);
		}
		else{
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(this);
		}

	},

	activateAndCreateNew : function(){
		var that = this;
		this.errorMessages = [];
		this.errorState = false;
		var successStatus = this.saveKpiDetails();
		if(successStatus){
			var payload = {
					ID : this.getView().getModel().getData().ID
			};

			/// Adapter Implementation ---->> NOT DONE

			that.metadataRef.create('ACTIVATE_INDICATOR',payload,null,function(data){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_KPI_SUCCESS"));
				}
				else{
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_OPI_SUCCESS"));
				}
				activationStatus = true;
			},function(error){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_KPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_KPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				else{
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_OPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_KPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				activationStatus = false;
			});

		}

		if(activationStatus){

			var kpiModelData = {};
			kpiModelData.MODE = "CREATE";
			kpiModelData.NO_OF_ADDITIONAL_LANGUAGES = 0;
			kpiModelData.ADDITIONAL_LANGUAGE_ARRAY = [];
			kpiModelData.GOAL_TYPE = "MA";
			kpiModelData.KPITYPE = true;
			kpiModelData.OPITYPE = false;
			kpiModelData.TYPE = "KPI";
			this.kpiCreateModel.setData(kpiModelData);

			this.getView().setModel(this.kpiCreateModel);
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().byId("KPI").setSelected(true);
			this.getView().byId("OPI").setSelected(false);
			this.getView().getModel().updateBindings();

			this.getView().byId('kpiId').setEditable(true);
			this.getView().byId('viewInput').fireChange();
			this.kpiModelDataForDirtyBitCheck = $.extend(true,{},kpiModelData);
			sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPI"});
			that.generateKpiId(that);
		}
	},

	saveAndActivate : function(){
		var that=this;
		var  successStatus = false;
		var activationStatus = false;
		this.errorMessages =[];
		this.errorState = false;
		successStatus = this.saveKpiDetails();
		if(successStatus){
			var payload = {
					ID : this.getView().getModel().getData().ID
			};

			/// Adapter Implementation ---->> NOT DONE

			that.metadataRef.create('ACTIVATE_INDICATOR',payload,null,function(data){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_KPI_SUCCESS"));
				}
				else{
					sap.m.MessageToast.show(that.oResourceBundle.getText("ACTIVATE_OPI_SUCCESS"));
				}
				activationStatus = true;
			},function(error){
				if(that.getView().getModel().getData().TYPE == "KPI"){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_KPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_KPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				else{
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ACTIVATE_OPI_ERROR"));
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ACTIVATE_OPI_ERROR")
					});
					sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
				}
				activationStatus = false;
			});

		}

		if(activationStatus){

			if(sap.suite.ui.smartbusiness.modelerAppCache && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+this.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});
			}
			else{
				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
			}
		}
	},

	deleteDraft : function(){
		var that=this;
		var backDialog = new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that.oResourceBundle.getText("WARNING"),
			state:"Warning",
			type:"Message",
			content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_DELETE_DRAFT_KPI_OPI")})],
			beginButton: new sap.m.Button({
				text:that.oResourceBundle.getText("OK"),
				press: function(){
					backDialog.close();
					that.callDeleteDraft();
				}
			}),
			endButton: new sap.m.Button({
				text:that.oResourceBundle.getText("CANCEL"),
				press:function(){
					backDialog.close();
				}
			})                                                        
		});
		backDialog.open();
	},

	callDeleteDraft: function() {
		var that = this;
		var payload = {};
		payload.ID = that.viewData.ID;
		payload.IS_ACTIVE = that.viewData.IS_ACTIVE;

		///Adapter Implementation ---->> NOT DONE

		that.metadataRef.remove('INDICATOR',payload,function(data){
			if(that.getView().getModel().getData().TYPE == "KPI"){
				sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_DELETE"));
			}
			else{
				sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_DELETE"));
			}
			sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: "INDICATORS_MODELER(ID='"+that.getView().getModel().getData().ID+"',IS_ACTIVE=1)"});

		},function(error){
			if(that.getView().getModel().getData().TYPE == "KPI"){
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_DELETE"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_KPI_DELETE")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
			else{
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_DELETE"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_OPI_DELETE")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
		});
	},

	cancel : function() {
		var that=this;
		var indicatorChanged = false;
		var languageChanged = false;
		var tagChanged = false;
		var propertiesChanged = false;

		if(this.route === "createKpi"){

			if(that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY && that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY.length){
				languageChanged = true;
			}
			if((that.kpiCreateModel.getData().TAGS && that.kpiCreateModel.getData().TAGS.length) || that.kpiCreateModel.getData().TAG){
				tagChanged = true;
			}
			if(that.kpiCreateModel.getData().PROPERTIES && that.kpiCreateModel.getData().PROPERTIES.length){
				propertiesChanged = true;
			}

			delete that.kpiModelDataForDirtyBitCheck.ADDITIONAL_LANGUAGE_ARRAY;
			delete that.kpiModelDataForDirtyBitCheck.TAG;
			delete that.kpiModelDataForDirtyBitCheck.TAGS;
			delete that.kpiModelDataForDirtyBitCheck.PROPERTIES;
			delete that.kpiCreateModel.getData().ADDITIONAL_LANGUAGE_ARRAY;
			delete that.kpiCreateModel.getData().TAG;
			delete that.kpiCreateModel.getData().TAGS;
			delete that.kpiCreateModel.getData().PROPERTIES;

			var indicatorDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
				oldPayload : that.kpiModelDataForDirtyBitCheck,
				newPayload : that.kpiCreateModel.getData(),
				objectType : "INDICATORS"
			});

			if(indicatorDeltaObject && indicatorDeltaObject.updates.length){
				indicatorChanged = true;
			}

			if(indicatorChanged || languageChanged || tagChanged || propertiesChanged){

				var backDialog = new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oResourceBundle.getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_UNSAVED_MESSAGE")})],
					beginButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CONTINUE"),
						press: function(){
							backDialog.close();
							window.history.back();
						}
					}),
					endButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CANCEL"),
						press:function(){
							backDialog.close();
						}
					})                                                        
				});
				backDialog.open();
			}
			else{
				window.history.back();
			}
		}

		else{

			var indicatorDelta = that.getIndicatorChanges();
			var tagDelta = that.getTagChanges();
			var propertiesDelta = that.getPropertiesChanges();
			var languageDelta = that.getLanguageChanges();

			if(indicatorDelta && (indicatorDelta.updates.length)){
				indicatorChanged = true;
			}

			if(languageDelta && (languageDelta.updates.length || languageDelta.deletes.length)){
				languageChanged = true;
			}
			if(tagDelta &&(tagDelta.updates.length || tagDelta.deletes.length)){
				tagChanged = true;
			}

			if(propertiesDelta && (propertiesDelta.updates.length || propertiesDelta.deletes.length)){
				propertiesChanged = true;
			}

			if(indicatorChanged || languageChanged || tagChanged || propertiesChanged){
				var backDialog = new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oResourceBundle.getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oResourceBundle.getText("WARNING_UNSAVED_MESSAGE")})],
					beginButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CONTINUE"),
						press: function(){
							backDialog.close();
							window.history.back();
//							if(sap.suite.ui.smartbusiness.modelerAppCache && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
//	if(that.context) {
//	if(that.route == "editKpi" || that.route == "duplicateKpi") {
//	sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER")});
//}
//else if(that.route == "editDraftKpi") {
//	sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER").replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//							}
//							}
//							else {
//							sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace"});
//							}
//							}
//							else {
//							sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
//							}
						}
					}),
					endButton: new sap.m.Button({
						text:that.oResourceBundle.getText("CANCEL"),
						press:function(){
							backDialog.close();
						}
					})                                                        
				});
				backDialog.open();
			}
			else{
				window.history.back();
//				if(sap.suite.ui.smartbusiness.modelerAppCache && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
//				if(that.context) {
//				if(that.route == "editKpi" || that.route == "duplicateKpi") {
//				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER")});
//				}
//				else if(that.route == "editDraftKpi") {
//				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace", route: "detail", context: that.context.sPath.substr(1).replace("INDICATORS","INDICATORS_MODELER").replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//				}
//				}
//				else {
//				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "SBWorkspace"});
//				}
//				}
//				else {
//				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
//				}
			}
		}
	},

	saveKpiDetails : function() {

		//Adapter Implementation ---->> NOT DONE

		var that = this;
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var successStatus = true;
		var data = {
				errorMsg : []
		};

		//usability improvement - Save appParams without explicit click on "+"
		that.isPropertyAdded = true;
		if(that.getView().byId("kpiPropertyName").getValue() || that.getView().byId("kpiPropertyValue").getValue()){
			that.addNewProperty();
		}
		if(!that.isPropertyAdded){
			return;
		}

		var indicatorPayload = {
				"ID" :    kpiDetailsModelData.ID || "",
				"IS_ACTIVE" : 0,
				"INDICATOR":{
					"DESCRIPTION" : kpiDetailsModelData.DESCRIPTION || "",
					"GOAL_TYPE" : kpiDetailsModelData.GOAL_TYPE || "",
					"TITLE" : kpiDetailsModelData.TITLE || "",
					"TYPE" : kpiDetailsModelData.TYPE || "",
					"OWNER_E_MAIL" : kpiDetailsModelData.OWNER_E_MAIL || "",
					"OWNER_ID" : kpiDetailsModelData.OWNER_ID || "",
					"OWNER_NAME" : kpiDetailsModelData.OWNER_NAME || "",
					"COLUMN_NAME" : kpiDetailsModelData.COLUMN_NAME || "",
					"DATA_SPECIFICATION" : kpiDetailsModelData.DATA_SPECIFICATION || "",
					"ODATA_URL" : kpiDetailsModelData.ODATA_URL || "",
					"ODATA_ENTITYSET" : kpiDetailsModelData.ODATA_ENTITYSET || "",
					"VIEW_NAME" : kpiDetailsModelData.VIEW_NAME || "",
					"ENTITY_TYPE" : "",
					"SEMANTIC_OBJECT" : kpiDetailsModelData.SEMANTIC_OBJECT || "",
					"ACTION" : kpiDetailsModelData.ACTION || ""
				}
		};

		if (!indicatorPayload.ID) {
			if(this.getView().getModel().getData().TYPE === "KPI"){
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_KPI_ID")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_KPI_ID"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;
			}
			else{
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_OPI_ID")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_OPI_ID"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;			
			}
			successStatus = false;
		}

		if (that.byId("kpiId").getValueState() === "Error") {
			if(that.kpiIdEval_reason == "NOT_START_WITH_PERIOD") {
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_CDS_KPI_ID_BEGIN_WITH_PERIOD")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_CDS_KPI_ID_BEGIN_WITH_PERIOD"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;			
				that.kpiIdEval_reason = null;
			} else if(that.kpiIdEval_reason == "_START_WITH_PERIOD") {
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_HANA_KPI_ID_BEGIN_WITH_PERIOD")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_HANA_KPI_ID_BEGIN_WITH_PERIOD"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;			
				that.kpiIdEval_reason = null;
			} else {
				if(that.byId("kpiId").getValue()){
					that.errorMessages.push({
						"type":"Error",
						"title":that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_ID")
					});
					data.errorMsg.push({
						text : that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_ID"),
						icon : "sap-icon://error",
						state : sap.ui.core.ValueState.Error
					});
					this.errorState = true;
				}
			}
			successStatus = false;
		}
		if (!this.validateKpiTitle()) {
			if(this.getView().getModel().getData().TYPE === "KPI"){
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_TITLE")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_TITLE"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;
			}
			else{
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_OPI_TITLE")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_OPI_TITLE"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;
			}
		}

		if(!indicatorPayload.INDICATOR.TITLE){
			if(this.getView().getModel().getData().TYPE === "KPI"){
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_KPI_TITLE")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_KPI_TITLE"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;			
			}
			else{
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ERROR_ENTER_OPI_TITLE")
				});
				data.errorMsg.push({
					text : that.oResourceBundle.getText("ERROR_ENTER_OPI_TITLE"),
					icon : "sap-icon://error",
					state : sap.ui.core.ValueState.Error
				});
				this.errorState = true;			
			}
			this.getView().byId('kpiTitle').setValueState("Error");
			successStatus = false;
		}
		if(that.byId("kpiOwnerEmail").getValueState() === "Error"){
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_EMAIL")
			});
			data.errorMsg.push({
				text : that.oResourceBundle.getText("ERROR_ENTER_VALID_KPI_EMAIL"),
				icon : "sap-icon://error",
				state : sap.ui.core.ValueState.Error
			});
			this.errorState = true;			
			successStatus = false;
		}

		if(that.byId("semanticObject").getValueState() === "Error"){
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT")
			});
			data.errorMsg.push({
				text : that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT"),
				icon : "sap-icon://error",
				state : sap.ui.core.ValueState.Error
			});
			this.errorState = true;			
		}
		if (that.byId("action").getValueState() === "Error") {
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT")
			});
			data.errorMsg.push({
				text : that.oResourceBundle.getText("ERROR_ENTER_VALID_SEMANTIC_OBJECT"),
				icon : "sap-icon://error",
				state : sap.ui.core.ValueState.Error
			});
			this.errorState = true;			
		}
		
		var oTable = new sap.m.Table({
			columns : [new sap.m.Column({
				header : new sap.m.Text({
					text : that.oResourceBundle.getText("ERRORHEADERSAVE")
				})
			})]
		});
		var oTemplate = new sap.m.ColumnListItem({
			cells : [
			         new sap.ui.layout.Grid({        
			        	 vSpacing:0,
			        	 hSpacing:1,
			        	 content:[
			        	          new sap.m.ObjectStatus({
			        	        	  icon:"{icon}",
			        	        	  state:"{state}",
			        	        	  layoutData: new sap.ui.layout.GridData({span: "L2 M2 S2"})
			        	          }),
			        	          new sap.m.Text({
			        	        	  maxLines:3, 
			        	        	  text : "{text}",
			        	        	  layoutData: new sap.ui.layout.GridData({span: "L10 M10 S10"})
			        	          })
			        	          ]
			         })]
		});
		this.setFooterOnError();
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(data);
		oTable.setModel(oModel);
		oTable.bindAggregation("items", "/errorMsg", oTemplate);
		if(this.errorState){
			var oDialog = new sap.m.Dialog({
				icon:"sap-icon://error",
				content: [oTable],
				contentWidth : "25%",
				title: that.oResourceBundle.getText("ERRORCOUNT",data.errorMsg.length),
				state: "Error",
				buttons : [new sap.m.Button({
					text : that.oResourceBundle.getText("OK"),
					press : function(){
						oDialog.close();
					}
				})]
			});
			oDialog.open();
			return;
		}


		if(!that.errorState){
			if(this.viewData.mode == "DUPLICATE"){
				if(!this.validateKpiId()){
					return;
				}
			}
			if(that.viewData.mode == "CREATE" || that.viewData.mode == "DUPLICATE" || (that.viewData.mode == "EDIT" && this.viewData.IS_ACTIVE == 1)){
				indicatorPayload.TEXTS = [];
				indicatorPayload.TAGS = [];
				indicatorPayload.PROPERTIES = [];
				var languagePayload = that.insertLanguagePayload();
				var propertiesPayload = that.insertPropertiesPayload();
				var tagPayload = that.insertTagPayload();

				if(languagePayload.length){
					indicatorPayload.TEXTS = languagePayload;
				}
				if(propertiesPayload.length){
					indicatorPayload.PROPERTIES = 	propertiesPayload;
				}
				if(tagPayload.length){
					indicatorPayload.TAGS = tagPayload;
				}

				var kpiPayload = {payload:indicatorPayload};
				kpiPayload.keys = {};
				kpiPayload.keys.ID = indicatorPayload.ID;
				kpiPayload.keys.IS_ACTIVE = indicatorPayload.IS_ACTIVE;
				delete kpiPayload.ID;
				delete kpiPayload.IS_ACTIVE;

				that.metadataRef.create('INDICATOR',kpiPayload,null,function(data){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_SAVE"));
					}
					else{
						sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_SAVE"));
					}
					successStatus = true;
				},function(error){
					if(that.getView().getModel().getData().TYPE == "KPI"){
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_SAVE"));
						that.errorMessages.push({
							"type":"Error",
							"title":that.oResourceBundle.getText("ERROR_KPI_SAVE")
						});
						sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
					}
					else{
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_SAVE"));
						that.errorMessages.push({
							"type":"Error",
							"title":that.oResourceBundle.getText("ERROR_OPI_SAVE")
						});
						sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
					}
					successStatus = false;	
				});
			}
			else if(that.viewData.mode == "EDIT"){

				indicatorPayload.TEXTS = {};
				indicatorPayload.TAGS = {};
				indicatorPayload.PROPERTIES = {};

				var indicatorChanged = false;
				var languageChanged = false;
				var tagChanged = false;
				var propertiesChanged = false;

				var indicatorDeltaObject = that.getIndicatorChanges();

				if(indicatorDeltaObject){
					if(indicatorDeltaObject.updates.length){
						indicatorChanged = true;
						indicatorPayload.INDICATOR = {};
						for(var i=0;i<indicatorDeltaObject.updates.length;i++){
							indicatorPayload.INDICATOR.update = indicatorDeltaObject.updates[i];
						}
					}
				}

				var languageDeltaObject = that.getLanguageChanges(); 
				if(languageDeltaObject){
					if(languageDeltaObject.deletes.length){
						languageChanged = true;
						for(var i=0;i<languageDeltaObject.deletes.length;i++){
							indicatorPayload.TEXTS.remove = languageDeltaObject.deletes;
						}
					}
					if(languageDeltaObject.updates.length){
						languageChanged = true;
						for(var i=0;i<languageDeltaObject.updates.length;i++){
							indicatorPayload.TEXTS.create = languageDeltaObject.updates;
						}
					}
				}

				var tagDeltaObject = that.getTagChanges();

				if(tagDeltaObject){
					if(tagDeltaObject.deletes.length){
						tagChanged = true;
						for(var i=0;i<tagDeltaObject.deletes.length;i++){
							indicatorPayload.TAGS.remove = tagDeltaObject.deletes;
						}
					}
					if(tagDeltaObject.updates.length){
						tagChanged = true;
						for(var i=0;i<tagDeltaObject.updates.length;i++){
							indicatorPayload.TAGS.create = tagDeltaObject.updates;
						}
					}
				}

				var propertiesDeltaObject = that.getPropertiesChanges();

				if(propertiesDeltaObject){
					if(propertiesDeltaObject.deletes.length){
						propertiesChanged = true;
						for(var i=0;i<propertiesDeltaObject.deletes.length;i++){
							indicatorPayload.PROPERTIES.remove = propertiesDeltaObject.deletes;
						}
					}
					if(propertiesDeltaObject.updates.length){
						propertiesChanged = true;
						for(var i=0;i<propertiesDeltaObject.updates.length;i++){
							indicatorPayload.PROPERTIES.create = propertiesDeltaObject.updates;
						}
					}
					
				}
				if(indicatorChanged || tagChanged || propertiesChanged || languageChanged){
					
					var kpiPayload = {payload:indicatorPayload};
					kpiPayload.keys = {};
					kpiPayload.keys.ID = indicatorPayload.ID;
					kpiPayload.keys.IS_ACTIVE = indicatorPayload.IS_ACTIVE;
					delete kpiPayload.ID;
					delete kpiPayload.IS_ACTIVE;
					
					that.metadataRef.update('INDICATOR',kpiPayload,null,function(data){
						if(that.getView().getModel().getData().TYPE == "KPI"){
							sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_KPI_SAVE"));
						}
						else{
							sap.m.MessageToast.show(that.oResourceBundle.getText("SUCCESS_OPI_SAVE"));
						}
						successStatus = true;
					},function(error){
						if(that.getView().getModel().getData().TYPE == "KPI"){
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_KPI_SAVE"));
							that.errorMessages.push({
								"type":"Error",
								"title":that.oResourceBundle.getText("ERROR_KPI_SAVE")
							});
							sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
						}
						else{
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_OPI_SAVE"));
							that.errorMessages.push({
								"type":"Error",
								"title":that.oResourceBundle.getText("ERROR_OPI_SAVE")
							});
							sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
						}
						successStatus = false;	
					});
				}
			}
		}
		return successStatus;
	},

	getIndicatorChanges : function(){

		var oldIndicatorPayloadData = this.indicatorPayloadForDirtyBitTest;
		var newIndicatorPayloadData = this.kpiCreateModel.getData();

		var oldPayload = {
				"DESCRIPTION" : oldIndicatorPayloadData.DESCRIPTION || "",
				"GOAL_TYPE" : oldIndicatorPayloadData.GOAL_TYPE || "",
				"TITLE" : oldIndicatorPayloadData.TITLE || "",
				"TYPE" : oldIndicatorPayloadData.TYPE || "",
				"OWNER_E_MAIL" : oldIndicatorPayloadData.OWNER_E_MAIL || "",
				"OWNER_ID" : oldIndicatorPayloadData.OWNER_ID || "",
				"OWNER_NAME" : oldIndicatorPayloadData.OWNER_NAME || "",
				"COLUMN_NAME" : oldIndicatorPayloadData.COLUMN_NAME || "",
				"DATA_SPECIFICATION" : oldIndicatorPayloadData.DATA_SPECIFICATION || "",
				"ODATA_URL" : oldIndicatorPayloadData.ODATA_URL || "",
				"ODATA_ENTITYSET" : oldIndicatorPayloadData.ODATA_ENTITYSET || "",
				"VIEW_NAME" : oldIndicatorPayloadData.VIEW_NAME || "",
				"ENTITY_TYPE" : "",
				"SEMANTIC_OBJECT" : oldIndicatorPayloadData.SEMANTIC_OBJECT || "",
				"ACTION" : oldIndicatorPayloadData.ACTION || ""	
		};

		var newPayload = {
				"DESCRIPTION" : newIndicatorPayloadData.DESCRIPTION || "",
				"GOAL_TYPE" : newIndicatorPayloadData.GOAL_TYPE || "",
				"TITLE" : newIndicatorPayloadData.TITLE || "",
				"TYPE" : newIndicatorPayloadData.TYPE || "",
				"OWNER_E_MAIL" : newIndicatorPayloadData.OWNER_E_MAIL || "",
				"OWNER_ID" : newIndicatorPayloadData.OWNER_ID || "",
				"OWNER_NAME" : newIndicatorPayloadData.OWNER_NAME || "",
				"COLUMN_NAME" : newIndicatorPayloadData.COLUMN_NAME || "",
				"DATA_SPECIFICATION" : newIndicatorPayloadData.DATA_SPECIFICATION || "",
				"ODATA_URL" : newIndicatorPayloadData.ODATA_URL || "",
				"ODATA_ENTITYSET" : newIndicatorPayloadData.ODATA_ENTITYSET || "",
				"VIEW_NAME" : newIndicatorPayloadData.VIEW_NAME || "",
				"ENTITY_TYPE" : "",
				"SEMANTIC_OBJECT" : newIndicatorPayloadData.SEMANTIC_OBJECT || "",
				"ACTION" : newIndicatorPayloadData.ACTION || ""	
		};

		var indicatorDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : oldPayload,
			newPayload : newPayload,
			objectType : "INDICATORS"
		});

		return indicatorDeltaObject;
	},

	getLanguageChanges : function(){
		var that=this;
		this.languagePayloadForDirtyBitTest = [];
		var newLanguagePayload = this.insertLanguagePayload();
		for(var i=0;i<this.OLD_ADDITIONAL_LANGUAGE_ARRAY.length;i++){
			var languageObject = {};
			languageObject.LANGUAGE = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
			languageObject.TITLE = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
			languageObject.DESCRIPTION = this.OLD_ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;
			this.languagePayloadForDirtyBitTest.push(languageObject);
		}

		var languageDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : that.languagePayloadForDirtyBitTest,
			newPayload : newLanguagePayload,
			objectType : "INDICATOR_TEXTS"
		});

		return languageDeltaObject;
	},

	getTagChanges : function(){
		var that=this;
		this.tagPayloadForDirtyBitTest = [];
		var newTagPayload = this.insertTagPayload();
		var oldTagPayload = [];
		for(var i=0;i<that.OLD_TAGS.length;i++){
			var tagObject = {};
			tagObject.TAG = that.OLD_TAGS[i];
			tagObject.TYPE = "IN";
			this.tagPayloadForDirtyBitTest.push(tagObject);
		}

		var tagDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : that.tagPayloadForDirtyBitTest,
			newPayload : newTagPayload,
			objectType : "TAGS"
		});

		return tagDeltaObject;
	},

	getPropertiesChanges : function(){
		var that=this;
		this.propertiesPayloadForDirtyBitTest = [];
		var newPropertiesPayload = this.insertPropertiesPayload();
		for(var i=0;i<this.OLD_PROPERTIES.length;i++){
			var propertiesObject = {};
			propertiesObject.TYPE = "IN";
			propertiesObject.NAME = that.OLD_PROPERTIES[i].NAME;
			propertiesObject.VALUE = that.OLD_PROPERTIES[i].VALUE;
			this.propertiesPayloadForDirtyBitTest.push(propertiesObject);
		}

		var propertiesDeltaObject = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({
			oldPayload : that.propertiesPayloadForDirtyBitTest,
			newPayload : newPropertiesPayload,
			objectType : "PROPERTIES"
		});

		return propertiesDeltaObject;
	},

	insertLanguagePayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var languagePayload = {};
		var languagePayloadArray = [];
		if(kpiDetailsModelData.NO_OF_ADDITIONAL_LANGUAGES>0){
			var i;
			for (i = 0; i < kpiDetailsModelData.NO_OF_ADDITIONAL_LANGUAGES; i++) {
				languagePayload = {};
				languagePayload.LANGUAGE = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_SPRAS_KEY;
				languagePayload.TITLE = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_TITLE;
				languagePayload.DESCRIPTION = kpiDetailsModelData.ADDITIONAL_LANGUAGE_ARRAY[i].ADDITIONAL_LANGUAGE_DESCRIPTION;

				languagePayloadArray.push(languagePayload);
			}
		}
		return languagePayloadArray;
	},

	insertTagPayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var tagPayload = {};
		var tagPayloadArray = [];
		if (kpiDetailsModelData.TAG) {
			var tagArray = kpiDetailsModelData.TAG.split(",");
			var i;
			for (i = 0; i < tagArray.length; i++) {
				tagPayload = {};
				tagPayload.TYPE = "IN";
				tagPayload.TAG = tagArray[i];

				tagPayloadArray.push(tagPayload);
			}
		}
		return tagPayloadArray;
	},

	insertPropertiesPayload : function(){
		var kpiDetailsModelData = this.kpiCreateModel.getData();
		var propertyPayload = {};
		var propertyPayloadArray = [];
		if (kpiDetailsModelData.PROPERTIES) {
			var i;
			for (i = 0; i < kpiDetailsModelData.PROPERTIES.length; i++) {
				propertyPayload = {};
				propertyPayload.TYPE = "IN";
				propertyPayload.NAME = kpiDetailsModelData.PROPERTIES[i].NAME;
				propertyPayload.VALUE = kpiDetailsModelData.PROPERTIES[i].VALUE;

				propertyPayloadArray.push(propertyPayload);
			}
		}
		return propertyPayloadArray;
	},

	addAdditionalLanguageDialog : function(){

		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData = $.extend([], that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY);
		this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

		this.languageTextInput = new sap.m.Input({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageDescriptionInput = new sap.m.TextArea({
			layoutData : new sap.ui.layout.GridData({
				span : "L8 M8 S8"
			})
		});
		this.languageKeySelect = new sap.m.Select({
			layoutData : new sap.ui.layout.GridData({
				span : "L6 M6 S6"
			})
		});

		this.addedLanguagesList = new sap.m.List({
			showNoData:false,
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});
		
		this.setEnable = function(){
			if(this.addedLanguagesList.getItems().length==0)
			{
				additionalLanguageDialog.getBeginButton().setEnabled(false); //enabling the "OK" button when an entry is added
			}else{
				additionalLanguageDialog.getBeginButton().setEnabled(true);
			}
		}

		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L6 M6 S6",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L4 M4 S4"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Button({
				        	  icon : "sap-icon://sys-cancel",
				        	  type : "Transparent",
				        	  press : function(oEvent){
				        		  var deletedIndex = oEvent.getSource().getBindingContext("additionalLanguageListModel").getPath().substr(1);
				        		  var newData = that.addedLanguagesList.getModel("additionalLanguageListModel").getData().splice(deletedIndex,1);
				        		  that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
				        		  //that.setEnable();
				        	  },
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L2 M2 S2"
				        	  })
				          })
				          ]
			})
		}));

		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oResourceBundle.getText("ADDITIONAL_LANGUAGE"),
			content :  [
			            new sap.ui.layout.Grid({
			            	hSpacing: 1,
			            	vSpacing: 4,
			            	defaultSpan : "L12 M12 S12",
			            	content: [
			            	          new sap.ui.layout.form.SimpleForm({
			            	        	  editable:true, 
			            	        	  layout:"ResponsiveGridLayout", 
			            	        	  content : [
			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("TITLE"),
			            	        	            	 textAlign : "Right",
			            	        	            	 required:true,
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageTextInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("DESCRIPTION"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3",
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageDescriptionInput,

			            	        	             new sap.m.Label({
			            	        	            	 text : that.oResourceBundle.getText("LANGUAGE"),
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L3 M3 S3"
			            	        	            	 })
			            	        	             }),

			            	        	             that.languageKeySelect,

			            	        	             new sap.m.Button({
			            	        	            	 icon:"sap-icon://add",
			            	        	            	 layoutData : new sap.ui.layout.GridData({
			            	        	            		 span : "L2 M2 S2"
			            	        	            	 }),
			            	        	            	 press : function(){
			            	        	            		 if(that.languageTextInput.getValue()==""){
			            	        	            			 that.languageTextInput.setValueState(sap.ui.core.ValueState.Error); 
			            	        	            		 }else{
			            	        	            			 that.languageTextInput.setValueState(sap.ui.core.ValueState.None);
			            	        	            		 }

			            	        	            		 if(that.languageTextInput.getValue()){
			            	        	            			 for(var i=0;i<that.addedLanguagesList.getModel("additionalLanguageListModel").getData().length;i++){
			            	        	            				 if(that.addedLanguagesList.getModel("additionalLanguageListModel").getData()[i].ADDITIONAL_LANGUAGE_KEY === that.languageKeySelect.getSelectedItem().getText()){
			            	        	            					 sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_LANGUAGE_EXISTS",that.languageKeySelect.getSelectedItem().getText()));
			            	        	            					 return;
			            	        	            				 }
			            	        	            			 }

			            	        	            			 var addedLanguageObject = {
			            	        	            					 "ADDITIONAL_LANGUAGE_TITLE" : that.languageTextInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_DESCRIPTION" : that.languageDescriptionInput.getValue(),
			            	        	            					 "ADDITIONAL_LANGUAGE_KEY" : that.languageKeySelect.getSelectedItem().getText(),
			            	        	            					 "ADDITIONAL_LANGUAGE_SPRAS_KEY" : that.languageKeySelect.getSelectedItem().getKey()
			            	        	            			 };
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").getData().push(addedLanguageObject);
			            	        	            			 that.addedLanguagesList.getModel("additionalLanguageListModel").updateBindings();
			            	        	            			 that.languageTextInput.setValue("");
			            	        	            			 that.languageDescriptionInput.setValue("");
			            	        	            		 }
			            	        	            		 that.setEnable();
			            	        	            	 }
			            	        	             })

			            	        	             ]
			            	          })

			            	          ]
			            }).addStyleClass("languageGrid"),

			            that.addedLanguagesList

			            ],

			            beginButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            		that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY = that.addedLanguagesList.getModel("additionalLanguageListModel").getData();
			            		that.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = that.getView().getModel().getData().ADDITIONAL_LANGUAGE_ARRAY.length;
			            		that.getView().getModel().updateBindings();
			            	}
			            }),
			            endButton : new sap.m.Button({
			            	text : that.oResourceBundle.getText("CANCEL"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

		/// Adapter Implementation ----

		var data = jQuery.extend(true, [], that.SAP_LANGUAGE_ARRAY, []);
		for(var i=0;i<data.length;i++){

			if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
				data.splice(i,1);
			}
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(data);
		that.languageKeySelect.setModel(oModel, "otherLanguageKey");
		that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
			text: "{otherLanguageKey>LAISO}",
			key: "{otherLanguageKey>SPRAS}"
		}));

//		var allLanguagesFetchCallBack = function(data) {
//	data = (data.results) ? data.results : data;
//		var i;
//		for(var i=0;i<data.length;i++){

//		if((data[i].LAISO).toUpperCase() == (sap.ui.getCore().getConfiguration().getLocale().getLanguage()).toUpperCase()){
//		data.splice(i,1);
//		}
//		}
//		var oModel = new sap.ui.model.json.JSONModel();
//		oModel.setData(data);
//		that.languageKeySelect.setModel(oModel, "otherLanguageKey");
//		that.languageKeySelect.bindItems("otherLanguageKey>/", new sap.ui.core.Item({
//		text: "{otherLanguageKey>LAISO}",
//		key: "{otherLanguageKey>SPRAS}"
//		}));
//		};

//		this.metadataRef.getDataByEntity({entity:"LANGUAGE", async:false, success:allLanguagesFetchCallBack, model:this.oDataModel});

		/*
                                this.oDataModel.read("/LANGUAGE?$select=LAISO,SPRAS", null, null, false, function(data) {

                                });
		 */

		// disabling the okay button when no additional language is there

		this.setEnable();
		additionalLanguageDialog.open();
	},

	addNewProperty : function() {
		var that=this;

		if (this.getView().byId("kpiPropertyName").getValue()) {
			this.getView().byId("kpiPropertyName").setValueState("None");
			if (this.getView().byId("kpiPropertyValue").getValue()) {
				this.getView().byId("kpiPropertyValue").setValueState("None");
				var propertyModel = this.getView().byId('propertyNameValueBox').getModel();
				propertyModel.getData().PROPERTIES = propertyModel.getData().PROPERTIES || [];
				for(var i=0; i<propertyModel.getData().PROPERTIES.length;i++){
					if((propertyModel.getData().PROPERTIES[i].NAME === this.getView().byId("kpiPropertyName").getValue()) && (propertyModel.getData().PROPERTIES[i].VALUE === this.getView().byId("kpiPropertyValue").getValue())){
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(this.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS"));
						that.errorMessages.push({
							"type":"Error",
							"title":that.oResourceBundle.getText("ERROR_PROPERTY_VALUE_PAIR_EXISTS")
						});
						sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
						return;
					}
				}
				propertyModel.getData().PROPERTIES.push({
					NAME : this.getView().byId("kpiPropertyName").getValue(),
					VALUE : this.getView().byId("kpiPropertyValue").getValue()
				});
				propertyModel.updateBindings();
				this.getView().byId("kpiPropertyName").setValue("");
				this.getView().byId("kpiPropertyValue").setValue("");
			} else {
				that.isPropertyAdded = false;
				this.getView().byId("kpiPropertyValue").setValueState("Error");
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ENTER_PROPERTY_VALUE"));
				that.errorMessages.push({
					"type":"Error",
					"title":that.oResourceBundle.getText("ENTER_PROPERTY_VALUE")
				});
				sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
			}
		} else {
			that.isPropertyAdded = false;
			this.getView().byId("kpiPropertyName").setValueState("Error");
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ENTER_PROPERTY_NAME"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ENTER_PROPERTY_NAME")
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
		}
	},

	removeProperty : function(evt) {
		var path = evt.getSource().getBindingContext().getPath();
		evt.getSource().getBindingContext().getModel().getData().PROPERTIES.splice(path.substring(path.lastIndexOf("/") + 1), 1);
		evt.getSource().getBindingContext().getModel().updateBindings();
	},
	kpiOpiRadioButtonChange : function(oEvent) {
		if (this.getView().byId('KPI').getSelected() == true) {
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
		}
		else{
			this.getView().getModel().getData().TYPE = "OPI";
			this.getView().getModel().getData().KPITYPE = false;
			this.getView().getModel().getData().OPITYPE = true;
		}
		if(this.getView().byId('OPI').getSelected() == true) {
			this.getView().getModel().getData().TYPE = "OPI";
			this.getView().getModel().getData().KPITYPE = false;
			this.getView().getModel().getData().OPITYPE = true;
		}
		else{
			this.getView().getModel().getData().TYPE = "KPI";
			this.getView().getModel().getData().KPITYPE = true;
			this.getView().getModel().getData().OPITYPE = false;
		}
	},


	validateKpiId : function() {
		var kpiIdField = this.getView().byId('kpiId');
		var that=this;
		var successStatus = false;

		var kpiId = kpiIdField.getValue();

		if(this.VIEW_MODE == this.CDS){
			kpiIdField.setValue(kpiId.toUpperCase());
		}
		if (kpiId) {
			/* reserved for test data */
			if(kpiId.lastIndexOf(this.RESERVED_KPI_ID_NAMESPACE, 0) === 0) {
				kpiIdField.setValueState("Error");
				successStatus = false;
			}
			/* CDS kpiIds must begin with PERIOD */
			else if(this.VIEW_MODE == this.CDS && kpiId[0] != '.') {
				this.kpiIdEval_reason = "NOT_START_WITH_PERIOD";
				kpiIdField.setValueState("Error");
				successStatus = false;
			}
			/* Only CDS kpiIds must begin with PERIOD */
			else if(this.VIEW_MODE == this.HANA && kpiId[0] == '.') {
				this.kpiIdEval_reason = "_START_WITH_PERIOD";
				kpiIdField.setValueState("Error");
				successStatus = false;
			}
			else if (!(/^[a-zA-Z0-9.]*$/.test(kpiId)) || kpiId.length > this.valid_maxlength[this.VIEW_MODE].id) {
				kpiIdField.setValueState("Error");
				successStatus = false;
			} else {
				kpiIdField.setValueState("None");

				//// Adapter Implementation ----

				var indicatorCheckCallBack = function(indicatorData) {
					if (indicatorData[0]) {
						kpiIdField.setValueState("Error");
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ID_ALREADY_EXISTS"));
						that.errorMessages.push({
							"type":"Error",
							"title":that.oResourceBundle.getText("ID_ALREADY_EXISTS")
						});
						sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
						successStatus = false;
					} else {
						kpiIdField.setValueState("None");
						successStatus = true;
					}
				};

				var indicatorCheckErrCallBack = function() {
					kpiIdField.setValueState("None");
					successStatus = true;
				};

				this.metadataRef.getDataByEntity({entity:"INDICATORS", filter:"ID eq '" + kpiId + "'", async:false, success:indicatorCheckCallBack, error:indicatorCheckErrCallBack, model:this.oDataModel});
			}
		}
		return successStatus;
	},

	validateKpiTitle : function() {
		var kpiTitleField = this.getView().byId('kpiTitle');
		var kpiTitle = kpiTitleField.getValue();
		if(!kpiTitle) {
			kpiTitleField.setValueState("None");
			return true;
		}

		if (kpiTitle.length > this.valid_maxlength[this.VIEW_MODE].title) {
			kpiTitleField.setValueState("Error");
			return false
		} else {
			kpiTitleField.setValueState("None");
			return true;
		}
	},

	formatAdditionalLanguageLink : function(sValue){
		return this.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGE")+"("+sValue+")";
	},

	formatSemanticActionLabel : function(sValue){
		return sValue+"/"+this.oApplicationFacade.getResourceBundle().getText("ACTION");
	},

	validateEmailAddress : function() {

		var kpiOwnerEmailField = this.getView().byId('kpiOwnerEmail');
		var kpiOwnerEmailValue = kpiOwnerEmailField.getValue();
		if (kpiOwnerEmailValue) {
			if (!(/^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]/.test(kpiOwnerEmailValue))) {
				kpiOwnerEmailField.setValueState("Error");
			} else {
				kpiOwnerEmailField.setValueState("None");
			}
		} else {
			kpiOwnerEmailField.setValueState("None");
		}
	},

	populateRelevantEntitySet : function(dialog) {
		var that = this;
		var modelData = this.getView().getModel().getData();

		//Adapter Implementation ----
		that.metadataRef.populateRelevantEntitySet(dialog, modelData, that);
	},

	populateRelevantEntitySet_CDS : function(dialog) {
		var selectedCDSView_CdsName = encodeURIComponent(this.getView().getModel().getProperty("/VIEW_NAME_CdsName"));
		var selected_odata_url = encodeURIComponent(this.getView().getModel().getProperty("/ODATA_URL"));
		var expandParam = "EntityTypeSet";
		var uri = "/ODATAnameSet(CdsName='" + 
		selectedCDSView_CdsName
		+
		"\',OdataName='',OdataURL='" +
		selected_odata_url
		+
		"',SrvName='',SrvVersion='',SrvNamespace='')/?$expand=" +
		expandParam;

		this.oDataModelCDS.read(uri, null, null, false, function(data) {
			var data = data[expandParam].results;
			var cdsEntitySetModel = new sap.ui.model.json.JSONModel();
			cdsEntitySetModel.setData(data);
			dialog.setModel(cdsEntitySetModel);
			dialog.open();
		});
	},

	/// Adapter Required  ---> NOT DONE

	handleHanaViewValueHelp : function() {
		var that = this;
		var hanaViewValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VIEW"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/HANA_VIEWS",
				template : new sap.m.StandardListItem({
					title : {
						parts : [{
							path : "OBJECT",
							type : new sap.ui.model.type.String()
						}, {
							path : "PACKAGE",
							type : new sap.ui.model.type.String()
						}, {
							path : "SUFFIX",
							type : new sap.ui.model.type.String()
						}],
						formatter : function(o, p, s) {
							if (s.indexOf("view") != -1)
								return p + "/" + o;
							else
								return p + "::" + o;
						}
					},
					description : "{SUFFIX}"
				})
			},
			confirm : function(oEvent) {
				that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				that.byId("viewInput").fireChange();
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
			}
		});

		hanaViewValueHelpDialog.setModel(this.oDataModel);
		hanaViewValueHelpDialog.open();

		//Adapter Implementation Fail ---->> SelectDialog liveChange fails on json binding

		//var views = that.metadataRef.getAllViews({async:false, model:that.oDataModel}); 
		//var viewsModel = new sap.ui.model.json.JSONModel();
		//viewsModel.setData({HANA_VIEWS:views});
		//hanaViewValueHelpDialog.setModel(viewsModel);

	},

	/*pick @CDS view*/
	handleCDSViewValueHelp : function() {
		var that = this;
		var hanaViewValueHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_VIEW"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/",
				template : new sap.m.StandardListItem({
					title : {
						parts : [{
							path : "PackName",
							type : new sap.ui.model.type.String()
						}, {
							path : "CdsName",
							type : new sap.ui.model.type.String()
						}],
						formatter : function(p, c) {
							return p + "::" + c;
						}
					}
				})
			},
			confirm : function(oEvent) {
				that.getView().getModel().setProperty("/VIEW_NAME", oEvent.getParameter("selectedItem").getProperty("title"));
				that.getView().getModel().setProperty("/VIEW_NAME_CdsName", oEvent.getParameter("selectedItem").getBindingContext().getProperty("CdsName"));
				that.getView().getModel().setProperty("/VIEW_NAME_PackName", oEvent.getParameter("selectedItem").getBindingContext().getProperty("PackName"));
				that.byId("viewInputCDS").fireChange();
			},
			liveChange : function(oEvent) {
				var i, s, s1, s2, both;
				/* can expect syntax <PackName>::<CdsName> */
				s = s1 = s2 = oEvent.getParameter("value").toUpperCase();
				both = false;
				if((i = s.lastIndexOf("::")) !== -1) {
					s1 = s.substring(0, i);
					s2 = s.substring(i + 2, s.length);
					both = true;
				}
				var oFilterPackage = new sap.ui.model.Filter("PackName", sap.ui.model.FilterOperator.Contains,s1);
				var oFilterObject = new sap.ui.model.Filter("CdsName", sap.ui.model.FilterOperator.Contains,s2);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], both));
			}
		});
		this.oDataModelCDS.read("/CDSViewSet", null, null, false, function(data) {
			var data = data.results;
			var cdsViewListModel = new sap.ui.model.json.JSONModel();
			cdsViewListModel.setData(data);
			hanaViewValueHelpDialog.setModel(cdsViewListModel);
		});
		hanaViewValueHelpDialog.open();
	},

	handleHanaViewInputChange : function(){
		this.getView().getModel().getData().ODATA_URL = "";
		this.getView().getModel().getData().ODATA_ENTITYSET = "";
		this.getView().getModel().getData().COLUMN_NAME = "";
		this.getView().getModel().updateBindings();
	},

	handleOdataServiceValueHelp:function(){
		var that = this;
		if(!that.byId("viewInput").getValue()){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_HANA_VIEW"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_HANA_VIEW")
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);
		}
		else{
			var selectedHanaView = that.getView().getModel().getProperty("/VIEW_NAME");
			selectedHanaView = (selectedHanaView.indexOf("/") != -1 ? selectedHanaView.split("/") : selectedHanaView
					.split("::"));
			var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/ODATA_FOR_ENTITY(P_PACKAGE='" + selectedHanaView[0] + "',P_OBJECT='" + selectedHanaView[1] + "')/Results",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "PACKAGE",
								type : new sap.ui.model.type.String()
							}, {
								path : "OBJECT",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o, p, s) {
								o = o.replace(/\./g, '/');
								return "/" + o + "/" + p + ".xsodata";
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
					var oFilterPackage = new sap.ui.model.Filter("tolower(PACKAGE)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage, oFilterObject], false));
				}
			});
			hanaOdataServiceHelpDialog.setModel(that.oDataModel);
			hanaOdataServiceHelpDialog.open();
		}
	},

	/*pick @CDS odata*/
	handleOdataServiceValueHelpCDS:function(){
		var that = this;
		if(!that.byId("viewInputCDS").getValue()){
			var readUri = "/PackOdataSet";
			var expandParam = null;
		}
		else{
			var selectedCDSView_CdsName = encodeURIComponent(that.getView().getModel().getProperty("/VIEW_NAME_CdsName"));
			var selectedCDSView_PackName = encodeURIComponent(that.getView().getModel().getProperty("/VIEW_NAME_PackName"));
			var readUri = "/CDSViewSet(CdsName='" + selectedCDSView_CdsName + "')/?$expand=ODATAnameSet";
			var expandParam = "ODATAnameSet";
		}
		var hanaOdataServiceHelpDialog = new sap.m.SelectDialog({
			title : that.oResourceBundle.getText("SELECT_ODATA_SERVICE"),
			noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
			items : {
				path : "/",
				template : new sap.m.StandardListItem({
					title : {
						parts : [{
							path : "OdataURL",
							type : new sap.ui.model.type.String()
						}],
						formatter : function(o) {
							/* strip the hostname and querystring */
							return (function(h) {return jQuery("<a>").attr("href",h)[0]["pathname"]})(o);
						}
					},
				})
			},
			confirm : function(oEvent) {
				that.getView().getModel().setProperty("/ODATA_URL", oEvent.getParameter("selectedItem").getProperty("title"));
			},
			liveChange : function(oEvent) {
				var searchValue = oEvent.getParameter("value");
				var oFilterPackage = new sap.ui.model.Filter("OdataURL", sap.ui.model.FilterOperator.Contains,searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
			}
		});

		this.oDataModelCDS.read(readUri, null, null, false, function(data) {
			var data = expandParam ? data[expandParam].results : data.results;
			var cdsViewListModel = new sap.ui.model.json.JSONModel();
			cdsViewListModel.setData(data);
			hanaOdataServiceHelpDialog.setModel(cdsViewListModel);
		});
		hanaOdataServiceHelpDialog.open();
	},

	handleEntitySetValueHelp : function(){
		var that = this;
		var odataFieldId = this.VIEW_MODE == this.CDS ? "odataServiceInputCDS" : "odataServiceInput";
		if(!that.byId(odataFieldId).getValue()){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ODATA_SERVICE_URL"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_ODATA_SERVICE_URL")
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);

		}
		else{
			var that = this;
			that.oModelForEntity;

			var hanaEntitySetHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/entitySet",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "entityName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = oEvent.getParameter("value");
					var oFilterPackage = new sap.ui.model.Filter("entityName", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}

			});

			var CDSEntitySetHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_ENTITY_SET"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "EntityName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/ODATA_ENTITYSET", oEvent.getParameter("selectedItem").getProperty("title"));
				},
				liveChange : function(oEvent) {
					var searchValue = oEvent.getParameter("value");
					var oFilterPackage = new sap.ui.model.Filter("entityName", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilterPackage], false));
				}

			});

			try {
				if(that.getView().getModel().getData().VIEW_NAME)  {
					if(this.VIEW_MODE != this.CDS) {
						that.populateRelevantEntitySet(hanaEntitySetHelpDialog);
					} else {
						that.populateRelevantEntitySet_CDS(CDSEntitySetHelpDialog);
					}
				}
				else {
					that.oModelForEntity = that.populateEntitySet(that.getView().byId(odataFieldId).getValue());
					hanaEntitySetHelpDialog.setModel(that.oModelForEntity);
					hanaEntitySetHelpDialog.open();
				}
			} catch (err) {

			} 
		}
	},
	handleMeasureValueHelp : function(){
		var that = this;
		if(!that.byId("entitySetInput").getValue()){
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET"));
			that.errorMessages.push({
				"type":"Error",
				"title":that.oResourceBundle.getText("ERROR_ENTER_ENTITY_SET")
			});
			sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);

		}
		else{
			try {
				that.oModelForMeasure = that.populateMeasure(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
				that.mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(that.getView().getModel().getProperty("/ODATA_URL"), that.getView().getModel().getProperty("/ODATA_ENTITYSET"));
				var measureObj = that.mProperties.getLabelMappingObject();
				var measureArray = that.oModelForMeasure.getData().measures;
				for(var i=0,l=measureArray.length; i<l; i++) {
					measureArray[i].measureLabel = measureObj[measureArray[i].measureName];
				}
				that.oModelForMeasure.setData({measures:measureArray});
			} catch (err) {
			}
			var hanaMeasureHelpDialog = new sap.m.SelectDialog({
				title : that.oResourceBundle.getText("SELECT_MEASURE"),
				noDataText : that.oResourceBundle.getText("NO_DATA_FOUND"),
				items : {
					path : "/measures",
					template : new sap.m.StandardListItem({
						title : {
							parts : [{
								path : "measureLabel",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						},
						description : {
							parts : [{
								path : "measureName",
								type : new sap.ui.model.type.String()
							}],
							formatter : function(o,s) {
								return o;
							}
						}
					})
				},
				confirm : function(oEvent) {
					that.getView().getModel().setProperty("/COLUMN_NAME", oEvent.getParameter("selectedItem").getBindingContext().getProperty("measureName"));
				},
				liveChange : function(oEvent) {
					var searchValue = oEvent.getParameter("value");
					var oFilter = new sap.ui.model.Filter("measureName", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oFilter1 = new sap.ui.model.Filter("measureLabel", sap.ui.model.FilterOperator.Contains,
							searchValue);
					var oBinding = oEvent.getSource().getBinding("items");
					oBinding.filter(new sap.ui.model.Filter([oFilter,oFilter1], false));
				}
			});
			hanaMeasureHelpDialog.setModel(that.oModelForMeasure);
			hanaMeasureHelpDialog.open();
		}
	},

	handleChangeAdditionalInfo : function(oEvent) {
		var that = this;
		that.getView().getModel().setProperty("info", that.getView().byId("additionalInfoId"));
	},

	validateSemantic : function(oEvent) {
		var that = this;
		var semanticObj = that.getView().byId("semanticObject");
		if( oEvent.getParameter("value").indexOf(' ') === -1 ){
			this.byId(oEvent.getParameter("id")).setValueState("None");
		}
		else{
			this.byId(oEvent.getParameter("id")).setValueState("Error");
		}


	},

	populateEntitySet : function(dataSource) {
		var oController = this;
		var oModel = new sap.ui.model.json.JSONModel();
		var resultEntity = [], entityDataArray = [], obj = {};
		var i;
		resultEntity = sap.suite.ui.smartbusiness.lib.Util.odata.getAllEntitySet(dataSource);
		for (i = 0; i < resultEntity.length; i++) {
			obj = {};
			obj.entityName = resultEntity[i];
			entityDataArray.push(obj);
		}
		oModel.setData({
			entitySet : entityDataArray
		});
		return oModel;
	},

	validateQueryServiceURI : function(dataSource) {
		dataSource = jQuery.trim(dataSource);
		if (!jQuery.sap.startsWith(dataSource, "/")) {
			dataSource = "/" + dataSource;
		}
		if (jQuery.sap.endsWith(dataSource, "/")) {
			dataSource = dataSource.substring(0, dataSource.length - 1);
		}
		return dataSource;
	},

	populateMeasure : function(dataSource, entitySet) {
		dataSource = this.validateQueryServiceURI(dataSource) + "";
		entitySet = entitySet + "";
		var measures = [], measureDataArray = [], obj = {};
		var i;
		measures = sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(dataSource, entitySet);
		for (i = 0; i < measures.length; i++) {
			obj = {};
			obj.measureName = measures[i];
			measureDataArray.push(obj);
		}
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			measures : measureDataArray
		});
		return oModel;
	},

	onODataServiceLoad : function() {
		var that = this;
		setTimeout(function() {
			that.getView().getModel().setProperty("/ODATA_URL",that.getView().byId("odataServiceSelect").getSelectedItem().getText());
			that.getView().byId("odataServiceSelect").fireChange();
		}, 0);
		this.oDataModel.detachRequestCompleted(that.onODataServiceLoad, that);
	},

	onEntitySetServiceLoad : function() {
		var that = this;

		setTimeout(function() {
			that.getView().getModel().setProperty("/ODATA_ENTITYSET",that.getView().byId("entitySetSelect").getSelectedItem().getText());
			that.getView().byId("entitySetSelect").fireChange();
		}, 0);
	},

	onMeasureServiceLoad : function() {
		var that = this;

		setTimeout(function() {
			that.getView().getModel().setProperty("/COLUMN_NAME",that.getView().byId("valueMeasureSelect").getSelectedItem().getText());
			that.getView().byId("valueMeasureSelect").fireChange();
		}, 0);
	},

	isCDSMode: function(mode) {
		return mode == this.CDS;
	},

	isHANAMode: function(mode) {
		return mode != this.CDS;
	},
	generateKpiId : function(oController){
		var x = {};
		x.title = "";
		var promiseObj = sap.suite.ui.smartbusiness.lib.IDGenerator.generateKpiId(x);
		var id;
		promiseObj.done(function(kId){
			id = kId;
			oController.getView().getModel().getData().ID = id;
			oController.getView().getModel().updateBindings();
		});
	},
	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.ui.smartbusiness.lib.Util.utils.backToHome();
		}
		if(sap.suite.ui.smartbusiness.modelerAppCache && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI && sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace) {
			delete sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace;
		}
	}
});

}; // end of sap/suite/ui/smartbusiness/designtime/kpi/view/S1.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.visualization.view.S2.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained



sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.visualization.view.S2", {

	onInit: function() {
		var that = this;
		that.selectedGroupItemKey = "workspace";
		that.selectedGroupItemIndex = 0;
		that.lastSavedIndex = 0;
		this.oApplicationFacade.masterListControllerRef = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		that.oApplicationFacade.getODataModel().setSizeLimit(100000);
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		sap.suite.ui.smartbusiness.lib.AppSetting.init({
			oControl : this.byId("list"),
			hideElement  : "list",
			i18n: {
				checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
				saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
				cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
				settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
				settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
			},
			title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
		});
		this.settingModel =sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		that.lastGroupingOption = new sap.ui.model.Sorter("MANUAL_ENTRY",true,function(context){
			var indicator_type = context.getProperty("MANUAL_ENTRY");
			var groupTitle = "";
			switch(indicator_type) {
			case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
			break;
			case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
			break;
			default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
			}
			return {
				key: groupTitle,
				text: groupTitle
			}
		});
		that.lastSortingOrder =  {indicatorTextOrder:null, order:new sap.ui.model.Sorter("CHANGED_ON",true,null)};
		
		this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		this.confRef = sap.suite.ui.smartbusiness.Configuration;
		this.constantsRef = this.confRef.Constants;
		this.env = 0;
		
		// Fetch System Environment info => Either running on SAP env or CUST env
		function sysInfoFetchCallBack(d) {
			that.env = d;
		}
		
		function sysInfoFetchErrCallBack(d,s,x) {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_SYS_INFO"), d.response.body);
		}
		
		this.metadataRef.getSystemInfo({async:false, success:sysInfoFetchCallBack, error:sysInfoFetchErrCallBack, model:this.oDataModel});

		if(this.env) {
			this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("IS_ACTIVE","EQ",1)]);	
		}	
		else {
			this.byId("list").getBinding("items").filter([new sap.ui.model.Filter("NAMESPACE",sap.ui.model.FilterOperator.NE,"."), new sap.ui.model.Filter("IS_ACTIVE","EQ",1)],false);
		}
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			//Adapter Implementation ----
			var sessionUserFetchCallBack = function(user) {
				that.oApplicationFacade.currentLogonHanaUser = user;
			};
			
			var sessionUserFetchErrCallBack = function(d,s,x) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), d.response.body);
			};
			 
			this.metadataRef.getSessionUser({async:true, success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
		}
		
		this.setSorting("changedate", true);
		
	},
	
	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
					new sap.m.ViewSettingsFilterItem({
						text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
						key: "activity",
						items: [
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
						        	 key: "self_created"
						         }),
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
						        	 key: "recently_worked_upon"
						         }),
						         new sap.m.ViewSettingsItem({
						        	 text: that.oApplicationFacade.getResourceBundle().getText("FAVORITE"),
						        	 key: "favorite"
						         }),
						        ]
					})
					],
					confirm : function(evt) {
						var infoBarText = "";
						var selectedFilters = evt.getParameter("filterItems");

						that.setFiltering(evt.getParameter("filterItems"));

						if(selectedFilters && selectedFilters.length) {
							var filterObj = {};
							for(var i=0,l=selectedFilters.length; i<l; i++) {
								filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
								filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
								filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
							}

							for(var filter in filterObj) {
								if(filterObj.hasOwnProperty(filter)) {
									infoBarText += (infoBarText) ? " ; " : "";
									infoBarText += filterObj[filter];
								}
							}
							that.byId("filterToolbar").setVisible(true);
							that.byId("visualizationInfo").setText(infoBarText);	
						}
						else {
							that.byId("visualizationInfo").setText("");
							that.byId("filterToolbar").setVisible(false);
						}
					}
		});
		return filterOptionsDialog;
	},
	
	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_CHANGE_DATE"),
			            	key: "changedate"
			            }), 
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NAME"),
			            	key: "name"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_ID"),
			            	key: "id"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
			            }
		});
		sortOptionsDialog.setSelectedSortItem("changedate");
		sortOptionsDialog.setSortDescending(true);
		return sortOptionsDialog;
	},
	
	createGroupOptions: function() {
		var that = this;
		var jsonData = {groupItems:[
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),key:"workspace", index:0},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_INDICATOR"),key:"indicator", index:1},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),key:"owner", index:2},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("NONE"),key:"none", index:3},
		                            ]};
		var model = new sap.ui.model.json.JSONModel(jsonData);
		var groupOptionsDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("GROUP_BY"),
			id: this.createId("groupOptionsDialog"),
			content: [new sap.m.List({
				items:{
					path: "/groupItems",
					template: new sap.m.ObjectListItem({
						type:"Active",
					    title:"{text}"
					})
				},
				itemPress: function(evt){
					evt.getParameter("listItem").setSelected(true);
					that.selectedGroupItemKey = evt.getParameter("listItem").getBindingContext().getProperty("key");
					that.selectedGroupItemIndex = evt.getParameter("listItem").getBindingContext().getProperty("index");
					if(that.selectedGroupItemKey=="workspace"){
        				that.setGrouping(that.selectedGroupItemKey,true);
        			}
        			else{
        				that.setGrouping(that.selectedGroupItemKey,false);
        			}
        			that.lastSavedIndex = that.selectedGroupItemIndex;
        			this.getParent().close();
				}
			})
			],
//			beginButton: new sap.m.Button({
//        		text: that.oApplicationFacade.getResourceBundle().getText("OK"),
//        		press: function(evt){
//        			if(that.selectedGroupItemKey=="workspace"){
//        				that.setGrouping(that.selectedGroupItemKey,true);
//        			}
//        			else{
//        				that.setGrouping(that.selectedGroupItemKey,false);
//        			}
//        			that.lastSavedIndex = that.selectedGroupItemIndex;
//        			this.getParent().close();
//        		}
//        	}),
        	endButton: new sap.m.Button({
        		text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
        		press: function(evt){
        			that.selectedGroupItemIndex = that.lastSavedIndex;
        			this.getParent().close();
        		}
        	})
		});
		groupOptionsDialog.setModel(model);
		return groupOptionsDialog;
	},
	
	getHeaderFooterOptions : function() {
		var that = this;
		var obj = {
				sI18NMasterTitle : that.metadataRef.getPlatform() == that.constantsRef.Platform.ABAP ? "ALL_EVALUATIONS" : "MASTER_TITLE", 
				onBack: function() {
					window.history.back();
				},
				oFilterOptions : {
					onFilterPressed: function(evt) {
						that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
						that.getView().filterOptionDialog.open();
					}
				},
				oSortOptions : {
					onSortPressed: function(evt) {
						that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
						that.getView().sortOptionDialog.open();
					}
				},
				oGroupOptions : {
					onGroupPressed: function(evt) {
						if(that.byId("groupOptionsDialog")){
							that.byId("groupOptionsDialog").destroy();
						}
						that.getView().groupOptionDialog = that.createGroupOptions();
						that.getView().groupOptionDialog.open();
						that.byId("groupOptionsDialog").getContent()[0].getItems()[that.selectedGroupItemIndex].setSelected(true);
					}
				},
			};
		if(that.metadataRef.getPlatform() == that.constantsRef.Platform.ABAP){
			obj.onAddPress = function(evt){
				sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPITile", route:"addEvaluation", context:""});
			}
		}
		return obj; 
	},
	formatEvaluationHeader:function(indicatorTitle,evaluationTitle){
		var that = this;
		if(indicatorTitle==null && evaluationTitle!=null){
			return(that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+"- "+evaluationTitle);
		}
		else if(indicatorTitle!=null && evaluationTitle==null){
			return(indicatorTitle+" -"+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else if(indicatorTitle==null && evaluationTitle==null){
			return (that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE")+" - "+that.oApplicationFacade.getResourceBundle().getText("TITLE_UNAVAILABLE"));
		}
		else{
			return (indicatorTitle+" - "+evaluationTitle);
		}
	},
	
	formatGroupName: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
		//return {text: ("KPI: " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
	
	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var groupOption;
		if(key == "workspace") {
			groupOption = new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_EVALUATIONS");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			})
		} 
		else if(key == "indicator") {
			groupOption = new sap.ui.model.Sorter("INDICATOR",groupDescending,function(context){
				return {
					key: context.getProperty("INDICATOR"),
					text: ("KPI: " + context.getProperty("INDICATOR"))
				}
			});
		}
		else if(key == "owner") {
			groupOption = new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "none") {
			groupOption = null;
		}
		
		if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order,that.lastSortingOrder.indicatorTextOrder],true);
		}
		else if(!that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder.order],true);
		}
		else{
			if(that.lastSortingOrder.indicatorTextOrder && that.lastSortingOrder.order){
				list.getBinding("items").sort([that.lastSortingOrder.indicatorTextOrder, that.lastSortingOrder.order]);
			}
			else{
				list.getBinding("items").sort([that.lastSortingOrder.order]);
			}
		}
		this.lastGroupingOption = groupOption;
	},
	
	setFiltering: function(items) {
		var filtersArray = [];
		var list = this.getView().byId("list");
		
		var filterObject = {
			"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, this.oApplicationFacade.currentLogonHanaUser)),
			"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
			"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};
		
		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);
		
		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
		
	},
	
	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var sortOrder,sortByIndicator;
		if(key == "changedate") {
			sortOrder = new sap.ui.model.Sorter("CHANGED_ON",groupDescending,null);
		}
		else if(key == "name") {
			sortOrder = new sap.ui.model.Sorter("TITLE",groupDescending,null);
			sortByIndicator = new sap.ui.model.Sorter("INDICATOR_TITLE",groupDescending,null);
		}
		else if(key == "id") {
			sortOrder = new sap.ui.model.Sorter("ID",groupDescending,null);
		}
		
		if(that.lastGroupingOption){
			if(sortByIndicator){
				list.getBinding("items").sort([that.lastGroupingOption,sortByIndicator,sortOrder],true); 
			}
			else{
				list.getBinding("items").sort([that.lastGroupingOption,sortOrder],true); 
			}
		}
		else{
			if(sortByIndicator){
				list.getBinding("items").sort([sortByIndicator,sortOrder]);
			}
			else{
				list.getBinding("items").sort([sortOrder]);
			}
		}
		this.lastSortingOrder = {indicatorTextOrder:sortByIndicator, order:sortOrder};
	},
	
	formatChipCount: function(chipCount) {
		return chipCount || 0;
	},
	formatTile:function(chipCount){
		if (chipCount==1)
			return this.oApplicationFacade.getResourceBundle().getText("Tile");
		else 
			return this.oApplicationFacade.getResourceBundle().getText("Tiles");
	},
	
	applySearchPatternToListItem : function(oItem, sfilterPattern) {
		return sap.suite.ui.smartbusiness.lib.Util.utils.applySearchPatternToListItem.apply(this,arguments);
	
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,true);
	},
	
	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.ui.smartbusiness.lib.Util.utils.backToHome();
		}
	}
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S2.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S2.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
 * @deprecated since SAPUI 5 version 1.28.0
 */
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained



sap.ca.scfld.md.controller.ScfldMasterController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S2", {

	onInit: function() {
		var that = this;
		this.errorMessages = [];
		this.errorModel =  new sap.ui.model.json.JSONModel();
		this.errorModel.setData(this.errorMessages);
		this.errorState = false;
		this.oApplicationFacade.masterListControllerRef = this;
		this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
		that.selectedGroupItemKey = "workspace";
		that.selectedGroupItemIndex = 0;
		that.lastSavedIndex = 0;
		that.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices"); 
		that.oApplicationFacade.getODataModel().setSizeLimit(100000); 
		jQuery.sap.require("sap.suite.ui.smartbusiness.lib.AppSetting");
		sap.suite.ui.smartbusiness.lib.AppSetting.init({
			oControl : this.byId("list"),
			hideElement  : "list",
			i18n: {
				checkBoxText: that.oApplicationFacade.getResourceBundle().getText("CHECKBOX_TEXT"),
				saveText: that.oApplicationFacade.getResourceBundle().getText("OK"),
				cancelText: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				settingsText: that.oApplicationFacade.getResourceBundle().getText("SETTINGS"),
				settingInfoTitle: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TITLE"),
				settingInfoText: that.oApplicationFacade.getResourceBundle().getText("SETTING_INFO_TEXT")
			},
			title : that.oApplicationFacade.getResourceBundle().getText("SETTINGS_SB"),
		});
		this.settingModel = sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
		sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
		this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
		that.lastGroupingOption = new sap.ui.model.Sorter("MANUAL_ENTRY",true,function(context){
			var indicator_type = context.getProperty("MANUAL_ENTRY");
			var groupTitle = "";
			switch(indicator_type) {
			case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
			break;
			case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
			break;
			default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
			}
			return {
				key: groupTitle,
				text: groupTitle
			}
		});
		
		that.lastSortingOrder =  new sap.ui.model.Sorter("CHANGED_ON",true,null);
		
		if(!(that.oApplicationFacade.currentLogonHanaUser)) {
			//Adapter Implementation ----
			var sessionUserFetchCallBack = function(user) {
				that.oApplicationFacade.currentLogonHanaUser = user;
			};

			var sessionUserFetchErrCallBack = function(d,s,x) {
				that.oApplicationFacade.currentLogonHanaUser = null;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), d.response.body);
				that.errorMessages.push({
                    "type":"Error",
                    "title":that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"),
                    "description":  d.response.body
                });
                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
			};

			this.metadataRef.getSessionUser({async:true, success:sessionUserFetchCallBack, error:sessionUserFetchErrCallBack, model:this.oApplicationFacade.getODataModel()});
		}

		this.defaultHeaderFooterOptions = {
				sI18NMasterTitle : "MASTER_TITLE",
				sI18NSearchFieldPlaceholder : "SEARCHFIELD_PLACEHOLDER",
//				onBack: function() {
//					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
//					
//				},
				onEditPress : function(isMultiSelect) {
					that.toggleListSelection(isMultiSelect);
				},
				oFilterOptions : {
					onFilterPressed: function(evt) {
						that.getView().filterOptionDialog = that.getView().filterOptionDialog || that.createFilterOptions();
						that.getView().filterOptionDialog.open();
					}
				},
				oSortOptions : {
					onSortPressed: function(evt) {
						that.getView().sortOptionDialog = that.getView().sortOptionDialog || that.createSortOptions();
						that.getView().sortOptionDialog.open();
					}
				},
				oGroupOptions : {
					onGroupPressed: function(evt) {
						if(that.byId("groupOptionsDialog")){
							that.byId("groupOptionsDialog").destroy();
						}
						that.getView().groupOptionDialog = that.createGroupOptions();
						that.getView().groupOptionDialog.open();
						that.byId("groupOptionsDialog").getContent()[0].getItems()[that.selectedGroupItemIndex].setSelected(true);
					}
				},
				onAddPress : function(evt) {
					sap.suite.ui.smartbusiness = sap.suite.ui.smartbusiness || {};
					sap.suite.ui.smartbusiness.modelerAppCache = sap.suite.ui.smartbusiness.modelerAppCache || {};
					sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI  = sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI || {};
					sap.suite.ui.smartbusiness.modelerAppCache.createSBKPI.appFromWorkspace = true;
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"createSBKPI"});
				},
				buttonList : []

		};

		this.multiSelectHeaderFooterOptions = {
				bSuppressBookmarkButton: {},
				onBack: function() {
					sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({});
				},
				onEditPress : function(isMultiSelect) {
					that.toggleListSelection(isMultiSelect);
				},
				buttonList : [/*{
	              	  sI18nBtnTxt : "Error",
	                  sId : "errorBtn",
	                  icon : "sap-icon://alert",
	                  enabled : false,
	                  onBtnPressed : function(event){
	                            sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
	                  }              
	              	},*/{
					sId: "favouriteButton",
					sI18nBtnTxt : "FAVOURITE_BUTTON_TEXT",
					onBtnPressed : function(evt) { 
						that.errorMessages=[];
						if(that.byId("list").getSelectedContexts().length) {
							var selectedContexts = that.byId("list").getSelectedContexts();
							var payload = {};
							var batchOperations = [];
							var path = null;
							var isFavouritesSuccessful = true;
							var oDataModel = that.oApplicationFacade.getODataModel();
							//odata update
//							for(var i=0,l=selectedContexts.length; i<l; i++) {
//							payload = {ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
//							if(selectedContexts[i].getProperty("MANUAL_ENTRY") == null) {
//							// DO POST
//							batchOperations.push(oDataModel.createBatchOperation("/FAVOURITES","POST",payload));
//							}
//							else if(selectedContexts[i].getProperty("MANUAL_ENTRY") == 0) {
//							// DO PUT
//							path = "(ID='" + selectedContexts[i].getProperty("ID") + "',TYPE='" + selectedContexts[i].getProperty("ENTITY_TYPE") + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')"; 
//							batchOperations.push(oDataModel.createBatchOperation(("/FAVOURITES" + path),"PUT",payload));
//							}
//							else {
//							// DO NOTHING
//							}
//							}
//							oDataModel.addBatchChangeOperations(batchOperations);
//							oDataModel.submitBatch(function(data,response,errorResponse){
//							if(errorResponse.length)
//							{      isFavouritesSuccessful = false;
//							return;
//							}
//							var responses = data.__batchResponses[0].__changeResponses;
//							for(var key in responses)
//							if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//							isFavouritesSuccessful = false;   
//							}
//							},function(err){
//							isFavouritesSuccessful = false;
//							},false);

//							if(!isFavouritesSuccessful) {      
//							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
//							}
//							else {
//							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//							oDataModel.refresh();
//							}

							//xsjs update
							var payloads = [];
							for(var i=0,l=selectedContexts.length; i<l; i++) {
								if(!(selectedContexts[i].getProperty("MANUAL_ENTRY"))) {
									payloads.push({ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null});
								}
							}
							if(payloads.length) {
								that.metadataRef.update("INDICATOR_FAVOURITE",payloads,null,function(data) {
									sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_IN_SUCCESS_KPI_OPI"));
									//oDataModel.refresh();
									that.refreshMasterList();
								}, function(err) {
									sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"));
									that.errorMessages.push({
	            						  "type":"Error",
	            						  "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_KPI_OPI_ERROR"),
	            						  "description": err.responseText
	            					  });
	            					  sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
								});
							}
							else {

							}
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}, {
					sId: "removeFavouriteButton",
					sI18nBtnTxt : "REMOVE_FAV_BUTTON_TEXT",
					onBtnPressed : function(evt) { 
						that.errorMessages=[];
						if(that.byId("list").getSelectedContexts().length) {
							var selectedContexts = that.byId("list").getSelectedContexts();
							var batchOperations = [];
							var path = null;
							var isFavouritesSuccessful = true;
							var oDataModel = that.oApplicationFacade.getODataModel();
							//odata remove
//							for(var i=0,l=selectedContexts.length; i<l; i++) {
//							if(selectedContexts[i].getProperty("MANUAL_ENTRY") == null) {
//							// DO NOTHING
//							}
//							else if(selectedContexts[i].getProperty("MANUAL_ENTRY") == 0) {
//							// DO NOTHING
//							}
//							else {
//							// DO DELETE
//							path = "(ID='" + selectedContexts[i].getProperty("ID") + "',TYPE='" + selectedContexts[i].getProperty("ENTITY_TYPE") + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')"; 
//							batchOperations.push(oDataModel.createBatchOperation(("/FAVOURITES" + path),"DELETE"));
//							}
//							}
//							oDataModel.addBatchChangeOperations(batchOperations);
//							oDataModel.submitBatch(function(data,response,errorResponse){
//							if(errorResponse.length)
//							{      isFavouritesSuccessful = false;
//							return;
//							}
//							var responses = data.__batchResponses[0].__changeResponses;
//							for(var key in responses)
//							if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//							isFavouritesSuccessful = false;   
//							}
//							},function(error){
//							isFavouritesSuccessful = false;
//							},false);

//							if(!isFavouritesSuccessful) {      
//							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
//							}
//							else {
//							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("REM_FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//							oDataModel.refresh();
//							}

							//xsjs remove
							var payloads = [];
							for(var i=0,l=selectedContexts.length; i<l; i++) {
								if(selectedContexts[i].getProperty("MANUAL_ENTRY")) {
									payloads.push({ID:selectedContexts[i].getProperty("ID"), TYPE:selectedContexts[i].getProperty("ENTITY_TYPE"), USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null});
								}
							}
							if(payloads.length) {
								that.metadataRef.remove("INDICATOR_FAVOURITE",payloads,function(data) {
									sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("REM_FAVOURITE_BATCH_SAVE_SUCCESS_KPI_OPI"));
									//oDataModel.refresh();
									that.refreshMasterList();
								}, function(err) {
									sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"));
									that.errorMessages.push({
					                    "type":"Error",
					                    "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_BATCH_SAVE_ERROR_KPI_OPI"),
					                    "description":  ""
					                });
					                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
								});
							}
							else {

							}
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}, {
					sId: "deleteButton",
					sI18nBtnTxt : "DELETE_BUTTON_TEXT",
					onBtnPressed : function(evt) {
						that.errorMessages=[];
						if(that.byId("list").getSelectedContexts().length) {
							sap.m.MessageBox.show(
									that.oApplicationFacade.getResourceBundle().getText("WARNING_INDICATOR_DELETE_KPI_OPI"),
									"sap-icon://hint",
									that.oApplicationFacade.getResourceBundle().getText("INDICATOR_DELETE_ALERT_TITLE"),
									[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
									function(evt){
										if(evt=="OK"){
											var selectedContexts = that.byId("list").getSelectedContexts();
											var payload = {};
											var batchOperations = [];
											var isDeletesSuccessful = true;
											var oDataModel = that.oApplicationFacade.getODataModel();
											//odata remove
//											for(var i=0,l=selectedContexts.length; i<l; i++) {
//											if(selectedContexts[i].getProperty("IS_ACTIVE") == 1) {
//											// DO ACTIVE DELETE

//											path = selectedContexts[i].sPath.replace("INDICATORS_MODELER","INDICATORS");
//											batchOperations.push(oDataModel.createBatchOperation(path,"DELETE"));

//											}
//											else if(selectedContexts[i].getProperty("IS_ACTIVE") == 0) {
//											// DO INACTIVE DELETE
//											path = selectedContexts[i].sPath.replace("INDICATORS_MODELER","INDICATORS");
//											batchOperations.push(oDataModel.createBatchOperation(path,"DELETE"));
//											}
//											else {
//											// DO NOTHING
//											}
//											}

//											oDataModel.addBatchChangeOperations(batchOperations);
//											oDataModel.submitBatch(function(data,response,errorResponse){
//											if(errorResponse.length)
//											{       isDeletesSuccessful = false;
//											return;
//											}
//											var responses = data.__batchResponses[0].__changeResponses;
//											for(var key in responses)
//											if(responses[key].statusCode != "201" && responses[key].statusCode != "204" && responses[key].statusCode != "200") {
//											isDeletesSuccessful = false;      
//											}

//											},function(error){
//											isDeletesSuccessful = false;
//											},false);

//											if(!isDeletesSuccessful) { 
//											sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_ERROR_KPI_OPI"));
//											}
//											else {
//											sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_SUCCESS_KPI_OPI"));
//											oDataModel.refresh();
//											}

											//xsjs remove
											var payloads = [];
											for(var i=0,l=selectedContexts.length; i<l; i++) {
												payloads.push({ID:selectedContexts[i].getProperty("ID"),IS_ACTIVE:selectedContexts[i].getProperty("IS_ACTIVE")});
											}
											if(payloads.length) {
												that.metadataRef.remove("INDICATOR",payloads,function(data){
													sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_SUCCESS_KPI_OPI"));
													//oDataModel.refresh();
													that.refreshMasterList();
												},
												function(err){
													sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_ERROR_KPI_OPI"));
													that.errorMessages.push({
									                    "type":"Error",
									                    "title":that.oApplicationFacade.getResourceBundle().getText("DELETE_BATCH_SAVE_ERROR_KPI_OPI"),
									                    "description":  err.responseText
									                });
									                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
												});
											}
											else {

											}
										}
										if(evt=="CANCEL"){

										}
									}
							);
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
				}]
		};

		if(jQuery.sap.getUriParameters().get("sap-sb-enable-export") == "true") {
			var exportButton = {
					sI18nBtnTxt : "EXPORT_INDICATORS_KPI_OPI",
					onBtnPressed : function(evt) {
						if(that.byId("list").getSelectedContexts().length) {
							that.exportIndicators();
						}
						else {
							sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_SELECTED"));
						}
					}
			}

			this.multiSelectHeaderFooterOptions.buttonList.unshift(exportButton);
		}  

		this.currentHeaderFooterOptions = this.defaultHeaderFooterOptions;
	},

	jsonForTestData:function(){
		return {
		    "indicatorData": {
		        "ID": "sample.sap.kpi",
		        "IS_ACTIVE": 0,
		        "INDICATOR": {
		            "TITLE": "Sample KPI",
		            "DESCRIPTION": "This is a Sample KPI",
		            "TYPE": "KPI",
		            "GOAL_TYPE": "RA"
		        },
		        "TEXTS": [
		            {
		                "TITLE": "sample kpi from sap",
		                "DESCRIPTION": "Sample KPI for understanding KPI creation",
		                "LANGUAGE": "D"
		            }
		        ],
		        "TAGS": [
		            {
		                "TYPE": "EV",
		                "TAG": "a"
		            }
		        ],
		        "PROPERTIES": [
		            {
		                "TYPE": "EV",
		                "NAME": "p1",
		                "VALUE": "v1"
		            }
		        ]
		    },
		    "evaluationData": {
		        "ID": "sample.sap.kpi.evaluation1",
		        "IS_ACTIVE": 0,
		        "EVALUATION": {
		            "DESCRIPTION": "Sample SAP Evaluation",
		            "INDICATOR": "sample.sap.kpi",
		            "ODATA_URL": "/sap/hba/r/sb/core/odata/SALESORDER_TEST.xsodata",
		            "VIEW_NAME": "",
		            "COLUMN_NAME": "TotalNetAmount",
		            "OWNER_NAME": "hewhomustnotbenamed",
		            "OWNER_E_MAIL": "hewhomustnotbenamed@sap.com",
		            "OWNER_ID": "hewhomustnotbenamed",
		            "CREATED_BY": "",
		            "CHANGED_BY": "",
		            "SCALING": 3,
		            "TITLE": "Sample SAP Evaluation",
		            "ENTITY_TYPE": "",
		            "ODATA_ENTITYSET": "Sales",
		            "ODATA_PROPERTY": "",
		            "SEMANTIC_OBJECT": "",
		            "ACTION": "",
		            "DATA_SPECIFICATION": "",
		            "GOAL_TYPE": "RA",
		            "INDICATOR_TYPE": "KPI",
		            "VALUES_SOURCE": "FIXED"
		        },
		        "FILTERS": [
		            {
		                "TYPE": "FI",
		                "NAME": "CompanyCode",
		                "OPERATOR": "EQ",
		                "VALUE_1": "1000",
		                "VALUE_2": ""
		            },
		            {
		                "TYPE": "FI",
		                "NAME": "CompanyCode",
		                "OPERATOR": "EQ",
		                "VALUE_1": "3000",
		                "VALUE_2": ""
		            }
		        ],
		        "VALUES": [
		            {
		                "TYPE": "CH",
		                "FIXED": "160000050",
		                "ODATA_PROPERTY": ""
		            },
		            {
		                "TYPE": "WH",
		                "FIXED": "160000040",
		                "ODATA_PROPERTY": ""
		            },
		            {
		                "TYPE": "TA",
		                "FIXED": "160000030",
		                "ODATA_PROPERTY": ""
		            },
		            {
		                "TYPE": "CL",
		                "FIXED": "160000010",
		                "ODATA_PROPERTY": ""
		            },
		            {
		                "TYPE": "WL",
		                "FIXED": "160000020",
		                "ODATA_PROPERTY": ""
		            },
		            {
		                "TYPE": "TC",
		                "FIXED": "160000030",
		                "ODATA_PROPERTY": ""
		            }
		        ],
		        "TEXTS": [
		            {
		                "LANGUAGE": "D",
		                "TITLE": "sample kpi evaluation",
		                "DESCRIPTION": "sample KPI evaluation"
		            }
		        ],
		        "TAGS": [
		            {
		                "TYPE": "EV",
		                "TAG": "a"
		            }
		        ],
		        "PROPERTIES": [
		            {
		                "TYPE": "EV",
		                "NAME": "p1",
		                "VALUE": "v1"
		            }
		        ]
		    },
		    "chipsData": {
		        "id": "",
		        "isActive": 0,
		        "CHIP": {
		            "catalogId": "HANA_CATALOG",
		            "title": "Sample SAP KPI",
		            "description": "Sample SAP KPI",
		            "tileType": "NT",
		            "evaluationId": "sample.sap.kpi.evaluation1",
		            "url": "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
		            "keywords": "",
		            "configuration": "{\"tileConfiguration\":\"{\\\"ADDITIONAL_APP_PARAMETERS\\\":\\\"{}\\\",\\\"TILE_PROPERTIES\\\":\\\"{\\\\\\\"id\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"evaluationId\\\\\\\":\\\\\\\"sample.sap.kpi.evaluation1\\\\\\\",\\\\\\\"tileType\\\\\\\":\\\\\\\"NT\\\\\\\",\\\\\\\"frameType\\\\\\\":\\\\\\\"OneByOne\\\\\\\",\\\\\\\"navType\\\\\\\":\\\\\\\"0\\\\\\\",\\\\\\\"semanticObject\\\\\\\":\\\\\\\"TotalNetAmount\\\\\\\",\\\\\\\"semanticAction\\\\\\\":\\\\\\\"analyzeSBKPIDetails\\\\\\\"}\\\",\\\"EVALUATION_FILTERS\\\":\\\"[{\\\\\\\"TYPE\\\\\\\":\\\\\\\"FI\\\\\\\",\\\\\\\"NAME\\\\\\\":\\\\\\\"CompanyCode\\\\\\\",\\\\\\\"VALUE_1\\\\\\\":\\\\\\\"1000\\\\\\\",\\\\\\\"OPERATOR\\\\\\\":\\\\\\\"EQ\\\\\\\",\\\\\\\"VALUE_2\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"FI\\\\\\\",\\\\\\\"NAME\\\\\\\":\\\\\\\"CompanyCode\\\\\\\",\\\\\\\"VALUE_1\\\\\\\":\\\\\\\"3000\\\\\\\",\\\\\\\"OPERATOR\\\\\\\":\\\\\\\"EQ\\\\\\\",\\\\\\\"VALUE_2\\\\\\\":\\\\\\\"\\\\\\\"}]\\\",\\\"EVALUATION_VALUES\\\":\\\"[{\\\\\\\"TYPE\\\\\\\":\\\\\\\"CH\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000050\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"CL\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000010\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"TA\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000030\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"TC\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000030\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"WH\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000040\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"},{\\\\\\\"TYPE\\\\\\\":\\\\\\\"WL\\\\\\\",\\\\\\\"FIXED\\\\\\\":\\\\\\\"160000020\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"ODATA_PROPERTY\\\\\\\":\\\\\\\"\\\\\\\"}]\\\",\\\"EVALUATION\\\":\\\"{\\\\\\\"ID\\\\\\\":\\\\\\\"sample.sap.kpi.evaluation1\\\\\\\",\\\\\\\"INDICATOR\\\\\\\":\\\\\\\"sample.sap.kpi\\\\\\\",\\\\\\\"INDICATOR_TYPE\\\\\\\":\\\\\\\"KPI\\\\\\\",\\\\\\\"INDICATOR_TITLE\\\\\\\":\\\\\\\"Sample KPI\\\\\\\",\\\\\\\"GOAL_TYPE\\\\\\\":\\\\\\\"RA\\\\\\\",\\\\\\\"TITLE\\\\\\\":\\\\\\\"Sample SAP Evaluation\\\\\\\",\\\\\\\"SCALING\\\\\\\":0,\\\\\\\"ODATA_URL\\\\\\\":\\\\\\\"/sap/hba/r/sb/core/odata/SALESORDER_TEST.xsodata\\\\\\\",\\\\\\\"ODATA_ENTITYSET\\\\\\\":\\\\\\\"Sales\\\\\\\",\\\\\\\"VIEW_NAME\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"COLUMN_NAME\\\\\\\":\\\\\\\"TotalNetAmount\\\\\\\",\\\\\\\"OWNER_NAME\\\\\\\":\\\\\\\"hewhomustnotbenamed\\\\\\\",\\\\\\\"VALUES_SOURCE\\\\\\\":\\\\\\\"FIXED\\\\\\\"}\\\"}\",\"isSufficient\":\"1\",\"timeStamp\":\"1410946294748\"}"
		        },
		        "TEXTS": [
		            {
		                "title": "sample",
		                "description": "sample",
		                "id": "<dynamic>",
		                "language": "D",
		                "isActive": 0
		            }
		        ]
		    },
		    "authorizationData": {
		        "ID": "sample.sap.kpi.evaluation1",
		        "REVOKE": [],
		        "GRANT": [
		            "BPRI",
		            "sap.hba.apps.kpi.s.roles::SAP_SMART_BUSINESS_MODELER",
		            "sap.hba.r.sb.core.roles::SAP_SMART_BUSINESS_MODELER"
		        ]
		    },

		    "payload": {
		        "DDA_COLUMNS": [
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "NAME": "CompanyCode",
		                "TYPE": "DIMENSION",
		                "SORT_BY": "CompanyCode",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 1,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 0,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "NAME": "SalesOrder",
		               "TYPE": "DIMENSION",
		                "SORT_BY": "SalesOrder",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 1,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "NAME": "ActualCost",
		                "TYPE": "MEASURE",
		                "SORT_BY": "ActualCost",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 2,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 2,
		                "IS_ACTIVE": 1
		            },            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "NAME": "CompanyCode",
		                "TYPE": "DIMENSION",
		                "SORT_BY": "CompanyCode",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 1,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 0,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "NAME": "TotalNetAmount",
		                "TYPE": "MEASURE",
		                "SORT_BY": "TotalNetAmount",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 2,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 1,
		                "IS_ACTIVE": 1
		            },
		                                                {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "NAME": "ActualCost",
		                "TYPE": "MEASURE",
		                "SORT_BY": "ActualCost",
		                "VISIBILITY": "BOTH",
		                "COLOR": "",
		                "STACKING": 0,
		                "AXIS": 2,
		                "SORT_ORDER": "none",
		                "COLUMNS_ORDER": 2,
		                "IS_ACTIVE": 1
		            }
		        ],
		        "DDA_CHART": [
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "VALUE_TYPE": "ABSOLUTE",
		                "AXIS_TYPE": "SINGLE",
		                "CHART_TYPE": "Column",
		                "DATA_LIMIT": -1,
		                "COLOR_SCHEME": "NONE",
		                "IS_ACTIVE": 1,
		                "THRESHOLD_MEASURE": ""
		            },{
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "VALUE_TYPE": "ABSOLUTE",
		                "AXIS_TYPE": "SINGLE",
		                "CHART_TYPE": "Column",
		                "DATA_LIMIT": -1,
		                "COLOR_SCHEME": "AUTO_SEMANTIC",
		                "IS_ACTIVE": 1,
		                "THRESHOLD_MEASURE": "ActualCost"
		            }
		        ],
		        "DDA_MASTER_TEXT": [
		            {
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "SAP_LANGUAGE_KEY": "E",
		                "TEXT": "view1",
		                "IS_ACTIVE": 1
		            },{
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "SAP_LANGUAGE_KEY": "E",
		                "TEXT": "view2",
		                "IS_ACTIVE": 1
		            }
		        ],
		        "DDA_MASTER": [
		            {
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view1",
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIG_ORDER": 0,
		                "IS_ACTIVE": 1
		            },
		                                                {
		                "CONFIGURATION_ID": "sample.sap.kpi.evaluation1.view2",
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIG_ORDER": 1,
		                "IS_ACTIVE": 1
		            }
		        ],
		        "DDA_FILTERS": [
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "DIMENSION": "SalesGroup",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "DIMENSION": "TransactionCurrency",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            }
		        ],
		        "DDA_HEADER": [
		            {
		                "CONFIGURATION_ID": "view1",
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "VISUALIZATION_TYPE": "NT",
		                "VISIBILITY": 1,
		                "REFERENCE_EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "VISUALIZATION_ORDER": 0,
		                "DIMENSION": "CompanyCode",
		                "IS_ACTIVE": 1
		            }
		        ],
		        "DDA_CONFIGURATION": [
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "PROPERTY_TYPE": "SAP_FILTER",
		                "PROPERTY_VALUE": "",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "PROPERTY_TYPE": "SAP_AGGREGATE_VALUE",
		                "PROPERTY_VALUE": "",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "PROPERTY_TYPE": "SAP_HEADER",
		                "PROPERTY_VALUE": "",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "PROPERTY_TYPE": "QUERY_SERVICE_URI",
		                "PROPERTY_VALUE": "/sap/hba/r/sb/core/odata/SALESORDER_TEST.xsodata",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            },
		            {
		                "EVALUATION_ID": "sample.sap.kpi.evaluation1",
		                "CONFIGURATION_ID": "view1",
		                "PROPERTY_TYPE": "QUERY_ENTITY_SET",
		                "PROPERTY_VALUE": "Sales",
		                "VISIBILITY": 1,
		                "IS_ACTIVE": 1
		            }
		        ]
		    
		}
		};
	},

	createTestData : function(){
		var that = this;
		var payload = that.jsonForTestData();
		jQuery.ajax({
			type: "POST",
			async: false,
			dataType: "json",
			data:JSON.stringify(payload),
			url: "/sap/hba/r/sb/core/logic/testData.xsjs",
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {
				//that.oApplicationFacade.getODataModel().refresh();
				that.refreshMasterList();
				sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("GENERATE_TEST_ENTITIES_SUCCESS"));
			},
			error: function(e) {
				that.exportBusyDialog.close();
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("GENERATE_TEST_ENTITIES_ERROR"));
				that.errorMessages.push({
                    "type":"Error",
                    "title":that.oApplicationFacade.getResourceBundle().getText("GENERATE_TEST_ENTITIES_ERROR"),
                    "description":  ""
                });
                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
			},
		});

	},

	createFilterOptions: function() {
		var that = this;
		var filterOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("filterOptionsDialog"),
			filterItems: [
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),
			            	  key: "status",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("DRAFTS"),
			            	        	  key: "drafts"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVATED"),
			            	        	  key: "activated"
			            	          }),
			            	          ]
			              }), 
			              new sap.m.ViewSettingsFilterItem({
			            	  text: that.oApplicationFacade.getResourceBundle().getText("ACTIVITY"),
			            	  key: "activity",
			            	  items: [
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("SELF_CREATED"),
			            	        	  key: "self_created"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("RECENTLY_WORKED_UPON"),
			            	        	  key: "recently_worked_upon"
			            	          }),
			            	          new sap.m.ViewSettingsItem({
			            	        	  text: that.oApplicationFacade.getResourceBundle().getText("FAVOURITE"),
			            	        	  key: "favorite"
			            	          }),
			            	          ]
			              })
			              ],
			              confirm : function(evt) {
			            	  var infoBarText = "";
			            	  var selectedFilters = evt.getParameter("filterItems");

			            	  that.setFiltering(evt.getParameter("filterItems"));

			            	  if(selectedFilters && selectedFilters.length) {
			            		  var filterObj = {};
			            		  for(var i=0,l=selectedFilters.length; i<l; i++) {
			            			  filterObj[selectedFilters[i].getParent().getKey()] = filterObj[selectedFilters[i].getParent().getKey()] || "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += (filterObj[selectedFilters[i].getParent().getKey()]) ? (",") : "";
			            			  filterObj[selectedFilters[i].getParent().getKey()] += selectedFilters[i].getText(); 
			            		  }

			            		  for(var filter in filterObj) {
			            			  if(filterObj.hasOwnProperty(filter)) {
			            				  infoBarText += (infoBarText) ? " ; " : "";
			            				  infoBarText += filterObj[filter];
			            			  }
			            		  }
			            		  that.byId("filterToolbar").setVisible(true);
			            		  that.byId("workspaceInfo").setText(infoBarText);	
			            	  }
			            	  else {
			            		  that.byId("workspaceInfo").setText("");
			            		  that.byId("filterToolbar").setVisible(false);
			            	  }
			              }
		});
		return filterOptionsDialog;
	},

	createSortOptions: function() {
		var that = this;
		var sortOptionsDialog = new sap.m.ViewSettingsDialog({
			id: this.createId("sortOptionsDialog"),
			sortItems: [
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_CHANGE_DATE"),
			            	key: "changedate"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),
			            	key: "type"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_NAME"),
			            	key: "name"
			            }),
			            new sap.m.ViewSettingsItem({
			            	text: that.oApplicationFacade.getResourceBundle().getText("BY_ID"),
			            	key: "id"
			            })
			            ],
			            confirm : function(evt) {
			            	if(evt.getParameter("sortItem")) {
			            		that.setSorting(evt.getParameter("sortItem").getKey(), evt.getParameter("sortDescending"));
			            	}
//			            	else {
//			            		that.setGrouping("workspace", true);
//			            	}
			            }
		});
		sortOptionsDialog.setSelectedSortItem("changedate");
		sortOptionsDialog.setSortDescending(true);
		return sortOptionsDialog;
	},

	createGroupOptions: function() {
		var that = this;
		var jsonData = {groupItems:[
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_WORKSPACE"),key:"workspace", index:0},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_TYPE"),key:"type", index:1},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_STATUS"),key:"status", index:2},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("BY_OWNER"),key:"owner", index:3},
		                            {text:that.oApplicationFacade.getResourceBundle().getText("NONE"),key:"none", index:4}
		                            ]};
		var model = new sap.ui.model.json.JSONModel(jsonData);
		var groupOptionsDialog = new sap.m.Dialog({
			title: that.oApplicationFacade.getResourceBundle().getText("GROUP_BY"),
			id: this.createId("groupOptionsDialog"),
			content: [new sap.m.List({
				items:{
					path: "/groupItems",
					template: new sap.m.ObjectListItem({
						type:"Active",
					    title:"{text}"
					})
				},
				itemPress: function(evt){
					evt.getParameter("listItem").setSelected(true);
					that.selectedGroupItemKey = evt.getParameter("listItem").getBindingContext().getProperty("key");
					that.selectedGroupItemIndex = evt.getParameter("listItem").getBindingContext().getProperty("index");
					if(that.selectedGroupItemKey=="workspace"){
        				that.setGrouping(that.selectedGroupItemKey,true);
        			}
        			else{
        				that.setGrouping(that.selectedGroupItemKey,false);
        			}
        			that.lastSavedIndex = that.selectedGroupItemIndex;
        			this.getParent().close();
				}
			})
			],
//			beginButton: new sap.m.Button({
//        		text: that.oApplicationFacade.getResourceBundle().getText("OK"),
//        		press: function(evt){
//        			if(that.selectedGroupItemKey=="workspace"){
//        				that.setGrouping(that.selectedGroupItemKey,true);
//        			}
//        			else{
//        				that.setGrouping(that.selectedGroupItemKey,false);
//        			}
//        			that.lastSavedIndex = that.selectedGroupItemIndex;
//        			this.getParent().close();
//        		}
//        	}),
        	endButton: new sap.m.Button({
        		text: that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
        		press: function(evt){
        			that.selectedGroupItemIndex = that.lastSavedIndex;
        			this.getParent().close();
        		}
        	})
		});
		groupOptionsDialog.setModel(model);
		return groupOptionsDialog;
	},

	getHeaderFooterOptions : function() {
		var that = this;
		var that = this;
		var payload = that.jsonForTestData();
		if(jQuery.sap.getUriParameters().mParams.createTestData){
			if(this.currentHeaderFooterOptions.buttonList){
				var testDataButtonExists = false;
				for(var key in this.currentHeaderFooterOptions.buttonList){
					if(this.currentHeaderFooterOptions.buttonList[key].sId == "testDataButton")
						testDataButtonExists = true;
				}
				if(!testDataButtonExists){
					var obj = {
							sId: "testDataButton",
							sI18nBtnTxt : "GENERATE_TEST_ENTITIES",
							onBtnPressed : function(evt) {
								that.createTestData();
							}};
					this.currentHeaderFooterOptions.buttonList.push(obj);
				}
			}
			else{
				this.currentHeaderFooterOptions.buttonList = [{
					sId: "testDataButton",
					sI18nBtnTxt : "GENERATE_TEST_ENTITIES",
					onBtnPressed : function(evt) {
						that.createTestData();
					}}]
			}

		}
		return this.currentHeaderFooterOptions;
	},

	formatTitle: function(title) {
		return (title || "");
	},

	formatEvaluationCount: function(evalCount) {
		return (evalCount || 0);
	},

	formatID: function(id) {
		var that = this;
		return (that.oApplicationFacade.getResourceBundle().getText("KPI_MASTER_ID_TEXT") + ": " + (id || ""));
	},

	formatGroupName: function(context) {
		var that = this;
		var indicator_type = context.getProperty("MANUAL_ENTRY");
		var groupTitle = "";
		switch(indicator_type) {
		case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
		break;
		case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
		break;
		default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
		}
		return {
			key: groupTitle,
			text: groupTitle
		}
	},

	setGrouping: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var groupOption;
		if(key == "type") {
			groupOption = new sap.ui.model.Sorter("TYPE",groupDescending,function(context){
				return {
					key: context.getProperty("TYPE"),
					text: (context.getProperty("TYPE") + "S")
				}
			});
		} 
		else if(key == "status") {
			groupOption = new sap.ui.model.Sorter("IS_ACTIVE",groupDescending,function(context){
				return {
					key: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") : that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"),
							text: context.getProperty("IS_ACTIVE") ? that.oApplicationFacade.getResourceBundle().getText("ACTIVE_KPI_OPI") : that.oApplicationFacade.getResourceBundle().getText("DRAFT_KPI_OPI"),
				}
			});
		}
		else if(key == "owner") {
			groupOption = new sap.ui.model.Sorter("OWNER_NAME",groupDescending,function(context){
				var owner_name = context.getProperty("OWNER_NAME");
				var groupTitle = "";
				switch(owner_name) {
				case null: groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				case "": groupTitle = that.oApplicationFacade.getResourceBundle().getText("NO_OWNER");
				break;
				default: groupTitle = owner_name;
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "workspace") {
			groupOption = new sap.ui.model.Sorter("MANUAL_ENTRY",groupDescending,function(context){
				var indicator_type = context.getProperty("MANUAL_ENTRY");
				var groupTitle = "";
				switch(indicator_type) {
				case 1: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_FAVOURITES");
				break;
				case 0: groupTitle = that.oApplicationFacade.getResourceBundle().getText("MY_LAST_WORKED_UPON");
				break;
				default: groupTitle = that.oApplicationFacade.getResourceBundle().getText("ALL_KPI_OPI");
				}
				return {
					key: groupTitle,
					text: groupTitle
				}
			});
		}
		else if(key == "none") {
			groupOption = null;
		}
		
		if(that.lastSortingOrder && key != "none"){
			list.getBinding("items").sort([groupOption,that.lastSortingOrder],true);
		}
		else{
			list.getBinding("items").sort([that.lastSortingOrder]);
		}
		this.lastGroupingOption = groupOption;
	},

	setFiltering: function(items) {
		var that = this;
		var filtersArray = [];
		var list = that.getView().byId("list");

		var filterObject = {
				"drafts": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 0)),
				"activated": (new sap.ui.model.Filter("IS_ACTIVE", sap.ui.model.FilterOperator.EQ, 1)),
				"self_created": (new sap.ui.model.Filter("CREATED_BY", sap.ui.model.FilterOperator.EQ, that.oApplicationFacade.currentLogonHanaUser)),
				"recently_worked_upon": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 0)),
				"favorite": (new sap.ui.model.Filter("MANUAL_ENTRY", sap.ui.model.FilterOperator.EQ, 1))
		};

		filtersArray = sap.suite.ui.smartbusiness.lib.Util.utils.getFilterArray(items, filterObject);

		if(filtersArray.length) {
			list.getBinding("items").filter(new sap.ui.model.Filter(filtersArray,true));
		}
		else {
			list.getBinding("items").filter(filtersArray);
		}
	},

	setSorting: function(key, groupDescending) {
		var that = this;
		groupDescending = groupDescending || false;
		var list = that.getView().byId("list");
		var sortOrder;
		if(key == "changedate") {
			sortOrder = new sap.ui.model.Sorter("CHANGED_ON",groupDescending,null);
		}
		else if(key == "type") { 
			sortOrder = new sap.ui.model.Sorter("TYPE",groupDescending,null);
		}
		else if(key == "name") {
			sortOrder = new sap.ui.model.Sorter("TITLE",groupDescending,null);
		}
		else if(key == "id") {
			sortOrder = new sap.ui.model.Sorter("ID",groupDescending,null);
		}
		
		if(that.lastGroupingOption){
			list.getBinding("items").sort([that.lastGroupingOption,sortOrder],true); 
		}
		else{
			list.getBinding("items").sort([sortOrder]);
		}
		this.lastSortingOrder = sortOrder;
	},

	toggleListSelection: function(isMultiSelect) {

		if(isMultiSelect) {
			this.byId("list").detachSelectionChange(this._handleSelect,this);
			this.byId("list").setMode("MultiSelect");
			this.currentHeaderFooterOptions = this.multiSelectHeaderFooterOptions;
			this.refreshHeaderFooterForEditToggle();
			this.oRouter.navTo("multiSelect",{});
			this.showEmptyView("DETAIL_TITLE",sap.ui.getCore().getConfiguration().getLanguage()," ");
		}
		else {
			this.byId("list").attachSelectionChange(this._handleSelect,this);
			this.byId("list").setMode("SingleSelectMaster");
			this.currentHeaderFooterOptions = this.defaultHeaderFooterOptions;
			this.refreshHeaderFooterForEditToggle();
			this.oRouter.navTo("detail",{
				contextPath: this.oApplicationFacade.currentContextPath
			});
		}
	},

	exportIndicators: function() { 
		var that = this;
		var dialogForHanaPackages = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("SELECT_PACKAGES"),
			items : {
				path : "/HANA_PACKAGES",
				template : new sap.m.StandardListItem({
					title : "{OBJECT}"
				})
			},
			confirm : function(oEvent) {
				var package_name = oEvent.getParameter("selectedItem").getProperty("title");

				if(package_name) {
					var payload = that.getExportObject();
					payload = payload.replace("<Hana Package Here>", oEvent.getParameter("selectedItem").getProperty("title"));
					var selectedContexts = that.byId("list").getSelectedContexts();
					var indicatorsString = "";
					var inactiveIndicatorsList = [];
					var inactiveIndicatorsText = "";
					for(var i=0,l=selectedContexts.length; i<l; i++) {
						if(selectedContexts[i].getProperty("IS_ACTIVE") == 1) {
							indicatorsString += (indicatorsString) ? ',' : ''; 
							indicatorsString += '{"value":"' + selectedContexts[i].getProperty("ID") + '","operator":"="}';
						}
						else {
							inactiveIndicatorsText += (inactiveIndicatorsText) ? ' , ' : '';
							inactiveIndicatorsText += '"' + selectedContexts[i].getProperty("TITLE") + '"';
							inactiveIndicatorsList.push(selectedContexts[i]);
						}
					}

					payload = payload.replace(/"<Indicators Here>"/g, indicatorsString);

					if(indicatorsString) {
						if(inactiveIndicatorsList.length) {
							sap.m.MessageBox.show(
									inactiveIndicatorsText + " " +that.oApplicationFacade.getResourceBundle().getText("INACTIVE_KPI_OPI_FOR_EXPORT"),
									"sap-icon://hint",
									that.oApplicationFacade.getResourceBundle().getText("EXPORT_ALERT_TITLE"),
									[sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ], 
									function(evt) {
										if(evt=="OK") {
											that.callExportService(payload);
										}
										else {
										}
									});
						}
						else {
							that.callExportService(payload);
						}
					}
					else {
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_KPI_OPI_FOR_EXPORT"))
					}
				}
				else {
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("NO_HANA_PACKAGE_SELECTED"));
				}
			},
			liveChange : function(oEvent) {
				var searchValue = "'" + oEvent.getParameter("value").toLowerCase() + "'";
				var oFilterObject = new sap.ui.model.Filter("tolower(OBJECT)", sap.ui.model.FilterOperator.Contains,
						searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter(new sap.ui.model.Filter([oFilterObject], false));
			}
		});

		dialogForHanaPackages.setModel(this.oApplicationFacade.getODataModel());
		dialogForHanaPackages.open(); 
	},

	getExportObject : function() { 
		var expObj = {"data":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"]},{"tableName":"sap.hba.r.sb.core.db::INDICATOR_TEXTS","schema":"SAP_HBA","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[]},{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","customKeys":["ID"],"keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"INDICATOR","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_TEXTS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_VALUES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::EVALUATION_FILTERS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"dependentKey":"INDICATOR","mappingKey":"ID","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"keys":{},"dependentKey":"ID","mappingKey":"ID"}]},{"tableName":"sap.hba.r.sb.core.db::PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"IN","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"ID","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"EV","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"mappingKey":"ID","dependentKey":"INDICATOR","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"dependentKey":"ID","mappingKey":"ID"}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::TAGS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"IN","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"ID","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::TAGS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"TYPE":[{"value":"EV","operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentOn":[],"mappingKey":"ID","dependentKey":"INDICATOR","keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"dependentKey":"ID","mappingKey":"ID"}],"customKeys":["ID","TYPE"]},{"tableName":"sap.hba.r.sb.core.db::ASSOCIATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"SOURCE_INDICATOR","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["SOURCE_INDICATOR"]},{"tableName":"sap.hba.r.sb.core.db::ASSOCIATION_PROPERTIES","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"SOURCE_INDICATOR","mappingKey":"ID","dependentOn":[],"keys":{"ID":["<Indicators Here>"],"IS_ACTIVE":[{"value":1,"operator":"="}]}}],"customKeys":["SOURCE_INDICATOR"]},{"tableName":"sap.hba.r.sb.core.db::DDA_MASTER","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_MASTER_TEXT","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_FILTERS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_HEADER","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_COLUMNS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_CHART","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::DDA_CONFIGURATION","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"customKeys":["EVALUATION_ID"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"EVALUATION_ID","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::CHIPS","schema":"SAP_HBA","keys":{"isActive":[{"value":1,"operator":"="}]},"customKeys":["id"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"evaluationId","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}]},{"tableName":"sap.hba.r.sb.core.db::CHIP_TEXTS","schema":"SAP_HBA","keys":{"isActive":[{"operator":"=","value":1}]},"customKeys":["id"],"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::CHIPS","schema":"SAP_HBA","keys":{"isActive":[{"value":1,"operator":"="}]},"dependentOn":[{"tableName":"sap.hba.r.sb.core.db::EVALUATIONS","schema":"SAP_HBA","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}]},"dependentKey":"evaluationId","mappingKey":"ID","dependentOn":[{"tableName":"sap.hba.r.sb.core.db::INDICATORS","schema":"SAP_HBA","dependentKey":"INDICATOR","mappingKey":"ID","keys":{"IS_ACTIVE":[{"value":1,"operator":"="}],"ID":["<Indicators Here>"]},"dependentOn":[]}]}],"mappingKey":"id","dependentKey":"id"}]}],"file":{"package_name":"<Hana Package Here>"}};
		return JSON.stringify(expObj); 
	},

	callExportService: function(payload) {
		var that = this;

		jQuery.ajax({
			type: "HEAD",
			async: false,
			dataType: "json",
			url: "/sap/hba/r/sb/core/logic/__token.xsjs",
			headers: {"X-CSRF-Token": "Fetch"},
			success: function(d, s, x) {
				that.exportBusyDialog = that.exportBusyDialog || new sap.m.BusyDialog({text:that.oApplicationFacade.getResourceBundle().getText("EXPORT_KPI_OPI_BUSY_DIALOG_TEXT"), title:that.oApplicationFacade.getResourceBundle().getText("EXPORT_KPI_OPI_BUSY_DIALOG_TITLE")})
				that.exportBusyDialog.open();
				jQuery.ajax({
					url: "/sap/hba/r/sb/core/logic/transferToHanaRepo.xsjs",
					type: "POST",
					data: payload,
					headers: {"X-CSRF-Token": x.getResponseHeader("X-CSRF-Token")},
					async: true,
					success: function(d) {
						that.exportBusyDialog.close();
						sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("EXPORT_SUCCESS"));
					},
					error: function(e) {
						that.exportBusyDialog.close();
						sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("EXPORT_ERROR"));
						that.errorMessages.push({
		                    "type":"Error",
		                    "title":that.oApplicationFacade.getResourceBundle().getText("EXPORT_ERROR"),
		                    "description":  ""
		                });
		                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
					}});

			},
			error: function() {
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERR_FETCH_AUTH_TOKEN"));
				$.sap.log.error("ERR_FETCH_AUTH_TOKEN");
				that.errorMessages.push({
                    "type":"Error",
                    "title":that.oApplicationFacade.getResourceBundle().getText("ERR_FETCH_AUTH_TOKEN"),
                    "description":  ""
                });
                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
			}
		});
	},

	onExit: function() {
		var hashObj = hasher || window.hasher;
		if(!(hashObj.getHash())) {
			sap.suite.ui.smartbusiness.lib.Util.utils.backToHome();
		}
	},

	applySearchPatternToListItem : function(oItem, sfilterPattern) {
		return sap.suite.ui.smartbusiness.lib.Util.utils.applySearchPatternToListItem.apply(this,arguments);
	
	},
	
	refreshMasterList: function() {
		var that = this;
		that.utilsRef.refreshMasterList(that,true);
	}

});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S2.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.view.S4.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.workspace.view.S4.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.includeStyleSheet("../../resources/sap/suite/ui/smartbusiness/designtime/workspace/view/workspaceStyling.css");
sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.workspace.view.S4", {
       
       onInit : function() {
          var that = this;
          this.errorMessages = [];
          this.errorModel =  new sap.ui.model.json.JSONModel();
          this.errorModel.setData(this.errorMessages);
          this.errorState = false;
          this.utilsRef = sap.suite.ui.smartbusiness.lib.Util.utils;
          var view = this.getView();
          
          this.oApplicationFacade.evaluationDetails = [];
		  this.metadataRef = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices");
		  if(this.metadataRef.getPlatform() == sap.suite.ui.smartbusiness.Configuration.Constants.Platform.ABAP) {
			this.isPlatformABAP = true;
		  }else {
			this.isPlatformABAP = false;
		  }
          this.initializeDrillDownViewPopover();
          this._addColumnsToTable();
          this.settingModel =sap.ui.getCore().getModel("SB_APP_SETTING") || new sap.ui.model.json.JSONModel();
          sap.ui.getCore().setModel(this.settingModel,"SB_APP_SETTING");
          this.getView().setModel(sap.ui.getCore().getModel("SB_APP_SETTING"),"SB_APP_SETTING");
          this.oRouter.attachRouteMatched(function(evt) {
        	  if (evt.getParameter("name") === "evalDetail") {
        		  that.byId("tilePanel").setExpanded(false);
        		  that.byId("drilldownPanel").setExpanded(false);
        		  
        		  
        		  var context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
        		  var evalContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").evalPath));

        		  //For binding trend *********************************************************************************
        		  that.context = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").contextPath));
        		  that.evalContext = new sap.ui.model.Context(view.getModel(), '/' + (evt.getParameter("arguments").evalPath));

        		  that.evalPath = evt.getParameter("arguments").evalPath;
        		  that.contextPath = evt.getParameter("arguments").contextPath;

        		  var model = new sap.ui.model.json.JSONModel();
        		  var currentEvaluationData = null;
        		  
        		  if(!(that.oApplicationFacade.evaluationData) || !(that.oApplicationFacade.evaluationIndex)) {
        			  var indicatorData = that.metadataRef.getKPIById({context:that.context, evaluations:true, noIndicator: true, model:that.oApplicationFacade.getODataModel()});
        			  that.oApplicationFacade.evaluationData = indicatorData.EVALUATIONS;
        			  var currentEvalId = that.evalPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
        			  var currentEvalState = ((that.evalPath.indexOf("IS_ACTIVE=0") != -1) || (that.evalPath.indexOf("IS_ACTIVE=1") != -1)) ? ((that.evalPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
        			  for(var i=0,l=indicatorData.EVALUATIONS.length; i<l; i++) {
        				  if(indicatorData.EVALUATIONS[i].ID == currentEvalId && indicatorData.EVALUATIONS[i].IS_ACTIVE == currentEvalState) {
        					  that.oApplicationFacade.evaluationIndex = i;
        					  break;
        				  }
        			  }
        		  }
        		  
        		  if(that.oApplicationFacade.evaluationDetails && that.oApplicationFacade.evaluationDetails[that.oApplicationFacade.evaluationIndex]) {
        			  currentEvaluationData = that.oApplicationFacade.evaluationDetails[that.oApplicationFacade.evaluationIndex];
        		  }
        		  else {
        			  currentEvaluationData = that.metadataRef.getEvaluationById({context:that.evalContext, tags:true, properties:true, filters:true, values:true, noEvaluation: true,texts:true, texts_for_chips:true, model:that.oApplicationFacade.getODataModel()});
            		  currentEvaluationData.EVALUATION = that.oApplicationFacade.evaluationData[that.oApplicationFacade.evaluationIndex];
        			  currentEvaluationData.FILTERS_IP = that.formObjectForInputParametersAndFilters({results:currentEvaluationData.FILTERS}).EVALUATION_FILTERS;
            		  currentEvaluationData.VALUES_OBJ = that.formObjectForTrendThreshold(currentEvaluationData.EVALUATION,currentEvaluationData.VALUES);
            		  that.oApplicationFacade.evaluationDetails[that.oApplicationFacade.evaluationIndex] = currentEvaluationData;
        		  }
        		  currentEvaluationData.CHIPS=[];
        		  currentEvaluationData.DRILLDOWN = {ISLOADED:false};
        		  model.setData(currentEvaluationData);
        		  that.getView().setModel(model,"evaluation");
        		  that.modelRef = model;
        		  that.hideShow(model.getData().EVALUATION.GOAL_TYPE);
        		  //that.updateFooterButtons(model.getData().EVALUATION);
        	  }
          }, this);

       },
       
       formObjectForTrendThreshold : function(evaluationContextObj, evaluationValues){
          var obj = {TA:null, TC:null, RE:null, CL:null, CH:null, WL:null, WH:null};
          for(var i=0,l=evaluationValues.length; i<l; i++) {
                 if((evaluationContextObj.VALUES_SOURCE == "FIXED") || (!(evaluationContextObj.VALUES_SOURCE))) {
                        obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["FIXED"];
                 }
                 else if(evaluationContextObj.VALUES_SOURCE == "MEASURE") {
                        obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["COLUMN_NAME"];
                 }
                 else if(evaluationContextObj.VALUES_SOURCE == "RELATIVE") {
                	if(evaluationValues[i]["TYPE"] == "TA" || evaluationValues[i]["TYPE"] == "TC" || evaluationValues[i]["TYPE"] == "RE"){
                		obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["COLUMN_NAME"];
         			}
         			else{
         				obj[evaluationValues[i]["TYPE"]] = evaluationValues[i]["FIXED"]+"%";
         			}
                 }
          }
          if(evaluationContextObj) {
                 obj.GOAL_TYPE = evaluationContextObj.GOAL_TYPE;
          }
          else {
                 obj.GOAL_TYPE = null;
          }

          obj.VALUES_SOURCE = evaluationContextObj.VALUES_SOURCE || "FIXED";
          return obj;
       },
       
       formObjectForInputParametersAndFilters: function(listOfFilters){
          var obj = {EVALUATION_FILTERS:[]}, firstOcc=0, isBetween=0;
          var inputParameterObjectUnSorted = {};
          var inputParameterArraySorted = [];
          var filtersArray = [];
          var i,j, valuesStr = '', tempObj={};
           var tempName,tempOperator;
           var visited = new Array(listOfFilters.results.length);
           for(i=0;i<listOfFilters.results.length;i++){
        	   visited[i] = 0;
           }
           for(i=0;i<listOfFilters.results.length;i++){
        	   firstOcc = 0;
        	   valuesStr = '';
        	   tempName = (listOfFilters.results && listOfFilters.results.length) ? listOfFilters.results[i].NAME : "";
               tempOperator = (listOfFilters.results && listOfFilters.results.length) ? listOfFilters.results[i].OPERATOR : "";
                for(j=i;j<listOfFilters.results.length;j++){
                	if(listOfFilters.results[j].NAME == tempName && listOfFilters.results[j].OPERATOR == tempOperator && tempOperator!="BT"){
                		tempObj = {};
                        valuesStr += listOfFilters.results[j].VALUE_1 + ",";
                        tempObj = {"ID":listOfFilters.results[j].ID, "IS_ACTIVE":listOfFilters.results[j].IS_ACTIVE, "NAME":listOfFilters.results[j].NAME, "OPERATOR":listOfFilters.results[j].OPERATOR, "TYPE":listOfFilters.results[j].TYPE, "VALUES":valuesStr, "VALUE_2":null};
                        visited[j] = 1;
                	}
                	else if(listOfFilters.results[j].NAME == tempName && listOfFilters.results[j].OPERATOR == tempOperator && tempOperator=="BT"){
                		tempObj = {};
                		tempObj = {"ID":listOfFilters.results[j].ID, "IS_ACTIVE":listOfFilters.results[j].IS_ACTIVE, "NAME":listOfFilters.results[j].NAME, "OPERATOR":listOfFilters.results[j].OPERATOR, "TYPE":listOfFilters.results[j].TYPE, "VALUES":listOfFilters.results[j].VALUE_1, "VALUE_2":listOfFilters.results[j].VALUE_2};
                		visited[j] = 1;
                	}
                	else{
                		if(firstOcc == 0 && visited[j]==0){
                			i=j-1;
                			visited[j] = 1;
                			firstOcc = 1;
                		}
                	}
                }
                if(tempObj.VALUES){
                	if(tempObj.OPERATOR != "BT"){
                		tempObj.VALUES = tempObj.VALUES.substring(0,tempObj.VALUES.length-1);  //Remove the last comma
                	}
               	 obj.EVALUATION_FILTERS.push(tempObj);
                }
           }
           
           
           try{
        	   var evalData = this.oApplicationFacade.evaluationData[this.oApplicationFacade.evaluationIndex];
        	   var entitySet =  evalData.ODATA_ENTITYSET;
        	   var dataSource =  this._appendSystemAlias(evalData.ODATA_URL);
        	   this.oData4SAPAnalyticsModel = new sap.ui.model.analytics.odata4analytics.Model(new sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI(dataSource), null);
        	   this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(entitySet);
        	   var inputParametersObj = this.queryResultObj.getParameterization();
        	   var inputParameters = [];
        	   var inputParametersNames = inputParametersObj.getAllParameters();
        	   var sapClient = {};
				for ( var key in inputParametersNames) {
					var name = inputParametersNames[key].getName();
					var propertyType = inputParametersNames[key].getProperty().type;
					var optional = inputParametersNames[key].isOptional();
					if(name=== "P_SAPClient" || name === "V_SAPClient" || name === "SAPClient"){
						sapClient = {
								name : name
						}
					}
					else{
						var newObj = {
								name : name
						};
						inputParameters.push(newObj);
					}
				}
				if(sapClient){
					inputParameters.push(sapClient);
				}
				for(i=0;i<obj.EVALUATION_FILTERS.length;i++){
					if(obj.EVALUATION_FILTERS[i].TYPE == "PA"){
						inputParameterObjectUnSorted[obj.EVALUATION_FILTERS[i].NAME] =  obj.EVALUATION_FILTERS[i];
					}
					else{
						filtersArray.push(obj.EVALUATION_FILTERS[i]);
					}
				}
				for(i=0;i<inputParameters.length;i++){
					inputParameterArraySorted.push(inputParameterObjectUnSorted[inputParameters[i].name]);
				}
           }
           catch(err){
				for(i=0;i<obj.EVALUATION_FILTERS.length;i++){
					if(obj.EVALUATION_FILTERS[i].TYPE == "PA"){
						inputParameterArraySorted.push(obj.EVALUATION_FILTERS[i]);
					}
					else{
						filtersArray.push(obj.EVALUATION_FILTERS[i]);
					}
				}
           }
           obj.EVALUATION_FILTERS = inputParameterArraySorted;
           obj.EVALUATION_FILTERS = obj.EVALUATION_FILTERS.concat(filtersArray);
           return obj;
       },
       
       _appendSystemAlias : function(uri, sysAlias) {
    	   if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
    		   var urlParsingService = sap.ushell.Container.getService("URLParsing");
    		   if(urlParsingService) {
    			   uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
    		   }
    	   }
    	   return uri;
       },
       
       formatOwnerName: function(ownerName){
    	   var that = this;
    	   if(ownerName==null || ownerName==""){
    		   return "";
    	   }
    	   else{
    		   return sap.suite.ui.smartbusiness.lib.formatters.getBundleText(undefined, "OWNER", ownerName);
    	   }
       },
       
       formatGoalType: function(goalType) {
          var that = this;
          var goalTypeText = null;
          switch(goalType) {
          case 'MA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MAXIMIZING"); break;
          case 'MI': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("MINIMIZING"); break;
          case 'RA': goalTypeText = that.oApplicationFacade.getResourceBundle().getText("RANGE"); break;
          default : goalTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
          }
          return goalTypeText;
       },
       formatThresholdCriticalHigh: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
    	   goalType = goalType || 'RA';
           switch(goalType) {
           case 'MI': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL_HIGH"); break;
           default : thresholdText = that.oApplicationFacade.getResourceBundle().getText("NONE");
           }
           return thresholdText;
       },
       formatThresholdWarningHigh: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
    	   goalType = goalType || 'RA';
           switch(goalType) {
           case 'MI': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING_HIGH"); break;
           default : thresholdText = that.oApplicationFacade.getResourceBundle().getText("NONE");
           }
           return thresholdText;
       },
       formatThresholdWarningLow: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
    	   goalType = goalType || 'RA';
           switch(goalType) {
           case 'MA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("WARNING_LOW"); break;
           default : thresholdText = that.oApplicationFacade.getResourceBundle().getText("NONE");
           }
           return thresholdText;
       },
       formatThresholdCriticalLow: function(goalType){
    	   var that = this;
    	   var thresholdText = null;
    	   goalType = goalType || 'RA';
           switch(goalType) {
           case 'MA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL"); break;
           case 'RA': thresholdText = that.oApplicationFacade.getResourceBundle().getText("CRITICAL_LOW"); break;
           default : thresholdText = that.oApplicationFacade.getResourceBundle().getText("NONE");
           }
           return thresholdText;
       },

       formatProperties: function(name, value) {
    	   return ((this.getView().byId("properties").getItems().length > 1) ? (', ' + name + ' : ' + value) : (name + ' : ' + value));
       },

       formatOperator: function(operatorType) {
    	   var that = this;
    	   var operatorTypeText = null;
    	   switch(operatorType) {
    	   case 'EQ' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("EQUAL_TO"); break;
    	   case 'GT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("GREATER_THAN"); break;
    	   case 'LT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("LESS_THAN"); break;
    	   case 'NE' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("NOT_EQUAL_TO"); break;
    	   case 'BT' : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("BETWEEN"); break;
    	   case undefined : operatorTypeText = null; break;
    	   default : operatorTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
    	   }
    	   return operatorTypeText;
       },

       formatTypeOfFilter: function(inputType) {
    	   var that = this;
    	   var parameterTypeText = null;
    	   switch(inputType) {
    	   case 'FI' : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("FILTER"); break;
    	   case 'PA' : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("INPUT_PARAMETER"); break;
    	   case undefined : operatorTypeText = null; break;
    	   default : parameterTypeText = that.oApplicationFacade.getResourceBundle().getText("NONE");
    	   }
    	   return parameterTypeText;
       },

       getHeaderFooterOptions : function() {
    	   var that = this;
    	   this.oHeaderFooterOptions = {
    			   bSuppressBookmarkButton: {},
    			   onBack: function(){
    				   var hash = window.location.hash.replace("evalDetail","detail");
    				   sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:hash.substr(0,hash.lastIndexOf("/"))}, true);
    			   },
    			   oUpDownOptions : {
    				   sI18NDetailTitle: "ITEM_DETAIL_HEADER",
    				   iPosition : 0,
    				   iCount : 0,
    				   fSetPosition : function (iNewPosition) {
    					   that.oApplicationFacade.evaluationIndex = iNewPosition;
    					   var nextEvalContextPath = "EVALUATIONS_MODELER(ID='" + that.oApplicationFacade.evaluationData[iNewPosition].ID + "',IS_ACTIVE=" + that.oApplicationFacade.evaluationData[iNewPosition].IS_ACTIVE + ")";
    					   var view = that.getView();
    					   that.oHeaderFooterOptions.oUpDownOptions.iPosition = that.oApplicationFacade.evaluationIndex;
    					   that.oHeaderFooterOptions.oUpDownOptions.iCount = that.oApplicationFacade.evaluationData.length;
    					   that.setHeaderFooterOptions(that.oHeaderFooterOptions);
    					   that.getHeaderFooterOptions();
    					   sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action: "SBWorkspace", route: "evalDetail", context: (that.contextPath + "/" + nextEvalContextPath)});
    				   }
    			   },
    			   buttonList : that.getAllFooterButtons()
    	   };
    	   that.oHeaderFooterOptions.oUpDownOptions.iPosition = that.oApplicationFacade.evaluationIndex;
    	   that.oHeaderFooterOptions.oUpDownOptions.iCount = that.oApplicationFacade.evaluationData.length;
    	   that.setHeaderFooterOptions(that.oHeaderFooterOptions);
    	   that.updateFooterButtons(that.oApplicationFacade.evaluationData[that.oApplicationFacade.evaluationIndex]);
    	   return this.oHeaderFooterOptions;
       },

       formatEvalStatus: function(state, count) {
    	   var that = this;
    	   var isActive = "";
    	   if(count > 1) {
    		   isActive = (that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE") + "," + that.oApplicationFacade.getResourceBundle().getText("STATUS_DRAFT"));
    	   }
    	   else if(state){
    		   isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE");
    	   }
    	   else {
    		   isActive = that.oApplicationFacade.getResourceBundle().getText("STATUS_NEW");
    	   }
    	   return isActive;
       }, 
       
     //Binding of Evaluation values
       hideShow: function(goalType){
           var that = this;
           if(goalType=="MA"){
                  that.byId("CHlabel").setVisible(false);
                  that.byId("CHinput").setVisible(false);
                  
                  that.byId("WHlabel").setVisible(false);
                  that.byId("WHinput").setVisible(false);  
                  
                  that.byId("WLlabel").setVisible(true);
                  that.byId("WLinput").setVisible(true);
                  
                  that.byId("CLlabel").setVisible(true);
                  that.byId("CLinput").setVisible(true);
           }
           else if(goalType=="MI"){
                  that.byId("WLlabel").setVisible(false);
                  that.byId("WLinput").setVisible(false);
                  
                  that.byId("CLlabel").setVisible(false);
                  that.byId("CLinput").setVisible(false);
                  
                  that.byId("CHlabel").setVisible(true);
                  that.byId("CHinput").setVisible(true);
                  
                  that.byId("WHlabel").setVisible(true);
                  that.byId("WHinput").setVisible(true);  
           }
           else{
                  that.byId("WLlabel").setVisible(true);
                  that.byId("WLinput").setVisible(true);
                  
                  that.byId("CLlabel").setVisible(true);
                  that.byId("CLinput").setVisible(true);
                  
                  that.byId("CHlabel").setVisible(true);
                  that.byId("CHinput").setVisible(true);
                  
                  that.byId("WHlabel").setVisible(true);
                  that.byId("WHinput").setVisible(true);
           }
        },

       
       onAfterAllEvaluationContexts: function() {
          var that = this;
          
       },

       formatFavoriteMark: function(favMark) {
          return ((favMark) ? true : false);
       },

       getAllFooterButtons : function() {
          var that = this;
          return [/*{
	          	  sI18nBtnTxt : "Error",
	              sId : "errorBtn",
	              icon : "sap-icon://alert",
	              enabled : false,
	              onBtnPressed : function(event){
	                        sap.suite.ui.smartbusiness.lib.Util.utils.handleMessagePopover(event,that);
	              }              
	          	},*/{
                 sId: "activateButton",
                 sI18nBtnTxt : "ACTIVATE",
                 onBtnPressed : function(evt) {
                	 that.errorMessages=[];
                        var log = that.checkForMandatoryParametersForEvaluation();
                        ///Adapter Implementation ---->>
                        var evalTextFetchCallBack = function(data) {
                        	if(!(data && data.length)) {
                      		   log.error.push(that.oApplicationFacade.getResourceBundle().getText("ERROR_ENTER_EVALUATION_TITLE"));
                      	   }
                        };
                        
                        var evalTextFetchErrCallBack = function(err) {
                        	sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"), err.response.body);
                        	that.errorMessages.push({
                                "type":"Error",
                                "title":that.oApplicationFacade.getResourceBundle().getText("YMSG_ERROR_RETRIEVING_DATA"),
                                "description":  err.response.body
                            });
                            sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
                        };
                        
                        that.metadataRef.getDataByEntity({entity:"EVALUATION_TEXTS", filter:"ID eq '"+that.getView().getModel("evaluation").getData().EVALUATION.ID + "' and IS_ACTIVE eq 0 and TITLE ne ''", async:false, success:evalTextFetchCallBack, error:evalTextFetchErrCallBack, model:that.oApplicationFacade.getODataModel()});
                        
                        if(log.error.length) {
                              var errMsg = "";
                              for(var i=0,l=log.error.length; i<l; i++) {
                                     errMsg += errMsg ? "\n" : "";
                                     errMsg += that.oApplicationFacade.getResourceBundle().getText(log.error[i]);
                              }
                              sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), errMsg);
                              that.errorMessages.push({
                                  "type":"Error",
                                  "title":that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"),
                                  "description":  errMsg
                              });
                              sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);   
                        }
                        else {
                        	  if(log.warning.length) {
                        		  var warnMsg = "";
                                  for(var i=0,l=log.warning.length; i<l; i++) {
                                         warnMsg += warnMsg ? "\n" : "";
                                         warnMsg += that.oApplicationFacade.getResourceBundle().getText(log.warning[i]);
                                  }
                                  
                                  var backDialog = new sap.m.Dialog({
              						icon:"sap-icon://warning2",
              						title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
              						state:"Warning",
              						type:"Message",
              						content:[new sap.m.Text({text:warnMsg + "\n\n" + that.oApplicationFacade.getResourceBundle().getText("WARNING_EV_ACTIVATE")})],
              						beginButton: new sap.m.Button({
              							text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
              							press: function(){
              								backDialog.close();
              								that.activateEvaluation();
              							}
              						}),
              						endButton: new sap.m.Button({
              							text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
              							press:function(){
              								backDialog.close();
              							}
              						})   	                                           
              					});
              					backDialog.open();
                        	  }	
                        	  else {
                        		  that.activateEvaluation(); 
                        	  }
                        }
                 }
          }, {
                 sId: "favouriteToggleButton",
                 sI18nBtnTxt : "ADD_FAVOURITE",
                 onBtnPressed : function(evt) {
                		that.errorMessages=[];
                        var path = "/FAVOURITES";
                        var contextObj = that.getView().getModel("evaluation").getData().EVALUATION;
                        var oDataModel = that.oApplicationFacade.getODataModel(); 
                        var payload = {ID:contextObj.ID, TYPE:contextObj.ENTITY_TYPE, USER_ID:that.oApplicationFacade.currentLogonHanaUser, MANUAL_ENTRY:1, LAST_WORKED_ON:null};
                        if(contextObj.MANUAL_ENTRY) {
                        	//odata remove
//                              path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//                              oDataModel.remove(path,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 0;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs remove
                        	that.metadataRef.remove("EVALUATION_FAVOURITE",payload,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = null;
                           		that.updateFooterButtons(contextObj);
                           		that.getView().getModel("evaluation").getData().EVALUATION = contextObj;
                           		that.getView().getModel("evaluation").setData(that.getView().getModel("evaluation").getData());
                        		//oDataModel.refresh();
                        		that.refreshMasterList();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.responseText);
                        		that.errorMessages.push({
                                    "type":"Error",
                                    "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), 
                                    "description":  err.responseText
                                });
                                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
                        	});
                        }
                        else if(contextObj.MANUAL_ENTRY == 0) {
                        	// odata update
//                              path += "(ID='" + contextObj.ID + "',TYPE='" + contextObj.ENTITY_TYPE + "',USER_ID='" + that.oApplicationFacade.currentLogonHanaUser + "')";
//                              oDataModel.update(path,payload,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 1;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs update
                        	that.metadataRef.update("EVALUATION_FAVOURITE",payload,null,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = 1;
                        		that.updateFooterButtons(contextObj);
                        		that.getView().getModel("evaluation").getData().EVALUATION = contextObj;
                           		that.getView().getModel("evaluation").setData(that.getView().getModel("evaluation").getData());
                        		//oDataModel.refresh();
                        		that.refreshMasterList();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"), err.responseText);
                        		that.errorMessages.push({
                                    "type":"Error",
                                    "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_DELETE_ERROR"),
                                    "description":  err.responseText
                                });
                                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
                        	});
                        }
                        else if(contextObj.MANUAL_ENTRY == null) {
                        	//odata create
//                              oDataModel.create(path,payload,null,function(data) {
//                                     sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
//                                     oDataModel.refresh();
//                                     contextObj.MANUAL_ENTRY = 1;
//                                     that.updateFooterButtons(contextObj);
//                              }, function(err) {
//                                     sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_ERROR"), err.response.body);
//                              });
                        	
                        	//xsjs create
                        	that.metadataRef.update("EVALUATION_FAVOURITE",payload,null,function(data) {
                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_SUCCESS"));
                        		contextObj.MANUAL_ENTRY = 1;
                        		that.updateFooterButtons(contextObj);
                        		that.getView().getModel("evaluation").getData().EVALUATION = contextObj;
                           		that.getView().getModel("evaluation").setData(that.getView().getModel("evaluation").getData());
                        		//oDataModel.refresh();
                        		that.refreshMasterList();
                        		that.setBtnText("favouriteToggleButton",that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"));
                        	}, function(err) {
                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_ERROR"), err.responseText);
                        		that.errorMessages.push({
                                    "type":"Error",
                                    "title":that.oApplicationFacade.getResourceBundle().getText("FAVOURITE_EV_ERROR"),
                                    "description":  err.responseText
                                });
                                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
                        	});
                        }
                        contextObj.MANUAL_ENTRY ? evt.getSource().setText(that.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE"))
                                     : evt.getSource().setText(that.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"));
                 }             
          }, {
                 sId: "editButton",
                 sI18nBtnTxt : "EDIT",
                 onBtnPressed : function(evt) {
                	 that.errorMessages=[];
                	 var evalPath = "/" + that.evalPath;
                	 evalPath = (that.getView().getModel("evaluation").getData().EVALUATION.COUNTER == 2) ? evalPath.replace("IS_ACTIVE=1","IS_ACTIVE=0") : evalPath;
                	 if(that.getView().getModel("evaluation").getData().EVALUATION.COUNTER == 2){
                		 sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "editEvaluationDraft", context: (that.contextPath.replace("INDICATORS_MODELER","INDICATORS") + evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                	 }
                	 else if(that.getView().getModel("evaluation").getData().EVALUATION.COUNTER == 1){
                		 sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "editEvaluation", context: (that.contextPath.replace("INDICATORS_MODELER","INDICATORS") + evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                	 }
                 }
          }, {
                 sId: "deleteButton",
                 sI18nBtnTxt : "DELETE_BUTTON_TEXT",
                 onBtnPressed : function(evt) {
                	 that.errorMessages=[];
                	 	if(!(sap.m.MessageBox)) {
                	 		jQuery.sap.require("sap.m.MessageBox");
                	 	}
                        sap.m.MessageBox.show(
                                     that.oApplicationFacade.getResourceBundle().getText("WARNING_SINGLE_EVALUATION_DELETE"),
                                     "sap-icon://hint",
                                     that.oApplicationFacade.getResourceBundle().getText("DELETE_BUTTON_TEXT"),
                                     [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL ],
                                     function(evt){
                                            if(evt=="OK"){
                                            	var ODataModel = that.oApplicationFacade.getODataModel();
                                            	var payloads = [];
                                            	payloads.push({ID:that.getView().getModel("evaluation").getData().EVALUATION.ID,IS_ACTIVE:that.getView().getModel("evaluation").getData().EVALUATION.IS_ACTIVE});
                                            	//odata remove
//                                            	var entity = "EVALUATIONS" + that.getView().getBindingContext().sPath.substr(1).substr(that.getView().getBindingContext().sPath.substr(1).indexOf("("));
//                                            	ODataModel.remove(entity,null,function(data){
//                                            		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_SUCCESS"));
//                                            		ODataModel.refresh();
//                                            		window.history.back();
//                                            	},
//                                            	function(err){
//                                            		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_ERROR"), err.response.body);
//                                            	});
                                            	
                                            	//xsjs remove
                                            	that.metadataRef.remove("EVALUATION",payloads,function(data){
                                            		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_SUCCESS"));
                                            		//ODataModel.refresh();
                                            		that.refreshMasterList();
                                            		var hash = window.location.hash.replace("evalDetail","detail");
                                            		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:hash.substr(0,hash.lastIndexOf("/"))}, true);
                                            	},
                                            	function(err){
                                            		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_ERROR"), err.responseText);
                                            		that.errorMessages.push({
                                                        "type":"Error",
                                                        "title":that.oApplicationFacade.getResourceBundle().getText("DELETE_EV_ERROR"),
                                                        "description":  err.responseText
                                                    });
                                                    sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 

                                            	});
                                            }
                                            if(evt=="CANCEL"){
                                                   
                                            }

                                     });
                 }
          }, {
                sId: "duplicateButton",
                sI18nBtnTxt : "DUPLICATE",
                onBtnPressed : function(evt) {
                	that.errorMessages=[];
                	//sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "createSBKPIEvaluation", route: "duplicateEvaluation", context: (that.contextPath.replace("INDICATORS_MODELER","INDICATORS")+"/" + that.evalPath.replace("EVALUATIONS_MODELER","EVALUATIONS"))});
                	this.duplicateEvalDialog = this.duplicateEvalDialog || that.createDuplicateDialog();
                	this.duplicateEvalDialog.setContentHeight("350px");
                	that.vBoxForIdPrefixText.setVisible(true);
                	that.prefixInput.setValue();
                	that.prefixInput.setValueState("None");
        	        that.prefixForm.setVisible(true);
                	if(!that.settingModel.getData().ID_VISIBLE){
                		that.vBoxForIdPrefixText.setVisible(false);
	        	        that.prefixForm.setVisible(false);
	        	        this.duplicateEvalDialog.setContentHeight("200px");
                	}
                	this.duplicateEvalDialog.open();
                	
                }
           }, {
                 sId: "addTileButton",
                 sI18nBtnTxt : "CONFIGURE_TILE",
                 onBtnPressed : function(evt){ 
                	 that.errorMessages=[];
                	 sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "configureSBKPITile", route: "detail", context: ("EVALUATIONS_MODELER" + that.evalPath.substr(that.evalPath.indexOf("(")))});
                 }
          }, {
                 sId: "drilldownButton",
                 sI18nBtnTxt : "DRILLDOWN_CONFIG",
                 onBtnPressed : function(evt) {
                	 that.errorMessages=[];
                	 sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "configureSBKPIDrilldown", route: "detail", context: ("EVALUATIONS_MODELER" + that.evalPath.substr(that.evalPath.indexOf("(")))});
                 }
          }, {
                 sId: "authUsersButton",
                 sI18nBtnTxt : "AUTH_USERS",
                 onBtnPressed : function(evt) {
                	 that.errorMessages=[];
                	 sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action: "authorizeSBEvaluation", route: "detail", context: (that.evalPath)});
                 }
          }];
       },
       
       createDuplicateDialog : function(){
    	   
    	var that = this;
   		
   		var evalOnlyRadButton = new sap.m.RadioButton({
       		groupName: "DuplicateEval",
       		text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_EVAL_ONLY"),
       		selected:true
       	});
       	var evalAndEntitiesRadBtn = new sap.m.RadioButton({
       		groupName: "DuplicateEval",
       		text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_EVAL_AND_ENTITIES")
       		
       	}); 
       	var evalOnlyText = new sap.m.Text({
       		text: that.oApplicationFacade.getResourceBundle().getText("EVAL_ONLY_TEXT")
       	});
       	var evalAndEntitiesText = new sap.m.Text({
       		text: that.oApplicationFacade.getResourceBundle().getText("EVAL_AND_ENTITIES_TEXT")
       	});
       	var generatedIdInfoText = new sap.m.Text({
       		text: that.oApplicationFacade.getResourceBundle().getText("GENERATED_ID_INFO")
       	});
       	var duplicateIdExample = new sap.m.Text({
       		text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_ID_SAMPLE")
       	});
       	var prefixLabel = new sap.m.Label({
       		text: that.oApplicationFacade.getResourceBundle().getText("ID_PREFIX")
       	});
       	this.prefixInput = new sap.m.Input({
       		type:"Text",
       		maxLength:4,
       		placeholder: that.oApplicationFacade.getResourceBundle().getText("PREFIX_PLACEHOLDER"),
       		showValueHelp: false
       	}).attachLiveChange(function (){
       		that.validatePrefix();
       	});
       	var charLimitText = new sap.m.Text({
       		text: that.oApplicationFacade.getResourceBundle().getText("CHAR_LIMIT"),
       	})
       	var vBoxForEvalOnlyRadButton = new sap.m.VBox({
       		items:[
   			         evalOnlyRadButton,
   			         evalOnlyText
   			         ]
       	});
       	var vBoxForEvalAndEntitiesRadBtn = new sap.m.VBox({
   			items:[
   			         evalAndEntitiesRadBtn,
   			         evalAndEntitiesText
   			         ]
       	});
       	this.vBoxForIdPrefixText = new sap.m.VBox({
       		items:[
       		         generatedIdInfoText,
       		         duplicateIdExample
       		         ]
       	});
   	
       	var okBtn = new sap.m.Button({
   			text:that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_OK"),
   			press: function(){
   				if(evalOnlyRadButton.getSelected()){
   					if(that.prefixInput.getVisible()){
   						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"EVALUATION-ONLY",id:that.getView().getModel("evaluation").getData().EVALUATION.ID, prefix:that.prefixInput.getValue()}, null,
   	                        	function(success){
   	   								duplicateDialog.close();
   	                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
   	                        		that.refreshMasterList();
   	                        	},
   	                        	function(error){
   	                        		duplicateDialog.close();
   	                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
   	                        		that.errorMessages.push({
                                        "type":"Error",
                                        "title":JSON.parse(error.responseText).errorMessage,
                                        "description":  ""
                                    });
                                    sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
   	                        	});
   						
   					}else{
   						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"EVALUATION-ONLY",id:that.getView().getModel("evaluation").getData().EVALUATION.ID, prefix:""}, null,
   	                        	function(success){
   	   								duplicateDialog.close();
   	                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
   	                        		that.refreshMasterList();
   	                        	},
   	                        	function(error){
   	                        		duplicateDialog.close();
   	                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
   	                        		that.errorMessages.push({
                                        "type":"Error",
                                        "title":JSON.parse(error.responseText).errorMessage,
                                        "description":  ""
                                    });
                                    sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
   	                        	});
   						
   					}
   					
   					
   					
   				}else if(evalAndEntitiesRadBtn.getSelected()){
   					if(that.validatePrefix()){
   						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"EVALUATION",id:that.getView().getModel("evaluation").getData().EVALUATION.ID, prefix:that.prefixInput.getValue()}, null,
   	                        	function(success){
   	   								duplicateDialog.close();
   	                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
   	                        		that.refreshMasterList();
   	                        	},
   	                        	function(error){
   	                        		duplicateDialog.close();
   	                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
   	                        		that.errorMessages.push({
                                        "type":"Error",
                                        "title":JSON.parse(error.responseText).errorMessage,
                                        "description":  ""
                                    });
                                    sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
   	                        	});
   						
   					}else{
   						that.metadataRef.create("DUPLICATE_ENTITY",{flag:"EVALUATION",id:that.getView().getModel("evaluation").getData().EVALUATION.ID, prefix:""}, null,
   	                        	function(success){
   	   								duplicateDialog.close();
   	                        		sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_SUCCESS"));
   	                        		that.refreshMasterList();
   	                        	},
   	                        	function(error){
   	                        		duplicateDialog.close();
   	                        		sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(JSON.parse(error.responseText).errorMessage);
   	                        		that.errorMessages.push({
                                        "type":"Error",
                                        "title":JSON.parse(error.responseText).errorMessage,
                                        "description":  ""
                                    });
                                    sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
   	                        	});
   						
   					}
             		  
   					
   				}
   			}
   		});
   		var cancelBtn = new sap.m.Button({
   			text: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_KPI_CANCEL"),
   			press: function(){
   				duplicateDialog.close();
   			}
   		});
   		
   		this.prefixForm = new sap.ui.layout.form.SimpleForm({
	        	  editable:true, 
		        	  layout:"ResponsiveGridLayout",
		        	  maxContainerCols:12,
					        labelSpanL:3,
					        labelSpanM:3,
					        labelSpanS:3,
					        columnsL:4,
					        columnsM:4,
					        columnsS:4,
		        	  content : [
								prefixLabel,
								that.prefixInput,
								charLimitText
		        	             ]
		          });
   		
       	var duplicateDialog = new sap.m.Dialog({
       		title: that.oApplicationFacade.getResourceBundle().getText("DUPLICATE_EVAL_DIALOG_TITLE"),
       		//contentHeight:"350px",
       		contentWidth:"100px",
       		verticalScrolling: false,
       		horizontalScrolling: false,
       		content:[
   					new sap.ui.layout.Grid({
   						width:"100%",
   						defaultSpan : "L12 M12 S12",
   						content: [
                       		         vBoxForEvalOnlyRadButton,
                       		         vBoxForEvalAndEntitiesRadBtn,
                       		         that.vBoxForIdPrefixText,
                       		         that.prefixForm
                       		         ]})
       		         ],
       		         beginButton: okBtn,
      					 endButton: cancelBtn
       	});
       	return duplicateDialog;
    	   
       },
       
       validatePrefix : function (){
   		var that=this;
   		this.HANA = "hana";
   		this.CDS = "cds";
   		this.VIEW_MODE = this.HANA;
   		var successStatus = true;
   		var urlParam;
   		if((urlParam = jQuery.sap.getUriParameters().get("viewmode"))) {
   			if(urlParam.toLowerCase && urlParam.toLowerCase() == this.CDS)
   				this.VIEW_MODE = this.CDS;
   		}
   		var prefix = that.prefixInput.getValue();
   		if(!prefix){
   			that.prefixInput.setValueState("None");
   		}
   		 if(this.VIEW_MODE == this.CDS){
   			that.prefixInput.setValue(prefix.toUpperCase());
   		}
   		if (prefix) {
   			/* CDS prefix must begin with PERIOD */
   			if(this.VIEW_MODE == this.CDS && prefix[0] != '.') {
   				//this.kpiIdEval_reason = "NOT_START_WITH_PERIOD";
   				that.prefixInput.setValueState("Error");
   				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_CDS_EVAL_ID_BEGIN_WITH_PERIOD"));
   				successStatus = false;
   			}
   			/* Only CDS prefixs must begin with PERIOD */
   			else if(this.VIEW_MODE == this.HANA && prefix[0] == '.') {
   				//this.kpiIdEval_reason = "_START_WITH_PERIOD";
   				that.prefixInput.setValueState("Error");
   				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_HANA_EVAL_ID_BEGIN_WITH_PERIOD"));
   				successStatus = false;
   			}
   			else if (!(/^[a-zA-Z0-9.]*$/.test(prefix))) {
   				that.prefixInput.setValueState("Error");
   				that.prefixInput.setValueStateText(that.oApplicationFacade.getResourceBundle().getText("ERROR_HANA_ID_PREFIX_NO_SPL_CHAR"));
   				successStatus = false;
   			} else {
   				that.prefixInput.setValueState("None");
   				that.prefixInput.setValueStateText();
   				//successStatus = true;
   			}
   		}
   		return successStatus;
   	},
       
       updateFooterButtons: function(evaluationObj) {
           evaluationObj = evaluationObj || this.getView().getModel("evaluation").getData().EVALUATION;
           var footerAllButtons = this.getAllFooterButtons();

           this.oHeaderFooterOptions.buttonList = [];
           
           
           if(evaluationObj.IS_ACTIVE) {
        	   this.oHeaderFooterOptions.oEditBtn = footerAllButtons[5];
        	   this.oHeaderFooterOptions.buttonList.push(footerAllButtons[6]);
               this.oHeaderFooterOptions.buttonList.push(footerAllButtons[7]);
           }
           else {
        	   this.oHeaderFooterOptions.oEditBtn = footerAllButtons[0];
           }
           
           if(evaluationObj.MANUAL_ENTRY) {
                  footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("REMOVE_FAVOURITE");
           }
           else {
                  footerAllButtons[1].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("ADD_FAVOURITE"); 
           }
           this.oHeaderFooterOptions.buttonList.push(footerAllButtons[1]);
           
           if(evaluationObj.IS_ACTIVE){
           this.oHeaderFooterOptions.buttonList.push(footerAllButtons[4]);
           }
           
           if(evaluationObj.COUNTER == 2) {
                  footerAllButtons[2].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT_DRAFT");
           }
           else {
                  footerAllButtons[2].sI18nBtnTxt = this.oApplicationFacade.getResourceBundle().getText("EDIT"); 
           }
           this.oHeaderFooterOptions.buttonList.push(footerAllButtons[2]);
           
           this.oHeaderFooterOptions.buttonList.push(footerAllButtons[3]);
           
           this.setHeaderFooterOptions(this.oHeaderFooterOptions);
        },
        
        getConstructorParamForTile:function(sTileType){
        	var oConstructorParam;
        	switch(sTileType){

        	case "NT": oConstructorParam ={
				size:"S",
				value:"0.0",
				scale:"M",
				valueColor:"Good",
				unit:this.oApplicationFacade.getResourceBundle().getText("TILE_CURRENCY"),
				footer:this.oApplicationFacade.getResourceBundle().getText("ACTUAL")

			};
        	break;
        	case "CT": oConstructorParam ={
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("VALUE_1"), value: 1550}),
				       new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("VALUE_2"), value: 219.2}),
				       new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("VALUE_3"), value: 66.46})]

			};
        	break;
        	case "AT": oConstructorParam ={
				scale: "M",
				size:"S",
				minValue: 0,
				maxvalue: 312,
				targetValue: 150,
				actual: new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				thresholds: [new sap.suite.ui.commons.BulletChartData({value:312, color:"Error"}),
				             new sap.suite.ui.commons.BulletChartData({value:200, color:"Critical"})]
			};
        	break;
        	case "TT": oConstructorParam ={

				size:"S",
				width: "130px",
				height: "59px",
				minXValue: 0,
				maxXValue: 100,
				minYValue: 0,
				maxYValue: 100,
				firstXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 1", color:"Neutral"}),
				lastXLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"Jan 31", color:"Neutral"}),
				firstYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"3 M", color:"Error"}),
				lastYLabel: new sap.suite.ui.commons.MicroAreaChartLabel({label:"23 M", color:"Good"}),
				target: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:90})]
				}),
				innerMinThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				innerMaxThreshold: new sap.suite.ui.commons.MicroAreaChartItem({color:"Good"}),
				minThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
				maxThreshold:  new sap.suite.ui.commons.MicroAreaChartItem({
					color:"Error",
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:20}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:30}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:70})]
				}),
				chart: new sap.suite.ui.commons.MicroAreaChartItem({
					points:[new sap.suite.ui.commons.MicroAreaChartPoint({x:0,y:0}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:30,y:40}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:60,y:50}),
					        new sap.suite.ui.commons.MicroAreaChartPoint({x:100,y:100})]
				}),
			};
        	break;
        	case "CM": oConstructorParam ={
				scale: "M",
				size:"S",
				data: [new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("MEASURE_1"), value: 34, color: "Good"}),
				       new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("MEASURE_2"), value: 125, color: "Error"}),
				       new sap.suite.ui.commons.ComparisonData({title:this.oApplicationFacade.getResourceBundle().getText("MEASURE_3"), value: 97, color: "Critical"})]

			};
        	break;
        	case "HT": oConstructorParam ={
				total:100,
				size:"S",
				scale: "M",
				items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
					fraction:30,
					color: "Good"
				})]
			};
        	break;
	
        	}
        	return oConstructorParam;
        },
		getPreviewTile:function(tileType,context){
			var frameType = "OneByOne";
			var tileContent1,tileContent2;
			switch(tileType){
			
				case 'NT': tileContent1 = new sap.suite.ui.commons.NumericContent(this.getConstructorParamForTile(tileType));
							break;
				case 'CT': tileContent1 = new sap.suite.ui.commons.ComparisonChart(this.getConstructorParamForTile(tileType));
							break;
				
				case 'AT':	tileContent1 =  new sap.suite.ui.commons.BulletChart(this.getConstructorParamForTile(tileType));
							break;
				
				case 'TT': 	tileContent1 = new sap.suite.ui.commons.MicroAreaChart(this.getConstructorParamForTile(tileType));
							break;
				
				case 'CM':	tileContent1 =  new sap.suite.ui.commons.ComparisonChart(this.getConstructorParamForTile(tileType));
							break;
				
				case 'HT':	tileContent1 = new sap.suite.ui.commons.HarveyBallMicroChart(this.getConstructorParamForTile(tileType));
							break;
							
				case 'DT-AT': frameType = "TwoByOne";
							  tileContent1 = new sap.suite.ui.commons.NumericContent(this.getConstructorParamForTile("NT"));
							  tileContent2 =  new sap.suite.ui.commons.BulletChart(this.getConstructorParamForTile("AT"));
							  break;
					
				case 'DT-CT' :frameType = "TwoByOne"; 
							  tileContent1 = new sap.suite.ui.commons.NumericContent(this.getConstructorParamForTile("NT"));
							  tileContent2 =  new sap.suite.ui.commons.ComparisonChart(this.getConstructorParamForTile("CT"));
							  break;
					
				case 'DT-CM' :frameType = "TwoByOne";
							  tileContent1 = new sap.suite.ui.commons.NumericContent(this.getConstructorParamForTile("NT"));
							  tileContent2 =  new sap.suite.ui.commons.ComparisonChart(this.getConstructorParamForTile("CM"));
							  break;
					
				case 'DT-TT' :frameType = "TwoByOne";
							  tileContent1 = new sap.suite.ui.commons.NumericContent(this.getConstructorParamForTile("NT"));
							  tileContent2 =  new sap.suite.ui.commons.MicroAreaChart(this.getConstructorParamForTile("TT"));
							  break;
				
				
			}
			
			var tile = new sap.suite.ui.commons.GenericTile({
				size:"S",
				frameType:frameType,
				header: context.getProperty("title"),
				subheader: context.getProperty("description"),
				customData: [new sap.ui.core.CustomData({key:"tileType",value:tileType})],
				tileContent: new sap.suite.ui.commons.TileContent({content:tileContent1,size:"S"}),
				press: function(evt) {}
			});
			tile.addStyleClass("sbTile");
			if(tileContent2){
				tile.addTileContent(new sap.suite.ui.commons.TileContent({content:tileContent2,size:"S"}));
			}
			return tile;
			
		},
		getChipRow:function(id,context){

			var that = this;
			var tileContent,tile;
			var config = {};
			try {
				config = JSON.parse(JSON.parse(JSON.parse(context.getObject().configuration).tileConfiguration).TILE_PROPERTIES);
			}
			catch(e) {
				jQuery.sap.log.error("parsing of Chip Failed");
			}
			
			var navType = config.navType == "0"? "GENERIC_DRILLDOWN":"OTHER_DRILLDOWN";
			var statusText = "STATUS_ACTIVE_DRAFT";
			var statusState = "Success";
			var tileNotAvailableErrorState = false;
			var semanticObjectVisibility = Number(config.navType)?true:false;
			
			if(context.getObject().COUNTER == "1") {
				if(context.getObject().isActive) {
					statusText = "STATUS_ACTIVE";
				} else {
					statusText = "STATUS_NEW";
					statusState = "None";
				}
			}
			var statusObject = new sap.m.ObjectNumber({
				number: that.oApplicationFacade.getResourceBundle().getText(statusText),
				state: statusState
			})

			var tile = that.getPreviewTile(context.getProperty('tileType'),context);
			if(context.getProperty("isAffected")) {
				tile.addStyleClass("affectedTile");
				editButton.setEnabled(false);
				tileNotAvailableErrorState = true;
			}
			
			var editTile = function(evt) {
				var bindingContext = this.getBindingContext("evaluation");
				var chipObj = bindingContext.getObject();
				var chipContext = "CHIPS";
				var activeStatus = (chipObj.isActive && chipObj.COUNTER != 2)? 1 :0
						chipContext = chipContext + "(" + contextKeys.id + "='" + chipObj.id + "'," + contextKeys.isActive  + "="+ activeStatus +")";
				sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"configureSBKPITile", route:contextKeys.editTileRoute, context: (that.evalContext.sPath.substr(1) + "/" + chipContext)});
			}
			var editButton = new sap.m.Button({
				icon: "sap-icon://edit",
				type:sap.m.ButtonType.Transparent,
				press: editTile
			});
			

			var deleteButton = new sap.m.Button({
				icon:"sap-icon://sys-cancel",
				type:sap.m.ButtonType.Transparent,
				press: function(evt) {
					that.handleDelete(this);
				}
			});

			var cells = [];
			if(that.isPlatformABAP) {
				cells = [tile,
				         new sap.ui.layout.VerticalLayout({
				        	 content: [
				        	           new sap.m.Text({text: context.getObject().catalogName, visible:true}),
				        	           new sap.m.ObjectStatus({text: that.oApplicationFacade.getResourceBundle().getText("TILE_REMOVED_FROM_CATALOG"), state:"Error", visible:tileNotAvailableErrorState})
				        	           ]
				         }).addStyleClass("navigationVLayout"),
				         editButton /*, deleteButton*/];
			} else {
				cells = [tile,
				         new sap.ui.layout.VerticalLayout({
				        	 content: [
				        	           new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText(navType)}),
				        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("SEMANTIC_OBJECT") + ': ' + config.semanticObject, visible:semanticObjectVisibility}),
				        	           new sap.m.Text({text: that.oApplicationFacade.getResourceBundle().getText("ACTION") + ': ' + config.semanticAction, visible:semanticObjectVisibility}),
				        	           ]
				         }).addStyleClass("navigationVLayout"),
				         statusObject,
				         editButton /*,deleteButton */];
			}

			var columnListItem = new sap.m.ColumnListItem({
				//type: "Navigation",
				cells: cells
			}); 
			
			if(!(that.isPlatformABAP)) {
				var contextKeys={
						id:"id",
						isActive: 'isActive',
						editTileRoute: 'editTile'
				};
				editButton.attachPress(editTile);
				columnListItem.attachPress(editTile);
			
			}else if(that.isPlatformABAP && !(context.getProperty("isAffected"))){
				var contextKeys={
						id:"ID",
						isActive: 'IS_ACTIVE',
						editTileRoute: 'editTileModelS'
				}
				editButton.attachPress(editTile);
				columnListItem.attachPress(editTile);
			} else {
				columnListItem.setType("Inactive");
			}
			return columnListItem;
		},
       checkForMandatoryParametersForEvaluation: function() {
          var that = this;
          var evaluationObj = that.getView().getModel("evaluation").getData().EVALUATION;
          var errorLog = [];
          var warningLog = [];
          var inputParameters = {};
          var evaluationFilters = that.getView().getModel("evaluation").getData().FILTERS;
          var evaluationValues = that.getView().getModel("evaluation").getData().VALUES;
          var isTarget = false;
          
          evaluationObj.ODATA_URL ? true : errorLog.push("ERROR_ENTER_ODATA_URL");
          evaluationObj.ODATA_ENTITYSET ? true : errorLog.push("ERROR_ENTER_ENTITY_SET");
          evaluationObj.COLUMN_NAME ? true : errorLog.push("ERROR_ENTER_MEASURE");

          if(evaluationObj.ODATA_URL && evaluationObj.ODATA_ENTITYSET) {
                 this.oData4SAPAnalyticsModel = new sap.ui.model.analytics.odata4analytics.Model(new sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI(that._appendSystemAlias(evaluationObj.ODATA_URL)), null);
                 this.queryResultObj = this.oData4SAPAnalyticsModel.findQueryResultByName(evaluationObj.ODATA_ENTITYSET);
                 if(this.queryResultObj.getParameterization()) {
                        inputParameters = this.queryResultObj.getParameterization().getAllParameters();
                 }

                 for(var i=0,l=evaluationValues.length; i<l; i++) {
                	 if(evaluationValues[i].TYPE == "TA") {
                		 isTarget = true;
                	 }
                	 else if(evaluationValues[i].TYPE && (evaluationValues[i].TYPE.toString().search(/^\d\d$/) == 0)) {
                		 if(evaluationValues[i].COLUMN_NAME == evaluationObj.COLUMN_NAME) {
                			 errorLog.push("ADDI_MEASURE_HAS_MAIN_MEASURE");
                		 }
                	 }
                 }

                 if(!isTarget) {
                	 warningLog.push("ERROR_ENTER_TARGET");
                 }

                 for(var i=0,l=evaluationFilters.length; i<l; i++) {
                        if(evaluationFilters[i].TYPE == 'PA') {
                              if(inputParameters[evaluationFilters[i].NAME] && (evaluationFilters[i].VALUE_1 !== undefined) && (evaluationFilters[i].VALUE_1 !== null)) {
                                     delete inputParameters[evaluationFilters[i].NAME];
                              }
                        }
                 }
                 if(Object.keys(inputParameters).length) {
                        errorLog.push("ERROR_ENTER_ALL_INPUT_PARAMETERS");
                 }
          }
          return {error:errorLog, warning:warningLog};
       },
       formatFilterValue: function(value){
    	   if(!value)
    		   return value;
    	   var valueArray = value.split(",");
    	   pattern =/^[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3])(:[0-5][0-9]){2}[.][0-9]{3}Z$/;
           if(!pattern.test(valueArray[0]))
	    		return value;
    	   var dateArray = [];
    	   for(var key in valueArray)
    		   dateArray.push(new Date(valueArray[key]).toString());
    	   return dateArray.join(",");
       },
        
       formatTags: function(tag) { 
    	   return ((this.getView().byId("tags").getItems().length > 1) ? (', ' + tag) : (tag));
   	   },
   	   formatScalingFactor: function(scalingFactor) {
   		   var that = this;
   		   var scalingFactorText = null;
   		   switch(scalingFactor) {
	   		   case 0: 
	   			   scalingFactorText = that.oApplicationFacade.getResourceBundle().getText("AUTO");
	   			   break;
	   		   case -2:
	   			   scalingFactorText = that.oApplicationFacade.getResourceBundle().getText("PERCENT");
	   			   break;
	   		   default :
	   			   scalingFactorText = that.oApplicationFacade.getResourceBundle().getText("AUTO");
   		   }
   		   return scalingFactorText;
   	   },
   	   formatDecimalPrecision: function(decimalPrecision) {
   		   var that = this;
   		   var decimalPrecisionText = null;
   		   switch(decimalPrecision) {
	   		   case -1: 
	   			   decimalPrecisionText = that.oApplicationFacade.getResourceBundle().getText("AUTO");
	   			   break;
	   		   case 0: 
	   			   decimalPrecisionText = that.oApplicationFacade.getResourceBundle().getText("NO_DECIMAL");
	   			   break;
	   		   case 1: 
	   			   decimalPrecisionText = that.convert(1); 
	   			   break;
	   		   case 2: decimalPrecisionText = that.convert(2);
	   			   break;
	   		   case 3: decimalPrecisionText = that.convert(3);
	   			   break;
	   		   default : 
	   			   decimalPrecisionText = that.oApplicationFacade.getResourceBundle().getText("AUTO");
   		   }
   		   return decimalPrecisionText;
   	   },
   	   convert: function(value){
   		   jQuery.sap.require("sap.ui.core.format.NumberFormat");
   		   var valFormatter = sap.ui.core.format.NumberFormat.getFloatInstance( 
					{style: 'standard', 
						minFractionDigits: value,
						maxFractionDigits: value,}
			);
   		   var fNum = valFormatter.format(0);
   		   return fNum;
   	   },
       
       activateEvaluation: function() {
    	   var that = this;
    	   var payload = {};
    	   var entity = "ACTIVE_EVALUATIONS";
           payload.ID = that.getView().getModel("evaluation").getData().EVALUATION.ID;
           payload = payload;
           var ODataModel = that.oApplicationFacade.getODataModel();
           //odata write
//           ODataModel.create(entity,payload,null,function(data){
//                  sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_SUCCESS"));
//                  ODataModel.refresh();
//                  sap.suite.ui.smartbusiness.lib.Util.utils.hashChange({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")});
//                  that.byId("evalStatus").setText(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
//                  that.byId("evalStatus").setState(sap.ui.core.ValueState.Success); 
//                  that.setHeaderFooterOptions(that.oHeaderFooterOptions);
//           },
//           function(err){
//                  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), err.response.body);
//           });
           
           //xsjs write
           that.metadataRef.create("ACTIVATE_EVALUATION",payload,null,function(data){
        	   sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_SUCCESS"));
        	   //ODataModel.refresh();
        	   that.refreshMasterList();
        	   that.oApplicationFacade.evaluationDetails[that.oApplicationFacade.evaluationIndex].EVALUATION.IS_ACTIVE = 1;
        	   that.byId("evalStatus").setText(that.oApplicationFacade.getResourceBundle().getText("STATUS_ACTIVE"));
        	   that.byId("evalStatus").setState(sap.ui.core.ValueState.Success); 
        	   sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({hash:window.location.hash.replace("IS_ACTIVE=0","IS_ACTIVE=1")}, true);
        	   that.updateFooterButtons(that.oApplicationFacade.evaluationDetails[that.oApplicationFacade.evaluationIndex].EVALUATION);
           },
           function(err){
        	   sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), err.responseText);
        	   that.errorMessages.push({
                   "type":"Error",
                   "title":that.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"),
                   "description":  err.responseText
               });
               sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that); 
           });
           
           
       },
       refreshMasterList: function() {
    	   var that = this;
    	   that.utilsRef.refreshMasterList(that,false);
       },
       _addColumnsToTable:function(){
			var tableRef = this.byId("tileGrid");
			tableRef.removeAllColumns();
			if(this.isPlatformABAP) {
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : this.oApplicationFacade.getResourceBundle().getText("TILE_TYPE")}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : this.oApplicationFacade.getResourceBundle().getText("CATALOGUE")}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
			}
			else {
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : this.oApplicationFacade.getResourceBundle().getText("TILE_TYPE")}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : this.oApplicationFacade.getResourceBundle().getText("NAVIGATION")}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : this.oApplicationFacade.getResourceBundle().getText("STATUS")}),visible : true}));
				tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
				//tableRef.addColumn(new sap.m.Column({header : new sap.m.Label({text : ""}),visible : true}));
			}
       },
       onTilePanelExpanded: function(e){
    	   if(e.getParameter("expand")){
        	   var that = this;
    		   var oModel =this.getView().getModel("evaluation");
    		   if(oModel.getProperty("/CHIPS").length == 0){
    			   this.metadataRef.getChipByEvaluation({
    				   context:this.evalContext,
    				   success:function(data){
    					   oModel.setProperty("/CHIPS",data.CHIPS);
    				   },error:function(e){
    					   sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(this.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"), err.responseText);
    					   that.errorMessages.push({
      		                    "type":"Error",
      		                    "title":this.oApplicationFacade.getResourceBundle().getText("ACTIVATE_EV_ERROR"),
      		                    "description":  e.responseText
      		                });
      		                sap.suite.ui.smartbusiness.lib.Util.utils.setErrorState(that);  
    				   }, model:this.oApplicationFacade.getODataModel()
    				   
    			   });
    		   }
    	   }
       },
       initializeDrillDownViewPopover: function(){
    	   var that=this;
    	   var oResourceBundle = this.oApplicationFacade.getResourceBundle();
    	   this.drillDownViewPopover = new sap.m.ResponsivePopover({
    		   title:"{/TITLE}",
    		   content:[
    		            new sap.ui.layout.form.SimpleForm({
    		            	labelSpanL:2,
    		            	labelSpanM:2,
    		            	emptySpanL:0,
    		            	emptySpanM:0,
    		            	columnsL:1,
    		            	columnsM:1,
    		            	layout:"ResponsiveGridLayout",
    		            	content:[
    		            	         new sap.m.Label({
    		            	        	 text:oResourceBundle.getText("CHART_TYPE"),
    		            	        	 design: "Bold"
    		            	         }),
    		            	         new sap.m.Text({
    		            	        	 text:"{/CHART_TYPE}"
    		            	         }),
    		            	         new sap.m.Label({
    		            	        	 text:oResourceBundle.getText("MEASURES"),
    		            	        	 design: "Bold"
    		            	         }),
    		            	         new sap.m.Text({
    		            	        	 text:{
    		            	        		 path:"/MEASURES",
    		            	        		 formatter:function(aMeasures){
    		            	        			 return aMeasures?aMeasures.join():"";
    		            	        		 }
    		            	        	 }
    		            	         }),
    		            	         new sap.m.Label({
    		            	        	 text:oResourceBundle.getText("DIMENSIONS"),
    		            	        	 design: "Bold"
    		            	         }),
    		            	         new sap.m.Text({
    		            	        	 text:{
    		            	        		 path:"/DIMENSIONS",
    		            	        		 formatter:function(aDimensions){
    		            	        			 return aDimensions ? aDimensions.join():"";
    		            	        		 }
    		            	        	 }
    		            	         })
    		            	         ]
    		            })
    		            ],
    		            beginButton: new sap.m.Button({
    		            	text: oResourceBundle.getText("OPEN_IN_DRILLDOWN"),
    		            	press:function(){
    		            		var viewId = this.getModel().getProperty("/ID");
    		            		var evalId = this.getModel().getProperty("/EVALID");
    		            		sap.suite.ui.smartbusiness.lib.Util.utils.appToAppNavigation({action:"configureSBKPIDrilldown", route:"configureChart", context:evalId+"/"+viewId});
    		            	}
    		            })
    	   });
    	   this.drillDownViewPopover.setModel(new sap.ui.model.json.JSONModel());
       },
       onViewPressed: function(oEvent){
    	   var data = oEvent.getSource().getBindingContext("evaluation").getObject();
    	   this.drillDownViewPopover.getModel().setData(data);
    	   this.drillDownViewPopover.openBy(oEvent.getSource());
       },
       
       
       
   	openAdditionalLanguageDialog : function(oEvent){
		var that=this;
		this.additionalLanguageListModel = new sap.ui.model.json.JSONModel();
		this.additionalLanguageListModelData=[];
		this.additionalLanguageListModelData = that.getView().getModel('evaluation').getData().TEXTS;
		// Fetch All Sap Languages - Adapter Implementation
		var langSuccessHandler = function(obj, arr, localeLanguage) {
			that.SAP_LANGUAGES = obj;
			that.SAP_LANGUAGE_ARRAY = arr;
			that.localLanguage = localeLanguage;
		};
		var i=0;
		var l=this.additionalLanguageListModelData.length;
		sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getAllLanguages({async:false, success:langSuccessHandler, model:this.oDataModel});
		for(i=0;i<l;i++){
			this.additionalLanguageListModelData[i].ADDITIONAL_LANGUAGE_KEY = that.SAP_LANGUAGES.SPRAS[this.additionalLanguageListModelData[i].LANGUAGE]; 
			
		}
		//this.getView().getModel().getData().NO_OF_ADDITIONAL_LANGUAGES = this.additionalLanguageListModelData.length;
		this.additionalLanguageListModel.setData(this.additionalLanguageListModelData);

	

		this.addedLanguagesList = new sap.m.List({
			showNoData:false,
			layoutData : new sap.ui.layout.GridData({
				span : "L5 M5 S5"
			}),
		});
		
		this.setEnable = function(){
			if(this.addedLanguagesList.getItems().length==0)
			{
				additionalLanguageDialog.getBeginButton().setEnabled(false); //enabling the "OK" button when an entry is added
			}else{
				additionalLanguageDialog.getBeginButton().setEnabled(true);
			}
		}
		
		
		
		
		
		
		this.addedLanguagesList.bindItems("additionalLanguageListModel>/", new sap.m.CustomListItem({
			content : new sap.ui.layout.Grid({
				hSpacing: 1,
				vSpacing: 0,
				defaultSpan : "L12 M12 S12",
				content: [
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>TITLE}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L12 M12 S12",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>DESCRIPTION}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L7 M7 S7",
				        		  vAlign : "Middle"
				        	  }),
				        	  editable : false
				          }),
				          new sap.m.Input({
				        	  value : "{additionalLanguageListModel>ADDITIONAL_LANGUAGE_KEY}",
				        	  design : "Bold",
				        	  layoutData : new sap.ui.layout.GridData({
				        		  span : "L3 M3 S3"
				        	  }),
				        	  editable : false
				          }),
				         
				          ]
			})
		}));

		this.addedLanguagesList.setModel(that.additionalLanguageListModel,"additionalLanguageListModel");

		var additionalLanguageDialog = new sap.m.Dialog({
			contentHeight : "50%",
			contentWidth : "25%",
			title : that.oApplicationFacade.getResourceBundle().getText("ADDITIONAL_LANGUAGES"),
			content :  [
			           

			            that.addedLanguagesList

			            ],

			            endButton : new sap.m.Button({
			            	text : that.oApplicationFacade.getResourceBundle().getText("OK"),
			            	press : function(){
			            		additionalLanguageDialog.close();
			            	}
			            })
		});

			additionalLanguageDialog.open();
	},
	
	
       onDrillDownPanelExpanded: function(e){
    	   if(e.getParameter('expand')){
    		   var oModel =this.getView().getModel("evaluation");
    		   if(!(oModel.getProperty("/DRILLDOWN/ISLOADED"))){
    			   var evalId = this.oApplicationFacade.evaluationDetails[this.oApplicationFacade.evaluationIndex].EVALUATION.ID;
    			   var configuration=new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Configuration(evalId);
    			   var viewConfig = configuration.getDefaultView();
    			   var headers = viewConfig ?(viewConfig.getHeaders()||[]) : [];
    			   var filters = viewConfig ?(viewConfig.getFilters()||[]) : [];
    			   var data = {
    					   FILTERS:filters.join(", "),
    					   VIEWS:[],
    					   ISLOADED:true,
    					   HEADERS_COUNT:headers.length
    			   };
    			   var allViews = configuration.getAllViews()||[];
    			   allViews.forEach(function(curView){
    				   var curViewConfig = configuration.findViewById(curView.ID);
    				   data.VIEWS.push({
    					   ID:curView.ID,
    					   EVALID:evalId,
    					   MEASURES: curViewConfig.getMeasures(),
    					   DIMENSIONS: curViewConfig.getDimensions(),
    					   TITLE: curViewConfig.getTitle(),
    					   CHART_TYPE: curViewConfig.getChartConfiguration()[0].oChart.CHART_TYPE,
    				   });
    			   });
    			   data.VIEW_COUNT = data.VIEWS.length;
    			  oModel.setProperty("/DRILLDOWN",data); 
    		   }
    	   }
       }

});


}; // end of sap/suite/ui/smartbusiness/designtime/workspace/view/S4.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.Chip') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.Chip");


sap.suite.ui.smartbusiness.lib.Chip = (function() {
    var dryrun = false;
    var chipUrlMapping = {
            "NT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatornumeric/NumericTileChip.xml",
            "CT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorcontribution/ContributionTileChip.xml",
            "TT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatorArea/AreaChartTileChip.xml",
            "AT" : "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/components/tiles/indicatordeviation/DeviationTileChip.xml"
    };
    var generateChipId = function(evaluation, timestamp) {
        var username = "ATH";
        try {
            if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
                var userInfoService = sap.ushell.Container.getService("UserInfo");
                if(userInfoService && userInfoService.getId) {
                    username = userInfoService.getId() || "ATH";
                }
            }
        }catch(e){}
        return evaluation.ID + "_"+ username + "_"+ timestamp;
    };
    var getTileProperties = function(evaluation, tileType, semanticObject, semanticAction) {
        return  {
            "tileType" : tileType,
            "frameType" : "OneByOne",
            "navType" : 0,
            "semanticObject" : semanticObject || evaluation.COLUMN_NAME,
            "semanticAction"  : semanticAction || "analyzeSBKPIDetails",
            "appParameters" : {}
        };
    };
    var EVALUATION_PROPERTY_REQUIRED = [
      "ID","INDICATOR","INDICATOR_TITLE","INDICATOR_TYPE","GOAL_TYPE", "TITLE","SCALING",
      "ODATA_URL", "ODATA_ENTITYSET", "VIEW_NAME", "COLUMN_NAME", "OWNER_NAME","VALUES_SOURCE"
    ];
    var getEvaluationFilters = function(evaluation) {
        var filters = [];
        evaluation.FILTERS["results"].forEach(function(jsonObject) {
            delete jsonObject.__metadata;
            var obj = {};
            for(var prop in jsonObject) {
                if(jsonObject.hasOwnProperty(prop)) {
                    obj[prop] = jsonObject[prop];
                }
            }
            filters.push(obj);
        });
        return filters;
    };
    var getEvaluationValues = function(evaluation, oEvaluationValues) {
        if(oEvaluationValues) {
            return oEvaluationValues.evaluationValues;
        } else {
            var values = [];
            evaluation.VALUES["results"].forEach(function(jsonObject) {
                delete jsonObject.__metadata;
                var obj = {};
                for(var prop in jsonObject) {
                    if(jsonObject.hasOwnProperty(prop)) {
                        obj[prop] = jsonObject[prop];
                    }
                }
                values.push(obj);
            });
            return values;
        }
    };
    var _getAdditionFilters = function(filters) {
        var finalArray=  [];
        if(filters && filters.length) {
            filters.forEach(function(eachArray) {
                var object = {};
                object["NAME"] = eachArray[0];
                object["OPERATOR"] = eachArray[1];
                object["VALUE_1"] = eachArray[2];
                object["VALUE_2"] = eachArray[3];
                object["TYPE"] = "FI";
                finalArray.push(object);
            });
        }
        return finalArray;
    };
    var getEvaluationDetails = function(evaluation) {
        var evalObject = {};
        EVALUATION_PROPERTY_REQUIRED.forEach(function(eachEvalProperty){
            evalObject[eachEvalProperty] = evaluation[eachEvalProperty];
        });
        return evalObject;
    };
    var _appendSystemAlias = function(uri, sysAlias) {
    	if(sap.ushell && sap.ushell.Container && sap.ushell.Container.getService) {
    		var urlParsingService = sap.ushell.Container.getService("URLParsing");
    		if(urlParsingService) {
    			uri = urlParsingService.addSystemToServiceUrl(uri, sysAlias);
    		}
    	}
    	return uri;
    };
    var publishTileODataWrite = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        var ODataModel = sap.suite.ui.smartbusiness.lib.Util.odata.getModelByServiceUri(serviceUri);
        ODataModel.create("/CHIPS_USER", payload, null, function() {
            sCallback.call();
        }, function(err) {
            fCallback.call(null,err);
        }, false);
    };
    var publishTileXsjsService = function(payload, systemAlias, sCallback, fCallback) {
    	var serviceUri = "/sap/hba/r/sb/core/logic/__token.xsjs";
    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
    	jQuery.ajax({
    		url : serviceUri,
    		type : "HEAD",
    		async : false,
    		headers : {
    			"X-CSRF-Token" : "Fetch"
    		},
    		success : function(data, status, xhr) {
    	    	serviceUri = "/sap/hba/r/sb/core/logic/addToCatalog.xsjs";
    	    	serviceUri = _appendSystemAlias(serviceUri, systemAlias);
        		var token = xhr.getResponseHeader("x-csrf-token");
        		jQuery.ajax({
        			url : serviceUri,
        			type : "POST",
        			async : false,
        			data : encodeURIComponent(JSON.stringify(payload)),
        			dataType : "json",
        			headers : {
        				"x-csrf-token" : token
        			},
        			success : function(data) {
        				sCallback.call(null, data);
        			},
        			error : function(err) {
        				fCallback.call(null, err);
        			}
        		});
    		},
    		error : function(err) {
    			fCallback.call(null, err);
    		}
    	});
    };
    return {
        savePersonalizedTile : function(oParam) {
            var response = {};
            /**
             * oParam {
             *         title : '',
             *         description:''
             *         evaluationId : '',//Mandatory
             *         tileType : '' , //Mandatory - PossibleValues : NT, TT, CT, AT
             *         semanticObject : '',
             *         semanticAction : '',
             *         additionalFilters : [
             *              ["COUNTRY","EQ","INDIA",""],
             *              ["TIME","BT","10:20","11:20"]
             *          ],
             *          additionalAppParameters : {
             *              StoryId : '',
             *              
             *          },
             *          evaluationValues : [
             *              //for Maximizing Kpi
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CL", FIXED : 3000},
             *              {"TYPE" : "WL", FIXED : 2500}
             *              //For MINiMIZING KPI
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CH", FIXED : 3000},
             *              {"TYPE" : "WH", FIXED : 2500}

             *              //for Target Kpi
             *              {"TYPE" : "CL", FIXED : 3000},
             *              {"TYPE" : "WL", FIXED : 2500}
             *              {"TYPE" : "TA", FIXED : 2000},
             *              {"TYPE" : "CH", FIXED : 3000},
             *              {"TYPE" : "WH", FIXED : 2500}
             *              
             *          ] 
             * }
             */
            if(oParam.evaluationId && oParam.tileType) {
                var evaluationData = sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
                    id  : oParam.evaluationId,
                    cache : true,
                    filters : true,
                    thresholds : true,
                    useRuntimeService : true,
                    sapSystem : oParam.sapSystem
                });
                if(evaluationData && evaluationData.ID) {
                    var TIMESTAMP = Date.now()+"";
                    var CHIP_ID = generateChipId(evaluationData,TIMESTAMP);
                    var MASTER_OBJECT = {};
                    MASTER_OBJECT["id"] = CHIP_ID;
                    MASTER_OBJECT["tileType"] = oParam.tileType;
                    MASTER_OBJECT["url"] = chipUrlMapping[oParam.tileType];
                    MASTER_OBJECT["description"] = oParam.title || evaluationData.TITLE;
                    MASTER_OBJECT["title"] = evaluationData.INDICATOR_TITLE;
                    MASTER_OBJECT["catalogId"] = "HANA_CATALOG";
                    MASTER_OBJECT["configuration"] = {tileConfiguration:{}};
                    var TILE_PROPERTIES  =  getTileProperties(evaluationData, oParam.tileType, oParam.semanticObject, oParam.semanticAction);
                    TILE_PROPERTIES["id"] = CHIP_ID;
                    TILE_PROPERTIES["dimension"] = oParam.dimension;
                    var EVALUATION_FILTERS = JSON.stringify(getEvaluationFilters(evaluationData));
                    var EVALUATION_VALUES = getEvaluationValues(evaluationData, oParam.evaluationValues);
                    var EVALUATION = JSON.stringify(getEvaluationDetails(evaluationData));
                    MASTER_OBJECT.configuration.tileConfiguration["TILE_PROPERTIES"] = JSON.stringify(TILE_PROPERTIES);
                    MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_VALUES"] = JSON.stringify(EVALUATION_VALUES);
                    MASTER_OBJECT.configuration.tileConfiguration["EVALUATION"] = EVALUATION;
                    MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_FILTERS"] = JSON.stringify(_getAdditionFilters(oParam.additionalFilters));
                    MASTER_OBJECT.configuration.tileConfiguration["ADDITIONAL_APP_PARAMETERS"] = JSON.stringify(oParam.additionalAppParameters || {});
                    MASTER_OBJECT.configuration.tileConfiguration["timestamp"] = TIMESTAMP;
                    MASTER_OBJECT.configuration["isSufficient"] = "0";
                    MASTER_OBJECT["evaluationId"] = evaluationData.ID;
                    MASTER_OBJECT["keywords"] = oParam.keywords || null;
                    var configurationLength = JSON.stringify(MASTER_OBJECT.configuration).length;
                    if(configurationLength > 4096) {
                        MASTER_OBJECT.configuration.tileConfiguration["EVALUATION_FILTERS"] = JSON.stringify([]);
                        MASTER_OBJECT.configuration["isSufficient"] = "0";
                    }
                    MASTER_OBJECT["configuration"].tileConfiguration = JSON.stringify(MASTER_OBJECT["configuration"].tileConfiguration);
                    MASTER_OBJECT["configuration"] = JSON.stringify(MASTER_OBJECT["configuration"]);
                    publishTileXsjsService(MASTER_OBJECT, oParam.sapSystem, function(responseObject) {
                        response.status = "Success",
                        response.chipId = responseObject.chipId,
                        response.message="Tile Created Successfully";
                    }, function(errorObject) {
                        response.status="Failed",
                        response.message="Error Creating Tile";
                        response.errorDescription = errorObject;
                    });
                } else {
                    response.status="Failed",
                    response.message="Invalid Evaluation Id : "+oParam.evaluationId;
                }
            } else {
                response.status="Failed",
                response.message="Mandatory Param evaluationId or TileType is Missing";
            }
            return response;
        }
    };
})();

}; // end of sap/suite/ui/smartbusiness/lib/Chip.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.DrilldownModel') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.DrilldownModel");



sap.suite.ui.smartbusiness.lib.DrilldownModel = sap.suite.ui.smartbusiness.lib.DrilldownModel || {};

sap.suite.ui.smartbusiness.lib.DrilldownModel.Model = function(evaluationId, viewId, i18n) {
    this.ddaConfigurator = null;
    this.viewId = viewId;
    this.selectedView = null;
    this.i18nModel=i18n;
    this.evaluationId = evaluationId;
    if(this.evaluationId) {
        this._init();
    }
};
sap.suite.ui.smartbusiness.lib.DrilldownModel.Model._instances = {};
sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts={
		ALL_LANGUAGES:[],
		CURRENT_LANGUAGE:[],
		isLoaded:false
};
sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.getInstance = function(evaluationId, bForce, i18n) {
    function getInstance(eId) {
        var modelInstance = new sap.suite.ui.smartbusiness.lib.DrilldownModel.Model(eId,null,i18n);
        sap.suite.ui.smartbusiness.lib.DrilldownModel.Model._instances[eId] = modelInstance;
        return sap.suite.ui.smartbusiness.lib.DrilldownModel.Model._instances[eId];
    }
    if(bForce) {
        return getInstance(evaluationId,null,i18n);
    }
    if(sap.suite.ui.smartbusiness.lib.DrilldownModel.Model._instances[evaluationId]) {
        return sap.suite.ui.smartbusiness.lib.DrilldownModel.Model._instances[evaluationId];  
    } else {
        return getInstance(evaluationId,null,i18n);
    }
};
sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.prototype = {
    _init : function(evaluationId) {
        this.ddaConfigurator = new sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.Configuration(this.evaluationId);
        this.EVALUATION_DATA = sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
           id : this.evaluationId,
           cache : true,
           filters:true,
           thresholds:true
        });
        this._setModel();
    },
    NEW_VIEWID:"~NA~",
    _setModel : function() {
    	this._oModel=new sap.ui.model.json.JSONModel(this.getModelDataForDDAConfiguration());
    	try{
    		this._oModel.setSizeLimit(9999);
    	}catch(e){	
    	}
    },
    removeAllViews:function(){
    	this.getConfigurator().removeAllViews();
    	this._oModel.setData(this.getModelDataForDDAConfiguration());
    },
    bindModel:function(oControl,sName){
    	if(sName){
    		oControl.setModel(this._oModel,sName);
    	}else{
    		oControl.setModel(this._oModel);
    	}
    	this._oModel.refresh();
    },
    getConfigurator : function() {
        return this.ddaConfigurator;
    },
    setEvaluationId : function(evaluationId) {
        this.evaluationId = evaluationId;
        this._init()
    },
    setViewId : function(viewId) {
        this.viewId = viewId;
        this.selectedView = this.ddaConfigurator.findViewById(this.viewId);
        this._setModel();
    },
    fetchLanguageData:function(sName,fnS){
    	if(sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.isLoaded){
    		fnS({
    			ALL_LANGUAGES:sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.ALL_LANGUAGES,
    			CURRENT_LANGUAGE:sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.CURRENT_LANGUAGE
    		});
    	}else{
    		var locale_language = sap.ui.getCore().getConfiguration().getLocale().getLanguage().toUpperCase();
    		new sap.ui.model.odata.ODataModel(sap.suite.ui.smartbusiness.lib.Util.utils.appendUrlParameters("/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata"), true)
    								.read("/LANGUAGE?$select=SPRAS,LAISO&orderby=LAISO", null, null, true, 
    										function(data) {
    										sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.isLoaded=true;
    										var lang={ALL_LANGUAGES:[],CURRENT_LANGUAGE:[]};
    											for(var i = 0; i < data.results.length; ++i) {
    												if(data.results[i]["LAISO"] == locale_language) {
    													lang["CURRENT_LANGUAGE"] = data.results[i]["SPRAS"];
    													//remove current language from the list of addnl languages
    													data.results.splice(i, 1);
    													break;
    												}
    											}
    										lang["ALL_LANGUAGES"] = data.results;
    							    		sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.ALL_LANGUAGES=lang["ALL_LANGUAGES"];
    							    		sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.languageTexts.CURRENT_LANGUAGE=lang["CURRENT_LANGUAGE"];
    										fnS(lang);
    											
    										});
    	
    	}
    },
    _getEvalData:function(sId){
		try{
    		var evalData=sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
 	           id : sId, cache : true, filters:false, thresholds:false, getDDAEvaluation:true
 	        });
    		return evalData;
		}catch(e){
			return {};
		}
    },
    getDefaultModelData:function(){
    	var that=this;
    	try{
    		var dimensions=sap.suite.ui.smartbusiness.lib.Util.odata.getAllDimensions(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
    		var sortableDimensions=sap.suite.ui.smartbusiness.lib.Util.odata.getSortableProperties(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
    		var measures=sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
    		var filterableDimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET)||[] ;
    		var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this.EVALUATION_DATA.ODATA_URL,this.EVALUATION_DATA.ODATA_ENTITYSET);
            var COLUMN_LABEL_MAPPING = mProperties.getLabelMappingObject();
    	}catch(e){
    		var dimensions=[];
    		var measures=[];
    	}
    	function _getEvaluationTitle(sId){
    		return that._getEvalData(sId).INDICATOR_TITLE;
    	}
    	function _getEvaluationSubTitle(sId){
    		return that._getEvalData(sId).TITLE;
    	}
    	function _getEvaluationIndicator(sId){
    		return that._getEvalData(sId).INDICATOR;
    	}
    	function getMeasureWithLabels(){
    		
    		var msrLabel=[];
    		for(var i=0;i<measures.length;i++){
    			msrLabel.push({
    				NAME:measures[i],
    				LABEL:COLUMN_LABEL_MAPPING[measures[i]]
    			})
    			
    		}
    		//msrLabel.unshift(this.i18nModel.getProperty("SELECT_NONE"));
    		return msrLabel;
    		
    	}
    	function getDefaultHeaders(){
    		var headers=[];
    		var tileTypes=["NT","AT","CT","TT","CM" /*,"HT"*/];
    		// pushing generic configuration for all tiles. even those which are relevant for only
    		//one tile type
    		
    		for(var i=0,length=tileTypes.length;i<length;i++){
    			headers.push({
    				           EVALUATION_ID : that.evaluationId,
                               CONFIGURATION_ID : that.NEW_VIEWID,
                               REFERENCE_EVALUATION_ID : that.evaluationId,
                               VISUALIZATION_TYPE : tileTypes[i],
                               VISUALIZATION_TYPE_INDEX:4,
                               VISUALIZATION_ORDER : 1,
                               DIMENSION :  dimensions[0],
                               DIMENSION_COLOR:"Neutral",
                               SORT_BY:"",
                               SORT_ORDER:"MD",
                               MEASURE1:measures[0],
                               MEASURE2:measures[1]||measures[0],
                               MEASURE3:"",
                               COLOR1:"Good",
                               COLOR2:"Critical",
                               COLOR3:"Error",
                               ALL_MEASURES:measures,
                               ALL_DIMENSIONS:dimensions,
                               HARVEY_FILTERS:[{
                            	   					NAME: filterableDimensions[0],
                            	   					OPERATOR:"EQ",
                            	   					VALUE_1:[],
                            	   					VALUE_2:[]
                               					}],
                               HARVEY_TOTAL_MEASURE:measures[0],
                               FILTERABLE_DIMENSIONS: filterableDimensions,
                               IS_HARVEY_FRACTION_KPIMEASURE : true,
                               IS_HARVEYMEASURE_KPIMEASURE : false,
                               VISIBILITY : 1,
                               visible : false,
                               TITLE : _getEvaluationTitle(that.evaluationId),
                               SUBTITLE : _getEvaluationSubTitle(that.evaluationId),
                               GROUPING_TITLE:_getEvaluationTitle(that.evaluationId)+" "+_getEvaluationSubTitle(that.evaluationId),
                               INDICATOR:_getEvaluationIndicator(that.evaluationId)
    			})
    		}
    		return headers;
    	}
        var modelData =  {
        		CONFIG:{
        			SAP_AGGREGATE_VALUE:true
        		},
            	ID_EDITABLE:true,
            	INDICATOR:this.EVALUATION_DATA.INDICATOR,
            	ID : "",
            	TITLE : "",
            	EVALUATION_TITLE:this.EVALUATION_DATA.TITLE,
                QUERY_SERVICE_URI : this.EVALUATION_DATA.ODATA_URL,
                QUERY_ENTITY_SET : this.EVALUATION_DATA.ODATA_ENTITYSET,
            	TEXT:"", 
            	MAIN_MEASURE:"",
            	THRESHOLD_MEASURE:"",
                ALL_DIMENSIONS:dimensions,
                ALL_SORTABLE_DIMENSIONS:sortableDimensions,
                ALL_MEASURES:measures,
                ALL_MEASURES_LABELS:getMeasureWithLabels(),
                VALUE_TYPES : [
                       {key : "ABSOLUTE", text : this.i18nModel.getProperty("ABSOLUTE_VALUES")},           
                       {key : "PERCENTAGE", text : this.i18nModel.getProperty("PERCENTAGE_VALUES")}           
                ],
                AXIS_TYPES : [
                       {key : "SINGLE", text : this.i18nModel.getProperty("SINGLE_AXIS")},           
                       {key : "DUAL", text : this.i18nModel.getProperty("DUAL_AXIS")}           
                ],
                AXIS_TYPE : "SINGLE",
                VALUE_TYPE : "ABSOLUTE",
                CHART_TYPE: "Column",
                CHART_TYPES : [
                                   {key : "Bar", text : this.i18nModel.getProperty("BARS")},
                                   {key : "Column", text :this.i18nModel.getProperty("COLUMNS")},
                                   {key : "Line", text : this.i18nModel.getProperty("LINES")},
                                   {key : "Combination", text : this.i18nModel.getProperty("COLUMNS_AND_LINES")},
                                   {key : "Bubble", text : this.i18nModel.getProperty("BUBBLES")},
                                   {key : "Table", text : this.i18nModel.getProperty("TABLE")}                                  
                                   /*{key : "Choropleth", text : this.i18nModel.getProperty("CHOROPLETH")},*/
                                   
                               ],
                GEO_MAP_TYPE : "Pie",
                GEO_MAP_TYPES : [
                                 
                                 {key : "Pie", text : this.i18nModel.getProperty("PIE")},
                                 {key : "Bubble", text :this.i18nModel.getProperty("BUBBLES")},
                                 {key : "Pin", text : this.i18nModel.getProperty("PIN")},
                                  
                                 
                                 ],
                DATA_MODES :[
                             {key : "DUMMY", text : this.i18nModel.getProperty("DUMMY_DATA")},
                             {key : "RUNTIME", text : this.i18nModel.getProperty("ACTUAL_BACKEND_DATA")}
                             
                ],
                DATA_MODE:"DUMMY",
                DATA_LIMIT :  200,
                DATA_LIMITATIONS :false,
                COLOR_SCHEME : "NONE",
                COLOR_SCHEMES : [
                             	 {key : "NONE", text : this.i18nModel.getProperty("DEFAULT_COLORS")},                                 
                                 {key : "AUTO_SEMANTIC", text :this.i18nModel.getProperty("AUTO_SEMANTIC_COLORS")},
                                 {key : "MANUAL_SEMANTIC", text : this.i18nModel.getProperty("MANUAL_SEMANTIC_COLORS")},
                                 {key : "MANUAL_NON_SEMANTIC", text : this.i18nModel.getProperty("MANUAL_COLORS")}                                 
                    ],
            	"MANUAL_NON_SEMANTIC":	[ 	
    			                  	  	{color:"sapUiChartPaletteQualitativeHue1",index:0},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue2",index:1},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue3",index:2},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue4",index:3},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue5",index:4},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue6",index:5},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue7",index:6},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue8",index:7},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue9",index:8},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue10",index:9},
    			                  	  	{color:"sapUiChartPaletteQualitativeHue11",index:10}
    			                  	 ],
              	"MANUAL_SEMANTIC": [	 
              	                  	 {color:"sapUiChartPaletteSemanticNeutralDark1",index:0},
              	                  	 {color:"sapUiChartPaletteSemanticNeutral",index:1},
              	                  	 {color:"sapUiChartPaletteSemanticNeutralLight1",index:2},
              	                  	 {color:"sapUiChartPaletteSemanticGoodDark1",index:3},
              	                  	 {color:"sapUiChartPaletteSemanticGood",index:4},
              	                  	 {color:"sapUiChartPaletteSemanticGoodLight1",index:5},
              	                  	 {color:"sapUiChartPaletteSemanticCriticalDark1" ,index:6},
              	                  	 {color:"sapUiChartPaletteSemanticCritical",index:7},
              	                  	 {color:"sapUiChartPaletteSemanticCriticalLight1",index:8},
              	                  	 {color:"sapUiChartPaletteSemanticBadDark1",index:9},
              	                  	 {color:"sapUiChartPaletteSemanticBad",index:10},
              	                  	 {color:"sapUiChartPaletteSemanticBadLight1",index:11}
              	                  ],
                COLUMNS : [

                ],
                SIBLING_EVALUATIONS:[
                 ],
                ASSOCIATED_EVALUATIONS:[
                ],
                ADDITIONAL_LANGUAGE_TITLES: [],
                FILTERS : [],
                HEADER_EVALUATIONID:{},
                HEADERS_VISIBLE:[],
                HEADERS :getDefaultHeaders(),
                SELECTED_VIEW : "",
                ALL_VIEWS : this.ddaConfigurator.getAllViews(),
                ALL_LANGUAGES: [],
                CURRENT_LANGUAGE: "E"
            };
            modelData.HEADER_EVALUATIONID[this.evaluationId]=true;
            //modelData.TITLE=this.EVALUATION_DATA.TITLE;
            this.fetchLanguageData("SB_DDACONFIG_LANG",function(o){
            	modelData.ALL_LANGUAGES=o.ALL_LANGUAGES;
            	modelData.CURRENT_LANGUAGE=o.CURRENT_LANGUAGE;
            });
            return modelData;
    },
    getModelDataForDDAConfiguration : function() {
    	function getDataLimit(n){
    		return (n==-1 || !n)?200:n;
    	}
    	function _getAllDimensionsForEval(sId){
    		try{
        		var evalData=sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
     	           id : sId,cache : true, filters:true,thresholds:true
     	        });
        		return sap.suite.ui.smartbusiness.lib.Util.odata.getAllDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getAllMeasuresForEval(sId){
    		try{
        		var evalData=sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
     	           id : sId,cache : true, filters:true,thresholds:true
     	        });
        		return sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getAllFilterableDimensions(sId){
    		try{
        		var evalData=sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
     	           id : sId,cache : true, filters:true,thresholds:true
     	        });
        		return sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET);
    		}catch(e){
    			return [];
    		}
    	}
    	function _getEvaluationTitle(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.INDICATOR_TITLE) ? evaluationData.INDICATOR_TITLE : "";
    	}
    	function _getEvaluationSubTitle(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.TITLE) ? evaluationData.TITLE : "";
    	}
    	function _getEvaluationIndicator(sId){
    		var evaluationData = that._getEvalData(sId);
    		return (evaluationData && evaluationData.INDICATOR) ? evaluationData.INDICATOR : "";
    	}
    	var that=this;
    	var tileTypes=["NT","AT","CT","TT","CM" /*,"HT"*/];
    	var modelData=this.getDefaultModelData();
    	var filterableDimensions,dimensions,measures;
        if(this.selectedView) {
            /**
             * Filling ALL Views Array
             */
        		var that=this;
            modelData.ALL_VIEWS = this.ddaConfigurator.getAllViews();
            modelData.SELECTED_VIEW = this.selectedView.getId();
            modelData.ID = this.selectedView.getId();
            modelData.TITLE = this.selectedView.getTitle();
            modelData.ADDITIONAL_LANGUAGE_TITLES = this.selectedView.getAdditionalLanguageTitles();
            modelData.ID_EDITABLE = false;
            var chartConfiguration=this.selectedView.getChartConfiguration()[0];
            modelData.THRESHOLD_MEASURE = chartConfiguration?chartConfiguration.getThresholdMeasure():"";
            modelData.AXIS_TYPE = chartConfiguration?chartConfiguration.getAxisType():"SINGLE";
            modelData.VALUE_TYPE = chartConfiguration?chartConfiguration.getValueType():"ABSOLUTE";
            modelData.CHART_TYPE = chartConfiguration?chartConfiguration.getChartType().getText():"Bar";
            modelData.DATA_LIMIT = chartConfiguration?getDataLimit(chartConfiguration.getDataLimit()):200;
            modelData.DATA_LIMITATIONS=this.getDataLimitations();
            modelData.CONFIG.SAP_AGGREGATE_VALUE=this.selectedView.isAggregateValueEnabled();
            modelData.COLOR_SCHEME = chartConfiguration?chartConfiguration.getColorScheme().getText():"AUTO_SEMANTIC";
            if(this.selectedView.getHeaders().length){
            	var headers = this.selectedView.getHeaders();
            	modelData.HEADERS = [];
            	modelData.HEADERS_VISIBLE=[];
            	var headerTileRegister={};
                modelData.HEADER_EVALUATIONID={};
                headers.forEach(function(oHeader) {
                	if(oHeader.getVisualizationType() == "HT"){
	                	return;
                	}
                	modelData.HEADER_EVALUATIONID[oHeader.getReferenceEvaluationId()]=true;
                	headerTileRegister[oHeader.getReferenceEvaluationId()]=headerTileRegister[oHeader.getReferenceEvaluationId()]||{};
                    var measures=_getAllMeasuresForEval(oHeader.getReferenceEvaluationId());
                    var dimensions=_getAllDimensionsForEval(oHeader.getReferenceEvaluationId());
                    var filterableDimensions = _getAllFilterableDimensions(oHeader.getReferenceEvaluationId());
                    var headerConfig=oHeader.getConfiguration();
                	modelData.HEADERS_VISIBLE.push({
                        EVALUATION_ID : that.evaluationId,
                        CONFIGURATION_ID : modelData.SELECTED_VIEW,
                        REFERENCE_EVALUATION_ID : oHeader.getReferenceEvaluationId(),
                        VISUALIZATION_TYPE : oHeader.getVisualizationType(),
                        VISUALIZATION_ORDER : oHeader.getVisualizationOrder(),
                        DIMENSION : oHeader.getDimension()||dimensions[0],
                        SORT_BY:"",
                        SORT_ORDER	:headerConfig.SORTING.by+(headerConfig.SORTING.order=="desc"?+"D":"A"),
                        MEASURE1	:headerConfig.MEASURES[0].name||measures[0],
                        MEASURE2	:headerConfig.MEASURES[1].name||measures[1]||measures[0],
                        MEASURE3	:headerConfig.MEASURES[2]?headerConfig.MEASURES[2].name:"",
                        COLOR1:headerConfig.MEASURES[0].color||"Neutral",
                        COLOR2:headerConfig.MEASURES[1].color||"Neutral",
                        COLOR3:headerConfig.MEASURES[2]?headerConfig.MEASURES[2].color:"Neutral",
                        DIMENSION_COLOR:headerConfig.SORTING.dimension_color||"Neutral",
                        FILTERABLE_DIMENSIONS: filterableDimensions,
                        HARVEY_TOTAL_MEASURE:headerConfig.HARVEY_TOTAL_MEASURE||measures[0],
                        HARVEY_FILTERS:headerConfig.HARVEY_FILTERS||[{
											                        	NAME:filterableDimensions[0],
											                        	OPERATOR:"EQ",
											                        	VALUE_1:[],
											                        	VALUE_2:[]
											                        }],
                        IS_HARVEY_FRACTION_KPIMEASURE : !!headerConfig.IS_HARVEY_FRACTION_KPIMEASURE,
                        IS_HARVEYMEASURE_KPIMEASURE : !headerConfig.IS_HARVEY_FRACTION_KPIMEASURE,
                        ALL_MEASURES:measures,
                        ALL_DIMENSIONS:dimensions,
                        VISIBILITY : oHeader.getVisibility(),
                        visible : true,
                        TITLE : _getEvaluationTitle(oHeader.getReferenceEvaluationId()),
                        SUBTITLE : _getEvaluationSubTitle(oHeader.getReferenceEvaluationId()),
                        INDICATOR:_getEvaluationIndicator(oHeader.getReferenceEvaluationId())
                    });
                	//headerTileRegister[oHeader.getReferenceEvaluationId()][oHeader.getVisualizationType()]=true;
                });
                modelData.HEADERS_VISIBLE.sort(function(a,b){
                	return a.VISUALIZATION_ORDER > b.VISUALIZATION_ORDER?1:-1;
                });
                modelData.HEADER_EVALUATIONID[this.evaluationId]=true;
                headerTileRegister[this.evaluationId]=headerTileRegister[this.evaluationId]||{};
                var that=this;
                
                for(var each in headerTileRegister){     
                	var measures=_getAllMeasuresForEval(each);
                	var dimensions=_getAllDimensionsForEval(each);
                    var filterableDimensions = _getAllFilterableDimensions(each);
                	tileTypes.forEach(function(s){
                        modelData.HEADERS.push({
                            EVALUATION_ID : that.evaluationId,
                            CONFIGURATION_ID : modelData.SELECTED_VIEW,
                            REFERENCE_EVALUATION_ID : each,
                            VISUALIZATION_TYPE : s,
                            VISUALIZATION_TYPE_INDEX:tileTypes.indexOf(s),
                            VISUALIZATION_ORDER : 1,
                            DIMENSION : dimensions[0],
                            SORT_BY:"",
                            SORT_ORDER:"MD",
                            MEASURE1	:measures[0],
                            MEASURE2	:measures[1]||measures[0],
                            MEASURE3	:"",
                            DIMENSION_COLOR : "Neutral",
                            HARVEY_TOTAL_MEASURE: measures[0],
                            FILTERABLE_DIMENSIONS: filterableDimensions,
                            HARVEY_FILTERS:[{
                            	NAME: filterableDimensions[0],
                            	OPERATOR:"EQ",
                            	VALUE_1:[],
                            	VALUE_2:[]
                            }],
                            IS_HARVEY_FRACTION_KPIMEASURE : true,
                            IS_HARVEYMEASURE_KPIMEASURE : false,                            
                            COLOR1:"Good",
                            COLOR2:"Critical",
                            COLOR3:"Error",
                            ALL_MEASURES:measures,
                            ALL_DIMENSIONS:_getAllDimensionsForEval(each),
                            VISIBILITY : 1,
                            visible : false,
                            TITLE: _getEvaluationTitle(each),
                        	SUBTITLE: _getEvaluationSubTitle(each),
                        	GROUPING_TITLE:_getEvaluationTitle(each)+" "+_getEvaluationSubTitle(each),
                            INDICATOR:_getEvaluationIndicator(each)
                        });
                	});
                }
            }
            //modelData.HEADERS = [];
            

            var columns  = this.selectedView.getColumns();
            for(var i=0;i<columns.length;i++) {
                var column = this.selectedView.findColumnByName(columns[i]);
                modelData.COLUMNS.push({
                    NAME : column.getName(),
                    TYPE : column.getType(),
                    COLOR1 : modelData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?column. getColor():"",
                    COLOR2 : modelData.COLOR_SCHEME=="MANUAL_SEMANTIC"?column. getColor():"",
                    AXIS : column.getAxis(),
                    SORT_ORDER : column.getSortOrder(),
                    SORT_BY : column.getSortBy(),
                    COLUMNS_ORDER : column.getColumnOrder(),
                    VISIBILITY : column.getVisibility(),
                    STACKING : column.getStacking()
                });
            }
            var filters = this.selectedView.getFilters();
            for(var i=0; i<filters.length;i++) {
                var filter = filters[i];
                modelData.FILTERS.push({
                    name : filter
                });
            }
        }
        return modelData;
    },

    getDataLimitations:function(){
    	var chartConfiguration=this.selectedView.getChartConfiguration()[0];
       	if(chartConfiguration && chartConfiguration.getDataLimit()!= -1){
       		return true;
       	}else if(chartConfiguration && chartConfiguration.getDataLimit()== -1){
       		return false;
       		
       	}
       }
      
};

}; // end of sap/suite/ui/smartbusiness/lib/DrilldownModel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.lib.ModelerReadServices') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.lib.ModelerReadServices");


sap.suite.ui.smartbusiness.lib.ModelerReadServices = (function() {
	return {
		_encodeURL: function(uRi) {
			return jQuery.sap.encodeURL(uRi);
		},
		
		getDesigntimeServiceUrl : function() {
			return "/sap/hba/r/sb/core/odata/modeler/SMART_BUSINESS.xsodata";
		},
		
		getAllKPIs: function(obj) {
			var that = this;
			var url = this.getDesigntimeServiceUrl();
			var model = obj.model || new sap.ui.model.odata.ODataModel(url,true);
			var expand = "";
			var filter = "";
			var data = null;
			var success = obj.success || function(d,s,x) {
				data = (d && d.results) ? d.results : d;
			}
			var error = obj.error || function(d,s,x) {
				jQuery.sap.log.error(d);
				jQuery.sap.log.error(s);
				jQuery.sap.log.error(x);
			}
			var entity = obj.entity || "/INDICATORS_MODELER";
			entity = (entity.indexOf("/") == 0) ? entity : ("/" + entity);
			if(obj.tags) {
				expand += (expand) ? "," : ""; 
				expand += "TAGS";
			}
			if(obj.properties) {
				expand += (expand) ? "," : "";
				expand += "PROPERTIES";
			}
			if(obj.texts) {
				expand += (expand) ? "," : "";
				expand += "TEXTS";
			}
			if(obj.evaluations) {
				expand += (expand) ? "," : "";
				expand += "EVALUATIONS";
			}
			if(obj.associations) {
				expand += (expand) ? "," : "";
				expand += "ASSOCIATION_SOURCE";
				expand += "ASSOCIATION_TARGET";
			}
			if(obj.filter) {
				filter = obj.filter;
			}
			obj.async = (obj.async) ? true : false;
			model.read(entity, null, (filter || null), obj.async, success, error);
			return data;
		},
		
		getKPIMasterDetailsById: function(obj) {
			var that = this;
			if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
				throw new Error("Failed to get Indicator Id or Status for data fetch");
				return null;
			}
			var contextPath = null;
			var context = obj.context || null;
			var url = this.getDesigntimeServiceUrl();
			var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
			var dataBean = {};
			if(obj.context) {
				contextPath = obj.context.sPath;
				if(obj.context.getObject()) {
					obj.ID = obj.context.getObject().ID;
					obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
				}
				else {
					obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
					obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
				}
			}
			else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
				obj.ENTITY = obj.ENTITY || "/INDICATORS_MODELER";
				obj.ENTITY = (obj.ENTITY.indexOf("/") != 0) ? ("/" + obj.ENTITY) : obj.ENTITY;
				contextPath = obj.ENTITY + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
				context = new sap.ui.model.Context(model, contextPath);
			}
			
			var s = obj.success;
			var e = obj.error;
			
			var batchRequests = [];
			var referenceObject = [];
			
			if(!(obj.noIndicator)) {
				if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
					dataBean.INDICATOR = context.getObject();
				}
				else {
					batchRequests.push(model.createBatchOperation(contextPath,"GET"));
					referenceObject.push("INDICATOR");
				}
			}
			if(obj.tags) {
				batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
				referenceObject.push("TAGS");
			}
			if(obj.properties) {
				batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
				referenceObject.push("PROPERTIES");
			}
			if(obj.texts) {
				batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
				referenceObject.push("TEXTS");
			}
			if(obj.evaluations) {
				batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATIONS","GET"));
				referenceObject.push("EVALUATIONS");
			}
			if(obj.associations && obj.associationProperties) {
				batchRequests.push(model.createBatchOperation("/ASSOCIATIONS_MODELER?$filter=" + that._encodeURL("SOURCE_INDICATOR eq '" + obj.ID + "' or TARGET_INDICATOR eq '" + obj.ID + "'") + "&$expand=PROPERTIES","GET"));
				referenceObject.push("ASSOCIATIONS");
			}
			else if(obj.associations) {
				batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_SOURCE","GET"));
				batchRequests.push(model.createBatchOperation(contextPath+"/ASSOCIATION_TARGET","GET"));
				referenceObject.push("ASSOCIATION_SOURCE");
				referenceObject.push("ASSOCIATION_TARGET");
			}
			obj.async = (obj.async) ? true : false;
			model.addBatchReadOperations(batchRequests);
			model.submitBatch(function(data, response) {
				var A = data.__batchResponses;
				for(var i=0,l=A.length; i<l; i++) {
					jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
					dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
				}
				if(s) {
					s(dataBean);
				}
			}, function(errorObject){
				if(e) {
					e(errorObject);
				}
				throw new Error("Failed to fetch Indicator details");
			},obj.async);
			if(obj.associations && obj.associationProperties) {
				for(var i=0,l=dataBean.ASSOCIATIONS.length; i<l; i++) {
					if(dataBean.ASSOCIATIONS[i].PROPERTIES) {
						if(dataBean.ASSOCIATIONS[i].PROPERTIES.results && dataBean.ASSOCIATIONS[i].PROPERTIES.results.length) {
							dataBean.ASSOCIATIONS[i].PROPERTIES = dataBean.ASSOCIATIONS[i].PROPERTIES.results;
						}
						else {
							dataBean.ASSOCIATIONS[i].PROPERTIES = [];
						}
					}
					else {
						dataBean.ASSOCIATIONS[i].PROPERTIES = [];
					}
				}
			}
			else {
				dataBean.ASSOCIATIONS = [].concat(dataBean.ASSOCIATION_SOURCE).concat(dataBean.ASSOCIATION_TARGET);	
			}
			return dataBean;
		},
		
		getEvaluationMasterDetailsById: function(obj) {
			var that = this;
			if(!(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) && !(obj.context)) {
				throw new Error("Failed to get Evaluation Id or Status for data fetch");
				return null;
			}
			var contextPath = null;
			var context = obj.context || null;
			var url = this.getDesigntimeServiceUrl();
			var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
			var dataBean = {};
			if(obj.context) {
				contextPath = obj.context.sPath;
				if(obj.context.getObject()) {
					obj.ID = obj.context.getObject().ID;
					obj.IS_ACTIVE = obj.context.getObject().IS_ACTIVE;
				}
				else {
					obj.ID = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
					obj.IS_ACTIVE = ((contextPath.indexOf("IS_ACTIVE=0") != -1) || (contextPath.indexOf("IS_ACTIVE=1") != -1)) ? ((contextPath.indexOf("IS_ACTIVE=0") != -1) ? 0 : 1) : null;
				}
			}
			else if(obj.ID && obj.IS_ACTIVE !== null && obj.IS_ACTIVE !== undefined) {
				obj.ENTITY = obj.ENTITY || "/EVALUATIONS_MODELER";
				obj.ENTITY = (obj.ENTITY.indexOf("/") != 0) ? ("/" + obj.ENTITY) : obj.ENTITY;
				contextPath = obj.ENTITY + "(ID='" + obj.ID + "',IS_ACTIVE=" + obj.IS_ACTIVE + ")";
				context = new sap.ui.model.Context(model, contextPath);
			}
			
			var s = obj.success;
			var e = obj.error;
			
			var batchRequests = [];
			var referenceObject = [];
			if(!(obj.noEvaluation)) {
				if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
					dataBean.EVALUATION = context.getObject();
				}
				else {
					batchRequests.push(model.createBatchOperation(contextPath,"GET"));
					referenceObject.push("EVALUATION");
				}
			}
			if(obj.tags) {
				batchRequests.push(model.createBatchOperation(contextPath+"/TAGS","GET"));
				referenceObject.push("TAGS");
			}
			if(obj.properties) {
				batchRequests.push(model.createBatchOperation(contextPath+"/PROPERTIES","GET"));
				referenceObject.push("PROPERTIES");
			}
			if(obj.texts) {
				batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
				referenceObject.push("TEXTS");
			}
			if(obj.filters) {
				batchRequests.push(model.createBatchOperation(contextPath+"/FILTERS","GET"));
				referenceObject.push("FILTERS");
			}
			if(obj.values) {
				batchRequests.push(model.createBatchOperation(contextPath+"/VALUES","GET"));
				referenceObject.push("VALUES");
			}
			if(obj.chips) {
				batchRequests.push(model.createBatchOperation(contextPath+"/CHIPS","GET"));
				referenceObject.push("CHIPS");
			}
			if(obj.dda_configurations) {
				batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
				referenceObject.push("DDA_CONFIGURATIONS");
			}
			if(obj.dda_header_tiles) {
				batchRequests.push(model.createBatchOperation(contextPath+"/DDA_HEADER_TILES","GET"));
				referenceObject.push("DDA_HEADER_TILES");
			}
			obj.async = (obj.async) ? true : false;
			model.addBatchReadOperations(batchRequests);
			model.submitBatch(function(data, response) {
				var A = data.__batchResponses;
				for(var i=0,l=A.length; i<l; i++) {
					jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
					dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
				}
				if(s) {
					s(dataBean);
				}
			}, function(errorObject){
				if(e) {
					e(errorObject);
				}
				throw new Error("Failed to fetch Evaluation details");
			},obj.async);
			return dataBean;
		},
		
		getChipMasterDetailsById: function(obj) {
			var that = this;
			if(!(obj.id && obj.isActive !== null && obj.isActive !== undefined) && !(obj.context)) {
				throw new Error("Failed to get Chip Id or Status for data fetch");
				return null;
			}
			var contextPath = null;
			var context = obj.context || null;
			var url = this.getDesigntimeServiceUrl();
			var model = obj.model || new sap.ui.model.odata.ODataModel(url, true);
			var dataBean = {};
			if(obj.context) {
				contextPath = obj.context.sPath;
				if(obj.context.getObject()) {
					obj.id = obj.context.getObject().id;
					obj.isActive = obj.context.getObject().isActive;
				}
				else {
					obj.id = contextPath.split("(")[1].split(",")[0].split("=")[1].replace(/'/g,'');
					obj.isActive = ((contextPath.indexOf("isActive=0") != -1) || (contextPath.indexOf("isActive=1") != -1)) ? ((contextPath.indexOf("isActive=0") != -1) ? 0 : 1) : null;
				}
			}
			else if(obj.id && obj.isActive !== null && obj.isActive !== undefined) {
				obj.ENTITY = obj.ENTITY || "/CHIPS_MODELER";
				obj.ENTITY = (obj.ENTITY.indexOf("/") != 0) ? ("/" + obj.ENTITY) : obj.ENTITY;
				contextPath = obj.ENTITY + "(id='" + obj.ID + "',isActive=" + obj.isActive + ")";
				context = new sap.ui.model.Context(model, contextPath);
			}
			
			var s = obj.success;
			var e = obj.error;
			
			var batchRequests = [];
			var referenceObject = [];
			if(!(obj.noChip)) {
				if(context && context.getObject() && Object.keys(context.getObject()) && Object.keys(context)) {
					dataBean.CHIP = context.getObject();
				}
				else {
					batchRequests.push(model.createBatchOperation(contextPath,"GET"));
					referenceObject.push("CHIP");
				}
			}
			if(obj.evaluation) {
				batchRequests.push(model.createBatchOperation(contextPath+"/EVALUATION_INFO","GET"));
				referenceObject.push("EVALUATION_INFO");
			}
			if(obj.texts) {
				batchRequests.push(model.createBatchOperation(contextPath+"/TEXTS","GET"));
				referenceObject.push("TEXTS");
			}
			if(obj.dda_configurations) {
				batchRequests.push(model.createBatchOperation(contextPath+"/DDA_CONFIGURATIONS","GET"));
				referenceObject.push("DDA_CONFIGURATIONS");
			}
			obj.async = (obj.async) ? true : false;
			model.addBatchReadOperations(batchRequests);
			model.submitBatch(function(data, response) {
				var A = data.__batchResponses;
				for(var i=0,l=A.length; i<l; i++) {
					jQuery.sap.log.info(referenceObject[i] + " : " + JSON.stringify(A[i]));
					dataBean[referenceObject[i]] = (A[i].data.results) ? A[i].data.results : A[i].data;
				}
				if(s) {
					s(dataBean);
				}
				
			}, function(errorObject){
				if(e) {
					e(errorObject);
				}
				throw new Error("Failed to fetch Chip details");
			},obj.async);
			return dataBean;
		}
	};
})();
}; // end of sap/suite/ui/smartbusiness/lib/ModelerReadServices.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.AreaChart') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.AreaChart");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.AreaChart", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "TT"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    var buildChartItem = function (sName) {
        return new sap.suite.ui.commons.MicroAreaChartItem({
            color: "Neutral",
            points: {
                path: "/" + sName + "/data",
                template: new sap.suite.ui.commons.MicroAreaChartPoint({
                    x: "{day}",
                    y: "{balance}"

                })
            }
        });
    };
    var buildMACLabel = function (sName) {
        return new sap.suite.ui.commons.MicroAreaChartLabel({
            label: "{/" + sName + "/label}",
            color: "{/" + sName + "/color}"
        });
    };
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new  sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size: this.getSize(),
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel"),
                
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    if(this.getContentOnly()) {
        var buildChartItem = function (sName) {
            return new sap.suite.ui.commons.MicroAreaChartItem({
                color: "Neutral",
                points: {
                    path: "/" + sName + "/data",
                    template: new sap.suite.ui.commons.MicroAreaChartPoint({
                        x: "{day}",
                        y: "{balance}"

                    })
                }
            });
        };
        var buildMACLabel = function (sName) {
            return new sap.suite.ui.commons.MicroAreaChartLabel({
                label: "{/" + sName + "/label}",
                color: "{/" + sName + "/color}"
            });
        };
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "",
            size: this.getSize(),
            footer : "",
            content: new  sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size: this.getSize(),
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel"),
                
            })
        }));
    }
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.getEvalValueMeasureName = function(oConfig, type, retType){
    var evalValue = oConfig.VALUES.results;
    for(var i = 0; i < evalValue.length; i++){
        if(evalValue[i].TYPE == type)
            if(retType === "FIXED")
                return evalValue[i].FIXED;
            else
                return evalValue[i].COLUMN_NAME;
    }
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForAreaChartTile(function(modelData) {
      var deviationTileObj={};
        /*deviationTileObj.data=kpiValue.kpiData;
        if(kpiValue.unitPrefix){
            deviationTileObj.unit = kpiValue.unitPrefix;
        }*/
        if(true || that.isAssociatedKpi()) {
            deviationTileObj.subheader= this.oConfig.TITLE;
            deviationTileObj.header= this.oConfig.INDICATOR_TITLE;
        }
        deviationTileObj=jQuery.extend({},deviationTileObj,modelData);
        that.jsonModel.setData(deviationTileObj);
        that.setDoneState();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype._fetchDataForAreaChartTile = function(fnSuccess,fnError){
    var that = this;
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    this.oConfig=this.EVALUATION_DATA;
    oParam.serviceUri = this._addSystemAliasToUri(this.oConfig.ODATA_URL, this.getSapSystem());
    oParam.entitySet = this.oConfig.ODATA_ENTITYSET;
    oParam.measure = this.oConfig.COLUMN_NAME;
    oParam.dimension = this.getDimension();
    if(!this.getDimension()) {
        this.logError("Dimension is Missing : Can't Render Area Chart");
        return;
    }
    oParam.filter = this.getAllFilters();
    if(this.oConfig.VALUES_SOURCE == "MEASURE"){
        var fullyFormedMeasure = that.oConfig.COLUMN_NAME;
        switch(that.oConfig.GOAL_TYPE){
        case "MI" :
            that.sWarningHigh =  that.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
            that.sCriticalHigh =  that.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningHigh +"," +that.sCriticalHigh+","+ that.sTarget;
            break;
        case "MA" :
            that.sWarningLow =  that.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
            that.sCriticalLow =  that.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget;
            break;
        case "RA" :
            that.sWarningHigh =  that.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
            that.sCriticalHigh =  that.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
            that.sTarget =  that.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
            that.sTrend =  that.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
            that.sWarningLow =  that.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
            that.sCriticalLow =  that.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
            //fullyFormedMeasure += ","+that.sWarningLow +"," +that.sCriticalLow+","+ that.sTarget + "," + that.sWarningHigh + "," + that.sCriticalHigh;
            break;
        }
        var _allMeasures = [that.sWarningHigh, that.sCriticalHigh, that.sTarget, that.sTrend, that.sWarningLow, that.sCriticalLow];
        _allMeasures.forEach(function(eachMeasureName) {
            if(eachMeasureName) {
                fullyFormedMeasure +=","+eachMeasureName;
            }
        }, this);
        oParam.measure = fullyFormedMeasure;
    }
    var finalQuery = sap.suite.ui.smartbusiness.lib.Util.odata.getUri(oParam);
    var UOMPROPERTY = this.UOM_PROPERTY_MAPPING[this.oConfig.COLUMN_NAME];
    var UOMValue = "";
    this.areaChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(data && data.results && data.results.length) {
            if(UOMPROPERTY) {
                UOMValue = data.results[0][UOMPROPERTY];
            }
            oParam.dimension = that.TEXT_PROPERTY_MAPPING[that.getDimension()];
            that.UOM = UOMValue;
            var modelData=  that. _processDataForAreaChart(data,that.oConfig.VALUES_SOURCE,oParam.dimension,that.oConfig.COLUMN_NAME);
            modelData.unit = UOMValue ;
            fnSuccess.call(that,modelData);
        } else {
            that.setNoData();
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype._processDataForAreaChart= function(data,type,dimensionName,sMeasure){
    var that = this;
    var evaluationValues = that.oConfig.VALUES.results;
    var dimensionArray = [];
    var measureArray = [];
    var wHArray = [];
    var cHArray = [];
    var cLArray = [];
    var wLArray = [];
    var dataLength = data.results.length;
    var scaleFactor = that.oConfig.SCALING;
    var firstXlabel = data.results[0][dimensionName];
    var minThresholdMeasure, maxThresholdMeasure, innerMinThresholdMeasure, innerMaxThresholdMeasure, targetMeasure;
    var lastXlabel = data.results[data.results.length - 1][dimensionName];
    var firstYLabelValue = Number(data.results[0][sMeasure]);
    var lastYLabelValue = Number(data.results[data.results.length - 1][sMeasure]);
    var goaltype = that.oConfig.GOAL_TYPE;

    for (i in data.results) {
        data.results[i][dimensionName] = Number(i);
        data.results[i][sMeasure] = Number(data.results[i][sMeasure]);
        that.sWarningHigh ? data.results[i][that.sWarningHigh] = Number(data.results[i][that.sWarningHigh]) :"";
        that.sCriticalHigh ? data.results[i][that.sCriticalHigh] = Number(data.results[i][that.sCriticalHigh]) :"";
        that.sCriticalLow ? data.results[i][that.sCriticalLow] = Number(data.results[i][that.sCriticalLow]) :"";
        that.sWarningLow ? data.results[i][that.sWarningLow] = Number(data.results[i][that.sWarningLow]) :"";
        that.sTarget ? data.results[i][that.sTarget] = Number(data.results[i][that.sTarget]) :"";
        that.sWarningHigh ? wHArray.push(data.results[i][that.sWarningHigh]) :"";
        that.sCriticalHigh ? cHArray.push(data.results[i][that.sCriticalHigh]) :"";
        that.sCriticalLow ? cLArray.push(data.results[i][that.sCriticalLow]):"";
        that.sWarningLow ?  wLArray.push(data.results[i][that.sWarningLow]) :"";
        dimensionArray.push(data.results[i][dimensionName]);
        measureArray.push(data.results[i][sMeasure]);
    }
    
    this.FINAL_MEASURE_VALUE = data.results[i][sMeasure];
    this.FINAL_DIMENSION_NAME = this.TEXT_PROPERTY_MAPPING[dimensionName] || dimensionName;
    this.FINAL_DIMENSION_VALUE = lastXlabel;
    
    if(type == "MEASURE") {
	    this.TARGET_VALUE = data.results[i][that.sTarget];
		this.CRITICAL_LOW_VALUE = data.results[i][that.sCriticalLow];
		this.WARNING_LOW_VALUE = data.results[i][that.sWarningLow];
		this.CRITICAL_HIGH_VALUE = data.results[i][that.sCriticalHigh];
		this.WARNING_HIGH_VALUE = data.results[i][that.sWarningHigh];
    } else {
    	var parseEvalValues = function(e){var x={};for(var k in e){x[e[k].TYPE]=e[k].FIXED};return x;};
    	var thresholds = parseEvalValues(evaluationValues);
    	this.TARGET_VALUE = thresholds.TA;
		this.CRITICAL_LOW_VALUE = thresholds.CL;
		this.WARNING_LOW_VALUE = thresholds.WL;
		this.CRITICAL_HIGH_VALUE = thresholds.CH;
		this.WARNING_HIGH_VALUE = thresholds.WH;
    }
	
	this.initTTPopup();
	
    try {
        firstXlabel = that.formatOdataObjectToString(firstXlabel);
        lastXlabel = that.formatOdataObjectToString(lastXlabel);   
    } catch (e) {
        that.logError(e);
    }
    var minMeasure = Math.min.apply(Math, measureArray); //to obtain the starting value
    var oScaledValueFirst = "";
    var calculatedValueForScaling = firstYLabelValue;
    /*if(this.oConfig.SCALING == -2)
        calculatedValueForScaling *= 100;*/
    var isACurrencyMeasure = this.isACurrencyMeasure(this.oConfig.COLUMN_NAME);
    var formattedFirstYLabel = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, this.UOM);
    var firstYLabel = formattedFirstYLabel.toString();
    /*if(this.oConfig.SCALING == -2)
        firstYLabel += " %";*/
    var maxMeasure = Math.max.apply(Math, measureArray); //to obtain the last value
    calculatedValueForScaling = lastYLabelValue;
    /*if(this.oConfig.SCALING == -2)
        calculatedValueForScaling *= 100;*/
    sap.ui.getCore().byId("m1e1 title")
    var formattedLastYLabel = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, this.UOM);
    var lastYLabel = formattedLastYLabel.toString();
    /*if(this.oConfig.SCALING == -2)
        lastYLabel += " %";*/
    try {
        var minDimension = that.formatOdataObjectToString(Math.min.apply(Math, dimensionArray)); //to obtain the starting value 
        var maxDimension = that.formatOdataObjectToString(Math.max.apply(Math, dimensionArray)); //to obtain the last value
    } catch (e) {
        that.logError(e);
    }
    if(type == "MEASURE"){
        (wHArray.length !=0) ? (that.firstwH = wHArray[minDimension]) &&  (that.lastwH = wHArray[maxDimension]) :""; 
        (cHArray.length !=0) ? (that.firstcH = cHArray[minDimension]) && (that.lastcH = cHArray[maxDimension]) : ""; 
        (cLArray.length !=0) ? (that.firstcL = cLArray[minDimension]) && (that.lastcL = cLArray[maxDimension]) :"";
        (wLArray.length !=0) ? ( that.firstwL = wLArray[minDimension]) && (that.lastwL = wLArray[maxDimension]):"";
    }

    var updatedModel = {
        width: "100%",
        height: "100%",
        unit: that.unit || "",
        chart: {
            color: "Neutral",
            data: data.results
        },
        minXValue: minDimension,
        maxXValue: maxDimension,
        minYValue: minMeasure,
        maxYValue: maxMeasure,
        firstXLabel: {
            label: firstXlabel + "",
            color: "Neutral"
        },
        lastXLabel: {
            label: lastXlabel + "",
            color: "Neutral"
        },
        firstYLabel: {
            label: firstYLabel + "",
            color: "Neutral"
        },
        lastYLabel: {
            label: lastYLabel + "",
            color: "Neutral"
        },
        minLabel: {},
        maxLabel: {}
    };

    switch (goaltype) {
    case "MA":
        for (i in evaluationValues) {
            if (evaluationValues[i].TYPE == "CL") {
                updatedModel.minThreshold = {
                        color: "Error",
                    };
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.cl = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
               
            } else if (evaluationValues[i].TYPE == "WL") {
                updatedModel.maxThreshold = {
                        color: "Good"
                    };
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ?  that.sWarningLow : sMeasure;
                that.wl = Number(evaluationValues[i].FIXED);
                   
                }
                 else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }
        }
            updatedModel.innerMinThreshold = {
                data: [

                ]
            };
            updatedModel.innerMaxThreshold = {
                data: [

                ]
            };
            if(type  == "FIXED"){
                updatedModel.firstYLabel.color =  firstYLabelValue < that.cl ? "Error" : ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl)) ? "Critical" : (firstYLabelValue > that.wl) ? "Good" : "Neutral" ;
                updatedModel.lastYLabel.color = lastYLabelValue < that.cl ? "Error" : ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl)) ? "Critical" : (lastYLabelValue > that.wl) ? "Good" : "Neutral" ;
            }
            else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL){
                updatedModel.firstYLabel.color = firstYLabelValue < that.firstcL ? "Error" : ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL)) ? "Critical" : (firstYLabelValue > that.firstwL) ? "Good": "Neutral" ;
                updatedModel.lastYLabel.color = lastYLabelValue < that.lastcL ? "Error" : ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL)) ? "Critical" : (lastYLabelValue > that.lastwL) ? "Good" : "Neutral" ;
            }

        break;
    case "MI":
        for (i in evaluationValues) {

            if (evaluationValues[i].TYPE == "CH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.ch =  Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold = {
                    color: "Error",
                };
                updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wh = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold = {
                    color: "Good",
                };
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
                
            } else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }


        }
        if(type  == "FIXED"){
            updatedModel.firstYLabel.color = firstYLabelValue > that.ch ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) ? "Critical" : (firstYLabelValue < that.wh) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = lastYLabelValue > that.ch ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) ? "Critical" : (lastYLabelValue < that.wh) ? "Good" : "Neutral" ;
        }
        else if(type == "MEASURE" && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
            updatedModel.firstYLabel.color = firstYLabelValue > that.firstcH ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) ? "Critical" : (firstYLabelValue < that.firstwH) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = lastYLabelValue > that.lastcH ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) ? "Critical" : (lastYLabelValue < that.lastwH) ? "Good" : "Neutral" ;
            
        }
        updatedModel.innerMaxThreshold = {
            data: [

            ]
        };
        updatedModel.innerMinThreshold = {
            data: [

            ]
        };
        break;
    case "RA":
        for (i in evaluationValues) {

            if (evaluationValues[i].TYPE == "CH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.ch = Number(evaluationValues[i].FIXED);
                updatedModel.maxThreshold = {
                    color: "Error",
                };
                updatedModel.maxThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                maxThresholdMeasure= (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WH") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wh = Number(evaluationValues[i].FIXED);
                updatedModel.innerMaxThreshold = {
                    color: "Good",
                };
                updatedModel.innerMaxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                innerMaxThresholdMeasure= (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
            } else if (evaluationValues[i].TYPE == "WL") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.wl = Number(evaluationValues[i].FIXED);
                updatedModel.innerMinThreshold = {
                    color: "Good",
                };
                updatedModel.innerMinThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                innerMinThresholdMeasure= (type  == "MEASURE") ? that.sWarningLow : sMeasure;
            } else if (evaluationValues[i].TYPE == "CL") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                that.cl = Number(evaluationValues[i].FIXED);
                updatedModel.minThreshold = {
                    color: "Error",
                };
                updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                minThresholdMeasure= (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
            } else if (evaluationValues[i].TYPE == "TA") {
                var newObj = new Object();
                newObj[dimensionName] = "";
                newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                updatedModel.target = {
                    color: "Neutral",
                };
                updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                targetMeasure= (type  == "MEASURE") ? that.sTarget : sMeasure;
            }
        }
        if(type  == "FIXED"){
            updatedModel.firstYLabel.color = (firstYLabelValue > that.ch || firstYLabelValue < that.cl ) ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) || ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl))  ? "Critical" : ((firstYLabelValue >= that.wl) && (firstYLabelValue <= that.wh)) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = (lastYLabelValue > that.ch || lastYLabelValue < that.cl ) ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) || ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl))  ? "Critical" : ((lastYLabelValue >= that.wl) && (lastYLabelValue <= that.wh)) ? "Good"  : "Neutral" ;
        }
        else if(type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
            updatedModel.firstYLabel.color = (firstYLabelValue > that.firstcH || firstYLabelValue < that.firstcL ) ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) || ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL))  ? "Critical" : ((firstYLabelValue >= that.firstwL) && (firstYLabelValue <= that.firstwH)) ? "Good" : "Neutral" ;
            updatedModel.lastYLabel.color = (lastYLabelValue > that.lastcH || lastYLabelValue < that.lastcL ) ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) || ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL))  ? "Critical" : ((lastYLabelValue >= that.lastwL) && (lastYLabelValue <= that.lastwH)) ? "Good" : "Neutral" ;
        }
        break;

    }

    var buildChartItem = function (sName, a, b, type) {
            return new sap.suite.ui.commons.MicroAreaChartItem({
                color: "{/" + sName + "/color}",
                points: {
                    path: "/" + sName + "/data",
                    template: new sap.suite.ui.commons.MicroAreaChartPoint({
                        x: "{" + a + "}",
                        y: "{" + b + "}"

                    })
                }
            });
    };
    var tileControlRef = null;
    if(this.getContentOnly()) {
    	tileControlRef = that.getTileControl();
    } else {
    	tileControlRef = that.getTileControl().getTileContent()[0].getContent();
    }
    tileControlRef.setTarget(buildChartItem("target", dimensionName, targetMeasure));
    tileControlRef.setInnerMinThreshold(buildChartItem("innerMinThreshold", dimensionName, innerMinThresholdMeasure));
    tileControlRef.setInnerMaxThreshold(buildChartItem("innerMaxThreshold", dimensionName, innerMaxThresholdMeasure));
    tileControlRef.setMinThreshold(buildChartItem("minThreshold", dimensionName, minThresholdMeasure));
    tileControlRef.setMaxThreshold(buildChartItem("maxThreshold", dimensionName, maxThresholdMeasure));
    tileControlRef.setChart(buildChartItem("chart", dimensionName, sMeasure));
    return updatedModel;



  
};
sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForAreaChartTile());
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.showTTPopup = function() {
	this._TTpopOver.openBy(this);
};

sap.suite.ui.smartbusiness.tiles.AreaChart.prototype.initTTPopup = function() {
	var self = this;
	var model = new sap.ui.model.json.JSONModel();
    var modelData = {"THRESHOLDS":[]};
    var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    jQuery.sap.require("sap.ui.core.format.NumberFormat");
    this.VALUE_FORMATTER = sap.ui.core.format.NumberFormat.getFloatInstance({
    			style: "standard"
    		},locale);
    var thresholdList = new sap.m.List({
    });
    thresholdList.bindItems("/THRESHOLDS", new sap.m.ObjectListItem({
        title : "{name}",
        number : "{value}",
        numberState : sap.ui.core.ValueState.None 
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = {} ; 
	thresholdVals.targetVal = this.TARGET_VALUE ;
	thresholdVals.critLowVal = this.CRITICAL_LOW_VALUE ;
	thresholdVals.warnLowVal = this.WARNING_LOW_VALUE ;
	thresholdVals.critHighVal = this.CRITICAL_HIGH_VALUE ;
	thresholdVals.warnHighVal = this.WARNING_HIGH_VALUE ;
	
    if(this.evaluationApi.getScaling() == -2) {
    	this.FINAL_MEASURE_VALUE = (this.FINAL_MEASURE_VALUE * 100) + " %" ;
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				thresholdVals[each] = (thresholdVals[each]*100) + " %" ;
			}    				
		}
    }
    modelData.THRESHOLDS.push({
    	name: this.getModel("i18n").getProperty("ACTUAL"),
    	value: this.VALUE_FORMATTER.format(this.FINAL_MEASURE_VALUE)
    })

    if(this.evaluationApi.isMaximizingKpi()) {
        if(thresholdVals.targetVal != undefined)
	    	modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
        if(thresholdVals.warnLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnLowVal)
	        });
        if(thresholdVals.critLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critLowVal)
	        });
    } else if(this.evaluationApi.isMinimizingKpi()) {
    	if(thresholdVals.critHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critHighVal)
	        });
    	if(thresholdVals.warnHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnHighVal)
	        });
    	if(thresholdVals.targetVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
    } else if(this.evaluationApi.isTargetKpi()) {
    	if(thresholdVals.critHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL_HIGH_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critHighVal)
	        });
    	if(thresholdVals.warnHighVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING_HIGH_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnHighVal)
	        });
    	if(thresholdVals.targetVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("TARGET_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.targetVal)
	        });
    	if(thresholdVals.warnLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("WARNING_LOW_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.warnLowVal)
	        });
    	if(thresholdVals.critLowVal != undefined)
	        modelData.THRESHOLDS.push({
	            name : this.getModel("i18n").getProperty("CRITICAL_LOW_LABEL"),
	            value : this.VALUE_FORMATTER.format(thresholdVals.critLowVal)
	        });
    }
    
    model.setData(modelData);
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text: this.FINAL_DIMENSION_NAME && this.FINAL_DIMENSION_VALUE ? 
            		this.FINAL_DIMENSION_NAME+" ("+this.FINAL_DIMENSION_VALUE+")" : 
            			this.getModel("i18n").getProperty("THRESHOLD_LABEL")
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(function(){if(this._TTpopOver.isOpen()){this._TTpopOver.close();}},
                	this)
            })]
    });
    this._TTpopOver = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._TTpopOver, true);
};



}; // end of sap/suite/ui/smartbusiness/tiles/AreaChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Bullet') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Bullet");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Bullet", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : true
            },
            tileType : {
                type : "string",
                defaultValue : "AT"
            }
        }
    },
    renderer : {} 
});

sap.suite.ui.smartbusiness.tiles.Bullet.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    //Write Init Code Here

    //Tiles will be always in Full/Complete Mode
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.BulletChart({  
                size: this.getSize(),
                state: "{/state}",
                scale : "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                actualValueLabel: "{/actualValueLabel}",
                targetValue: "{/targetValue}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: new sap.suite.ui.commons.BulletChartData({
                        value: "{value}",
                        color: "{color}"
                    }),
                    path: "/thresholds"
                },
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}",

            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));    
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);
    //Write onBeforeRendering Code Here

    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.BulletChart({  
                size: this.getSize(),
                state: "{/state}",
                scale : "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                actualValueLabel: "{/actualValueLabel}",
                targetValue: "{/targetValue}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: new sap.suite.ui.commons.BulletChartData({
                        value: "{value}",
                        color: "{color}"
                    }),
                    path: "/thresholds"
                },
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}",

            })
        }));
    }

    //Later Just Update the Model Data

};

sap.suite.ui.smartbusiness.tiles.Bullet.prototype.doProcess = function() {
    var deviationTileObj={};
    var thresholdsArrayObjAndColor = this.getThresholdsObjAndColor(this.KPI_VALUE, this.EVALUATION_DATA.GOAL_TYPE,this.WARNING_LOW_VALUE,this.WARNING_HIGH_VALUE,this.CRITICAL_LOW_VALUE,this.CRITICAL_HIGH_VALUE);  
    var actualKpiObj={value:Number(this.KPI_VALUE),color:thresholdsArrayObjAndColor.returnColor};
    var calculatedValueForScaling = Number(this.KPI_VALUE);
    /*if(this.EVALUATION_DATA.SCALING == -2)
        calculatedValueForScaling *= 100;*/
    var isACurrencyMeasure = this.isACurrencyMeasure(this.EVALUATION_DATA.COLUMN_NAME);
    var formattedKpiValue  = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, this.UOM);
    calculatedValueForScaling = Number(this.TARGET_VALUE);
    /*if(this.EVALUATION_DATA.SCALING == -2)
        calculatedValueForScaling *= 100;*/
    var formattedTargetValue = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, this.UOM);
    if(true || this.isAssociatedKpi()) {
        deviationTileObj.subheader= this.EVALUATION_DATA.TITLE;
        deviationTileObj.header= this.EVALUATION_DATA.INDICATOR_TITLE;
    }
    deviationTileObj.actual=actualKpiObj;
    deviationTileObj.thresholds = [];
    deviationTileObj.thresholds = thresholdsArrayObjAndColor.arrObj;
    deviationTileObj.targetValue=Number(this.TARGET_VALUE);
    deviationTileObj.unit=this.UOM;
    //deviationTileObj.scale=this._oScalingFactor[this.EVALUATION_DATA.SCALING]; 
    deviationTileObj.actualValueLabel = formattedKpiValue.toString();
    deviationTileObj.targetValueLabel = formattedTargetValue.toString();
    /*if(this.EVALUATION_DATA.SCALING == -2){
        deviationTileObj.actualValueLabel += " %";
        deviationTileObj.targetValueLabel += " %";
    }*/

    this.jsonModel.setData(deviationTileObj);
    this.setDoneState();
};

/**
 * This method is called if tile is runing in DUMMY Mode
 */
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForBulletTile());
    this.setDoneState();
};
sap.suite.ui.smartbusiness.tiles.Bullet.prototype.getThresholdsObjAndColor = function(kpiValue,goalType,wL,wH,cL,cH) {
    var oThresholdObjAndColor = {};
    oThresholdObjAndColor.arrObj = [];
    oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;

    if(goalType === "MI") {
        if(this.hasSomeValue(cH,wH)) {
            cH = window.parseFloat(cH);
            wH = window.parseFloat(wH);
            oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});

            if(kpiValue < wH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            } 
            else if(kpiValue <= cH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } 
            else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Minimizing type KPI is missing");
        }

    } 
    else if(goalType === "MA") {
        if(this.hasSomeValue(cL, wL)) {
            cL = window.parseFloat(cL);
            wL = window.parseFloat(wL);
            oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});

            if(kpiValue < cL) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } 
            else if(kpiValue <= wL) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            }
            else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Maximizing type KPI is missing");
        }
    } 
    else {
        if(this.hasSomeValue(wL, wH, cL, cH)) {
            cH = window.parseFloat(cH);
            wH = window.parseFloat(wH);
            wL = window.parseFloat(wL);
            cL = window.parseFloat(cL);
            oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
            oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
            oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
            oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});

            if(kpiValue < cL || kpiValue > cH) {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
            } 
            else if((kpiValue >= cL && kpiValue <= wL) || (kpiValue >= wH && kpiValue <= cH)){
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
            } else {
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good ;
            }
        }
        else{
            jQuery.sap.log.warning("One of the threshold values for Range type KPI is missing");
        }
    }
    return oThresholdObjAndColor; 
};


}; // end of sap/suite/ui/smartbusiness/tiles/Bullet.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.tiles.Comparison') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.tiles.Comparison");

sap.suite.ui.smartbusiness.tiles.Generic.extend("sap.suite.ui.smartbusiness.tiles.Comparison", {
    metadata : {
        properties : {
            kpiValueRequired : {
                type : "boolean",
                defaultValue : false
            },
            tileType : {
                type : "string",
                defaultValue : "CT"
            }
        }
    },
    renderer : {} //No need to write Anything
});

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.init = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.init.apply(this);
    this.setAggregation("_tile", new sap.suite.ui.commons.GenericTile({
        header  :"{/header}",
        subheader  : "{/subheader}",
        size : this.getSize(),
        frameType : this.getFrameType(),
        tileContent : new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }),
        press: jQuery.proxy(this.tilePressed, this)
    }));
    this.jsonModel = new sap.ui.model.json.JSONModel();
    this.setModel(this.jsonModel);
};
sap.suite.ui.smartbusiness.tiles.Comparison.prototype.onBeforeRendering = function() {
    sap.suite.ui.smartbusiness.tiles.Generic.prototype.onBeforeRendering.apply(this);

    if(this.getContentOnly()) {
        this.setAggregation("_tile", new sap.suite.ui.commons.TileContent({
            unit : "{/unit}",
            size: this.getSize(),
            footer : "{/footerNum}",
            content: new sap.suite.ui.commons.ComparisonChart({
                scale : "{/scale}",
                size: this.getSize(),
                state: "{/state}",
                data: {
                    template: new sap.suite.ui.commons.ComparisonData({
                        title: "{title}",
                        value : "{value}",
                        color: "{color}",
                        displayValue : "{displayValue}"
                    }),
                    path: "/data"
                }
            })
        }));
    }
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.doProcess = function() {
    var that = this;
    this._fetchDataForComparisonTile(function(kpiValue) {
        var deviationTileObj={};
        deviationTileObj.data=kpiValue.kpiData;
        if(kpiValue.unitPrefix){
            deviationTileObj.unit = kpiValue.unitPrefix;
        }
        if(true || that.isAssociatedKpi()) {
            deviationTileObj.subheader= this.evaluationApi.getTitle();
            deviationTileObj.header= this.evaluationApi.getKpiName();
        }
        that.jsonModel.setData(deviationTileObj);
        that.setDoneState();
    }, this.logError);
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype._fetchDataForComparisonTile = function(fnSuccess,fnError) {
    var _getSortByClauseObject = function(tileConfiguration) {
        var fallback = [{name:this.EVALUATION_DATA.COLUMN_NAME, order : "desc"}];
        if(tileConfiguration && tileConfiguration.SORTING) {
            var sortingObject = tileConfiguration.SORTING;
            if((sortingObject.order == 'asc' || sortingObject.order == 'desc') && (sortingObject.by == 'M' || sortingObject.by == 'D')) {
                var rSortingClauseObject = [];
                rSortingClauseObject.push({
                    name : (sortingObject.by == 'M' ? this.evaluationApi.getKpiMeasureName() :  this.getDimension()),
                    order : sortingObject.order
                });
                return rSortingClauseObject;
            }
        }
        return fallback;
    };
    var that = this;
    /* Preparing arguments for the prepareQueryServiceUri function */
    var oParam = {};
    this.oConfig=this.EVALUATION_DATA;
    oParam.serviceUri = this._addSystemAliasToUri(this.evaluationApi.getODataUrl(), this.getSapSystem());
    oParam.entitySet = this.evaluationApi.getEntitySet();
    oParam.measure = this.evaluationApi.getKpiMeasureName();
    oParam.dimension = this.getDimension();
    oParam.filter = this.getAllFilters();
    oParam.sort = _getSortByClauseObject.apply(this, [this.getTileConfiguration()]);
    oParam.dataLimit = 3;        
    that.oConfig.FINALVALUE = {};
    oParam.sortingColumn =  this.evaluationApi.getKpiMeasureName();
    var finalQuery = sap.suite.ui.smartbusiness.lib.Util.odata.getUri(oParam);
    var oUnitPrefix = this.UOM_PROPERTY_MAPPING[this.evaluationApi.getKpiMeasureName()];
    var oDimensions = this.TEXT_PROPERTY_MAPPING;
    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
        if(data && data.results && data.results.length) {
            if(oUnitPrefix) {
                that.oConfig.FINALVALUE.unitPrefix = data.results[0][oUnitPrefix];
            }
            that.oConfig.FINALVALUE.kpiData=data;
            oParam.dimension = oDimensions[that.getDimension()];
            that.oConfig.FINALVALUE.kpiData = that._processDataForComparisonChart(that.oConfig.FINALVALUE.kpiData,oParam.measure,oParam.dimension);
            fnSuccess.call(that,that.oConfig.FINALVALUE);
            that.initCTPopup();
        } else {
            that.setNoData();
        }
    },function(eObject) {
        if(eObject && eObject.response) {
            jQuery.sap.log.error(eObject.message +" : "+eObject.request.requestUri);
        }
    });
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype._processDataForComparisonChart= function(data,measure,dimension){
	var isTileConfig = true;
	var tileConfig = this.getTileConfiguration();
    var semanticColor = (tileConfig && tileConfig.SORTING && tileConfig.SORTING.dimension_color) || (function() { isTileConfig = false; return sap.suite.ui.commons.ValueStatus.Neutral; })();
    var finalOutput= [];
    var tempVar;
    var that = this;
    if(!isTileConfig) {
    	jQuery.sap.log.error("No Tile Configuration available for tile - " + this.getId());
    }
    for(var i=0;i<data.results.length;i++) {
        var eachData=data.results[i];
        var temp={};
        try {
            temp.title = eachData[dimension].toString();
        } 
        catch(e){
            temp.title = "";
        };
        temp.value=Number(eachData[measure]);
        var calculatedValueForScaling = Number(eachData[measure]);
        /*if(this.oConfig.SCALING == -2)
            calculatedValueForScaling *= 100;*/
        var isACurrencyMeasure = this.isACurrencyMeasure(measure);
        var unitValue = this.oConfig.FINALVALUE.unitPrefix;
        var tempVar = this.libFormat(calculatedValueForScaling, isACurrencyMeasure, unitValue);
        temp.displayValue = tempVar.toString();
        /*if(this.oConfig.SCALING == -2)
            temp.displayValue += " %";*/
        if(semanticColor == void (0)){
            temp.color= sap.suite.ui.commons.ValueStatus.Neutral;
        }
        else {
            temp.color= semanticColor;
          /*  if(this.evaluationApi.isMaximizingKpi()){
                if(temp.value > eachData[semanticMeasure]){
                    temp.color= "Good";
                }
                else {
                    temp.color= "Error";
                }
            }
            else if(this.evaluationApi.isMinimizingKpi()){
                if(temp.value < eachData[semanticMeasure]){
                    temp.color= "Good";
                }
                else {
                    temp.color= "Error";
                }
            }
            else {
                temp.color= "Neutral";
            }*/
        }
        finalOutput.push(temp);
    }
    return finalOutput;     
};
sap.suite.ui.smartbusiness.tiles.Comparison.prototype.doDummyProcess = function() {
    this.jsonModel.setData(this.getDummyDataForComparisonTile());
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.showCTPopup = function() {
	this._CTpopOver.openBy(this);
};

sap.suite.ui.smartbusiness.tiles.Comparison.prototype.initCTPopup = function() {
	var self = this;
	var model = new sap.ui.model.json.JSONModel();
    var modelData = {"THRESHOLDS":[]};
    var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
    jQuery.sap.require("sap.ui.core.format.NumberFormat");
    this.VALUE_FORMATTER = sap.ui.core.format.NumberFormat.getFloatInstance({
    			style: "standard"
    		},locale);
    var thresholdList = new sap.m.List({
    });
    
    var getValueState = function(color){
        return {
    	"Error" : sap.ui.core.ValueState.Error,
        "Neutral" : sap.ui.core.ValueState.None,
        "Good" : sap.ui.core.ValueState.Success,
        "Warning" : sap.ui.core.ValueState.Warning,
        "Critical" : sap.ui.core.ValueState.Warning
        }[color] || sap.ui.core.ValueState.None;
    };
    
    thresholdList.bindItems("/THRESHOLDS", new sap.m.ObjectListItem({
    	title : "{name}",
    	number : "{value}",
    	numberState: {
            path: "color",
            formatter: getValueState
        }
    }));
    thresholdList.setModel(model);
    
    var thresholdVals = this.oConfig.FINALVALUE.kpiData;
    
    if(this.evaluationApi.getScaling() == -2) {    	
    	for(var each in thresholdVals) {
			if(thresholdVals[each]) {
				thresholdVals[each].value = (thresholdVals[each].value *100) + " %" ;
			}    				
		}
    }
    
    for (var j in thresholdVals) {
	    modelData.THRESHOLDS.push({
	        name : thresholdVals[j].title,
	        value : this.VALUE_FORMATTER.format(thresholdVals[j].value),
	        color: thresholdVals[j].color
	    });
    }
    
    model.setData(modelData);
    var dimension_name = this.TEXT_PROPERTY_MAPPING[this.getDimension()] || this.getDimension();
    var oCustomHeader = new sap.m.Bar({
        contentMiddle:[ new sap.m.Label({
            text: dimension_name
        })],
        contentRight:(jQuery.device.is.phone) ? [] :
            [new sap.m.Button({
                icon:"sap-icon://decline",
                width : "2.375rem",
                press:jQuery.proxy(function(){if(this._CTpopOver.isOpen()){this._CTpopOver.close();}},
                	this)
            })]
    });
    this._CTpopOver = new sap.m.ResponsivePopover({
        modal:false,
        enableScrolling:true,
        verticalScrolling:true,
        horizontalScrolling:false,
        placement:sap.m.PlacementType.Auto,
        contentWidth:"18rem",
        customHeader:oCustomHeader,
        content:[thresholdList]
    });
    var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
    oStaticArea.addContent(this._CTpopOver, true);
};



}; // end of sap/suite/ui/smartbusiness/tiles/Comparison.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.Adapter') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.Adapter");
(function() {
	
	var SERVICES = {
			"Navigation" : {
				func : "getNavigationServicePath"
			},
			"ModelerServices" : {
				func : "getMetadataPath"
			},
			"CatalogServices" : {
				func : "getCatalogServicePath"
			},
			"DrilldownServices":{
				func:"getMetadataPath"
			},
			"RuntimeServices":{
				func:"getMetadataPath"
			}
		};
	var oConfig = sap.suite.ui.smartbusiness.Configuration;
	var _cache = {};
	var getPlatformPath = function(oConfig, sServiceName) {
		return oConfig[SERVICES[sServiceName]["func"]]() +"."+sServiceName;
	};
	var Adapter = function() {
		this.getService = function(sServiceName, oParam) {
			oParam = oParam || {};
			var module, adapterPath, service, tempObj, cacheKey;
			if(!SERVICES[sServiceName]) {
				throw new Error("Service '"+sServiceName+"' Not Supported!");
			}
			module = oConfig.getLibraryModulePath()+"."+sServiceName;
			cacheKey = module + "_" + JSON.stringify(oParam);
			if(_cache[cacheKey]) {
				return _cache[cacheKey];
			}
			jQuery.sap.require(module);
			service = jQuery.sap.getObject(module);
			if(service.hasAdapter) {
				adapterPath = getPlatformPath(oConfig, sServiceName)+"Adapter";
				jQuery.sap.require(adapterPath);
				service = jQuery.sap.getObject(adapterPath);
			}
			if(service instanceof Function) {
				var tempObj = new service(oParam);
			} else {
				tempObj = service;
			}
			tempObj  = jQuery.sap.newObject(tempObj);
			_cache[cacheKey] = tempObj;
			return _cache[cacheKey]
		};
		this.getCache = function() {
			return _cache;
		}
	};
	sap.suite.ui.smartbusiness.Adapter = new Adapter();
})();

}; // end of sap/suite/ui/smartbusiness/Adapter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.association.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.association.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "INDICATORS_MODELER",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},


});
}; // end of sap/suite/ui/smartbusiness/designtime/association/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.authorization.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.authorization.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "EVALUATIONS",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.drilldown.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.drilldown.Configuration", {
	oServiceParams: {
		serviceList: [{
			name: "smart_business_runtime_services",
			masterCollection: "EVALUATIONS",
			serviceUrl: sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault: true,
			mockedDataSource: "/ddaconfig/model/metadata.xml"
		}]
	},

	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["ID", "IS_ACTIVE"];
	},
	getExcludedQueryStringParameters : function() {
	    return ["sap-client","sap-language"];
	},
	getDefaultEmptyMessageKey : function(){
	    return this.oApplicationFacade.getResourceBundle().getText("MULTI_EMPTY_TEXT");
	  }
});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.S3.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.S3.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
//jQuery.sap.require("sap.ui.vbm.AnalyticMap");
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained






jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained

sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.S3", {

	onInit : function() {
		this.chartDummyData = {MEASURES:[[50,80,40,120,60,200,170,20,160,190],
		                                 [30,40,20,90,130,150,200,50,70,90],
		                                 [120,60,200,20,160,190,200,30,40,20],
		                                 [100,160,20,120,60,80,150,130,80,90],
		                                 [180,70,90,30,20,80,130,40,160,190],
		                                 [70,20,190,40,80,120,130,10,60,60],
		                                 [90,80,100,50,160,90,80,30,140,120],
		                                 [80,90,120,200,50,150,140,20,150,130],
		                                 [90,130,150,180,70,90,70,20,190,40],
		                                 [20,160,190,10,160,20,100,50,160,90],
		                                 [40,160,190,30,40,20,90,130,150,180]
						 				]
							  };
//		this.getView().getContent()[0].addContent(new sap.ui.core.HTML({
//            content:'<div class="invisibleDiv">'
//                }));
		//this.errorMessages = [];
		this.errorState = false;
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.viewId = null;
		this.ddaFilter=this.byId("ddaFilter");
		this.initializeTileHeader();
		this.defineHeaderFooterOptions();
		this.navigatingWithinDrilldown = true;
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		this.busyIndicator = new sap.m.BusyDialog();		
		
	},
	tileTypeMapping:{
		NT : "Numeric",
		AT : "Bullet",
		CT : "Comparison",
		TT : "AreaChart",
		CM:"MeasureComparison",
		HT:"HarveyBall"
	},
	headerNumberFormatter:function(s){
		return s?"12,345.67":"";
	},
	headerNumberUnitFormatter:function(s){
		return s?"EUR":"";
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
	},
	initializeTileHeader:function(){
		var that=this;
		var tileContainer=this.byId("tileContainer");
		//var filter= new sap.ui.model.Filter("visible",sap.ui.model.FilterOperator.EQ,true);
		tileContainer.bindAggregation("items",{
			path:"SB_DDACONFIG>/HEADERS_VISIBLE",
			factory:function(sId,oBindingContext){
				var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
				return new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
					evaluationId:that.evaluationId,
					mode:"DUMMY",
					header:	"{SB_DDACONFIG>TITLE}",
					subheader: "{SB_DDACONFIG>SUBTITLE}"
				}).addStyleClass("drilldownKpiTiles");

			},
			//filters:[filter]
		});
	},
	lauchConfigurator: function() {
		var route = null;
		var contextPath = this.evaluationId + "/" + this.viewId;
		this.oApplicationFacade.navigatingWithinDrilldown = this.navigatingWithinDrilldown;
		if(this.DDA_MODEL.getConfigurator().getAllViews().length==0){
			route = "configureChart";
            //this.oRouter.navTo("configureChart",{evaluationId: this.evaluationId, viewId: this.viewId});
        }
        else{
        	route = "configurator";
        	//this.oRouter.navTo("configurator", {evaluationId: this.evaluationId, viewId: this.viewId});
        }
		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:route, context: contextPath});
		//this.evaluationId = null;
	},
	onRoutePatternMatched: function(oEvent) {
		var view = this.getView();
		var that=this;

		if (oEvent.getParameter("name") === "detail") {
			that.errorState = undefined; 
			that.errorMsg = undefined;
			try {
				//check if the model has to be refreshed due to an eval level save/delete
				if(this.oApplicationFacade.__refreshModel && this.oApplicationFacade.__refreshModel === 1) {
					this.getView().getModel() && this.getView().getModel().refresh();
				}
				this.isPasteEnabled = false;
				var str=oEvent.getParameter("arguments").contextPath;
				var context = new sap.ui.model.Context(view.getModel(), '/' + str);
				this.evalContext = context;
				view.setBindingContext(context);
				if(!(this.oApplicationFacade.__refreshModel) && context.getObject() && (context.getObject()["VIEWS_COUNT"] === null)){
					this.oApplicationFacade.navigatingWithinDrilldown = this.navigatingWithinDrilldown;
					sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"noDataView",context:context.sPath.substr(1)});
					return;
                }
				this.oApplicationFacade.__refreshModel = undefined;
				try{
					this.evaluationId = view.getBindingContext().getObject()["ID"];
				}catch(e){
					try{
						this.evaluationId=  str.match(/ID=[^,]+/g)[0].replace(/(ID=')|(')/g,"");
					}catch(e){
						this.evaluationId=str.replace(/EVALUATIONS_MODELER\('|'\)/g,"")
					}
				}

				var evaluationId=oEvent.getParameter("arguments")["evaluationId"];
				if(evaluationId !== this.evaluationId) {
					this.DDA_MODEL =  sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.getInstance(this.evaluationId, true, this.getView().getModel("i18n"));
					this.EVALUATION = sap.suite.ui.smartbusiness.lib.Util.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
					var newViewId=this.DDA_MODEL.NEW_VIEWID;
					var viewId = this.DDA_MODEL.getConfigurator().getDefaultViewId();
					
					if(this.DDA_MODEL.getConfigurator().getAllViews().length==0){
						sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"noDataView",context:context.sPath.substr(1)});
                    }
					
					if(viewId != null) {
						this.viewId = viewId;
						this.DDA_MODEL.setViewId(viewId);
					} else {
						this.viewId = newViewId;
					}
					this.oApplicationFacade.configuratorViewId = this.DDA_MODEL.NEW_VIEWID;
					this.bindUiToModel();
					this.ddaFilter.setEvaluationData(this.EVALUATION);
					this.ddaFilter.setEvaluationId(this.evaluationId);
					var filterDimensions=[];
					this.getView().getModel("SB_DDACONFIG").getProperty("/FILTERS").forEach(function(s){
						filterDimensions.push(s.name); 
					})
					this.ddaFilter.setDimensions(filterDimensions);
				}else{
					this.bindUiToModel();
					if(this.viewId==newViewId && this.getView().getModel("SB_DDACONFIG").getProperty("/ID")!=newViewId ){

					}
				}
				//store init count of headers and filters
				this.INIT_COUNT_HEADERS = this.getView().getModel("SB_DDACONFIG").getData()["HEADERS"].length;
				this.INIT_COUNT_FILTERS = this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].length;

				this._oTextsModel = this.getView().getModel("i18n");
								
				var otoolBarDimSelect = this.getView().byId("vizViewSelector");
				otoolBarDimSelect.bindProperty("selectedKey","SB_DDACONFIG>/ID");				

				this.getView().byId("choroplethViewSelect").bindProperty("selectedKey","SB_DDACONFIG>/ID");
				this._oModel = this.getView().getModel("SB_DDACONFIG").getData();
				this.refreshChart();
				
				if(this.copyClipboard && Object.keys(this.copyClipboard) && Object.keys(this.copyClipboard).length) {
					this.checkEvaluationForPaste();
				}
				else {
					if(this._oControlStore && this._oControlStore.oButtonListHelper) {
						this.updateHeaderFooterOptions(false);
					}
				}

				if(this.getPage().getFooter()) {
					this.checkForCopy();
				}
			}
			catch(e) {
				that.errorState = true;
				that.errorMsg = e.message;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			}
			finally {
				if(this.byId("choroplethViewSelect") && this.byId("choroplethViewSelect").getSelectedItem()) {
					this.byId("choroplethViewSelect").setTooltip(this.byId("choroplethViewSelect").getSelectedItem().getText());
				}
				if(this.byId("vizViewSelector") && this.byId("vizViewSelector").getSelectedItem()) {
					this.byId("vizViewSelector").setTooltip(this.byId("vizViewSelector").getSelectedItem().getText());
				}
			}
		}
	}, 
	
	defineHeaderFooterOptions:function(){
		var that = this;
		this.oHeaderFooterOptions = { 
				bSuppressBookmarkButton : true,
				sI18NDetailTitle: "DRILLDOWN_CONFIG_DETAILS",
				oEditBtn : {
					sI18nBtnTxt : "CONFIGURE",
					onBtnPressed : function(evt) {
						if(that.errorState) {
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
							return;
						}
						that.lauchConfigurator()
					},
					bEnabled : false, // default true
				},
				buttonList : [{
				            	  sId : "Copy", // optional
				            	  sI18nBtnTxt : "COPY",
				            	  onBtnPressed : function(evt) {
				            		  if(that.errorState) {
											sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
											return;
										}
				            		  that.copyEvaluationToClipboard();
				            	  }
				              },
				              {
				            	  sId : "Paste", // optional
				            	  sI18nBtnTxt : "PASTE",
				            	  bDisabled : (!(that.isPasteEnabled)),
				            	  onBtnPressed : function(evt) {
				            		  if(that.errorState) {
											sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
											return;
										}
				            		  that.copyDDAConfiguration();
				            	  }
				              },
				              {
				            	  sId : "Delete", // optional
				            	  sI18nBtnTxt : "DELETE",
				            	  onBtnPressed : function(evt) {
				            		  if(that.errorState) {
											sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
											return;
										}
				            		  that.onDeleteConfiguration();
				            	  }
				              }
				              /* {
				                  sId : "cancel", // optional
				                  sI18nBtnTxt : "Cancel",
				                  onBtnPressed : function(evt) {
				                  }
				             },*/

				              ]
		
		};
	},
	
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},
	
	formatColorForMap : function(main_measure,threshold_measure){
		var semanticColorOption = this.dda_config.chartConfig.colorScheme.toUpperCase();
		var goal_type = this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE;

		if(semanticColorOption=="AUTO_SEMANTIC" && threshold_measure){
			if(goal_type == "MA" || goal_type == "RA"){
				if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
				}
				else if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
				}
			}
			else if(goal_type == "MI"){
				if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
				}
				else if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
				}
			}
		}
		else if(semanticColorOption=="NONE" && threshold_measure){
			if(goal_type == "MA" || goal_type == "RA"){
				if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
			else if(goal_type == "MI"){
				if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
		}
		else{
			return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));
		}
	},
	
	formatCode : function(code){
		return code;
	},

	refreshChart: function() {
		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_select_vbox");
		var choroplethMapContainer = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;
		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;
		
		var tmpData = this._oModel;
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,	
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.COLUMNS.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.COLUMNS[i].NAME,
				type: tmpData.COLUMNS[i].TYPE,
				visibility: tmpData.COLUMNS[i].VISIBILITY || "BOTH",
				columns_order: tmpData.COLUMNS[i].COLUMNS_ORDER,
				sortOrder: tmpData.COLUMNS[i].SORT_ORDER || "NONE",
				sortBy: tmpData.COLUMNS[i].SORT_BY || "",
				axis: tmpData.COLUMNS[i].AXIS || 1,
				stacking: tmpData.COLUMNS[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.COLUMNS[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.COLUMNS[i].COLOR2:""
			}) ;
		}			

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			this.oColumns.push(this.dda_config.columnsConfig[i]);
			if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
				this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
				this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }	
			} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
				this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
				this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
			}
		}
		
		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;
		
		//getting labels , texts etc.
		try {
			var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this._oModel.QUERY_SERVICE_URI,this._oModel.QUERY_ENTITY_SET);
		}
		catch(e) {
			jQuery.sap.log.error("Failed to instantiate the odata model");
			throw e;
		}
        this.column_labels_mapping = mProperties.getLabelMappingObject();
        this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
        this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();		
		
		// create viz chart :
		vizVbox.setVisible(true);
		choroplethVbox.setVisible(false);
		
		// get data for chart.....................
		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
			this.oChartDataModel.setData({businessData: oController.oChartData}) ;
		} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
		} 
		
		if((this.dda_config.chartConfig.type).toUpperCase() == "CHOROPLETH"){
			this.plotMapForChoropleth();
		}
		else{
			this.createVizChart(this.chartDimensions,this.chartMeasures);
		}						
		
		// show or hide legend 
		this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);		
		
	},  

	plotMapForChoropleth : function(){
		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_select_vbox");
		var choroplethMapContainer = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;

		vizVbox.setVisible(false);
		choroplethVbox.setVisible(true);
		choroplethMapContainer.removeAllItems();
		this.oModelForMap = new sap.ui.model.json.JSONModel();

		var items = this.getView().getModel("SB_DDACONFIG").getData().COLUMNS;
		var itemsLength = items.length;
		var measuresArray = [];
		for(i=0;i<itemsLength;i++){
			if(items[i].TYPE=='MEASURE'){
				measuresArray.push(items[i]);
			}
			else if(items[i].TYPE=='DIMENSION'){
				this.getView().getModel("SB_DDACONFIG").getData().GEO_DIMENSION = items[i].NAME;
			}
		}
		this.getView().getModel("SB_DDACONFIG").getData().MAIN_MEASURE = measuresArray[0].NAME;

		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			geoDimensionForChoropleth = "CustomerCountry";
			mainMeasureForChoropleth = "DaysSalesOutstanding";
			thresholdMeasureForChoropleth = "BestPossibleDaysSalesOutstndng";

			var oData = 
			{
					businessData :
						[
						 { "CustomerCountry": "IT","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "IN","DaysSalesOutstanding" : 500,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "RU","DaysSalesOutstanding" : 40,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AU","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "BR","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "NO","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AR","DaysSalesOutstanding" : 130,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "ZA","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "CA","DaysSalesOutstanding" : 75,"BestPossibleDaysSalesOutstndng" : 125}
						 ],
			};
			this.oModelForMap.setData(oData);
		}
		else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			geoDimensionForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().GEO_DIMENSION;
			mainMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE;
			thresholdMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE;

			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures);
		}
		//sap.ui.vbm.AnalyticMap.GeoJSONURL  =  jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.lib")+"/L0.json";
		jQuery.sap.require("sap.ui.vbm.AnalyticMap");
		choroplethMapContainer.addItem(new sap.ui.vbm.AnalyticMap({
			width : "100%",
			height : "600px",
			regions : {
				path : "mapModel>/businessData",
				template: new sap.ui.vbm.Region({
					code: {
						path: "mapModel>"+geoDimensionForChoropleth,
						formatter:jQuery.proxy(oController.formatCode,oController)
					},
					color: {
						parts:[{
							path: "mapModel>"+mainMeasureForChoropleth
						},
						{
							path: "mapModel>"+thresholdMeasureForChoropleth
						}], 
						formatter:jQuery.proxy(oController.formatColorForMap,oController)
					},
				})
			}
		}).addStyleClass('choroplethMap')).setModel(this.oModelForMap,"mapModel");

		return;
	},
	
	showChartLegendIfApplicable : function(dimensions, measures) {
   	 	var that = this;
   	 	var otoolbar = this.getView().byId("vizChartContainer") ;
   	 	
        var chtype = this.dda_config.chartConfig.type ;           
        var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isisStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        
                
		if((measures.length > 1) || (isStackApplied)) {             
			otoolbar.setShowLegend(true);
		} else {
			otoolbar.setShowLegend(false);
		}
		
    },
    
    getChartPercentFormatter: function(isStandard){
 		//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
 		function isNumber(n) {
 			return !isNaN(parseFloat(n)) && isFinite(n);
 		}
 		var formatterConstructor={style:isStandard?'standard':'short'};
 		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
 		var chartFormatter=sap.ui.core.format.NumberFormat.getPercentInstance(formatterConstructor);
 		return function(s){
 			return isNumber(s)?chartFormatter.format_percentage(s):s;
 		};
     },
	
	getStacking: function(measures,dimensions) {													    // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";
		
		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}				
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}				
			}
		}
		
		return oStacking;
	},
	
	setStacking: function(isEnabled,type,columns) {																// TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}	
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}				
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}		
	},
	
	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}
		
		return oDim ;
	},
	
	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},
	
	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},
	
	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];
		
		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},

	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
        if(!this.EVALUATION.isTargetKpi()) {
            if(actualValue < thresholdValue) {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
            } else if (actualValue == thresholdValue) {
                return sap.ui.core.ValueState.None;
            } else {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
            }
        } else {
            return sap.ui.core.ValueState.None;
        }
    },
    _getTableCell : function(originalMeasure, thresholdMeasure) {
        var that = this;
        if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
            return new sap.m.ObjectNumber({
                number: {
                    path: originalMeasure
                },
                state : {
                    parts : [
                             {path : originalMeasure},
                             {path : thresholdMeasure}
                    ],
                    formatter : function(oMeasureValue, tMeasureValue) {
                        try {
                            oMeasureValue = window.parseFloat(oMeasureValue);
                            tMeasureValue = window.parseFloat(tMeasureValue);
                            return that._getValueState(oMeasureValue, tMeasureValue);
                        }catch(e) {
                            return sap.ui.core.ValueState.None;
                        }
                    }
                }
            });
        } else {
            return new sap.m.Label({
                text : {
                    path : originalMeasure
                }
            })
        }
    },
	
	formatChartNumbers: function (value) {
		//var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				if (dec || dec==0){
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short',
						minFractionDigits: dec,
						maxFractionDigits: dec
					});
				}

				else{
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short'
					});
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},
	
	getRuntimeChartData: function(dimensions,measures) {                          // TODO
		var that = this;
				
		var chartToolbarRef = this.getView().byId("vizChartContainer");
		chartToolbarRef.setBusy(true);
		
		this.COLUMNS_SORT = [];
        for(var i=0;i<that.oColumns.length;i++) {
            if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
                if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase == "DESC") {
                    this.COLUMNS_SORT.push({
                        name : that.oColumns[i].sortBy,
                        order : that.oColumns[i].sortOrder
                    });
                }
            }
        }
        
        try{
			var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
		        serviceUri : this._oModel.QUERY_SERVICE_URI,
		        entitySet : this._oModel.QUERY_ENTITY_SET,
		        dimension : dimensions,
		        measure : measures,
		        filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
		        sort : this.COLUMNS_SORT,
	            dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
	            //includeDimensionKeyTextAttribute : true/false, default true,
	            //includeMeasureRawFormattedValueUnit : true/false, default True,
		    });
		    
		    oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
		    	if(data.results.length) {
		    		that.oChartData = data.results ;		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
					if((that.getView().getModel('SB_DDACONFIG').getData().CHART_TYPE).toUpperCase()=='CHOROPLETH'){
						that.oModelForMap.setData({businessData: that.oChartData});
					}	
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				}
		    	chartToolbarRef.setBusy(false);
		    }, function() {
		    	jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
		    	that.oChartData = [];		
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
		    });
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];		
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},
	
	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		var that = this;
		MAX_D=MAX_D|| 10;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={},p;
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}
		p=MAX_D-1;
		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=that.chartDummyData.MEASURES[i][j];
			}
			chartData.push(tmp);
			p--;
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},
	
	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},

//	** For deleting a view :

	onDeleteConfiguration: function() {
		  var that=this;
		
    	  var self = that;
     	  this.confirmDialog = new sap.m.Dialog({
     		 icon:"sap-icon://warning2",
     		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
     		 state:"Error",
     		 type:"Message",
     		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("DELETE_ALL_CONFIGURATIONS")})],
     		 beginButton: new sap.m.Button({
     			 text:self._oTextsModel.getResourceBundle().getText("OK"),
     			 press: function(){
     				//go into busy mode.
     				that.busyIndicator.open() && that.getView().setBusy(true);
     				self.deleteMaster();
     			 }
     		 }),
     		 endButton: new sap.m.Button({
     			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
     			 press:function(){this.getParent().close();}
     		 })
     	 });
     	 this.confirmDialog.open();
	},	
	deleteMaster: function() {	
		var that = this;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		this.busyIndicator.open() && this.getView().setBusy(true);
		var saveService=sap.suite.ui.smartbusiness.Adapter.getService("DrilldownServices");
		saveService.saveEvalConfiguration(this.evaluationId,modelData,"delete",function(){
    		  jQuery.sap.log.info("Deleted master configuration for the evaluation");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_DELETE_SUCCESS"));
      		  that.confirmDialog.close();
      		  that.DDA_MODEL.removeAllViews();
      		  that.DDA_MODEL.setViewId("");
      		  that.bindUiToModel();
      		  that._oModel = that.DDA_MODEL.getModelDataForDDAConfiguration();
      		  that.refreshChart();
      		  sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"noDataView",context:that.evalContext.sPath.substr(1)});
      		  that.getView().getModel().refresh();
		},function(e){
      		  jQuery.sap.log.error(e + " failed");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
      		  });
	},
	// --------------------------------------------------------------------------------------------
	
	updateHeaderFooterOptions: function(paste) {
		this.isPasteEnabled = paste;
		this.defineHeaderFooterOptions();
		this.setHeaderFooterOptions(this.getHeaderFooterOptions());
		//this.setBtnEnabled("Paste",paste);
	},
	
	checkEvaluationForPaste: function() {
		var currentEvaluationData = this.EVALUATION.evaluationData;
		var currentMasterData = this.getView().getModel("SB_DDACONFIG").getData();

		if((this.copyClipboard.evaluationData.ID == currentEvaluationData.ID) || this.checkEvaluationForPaste1()) {
			this.updateHeaderFooterOptions(false);
		}
		else {
			this.updateHeaderFooterOptions(true);
		}
		
//		if(this.copyClipboard.evaluationData.ID != currentEvaluationData.ID) {
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_MEASURES.length; i<l; i++) {
//				if(currentMasterData.ALL_MEASURES.indexOf(this.copyClipboard.MasterData.ALL_MEASURES[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			for(var i=0,l=this.copyClipboard.MasterData.ALL_DIMENSIONS.length; i<l; i++) {
//				if(currentMasterData.ALL_DIMENSIONS.indexOf(this.copyClipboard.MasterData.ALL_DIMENSIONS[i]) == -1) {
//					this.updateHeaderFooterOptions(false);
//					return;
//				}
//			}
//			this.updateHeaderFooterOptions(true);
//		}
//		else {
//			this.updateHeaderFooterOptions(false);
//		}
//		return;
	},
	
	checkEvaluationForPaste1: function() {
		//var currentEvaluationData = this.EVALUATION.evaluationData;
		var masterData = this.copyClipboard.masterData;
		var measures = {};
		var dimensions = {};
		if(this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.length) {
			if(this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.length == 1) {
				measures[this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES[0]] = "M";
			}
			else {
				measures = this.getView().getModel("SB_DDACONFIG").getData().ALL_MEASURES.reduce(function(p,c,i,a) { measures = measures || {}; if(i == 1){ measures[a[0]] = "M"; }  measures[a[i]] = "M"; return measures;});
			}
		}
		if(this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.length) {
			if(this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.length == 1) {
				dimensions[this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS[0]] = "D";
			}
			else {
				dimensions = this.getView().getModel("SB_DDACONFIG").getData().ALL_DIMENSIONS.reduce(function(p,c,i,a) { dimensions = dimensions || {}; if(i == 1){ dimensions[a[0]] = "D"; }  dimensions[a[i]] = "D"; return dimensions;});
			}
		}
		
		var error = null;
		this.diffHeaders = [];
		
		for(var i=0,l=masterData.FILTERS.length; i<l; i++) {
			delete masterData.FILTERS[i].__metadata;
			if(dimensions[masterData.FILTERS[i].DIMENSION] != "D") {
				if(error == null) {
					error = {};
				}
				if(error.DIMENSIONS == undefined) {
					error.DIMENSIONS = {};
				}
				if(error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] == undefined) {
					error.DIMENSIONS[masterData.FILTERS[i].DIMENSION] = [];
				} 
				masterData.FILTERS[i].entityType = "FILTER";
				error.DIMENSIONS[masterData.FILTERS[i].DIMENSION].push(masterData.FILTERS[i]);
			}
		}
		
		for(var i=0,l=masterData.CHART.length; i<l; i++) {
			delete masterData.CHART[i].__metadata;
			if(masterData.CHART[i].THRESHOLD_MEASURE) {
				if(measures[masterData.CHART[i].THRESHOLD_MEASURE] != "M") {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] == undefined) {
						error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE] = [];	
					}
					masterData.CHART[i].entityType = "THRESHOLD_MEASURE";
					error.MEASURES[masterData.CHART[i].THRESHOLD_MEASURE].push(masterData.CHART[i]);
				}
			}
		}

		for(var i=0,l=masterData.COLUMNS.length; i<l; i++) {
			delete masterData.COLUMNS[i].__metadata;
			var measure = null;
			var dimension = null;
			if(masterData.COLUMNS[i].TYPE == "MEASURE") {
				if((measures[masterData.COLUMNS[i].NAME] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].NAME] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "MEASURE";
					error.MEASURES[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.MEASURES[masterData.COLUMNS[i].NAME][error.MEASURES[masterData.COLUMNS[i].NAME].length-1].entityType = "MEASURE";
				}
				if((measures[masterData.COLUMNS[i].SORT_BY] != "M")) {
					if(error == null) {
						error = {};
					}
					if(error.MEASURES == undefined) {
						error.MEASURES = {};
					}
					if(error.MEASURES[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.MEASURES[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					measure = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					measure.entityType = "SORT_BY";
					error.MEASURES[masterData.COLUMNS[i].SORT_BY].push(measure);
				}
			}
			else if(masterData.COLUMNS[i].TYPE == "DIMENSION") {
				if((dimensions[masterData.COLUMNS[i].NAME] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].NAME] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].NAME] = [];	
					}
					masterData.COLUMNS[i].entityType = "DIMENSION";
					error.DIMENSIONS[masterData.COLUMNS[i].NAME].push(masterData.COLUMNS[i]);
					//error.DIMENSIONS[masterData.COLUMNS[i].NAME][error.DIMENSIONS[masterData.COLUMNS[i].NAME].length-1].entityType = "DIMENSION";
				}
				if((dimensions[masterData.COLUMNS[i].SORT_BY] != "D")) {
					if(error == null) {
						error = {};
					}
					if(error.DIMENSIONS == undefined) {
						error.DIMENSIONS = {};
					}
					if(error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] == undefined) {
						error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY] = [];	
					}
					dimension = jQuery.extend(true, {}, masterData.COLUMNS[i], {});
					dimension.entityType = "SORT_BY";
					error.DIMENSIONS[masterData.COLUMNS[i].SORT_BY].push(dimension);
				}
			}
		}
		
		for(var i=0,l=masterData.HEADER.length; i<l; i++) {
			if(masterData.HEADER[i].EVALUATION_ID !== masterData.HEADER[i].REFERENCE_EVALUATION_ID) {
				this.diffHeaders.push(masterData.HEADER[i]);
			}
			else {
				if((masterData.HEADER[i].VISUALIZATION_TYPE != "NT") && (masterData.HEADER[i].VISUALIZATION_TYPE != "AT")) {
					if((masterData.HEADER[i].VISUALIZATION_TYPE === "CM")) {
						var measuresArr = undefined;
						try{
							measuresArr = JSON.parse(JSON.parse(masterData.HEADER[i].CONFIGURATION).MEASURES);
						}
						catch(e) {
							throw new Error("Failed to parse multiple measures of Comparison Chart Multiple Measures");
						}
						
						for(var j=0,m=measuresArr.length; i<m; i++) {
							if(measures[measuresArr[j]["name"]] != "M") {
								masterData.HEADER[i].entityType = "HEADERS";
								if(error == null) {
									error = {};
								}
								if(error.MEASURES == undefined) {
									error.MEASURES = {};
								}
								if(error.MEASURES[measuresArr[j]["name"]] == undefined) {
									error.MEASURES[measuresArr[j]["name"]] = [];	
								}
								error.MEASURES[measuresArr[j]["name"]].push(masterData.HEADER[i]);
								break;
							}
						}
					}
					else {
						if(dimensions[masterData.HEADER[i].DIMENSION] != "D") {
							masterData.HEADER[i].entityType = "HEADERS";
							if(error == null) {
								error = {};
							}
							if(error.DIMENSIONS == undefined) {
								error.DIMENSIONS = {};
							}
							if(error.DIMENSIONS[masterData.HEADER[i].DIMENSION] == undefined) {
								error.DIMENSIONS[masterData.HEADER[i].DIMENSION] = [];	
							}
							error.DIMENSIONS[masterData.HEADER[i].DIMENSION].push(masterData.HEADER[i]);
						}
					}
				}
			}
		}
		return error;
	},
	
	copyEvaluationToClipboard: function() {
		var that = this;
		var copyToClipboard = function() {
			that.copyClipboard = {};
			that.copyClipboard.MasterData = that.getView().getModel("SB_DDACONFIG").getData();
			that.copyClipboard.masterData = sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData;
			that.copyClipboard.evaluationData = that.EVALUATION.evaluationData;
			sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("COPY_DDA_TO_CLIPBOARD", that.EVALUATION.evaluationData.TITLE || (that.EVALUATION.evaluationData.ID + "*")));
			that.oApplicationFacade.copyClipboard = that.copyClipboard;
			that.updateHeaderFooterOptions(false);
		}
		if(sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER.length) {
			var diffHeaders = [];
			for(var i=0,l=sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER.length; i<l; i++) {
				if(sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER[i].EVALUATION_ID != sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER[i].REFERENCE_EVALUATION_ID) {
					diffHeaders.push(sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.HEADER[i]);
				}
			}
			if(diffHeaders && diffHeaders.length) {
				that.warnDialog = that.warnDialog || new sap.m.Dialog({
					icon:"sap-icon://warning2",
					title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
					state:"Warning",
					type:"Message",
					content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("RELATED_KPIS_HEADER_TILES_EXIST_WARN")})],
					beginButton: new sap.m.Button({
						text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
						press: function(){
							that.warnDialog.close();
							copyToClipboard();
						}
					})//,
//					endButton: new sap.m.Button({
//						text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
//						press:function(){
//							that.warnDialog.close();
//						}
//					})   	                                           
				});
				that.warnDialog.open();
			}
			else {
				copyToClipboard();
			}
		}
		else {
			copyToClipboard();
		}
	},
	
	copyDDAConfiguration: function() {
		var that = this;
		if(this.copyClipboard && this.copyClipboard.evaluationData) {
			var payload = {sourceEvaluationId:this.copyClipboard.evaluationData.ID, targetEvaluationId: this.EVALUATION.evaluationData.ID};
			var callCopyDDA = function(){
				sap.suite.ui.smartbusiness.lib.Util.utils.create(sap.suite.ui.smartbusiness.lib.Util.utils.serviceUrl("COPY_DDA_CONFIGURATION_SERVICE_URI"),payload,null,function(data){
					sap.m.MessageToast.show(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_SUCCESS"));
					that.getView().getModel().refresh();
					var evt = {
							getParameter: function(param) {
								var evtObj = {
										name:"detail",
										arguments:{contextPath: "EVALUATIONS_MODELER(ID='" + that.evaluationId + "',IS_ACTIVE=1)"}  
								};
								return evtObj[param];
							}	
					};
					that.onRoutePatternMatched(evt);
				},function(err){
					sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("DDA_COPY_ERROR"), err.responseText);
					});
			};
			if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.MASTER && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.MASTER.length) {
				this.warnOverwriteDialog = this.warnOverwriteDialog || new sap.m.Dialog({
				icon:"sap-icon://warning2",
				title:that.oApplicationFacade.getResourceBundle().getText("WARNING"),
				state:"Warning",
				type:"Message",
				content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DDA_CONFIG_EXISTING_WARN")})],
				beginButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CONTINUE"),
					press: function(){
						that.warnOverwriteDialog.close();
						callCopyDDA();
					}
				}),
				endButton: new sap.m.Button({
					text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
					press:function(){
						that.warnOverwriteDialog.close();
					}
				})   	                                           
			});
			this.warnOverwriteDialog.open();
			}
			else {
				callCopyDDA();
			}
		}
	},
	
	checkForCopy: function() {
		if(sap.suite.ui.smartbusiness.lib.DrilldownConfiguration && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.MASTER && sap.suite.ui.smartbusiness.lib.DrilldownConfiguration.MasterData.MASTER.length) {
			this.setBtnEnabled("Copy",true);
		}
		else {
			this.setBtnEnabled("Copy",false);
		}
	},
	
	onAfterRendering: function() {
		//this.setBtnEnabled("Paste",false);
		this.checkForCopy();
//		try{
//            if(this.DDA_MODEL.getConfigurator().getAllViews().length==0){
//                $(".invisibleDiv").css("display","block");
//            }
//            else{
//                $(".invisibleDiv").css("display","none");
//            }
//        }
//        catch(e){
//            //DO nothing
//        }
	},
	
//	viz charts code :

	createVizChart: function(dimensions, measures) {
		var that = this;
		var vizChartContainer = this.getView().byId("vizChartContainer");
		vizChartContainer.removeAllContent();
		
		// get table view for the toolbar :
		var vTableFrame = this.getTableForViz(this.tableDimensions, this.tableMeasures);
		
		if((this.dda_config.chartConfig.type).toUpperCase() == "TABLE") {
			vizChartContainer.addContent(vTableFrame); 
			setTimeout(function(){
				vizChartContainer.rerender();	
			},0);			
			//return;
		} 
		else {
			var oViz = this.getVizTypeAndIcon();
			
			var vizChartContainerContent = new sap.suite.ui.commons.ChartContainerContent({
				icon: oViz.icon,
			});
			
			var oVizFrame = new sap.viz.ui5.controls.VizFrame({
				vizType : oViz.type,
				uiConfig : {
					applicationSet : 'fiori'
				},	
			});
			oVizFrame.setVizProperties({
				plotArea: {
					dataLabel : {
						visible: true,
						hideWhenOverlap: false
						//formatString: "#,##0.00"
					}
				},
				legend: {
			        title: {
			        	visible : false
			        	},
			        isScrollable: true
			    },
				title: {
		              visible: false,
		        }
			});		
	
			this.addFeedsToVizFrame(oVizFrame);		
			
			var vDataset = this.create_vizDataset(dimensions, measures);
			oVizFrame.setDataset(vDataset);
			oVizFrame.setModel(this.oChartDataModel);	
			
			var vizChartPopover = new sap.viz.ui5.controls.Popover();
			vizChartPopover.connect(oVizFrame.getVizUid());
			
			this.setAllVizFormatters();		
			
			this.applyColorToViz(oVizFrame);
	
			vizChartContainerContent.setContent(oVizFrame);
			
			vizChartContainer.addContent(vizChartContainerContent); 
			vizChartContainer.addContent(vTableFrame); 
		}
	},
	
	addFeedsToVizFrame: function(oVizFrame) {
		var that=this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
		var dimensionToBeStacked = this.getDimensionToBeStacked(this.chartDimensions);
		
		var dimensionLabels=[],measureLabels=[] ;
		for(var i=0;i<that.chartDimNames.length;i++) {
			dimensionLabels.push(that.column_labels_mapping[that.chartDimNames[i]] || that.chartDimNames[i]);
		}
		for(var i=0;i<that.chartMsrNames.length;i++) {
			measureLabels.push(that.column_labels_mapping[that.chartMsrNames[i]] || that.chartMsrNames[i]);
		}

		if(oChartType == "BUBBLE") {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: [measureLabels[0]]
			}), feedSecondaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: [measureLabels[1]]
			}), feedBubbleWidth = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "bubbleWidth",
				type: "Measure",
				values: [measureLabels[2]]
			}), feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "regionColor",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecondaryValues);
			oVizFrame.addFeed(feedBubbleWidth);
			oVizFrame.addFeed(feedRegionColor);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
			for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
				dualMsrAxis1.push(that.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
			}
			for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
				dualMsrAxis2.push(that.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: dualMsrAxis1
			});
			var feedSecValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: dualMsrAxis2
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecValues);
			oVizFrame.addFeed(feedAxisLabels);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (dimensionLabels.length > 1)) {
			var index = dimensionLabels.indexOf(that.column_labels_mapping[(dimensionToBeStacked.name)]);
			if (index > -1) {
			    var oDimStackArray = dimensionLabels.splice(index, 1);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			}), feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			}); 
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
			if(oDimStackArray && oDimStackArray.length) {
				var feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
					uid: "regionColor",
					type: "Dimension",
					values: oDimStackArray
				});			
				oVizFrame.addFeed(feedRegionColor);
			}
		} else {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
		}		
	},

	create_vizDataset: function(dimensions,measures){
		var that = this;
		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);

		var dataset = new sap.viz.ui5.data.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});
		// setting dimensions :
		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			//var oAxis = 1;			
			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				//axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}
		// setting measures :
		if ((chtype == "LINE") || (chtype == "COMBINATION") || (chtype == "BUBBLE") || (chtype == "BAR") || (chtype == "COLUMN")) {   

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		}
		
		return dataset;

	},
	
	applyColorToViz: function(oVizFrame) {
		var that=this;
		var chType = (this.dda_config.chartConfig.type).toUpperCase();
		// implement custom coloring ..............................
		if((chType == "BAR") || (chType == "COLUMN") || (chType == "COMBINATION") || (chType == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: "sapUiChartPaletteSemanticGoodLight1"}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = "sapUiChartPaletteSemanticNeutral";
				this.applyVizCustomColoring(oVizFrame, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.setVizCustomColors(oVizFrame, this.chartMeasures, this.dda_config.chartConfig.colorScheme) ;
			}
		}	
	},
	
	applyVizCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)
		var that = this;
		var oVizProperties = oChart.getVizProperties();
		
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       
			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {                                                                
				that.setVizCustomColors(oChart,arr,colorScheme) ;
				oVizProperties.plotArea.dataPointStyle = {
					    rules:
							  [
								{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											}
										} else
											return false;	
									},
									properties: {
									   color:"sapUiChartPaletteSemanticGoodLight1" 
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("GOOD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											}
										} else
											return false;	
									},
									properties : {
										color : "sapUiChartPaletteSemanticBadLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("BAD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue==null || typeof referenceMeasureValue=='undefined') {
											jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
											return true;
										} 	
									},
									properties : {
										color : "sapUiChartPaletteSemanticNeutralLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("NEUTRAL"))
							}],
						 others : {
						  properties: {
							 color: 'sapUiChartPaletteSemanticNeutral'
						  },
						  displayName: (that._oTextsModel.getResourceBundle().getText("THRESHOLD_REFERENCE"))
						 }
					 }
				oChart.setVizProperties(oVizProperties);
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}
		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			that.setVizCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setVizCustomColors: function(vFrame,msrObj,colorScheme){                           // pass chart reference and msr obj.
		var that = this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
//		var colorMapper = this.getCAtoVizColorMapping();
		
		var dset = vFrame.getDataset() ;
		var msr = dset.getMeasures() ;

		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = "sapUiChartPaletteSemanticNeutral";

		var oVizProperties = vFrame.getVizProperties();
		
		if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			oVizProperties.plotArea.primaryValuesColorPalette = [];
			oVizProperties.plotArea.secondaryValuesColorPalette = [];
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			for(var i=0;i<dualMsr.axis1.objArr.length;i++) {
				(oVizProperties.plotArea.primaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis1.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}
			for(var i=0;i<dualMsr.axis2.objArr.length;i++) {
				(oVizProperties.plotArea.secondaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis2.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+(((i+(dualMsr.axis1.objArr.length)) % 11)+1));
			}
		} else {
			oVizProperties.plotArea.colorPalette = [];
			for(var i=0;i<msr.length;i++)
			{
				(oVizProperties.plotArea.colorPalette)[i] = (that.convertCAtoVizColorCode(msrObj[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}        
		}

		vFrame.setVizProperties(oVizProperties);

	},

	setAllVizFormatters: function() {
		//sap.viz.api.env.Format.useDefaultFormatter(false);
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;		

		var customerFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
					var coreFormatter = sap.ui.core.format.NumberFormat.getInstance();
					return coreFormatter.format(value);
				}
		};
		jQuery.sap.require("sap.viz.ui5.api.env.Format");
//				var coreFormatter = sap.ui.core.format.NumberFormat.getInstance();
		sap.viz.ui5.api.env.Format.numericFormatter(customerFormatter);

	},
	
	getVizTypeAndIcon: function() {
		var vType = "bar";
		var vIcon = "sap-icon://bar-chart";
		var oType = this.dda_config.chartConfig.type || "BAR";	
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;
		if(oType.toUpperCase() == "BAR") {
			vType = "bar";
			vIcon = "sap-icon://horizontal-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_bar";
						vIcon = "sap-icon://horizontal-stacked-chart";
					} else {
						vType = "bar";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_bar";
					vIcon = "sap-icon://horizontal-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} 
		} else if(oType.toUpperCase() == "COLUMN") {
			vType = "column";
			vIcon = "sap-icon://vertical-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_column";
						vIcon = "sap-icon://vertical-stacked-chart";
					} else {
						vType = "column";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_column";
					vIcon = "sap-icon://vertical-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} 
		} else if(oType.toUpperCase() == "LINE") {
			vType = "line";
			vIcon = "sap-icon://line-chart";
		} else if(oType.toUpperCase() == "COMBINATION") {
			vType = "combination";
			vIcon = "sap-icon://business-objects-experience";
		} else if(oType.toUpperCase() == "BUBBLE") {
			vType = "bubble";
			vIcon = "sap-icon://bubble-chart";
		}

		return {type:vType,icon:vIcon};
	},

	getTableForViz: function(dimensions,measures) {

		var vizChartContainerTable = new sap.suite.ui.commons.ChartContainerContent({
			icon: 'sap-icon://table-chart',
		});

		var vTable = new sap.m.Table({
			showUnread: true,
		});

		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Begin",                                      
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "End",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,              
		});

		for(var i=0;i<dimensions.length;i++){
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
			template.addCell(ocell);

		}
		var thresholdmsr = (this._oModel)["THRESHOLD_MEASURE"];

		var is_percent_scale = false;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if(chartType.toUpperCase() === "TABLE")
			var oMsrs = this.tableMsrNames ;
		else
			var oMsrs = this.chartMsrNames ;
		if(((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && this.getIsPercentScaled(oMsrs) && !(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE'))) {
			is_percent_scale = true;
		}
		var axisScale = [] ;
		if(is_percent_scale) {
			if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				var msrsObj = this.getMeasuresByAxis(this.chartMeasures);	        	
				axisScale.push(this.getIsPercentScaled(msrsObj.axis1.nameArr));
				axisScale.push(this.getIsPercentScaled(msrsObj.axis2.nameArr));
			}
		}

		for(var i=0;i<measures.length;i++){
			var val = measures[i].name;
			if((this._oModel)["COLOR_SCHEME"] == "AUTO_SEMANTIC")
				var ocell = this._getTableCell(val, thresholdmsr, is_percent_scale, axisScale);
			else
				var ocell = this._getTableCell(val, val, is_percent_scale, axisScale);
			template.addCell(ocell);
		}

		vTable.setModel(this.oChartDataModel);
		vTable.bindAggregation("items", "/businessData", template);

		vizChartContainerTable.setContent(vTable);
		return vizChartContainerTable;
	},   

/*	getCAtoVizColorMapping: function() {
		var colorMapper = {
				"sapUiChart1" : "sapUiChartPaletteQualitativeHue1",
				"sapUiChart2" : "sapUiChartPaletteQualitativeHue2",
				"sapUiChart3" : "sapUiChartPaletteQualitativeHue3",
				"sapUiChart4" : "sapUiChartPaletteQualitativeHue4",
				"sapUiChart5" : "sapUiChartPaletteQualitativeHue5",
				"sapUiChart6" : "sapUiChartPaletteQualitativeHue6",
				"sapUiChart7" : "sapUiChartPaletteQualitativeHue7",
				"sapUiChart8" : "sapUiChartPaletteQualitativeHue8",
				"sapUiChart9" : "sapUiChartPaletteQualitativeHue9",
				"sapUiChart10" : "sapUiChartPaletteQualitativeHue10",
				"sapUiChart11" : "sapUiChartPaletteQualitativeHue11",
				"sapCaUiChartSemanticColor-Bad" : "sapUiChartPaletteSemanticBad",
				"sapCaUiChartSemanticColor-Bad-Dark" : "sapUiChartPaletteSemanticBadDark1",
				"sapCaUiChartSemanticColor-Bad-Light" : "sapUiChartPaletteSemanticBadLight1",
				"sapCaUiChartSemanticColor-Critical" : "sapUiChartPaletteSemanticCritical",
				"sapCaUiChartSemanticColor-Critical-Dark" : "sapUiChartPaletteSemanticCriticalDark1",
				"sapCaUiChartSemanticColor-Critical-Light" : "sapUiChartPaletteSemanticCriticalLight1",
				"sapCaUiChartSemanticColor-Good" : "sapUiChartPaletteSemanticGood",
				"sapCaUiChartSemanticColor-Good-Dark" : "sapUiChartPaletteSemanticGoodDark1",
				"sapCaUiChartSemanticColor-Good-Light" : "sapUiChartPaletteSemanticGoodLight1",
				"sapCaUiChartSemanticColor-Neutral" : "sapUiChartPaletteSemanticNeutral",
				"sapCaUiChartSemanticColor-Neutral-Dark" : "sapUiChartPaletteSemanticNeutralDark1",
				"sapCaUiChartSemanticColor-Neutral-Light" : "sapUiChartPaletteSemanticNeutralLight1",
		};
		
		return colorMapper;
	},
*/		
	convertCAtoVizColorCode: function(oColor) {
		var vColor = oColor;
		if(oColor) {
			var splitColorArray = oColor.match(/[a-zA-Z]+|[0-9]+/g);
			if(splitColorArray[0] === "sapUiChart") {
				vColor = "sapUiChartPaletteQualitativeHue"+splitColorArray[1];
			} else if(splitColorArray[0] === "sapCaUiChartSemanticColor") {
				if(splitColorArray.length === 2) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1];
				} else if(splitColorArray.length === 3) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1]+splitColorArray[2]+"1";
				}
			}
		}
		return vColor;
	},
			
	onVizViewChange: function(oEvent) {
		var sKey = oEvent.getParameters().selectedItem.getProperty("key");
		this.viewId = sKey;
		this.DDA_MODEL.setViewId(this.viewId);
		this._oModel = this.DDA_MODEL.getModelDataForDDAConfiguration();
		this.bindUiToModel();
		this.refreshChart();
		oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
	},
		

});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/S3.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator.controller') ) {
  jQuery.sap.declare('sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator.controller');
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
sap.ui.getCore().loadLibrary("sap.suite.ui.commons");
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained







jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.vbm.AnalyticMap'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("sap.suite.ui.smartbusiness.designtime.drilldown.view.configurator", {
	onInit : function() {
		this.chartDummyData = {MEASURES:[[50,80,40,120,60,200,170,20,160,190],
		                                 [30,40,20,90,130,150,200,50,70,90],
		                                 [120,60,200,20,160,190,200,30,40,20],
		                                 [100,160,20,120,60,80,150,130,80,90],
		                                 [180,70,90,30,20,80,130,40,160,190],
		                                 [70,20,190,40,80,120,130,10,60,60],
		                                 [90,80,100,50,160,90,80,30,140,120],
		                                 [80,90,120,200,50,150,140,20,150,130],
		                                 [90,130,150,180,70,90,70,20,190,40],
		                                 [20,160,190,10,160,20,100,50,160,90],
		                                 [40,160,190,30,40,20,90,130,150,180]
						 				]
							  };
		//this.errorMessages = [];
		this.errorState = false;
		
		this.DDA_MODEL = null;
		this.evaluationId = null;
		this.viewId = null;
		this.ddaFilter=this.byId("ddaFilter");
		
		try{
            if(sap.ui.core.Fragment.byId("addTileDialog","addTileDialog")){
            	sap.ui.core.Fragment.byId("addTileDialog","addTileDialog").destroy();
             }
            if(sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList")){
            	sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList").getParent().destroy();
            }
            if(sap.ui.core.Fragment.byId("configureTileDialog","multipleMeasureDialog")){
            	sap.ui.core.Fragment.byId("configureTileDialog","multipleMeasureDialog").destroy();
             }
			
		}catch(e){
			
		}
		this._addTileDialog=sap.ui.xmlfragment("addTileDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addTileDialog", this);
		this._addRelatedTilesDialog=sap.ui.xmlfragment("addRelatedTilesDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.addRelatedTilesDialog", this);
		this._configureTileDialog=sap.ui.xmlfragment("configureTileDialog","sap.suite.ui.smartbusiness.designtime.drilldown.view.multipleMeasureDialog", this);
		this.initializeTileHeader();
		this.initializeAddTileDialog();
		this.initialiazeValueHelpDialog();
		this.defineHeaderFooterOptions();
		this.oRouter.attachRoutePatternMatched(this.onRoutePatternMatched, this);
		//flag to show if views ever re-ordered
		this.viewsReordered = false;
		this.busyIndicator = new sap.m.BusyDialog();
		var header=this.byId("headerRibbon");
		this.HeaderRibbonModel = new sap.ui.model.json.JSONModel();
		header.setModel(this.HeaderRibbonModel);
		//warning when leaving the page
		var self = this;
		if(this.oApplicationFacade.navigatingWithinDrilldown) {
			this.navigatingWithinDrilldown = true;
			this.oApplicationFacade.navigatingWithinDrilldown = undefined;
		} 
		else {
			this.navigatingWithinDrilldown = false;
		}
		/* //warning on closing tab removed, since changes to window can have global side effects.
		 window.onbeforeunload = function(){return self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")}; 
		*/		
		
	},
	
	leftArrowAction: function(){
		var that = this;
		var i, tempObj;
		var headerArrayModel = that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
		var visibleArrayHeader = that.byId("tileContainer").getAggregation("scrollContainer").getAggregation("content");
		try{
			var selectedTile=this._getSelectedTile().tile.getBindingContext("SB_DDACONFIG").getObject();
		}catch(e){selectedTile=null;}
		for(i=0;i<headerArrayModel.length;i++){
			if(headerArrayModel[i] == selectedTile){
				tempObj = headerArrayModel.splice(i,1);
				headerArrayModel.splice(i-1,0,tempObj[0]);
				break;
			}
		}
		that.getView().getModel("SB_DDACONFIG").setProperty("/HEADERS_VISIBLE",headerArrayModel);
		that.getView().getModel("SB_DDACONFIG").updateBindings();
		that._setSelectedTile(that._getSelectedTile().index-1);
	},
	rightArrowAction: function(){
		var that = this;
		var i, tempObj;
		var headerArrayModel = that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
		var visibleArrayHeader = that.byId("tileContainer").getAggregation("scrollContainer").getAggregation("content");
		try{
			var selectedTile=this._getSelectedTile().tile.getBindingContext("SB_DDACONFIG").getObject();
		}catch(e){selectedTile=null;}
		for(i=0;i<headerArrayModel.length;i++){
			if(headerArrayModel[i] == selectedTile){
				tempObj = headerArrayModel.splice(i,1);
				headerArrayModel.splice(i+1,0,tempObj[0]);
				break;
			}
		}
		that.getView().getModel("SB_DDACONFIG").setProperty("/HEADERS_VISIBLE",headerArrayModel);
		that.getView().getModel("SB_DDACONFIG").updateBindings();
		that._setSelectedTile(that._getSelectedTile().index+1);
	},
	selectedTilesFormatter:function(curId,allHeaders){
		var str=""
		var tileTypeText={
				NT : "Numeric",
		        CT : "Comparison",
		        AT : "Bullet",
		        TT : "Trend"
		};
		allHeaders.forEach(function(s){
			if(s.REFERENCE_EVALUATION_ID==curId && s.visible)
			str+=tileTypeText[s.VISUALIZATION_TYPE]+", ";
		});
		return str?"Selected: "+str.replace(/, $/g,""):"";
	},
	_cloneObj:function(ele){
		var tmp;
		if(ele instanceof Array){
			tmp=[];
			for(var i=0;i<ele.length;i++){
				tmp[i]=this._cloneObj(ele[i]);
			}
		}else if(ele instanceof Object){
			tmp={};
			for(var each in ele){
				if(ele.hasOwnProperty(each)){
					tmp[each]=this._cloneObj(ele[each]);	
				}
			}
		}else{
			tmp=ele;
		}
		return tmp;
	},
	_cache:{},
	setApplicationCache:function(key,val){
		this._cache[key]=val;
	},
	getApplicationCache:function(key){
		return this._cache[key];
	},
	takeConfigSnapShot:function(){
		this._configSnapShot=this._cloneObj(this.getView().getModel("SB_DDACONFIG").getData());
	},
	restoreFromConfigSnapShot:function(){
		this.getView().getModel("SB_DDACONFIG").setData(this._configSnapShot);
	},
	bindUiToModel:function(){
		this.DDA_MODEL.bindModel(this.getView(),"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._addTileDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._addRelatedTilesDialog,"SB_DDACONFIG");
		this.DDA_MODEL.bindModel(this._configureTileDialog,"SB_DDACONFIG");
	},
	onRoutePatternMatched:function(oEvent){
		var that=this;
		if (oEvent.getParameter("name") === "configurator") {
			
			try {
				that.errorState = undefined; 
				that.errorMsg = undefined;
				var evaluationId = oEvent.getParameter("arguments")["evaluationId"];
				var viewId = oEvent.getParameter("arguments")["viewId"];
				if(that.oApplicationFacade.__newViewAdded && that.oApplicationFacade.createdViewId) {
					viewId = that.oApplicationFacade.createdViewId;
					that.oApplicationFacade.createdViewId = null;
					that.oApplicationFacade.__newViewAdded = false;
					window.location.replace(window.location.hash.substring(0,window.location.hash.lastIndexOf("/")) + "/" + viewId);
				}
				that.oApplicationFacade.createdViewId = null;
				that.oApplicationFacade.__newViewAdded = false;
				that._setSelectedTile(-1);
				if(evaluationId !== this.evaluationId || that.viewsReordered) {
					that.viewsReordered=false;
					this.evaluationId = evaluationId;
					this.DDA_MODEL =  sap.suite.ui.smartbusiness.lib.DrilldownModel.Model.getInstance(this.evaluationId, true,this.getView().getModel("i18n"));
					this.EVALUATION = sap.suite.ui.smartbusiness.lib.Util.kpi.parseEvaluation(this.DDA_MODEL.EVALUATION_DATA);
					var newViewId=this.DDA_MODEL.NEW_VIEWID;
					/*
					 * when nav'ing from configureNewView, it could
					 * request a context referenced by a viewId.
					 */
					if(!viewId) {
						viewId = this.DDA_MODEL.getConfigurator().getDefaultViewId();
					}
					this._oTextsModel = this.getView().getModel("i18n");
					this._addTileDialog.setModel(this._oTextsModel,"i18n");
					this._addRelatedTilesDialog.setModel(this._oTextsModel,"i18n");
					this._configureTileDialog.setModel(this._oTextsModel,"i18n");
//					var url=this.getView().getModel("SB_DDACONFIG").getData().QUERY_SERVICE_URI;
//					var entitySet=this.getView().getModel("SB_DDACONFIG").getData().QUERY_ENTITY_SET;
//					var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(url,entitySet);
//					this.COLUMN_LABEL_MAPPING = this.mProperties.getLabelMappingObject();
					if(viewId != null) {
						this.viewId = viewId;
						this.DDA_MODEL.setViewId(viewId);
					} else {
						this.viewId = newViewId;
					}
					this.bindUiToModel();
					this.initCopy = this._cloneObj(this.getView().getModel("SB_DDACONFIG").getData());
					this.ddaFilter.setEvaluationData(this.EVALUATION);
					this.ddaFilter.setEvaluationId(this.evaluationId);
					var filterDimensions=[];
					this.getView().getModel("SB_DDACONFIG").getProperty("/FILTERS").forEach(function(s){
						filterDimensions.push(s.name); 
					})
					this.ddaFilter.setDimensions(filterDimensions);
					try{
						this.ddaFilter.rerender();					
					}catch(e){};
				}else{
					if(this.viewId==newViewId && this.getView().getModel("SB_DDACONFIG").getProperty("/ID")!=newViewId ){
						
					}
				}
				
				//store init count of headers and filters
				this.INIT_COUNT_HEADERS = function(){
					h = that.getView().getModel("SB_DDACONFIG").getData()["HEADERS"];
					var count = 0;
					for(var i = 0; i < h.length; ++i) {
						if (h[i]["visible"] == true)
							++count;
					}
					return count;
				}();
				this.INIT_COUNT_FILTERS = this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].length;
				if(!this.init_filters) {
					this.init_filters = [];
					this.getView().getModel("SB_DDACONFIG").getData()["FILTERS"].forEach(function(x){that.init_filters.push(x.name)});
				}				
				
				var otoolBarDimSelect = this.getView().byId("vizViewSelector");
				otoolBarDimSelect.bindProperty("selectedKey","SB_DDACONFIG>/ID");
				
				this.getView().byId("choroplethViewSelect").bindProperty("selectedKey","SB_DDACONFIG>/ID");				
				this._oModel = this.getView().getModel("SB_DDACONFIG").getData();
				this.refreshChart();

//				this.fetchAndRenderHeaderRibbon();            // commenting this to show dummy value instead of actual kpi value . 
	            this.displayAggregate(); 

			}
			catch(e) {
				that.errorState = true;
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), e.message);
			}
			finally {
				if(this.byId("choroplethViewSelect") && this.byId("choroplethViewSelect").getSelectedItem()) {
					this.byId("choroplethViewSelect").setTooltip(this.byId("choroplethViewSelect").getSelectedItem().getText());
				}
				if(this.byId("vizViewSelector") && this.byId("vizViewSelector").getSelectedItem()) {
					this.byId("vizViewSelector").setTooltip(this.byId("vizViewSelector").getSelectedItem().getText());
				}
			}
		}
	},
	/**
	 * Change the Order of View
	 */
	changeViewOrder : function() {
	    var that = this;
	    new sap.suite.ui.smartbusiness.lib.ListPersona({
	        view : this.getView(),
	        context : '/ALL_VIEWS',
	        listItemContext : 'TITLE',
	        namedModel : 'SB_DDACONFIG',
	        callback : function() {
	            var configId = that.DDA_MODEL.selectedView.getId();
	            that.byId('vizViewSelector').setSelectedItem(that.byId('vizViewSelector').getItemByKey(configId));
	            
            	that.byId('choroplethViewSelect').setSelectedItem(that.byId('choroplethViewSelect').getItemByKey(configId));
	            that.viewsReordered = true;
	        }
	    }).start();
	},
	SaveConfig: function(inDialog) {
		var self = this;
		this.warn_header = false;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		modelData.CURRENT_FILTERS=this.getView().byId("ddaFilter").getActiveDimensions();
		var saveService=sap.suite.ui.smartbusiness.Adapter.getService("DrilldownServices");
		if(modelData.ALL_VIEWS.length > 0 ) {
			this.busyIndicator.open() && this.getView().setBusy(true);
			saveService.saveEvalConfiguration(this.evaluationId,modelData,"update",function(){
				jQuery.sap.log.info("all calls success");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.m.MessageToast.show(self._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_SAVE_SUCCESS"));
				if(inDialog==false){
                    //self.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)"});
                    sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)"});
                }
				//this tells the detail route that model has to be refreshed due to eval level save
				self.oApplicationFacade.__refreshModel = 1;
				try {
					if(sap.suite && sap.suite.ui && sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.drilldown.lib.Configuration && sap.suite.ui.smartbusiness.drilldown.lib.Configuration.resetDrilldownConfiguration) {
						sap.suite.ui.smartbusiness.drilldown.lib.Configuration.resetDrilldownConfiguration(self.evaluationId);
					}
				} catch(e) {}
			},function(e){
				jQuery.sap.log.error(e + " failed");
				self.busyIndicator.close() && self.getView().setBusy(false);
				sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR"));
				});
		}
		else {
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(self._oTextsModel.getResourceBundle().getText("SAVE_ERROR_NO_VIEW_CONFIGURED"));
			jQuery.sap.log.error("No Views Configured. Please configure Views before adding filters/headers");
			}
	},
	
	defineHeaderFooterOptions:function(){
		var that = this;
		this.oHeaderFooterOptions = { 
				onBack: function () {
					if(that.isModelChanged()){
						var self = that;
						new sap.m.Dialog({
			              icon:"sap-icon://warning2",
			              title:self._oTextsModel.getResourceBundle().getText("WARNING"),
			              state:"Error",
			              type:"Message",
			              content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
			              beginButton: new sap.m.Button({
			                   text:self._oTextsModel.getResourceBundle().getText("OK"),
			                   press: function(){
			                	    var contextPath = "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)";
			                	   	self.evaluationId = null;
			                	   	this.getParent().close();
			   						//window.history.back();
			                	   	sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: contextPath});
			                   }
			              }),
			              endButton: new sap.m.Button({
			                   text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
			                   press:function(){this.getParent().close();}
			              })                                           
						}).open();
					}
						else{
							 var contextPath = "EVALUATIONS_MODELER(ID='" + that.evaluationId + "',IS_ACTIVE=1)";
							that.evaluationId = null;
	                	   	//window.history.back();
	                	   	sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: contextPath});
						}
				},
				sI18NDetailTitle:"SB_GENERIC_DRILLDOWN",
		        bSuppressBookmarkButton : true,
				buttonList : [{
                    sI18nBtnTxt : "Save Configuration",
                    onBtnPressed : function(evt) {
                    	jQuery.sap.log.info("Save button pressed");
                    	if(that.errorState) {
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
							return;
						}
                    	that.SaveConfig(false);
                    },
               },
//               {
//                   sId : "SaveAndActivate", // optional
//                   sI18nBtnTxt : "Save and Activate",
//                   onBtnPressed : function(evt) {
//                	   jQuery.sap.log.info("Save and Activate button pressed");  
//                	   that.SaveConfig();
//                   }
//              },
              {
                  sId : "Delete", // optional
                  sI18nBtnTxt : "Delete",
                  onBtnPressed : function(evt) {
                	  if(that.errorState) {
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("FAILED_TO_LOAD_ODATA"), that.errorMsg);
							return;
						}
                 	  new sap.m.Dialog({
                 		 icon:"sap-icon://warning2",
                 		 title:that._oTextsModel.getResourceBundle().getText("WARNING"),
                 		 state:"Error",
                 		 type:"Message",
                 		 content:[new sap.m.Text({text:that._oTextsModel.getResourceBundle().getText("DELETE_ALL_CONFIGURATIONS")})],
                 		 beginButton: new sap.m.Button({
                 			 text:that._oTextsModel.getResourceBundle().getText("OK"),
                 			 press: function(){
                 				//go into busy mode.
                 				this.getParent().close();
                 				that.busyIndicator.open() && that.getView().setBusy(true);
                 				that.deleteMaster();
                 			 }
                 		 }),
                 		 endButton: new sap.m.Button({
                 			 text:that._oTextsModel.getResourceBundle().getText("CANCEL"),
                 			 press:function(){this.getParent().close();}
                 		 })
                 	 }).open();
                  }
             },
             {
                 sId : "cancel", // optional
                 sI18nBtnTxt : "Cancel",
                 onBtnPressed : function(evt) {
                	 var self = that;
                	 if(that.isModelChanged()){
                	 new sap.m.Dialog({
                		 icon:"sap-icon://warning2",
                		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
                		 state:"Error",
                		 type:"Message",
                		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE")})],
                		 beginButton: new sap.m.Button({
                			 text:self._oTextsModel.getResourceBundle().getText("OK"),
                			 press: function(){
                				 var contextPath = "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)";
                				 this.getParent().close();
                				 //self.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_DDA('" + self.evaluationId + "')"});
                				 //this tells the detail route that model has to be refreshed due to eval level save

                				 //self.oApplicationFacade.__refreshModel = 1;
                				 self.evaluationId = null;
                				 //window.history.back();
                				 sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: contextPath});
                			 }
                		 }),
                		 endButton: new sap.m.Button({
                			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
                			 press:function(){this.getParent().close();}
                		 })                                           
                	 }).open();
                	 }
                	 else{
                		 var contextPath = "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)";
                		 //this.getParent().close();
                		 self.evaluationId = null;
                		 //window.history.back();
                		 sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"detail", context: contextPath});
                	 }
                 }
            },
               
               ]
		};
	},
	getHeaderFooterOptions : function() {
		return this.oHeaderFooterOptions;
	},
	onBeforeRendering : function() {
	},
	navigateToConfigureChart:function(){
		//var routeObject = {evaluationId: this.evaluationId, viewId: this.viewId+""};
		var contextPath = this.evaluationId + "/" + this.viewId;
		this.evaluationId=null;/*added by chan to invalidate 
		the drilldown confiuration when navigating to addnew view		
		*/
//		this.DDA_MODEL.setViewId(this.viewId);
//		this.getView().setModel(sap.ui.getCore().getModel("SB_DDACONFIG"),"SB_DDACONFIG");
//		this.getView().getModel("SB_DDACONFIG").refresh();
		if(this.navigatingWithinDrilldown) {
			this.oApplicationFacade.navigatingWithinDrilldown = true;
		}
		else {
			this.oApplicationFacade.navigatingWithinDrilldown = undefined;
		}
		sap.suite.ui.smartbusiness.lib.Util.utils.replaceHash({action:"configureSBKPIDrilldown", route:"configureChart", context: contextPath});
		//this.oRouter.navTo('configureChart', routeObject);
	},
	onAddView: function() {
		var self = this;
		var current_filters = this.getView().byId("ddaFilter").getActiveDimensions();
		this.oApplicationFacade.configuratorViewId = this.viewId || this.DDA_MODEL.NEW_VIEWID;
		if(this.warn_header || String(this.init_filters) != String(current_filters)) {
			//navigation warning
	       	 new sap.m.Dialog({
	       		 icon:"sap-icon://warning2",
	       		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
	       		 state:"Error",
	       		 type:"Message",
	       		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE_TO_SAVE_CONFIGURATION")})],
	       		 beginButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("SAVE_AND_CONTINUE"),
	       			 press: function(){
	       				var inDialog = true;
	       				self.warn_header = false;
	       				self.SaveConfig(inDialog);
	       				self.viewId=self.DDA_MODEL.NEW_VIEWID;
	       				self.DDA_MODEL.setViewId(self.viewId);
	       				self.bindUiToModel();
	       				this.getParent().close();
	       				self.navigateToConfigureChart();
	       			 }
	       		 }),
	       		 endButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
	       			 press:function(){this.getParent().close();}
	       		 })                                           
	       	 }).open();
		} else {
			/*
			 * __contextViewId is stored so that on pressing 'Cancel' from 
			 * configureNewView, the context is not lost.
			 * Overwritten on success of 'Save'.
			 */
			this.oApplicationFacade.__contextViewId = this.viewId;
			this.viewId=this.DDA_MODEL.NEW_VIEWID;
			this.DDA_MODEL.setViewId(this.viewId);
			this.bindUiToModel();
			this.navigateToConfigureChart();
		}
	},

	onEditView:function(){
		var self = this;
		var current_filters = this.getView().byId("ddaFilter").getActiveDimensions();
		this.oApplicationFacade.configuratorViewId = this.viewId || this.DDA_MODEL.NEW_VIEWID;
		if(this.warn_header || String(this.init_filters) != String(current_filters)) {
			//navigation warning
	       	 new sap.m.Dialog({
	       		 icon:"sap-icon://warning2",
	       		 title:self._oTextsModel.getResourceBundle().getText("WARNING"),
	       		 state:"Error",
	       		 type:"Message",
	       		 content:[new sap.m.Text({text:self._oTextsModel.getResourceBundle().getText("ARE_YOU_SURE_TO_SAVE_CONFIGURATION")})],
	       		 beginButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("SAVE_AND_CONTINUE"),
	       			 press: function(){
	       				 var inDialog = true;
	       				 self.warn_header = false;
	       				 this.getParent().close();
	       				 self.SaveConfig(inDialog);
	       				 self.navigateToConfigureChart();
	       			 }
	       		 }),
	       		 endButton: new sap.m.Button({
	       			 text:self._oTextsModel.getResourceBundle().getText("CANCEL"),
	       			 press:function(){this.getParent().close();}
	       		 })                                           
	       	 }).open();
		} else {
			this.navigateToConfigureChart();
		}
	},
	tileTypeMapping:{
				NT : "Numeric",
                AT : "Bullet",
                CT : "Comparison",
                TT : "AreaChart",
                CM:"MeasureComparison"
                /*HT : "HarveyBall" */
	},
	_getSelectedTile:function(){
		var tiles=this.byId("tileContainer").getItems()||[];
		return {
			tile:tiles[this._selectedTileIndex],
			index:this._selectedTileIndex
		}
		
	},
	_setSelectedTile:function(i){
		this._selectedTileIndex=i;
		var tiles=this.byId("tileContainer").getItems()||[];
		for(j=0;j<tiles.length;j++){
			tiles[j].getTileControl().removeStyleClass("mySelectedStyle");
		}
		this.byId("deleteTile").setEnabled(i!=-1);
		if(i!=-1){
			tiles[i].getTileControl().addStyleClass("mySelectedStyle");
		}
		/*
		if(i!=-1){
			tiles[i].getTileControl().addStyleClass("mySelectedStyle");
			var contextData=tiles[i].getBindingContext("SB_DDACONFIG").getObject();
			this.byId("deleteTile").setEnabled(!(contextData.VISUALIZATION_TYPE=="NT" && contextData.EVALUATION_ID==contextData.REFERENCE_EVALUATION_ID));			
		}else{
			this.byId("deleteTile").setEnabled(i!=-1);
		}
		*/
		this.byId("leftMoveArrow").setEnabled((i!=-1)&&i!=0);
		this.byId("rightMoveArrow").setEnabled((i!=-1)&& i!=tiles.length-1);
	},
	deleteTile:function(){
		var that = this;
		var confirmDialog = new sap.m.Dialog({
			title:"Delete",
			type:"Message",
			content:[new sap.m.Text({text:that.oApplicationFacade.getResourceBundle().getText("DELETE_CONFIRMATION")})],
			beginButton: new sap.m.Button({
				text:"Ok",
				press: function(oEvent){
					confirmDialog.close();
					var tileRef=that._getSelectedTile().tile;
					var visibleHeaderTiles=tileRef.getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE;
					visibleHeaderTiles.splice(that._getSelectedTile().index,1);
					that._setSelectedTile(-1);
					that.refreshTileBindings();
				}
			}),
			endButton: new sap.m.Button({
				text:that.oApplicationFacade.getResourceBundle().getText("CANCEL"),
				press:function(){
					confirmDialog.close();}
			})
		});
		confirmDialog.open(); 
	},
	initializeTileHeader:function(){
		var that=this;
		var tileContainer=this.byId("tileContainer");
		tileContainer.bindAggregation("items",{
				path:"SB_DDACONFIG>/HEADERS_VISIBLE",
				factory:function(sId,oBindingContext){
					var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
					return new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
						evaluationId:that.evaluationId,
						mode:"DUMMY",
						header:	"{SB_DDACONFIG>TITLE}",
						subheader: "{SB_DDACONFIG>SUBTITLE}"
					}).addStyleClass("drilldownKpiTiles").attachBrowserEvent("click",function(evt){
								var visibleHeaderArray = this.getParent().getAggregation("content");
								that._setSelectedTile(visibleHeaderArray.indexOf(this));
					});
				},
				//filters:[filter]
			});
	},
	initializeAddTileDialog:function(){
		var that=this;
		this._tileEvaluationList=sap.ui.core.Fragment.byId("addRelatedTilesDialog","evaluationTilesList");
		var tileTypeText={
			NT : "NUMBER_TILE",
	        AT : "ACTUAL_VS_TARGET_TILE",
	        CT : "COMPARISON_TILE",
	        TT : "TREND_TILE",
	        CM:"COMPARISON_MM_TILE",
	        HT : "HARVEY_BALL_TILE"
		};
		var sorter1=new sap.ui.model.Sorter('SB_DDACONFIG>GROUPING_TITLE',false,function(oContext){
			return oContext.getProperty('GROUPING_TITLE');
		});
		var sorter2=new sap.ui.model.Sorter('SB_DDACONFIG>VISUALIZATION_TYPE_INDEX',false);
		this._tileEvaluationList.bindAggregation("items",{
			path:"SB_DDACONFIG>/HEADERS",
			factory:function(sId,oBindingContext){
				var type=oBindingContext.getProperty("VISUALIZATION_TYPE");
				var miniTile=new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
					evaluationId:that.evaluationId,
				 	mode:"DUMMY",
				 	header:	"TITLE",
					subheader: "SUBTITLE",
					contentOnly:true
				});
				var miniTileShadow=new sap.m.HBox({
					width:"100%",
					justifyContent:"SpaceAround",
					items:[new sap.suite.ui.smartbusiness.tiles[that.tileTypeMapping[type]]({
						evaluationId:that.evaluationId,
					 	mode:"DUMMY",
					 	header:	"TITLE",
						subheader: "SUBTITLE",
						contentOnly:true
					})]
				});
				var tilePane= new sap.m.HBox({
					justifyContent:"Start",
					width:"98%",
					items:[miniTile,new sap.m.Label({
			        		 text:{
			        			 path:"SB_DDACONFIG>VISUALIZATION_TYPE",
			        			 formatter:function(s){return that._oTextsModel.getResourceBundle().getText(tileTypeText[s]);}
			        		 }
		        	 		})]
				});
				return new sap.m.CustomListItem({
					type:(type=='NT'||type=='AT')?'Active':'Navigation',
					press:function(){
						var oBindingcontext=this.getBindingContext('SB_DDACONFIG').getObject();
						var vizualizationType=oBindingcontext.VISUALIZATION_TYPE;
						oBindingcontext['visible']=true;
						if(vizualizationType=='NT'||vizualizationType=='AT'){
							that.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE.push(that._cloneObj(oBindingcontext));
							that.onAddTileOk();
							that.refreshTileBindings();
						}else{
							that._addRelatedTilesDialog.close();
							try{
								var index=vizualizationType=='CM'?1:(vizualizationType=="HT")?2:0;
								that._configureTileDialog.getContent()[index].getItems()[1].removeAllContent();
								that._configureTileDialog.getContent()[index].getItems()[1].addContent(miniTileShadow);	
								
							}catch(e){}
							 that._configureTileDialog.bindElement('SB_DDACONFIG>'+this.getBindingContextPath());
							 that._configureTileDialog.open();
								var oI18nModel = that.getView().getModel("i18n");
								
								 var otemplate = new sap.ui.core.Item({
				                        key: "_none^",
				                        text: oI18nModel.getResourceBundle().getText("SELECT_NONE"),

				                   });
								 
								
								 
								 if(!sap.ui.core.Fragment.byId("configureTileDialog","measuresForTile3").getItemByKey("_none^"))

								 sap.ui.core.Fragment.byId("configureTileDialog","measuresForTile3").insertItem(otemplate,"0");
				
						}
					},
					content:[new sap.m.HBox({
						justifyContent:"SpaceAround",
						items:[tilePane]
					})]
				});
			},
			sorter:[sorter1,sorter2]
		});
	},
	onMiniChartConfigureOk:function(){
		var oBindingcontext=this._configureTileDialog.getBindingContext("SB_DDACONFIG").getObject();
		oBindingcontext['visible']=true;
		this.getView().getModel("SB_DDACONFIG").getData().HEADERS_VISIBLE.push(this._cloneObj(oBindingcontext));
		this.onAddTileOk();
		this.refreshTileBindings();
	},
	showConfigureTileMeasure:function(sVal){
		return sVal=='CM';
	},
	showConfigureTileDimension:function(sVal){
		return sVal=='CT'|| sVal=='TT';
	},
	showConfigureTileSortOrder:function(sVal){
		return sVal=='CT';
	},
	showThirdMeasure:function(sVal){
		return !!sVal;
	},
	showHarveyConfigurator: function (tileType){
		return tileType=="HT";
	},
	harveyTotalMeasureVisibility:function(tileType,bIsKpiFractionMeasure){
		return tileType=="HT" && bIsKpiFractionMeasure;
	},
	harveyFilterVisibility:function(tileType,bIsKpiTotalMeasure){
		return  tileType=="HT" && bIsKpiTotalMeasure;
	},
	harveyFilterOptionVisibility:function(tileType,bIsKpiTotalMeasure,selectedDimension){
		return  tileType=="HT" && bIsKpiTotalMeasure && selectedDimension;
	},
	betweenOperatorLabelVisibility:function(operator){
		return operator=="BT";
	},	
	refreshTileBindings:function(){
		try{
			var tileContainer=this.byId("tileContainer");
			tileContainer.getModel("SB_DDACONFIG").refresh();
		}catch(e){}
	},
	_refreshEvaluationsBinding:function(){
//		var siblingEvaluations=sap.ui.core.Fragment.byId('addRelatedTilesDialog','siblingEvaluations');
//		var associatedEvaluations=sap.ui.core.Fragment.byId('addRelatedTilesDialog','associatedEvaluations');
//		if(siblingEvaluations.getItems().length){
//			siblingEvaluations.updateItems();
//		}
//		if(associatedEvaluations.getItems().length){
//			associatedEvaluations.updateItems();
//		}
	},
	onAddTileOk:function(oEvent){
		this.takeConfigSnapShot();
		this._setSelectedTile(-1);
		this.refreshTileBindings();
		try{
			this._configureTileDialog.close();
			this._addRelatedTilesDialog.close();	
		}catch(e){}
		this._refreshEvaluationsBinding();
		//to know if navigation warning is to be shown on not.
		this.warn_header = true;
	},
	onAddTileCancel:function(oEvent){
		this.restoreFromConfigSnapShot();
		this._setSelectedTile(-1);
		this.refreshTileBindings();
		try{
			this._configureTileDialog.close();
			this._addRelatedTilesDialog.close();	
		}catch(e){}
		this._refreshEvaluationsBinding();
	},
    _getEvalData:function(sId){
		try{
    		var evalData=sap.suite.ui.smartbusiness.lib.Util.kpi.getEvaluationById({
 	           id : sId, cache : true, filters:false, thresholds:false, getDDAEvaluation:true
 	        });
    		return evalData;
		}catch(e){
			return {};
		}
    },
	createTileMenuForCurrentEvaluation:function(evalId){
		var that=this;
		 var tileOrder = ['NT', 'AT', 'CT', 'TT', 'CM'];
		 var evalData = this._getEvalData(evalId);
		 var measures = sap.suite.ui.smartbusiness.lib.Util.odata.getAllMeasures(evalData.ODATA_URL,evalData.ODATA_ENTITYSET) || [];
		 var dimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET) || [];
		 var filterableDimensions = sap.suite.ui.smartbusiness.lib.Util.odata.getAllFilterableDimensions(evalData.ODATA_URL,evalData.ODATA_ENTITYSET)||[] ;
		 
		var model=this.getView().getModel("SB_DDACONFIG");
		if(!model.getProperty("/HEADER_EVALUATIONID")[evalId]){
			model.getProperty("/HEADER_EVALUATIONID")[evalId]=true;
			var header=model.getProperty("/HEADERS");
			for(var each in this.tileTypeMapping){
				header.push({
                        EVALUATION_ID : this.evaluationId,
                        CONFIGURATION_ID : this.viewId,
                        REFERENCE_EVALUATION_ID : evalId,
                        VISUALIZATION_TYPE : each,
                        VISUALIZATION_TYPE_INDEX:tileOrder.indexOf(each),
                        VISUALIZATION_ORDER : 1,
                        ALL_DIMENSIONS: dimensions,                        
                        DIMENSION : dimensions[0]||'',
                        SORT_BY: '',
                        SORT_ORDER:'MD',
                        MEASURE1	:measures[0],
                        MEASURE2	:measures[1]||measures[0],
                        MEASURE3	:measures[2]||"",
                        COLOR1:"Good",
                        COLOR2:"Critical",
                        COLOR3:"Error",
                        DIMENSION_COLOR : "Neutral",
                        HARVEY_FILTERS:[{
				    	   					NAME:filterableDimensions[0],
				    	   					OPERATOR:"EQ",
				    	   					VALUE_1:[],
				    	   					VALUE_2:[]
				       					}],
				       	HARVEY_TOTAL_MEASURE: measures[0],
                        FILTERABLE_DIMENSIONS: filterableDimensions,
				       	IS_HARVEY_FRACTION_KPIMEASURE : true,
				       	IS_HARVEYMEASURE_KPIMEASURE : false,
				       	ALL_MEASURES:measures,
                        VISIBILITY : 1,
                        visible : false ,
                        TITLE : evalData.INDICATOR_TITLE,
                        SUBTITLE : evalData.TITLE,
                        INDICATOR: evalData.INDICATOR
				});
			}
		}
	},
	openEvaluationsDialog:function(){
		//this.openMinichartsCancel();
		this._addRelatedTilesDialog.open();
		sap.ui.core.Fragment.byId('addRelatedTilesDialog','showCurrentKpiEvals').firePress();
		
	},
	evaluationGroupTextFormatter:function(context){
		return {text:context.getProperty("GROUPING_TEXT"),key:context.getProperty("GROUPING_TEXT")};
	},
	relatedEvalGroupTextFormatter:function(context){
		var rBundle=this.getView().getModel("i18n").getResourceBundle();
		return {text: (rBundle.getText("KPI")+": " + context.getProperty("INDICATOR")), key: context.getProperty("INDICATOR")}; 
	},
	
	showCurrentKPIEvals:function(){
		var that=this;
		var oModel=this.getView().getModel('SB_DDACONFIG');
		var rBundle=this.getView().getModel("i18n").getResourceBundle();
		if(!oModel.getProperty('/SIBLING_EVALUATIONS').length){
			var tmp=sap.suite.ui.smartbusiness.lib.Util.kpi.getSiblingEvaluations({
		           indicator : oModel.getProperty('/INDICATOR'),
		           id:this.evaluationId,
		           cache : false,
		           filters: false,
		           thresholds: false,
		           getDDAEvaluation: true
		        });
            tmp.forEach(function(s){
        		that.createTileMenuForCurrentEvaluation(s.ID);
            });
            oModel.getData().SIBLING_EVALUATIONS=tmp;
            oModel.getData().HEADERS.forEach(function(s){
    			var prefix=s.REFERENCE_EVALUATION_ID==s.EVALUATION_ID?'('+that._oTextsModel.getResourceBundle().getText('CURRENT_EVALUATION')+')':'';
    			s.GROUPING_TITLE=prefix+s.TITLE+" "+s.SUBTITLE;
            });
		}
		this.takeConfigSnapShot();
		var binding=this._tileEvaluationList.getBinding("items");
		var currentIndicator=this.getView().getModel("SB_DDACONFIG").getProperty("/INDICATOR");
		binding.filter(new sap.ui.model.Filter("INDICATOR",sap.ui.model.FilterOperator.EQ,currentIndicator));
		oModel.refresh();
	},
	showAssociatedEvals:function(){
		var that=this;
		var oModel=this.getView().getModel('SB_DDACONFIG');
		if(!oModel.getProperty('/ASSOCIATED_EVALUATIONS').length){
			oModel.getData().ASSOCIATED_EVALUATIONS=sap.suite.ui.smartbusiness.lib.Util.kpi.getAssociatedEvaluations({
		           indicator : oModel.getProperty('/INDICATOR'),
		           id:this.evaluationId,
		           cache : true
		        });
			oModel.getData().ASSOCIATED_EVALUATIONS.forEach(function(s){
        		that.createTileMenuForCurrentEvaluation(s.ID);
			});
            oModel.getData().HEADERS.forEach(function(s){
    			s.GROUPING_TITLE=s.TITLE+" "+s.SUBTITLE;
            });
		}
		this.takeConfigSnapShot();
		var binding=this._tileEvaluationList.getBinding("items");
		var currentIndicator=this.getView().getModel("SB_DDACONFIG").getProperty("/INDICATOR");
		binding.filter(new sap.ui.model.Filter("INDICATOR",sap.ui.model.FilterOperator.NE,currentIndicator));
		oModel.refresh();
		//sap.ui.core.Fragment.byId('addRelatedTilesDialog','siblingEvaluations').setVisible(false);
		//sap.ui.core.Fragment.byId('addRelatedTilesDialog','associatedEvaluations').setVisible(true);
	},
	
	formatColorForMap : function(main_measure,threshold_measure){
		var semanticColorOption = this.dda_config.chartConfig.colorScheme.toUpperCase();
		var goal_type = this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE;

		if(semanticColorOption=="AUTO_SEMANTIC" && threshold_measure){
			if(goal_type == "MA" || goal_type == "RA"){
				if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
				}
				else if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
				}
			}
			else if(goal_type == "MI"){
				if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiPositive')); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));	//neutral
				}
				else if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNegative'));//bad
				}
			}
		}
		else if(semanticColorOption=="NONE" && threshold_measure){
			if(goal_type == "MA" || goal_type == "RA"){
				if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
			else if(goal_type == "MI"){
				if(main_measure < threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"1"); //good
				}
				else if(main_measure == threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.60");	//neutral
				}
				else if(main_measure > threshold_measure){
					return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'),"0.30");//bad
				}
			}
		}
		else{
			return sap.suite.ui.smartbusiness.lib.Util.utils.convertHexToRgba(sap.ui.core.theming.Parameters.get('sapUiNeutral'));
		}
	},
	
	formatCode : function(code){
		return code;
	},
	
	refreshChart: function() {
		
		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_select_vbox");
		var choroplethMapContainer = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;
		this.oChartDataModel = new sap.ui.model.json.JSONModel() ;
		this.oChartData = [] ;
		
		var tmpData = this._oModel;
		this.dda_config = {} ;
		this.dda_config.chartConfig = {
				mode: tmpData.DATA_MODE || "DUMMY",
				title: "",
				dataLimit: tmpData.DATA_LIMIT || null,	
				dataLimitations: tmpData.DATA_LIMITATIONS || false,
				type: (tmpData.CHART_TYPE).toUpperCase() || "BAR",
				axis: tmpData.AXIS_TYPE || "SINGLE",
				value: tmpData.VALUE_TYPE || "ABSOLUTE",
				colorScheme: tmpData.COLOR_SCHEME || "NONE",
				thresholdMeasure: tmpData.THRESHOLD_MEASURE || ""
		} ;

		this.dda_config.columnsConfig = [] ;
		for(var i=0;i<tmpData.COLUMNS.length;i++) {
			this.dda_config.columnsConfig.push({
				name: tmpData.COLUMNS[i].NAME,
				type: tmpData.COLUMNS[i].TYPE,
				visibility: tmpData.COLUMNS[i].VISIBILITY || "BOTH",
				sortOrder: tmpData.COLUMNS[i].SORT_ORDER || "NONE",
				sortBy: tmpData.COLUMNS[i].SORT_BY || "",
				axis: tmpData.COLUMNS[i].AXIS || 1,
				stacking: tmpData.COLUMNS[i].STACKING || 0,
				color:tmpData.COLOR_SCHEME=="MANUAL_NON_SEMANTIC"?tmpData.COLUMNS[i].COLOR1:tmpData.COLOR_SCHEME=="MANUAL_SEMANTIC"?tmpData.COLUMNS[i].COLOR2:""
			}) ;
		}			

		this.oColumns = [] ;
		this.oDimensions = [] ;
		this.oMeasures = [] ;
		this.dimNameArray = [] ;
		this.msrNameArray = [] ;
		this.chartDimensions = [] ;
		this.chartDimNames = [] ;
		this.chartMeasures = [] ;
		this.chartMsrNames = [] ;
		this.tableDimensions = [] ;
		this.tableDimNames = [] ;
		this.tableMeasures = [] ;
		this.tableMsrNames = [] ;
		for(var i=0;i<this.dda_config.columnsConfig.length;i++) {
			this.oColumns.push(this.dda_config.columnsConfig[i]);
			if((this.dda_config.columnsConfig[i].type).toUpperCase() === "DIMENSION") {
				this.oDimensions.push(this.dda_config.columnsConfig[i]) ;
				this.dimNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartDimensions.push(this.dda_config.columnsConfig[i]) ;
					this.chartDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableDimensions.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableDimNames.push(this.dda_config.columnsConfig[i].name) ;
			    }	
			} else if((this.dda_config.columnsConfig[i].type).toUpperCase() === "MEASURE") {
				this.oMeasures.push(this.dda_config.columnsConfig[i]) ;
				this.msrNameArray.push(this.dda_config.columnsConfig[i].name) ;
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "CHART") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
					this.chartMeasures.push(this.dda_config.columnsConfig[i]) ;
					this.chartMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
				if(((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "TABLE") || ((this.dda_config.columnsConfig[i].visibility).toUpperCase() === "BOTH")) {
			    	this.tableMeasures.push(this.dda_config.columnsConfig[i]) ;
			    	this.tableMsrNames.push(this.dda_config.columnsConfig[i].name) ;
			    }
			}
			 
		}
		
		this.stacking = this.getStacking(this.chartMeasures,this.chartDimensions);                        // TODO      workaround for stacking .
		this.isStackMsr = false;
		this.isStackDim = false;
		if(this.stacking.isEnabled && (this.stacking.type == "M"))                                     
			this.isStackMsr = true;
		else if(this.stacking.isEnabled && (this.stacking.type == "D")) 
			this.isStackDim = true;
		
		//getting labels , texts etc.
		try {
			var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(this._oModel.QUERY_SERVICE_URI,this._oModel.QUERY_ENTITY_SET);
		}
		catch(e) {
			jQuery.sap.log.error("Failed to instantiate the odata model");
			throw e;
		}
        this.column_labels_mapping = mProperties.getLabelMappingObject();
        this.dimension_text_property_mapping = mProperties.getTextPropertyMappingObject();
        this.measure_unit_property_mapping = mProperties.getUnitPropertyMappingObject();

		// create viz chart :
		vizVbox.setVisible(true);
		choroplethVbox.setVisible(false);
		// get data for chart.....................
		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			this.oChartData = this.getDummyDataForChart(this.dimNameArray,this.msrNameArray) ;
			this.oChartDataModel.setData({businessData: oController.oChartData}) ;
		} else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures) ;           // TODO        P.S.  write code for avoiding multiple calls - caching .
		} 
		
		if((this.dda_config.chartConfig.type).toUpperCase() == "CHOROPLETH"){
			this.plotMapForChoropleth();
		}
		else{
			this.createVizChart(this.chartDimensions,this.chartMeasures);	
		}		
		
		// show or hide legend 
        this.showChartLegendIfApplicable(this.chartDimNames,this.chartMsrNames);	
		
	},  
	
	plotMapForChoropleth : function(){
		var oController = this ;
		var vizVbox = this.getView().byId("viz_vbox");
		var choroplethVbox = this.getView().byId("choropleth_select_vbox");
		var choroplethMapContainer = this.getView().byId("choropleth_vbox");
		var geoDimensionForChoropleth,mainMeasureForChoropleth,thresholdMeasureForChoropleth = null;

		vizVbox.setVisible(false);
		choroplethVbox.setVisible(true);
		choroplethMapContainer.removeAllItems();
		this.oModelForMap = new sap.ui.model.json.JSONModel();

		var items = this.getView().getModel("SB_DDACONFIG").getData().COLUMNS;
		var itemsLength = items.length;
		var measuresArray = [];
		for(i=0;i<itemsLength;i++){
			if(items[i].TYPE=='MEASURE'){
				measuresArray.push(items[i]);
			}
			else if(items[i].TYPE=='DIMENSION'){
				this.getView().getModel("SB_DDACONFIG").getData().GEO_DIMENSION = items[i].NAME;
			}
		}
		this.getView().getModel("SB_DDACONFIG").getData().MAIN_MEASURE = measuresArray[0].NAME;

		if((this.dda_config.chartConfig.mode).toUpperCase() === "DUMMY") {
			geoDimensionForChoropleth = "CustomerCountry";
			mainMeasureForChoropleth = "DaysSalesOutstanding";
			thresholdMeasureForChoropleth = "BestPossibleDaysSalesOutstndng";

			var oData = 
			{
					businessData :
						[
						 { "CustomerCountry": "IT","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "IN","DaysSalesOutstanding" : 500,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "RU","DaysSalesOutstanding" : 40,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AU","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "BR","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "NO","DaysSalesOutstanding" : 200,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "AR","DaysSalesOutstanding" : 130,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "ZA","DaysSalesOutstanding" : 125,"BestPossibleDaysSalesOutstndng" : 125},
						 { "CustomerCountry": "CA","DaysSalesOutstanding" : 75,"BestPossibleDaysSalesOutstndng" : 125}
						 ],
			};
			this.oModelForMap.setData(oData);
		}
		else if((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") {
			geoDimensionForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().GEO_DIMENSION;
			mainMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().MAIN_MEASURE;
			thresholdMeasureForChoropleth = oController.getView().getModel('SB_DDACONFIG').getData().THRESHOLD_MEASURE;

			this.getRuntimeChartData(this.dimNameArray,this.msrNameArray,this.oDimensions,this.oMeasures);
		}
		//sap.ui.vbm.AnalyticMap.GeoJSONURL  =  jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.lib")+"/L0.json";
		choroplethMapContainer.addItem(new sap.ui.vbm.AnalyticMap({
			width : "100%",
			height : "550px",
			regions : {
				path : "mapModel>/businessData",
				template: new sap.ui.vbm.Region({
					code: {
						path: "mapModel>"+geoDimensionForChoropleth,
						formatter:jQuery.proxy(oController.formatCode,oController)
					},
					color: {
						parts:[{
							path: "mapModel>"+mainMeasureForChoropleth
						},
						{
							path: "mapModel>"+thresholdMeasureForChoropleth
						}], 
						formatter:jQuery.proxy(oController.formatColorForMap,oController)
					},
				})
			}
		}).addStyleClass('choroplethMap')).setModel(this.oModelForMap,"mapModel");

		return;
	},	

	showChartLegendIfApplicable : function(dimensions, measures) {
   	 	var that = this;
   	 	var otoolbar = this.getView().byId("vizChartContainer") ;
   	 	
        var chtype = this.dda_config.chartConfig.type ;           
        var isStackApplied = (((chtype == "BAR") || (chtype == "COLUMN")) && (this.isStackDim) && (this.getDimensionToBeStacked(that.chartDimensions)) && (dimensions.length > 1)) ? true : false ;        
                
		if((measures.length > 1) || (isStackApplied)) {             
			otoolbar.setShowLegend(true);
		} else {
			otoolbar.setShowLegend(false);
		}
		
    },
    
    getChartPercentFormatter: function(isStandard){
 		//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
 		function isNumber(n) {
 			return !isNaN(parseFloat(n)) && isFinite(n);
 		}
 		var formatterConstructor={style:isStandard?'standard':'short'};
 		//if(dec||dec==0){formatterConstructor["shortDecimals"]=dec;}
 		var chartFormatter = sap.ui.core.format.NumberFormat.getPercentInstance(formatterConstructor);
 		return function(s){
 			return isNumber(s)?chartFormatter.format_percentage(s):s;
 		};
     },
	
	getStacking: function(measures,dimensions) {													    // TODO
		var oStacking = {};
		oStacking.isEnabled = false;
		oStacking.type = "none";
		
		for(var i=0;i<measures.length;i++) {
			if(measures[i].stacking === 1) {
				oStacking.isEnabled = true;
				oStacking.type = "M";
			}				
		}
		if(!(oStacking.isEnabled)) {
			for(var i=0;i<dimensions.length;i++) {
				if(dimensions[i].stacking === 1) {
					oStacking.isEnabled = true;
					oStacking.type = "D";
				}				
			}
		}
		
		return oStacking;
	},
	
	setStacking: function(isEnabled,type,columns) {																// TODO     type : M for measure , D for dimension and N for none .
		var that = this;
		if(isEnabled) {
			if(type == "M") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 1;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 0;
					}	
				}
			} else if(type == "D") {
				for(var i=0;i<columns.length;i++) {
					if((columns[i].TYPE).toUpperCase() === "MEASURE") {
						columns[i].STACKING = 0;
					} else if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
						columns[i].STACKING = 1;
					}				
				}
			}
		} else {
			for(var i=0;i<columns.length;i++) {
				columns[i].STACKING = 0;
			}
		}		
	},
	
	getDimensionToBeStacked: function(dimensions) {
		var oDim = null;
		for(var i=0;i<dimensions.length;i++) {
			if(dimensions[i].axis === 2) {
				oDim = dimensions[i];
				break;
			}
		}
		
		return oDim ;
	},
	
	setDimensionToBeStacked: function(columns,stackDim) {
		if(stackDim) {
			for(var i=0;i<columns.length;i++) {
				if((columns[i].TYPE).toUpperCase() === "DIMENSION") {
					columns[i].AXIS = 1;
					if(columns[i].NAME === stackDim) {
						columns[i].AXIS = 2;
					}
				}
			}
		}
	},
	
	updateColumnProperty: function(columns,name,property,value) {
		for(var i=0;i<columns.length;i++) {
			if(columns[i].NAME === name) {
				(columns[i])[property] = value;
				break;
			}
		}
	},
	
	getMeasuresByAxis: function(columns) {
		var dualMsr = {};
		dualMsr.axis1 = {};
		dualMsr.axis1.objArr = [];
		dualMsr.axis1.nameArr = [];
		dualMsr.axis2 = {};
		dualMsr.axis2.objArr = [];
		dualMsr.axis2.nameArr = [];
		
		for(var i=0;i<columns.length;i++) {
			if(columns[i].axis === 1) {
				dualMsr.axis1.objArr.push(columns[i]);
				dualMsr.axis1.nameArr.push(columns[i].name);
			} else if(columns[i].axis === 2) {
				dualMsr.axis2.objArr.push(columns[i]);
				dualMsr.axis2.nameArr.push(columns[i].name);
			}
		}
		return dualMsr;
	},
	
	/*
	 * 2 Table related methods follow - same as runtime methods. 
	 */
	_getValueState : function(actualValue, thresholdValue) {
        if(!this.EVALUATION.isTargetKpi()) {
            if(actualValue < thresholdValue) {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Error : sap.ui.core.ValueState.Success;
            } else if (actualValue == thresholdValue) {
                return sap.ui.core.ValueState.None;
            } else {
                return this.EVALUATION.isMaximizingKpi() ? sap.ui.core.ValueState.Success : sap.ui.core.ValueState.Error;
            }
        } else {
            return sap.ui.core.ValueState.None;
        }
    },
    _getTableCell : function(originalMeasure, thresholdMeasure) {
        var that = this;
        if(thresholdMeasure && (originalMeasure !== thresholdMeasure)) {
            return new sap.m.ObjectNumber({
                number: {
                    path: originalMeasure
                },
                state : {
                    parts : [
                             {path : originalMeasure},
                             {path : thresholdMeasure}
                    ],
                    formatter : function(oMeasureValue, tMeasureValue) {
                        try {
                            oMeasureValue = window.parseFloat(oMeasureValue);
                            tMeasureValue = window.parseFloat(tMeasureValue);
                            return that._getValueState(oMeasureValue, tMeasureValue);
                        }catch(e) {
                            return sap.ui.core.ValueState.None;
                        }
                    }
                }
            });
        } else {
            return new sap.m.Label({
                text : {
                    path : originalMeasure
                }
            })
        }
    },
	
	formatChartNumbers: function (value) {
		//var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		if (isNumber(value)) {
			if (!this.chartFormatter) {
				var dec = 1;                              //   TODO            numberOfDecimals
				if (dec || dec==0){
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short',
						minFractionDigits: dec,
						maxFractionDigits: dec
					});
				}

				else{
					this.chartFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({
						style: 'short'
					});
				}
			}
			value = this.chartFormatter.format(value);
		}

		return value;
	},
	pseudoChartFormatter: function (value) {
		return value;
	},
	
	getRuntimeChartData: function(dimensions,measures) {                          // TODO
		var that = this;
		
		var chartToolbarRef = this.getView().byId("vizChartContainer");
		chartToolbarRef.setBusy(true);
		
		this.COLUMNS_SORT = [];
        for(var i=0;i<that.oColumns.length;i++) {
            if(that.oColumns[i].sortBy && that.oColumns[i].sortOrder) {
                if((that.oColumns[i].sortOrder).toUpperCase() == "ASC" || (that.oColumns[i].sortOrder).toUpperCase == "DESC") {
                    this.COLUMNS_SORT.push({
                        name : that.oColumns[i].sortBy,
                        order : that.oColumns[i].sortOrder
                    });
                }
            }
        }
        
        try{
			var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
		        serviceUri : this._oModel.QUERY_SERVICE_URI,
		        entitySet : this._oModel.QUERY_ENTITY_SET,
		        dimension : dimensions,
		        measure : measures,
		        filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS.results,
		        sort : this.COLUMNS_SORT,
	            dataLimit : (((this.dda_config.chartConfig.dataLimitations) && (this.dda_config.chartConfig.dataLimit > 0)) ? (this.dda_config.chartConfig.dataLimit) : null),
	            //includeDimensionKeyTextAttribute : true/false, default true,
	            //includeMeasureRawFormattedValueUnit : true/false, default True,
		    });
		    
		    oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
		    	if(data.results.length) {
		    		that.oChartData = data.results ;		
					that.oChartDataModel.setData({businessData: that.oChartData});
					if((that.getView().getModel('SB_DDACONFIG').getData().CHART_TYPE).toUpperCase()=='CHOROPLETH'){
						that.oModelForMap.setData({businessData: that.oChartData});
					}	
				} else {
					jQuery.sap.log.info("Chart data Table Returned Empty Results");
					that.oChartData = [];		
					that.oChartDataModel.setData({businessData: that.oChartData}) ;
				}
		    	chartToolbarRef.setBusy(false);
		    }, function() {
		    	jQuery.sap.log.error("Error fetching data : "+oUriObject.uri);
		    	that.oChartData = [];		
				that.oChartDataModel.setData({businessData: that.oChartData}) ;
				chartToolbarRef.setBusy(false);
		    });
		} catch(exp){
			jQuery.sap.log.error(exp.toString());
			that.oChartData = [];		
			that.oChartDataModel.setData({businessData: that.oChartData}) ;
			chartToolbarRef.setBusy(false);
		}
	},
	
	getDummyDataForChart: function(dim,measure,MAX_D,DATA_SZ) {
		var that = this;
		MAX_D=MAX_D|| 10;
		DATA_SZ= DATA_SZ||10;
		var chartData=[];
		var tmp,dimension={},p;
		for(var i=0;i<dim.length;i++){
			dimension[dim[i]]=[];
			for(var j=0;j<MAX_D;j++){
				dimension[dim[i]].push(dim[i]+"_"+j);
			}
		}
		p=MAX_D-1;
		for(var i=0;i<DATA_SZ;i++){
			tmp={};
			for(var j=0;j<dim.length;j++){
				tmp[dim[j]]=dimension[dim[j]][p];
			}
			for(var j=0;j<measure.length;j++){
				tmp[measure[j]]=that.chartDummyData.MEASURES[i][j];
			}
			chartData.push(tmp);
			p--;
		}
		chartData=this.sortChartData(chartData,dim);
		return chartData;
	},
	
	sortChartData: function(arr,dim) {
		var data=[];
		arr.sort(function(a,b){
			var i=0;
			while(i<dim.length){
				if(a[dim[i]]>b[dim[i]]){
					return -1;
				}
				else if(a[dim[i]]<b[dim[i]]){
					return 1;
				}
				i++;

			}

		});
		var tmp={};
		for(var i=0,k=0;i<arr.length;i++){
			var s="";
			for(var j=0;j<dim.length;j++){
				s+=arr[i][dim[j]];
			}
			if(!tmp[s]){
				tmp[s]=true;
				data[k++]=arr[i];
			}
		}
		return data;
	},
	
// ** For deleting a view :
	onDeleteView:function(){
		var that = this;
		//navigation warning
		new sap.m.Dialog({
			icon:"sap-icon://warning2",
			title:that._oTextsModel.getResourceBundle().getText("WARNING"),
			state:"Error",
			type:"Message",
			content:[new sap.m.Text({text:that._oTextsModel.getResourceBundle().getText("VIEW_WILL_BE_DELETED")})],
			beginButton: new sap.m.Button({
				text:that._oTextsModel.getResourceBundle().getText("OK"),
				press: function(){
					
					that.warn_header = false;
					var tmpData=that.getView().getModel("SB_DDACONFIG").getData();
					var saveService=sap.suite.ui.smartbusiness.Adapter.getService("DrilldownServices");
					//save headers and filters only if views are already configured
					if(tmpData.ALL_VIEWS.length > 0 ) {
						that.busyIndicator.open() && that.getView().setBusy(true);
						saveService.saveViewConfiguration(that.evaluationId,tmpData,"delete",function(){
							jQuery.sap.log.info("view delete success");
							that.busyIndicator.close() && that.getView().setBusy(false);
							sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("CHART_CONFIG_DELETE_SUCCESS"));						
							for(var i=0,index;i<tmpData.ALL_VIEWS.length;i++){
								if(tmpData.ALL_VIEWS[i].ID == that.viewId) {
									index = i;break;
								}				
							}
							if(index || (index==0)){
								tmpData.ALL_VIEWS.splice(index,1);	
							}
							that.viewId=(tmpData.ALL_VIEWS.length <=0 ? "" : (tmpData.ALL_VIEWS.length == (index)? tmpData.ALL_VIEWS[0].ID : tmpData.ALL_VIEWS[index].ID));					
							that.DDA_MODEL.getConfigurator().removeViewById(tmpData.ID);
							that.DDA_MODEL.setViewId(that.viewId);
							that.bindUiToModel();
							that._oModel = that.DDA_MODEL.getModelDataForDDAConfiguration();
							that.refreshChart();
						},function(e){
							jQuery.sap.log.error(e + " failed");
							//go out of busy mode.
							that.busyIndicator.close() && that.getView().setBusy(false);
							sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
							});
					}
					this.getParent().close();
				}
			}),
			endButton: new sap.m.Button({
				text:that._oTextsModel.getResourceBundle().getText("CANCEL"),
				press:function(){this.getParent().close();}
			})                                           
		}).open();
	
	},
	// --------------------------------------------------------------------------------------------
	
	enableDisableButton : function(arr){
		if(arr.length<1){
			return false;
		}
		else{
			return true;
		}
	},	
	
	//--------------------------------------------------------------------------------------------
//	openminicharts:function(){
//		
//		this._oMiniCharts=sap.ui.xmlfragment("sap.suite.ui.smartbusiness.designtime.drilldown.view.minichartsDialog",this);
//		this._oMiniCharts.setModel(this._oTextsModel,"i18n");
//		
//		this._oMiniCharts.open();
//	},
//	openMinichartsCancel:function(){
//		this._oMiniCharts.close();	
//
//	},
	
	/*
	 * START - SAVE AND DELETE FUNCTIONS 
	 */
	
	deleteMaster: function() {

		var that = this;
		this.warn_header = false;
		var modelData=this.getView().getModel("SB_DDACONFIG").getData();
		var saveService=sap.suite.ui.smartbusiness.Adapter.getService("DrilldownServices");
		this.busyIndicator.open() && this.getView().setBusy(true);
		saveService.saveEvalConfiguration(this.evaluationId,modelData,"delete",function(){
    		  jQuery.sap.log.info("Deleted master configuration for the evaluation");
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  that.DDA_MODEL.removeAllViews();
      		  sap.m.MessageToast.show(that._oTextsModel.getResourceBundle().getText("EVAL_CONFIG_DELETE_SUCCESS"));
              that.oRouter.navTo("detail",{"contextPath" : "EVALUATIONS_MODELER(ID='" + self.evaluationId + "',IS_ACTIVE=1)"});
      		  that.evaluationId=null;
      		  that.oApplicationFacade.__refreshModel = 1;
		},function(e){
      		  jQuery.sap.log.error(e + " failed");
      		  //go out of busy mode.
      		  that.busyIndicator.close() && that.getView().setBusy(false);
      		  sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that._oTextsModel.getResourceBundle().getText("DELETE_ERROR"));
      		  });
	},
	
	/*
	 * END - SAVE AND DELETE FUNCTIONS
	 */

	



/*ENABLE AGGREGATE*/

	fetchAndRenderHeaderRibbon: function(filters) {
		      
	        var self = this;
	        var Evaluation = this.DDA_MODEL.EVALUATION_DATA;
			var mProperties = sap.suite.ui.smartbusiness.lib.Util.odata.properties(Evaluation.ODATA_URL,Evaluation.ODATA_ENTITYSET);
			var MEASURE_UNIT_PROPERTY_MAPPING = mProperties.getUnitPropertyMappingObject();
	        //on init load, take evaluation's filters; otherwise consider combined filters.
			var oUriObject = sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
	        	serviceUri : Evaluation.ODATA_URL,
	            entitySet : Evaluation.ODATA_ENTITYSET,
	            measure: Evaluation.COLUMN_NAME,
	            filter : Evaluation.FILTERS["results"]
	        });
	        oUriObject.model.read(oUriObject.uri, null, null, true, function(data) {
	            if(data) {
	                self.HeaderRibbonModel.setData({data:data.results[0]});
	            } else {
	                jQuery.sap.log.error("Couldn't fetch Aggregate Value. Response was "+data+" for uri : "+oUriObject.uri);
	            }
	        });
	        var kpiMeasureUnitProperty = MEASURE_UNIT_PROPERTY_MAPPING[Evaluation.COLUMN_NAME];
	       
	        
	        var oI18nModel = this.getView().getModel("i18n");
	       
	        this.byId("aggregate_number").bindProperty("text","/data/"+Evaluation.COLUMN_NAME,function(value){
	        	
	        	if(value==""||value==null)
	        		{
	        		value= oI18nModel.getResourceBundle().getText("NO_DATA");
	        		}
	        	return value;
	        	
	        	
	        });
	        
	        if(kpiMeasureUnitProperty) {
	            this.byId("aggregate_number_unit").bindProperty("text", "/data/" + kpiMeasureUnitProperty,function(value){
	            	return value;
	            });
	        }
	       
	        
	    },

	    displayAggregate: function(){

	    	var oI18nModel = this.getView().getModel("i18n");

	    	if(this.byId("enableAggregate").getSelected() === false) {
	    		this.byId("enableAggregate").setText(oI18nModel.getResourceBundle().getText("ENABLE_KPI_AGGREGATE"));
	    		this.byId("enableAggregate").invalidate();
	    	} else if(this.byId("enableAggregate").getSelected() === true) {
	    		this.byId("enableAggregate").setText("");
	    		this.byId("aggregate_number").setText("12,345.67");
	    		this.byId("aggregate_number_unit").setText("EUR");
	    	}

	    },
		
		    isModelChanged : function() {
				this.currentCopy = this._cloneObj(this.getView().getModel("SB_DDACONFIG").getData());
				//check for aggregate number state
				if(this.initCopy.CONFIG.SAP_AGGREGATE_VALUE != this.currentCopy.CONFIG.SAP_AGGREGATE_VALUE){
					return true;
				}
				//check for filters state
				var currentFilters = this.getView().byId("ddaFilter").getActiveDimensions();
				if(currentFilters.length == this.initCopy.FILTERS.length){
					for(var i = 0; i<currentFilters.length; i++){
						if(currentFilters[i] != this.initCopy.FILTERS[i].name){
							return true;
						}
					}
				}
				else{
					return true;
				}
				//check for headers state
				if(this.initCopy.HEADERS_VISIBLE.length == this.currentCopy.HEADERS_VISIBLE.length){
					for(var i = 0; i<this.initCopy.HEADERS_VISIBLE.length; i++){
						delete this.initCopy.HEADERS_VISIBLE[i].ALL_MEASURES;
						delete this.initCopy.HEADERS_VISIBLE[i].ALL_DIMENSIONS;
						delete this.currentCopy.HEADERS_VISIBLE[i].ALL_MEASURES;
						delete this.currentCopy.HEADERS_VISIBLE[i].ALL_DIMENSIONS;
						response = sap.suite.ui.smartbusiness.lib.Util.utils.dirtyBitCheck({oldPayload:this.initCopy.HEADERS_VISIBLE[i],newPayload:this.currentCopy.HEADERS_VISIBLE[i]});
						if((response.updates && response.updates.length) || (response.deletes && response.deletes.length)){
							return true;
						}
					}
				}
				else{
					return true;
				}
				return false;
			},
			
			
//	viz charts code :

	createVizChart: function(dimensions, measures) {
		var that = this;
		var vizChartContainer = this.getView().byId("vizChartContainer");
		vizChartContainer.removeAllContent();
		
		// get table view for the toolbar :
		var vTableFrame = this.getTableForViz(this.tableDimensions, this.tableMeasures);
		
		if((this.dda_config.chartConfig.type).toUpperCase() == "TABLE") {
			vizChartContainer.addContent(vTableFrame); 
			setTimeout(function(){
				vizChartContainer.rerender();	
			},0);			
			//return;
		} 
		else {
			var oViz = this.getVizTypeAndIcon();
			
			var vizChartContainerContent = new sap.suite.ui.commons.ChartContainerContent({
				icon: oViz.icon,
			});
			
			var oVizFrame = new sap.viz.ui5.controls.VizFrame({
				vizType : oViz.type,
				uiConfig : {
					applicationSet : 'fiori'
				},	
			});
			oVizFrame.setVizProperties({
				plotArea: {
					dataLabel : {
						visible: true,
						hideWhenOverlap: false
						//formatString: "#,##0.00"
					}
				},
				legend: {
			        title: {
			        	visible : false
			        	},
			        isScrollable: true
			    },
				title: {
		              visible: false,
		        }
			});		
	
			this.addFeedsToVizFrame(oVizFrame);		
			
			var vDataset = this.create_vizDataset(dimensions, measures);
			oVizFrame.setDataset(vDataset);
			oVizFrame.setModel(this.oChartDataModel);	
			
			var vizChartPopover = new sap.viz.ui5.controls.Popover();
			vizChartPopover.connect(oVizFrame.getVizUid());
			
			this.setAllVizFormatters();		
			
			this.applyColorToViz(oVizFrame);
	
			vizChartContainerContent.setContent(oVizFrame);
			
			vizChartContainer.addContent(vizChartContainerContent); 
			vizChartContainer.addContent(vTableFrame); 
		}
	},
	
	addFeedsToVizFrame: function(oVizFrame) {
		var that=this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
		var dimensionToBeStacked = this.getDimensionToBeStacked(this.chartDimensions);
		
		var dimensionLabels=[],measureLabels=[] ;
		for(var i=0;i<that.chartDimNames.length;i++) {
			dimensionLabels.push(that.column_labels_mapping[that.chartDimNames[i]] || that.chartDimNames[i]);
		}
		for(var i=0;i<that.chartMsrNames.length;i++) {
			measureLabels.push(that.column_labels_mapping[that.chartMsrNames[i]] || that.chartMsrNames[i]);
		}

		if(oChartType == "BUBBLE") {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: [measureLabels[0]]
			}), feedSecondaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: [measureLabels[1]]
			}), feedBubbleWidth = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "bubbleWidth",
				type: "Measure",
				values: [measureLabels[2]]
			}), feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "regionColor",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecondaryValues);
			oVizFrame.addFeed(feedBubbleWidth);
			oVizFrame.addFeed(feedRegionColor);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			var dualMsrAxis1 = [],dualMsrAxis2 = [] ;
			for(var i=0;i<dualMsr.axis1.nameArr.length;i++) {
				dualMsrAxis1.push(that.column_labels_mapping[dualMsr.axis1.nameArr[i]] || dualMsr.axis1.nameArr[i]);
			}
			for(var i=0;i<dualMsr.axis2.nameArr.length;i++) {
				dualMsrAxis2.push(that.column_labels_mapping[dualMsr.axis2.nameArr[i]] || dualMsr.axis2.nameArr[i]);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: dualMsrAxis1
			});
			var feedSecValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "secondaryValues",
				type: "Measure",
				values: dualMsrAxis2
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedSecValues);
			oVizFrame.addFeed(feedAxisLabels);
		} else if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (this.isStackDim) && (dimensionToBeStacked) && (dimensionLabels.length > 1)) {
			var index = dimensionLabels.indexOf(that.column_labels_mapping[(dimensionToBeStacked.name)]);
			if (index > -1) {
			    var oDimStackArray = dimensionLabels.splice(index, 1);
			}
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			}), feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			}); 
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
			if(oDimStackArray && oDimStackArray.length) {
				var feedRegionColor = new sap.viz.ui5.controls.common.feeds.FeedItem({
					uid: "regionColor",
					type: "Dimension",
					values: oDimStackArray
				});			
				oVizFrame.addFeed(feedRegionColor);
			}
		} else {
			var feedPrimaryValues = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "primaryValues",
				type: "Measure",
				values: measureLabels
			});
			var feedAxisLabels = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid: "axisLabels",
				type: "Dimension",
				values: dimensionLabels
			});
			oVizFrame.addFeed(feedPrimaryValues);
			oVizFrame.addFeed(feedAxisLabels);
		}		
	},

	create_vizDataset: function(dimensions,measures){
		var that = this;
		var chtype = this.dda_config.chartConfig.type || "BAR";
		var axisType = this.dda_config.chartConfig.axis || "SINGLE";
		var valueType = this.dda_config.chartConfig.value || "ABSOLUTE";
		var stacking = this.isStackMsr;
		var dimensionToBeStacked = this.getDimensionToBeStacked(dimensions);

		var dataset = new sap.viz.ui5.data.FlattenedDataset({
			data: {
				path: "/businessData"
			}
		});
		// setting dimensions :
		for (var i = 0; i < dimensions.length; i++) {
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			//var oAxis = 1;			
			var dimchart = new sap.viz.ui5.data.DimensionDefinition({
				//axis: oAxis,
				value: "{" + val + "}",
				name: this.column_labels_mapping[dimensions[i].name] || dimensions[i].name
			});
			dataset.addDimension(dimchart);
		}
		// setting measures :
		if ((chtype == "LINE") || (chtype == "COMBINATION") || (chtype == "BUBBLE") || (chtype == "BAR") || (chtype == "COLUMN")) {   

			for (var i = 0; i < measures.length; i++) {
				var val = measures[i].name;
				var msrchart = new sap.viz.ui5.data.MeasureDefinition({
					name: this.column_labels_mapping[val] || val,
					value: "{" + val + "}"
				});
				dataset.addMeasure(msrchart);
			}

		}
		
		return dataset;

	},
	
	applyColorToViz: function(oVizFrame) {
		var that=this;
		var chType = (this.dda_config.chartConfig.type).toUpperCase();
		// implement custom coloring ..............................
		if((chType == "BAR") || (chType == "COLUMN") || (chType == "COMBINATION") || (chType == "LINE")) {
			if((this.dda_config.chartConfig.colorScheme).toUpperCase() === "AUTO_SEMANTIC") {
				var thresholdmsr = this.dda_config.chartConfig.thresholdMeasure || "";                 // || (this.chartMeasures)[0].name ;         // TODO                                       
				var colorArray = [];
				var tmsr = -1;
				for(var i=0;i<this.chartMeasures.length;i++) {
					colorArray.push({color: "sapUiChartPaletteSemanticGoodLight1"}) ;
					if(this.chartMeasures[i].name === thresholdmsr)
						tmsr = i ;
				}
				if(tmsr >= 0)
					colorArray[tmsr].color = "sapUiChartPaletteSemanticNeutral";
				this.applyVizCustomColoring(oVizFrame, this.dda_config.chartConfig.colorScheme, colorArray, thresholdmsr, this.DDA_MODEL.EVALUATION_DATA.GOAL_TYPE) ;
			} else if(((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((this.dda_config.chartConfig.colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {
				this.setVizCustomColors(oVizFrame, this.chartMeasures, this.dda_config.chartConfig.colorScheme) ;
			}
		}	
	},
	
	applyVizCustomColoring: function(oChart, colorScheme, arr, thresholdMeasure, improvementDirection) {                       // pass chart reference , type of coloring , measures obj , threshold measure (if applicable) and improvementDirection(either 0, 1 or 2)
		var that = this;
		var oVizProperties = oChart.getVizProperties();
		
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC") {                                                       
			if(((improvementDirection == "MA") || (improvementDirection == "MI")) && thresholdMeasure) {                                                                
				that.setVizCustomColors(oChart,arr,colorScheme) ;
				oVizProperties.plotArea.dataPointStyle = {
					    rules:
							  [
								{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											}
										} else
											return false;	
									},
									properties: {
									   color:"sapUiChartPaletteSemanticGoodLight1" 
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("GOOD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue!=null && typeof referenceMeasureValue!='undefined') {
											if(oContext[oContext.measureNames] > referenceMeasureValue) {
												if(improvementDirection == "MI")
													return true;
											} else if(oContext[oContext.measureNames] < referenceMeasureValue) {
												if(improvementDirection == "MA")
													return true;
											}
										} else
											return false;	
									},
									properties : {
										color : "sapUiChartPaletteSemanticBadLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("BAD"))
								},{
									callback: function (oContext) {
										var data = oChart.getModel().getData().businessData;
										var bindingContext = oContext._context_row_number;
										var bindingData = data[bindingContext];
										var referenceMeasureValue = bindingData[thresholdMeasure];
										if(referenceMeasureValue==null || typeof referenceMeasureValue=='undefined') {
											jQuery.sap.log.error("Threshold Measure:'"+thresholdMeasure+"' not in Dataset. Error Applying Semantic Color");
											return true;
										} 	
									},
									properties : {
										color : "sapUiChartPaletteSemanticNeutralLight1"
									},
									displayName: (that._oTextsModel.getResourceBundle().getText("NEUTRAL"))
							}],
						 others : {
						  properties: {
							 color: 'sapUiChartPaletteSemanticNeutral'
						  },
						  displayName: (that._oTextsModel.getResourceBundle().getText("THRESHOLD_REFERENCE"))
						 }
					 }
				oChart.setVizProperties(oVizProperties);
			} else {
				jQuery.sap.log.error("Threshold Measure not available or Goal type is RA . Error Applying Semantic Color");
			}
		} else if(((colorScheme).toUpperCase() === "MANUAL_SEMANTIC") || ((colorScheme).toUpperCase() === "MANUAL_NON_SEMANTIC")) {                                           
			that.setVizCustomColors(oChart,arr,colorScheme) ;
		}

	},

	setVizCustomColors: function(vFrame,msrObj,colorScheme){                           // pass chart reference and msr obj.
		var that = this;
		var oChartType = (this.dda_config.chartConfig.type).toUpperCase();
		var oAxisType = (this.dda_config.chartConfig.axis).toUpperCase();
//		var colorMapper = this.getCAtoVizColorMapping();
		
		var dset = vFrame.getDataset() ;
		var msr = dset.getMeasures() ;

		var defaultColor = "";
		if((colorScheme).toUpperCase() === "AUTO_SEMANTIC" || (colorScheme).toUpperCase() === "MANUAL_SEMANTIC")
			defaultColor = "sapUiChartPaletteSemanticNeutral";

		var oVizProperties = vFrame.getVizProperties();
		
		if(((oChartType == "BAR") || (oChartType == "COLUMN")) && (oAxisType == "DUAL")) {
			oVizProperties.plotArea.primaryValuesColorPalette = [];
			oVizProperties.plotArea.secondaryValuesColorPalette = [];
			var dualMsr = this.getMeasuresByAxis(this.chartMeasures);
			for(var i=0;i<dualMsr.axis1.objArr.length;i++) {
				(oVizProperties.plotArea.primaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis1.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}
			for(var i=0;i<dualMsr.axis2.objArr.length;i++) {
				(oVizProperties.plotArea.secondaryValuesColorPalette)[i] = (that.convertCAtoVizColorCode((dualMsr.axis2.objArr)[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+(((i+(dualMsr.axis1.objArr.length)) % 11)+1));
			}
		} else {
			oVizProperties.plotArea.colorPalette = [];
			for(var i=0;i<msr.length;i++)
			{
				(oVizProperties.plotArea.colorPalette)[i] = (that.convertCAtoVizColorCode(msrObj[i].color)) || (defaultColor) || ("sapUiChartPaletteQualitativeHue"+((i % 11)+1));
			}  
		}

		vFrame.setVizProperties(oVizProperties);

	},

	setAllVizFormatters: function() {
		//sap.viz.api.env.Format.useDefaultFormatter(false);
		var chartType = this.dda_config.chartConfig.type ;
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;		

		var customerFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					//var locale=new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
					var coreFormatter = sap.ui.core.format.NumberFormat.getInstance();
					return coreFormatter.format(value);
				}
		};
		jQuery.sap.require("sap.viz.ui5.api.env.Format");
//				var coreFormatter = sap.ui.core.format.NumberFormat.getInstance();
		sap.viz.ui5.api.env.Format.numericFormatter(customerFormatter);

	},
	
	getVizTypeAndIcon: function() {
		var vType = "bar";
		var vIcon = "sap-icon://bar-chart";
		var oType = this.dda_config.chartConfig.type || "BAR";	
		var axisType = this.dda_config.chartConfig.axis ;
		var valueType = this.dda_config.chartConfig.value ;
		var stacking = (this.isStackMsr || (this.isStackDim && (this.chartDimensions.length > 1))) ? true : false ;
		if(oType.toUpperCase() == "BAR") {
			vType = "bar";
			vIcon = "sap-icon://horizontal-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_bar";
						vIcon = "sap-icon://horizontal-stacked-chart";
					} else {
						vType = "bar";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_bar";
					vIcon = "sap-icon://horizontal-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_bar";
					vIcon = "sap-icon://full-stacked-chart";
				}
			} 
		} else if(oType.toUpperCase() == "COLUMN") {
			vType = "column";
			vIcon = "sap-icon://vertical-bar-chart";
			if(axisType === "SINGLE") {
				if(valueType === "ABSOLUTE") {
					if(stacking) {
						vType = "stacked_column";
						vIcon = "sap-icon://vertical-stacked-chart";
					} else {
						vType = "column";
					}
				} else if(valueType === "PERCENTAGE") {
					vType = "100_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} else if(axisType === "DUAL") {
				if(valueType === "ABSOLUTE") {
					vType = "dual_stacked_column";
					vIcon = "sap-icon://vertical-bar-chart";
				} else if(valueType === "PERCENTAGE") {
					vType = "100_dual_stacked_column";
					vIcon = "sap-icon://full-stacked-column-chart";
				}
			} 
		} else if(oType.toUpperCase() == "LINE") {
			vType = "line";
			vIcon = "sap-icon://line-chart";
		} else if(oType.toUpperCase() == "COMBINATION") {
			vType = "combination";
			vIcon = "sap-icon://business-objects-experience";
		} else if(oType.toUpperCase() == "BUBBLE") {
			vType = "bubble";
			vIcon = "sap-icon://bubble-chart";
		}

		return {type:vType,icon:vIcon};
	},

	getTableForViz: function(dimensions,measures) {

		var vizChartContainerTable = new sap.suite.ui.commons.ChartContainerContent({
			icon: 'sap-icon://table-chart',
		});

		var vTable = new sap.m.Table({
			showUnread: true,
		});

		for(var i=0;i<dimensions.length;i++) {
			var val = dimensions[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "Begin",                                      
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		for (var i=0;i<measures.length;i++) {
			var val = measures[i].name;
			var Label = new sap.m.Label({
				text: this.column_labels_mapping[val] || val
			});
			var columns = new sap.m.Column({
				hAlign: "End",
				header: Label,
				minScreenWidth: "Tablet",
				demandPopin: true,
			});
			vTable.addColumn(columns);
		}

		var template = new sap.m.ColumnListItem({
			//type : "Navigation",
			unread : false,              
		});

		for(var i=0;i<dimensions.length;i++){
			var val = ((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME")? this.dimension_text_property_mapping[dimensions[i].name] : dimensions[i].name;
			var ocell = new sap.m.Label({
				text : "{"+val+"}"
			});
			template.addCell(ocell);

		}
		var thresholdmsr = (this._oModel)["THRESHOLD_MEASURE"];

		var is_percent_scale = false;
		var chartType = this.dda_config.chartConfig.type ;
		var valueType = this.dda_config.chartConfig.value ;
		var axisType = this.dda_config.chartConfig.axis ;
		if(chartType.toUpperCase() === "TABLE")
			var oMsrs = this.tableMsrNames ;
		else
			var oMsrs = this.chartMsrNames ;
		if(((this.dda_config.chartConfig.mode).toUpperCase() === "RUNTIME") && (this.EVALUATION.getScaling() == -2) && this.getIsPercentScaled(oMsrs) && !(((chartType == 'BAR') || (chartType == 'COLUMN')) && (valueType == 'PERCENTAGE'))) {
			is_percent_scale = true;
		}
		var axisScale = [] ;
		if(is_percent_scale) {
			if((axisType == 'DUAL') && (valueType == "ABSOLUTE") && (chartType == 'BAR' || chartType == 'COLUMN')) {
				var msrsObj = this.getMeasuresByAxis(this.chartMeasures);	        	
				axisScale.push(this.getIsPercentScaled(msrsObj.axis1.nameArr));
				axisScale.push(this.getIsPercentScaled(msrsObj.axis2.nameArr));
			}
		}

		for(var i=0;i<measures.length;i++){
			var val = measures[i].name;
			if((this._oModel)["COLOR_SCHEME"] == "AUTO_SEMANTIC")
				var ocell = this._getTableCell(val, thresholdmsr, is_percent_scale, axisScale);
			else
				var ocell = this._getTableCell(val, val, is_percent_scale, axisScale);
			template.addCell(ocell);
		}

		vTable.setModel(this.oChartDataModel);
		vTable.bindAggregation("items", "/businessData", template);

		vizChartContainerTable.setContent(vTable);
		return vizChartContainerTable;
	},   

/*	getCAtoVizColorMapping: function() {
		var colorMapper = {
				"sapUiChart1" : "sapUiChartPaletteQualitativeHue1",
				"sapUiChart2" : "sapUiChartPaletteQualitativeHue2",
				"sapUiChart3" : "sapUiChartPaletteQualitativeHue3",
				"sapUiChart4" : "sapUiChartPaletteQualitativeHue4",
				"sapUiChart5" : "sapUiChartPaletteQualitativeHue5",
				"sapUiChart6" : "sapUiChartPaletteQualitativeHue6",
				"sapUiChart7" : "sapUiChartPaletteQualitativeHue7",
				"sapUiChart8" : "sapUiChartPaletteQualitativeHue8",
				"sapUiChart9" : "sapUiChartPaletteQualitativeHue9",
				"sapUiChart10" : "sapUiChartPaletteQualitativeHue10",
				"sapUiChart11" : "sapUiChartPaletteQualitativeHue11",
				"sapCaUiChartSemanticColor-Bad" : "sapUiChartPaletteSemanticBad",
				"sapCaUiChartSemanticColor-Bad-Dark" : "sapUiChartPaletteSemanticBadDark1",
				"sapCaUiChartSemanticColor-Bad-Light" : "sapUiChartPaletteSemanticBadLight1",
				"sapCaUiChartSemanticColor-Critical" : "sapUiChartPaletteSemanticCritical",
				"sapCaUiChartSemanticColor-Critical-Dark" : "sapUiChartPaletteSemanticCriticalDark1",
				"sapCaUiChartSemanticColor-Critical-Light" : "sapUiChartPaletteSemanticCriticalLight1",
				"sapCaUiChartSemanticColor-Good" : "sapUiChartPaletteSemanticGood",
				"sapCaUiChartSemanticColor-Good-Dark" : "sapUiChartPaletteSemanticGoodDark1",
				"sapCaUiChartSemanticColor-Good-Light" : "sapUiChartPaletteSemanticGoodLight1",
				"sapCaUiChartSemanticColor-Neutral" : "sapUiChartPaletteSemanticNeutral",
				"sapCaUiChartSemanticColor-Neutral-Dark" : "sapUiChartPaletteSemanticNeutralDark1",
				"sapCaUiChartSemanticColor-Neutral-Light" : "sapUiChartPaletteSemanticNeutralLight1",
		};
		
		return colorMapper;
	},	
*/	
	convertCAtoVizColorCode: function(oColor) {
		var vColor = oColor;
		if(oColor) {
			var splitColorArray = oColor.match(/[a-zA-Z]+|[0-9]+/g);
			if(splitColorArray[0] === "sapUiChart") {
				vColor = "sapUiChartPaletteQualitativeHue"+splitColorArray[1];
			} else if(splitColorArray[0] === "sapCaUiChartSemanticColor") {
				if(splitColorArray.length === 2) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1];
				} else if(splitColorArray.length === 3) {
					vColor = "sapUiChartPaletteSemantic"+splitColorArray[1]+splitColorArray[2]+"1";
				}
			}
		}
		return vColor;
	},
			
	onVizViewChange: function(oEvent) {
		var sKey = oEvent.getParameters().selectedItem.getProperty("key");
		this.viewId = sKey;
		this.DDA_MODEL.setViewId(this.viewId);
		this.bindUiToModel();
		this._oModel = this.DDA_MODEL.getModelDataForDDAConfiguration();
		this.refreshChart();
		oEvent.getSource().setTooltip(oEvent.getParameters().selectedItem.getText());
		window.location.replace(window.location.hash.substring(0,window.location.hash.lastIndexOf("/")) + "/" + this.viewId);
	},
	initialiazeValueHelpDialog:function(){
		var that = this;
		this.filterValueHelpDialog = new sap.m.SelectDialog({
			title : that.oApplicationFacade.getResourceBundle().getText("SELECT_FILTERS"),
			multiSelect : true,
			items : {
				path : "/filterValues",
				template : new sap.m.StandardListItem({title : "{value}",selected:"{selected}"})
			},
			//rememberSelections:true,
			growingThreshold:999,
			confirm : function(oEvent) {
				var aSelectedContexts=oEvent.mParameters.selectedContexts;
				var values=[];
				aSelectedContexts.forEach(function(oContext){
					values.push(oContext.getProperty("value"));
				});
				that.getView().getModel("SB_DDACONFIG").setProperty(this.ownerBindingPath+"/HARVEY_FILTERS/0/VALUE_1",values);
			},
			cancel:function(oEvent){
				
			},
			liveChange : function(oEvent) {
				var searchValue = oEvent.getParameter("value");
				var oFilter = new sap.ui.model.Filter("value", sap.ui.model.FilterOperator.Contains, searchValue);
				var oFilterLabel = new sap.ui.model.Filter("value", sap.ui.model.FilterOperator.Contains, searchValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter([oFilter,oFilterLabel], true);
			}
		});
		//this.initializeDataForDimensionsDialog();
		this.filterValueHelpDialog.setModel(new sap.ui.model.json.JSONModel({
			filterValues:[]
		}));
		return this.filterValueHelpDialog;
	},
	fetchFilterValuesForDimension:function(sDim,aValues,fnS,fnE){
		var that=this;
		var cachedValues;
		var model=this.getView().getModel("SB_DDACONFIG");
		var oDataUrl= model.getProperty("/QUERY_SERVICE_URI");
		var oValues={};
		aValues.forEach(function(val){
			oValues[val]=true;
		});
		//var sDim=model.getProperty("/CHIP/harveyFilterDimension");
		var oDataConfig=sap.suite.ui.smartbusiness.lib.Util.odata.getUri({
			serviceUri :oDataUrl,
			entitySet : model.getProperty("/QUERY_ENTITY_SET"),
			filter : this.DDA_MODEL.EVALUATION_DATA.FILTERS?this.DDA_MODEL.EVALUATION_DATA.FILTERS.results:[],
			dimension : sDim
		});
		if((cachedValues=this.getApplicationCache(oDataUrl+"/"+oDataConfig.uri))){
			fnS(cachedValues);
		}else{
			oDataConfig.model.read(oDataConfig.uri,null, null, false,function(data){
				var d=[];
				data.results.forEach(function(o){
					d.push({
						value:o[sDim],
						selected:!!oValues[o[sDim]]
					});
				});
				that.setApplicationCache(oDataUrl+"/"+oDataConfig.uri,d);
				fnS(d);
			},fnE);
		}
		
	},
	openFilterValueHelp:function(oEvent){
		var that=this;
		var viewModel= that.getView().getModel("SB_DDACONFIG");
		this.filterValueHelpDialog.open();
		this.filterValueHelpDialog.setBusy(true);
		this.filterValueHelpDialog.ownerBindingPath=oEvent.getSource().getBindingContext("SB_DDACONFIG").getPath();
		var sDim =oEvent.getSource().getBindingContext("SB_DDACONFIG").getProperty("HARVEY_FILTERS/0/NAME");
		var aSelectedValues =oEvent.getSource().getBindingContext("SB_DDACONFIG").getProperty("HARVEY_FILTERS/0/VALUE_1");
		that.fetchFilterValuesForDimension(sDim,aSelectedValues,function fetchFilterValuesForDimensionCallBack(data){
			that.filterValueHelpDialog.getModel().setProperty("/filterValues",data);
			that.filterValueHelpDialog.setBusy(false);
		},function(e){
			that.filterValueHelpDialog.setBusy(false);
			sap.suite.ui.smartbusiness.lib.Util.utils.showErrorMessage(that.oApplicationFacade.getResourceBundle().getText("ERROR_FETCHING_FILTERS"), e);
			});
	
	},
});

}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/view/configurator.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.evaluation.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.evaluation.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.evaluation.Configuration", {

	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},


	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
//		return this.oServiceParams.serviceList;
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},


});

}; // end of sap/suite/ui/smartbusiness/designtime/evaluation/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.kpi.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/

jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.kpi.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.kpi.Configuration", {

	oServiceParams: {
		serviceList: [
		              {
		            	  name : "SMART_BUSINESS",
		            	  masterCollection : "INDICATORS",
		            	  serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
		            	  isDefault : true,
		              }
		              ]
	},

	getAppConfig: function() {
		return this.oAppConfig;
	},

	/**
	 * @inherit
	 */
	getServiceList: function () {
//		return this.oServiceParams.serviceList;
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes: function () {
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},

});

}; // end of sap/suite/ui/smartbusiness/designtime/kpi/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.visualization.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.visualization.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "EVALUATIONS",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault : true,
			refreshAfterChange : true,
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},
	getDefaultEmptyMessageKey : function(){
	    return this.oApplicationFacade.getResourceBundle().getText("MULTI_EMPTY_TEXT");
	  }

});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.workspace.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.designtime.workspace.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "INDICATORS_MODELER",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl(),
			isDefault : true,
			mockedDataSource : "",
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").getDesigntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("ModelerServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},
});
}; // end of sap/suite/ui/smartbusiness/designtime/workspace/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.drilldown.lib.AllLibrary') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.drilldown.lib.AllLibrary");





jQuery.sap.require('sap.ca.ui.model.type.Date'); // unlisted dependency retained



}; // end of sap/suite/ui/smartbusiness/drilldown/lib/AllLibrary.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.mpt.Configuration') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.mpt.Configuration");
jQuery.sap.require('sap.ca.scfld.md.ConfigurationBase'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.app.Application'); // unlisted dependency retained



sap.ca.scfld.md.ConfigurationBase.extend("sap.suite.ui.smartbusiness.mpt.Configuration", {
	oServiceParams: {
		serviceList: [{
			name : "SMART_BUSINESS",
			masterCollection : "CHIPS_USER",
			serviceUrl : sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices").getRuntimeServiceUrl(),
			isDefault : true,
			refreshAfterChange : true,
			useBatch : false
		}]
	},

	/**
	 * @inherit
	 */
	getServiceList : function() {
		return this.getServiceParams().serviceList;
	},

	getMasterKeyAttributes : function() {
		//return the key attribute of your master list item
		return ["Id"];
	},
	getExcludedQueryStringParameters : function() {
		return ["sap-client","sap-language"];
	},
	getHanaSystem : function() {
        var hashObj = hasher || window.hasher; 
        var hashArr = hashObj.getHashAsArray();
        if(hashArr && hashArr.length && hashArr[0]) {
               var hashParameters = hashArr[0].substr(hashArr[0].indexOf("?") + 1).split("&");
               for(var i=0,l=hashParameters.length; i<l; i++) {
                     if(hashParameters[i] && (hashParameters[i].indexOf("sap-system") != -1)) {
                            return hashParameters[i].split("=")[1]; 
                     }
               }
        }
        return "";
	},
	getServiceParams : function() {
		var serviceUrl = this.oServiceParams.serviceList[0].serviceUrl;
		if(sap.suite.ui.smartbusiness && sap.suite.ui.smartbusiness.Adapter) {
			serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices").getRuntimeServiceUrl();
			this.oServiceParams.serviceList[0].serviceUrl = sap.suite.ui.smartbusiness.Adapter.getService("RuntimeServices").addSystemToServiceUrl(serviceUrl);
		}
		else if(sap.ushell && sap.ushell.Container) {
			this.oServiceParams.serviceList[0].serviceUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(serviceUrl, this.getHanaSystem());
		}
        return this.oServiceParams;
	},
	getDefaultEmptyMessageKey : function(){
	    return this.oApplicationFacade.getResourceBundle().getText("MULTI_EMPTY_TEXT");
	  }

});
}; // end of sap/suite/ui/smartbusiness/mpt/Configuration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.association.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
//define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.association.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.association.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.association",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js","../../Adapter.js"],
		"dependencies" : {
			"libs" : ["sap.m"],
			"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0821",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0821_Edit_KPI_Relationships.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0821_Edit_KPI_Relationships/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.association.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	 detailPageRoutes : {
	 //fill the routes to your detail pages in here. The application will navigate from the master page to route
	 //"detail" leading to detail screen S3.
		//If this is not desired please define your own route "detail"
			"associationCreate" : {
				"pattern" : "associationCreate/{contextPath}", 
				"view" : "S4"
			},
			"associationEdit" : {
				"pattern" : "associationEdit/{contextPath}/{associationPath}", 
				"view" : "S4"
			}
	}
	//fullScreenPageRoutes : {
	//	// fill the routes to your full screen pages in here.
	//	"subDetail" : {
	//		"pattern" : "subDetail/{contextPath}",
	//		"view" : "S4",
	//	}
	//}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.association.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/association/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.authorization.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.authorization.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.authorization.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.authorization",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js"],
			"dependencies" : {
			"libs" : ["sap.m"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0816",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0816_Manage_Authorizations.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0816_Manage_Authorizations/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.authorization.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	// detailPageRoutes : {
	// //fill the routes to your detail pages in here. The application will navigate from the master page to route
	// //"detail" leading to detail screen S3.
	// If this is not desired please define your own route "detail"
	//		"toS5" : {
	//			"pattern" : "toS5",
	//			"view" : "S5",
	//		}
	//},
	fullScreenPageRoutes : {
		// fill the routes to your full screen pages in here.
		"subDetail" : {
			"pattern" : "subDetail/{contextPath}",
			"view" : "S4",
		}
	}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.authorization.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/authorization/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.drilldown.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.drilldown.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.drilldown.Component", {
		metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
			"name" : "Master Detail Sample",
			"version" : "1.1.0-SNAPSHOT",
			"library" : "sap.suite.ui.smartbusiness.designtime.drilldown",
			"includes" : ["css/style.css","../../lib/Util.js","../../lib/DrilldownModel.js","../../lib/DrilldownWriteService.js","../../lib/ListPersona.js",
			              "../../Adapter.js"],
				"dependencies" : {
				"libs" : ["sap.m"],
			"components" : []
			},
			"config" : {
				"resourceBundle" : "i18n/i18n.properties",
				"titleResource" : "SHELL_TITLE",
				"icon" : "sap-icon://Fiori5/F0819",
				"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0819_Edit_Drill_Down_Confs.ico",
				"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/57_iPhone_Desktop_Launch.png",
				"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/114_iPhone-Retina_Web_Clip.png",
				"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/72_iPad_Desktop_Launch.png",
				"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0819_Edit_DrillDown_Configs/144_iPad_Retina_Web_Clip.png",
				"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
				"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
				"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
				"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
				"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
				"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
				"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
		},
		viewPath : "sap.suite.ui.smartbusiness.designtime.drilldown.view",
		
		// masterPageRoutes : {
		// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
		// leading to master screen S2.
		// // If this is not desired please define your own route "master"
		// },
		// detailPageRoutes : {
		//		"S3" : {
		//			"pattern" : "toS5",
		//			"view" : "S5",
		//		}
		// },
		
		detailPageRoutes : {
			"noDataView" : {
				pattern : "noDataView/{contextPath}",
	            view : "emptyView",
			}
		},
		
		fullScreenPageRoutes : [
			//fill the routes to your full screen pages in here.
			{
				"pattern" : "configureChart/{evaluationId}/{viewId}",
				"view" : "configureNewView",
				"name": "configureChart"
			},
			{
				"pattern" : "configurator/{evaluationId}/{viewId}",
				"view" : "configurator",
				"name": "configurator"
			}
		]
	}),
	
	/**
	 * Initialize the application
	 *
	 * @returns {sap.ui.core.Control} the content
	 */
	createContent : function() {

		var oViewData = {
			component : this
		};
		jQuery.sap.require("sap.ca.ui.utils.Lessifier");
        sap.ca.ui.utils.Lessifier.lessifyCSS("sap.suite.ui.smartbusiness.designtime.drilldown", "css/borderStyle.css");
        sap.ca.ui.utils.Lessifier.lessifyCSS("sap.suite.ui.smartbusiness.designtime.drilldown", "css/style.css");
		if(jQuery.browser.msie) {
			if(jQuery.browser.fVersion == "9") {

				jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.designtime.drilldown/css")+"/ie9.css");
			}
			if(jQuery.browser.fVersion == "10") {

				jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.suite.ui.smartbusiness.designtime.drilldown/css")+"/ie10.css");
			}
		}
		return sap.ui.view({
			viewName : "sap.suite.ui.smartbusiness.designtime.drilldown.Main",
			type : sap.ui.core.mvc.ViewType.XML,
			viewData : oViewData
		});
	}
});


}; // end of sap/suite/ui/smartbusiness/designtime/drilldown/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.visualization.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.visualization.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained

//jQuery.sap.require("sap.ushell.Container");

sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.visualization.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.visualization",
		"includes" : ["../../lib/Util.js", "themes/visualization.css","../../lib/ModelerReadServices.js","../../Adapter.js"],
			"dependencies" : {
			"libs" : ["sap.m","sap.suite.ui.commons"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0820",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0820_Edit_Tiles.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0820_Edit_Tiles/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.visualization.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	// detailPageRoutes : {
	// //fill the routes to your detail pages in here. The application will navigate from the master page to route
	// //"detail" leading to detail screen S3.
	// If this is not desired please define your own route "detail"
	//		"toS5" : {
	//			"pattern" : "toS5",
	//			"view" : "S5",
	//		}
	//},
	
	
	detailPageRoutes : {
		"noDataView" : {
			pattern : "noDataView/{contextPath}",
            view : "emptyView",
		}
	},
	
	fullScreenPageRoutes : {
		// fill the routes to your full screen pages in here.
		"addTile" : {
			"pattern" : "addTile/{contextPath}",
			"view" : "S4",
		},
		"editTile" : {
			"pattern" : "editTile/{contextPath}/{chipContextPath}",
			"view" : "S4",
		},
		"addEvaluation" : {
			"pattern" : "addEvaluation",
			"view" : "addEvaluation"
		},
		"editEvaluation" : {
			"pattern" : "editEvaluation/{contextPath}",
			"view" : "addEvaluation"
		},
		"addTileModelS" : {
			"pattern" : "addTileModelS/{contextPath}",
			"view" : "AddTileModelS"
		},
		"editTileModelS" : {
			"pattern" : "editTileModelS/{contextPath}/{chipContextPath}",
			"view" : "AddTileModelS",
		},
		
	}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.visualization.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/visualization/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.smartbusiness.designtime.workspace.Component') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP SE. All rights reserved
* @deprecated since SAPUI 5 version 1.28.0
*/
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.suite.ui.smartbusiness.designtime.workspace.Component");

jQuery.sap.require('sap.ca.scfld.md.ComponentBase'); // unlisted dependency retained


sap.ca.scfld.md.ComponentBase.extend("sap.suite.ui.smartbusiness.designtime.workspace.Component", {
	metadata : sap.ca.scfld.md.ComponentBase.createMetaData("MD", {
		"name" : "Master Detail Sample",
		"version" : "1.0.0-SNAPSHOT",
		"library" : "sap.suite.ui.smartbusiness.designtime.workspace",
		"includes" : ["../../lib/formatters.js","../../lib/Util.js","../../Adapter.js"],
			"dependencies" : {
			"libs" : ["sap.m"],
		"components" : []
		},
		"config" : {
			"resourceBundle" : "i18n/i18n.properties",
			"titleResource" : "SHELL_TITLE",
			"icon" : "sap-icon://Fiori5/F0818",
			"favIcon" : "../../../../../../../resources/sap/ca/ui/themes/base/img/favicon/F0818_KPI_Workspace.ico",
			"homeScreenIconPhone" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/57_iPhone_Desktop_Launch.png",
			"homeScreenIconPhone@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/114_iPhone-Retina_Web_Clip.png",
			"homeScreenIconTablet" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/72_iPad_Desktop_Launch.png",
			"homeScreenIconTablet@2" : "../../../../../../../resources/sap/ca/ui/themes/base/img/launchicon/F0818_KPI_Workspace/144_iPad_Retina_Web_Clip.png",
			"startupImage320x460" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/320_x_460.png",
			"startupImage640x920" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_920.png",
			"startupImage640x1096" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/640_x_1096.png",
			"startupImage768x1004" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/768_x_1004.png",
			"startupImage748x1024" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/748_x_1024.png",
			"startupImage1536x2008" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1536_x_2008.png",
			"startupImage1496x2048" : "../../../../../../../resources/sap/ca/ui/themes/base/img/splashscreen/1496_x_2048.png"
	},
	viewPath : "sap.suite.ui.smartbusiness.designtime.workspace.view",
	
	// masterPageRoutes : {
	// // fill the routes to your master pages in here. The application will start with a navigation to route "master"
	// leading to master screen S2.
	// // If this is not desired please define your own route "master"
	// },
	 detailPageRoutes : {
	 //fill the routes to your detail pages in here. The application will navigate from the master page to route
	 //"detail" leading to detail screen S3.
	 //If this is not desired please define your own route "detail"
			"evalDetail" : {
				"pattern" : "evalDetail/{contextPath}/{evalPath}",
				"view" : "S4"
			},
			"multiSelect" : {
				"pattern" : "multiSelect",
				"view" : "S3"
			},
			"detail" : {
				"pattern" : "detail/{contextPath}",
				"view" : "S3"
			}
	},
	//fullScreenPageRoutes : {
	//	// fill the routes to your full screen pages in here.
	//	"subDetail" : {
	//		"pattern" : "subDetail/{contextPath}",
	//		"view" : "S4",
	//	}
	//}
}),

/**
 * Initialize the application
 *
 * @returns {sap.ui.core.Control} the content
 */
createContent : function() {

	var oViewData = {
		component : this
	};
	return sap.ui.view({
		viewName : "sap.suite.ui.smartbusiness.designtime.workspace.Main",
		type : sap.ui.core.mvc.ViewType.XML,
		viewData : oViewData
	});
}
});
}; // end of sap/suite/ui/smartbusiness/designtime/workspace/Component.js
