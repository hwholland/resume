// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.rta.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.rta.ModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/*global Promise */// declare unusual global vars for JSLint/SAPUI5 validation
jQuery.sap.declare('sap.ui.rta.ModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ModelConverter",['jquery.sap.global', 'sap/ui/comp/odata/FieldSelectorModelConverter', 'sap/ui/dt/ElementUtil'], function(jQuery, FieldSelectorModelConverter, ElementUtil) {
	"use strict";

	/**
	 * Class for ModelConverter.
	 * 
	 * @class
	 * ModelConverter functionality to get a converted model from a given OData Model, which includes checks for already bound and visible properties on the UI as well as renamed labels for sap:label
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @private
	 * @static
	 * @since 1.33
	 * @alias sap.ui.rta.ModelConverter
	 * @experimental Since 1.33. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ModelConverter = {};

	ModelConverter.getConvertedModelWithBoundAndRenamedLabels = function(oControl, aEntityTypes, oControlAnalyzer) {
		var that = this;
		var oModel = oControl.getModel();
		return this._getModelConverter(oModel).then(function(oFieldSelectorModelConverter) {
			return that._getFieldModel(oControl, oFieldSelectorModelConverter, aEntityTypes, oControlAnalyzer);
		});
	};

	ModelConverter._getModelConverter = function(oModel) {
		var oMetaModel = oModel.getMetaModel();
		return oMetaModel.loaded().then(function() {
			return new FieldSelectorModelConverter(oModel);
		}, function(oReason) {
			jQuery.sap.log.error("MetadataModel could not be loaded", oReason);
		});
	};

	ModelConverter._getIgnoredFields = function(oControl) {
		
		if (oControl && oControl.getIgnoredFields) {
			var sCsvIgnoredFields = oControl.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		return [];
	};

	/**
	 * Generates the field model based on renamed labels, already bound and visible fields as well as complex types
	 * @param  {Array} aEntityTypes List of entity types
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 * @return {Array} List of Fields for the given entity type
	 * @private
	 */
	ModelConverter._getFieldModel = function(oControl, oFieldSelectorModelConverter, aEntityTypes, oControlAnalyzer) {
		var aIgnoredFields = this._getIgnoredFields(oControl);
		var oConvertedModel = oFieldSelectorModelConverter.getConvertedModel(aEntityTypes, aIgnoredFields);

		if (!oControlAnalyzer) {
			throw new Error("ModelConverter: no usable change controller instance found!");
		}

		var oVisibleAndBoundFields = oControlAnalyzer.findVisibleAndBoundFieldsAndLabelNames(oControl);

		var mVisibleAndBoundFields = oVisibleAndBoundFields.visibleAndBoundFields;
		var mFieldsAndLabelNames = oVisibleAndBoundFields.fieldsAndLabelNames;
		var mFieldsAndBoundPropertyName = oVisibleAndBoundFields.fieldsAndBoundPropertyName;
		var mBoundFieldsId = oVisibleAndBoundFields.boundFieldsId;
		var sEntityType;

		for (var z = 0; z < aEntityTypes.length; z++) {
			sEntityType = aEntityTypes[z];
			for (var i = 0; i < oConvertedModel[sEntityType].length; i++) {
				var oActModelEntity = oConvertedModel[sEntityType][i];
				var complexTypePropertyName = oFieldSelectorModelConverter.getMetaDataAnalyzer()
						._getNameOfPropertyUsingComplexType(sEntityType, oActModelEntity.entityName);
				if (mVisibleAndBoundFields[oActModelEntity.name]) {
					oActModelEntity.checked = true;
					
				}
				oActModelEntity.controlId = mBoundFieldsId[oActModelEntity.name];
				//Check for complexTypes
				if (complexTypePropertyName) {
					oActModelEntity.isComplexType = true;
					oActModelEntity.complexTypeName = complexTypePropertyName;

					if (mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name]) {
						oActModelEntity.checked = true;
						oActModelEntity.controlId = mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name];
					}
				}
				//Check for renamed labels
				var sFieldLabel;
				var sPath;

				if (oActModelEntity.isComplexType) {
					sPath = oActModelEntity.complexTypeName + "/" + oActModelEntity.name;
					sFieldLabel = mFieldsAndLabelNames[sPath];
					oActModelEntity.boundProperty = mFieldsAndBoundPropertyName[sPath];
				} else {
					sFieldLabel = mFieldsAndLabelNames[oActModelEntity.name];
					oActModelEntity.boundProperty = mFieldsAndBoundPropertyName[oActModelEntity.name];
				}
				if (sFieldLabel && sFieldLabel !== oActModelEntity["sap:label"]) {
					oActModelEntity.fieldLabel = sFieldLabel;
				}

			}
		}
		return oConvertedModel[sEntityType];
	};

	return ModelConverter;

}, /* bExport= */true);
}; // end of sap/ui/rta/ModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BaseCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BaseCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BaseCommand",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 * 
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * 
	 * @author SAP SE
	 * @version 1.38.33
	 * 
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BaseCommand = ManagedObject.extend("sap.ui.rta.command.BaseCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				element : {
					type : "sap.ui.core.Element"
				},
				elementId : {
					type : "string"
				},
				name : {
					type : "string"
				}
			},
			associations : {},
			events : {}
		}
	});

	BaseCommand.ERROR_UNKNOWN_ID = "no element for id: ";

	/**
	 * @protected Template Method to implement execute logic, with ensure precondition Element is available
	 */
	BaseCommand.prototype._executeWithElement = function(oElement) {
	};

	BaseCommand.prototype.execute = function() {
		this._withElement(this._executeWithElement.bind(this));
	};

	/**
	 * @protected Template Method to implement undo logic, with ensure precondition Element is available
	 */
	BaseCommand.prototype._undoWithElement = function(oElement) {
	};

	BaseCommand.prototype.undo = function() {
		this._withElement(this._undoWithElement.bind(this));
	};

	BaseCommand.prototype._withElement = function(fn) {
		var oElement = this._getElement();
		if (oElement) {
			fn(oElement);
		} else {
			jQuery.sap.log.error(this.getMetadata().getName(), BaseCommand.ERROR_UNKNOWN_ID + this.getElementId());
		}
	};

	BaseCommand.prototype.serialize = function() {
	};

	BaseCommand.prototype.isEnabled = function() {
		return true;
	};

	BaseCommand.deserialize = function(oChangeData) {
	};

	BaseCommand.prototype._getElement = function() {
		// Check if Element could be complete virtual property (always created by id)
		var oElement = this.getElement();
		if (!oElement) {
			oElement = sap.ui.getCore().byId(this.getElementId());
			this.setElement(oElement);
		}
		return oElement;
	};

	return BaseCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BaseCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CompositeCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CompositeCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/CompositeCommand",['sap/ui/rta/command/BaseCommand'], function(BaseCommand) {
	"use strict";

	/**
	 * Composite command that can work on multiple simp
	 * 
	 * @class
	 * @extends sap.ui.rta.command.BaseCommand
	 * 
	 * @author SAP SE
	 * @version 1.38.33
	 * 
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CompositeCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CompositeCommand = BaseCommand.extend("sap.ui.rta.command.CompositeCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {}
		}
	});

	CompositeCommand.prototype.execute = function() {
		this._forEachCommand(function(oCommand){
			oCommand.execute();
		});
	};
	
	CompositeCommand.prototype.undo = function() {
		this._forEachCommandInReverseOrder(function(oCommand){
			oCommand.undo();
		});
	};
	
	CompositeCommand.prototype._forEachCommand = function(fnDo) {
		var aCommands = this.getCommands();
		aCommands.forEach(fnDo, this);
	};
	
	CompositeCommand.prototype._forEachCommandInReverseOrder = function(fnDo) {
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i >= 0; i--) {
			fnDo.call(this, aCommands[i]);
			
		}
	};
	return CompositeCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CompositeCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.FlexCommand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.FlexCommand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/FlexCommand",['sap/ui/rta/command/BaseCommand', "sap/ui/fl/FlexControllerFactory",
		"sap/ui/fl/changeHandler/JsControlTreeModifier", "sap/ui/fl/Utils"],
	function(BaseCommand, FlexControllerFactory, JsControlTreeModifier, Utils) {
	"use strict";

	/**
	 * Basic implementation for the flexibility commands, that use a flex change handler.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.FlexCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var FlexCommand = BaseCommand.extend("sap.ui.rta.command.FlexCommand", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeHandler : {
					type : "object"
				},
				changeType : {
					type : "string"
				}
			},
			associations : {},
			events : {}
		}
	});

	FlexCommand.FORWARD = true;
	FlexCommand.BACKWARD = false;

	FlexCommand.prototype.getPreparedChange = function(bForward) {
		// if nothing is specified deliver the forward case
		var bForward = (bForward === true || bForward === false) ? bForward : true;
		if (bForward) {
			return this._forwardPreparedChange;
		} else {
			return this._backwardPreparedChange;
		}
	};

	FlexCommand.prototype.setPreparedChange = function(oChange, bForward) {
		if (bForward) {
			this._forwardPreparedChange = oChange;
		} else {
			this._backwardPreparedChange = oChange;
		}
	};

	FlexCommand.prototype._executeWithElement = function(oElement) {
		var mChange = this._getForwardFlexChange(oElement);
		var oAppComponent = Utils.getAppComponentForControl(this.getElement());
		this.getChangeHandler().applyChange(mChange.change, mChange.selectorElement, {
			modifier: JsControlTreeModifier,
			appComponent: oAppComponent
		});
	};

	FlexCommand.prototype._getForwardFlexChange = function(oElement) {
		return {
			change : {},
			selectorElement : oElement
		};
	};

	FlexCommand.prototype._undoWithElement = function(oElement) {
		var oPreparedChange = this.getPreparedChange(FlexCommand.BACKWARD);
		if (!oPreparedChange) {
			var oChangeHandler = this.getChangeHandler();
			if (oChangeHandler.getInverseChange) {
				// In case the flexhandler supports computation of inverse change and given the command has already been
				// executed:
				var oForwardChange = this.getPreparedChange(FlexCommand.FORWARD);
				oPreparedChange = {
					change : oChangeHandler.getInverseChange(oForwardChange.change, oForwardChange.selectorElement,
							JsControlTreeModifier),
					selectorElement : oForwardChange.selectorElement
				};
				this.setPreparedChange(oPreparedChange, FlexCommand.BACKWARD);
			} else {
				oPreparedChange = this._getBackwardFlexChange(oElement);
			}
		}
		if (oPreparedChange) {
			var oAppComponent = Utils.getAppComponentForControl(this.getElement());
			this.getChangeHandler().applyChange(oPreparedChange.change, oPreparedChange.selectorElement,
				{
					modifier: JsControlTreeModifier,
					appComponent : oAppComponent
				});
		} else {
			jQuery.log.warning("Undo functionality not supported for element with id " + oElement.getId());
		}

	};

	FlexCommand.prototype._getBackwardFlexChange = function(oElement) {
	};

	FlexCommand.prototype._completeChangeContent = function(mSpecificChangeInfo) {
		var oFlexController = FlexControllerFactory.createForControl(this.getElement());
		return oFlexController.createChange(mSpecificChangeInfo, this.getElement());
	};

	return FlexCommand;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/FlexCommand.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Hide') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Hide'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.HideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Hide",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/HideControl"], function(FlexCommand,
		HideChangeHandler) {
	"use strict";

	/**
	 * Hide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Hide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Hide = FlexCommand.extend("sap.ui.rta.command.Hide", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "hideControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Hide.prototype.init = function() {
		this.setChangeHandler(HideChangeHandler);
	};

	Hide.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (UnhideControl), or better extend the PropertyChangeCommand
		// an set the property 'visible' to false?
		oElement.setVisible(true);
	};

	Hide.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Hide;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Hide.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Stack') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Stack'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Stack",['sap/ui/base/ManagedObject'], function(ManagedObject) {
	"use strict";

	/**
	 * Basic implementation for the command stack pattern.
	 * 
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Stack
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Stack = ManagedObject.extend("sap.ui.rta.command.Stack", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			aggregations : {
				commands : {
					type : "sap.ui.rta.command.BaseCommand",
					multiple : true
				}
			},
			events : {
				modified : {}
			}
		}
	});

	Stack.prototype._toBeExecuted = -1;

	Stack.prototype._getCommandToBeExecuted = function() {
		return this.getCommands()[this._toBeExecuted];
	};

	/**
	 * Allows to push a command on the stack that has already been executed and shouldn't be executed next
	 */
	Stack.prototype.pushExecutedCommand = function(oCommand) {
		this.push(oCommand, true);
	};

	Stack.prototype.push = function(oCommand, bExecuted) {
		// undone commands have to be removed as a new command is added
		if (this._bUndoneCommands) {
			this._bUndoneCommands = false; // distinguish undone commands from not yet executed commands
			while (this._toBeExecuted > -1) {
				this.pop();
			}
		}
		this.insertCommand(oCommand, 0);
		if (!bExecuted) {
			this._toBeExecuted++;
		}
		this.fireModified();
	};

	Stack.prototype.top = function() {
		return this.getCommands()[0];
	};

	Stack.prototype.pop = function() {
		if (this._toBeExecuted > -1) {
			this._toBeExecuted--;
		}
		return this.removeCommand(0);
	};

	Stack.prototype.removeCommand = function(vObject, bSuppressInvalidate) {
		var oRemovedCommand = this.removeAggregation("commands", vObject, bSuppressInvalidate);
		this.fireModified();
		return oRemovedCommand;
	};

	Stack.prototype.removeAllCommands = function(bSuppressInvalidate) {
		var aCommands = this.removeAllAggregation("commands", bSuppressInvalidate);
		this._toBeExecuted = -1;
		this.fireModified();
		return aCommands;
	};

	Stack.prototype.isEmpty = function() {
		return this.getCommands().length === 0;
	};

	Stack.prototype.execute = function() {
		var oCommand = this._getCommandToBeExecuted();
		if (oCommand) {
			try {
				oCommand.execute();
			} catch (oError) {
				this.pop(); // remove failing command
				throw (oError);
			}
			this._toBeExecuted--;
			this.fireModified();
		}
	};

	Stack.prototype._unExecute = function() {
		if (this.canUndo()) {
			this._bUndoneCommands = true;
			this._toBeExecuted++;
			var oCommand = this._getCommandToBeExecuted();
			if (oCommand) {
				oCommand.undo();

				this.fireModified();
			}
		}
	};

	Stack.prototype.canUndo = function() {
		return (this._toBeExecuted + 1) < this.getCommands().length;
	};

	Stack.prototype.undo = function() {
		this._unExecute();
	};

	Stack.prototype.canRedo = function() {
		return !!this._getCommandToBeExecuted();
	};

	Stack.prototype.redo = function() {
		this.execute();
	};

	Stack.prototype.pushAndExecute = function(oCommand) {
		this.push(oCommand);
		this.execute();
	};

	Stack.prototype.serialize = function() {
		var aResult = [];
		var aCommands = this.getSerializableCommands();
		aCommands.forEach(function(oCommand) {
			var vSerialize = oCommand.serialize();
			if (Array.isArray(vSerialize)) {
				aResult.concat(vSerialize);
			} else {
				aResult.push(vSerialize);
			}
		});
		return aResult;
	};

	Stack.prototype.getSerializableCommands = function() {
		var aSerializableCommands = [];
		var aCommands = this.getCommands();
		for (var i = aCommands.length - 1; i > this._toBeExecuted; i--) {
			var aSubCommands = this._getSubCommands(aCommands[i]);
			aSerializableCommands = aSerializableCommands.concat(aSubCommands);
		}
		return aSerializableCommands;
	};

	Stack.prototype._getSubCommands = function(oCommand) {
		var that = this;
		var aCommands = [];
		if (oCommand.getCommands) {
			oCommand.getCommands().forEach(function(oSubCommand) {
				var aSubCommands = that._getSubCommands(oSubCommand);
				aCommands = aCommands.concat(aSubCommands);
			});
		} else {
			aCommands.push(oCommand);
		}
		return aCommands;
	};

	return Stack;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Stack.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Stash') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Stash'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.StashControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Stash",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/StashControl"], function(FlexCommand,
		StashChangeHandler) {
	"use strict";

	/**
	 * Stash a control/element
	 * 
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.Stash
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Stash = FlexCommand.extend("sap.ui.rta.command.Stash", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "stashControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Stash.prototype.init = function() {
		this.setChangeHandler(StashChangeHandler);
	};

	Stash.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (UnstashControl), or better extend the PropertyChangeCommand
		// an set the property 'stashed' to false?
		oElement = sap.ui.getCore().byId(oElement.getId());
		this.setElement(oElement);
		oElement.setStashed(false);
		oElement.setVisible(true);
	};

	Stash.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Stash;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Stash.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Unhide') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Unhide'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.UnhideControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Unhide",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/UnhideControl"], function(FlexCommand,
		UnhideChangeHandler) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Unhide = FlexCommand.extend("sap.ui.rta.command.Unhide", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "unhideControl"
				}
			},
			associations : {},
			events : {}
		}
	});

	Unhide.prototype.init = function() {
		this.setChangeHandler(UnhideChangeHandler);
	};

	Unhide.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (hideControl), or better extend the PropertyChangeCommand
		// an set the property 'visible' to false?
		oElement.setVisible(false);
	};

	Unhide.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			}
		};
	};

	return Unhide;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Unhide.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Unstash') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Unstash'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.UnstashControl'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Unstash",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/UnstashControl"], function(FlexCommand,
		UnstashChangeHandler) {
	"use strict";

	/**
	 * Unstash a control/element
	 * 
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.Unstash
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Unstash = FlexCommand.extend("sap.ui.rta.command.Unstash", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "unstashControl"
				},
				parentAggregationName : {
					type : "string",
					defaultValue : ""
				},
				index : {
					type : "integer",
					defaultValue : 0
				}
			},
			associations : {},
			events : {}
		}
	});

	Unstash.prototype.init = function() {
		this.setChangeHandler(UnstashChangeHandler);
	};

	/**
	 * @override
	 */
	 Unstash.prototype._getForwardFlexChange = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	Unstash.prototype._getBackwardFlexChange = function(oElement) {
		return this._getFlexChange();
	};

	Unstash.prototype._undoWithElement = function(oElement) {
		// TODO: should we call also a change handler here (StashControl), or better extend the PropertyChangeCommand
		// an set the property 'stashed' to true?
		oElement = sap.ui.getCore().byId(oElement.getId());
		this.setElement(oElement);
		oElement.setStashed(true);
		oElement.setVisible(false);
	};

	Unstash.prototype._getFlexChange = function(bForward) {
		var oChange = this._completeChangeContent({
			content : {
				parentAggregationName : this.getParentAggregationName(),
				index : this.getIndex()
			},
			changeType : this.getChangeType(),
			selectorElement : this.getElement()
		});

		return {
			change : oChange,
			selectorElement :this.getElement()
		};
	};

	Unstash.prototype.serialize = function() {
		return {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			},
			content : {
				parentAggregationName : this.getParentAggregationName(),
				index : this.getIndex()
			}
		};
	};

	return Unstash;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Unstash.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.Base') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.Base'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/Base",['sap/ui/base/ManagedObject', 'sap/ui/dt/ElementUtil', 'sap/ui/fl/Utils'], function(ManagedObject, ElementUtil, FlexUtils) {
	"use strict";

	var aEDITABLE_TYPES = ["sap.ui.comp.smartform.SmartForm", "sap.ui.comp.smartform.Group",
			"sap.ui.comp.smartform.GroupElement", "sap.uxap.ObjectPageSection", "sap.uxap.ObjectPageLayout"];

	if (FlexUtils.isVendorLayer()) {
		aEDITABLE_TYPES = aEDITABLE_TYPES.concat(["sap.ui.comp.smartfilterbar.SmartFilterBar",
				"sap.ui.comp.smarttable.SmartTable", "sap.uxap.ObjectPageHeader",
				"sap.uxap.ObjectPageHeaderActionButton", "sap.ui.table.Column"]);
	}

	/**
	 * Abstract class for controlAnalyzer Do not instantiate this class directly! Instead use the ControlAnalyzerFactory.
	 *
	 * @class Context - controller for flexibility changes
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.32
	 * @alias sap.ui.rta.controlAnalyzer.Base
	 * @experimental Since 1.32. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */

	var Base = ManagedObject.extend("sap.ui.rta.controlAnalyzer.Base", {
		constructor : function() {
			sap.ui.base.ManagedObject.prototype.constructor.apply(this, arguments);
			this._mAvailableElements = {};
			this._mHiddenElements = {};
		},
		metadata : {
			library : "sap.ui.rta",
			properties : {
				control : "sap.ui.core.Control",
				selectedControl : "sap.ui.core.Control",
				prepared : {
					type : "boolean",
					defaultValue : false
				}
			}
		}
	});

	Base.prototype._raiseIllegalState = function() {
		jQuery.sap.log.error("Illegal state, analyzer is not prepared");
	};

	Base.prototype.prepare = function() {
		this.setPrepared(true);
	};

	Base.prototype.getAvailableElements = function() {
		if (!this.getPrepared()) {
			this._raiseIllegalState();
		}
		return this._mAvailableElements;
	};

	Base.prototype.getHiddenElements = function() {
		if (!this.getPrepared()) {
			this._raiseIllegalState();
		}
		return this._mHiddenElements;
	};

	/**
	 * Adjust/translate change specific data from the generic format to a specific format of a special change handler
	 *
	 * @param {string}
	 *          sType the command type
	 * @param {object}
	 *          mSpecificChangeData
	 * @return {object} the adjusted/translated change specific data
	 */
	Base.prototype.mapSpecificChangeData = function(sType, mSpecificChangeData) {
		return mSpecificChangeData;
	};
	/**
	 * Calculate repository fields based on model and displayed data
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @private
	 */
	Base.prototype.getControlsFieldCollection = function(oControl) {
	};

	/*
	 * Creates an array of change data to be passed to FlexController @param {Object} oControl The currently checked or
	 * unchecked object containing the binding information @return {Array} aChangeData @private
	 */
	Base.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl) {
		return null;
	};

	/**
	 * TODO: to be deleted when ModelConverter will be removed
	 * Finds already bound and visible fields and saves the current label value
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @return {Object} visibleAndBoundFields: Lists of visible and bound fields, fieldsAndLabelNames: visible and
	 *         LabelValue fields
	 * @private
	 */
	Base.prototype.findVisibleAndBoundFieldsAndLabelNames = function(oControl) {
	};

	/**
	 * Checks if a custom field is available
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Currently selected control
	 * @return {Promise} true if custom fields are available, else false
	 * @private
	 */
	Base.prototype.isCustomFieldAvailable = function(oControl) {
		return Promise.resolve().then(function() {
			return false;
		});
	};

	/**
	 * Checks if a given aggregation in parent element is a valid target zone for moved element
	 *
	 * @param {sap.ui.core.Element}
	 *          oParentElement to validate as a valid parent
	 * @param {string}
	 *          sAggregationName in parent element to validate
	 * @param {sap.ui.core.Element}
	 *          oMovedElement element which is move
	 * @return {boolean} true if valid target zone
	 */
	Base.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
		return true;
	};

	Base.prototype.getFlexChangeType = function(sType, oElement) {
		return null;
	};

	/**
	 * @private
	 */
	Base.prototype.isEditable = function(oElement) {
		var bIsEditable;

		// this should be moved to control specific analyzers
		bIsEditable = aEDITABLE_TYPES.some(function(sType) {
			return ElementUtil.isInstanceOf(oElement, sType);
		});

		// is visible + has stable id
		if (bIsEditable) {
			bIsEditable = oElement.getVisible ? oElement.getVisible() : true;

			if (bIsEditable) {
				bIsEditable = FlexUtils.checkControlId(oElement);
			}
		}

		return bIsEditable;
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if parent has stable Id, false if not
	 * @private
	 */
	Base.prototype.hasParentStableId = function(oOverlay) {
		var oBlockOverlay = oOverlay.getParentElementOverlay();
		var oBlock = oBlockOverlay ? oBlockOverlay.getElementInstance() : null;

		return oBlock && FlexUtils.checkControlId(oBlock);
	};

	/**
	 * @private
	 */
	Base.prototype.isRenamable = function(oElement) {
		return this.isEditable(oElement) && this.getRenamableControl(oElement);
	};

	/**
	 * @private
	 */
	Base.prototype.getRenamableControl = function(oElement) {
		return null;
	};

	return Base;

}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/Base.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.Form') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.Form'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/Form",['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/dt/ElementUtil', 'sap/ui/fl/Utils'],
function(Base, ElementUtil, FlexUtils) {
	"use strict";

	/**
	 * Constructor for a new change controller for the sap.ui.layout.form. Do not instantiate this class directly! Instead use
	 * the ControlAnalyzerFactory.
	 *
	 * @class Context - controller for flexibility changes
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.controlAnalyzer.Form
	 * @augments sap.ui.rta.controlAnalyzer.Base
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */
	var Form = Base.extend("sap.ui.rta.controlAnalyzer.Form", {
		metadata : {
			library : "sap.ui.rta",
			properties : {}
		}
	});

	/**
	 * @override
	 */
	Form.prototype.init = function() {
	};

	/**
	 * @public
	 */
	Form.prototype.isEditable = function(oElement) {
		var oSimpleFormContainer = this._getSimpleFormContainer(oElement);
		if (oSimpleFormContainer) {
			return this._hasStableIds(oSimpleFormContainer);
		}
	};

	/**
	 * @private
	 */
	Form.prototype._getSimpleFormContainer = function(oElement) {
		var oParent = oElement.getParent();
		if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormElement")) {
			return this._getSimpleFormContainer(oParent);
		} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.FormContainer")) {
			oParent = oParent.getParent ? oParent.getParent() : null;
			if (ElementUtil.isInstanceOf(oParent, "sap.ui.layout.form.SimpleForm")) {
				return oParent;
			}
		}
	};

	/**
	 * @private
	 */
	Form.prototype._hasStableIds = function(oElement) {
		// simple form and all elements in content aggregation have stable ids
		if (ElementUtil.isInstanceOf(oElement, "sap.ui.layout.form.SimpleForm") && FlexUtils.checkControlId(oElement)) {
			var bHasAnyChildUnstableId = oElement.getContent().some(function(oChild) {
				var bHasUnstableId = !FlexUtils.checkControlId(oChild);
				return bHasUnstableId;
			});
			return !bHasAnyChildUnstableId;
		}
	};

	return Form;

}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/Form.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.rta.
 */
jQuery.sap.declare('sap.ui.rta.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library'],
	function(jQuery, Core, coreLibrary) {
	"use strict";

	/**
	 * SAPUI5 library with RTA controls.
	 *
	 * @namespace
	 * @name sap.ui.rta
	 * @public
	 */
	
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.rta",
		version: "1.38.33",
		dependencies : ["sap.ui.core","sap.m"],
		types: [
		],
		interfaces: [],
		controls: [
		    "sap.ui.rta.ContextMenu",
		    "sap.ui.rta.ui.ToolsMenu",
		    "sap.ui.rta.AddElementsDialog"
		],
		elements: [
		]
	});
		
	return sap.ui.rta;	

}, /* bExport= */ true);
}; // end of sap/ui/rta/library.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.model.ElementPreprocessor') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.model.ElementPreprocessor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/model/ElementPreprocessor",['jquery.sap.global'], function(jQuery) {
	"use strict";

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 * 
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel}
	 *          oDataModel - odata model
	 * @public
	 * @author Markus Viol
	 */
	var ElementPreprocessor = function(oMetadataAnalyzer) {
		this._oMetadataAnalyzer = oMetadataAnalyzer;
		this._aEntityTypes = [];
		this.invisibleFields = {};
	};

	/**
	 * @param {array}
	 *          aFields - fields array
	 * @param {Array}
	 *          aIgnoredFields - List of fields which should be ignored.
	 * @param {Boolean}
	 *          bIsComplexType Set to true if fields are children of a complex type
	 * @returns {array} - object of fields which are visible *
	 * @private
	 * @name ElementPreprocessor#_updateAndFilterFields
	 * @function
	 */
	ElementPreprocessor.prototype._updateAndFilterFields = function(aFields, aIgnoredFields, bIsComplexType, sKey) {

		var aValidFields = [];
		for (var f = 0; f < aFields.length; f++) {
			var oCurrentField = aFields[f];
			if (oCurrentField.visible === false) {
				this.invisibleFields[sKey] = this.invisibleFields[sKey] || [];
				if (this.invisibleFields[sKey].indexOf(oCurrentField) === -1) {
					oCurrentField.isComplexType = bIsComplexType;
					this.invisibleFields[sKey].push(oCurrentField);
				}
				continue;
			}
			// TODO: check if the label is overridden in an annotation

			// only add fields which are not in ignored list
			var bIsFieldOnIgnoreList = this._isFieldOnIgnoreList(oCurrentField, aIgnoredFields, bIsComplexType);
			var bIsFieldBlacklisted = this._isFieldBlacklisted(oCurrentField);
			if (!bIsFieldOnIgnoreList && !bIsFieldBlacklisted) {
				if (this._isComplexType(oCurrentField) === true) {
					var aValidComplexTypeFields = this._resolveComplexTypeToFlatFieldList(oCurrentField, aIgnoredFields);
					if (aValidComplexTypeFields) {
						aValidFields = aValidFields.concat(aValidComplexTypeFields);
					}
				} else {
					aValidFields.push(oCurrentField);
				}
			}
		}
		return aValidFields;
	};

	/**
	 * Is field using a complex type
	 * 
	 * @param {Object}
	 *          oField Field from entityType
	 * @returns {Boolean} Returns true if field is using a complex type
	 */
	ElementPreprocessor.prototype._isComplexType = function(oField) {
		if (oField && oField.type) {
			if (oField.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Check if odata property matches specific checks which identify the field as non-listable
	 * 
	 * @param {object}
	 *          oCurrentField Current property of entity set
	 * @returns {Boolean} Returns true if field is blacklisted and false if field can be added to list.
	 */
	ElementPreprocessor.prototype._isFieldBlacklisted = function(oCurrentField) {
		if (oCurrentField) {
			if (oCurrentField.name.toLowerCase().indexOf("uxfc") === 0) {
				return true;
			} else if (oCurrentField.type.toLowerCase() === "edm.time") {
				return true;
			}
		}
		return false;
	};
	/**
	 * Resolves a field from the entity type which is using a complex type into the underlying fields
	 * 
	 * @param {Object}
	 *          oComplexTypeField Field from entity type which is using the complex type
	 * @param {Array}
	 *          aIgnoredFields Fields which should be ignored
	 * @returns {Array} Returns an array with all fields of the requested complex type
	 */
	ElementPreprocessor.prototype._resolveComplexTypeToFlatFieldList = function(oComplexTypeField, aIgnoredFields) {
		var aResult = [];
		var oSchemaDefinition = this._oMetadataAnalyzer.getSchemaDefinition();

		if (oComplexTypeField && oComplexTypeField.type && oSchemaDefinition) {
			var sTypeName = this._getComplexTypeName(oComplexTypeField);
			if (sTypeName) {
				var aComplexTypes = oSchemaDefinition.complexType;
				var i = 0;
				for (i = 0; i < aComplexTypes.length; i++) {
					var oCurrentComplexType = aComplexTypes[i];
					oCurrentComplexType["complexTypePropertyName"] = oComplexTypeField.name;
					oCurrentComplexType.entityName = oComplexTypeField.entityName;
					if (oCurrentComplexType.name === sTypeName) {
						aResult = this._getFieldsFromComplexType(oCurrentComplexType, aIgnoredFields);
						break;
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Get all fields of a complex type
	 * 
	 * @param {Object}
	 *          oComplexType
	 * @param {Array}
	 *          aIgnoredFields Fields which should be ignored
	 * @returns Returns an array with fields from the complex type
	 */
	ElementPreprocessor.prototype._getFieldsFromComplexType = function(oComplexType, aIgnoredFields) {
		var aFields = this._oMetadataAnalyzer.getFieldsByComplexTypeName(oComplexType.name);
		if (aFields) {
			for (var i = 0; i < aFields.length; i++) {
				aFields[i]["isComplexProperty"] = true;
				// Within a complex type property we want the original entity type name of the reference parent entity type
				aFields[i]["entityName"] = oComplexType.entityName;
				aFields[i]["complexTypePropertyName"] = oComplexType.complexTypePropertyName;
			}
			return this._updateAndFilterFields(aFields, aIgnoredFields, true, oComplexType.name);
		}
		return [];
	};

	/**
	 * Get the name of a complex type without the namespace
	 * 
	 * @param {Object}
	 *          oComplexType
	 * @returns Returns the name of the complex type without its namespace
	 */
	ElementPreprocessor.prototype._getComplexTypeName = function(oComplexType) {
		var aTypeDescription = oComplexType.type.split(".");
		if (aTypeDescription.length === 2) {
			return aTypeDescription[1];
		}
		return null;
	};

	/**
	 * Check if a odata property is on the list of ignored fields
	 * 
	 * @param {Object}
	 *          oCurrentField Current property on entityset
	 * @param {Array}
	 *          aIgnoredFields List of ignored fields
	 * @param {Boolean}
	 *          bIsComplexType Set to true if fields are children of a complex type
	 * @returns {Boolean} Returns true if field was found on ignore list else false
	 */
	ElementPreprocessor.prototype._isFieldOnIgnoreList = function(oCurrentField, aIgnoredFields, bIsComplexType) {
		if (aIgnoredFields) {
			var numberOfEntitySets = this._aEntityTypes.length;
			var sQualifiedName = oCurrentField.entityName + "." + oCurrentField.name;
			// If number of entity sets is only one or fields are NOT children of a complex type,
			// then full qualified name or shortname is possible
			if (numberOfEntitySets === 1 && !bIsComplexType) {
				if (aIgnoredFields.indexOf(oCurrentField.name) !== -1 || aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
				}
				// else only full qualified name is valid
			} else if (aIgnoredFields.indexOf(sQualifiedName) !== -1) {
				return true;
			}
		}
		return false;
	};

	/**
	 * @param {string/array}
	 *          vEntityTypes - entity types
	 * @param {string}
	 *          sAnnotation - annotation
	 * @returns {array} - object of label and EntityType name of the entitySet
	 * @private
	 * @name ElementPreprocessor#_getEntitySets
	 * @function
	 */
	ElementPreprocessor.prototype._getEntityTypes = function(vEntityTypes, sAnnotation) {

		var aEntityTypes = [];
		var sLabel;
		var aEntityTypeNames;

		if (!this._oMetadataAnalyzer || !this._oMetadataAnalyzer._oSchemaDefinition) {
			return [];
		}

		var aAllEntityTypList = this._oMetadataAnalyzer._oSchemaDefinition.entityType;
		// TODO:
		// if (sAnnotation) {
		// aEntityTypeNames = this._oMetadataAnalyzer.getEntityTypeNameByAnnotation(sAnnotation);
		// }
		if (!vEntityTypes) {
			aEntityTypeNames = [];
			for (var t = 0; t < aAllEntityTypList.length; t++) {
				aEntityTypeNames.push(aAllEntityTypList[t].name);
			}
		}
		if (!aEntityTypeNames) {
			aEntityTypeNames = this._convertEntityTypesToArray(vEntityTypes);
		}

		for (var e = 0; e < aEntityTypeNames.length; e++) {
			sLabel = this._oMetadataAnalyzer.getEntityLabelByEntityTypeName(aEntityTypeNames[e]);
			aEntityTypes.push({
				key : aEntityTypeNames[e],
				label : sLabel || aEntityTypeNames[e]
			});
		}

		return aEntityTypes;
	};

	/**
	 * @param {string/array}
	 *          vEntityTypes - entity types
	 * @returns {array} - entity types
	 * @private
	 * @name sap.ui.comp.odata.FieldSelector#_convertEntityTypesToArray
	 * @function
	 */
	ElementPreprocessor.prototype._convertEntityTypesToArray = function(vEntityTypes) {

		if (typeof (vEntityTypes) === "string") {
			var sRawString = vEntityTypes.replace(/ /g, '');
			return sRawString.split(',');
		}

		if (jQuery.isArray(vEntityTypes)) {
			return vEntityTypes;
		}

		return undefined;
	};

	/**
	 * Destroys the inner references
	 * 
	 * @public
	 * @name sap.ui.comp.odata.FieldSelector#destroy
	 * @function
	 */
	ElementPreprocessor.prototype.destroy = function() {

		if (this._oMetadataAnalyzer && this._oMetadataAnalyzer.destroy) {
			this._oMetadataAnalyzer.destroy();
		}
		this._oMetadataAnalyzer = null;
		this._aEntityTypes = null;
	};

	return ElementPreprocessor;

}, /* bExport= */true);

}; // end of sap/ui/rta/model/ElementPreprocessor.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Hide') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Hide.
jQuery.sap.declare('sap.ui.rta.plugin.Hide'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Hide",[
	'sap/ui/dt/Plugin'
], function(Plugin) {
	"use strict";

	/**
	 * Constructor for a new Hide Plugin.
	 * 
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Hide allows trigger hide operations on the overlay
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Hide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Hide = Plugin.extend("sap.ui.rta.plugin.Hide", /** @lends sap.ui.rta.plugin.Hide.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {
				hideElement: {}
			}
		}
	});

	/**
	 * Register browser event for an overlay
	 * 
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Hide.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);
	};

	/**
	 * Detaches the browser events
	 * 
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Hide.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);
	};

	/**
	 * Handle keydown event
	 * 
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Hide.prototype._onKeyDown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.DELETE) {
			oEvent.stopPropagation();
			this.hideElement();
		}
	};

	/**
	 * The selected (not the focused) element should be hidden!
	 * 
	 * @private
	 */
	Hide.prototype.hideElement = function() {
		var oDesignTime = this.getDesignTime();
		var aSelection = oDesignTime.getSelection();
		if (aSelection.length > 0) {
			this.fireHideElement({
				selectedOverlays: aSelection
			});
		}
	};

	return Hide;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Hide.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides control sap.ui.rta.ToolsMenu.
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenu'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenu",[
	'sap/ui/rta/library',
	'sap/ui/core/Control',
	'sap/m/Toolbar',
	'sap/m/ToolbarLayoutData',
	'sap/m/ToolbarSpacer',
	'sap/m/Label',
	'sap/ui/fl/registry/Settings',
	'sap/ui/fl/Utils'
	],
	function(
		library,
		Control,
		Toolbar,
		ToolbarLayoutData,
		ToolbarSpacer,
		Label,
		FlexSettings,
		Utils) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.ToolsMenu control.
	 *
	 * @class
	 * Contains all the necessary Toolbars for the Runtime Authoring
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.ToolsMenu
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ToolsMenu = Control.extend("sap.ui.rta.ui.ToolsMenu", {
		metadata : {

			library : "sap.ui.rta",
			// ---- control specific ----
			properties : {
				"toolbarType" : "string"
			},
			aggregations : {
				"toolbars" : {
					type : "sap.m.Toolbar",
					multiple : true,
					singularName : "toolbar"
				}
			},
			events : {
				/**
				 * Events are fired when the Toolbar - Buttons are pressed
				 */
				"undo" : {},
				"redo" : {},
				"close" : {},
				"toolbarClose" : {},
				"restore": {},
				"transport" : {}
			}
		}

	});

	/**
	 * Initialization of the ToolsMenu Control
	 * @private
	 */
	ToolsMenu.prototype.init = function() {

		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

	};

	/**
	 * Create Toolbar(s)
	 * @private
	 */
	ToolsMenu.prototype.createToolbar = function() {

		var sText = null;

		if (this.getToolbarType() == "top"){
			// create top toolbar
			if (!this._oToolBarTop) {

				var oAdaptModeLabel = null;
				var oAppTitleLabel = null;
				var oButtonExit = null;
				var oSpacerTop = null;
				var oTop = null;

				// Label 'Adaptation Mode'
				sText = " - " + this._oRb.getText("TOOLBAR_TITLE");
				oAdaptModeLabel = new Label({
					text : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				oAdaptModeLabel.bAllowTextSelection = false;

				// Label 'Application Name'
				sText = null;
				oAppTitleLabel = new Label({
					text : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				oAppTitleLabel.bAllowTextSelection = false;

				// Button 'Restore'
				sText = this._oRb.getText("BTN_RESTORE");
				this._oButtonRestore = new sap.m.Button({
					type:"Transparent",
					text : sText,
					visible: true,
					tooltip : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				this._oButtonRestore.data("Action", "RESTORE",true);
				this._oButtonRestore.attachEvent('press', this._onRestore, this);

				// Button 'Exit'
				sText = this._oRb.getText("BTN_EXIT");
				oButtonExit = new sap.m.Button({
					type:"Transparent",
					text : sText,
					tooltip : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				oButtonExit.data("Action", "EXIT",true);
				oButtonExit.attachEvent('press', this.close, this);

				// Button 'Transport'
				sText = this._oRb.getText("BTN_TRANSPORT");
				this._oButtonTransport = new sap.m.Button({
					type:"Transparent",
					text : "Transport",
					visible : false,
					tooltip : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				this._oButtonTransport.data("Action", "TRANSPORT", true);
				this._oButtonTransport.attachEvent('press', this._onTransport, this);

				// Space between Toolbar Elements
				oSpacerTop = new ToolbarSpacer();

				//create Toolbar
				this._oToolBarTop = new Toolbar({
					active : true,
					content : [
					           oAppTitleLabel,
					           oAdaptModeLabel,
					           oSpacerTop,
					           this._oButtonRestore,
					           this._oButtonTransport,
					           oButtonExit
					           ]
				});

				this._oToolBarTop.addStyleClass("sapUiRTAToolBarTop");
				this.addToolbar(this._oToolBarTop);

				// Insert a DIV-Element for Top Toolbar in the DOM
				jQuery("body").prepend("<div id='RTA-ToolbarTop'></div>");
				oTop = jQuery("#RTA-ToolbarTop").addClass("sapUiRTAToolsMenuWrapper");
				oTop = oTop[0];
				this.placeAt(oTop);
			}
		} else {
			// create bottom toolbar
			if (!this._oToolBarBottom) {

				var oSpacerBottomLeft = null;
				var oSpacerBottomRight = null;
				var oBottom = null;
				// Button 'Undo'
				sText = this._oRb.getText("BTN_UNDO");
				this._oButtonUndo = new sap.m.Button({
					type:"Transparent",
					icon: "sap-icon://undo",
					enabled : false,
					tooltip : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				this._oButtonUndo.data("Action", "UNDO",true);
				this._oButtonUndo.attachEvent('press', this._onUndo, this);

				// Button 'Redo'
				sText = this._oRb.getText("BTN_REDO");
				this._oButtonRedo = new sap.m.Button({
					type:"Transparent",
					icon: "sap-icon://redo",
					iconFirst: false,
					enabled : false,
					tooltip : sText,
					layoutData : new ToolbarLayoutData({
						shrinkable : false
					})
				});
				this._oButtonRedo.data("Action", "REDO",true);
				this._oButtonRedo.attachEvent('press', this._onRedo, this);

				oSpacerBottomLeft = new ToolbarSpacer();
				oSpacerBottomRight = new ToolbarSpacer();

				//create the Toolbar
				this._oToolBarBottom = new Toolbar({
					active : true,
					content : [
					           oSpacerBottomLeft,
					           this._oButtonUndo,
					           this._oButtonRedo,
					           oSpacerBottomRight
					]
				});

				this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottom");
				this.addToolbar(this._oToolBarBottom);

				// Insert a DIV-Element for Bottom Toolbar in the DOM
				jQuery("body").append("<div id='RTA-ToolbarBottom'></div>");
				oBottom = jQuery("#RTA-ToolbarBottom").addClass("sapUiRTAToolsMenuWrapper");
				oBottom = oBottom[0];
				this.placeAt(oBottom);
			}
		}
	};

	/**
	 * Override the EXIT-Function
	 * @private
	 */
	ToolsMenu.prototype.exit = function() {
		// Remove the DOM-Elements for the Toolbars
		if (this.getToolbarType() == "top"){
			jQuery("#RTA-ToolbarTop").remove();
		} else {
			jQuery("#RTA-ToolbarBottom").remove();
		}
	};

	/**
	 * Trigger transport
	 * @private
	 */
	ToolsMenu.prototype._onTransport = function() {
		this.fireTransport();
	};

	/**
	 * Check if the transports are available,
	 * transports are available in non-productive systems
	 * and no merge errors has occoured
	 * currently set's the visibility for Transport and Restore button
	 * @private
	 * @returns {Promise}
	 */
	ToolsMenu.prototype._checkTransportAvailable = function() {
		var that = this;
		return FlexSettings.getInstance(Utils.getComponentClassName(this._oRootControl)).then(function(oSettings) {
			if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
				that._oButtonTransport.setVisible(true);
			}
		});
	};

	/**
	 * Makes the Toolbar(s) visible
	 * @public
	 */
	ToolsMenu.prototype.show = function() {

		if (this.getToolbarType() == "top"){
			this._oToolBarTop.addStyleClass("sapUiRTAToolBarTopVisible");
			this._oToolBarTop.removeStyleClass("sapUiRTAToolBarTopInvisible");
		} else {
			this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottomVisible");
			this._oToolBarBottom.removeStyleClass("sapUiRTAToolBarBottomInvisible");
		}
	};

	/**
	 * Makes the TOP Toolbar invisible
	 * @public
	 */
	ToolsMenu.prototype.hide = function() {
		var that = this;

		if (this.getToolbarType() == "top"){

			this._oToolBarTop.addStyleClass("sapUiRTAToolBarTopInvisible");
			var oToolBarDOM = document.getElementsByClassName("sapUiRTAToolBarTop")[0];
			var fnAnimationEnd = function() {
				that.fireClose();
			};
			// all types of CSS3 animationend events for different browsers
			oToolBarDOM.addEventListener("webkitAnimationEnd", fnAnimationEnd);
			oToolBarDOM.addEventListener("animationend", fnAnimationEnd);
			oToolBarDOM.addEventListener("oanimationend", fnAnimationEnd);
		} else {
			this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottomInvisible");
		}
	};

	/**
	 * Trigger undo
	 * @private
	 */
	ToolsMenu.prototype._onUndo = function() {

		this.fireUndo();
	};

	/**
	 * Trigger redo
	 * @private
	 */
	ToolsMenu.prototype._onRedo = function() {

		this.fireRedo();
	};

	/**
	 * Discard all the LREP changes and restore the default app state
	 * @private
	 */
	ToolsMenu.prototype._onRestore = function() {

		this.fireRestore();
	};

	/**
	 * Closing the ToolsMenu
	 * @public
	 */
	ToolsMenu.prototype.close = function() {

		this.fireToolbarClose();

	};

	/**
	 * Set the Application Title
	 * @param {string} sTitle Application Title
	 * @public
	 */
	// Method for setting the Application Title
	ToolsMenu.prototype.setTitle = function(sTitle) {

		if (this.getToolbarType() == "top"){
			var oLabel = this._oToolBarTop.getContent()[0];
			oLabel.setText(sTitle);
		}
	};

	/**
	 * Set the root control
	 * @param {sap.ui.core.Control} oControl - SAPUI5 control
	 * @public
	 */
	ToolsMenu.prototype.setRootControl = function(oControl) {
		this._oRootControl = oControl;
	};

	/**
	 * Adapt the visibility of the buttons in the ToolsMenu
	 * depending on which features the system offers
	 * @private
	 */
	ToolsMenu.prototype.adaptButtonsVisibility = function() {
		// Transport & Restore Button
		this._checkTransportAvailable();
	};

	/**
	 * Adapt the enablement of the und/redo buttons in the ToolsMenu
	 */
	ToolsMenu.prototype.adaptUndoRedoEnablement = function(bCanUndo,bCanRedo) {
		this._oButtonUndo.setEnabled(bCanUndo);
		this._oButtonRedo.setEnabled(bCanRedo);
	};

	return ToolsMenu;

}, /* bExport= */ true);
}; // end of sap/ui/rta/ui/ToolsMenu.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.ToolsMenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides default renderer for control sap.ui.rta.ToolsMenu
jQuery.sap.declare('sap.ui.rta.ui.ToolsMenuRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/ToolsMenuRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * @author SAP SE
	 * @class ToolsMenu renderer.
	 * @static
	 */
	var ToolsMenuRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ToolsMenuRenderer.render = function(oRm, oControl) {

		// check if bottom toolbar is last child of body and move it if not
		var iChildren = jQuery("body").children().length;
		if (jQuery("body").children()[iChildren - 1] != jQuery("#RTA-ToolbarBottom")){
			jQuery("body").append(jQuery("#RTA-ToolbarBottom"));
		}

		if (oControl.getToolbars().length !== 0){
			oControl.getToolbars().forEach(function(oCtrl){
				oRm.renderControl(oCtrl);
			});
		}
	};
	return ToolsMenuRenderer;

}, /* bExport= */ true);
}; // end of sap/ui/rta/ui/ToolsMenuRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepLocalStorage",[], function() {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep localStorage
	 * 
	 * @class
	 * Utility functionality for SAP RTA Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepLocalStorage
	 */

	var RTA_LREP_KEY = "sap.ui.rta.change";
	var FakeLrepLocalStorage = {};

	/**
	 * Creates the RTA Lrep change key
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {String} the prefixed id
	 */
	FakeLrepLocalStorage.createChangeKey = function(sId) {

		if (sId) {
			return RTA_LREP_KEY + "." + sId;
		}
	};

	/**
	 * The iterator for the local RTA Lrep changes (localStorage)
	 * @public
	 * @param {function} fnPredicate - the function to apply for each RTA cahnge
	 */
	FakeLrepLocalStorage.forEachLrepChangeInLocalStorage = function(fnPredicate) {

		for (var sKey in window.localStorage) {

			if (sKey.indexOf(RTA_LREP_KEY) > -1) {
				fnPredicate(sKey);
			}
		}
	};

	/**
	 * Get a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @returns {Object} the specific change
	 */
	FakeLrepLocalStorage.getChange = function(sId) {

		if (sId) {

			var sChange = window.localStorage.getItem(this.createChangeKey(sId));
			return JSON.parse(sChange);
		}
	};

	/**
	 * Get all RTA Lrep changes (localStorage)
	 * @returns {Object[]} all local RTA changes
	 */
	FakeLrepLocalStorage.getChanges = function() {

		var aChanges = [],
			oChange;

		this.forEachLrepChangeInLocalStorage(function(sKey) {

			oChange = JSON.parse(window.localStorage[sKey]);
			aChanges.push(oChange);
		});

		return aChanges;
	};

	/**
	 * Get the number of RTA Lrep changes (localStorage)
	 * @returns {Number} the amout of local RTA Lrep changes
	 */
	FakeLrepLocalStorage.getNumChanges = function() {

		var iChanges = 0;

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			iChanges++;
		});

		return iChanges;
	};
	
	FakeLrepLocalStorage._aModifyCallbacks = [];
	
	/**
	 * Use this in tests to ensure the modify operation happend
	 * @param {Function} fnCallback callback, which is called, when the local storage is 
	 */
	FakeLrepLocalStorage.attachModifyCallback = function(fnCallback) {
		this._aModifyCallbacks.push(fnCallback);
	};
	
	/**
	 * Stop listening on modify operations
	 * @param {Function} fnCallback callback to be removed
	 */
	FakeLrepLocalStorage.detachModifyCallback = function(fnCallback) {
		var i = this._aModifyCallbacks.indexOf(fnCallback);
		if (i !== -1){
			this._aModifyCallbacks.splice(i,1);
		}
	};
	
	FakeLrepLocalStorage._callModifyCallbacks = function() {
		this._aModifyCallbacks.forEach(function(fnCallback){
			fnCallback();
		});
	};
	/**
	 * Delete a specific RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 */
	FakeLrepLocalStorage.deleteChange = function(sId) {

		if (sId) {
			window.localStorage.removeItem(this.createChangeKey(sId));
		}
		
		this._callModifyCallbacks();
	};

	/**
	 * Delete all RTA Lrep changes (localStorage)
	 * @public
	 */
	FakeLrepLocalStorage.deleteChanges = function() {

		this.forEachLrepChangeInLocalStorage(function(sKey) {
			window.localStorage.removeItem(sKey);
		});
		this._callModifyCallbacks();
	};

	/**
	 * Save a RTA Lrep change (localStorage)
	 * @public
	 * @param  {String} sId - the Lrep change id
	 * @param  {Object} oChange - the change object
	 */
	FakeLrepLocalStorage.saveChange = function(sId, oChange) {

		if (sId && oChange) {

			var sChangeKey = this.createChangeKey(sId),
				sChange = JSON.stringify(oChange);

			window.localStorage.setItem(sChangeKey, sChange);
		}
		this._callModifyCallbacks();
	};

	return FakeLrepLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.Utils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
/*global Promise*/
// Provides object sap.ui.rta.Utils.
jQuery.sap.declare('sap.ui.rta.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageSection'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui
		.define("sap/ui/rta/Utils",
				['jquery.sap.global', 'sap/ui/fl/Utils', 'sap/ui/dt/OverlayUtil',
						'sap/ui/comp/odata/FieldSelectorModelConverter', 'sap/ui/fl/registry/Settings',
						'sap/ui/comp/smartform/GroupElement', 'sap/ui/comp/smartform/Group', 'sap/ui/comp/smartfield/SmartField',
						'sap/uxap/ObjectPageSection', 'sap/uxap/ObjectPageLayout', 'sap/ui/core/StashedControlSupport', 'sap/m/MessageBox',
						'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/rta/model/ElementPreprocessor'],
				function(jQuery, FlexUtils, OverlayUtil, FieldSelectorModelConverter, Settings,
						GroupElement, Group, SmartField, ObjectPageSection, ObjectPageLayout, StashedControlSupport, MessageBox,
						MetadataAnalyser, ElementPreprocessor) {
					"use strict";

					/**
					 * Class for Utils.
					 *
					 * @class Utility functionality to work with controls, e.g. iterate through aggregations, find parents, ...
					 *
					 * @author SAP SE
					 * @version 1.38.33
					 *
					 * @private
					 * @static
					 * @since 1.30
					 * @alias sap.ui.rta.Utils
					 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
					 *               might be changed in future.
					 */

					var Utils = {};

					Utils.RESOLVED_PROMISE = Promise.resolve(true);

					Utils._sFocusableOverlayClass = ".sapUiDtOverlaySelectable";
					/**
					 * Utility function to check if extensibility is enabled in the current system
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Promise} resolves a boolean
					 */
					Utils.isExtensibilityEnabledInSystem = function(oControl) {
						var sComponentName = FlexUtils.getComponentClassName(oControl);
						if (!sComponentName || sComponentName == "") {
							return Promise.resolve(false);
						}
						return Settings.getInstance(sComponentName).then(function(oSettings) {
							if (oSettings.isModelS) {
								return oSettings.isModelS();
							}
							return false;
						});
					};

					/**
					 * Utility function to check if the OData service is updated in the meantime
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Promise} resolved when done with boolean if saying  service is up to date
					 */
					Utils.isServiceUpToDate = function(oControl) {
						return this.isExtensibilityEnabledInSystem(oControl).then(function(bEnabled) {
							if (bEnabled) {
								jQuery.sap.require("sap.ui.fl.fieldExt.Access");
								var oModel = oControl.getModel();
								if (oModel) {
									var bServiceOutdated = sap.ui.fl.fieldExt.Access.isServiceOutdated(oModel.sServiceUrl);
									if (bServiceOutdated) {
										sap.ui.fl.fieldExt.Access.setServiceValid(oModel.sServiceUrl);
										//needs FLP to trigger UI restart popup
										sap.ui.getCore().getEventBus().publish("sap.ui.core.UnrecoverableClientStateCorruption","RequestReload",{});
										return false;
									}
								}
							}
							return true;
						});
					};

					/**
					 * Utility function to check via backend calls if the custom field button shall be enabled or not
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {Boolean} true if CustomFieldCreation functionality is to be enabled, false if not
					 */
					Utils.isCustomFieldAvailable = function(oControl) {
						var that = this;
						return this.isExtensibilityEnabledInSystem(oControl).then(function(bShowCreateExtFieldButton) {
							if (!bShowCreateExtFieldButton) {
								return Promise.resolve();
							} else {

								var oFieldSelectorModelConverter = new FieldSelectorModelConverter(oControl.getModel());
								var oMDA = oFieldSelectorModelConverter.getMetaDataAnalyzer();
								var sEntityType = that.getBoundEntityType(oControl);

								try {
									jQuery.sap.require("sap.ui.fl.fieldExt.Access");
									var oJQueryDeferred = sap.ui.fl.fieldExt.Access.getBusinessContexts(oMDA.oModel.sServiceUrl,
											sEntityType);
									oJQueryDeferred.fail(function(oError) {
										if (oError) {
											if (jQuery.isArray(oError.errorMessages)) {
												for (var i = 0; i < oError.errorMessages.length; i++) {
													jQuery.sap.log.error(oError.errorMessages[i].text);
												}
											}
										}
										return Promise.resolve(false);
									});
									return oJQueryDeferred.then(function(oResult) {
										if (oResult) {
											if (oResult.BusinessContexts) {
												if (oResult.BusinessContexts.length > 0) {
													oResult.EntityType = sEntityType;
													return Promise.resolve(oResult);
												}
											}
										}
									});
								} catch (oError) {
									jQuery.sap.log
											.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts", oError);
									return Promise.resolve();
								}
							}
						});
					};

					/**
					 * Opens a confirmation dialog indicating mandatory fields if necessary.
					 *
					 * @param oElement
					 *          the analyzed control
					 * @param a
					 *          list of mandatory fields
					 * @return true if user says okay, false if not
					 */
					Utils.openHideElementConfirmationDialog = function(oElement, aUnHideableElements) {

						var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
						var sTitle;
						return new Promise(
								function(resolve, reject) {

									sTitle = oTextResources.getText("CTX_HIDE_TITLE");
									var mandatoryFieldList = '';
									var sMessageText = '';
									if ((oElement instanceof Group) || (aUnHideableElements.length > 1)) {
										mandatoryFieldList = '<ul>';
										for (var i = 0; i < aUnHideableElements.length; i++) {
											mandatoryFieldList += '<li>' + Utils.getLabelForElement(aUnHideableElements[i]) + '</li>';
										}
										mandatoryFieldList += '</ul>';
										sMessageText = oTextResources.getText("CTX_HIDE_MANDATORY_FIELDS_MESSAGE");
									} else {
										sMessageText = oTextResources.getText("CTX_HIDE_MANDATORY_FIELD_MESSAGE");
									}

									// create some dummy JSON data and create a Model from it
									var data = {
										mandatoryFieldList : mandatoryFieldList,
										messageText : sMessageText,
										titleText : sTitle,
										hideText : oTextResources.getText("BTN_FREP_REMOVE"),
										cancelText : oTextResources.getText("BTN_FREP_CANCEL")
									};
									var oModel = new sap.ui.model.json.JSONModel();
									oModel.setData(data);

									var oFragmentDialog;
									var fnCleanUp = function() {
										if (oFragmentDialog) {
											oFragmentDialog.close();
											oFragmentDialog.destroy();
											oFragmentDialog = null;
										}
									};

									// create a controller for the action in the Dialog
									var oFragmentController = {
										hideField : function() {
											fnCleanUp();
											resolve(true);
										},
										closeDialog : function() {
											fnCleanUp();
											resolve(false);
										}
									};

									// instantiate the Fragment if not done yet
									if (!oFragmentDialog) {
										oFragmentDialog = sap.ui.xmlfragment("sap.ui.rta.view.HideElementDialog", oFragmentController);
										oFragmentDialog.setModel(oModel);
									}
									oFragmentDialog.open();

								});
					};

					/**
					 * Checks if element is hideable
					 *
					 * @returns {boolean} whether the element can be hidden or not
					 * @public
					 */
					Utils.isElementHideable = function(oElement) {
						return ((oElement instanceof GroupElement || oElement instanceof Group || oElement instanceof ObjectPageSection) && !this
								.isElementMandatory(oElement));
					};

					Utils.isMandatorySmartField = function(oElement) {
						return (oElement instanceof SmartField) && oElement.getMandatory();
					};

					/**
					 * Checks if element is mandatory
					 *
					 * @returns {boolean} whether the element is mandatory or not
					 * @public
					 */
					Utils.isElementMandatory = function(oElement) {
						var bMandatory = false;

						if (oElement instanceof GroupElement) {
							var aFields = oElement.getFields();
							for (var i = 0; i < aFields.length; i++) {
								var oGroupElement = aFields[i];
								if (this.isMandatorySmartField(oGroupElement)) {
									// Break searching all SmartFields and get back on the
									// first found mandatory rendered SmartField
									bMandatory = true;
									break;
								}
							}
						} else if (oElement instanceof Group) {
							var aGroupElements = oElement.getGroupElements();
							for (var j = 0; j < aGroupElements.length; j++) {
								return this.isElementMandatory(aGroupElements[j]);
							}
						}
						return bMandatory;
					};

					/**
					 * Checks if overlay is selectable in RTA (selectable also means focusable for RTA)
					 *
					 * @param {sap.ui.dt.ElementOverlay}
					 *          oOverlay to check
					 * @returns {boolean} if is selectable
					 * @private
					 */
					Utils.isOverlaySelectable = function(oOverlay) {
						// check the real DOM visibility should be preformed while oOverlay.isVisible() can be true, but if element
						// has no geometry, overlay will not be visible in UI
						return oOverlay.isSelectable() && oOverlay.$().is(":visible");
					};

					Utils.getPropertyValue = function(oElement, sPropertyName) {
						var oMetadata = oElement.getMetadata().getPropertyLikeSetting(sPropertyName);
						var sPropertyGetter = oMetadata._sGetter;
						return oElement[sPropertyGetter]();
					};

					/**
					 * Returns the previous editable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getPreviousSelectableOverlay = function(oOverlay) {
						var oPreviousOverlay = OverlayUtil.getPreviousOverlay(oOverlay);

						while (oPreviousOverlay && !this.isOverlaySelectable(oPreviousOverlay)) {
							oPreviousOverlay = OverlayUtil.getPreviousOverlay(oPreviousOverlay);
						}
						return oPreviousOverlay;
					};

					/**
					 * Returns the next editable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getNextSelectableOverlay = function(oOverlay) {
						var oNextOverlay = OverlayUtil.getNextOverlay(oOverlay);

						while (oNextOverlay && !this.isOverlaySelectable(oNextOverlay)) {
							oNextOverlay = OverlayUtil.getNextOverlay(oNextOverlay);
						}
						return oNextOverlay;
					};

					/**
					 * Returns overlay instance for an overlay's dom element
					 *
					 * @param {element}
					 *          oDomRef DOM element
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getOverlayInstanceForDom = function(oDomRef) {
						var sId = jQuery(oDomRef).attr("id");
						if (sId) {
							return sap.ui.getCore().byId(sId);
						}
					};

					/**
					 * Returns the first focusable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getFirstFocusableOverlay = function() {
						var $overlay = jQuery(this._sFocusableOverlayClass).first();
						var oOverlay = this.getOverlayInstanceForDom($overlay);
						if (!this.isOverlaySelectable(oOverlay)) {
							oOverlay = this.getNextSelectableOverlay(oOverlay);
						}
						return oOverlay;
					};

					/**
					 * Returns the last focusable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getLastFocusableOverlay = function() {
						var $overlay = jQuery(this._sFocusableOverlayClass).last();
						var oOverlay = this.getOverlayInstanceForDom($overlay);
						if (!this.isOverlaySelectable(oOverlay)) {
							oOverlay = this.getPreviousSelectableOverlay(oOverlay);
						}
						return oOverlay;
					};

					/**
					 * Returns the next focusable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getNextFocusableOverlay = function() {
						var oFocusedOverlay = this.getFocusedOverlay();
						if (oFocusedOverlay) {
							return this.getNextSelectableOverlay(oFocusedOverlay);
						}
					};

					/**
					 * Returns the previous focusable overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getPreviousFocusableOverlay = function() {
						var oFocusedOverlay = this.getFocusedOverlay();
						if (oFocusedOverlay) {
							return this.getPreviousSelectableOverlay(oFocusedOverlay);
						}
					};

					/**
					 * Returns the focused overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getFocusedOverlay = function() {
						if (document.activeElement) {
							var oElement = sap.ui.getCore().byId(document.activeElement.id);
							if (oElement instanceof sap.ui.dt.ElementOverlay) {
								return oElement;
							}
						}
					};

					/**
					 * Returns the first focusable child overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getFirstFocusableChildOverlay = function(oOverlay) {
						var oFirstFocusableChildOverlay = OverlayUtil.getFirstChildOverlay(oOverlay);

						while (oFirstFocusableChildOverlay && !this.isOverlaySelectable(oFirstFocusableChildOverlay)) {
							oFirstFocusableChildOverlay = OverlayUtil.getNextSiblingOverlay(oFirstFocusableChildOverlay);
						}
						return oFirstFocusableChildOverlay;
					};

					/**
					 * Returns the next focusable sibling overlay
					 *
					 * @return {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getNextFocusableSiblingOverlay = function(oOverlay) {
						var oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oOverlay);

						while (oNextFocusableSiblingOverlay && !this.isOverlaySelectable(oNextFocusableSiblingOverlay)) {
							oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oNextFocusableSiblingOverlay);
						}
						return oNextFocusableSiblingOverlay;
					};

					/**
					 * Returns the previous focusable sibling overlay
					 *
					 * @returns {sap.ui.dt.ElementOverlay} overlay object
					 * @private
					 */
					Utils.getPreviousFocusableSiblingOverlay = function(oOverlay) {
						var oPreviousFocusableSiblingOverlay = OverlayUtil.getPreviousSiblingOverlay(oOverlay);

						while (oPreviousFocusableSiblingOverlay && !this.isOverlaySelectable(oPreviousFocusableSiblingOverlay)) {
							oPreviousFocusableSiblingOverlay = OverlayUtil
									.getPreviousSiblingOverlay(oPreviousFocusableSiblingOverlay);
						}
						return oPreviousFocusableSiblingOverlay;
					};

					/**
					 * get closest view in parent tree for an element
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement element object
					 * @returns {sap.ui.core.Element} oElement element object
					 * @private
					 */
					Utils.getClosestViewFor = function(oElement) {
						if (!oElement && !oElement.getParent) {
							return;
						}
						var oParentElement = oElement.getParent();
						if (oParentElement && oParentElement.getMetadata().getName() !== "sap.ui.core.mvc.XMLView") {
							return this.getClosestViewFor(oParentElement);
						}
						return oParentElement;
					};

					/*
					 * Looks for parent control with specified class name @param {sap.ui.core.Control} oControl Control to be
					 * checked @param {string} sType class name of parent control @returns {sap.ui.core.Control} the parent
					 * control @private
					 */
					Utils.getClosestTypeForControl = function(oControl, sType) {
						if (oControl && oControl.getMetadata().getName() !== sType) {
							return this.getClosestTypeForControl(oControl.getParent(), sType);
						}
						return oControl;
					};

					/*
					 * Checks if control is supported @param {sap.ui.core.Control} oControl Control to be checked @private
					 */
					Utils._checkIsSupportedControl = function(oControl, aSupportedControls) {
						for (var i = 0; i < aSupportedControls.length; i++) {
							if (oControl.getMetadata().getName() === aSupportedControls[i]) {
								return true;
							}
						}
					};

					/*
					 * Checks whether a Group has Fields which are not bound to an OData model. @param
					 * {sap.ui.comp.smartform.Group} oGroup Control to be checked @returns {boolean} false if group has no fields
					 * with oData binding. @private
					 */
					Utils.hasGroupUnBoundFields = function(oGroup) {
						var aElements = oGroup.getGroupElements();
						for (var j = 0; j < aElements.length; j++) {
							var oElement = aElements[j];
							if (!this.hasGroupElementBoundFields(oElement)) {
								return true;
							}
						}
						return false;
					};

					/*
					 * Checks whether a GroupElement has Fields which are bound to an OData model. @param
					 * {sap.ui.comp.smartform.GroupElement} GroupElement Control to be checked @returns {boolean} true if one
					 * field has oData binding. @private
					 */
					Utils.hasGroupElementBoundFields = function(oGroupElement) {
						var aElements = oGroupElement.getFields();
						if (aElements.length === 0 || !oGroupElement.getVisible()) {
							return true;
						}
						for (var j = 0; j < aElements.length; j++) {
							var oElement = aElements[j];
							if (!oElement.getDomRef()) {
								continue;
							}
							if (this._isElementBound(oElement)) {
								return true;
							}
						}
						return false;
					};

					/**
					 * Checks whether a GroupElement has Fields which are not bound to an OData model.
					 *
					 * @param {sap.ui.comp.smartform.GroupElement}
					 *          GroupElement Control to be checked
					 * @returns {boolean} true if one field has oData binding.
					 * @private
					 */
					Utils.hasGroupElementUnBoundFields = function(oGroupElement) {
						var aElements = oGroupElement.getFields();
						if (aElements.length === 0) {
							return true;
						}
						for (var j = 0; j < aElements.length; j++) {
							var oElement = aElements[j];
							if (!oElement.getDomRef()) {
								continue;
							}
							if (!this._isElementBound(oElement)) {
								return true;
							}
						}
						return false;
					};

					/**
					 * Returns the mandatory fields of a group.
					 *
					 * @param {sap.ui.comp.smartform.GroupElement}
					 *          GroupElement Control to be checked
					 * @returns [object] the array of mandatory fields
					 * @private
					 */
					Utils.getGroupMandatoryElements = function(oGroup) {
						var aResult = [];
						if (oGroup instanceof Group) {
							var aElements = oGroup.getGroupElements();
							for (var i = 0; i < aElements.length; i++) {
								var oElement = aElements[i];
								var aFields = oElement.getFields();
								for (var j = 0; j < aFields.length; j++) {
									var oField = aFields[j];
									if (!oField.getDomRef()) {
										continue;
									}
									if (this.isMandatorySmartField(oField)) {
										aResult.push(oElement);
										break;
									}
								}
							}
						}
						return aResult;
					};

					/**
					 * Checks whether an ObjectPageLayout has sections which are not visible.
					 *
					 * @param {ObjectPageLayout}
					 *          or {ObjectPageSection} ObjectPage Control
					 * @returns {array} array with ObjectPageSection objects
					 * @private
					 */
					Utils.getObjectPageSections = function(oObjectPageControl) {
						var oObjectPageLayout;
						var aSections = [];
						var aStashedSections = [];
						if (oObjectPageControl.getMetadata().getName() === "sap.uxap.ObjectPageSection") {
							oObjectPageLayout = oObjectPageControl.getParent();
						} else if (oObjectPageControl.getMetadata().getName() === "sap.uxap.ObjectPageLayout") {
							oObjectPageLayout = oObjectPageControl;
						}
						aSections = oObjectPageLayout.getAggregation("sections");

						aStashedSections = StashedControlSupport.getStashedControls(oObjectPageLayout.getId());
						aSections = aSections.concat(aStashedSections);

						return aSections;
					};



					/**
					 * Checks whether an ObjectPageLayout has sections which are not visible.
					 *
					 * @param {ObjectPageLayout}
					 *          or {ObjectPageSection} ObjectPage Control to be checked
					 * @returns {boolean} true if one section is invisible.
					 * @private
					 */
					Utils.hasObjectPageLayoutInvisibleSections = function(oObjectPageControl) {
						var aSections = Utils.getObjectPageSections(oObjectPageControl);

						if (aSections.length === 0) {
							return false;
						}
						for (var i = 0; i < aSections.length; i++) {
							if ((aSections[i].getVisible && aSections[i].getVisible() === false) ||
									(aSections[i].getStashed && aSections[i].getStashed() === true)) {
								return true;
							}
						}
						return false;
					};

					/**
					 * Checks whether an Element is bound to an OData Model.
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement element to be checked
					 * @returns {boolean} true if element has oData binding.
					 * @private
					 */
					Utils._isElementBound = function(oElement) {
						var mBindingInfos = oElement.mBindingInfos;
						// No Binding at all
						if (Object.keys(mBindingInfos).length === 0) {
							return false;
						} else {
							for ( var oPropertyName in mBindingInfos) {
								var aParts = mBindingInfos[oPropertyName].parts;
								for (var i = 0; i < aParts.length; i++) {
									if (aParts[i].model) {
										var sModelName = oElement.getModel(aParts[i].model).getMetadata().getName();
										if (sModelName === "sap.ui.model.odata.ODataModel"
												|| sModelName === "sap.ui.model.odata.v2.ODataModel") {
											return true;
										}
									} else {
										var sModelName = oElement.getModel().getMetadata().getName();
										if (sModelName === "sap.ui.model.odata.ODataModel"
												|| sModelName === "sap.ui.model.odata.v2.ODataModel") {
											return true;
										}
									}
								}
							}
						}
					};

					/**
					 * Determines the target index depending on the selected control
					 *
					 * @param {sap.ui.core.Control}
					 *          oSelectedControl Selected Control
					 * @param {sap.ui.core.Control}
					 *          oSelectedBlock Selected block of Controls
					 * @param {Array}
					 *          aControls Array of controls in the block
					 * @returns {integer} iTargetIndex the target index
					 * @private
					 */
					Utils.determineTargetIndex = function(oSelectedControl, oSelectedBlock, aControls, iOffset) {
						var fnClass = oSelectedBlock.getMetadata().getClass();
						var iTargetIndex = (oSelectedControl instanceof fnClass) ? aControls.length - iOffset : aControls.indexOf(oSelectedControl) + 1;

						return iTargetIndex;
					};

					/**
					 * Walks up the DOM to find the next supported block element
					 *
					 * @param {sap.ui.core.Control}
					 *          oControl Control to be checked
					 * @returns {sap.ui.core.Control} the next supported block control
					 * @private
					 */
					Utils.findSupportedBlock = function(oControl, aSupportedControls) {
						if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
							return oControl;
						} else {
							oControl = oControl.getParent();
							while (oControl) {
								if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
									return oControl;
								}
								oControl = oControl.getParent();
							}
						}
					};

					/**
					 * Creates a unique id for a smartField control based on its parent group, entityType and binding path.
					 *
					 * @param {sap.ui.comp.smartform.Group}
					 *          oGroup Control.
					 * @param {String}
					 *          sEntityType entityType which is bound to the group control.
					 * @param {String}
					 *          sBindingPath binding path of the smartField for which a new Id should be created.
					 * @returns {String} new string Id
					 * @private
					 */
					Utils.createFieldLabelId = function(oGroup, sEntityType, sBindingPath) {
						var sControlId = oGroup.getId() + "_" + sEntityType + "_" + sBindingPath;
						sControlId = sControlId.replace("/", "_");
						return sControlId;
					};

					/**
					 * Secure extract a label from an element
					 *
					 * @param {Object}
					 *          any Object
					 * @return {String} a label string or undefined
					 */
					Utils.getLabelForElement = function(oElement) {
						// first try getlabelText(), if not available try getLabel().getText()
						var sFieldLabel = oElement.getLabelText ? oElement.getLabelText() : undefined;
						if (!sFieldLabel) {
							sFieldLabel = oElement.getLabel ? oElement.getLabel() : undefined;
						}
						if (!sFieldLabel) {
							sFieldLabel = oElement.getText ? oElement.getText() : undefined;
						}
						return (typeof sFieldLabel) === "string" ? sFieldLabel : undefined;
					};

					/**
					 * Secure extract path for a binding info.
					 *
					 * @param {Object}
					 *          any Object
					 * @return {String} a path string or undefined
					 */
					Utils.getPathFromBindingInfo = function(oInfo, mBindingInfo) {
						var sPath = mBindingInfo[oInfo] ? mBindingInfo[oInfo] : undefined;
						if (sPath) {
							if ((sPath.parts instanceof Array) && sPath.parts.length > 0) {
								sPath = sPath.parts[0] ? sPath.parts[0] : undefined;
							}
							sPath = ((typeof sPath.path) === "string") ? sPath.path : sPath;
						}
						if ((typeof sPath) === "string") {
							sPath = sPath;
						} else {
							sPath = undefined;
						}
						return sPath;
					};

					/**
					 * Get the entity type based on the binding of a control
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement any Object
					 * @return {String} entity type without namespace
					 */
					Utils.getBoundEntityType = function(oElement) {
						var oModel = oElement.getModel();
						var oBindingContext = oElement.getBindingContext();
						var oEntityTypeMetadata = oModel.oMetadata._getEntityTypeByPath(oBindingContext.getPath());
						return oEntityTypeMetadata.name;
					};

					/**
					 * Allow window.open to be stubbed in tests
					 */
					Utils.openNewWindow = function(sUrl) {
						window.open(sUrl, "_blank");
					};

					// Example: Utils.withTimeLog(this, function(a, b) { return a + b;}, [3, 4]);
					/**
					 * @private
					 */
					// Utils._withTimeLog = function(reciever, fFunctionToBeMeassured, aArguments) {
					// var s = performance.now();
					// var solution = fFunctionToBeMeassured.apply(reciever, aArguments);
					// var result = performance.now() - s;
					// console.error("findChangedFieldLabels_new took " + result + " ms.");
					// return solution;
					// };
					// Some control providers use the odata metadata and others simply stashed fields (objectPage)
					Utils.fetchODataPropertiesFor = function(oModel) {
						var that = this;
						if (!oModel) {
							return new Promise(function(resolve, reject) {
								reject();
							});
						}

						this._oMetadataAnalyzer = new MetadataAnalyser(oModel);
						var oElementPreprocessing = new ElementPreprocessor(this._oMetadataAnalyzer);
						var oMetaModel = oModel.getMetaModel();

						return oMetaModel.loaded().then(
								function() {
									var aEntityTypeNames = that._oMetadataAnalyzer.getAllEntityTypeNames();
									var mAvailableElements = {};
									aEntityTypeNames.forEach(function(sEntityTypeName) {
										mAvailableElements[sEntityTypeName] = that._oMetadataAnalyzer
												.getFieldsByEntityTypeName(sEntityTypeName);
									});
									Object.keys(mAvailableElements).forEach(function(sKey) {
										mAvailableElements[sKey] = oElementPreprocessing._updateAndFilterFields(mAvailableElements[sKey]);
									});
									return mAvailableElements;
								}, function(oReason) {
									jQuery.sap.log.error("MetadataModel could not be loaded", oReason);
								});
					};

					/**
					 * Function to find the binding paths of a given UI5 Element
					 *
					 * @param {sap.ui.core.Element}
					 *          oElement for which the binding info should be found
					 * @returns {Object} valueProperty: the name of the property which is bound
					 * @private
					 */
					Utils.getElementBindingPaths = function(oElement) {
						var aPaths = {};
						if (oElement.mBindingInfos) {
							for ( var oInfo in oElement.mBindingInfos) {
								var sPath = oElement.mBindingInfos[oInfo].parts[0].path
										? oElement.mBindingInfos[oInfo].parts[0].path
										: "";
								sPath = sPath.split("/")[sPath.split("/").length - 1];
								aPaths[sPath] = {
										valueProperty : oInfo
								};
							}
						}
						return aPaths;
					};

					/**
					 * Function to find the binding paths of a given UI5 Element inside a list of odata metadata fields
					 *
					 * @param {object}
					 *          map of binding paths from an ui5 element
					 * @param {object}
					 *          map of a odata metadata field list
					 * @returns {Object} odata metadatafield: the found odata metada field
					 *          element
					 * @private
					 */
					Utils.findFieldBindingPathInFieldsArray = function(mPaths, mHiddenElements) {
						var aPathKeys = Object.keys(mPaths);
						var aDataFieldPaths = Object.keys(mHiddenElements);
						var sFoundPath = "";
						aPathKeys.forEach(function(sPath) {
							if (aDataFieldPaths.indexOf(sPath) >= 0) {
								sFoundPath =  aDataFieldPaths[aDataFieldPaths.indexOf(sPath)];
							}
						});
						return sFoundPath;
					};

					/**
					 * Helper function to create a new smartform group element add command
					 *
					 * @param {sap.ui.comp.smartform.SmartForm}
					 *          oSmartForm in which the field should be added to
					 * @param {sap.ui.comp.smartform.Group}
					 *          oGroup in which the field should be added to
					 * @param {integer}
					 *          index position where the new field should be added
					 * @param {integer}
					 *         array of JS types of each new field
					 * @param {array}
					 *          array of labels for each new field
					 * @param {array}
					 *          array of field values for each new field
					 * @param {array}
					 *          array of field value properties of each new field
					 * @returns {Object}
					 *          returns the created command
					 * @private
					 */
					Utils.createNewAddFieldsCommand = function(oSmartForm, oGroup, iIndex, aJsTypes, aLabels, aValueProperties, aFieldValues) {
						jQuery.sap.require("sap.ui.rta.command.CommandFactory");
						var oAddFieldsCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oGroup, "Add");
						oAddFieldsCommand.setNewControlId(Utils.createNewSmartFormGroupElementId(oSmartForm, aFieldValues));
						oAddFieldsCommand.setIndex(iIndex);
						oAddFieldsCommand.setJsTypes(aJsTypes);
						oAddFieldsCommand.setLabels(aLabels);
						oAddFieldsCommand.setFieldValues(aFieldValues);
						oAddFieldsCommand.setValuePropertys(aValueProperties);
						return oAddFieldsCommand;
					};

					/**
					 * Helper function to create an id for smart group elements within a SmartFrom
					 *
					 * @param {sap.ui.core.Control}
					 *          oParentElement of the group elementt
					 * @param {array} aPaths
					 *          aPaths (binding paths) of the smartfields that are within the group element
					 *
					 * @returns {string}
					 *          returns the new Id
					 */
					Utils.createNewSmartFormGroupElementId = function(oParentElement, aPaths) {
						var sPathId = "";
						var aToBeSortedPaths = aPaths.slice();
						var aSortedPaths = aToBeSortedPaths.sort();
						for (var i = 0; i < aSortedPaths.length; i++) {
							var sPath = aSortedPaths[i].replace("/", "_");
							sPathId = sPathId + "__" + sPath;
						}
						return oParentElement.getId() + sPathId;
					};

					return Utils;
				}, /* bExport= */true);

}; // end of sap/ui/rta/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.BindProperty') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.BindProperty'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyBindingChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/BindProperty",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyBindingChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyBindingChangeHandler, Utils) {
	"use strict";

	/**
	 * The BindProperty command take an element and the name of a property
	 * (propertyName) together with a complex binding string (newBinding).
	 * When executed, the binding is set on the property. The binding string
	 * has to comply with the same rules that apply to bindings passed to properties
	 * in the constructor of SAPUI5 ManagedObjects.
	 *
	 * Setting the oldValue or oldBinding is optional if you are running in the
	 * designMode (see unit test page).
	 * If set these take precedence over the actual value of the control.
	 * You should not set both properties.
	 *
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.38
	 * @alias sap.ui.rta.command.BindProperty
	 * @experimental Since 1.38. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var BindProperty = FlexCommand.extend("sap.ui.rta.command.BindProperty", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newBinding : {
					type : "string",
					bindable : false
				},
				//optional - command can derive it from the element
				oldValue : {
					type : "any"
				},
				//optional - command can derive it from the element
				oldBinding : {
					type : "string"
				},
				changeType : {
					type : "string",
					defaultValue : "propertyBindingChange"
				}
			},
			associations : {},
			events : {}
		}
	});


	BindProperty.prototype.init = function() {
		this.setChangeHandler(PropertyBindingChangeHandler);
	};

	BindProperty.FORWARD = true;
	BindProperty.BACKWARD = false;

	/**
	 * @override to suppress the binding strings to be used as
	 */
	BindProperty.prototype.bindProperty = function(sName, oBindingInfo){
		if (sName === "newBinding"){
			return this.setNewBinding(oBindingInfo.bindingString);
		}
		if (sName === "oldBinding"){
			return this.setOldBinding(oBindingInfo.bindingString);
		}
		return FlexCommand.prototype.bindProperty.apply(this, arguments);
	};

	BindProperty.prototype._ensureOld = function(){
		if ((this.getOldValue() === undefined) && (this.getOldBinding() === undefined)){
			var oElement = this._getElement();
			var oBindingInfo = oElement.getBindingInfo(this.getPropertyName());
			if (oBindingInfo && oBindingInfo.bindingString) {
				this.setOldBinding(oBindingInfo.bindingString);
			} else {
				var vOldValue = Utils.getPropertyValue(oElement, this.getPropertyName());
				this.setOldValue(vOldValue);
			}
		}
	};

	BindProperty.prototype._getOld = function(){
		if ( this.getOldValue() === "undefined" ){
			return this.getOldValue();
		} else {
			return this.getOldBinding();
		}
	};

	BindProperty.prototype._getSpecificChangeInfo = function(bForward) {
		var oElement = this._getElement();
		this._ensureOld();
		// general format
		var mSpecificChangeInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				newBinding : bForward ? this.getNewBinding() : this._getOld()
			}
		};
		if (bForward && typeof this.getOldValue() !== "undefined"){
			mSpecificChangeInfo.content.oldValue = this.getOldValue();
		} else {
			mSpecificChangeInfo.content.oldBinding = bForward ? this.getOldBinding() : this.getNewBinding();
		}

		return mSpecificChangeInfo;
	};

	BindProperty.prototype._getFlexChange = function(bForward) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	BindProperty.prototype._getForwardFlexChange = function(oElement) {
		return this._getFlexChange(BindProperty.FORWARD);
	};

	/**
	 * @override
	 */
	BindProperty.prototype._getBackwardFlexChange = function(oElement) {
		return this._getFlexChange(BindProperty.BACKWARD);
	};

	/**
	 * @override
	 */
	BindProperty.prototype.serialize = function() {
		return this._getSpecificChangeInfo(BindProperty.FORWARD);
	};


	return BindProperty;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/BindProperty.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Property') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Property'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyChange'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Property",['sap/ui/rta/command/FlexCommand', "sap/ui/fl/changeHandler/PropertyChange", "sap/ui/rta/Utils"], function(FlexCommand,
		PropertyChangeHandler, Utils) {
	"use strict";

	/**
	 * Basic implementation for the command pattern.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.BaseCommand
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Property = FlexCommand.extend("sap.ui.rta.command.Property", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				propertyName : {
					type : "string"
				},
				newValue : {
					type : "any"
				},
				// optional
				oldValue : {
					type : "any"
				},
				semanticMeaning : {
					type : "string"
				},
				changeType : {
					type : "string",
					defaultValue : "propertyChange"
				}
			},
			associations : {},
			events : {}
		}
	});


	Property.prototype.init = function() {
		this.setChangeHandler(PropertyChangeHandler);
	};

	Property.FORWARD = true;
	Property.BACKWARD = false;

	Property.prototype._ensureOldValue = function(oElement){
		if (this.getOldValue() === undefined) {
			var vOldValue = Utils.getPropertyValue(oElement, this.getPropertyName());
			this.setOldValue(vOldValue);
		}
	};

	Property.prototype._getSpecificChangeInfo = function(bForward) {
		var oElement = this._getElement();
		this._ensureOldValue(oElement);
		// general format
		return {
			changeType : this.getChangeType(),
			selector : {
				id : oElement.getId(),
				type : oElement.getMetadata().getName()
			},
			content : {
				property : this.getPropertyName(),
				oldValue : bForward ? this.getOldValue() : this.getNewValue(),
				newValue : bForward ? this.getNewValue() : this.getOldValue(),
				semantic : this.getSemanticMeaning()
			}
		};
	};

	Property.prototype._getFlexChange = function(bForward) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	Property.prototype._getForwardFlexChange = function(oElement) {
		return this._getFlexChange(Property.FORWARD);
	};

	/**
	 * @override
	 */
	Property.prototype._getBackwardFlexChange = function(oElement) {
		return this._getFlexChange(Property.BACKWARD);
	};

	/**
	 * @override
	 */
	Property.prototype.serialize = function() {
		return this._getSpecificChangeInfo(Property.FORWARD);
	};


	return Property;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Property.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.ObjectPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.ObjectPage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.StashedControlSupport'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/ObjectPage",
		['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/rta/Utils', 'sap/ui/dt/ElementUtil', 'sap/ui/core/StashedControlSupport'],
		function(Base, Utils, ElementUtil, StashedControlSupport) {
			"use strict";

			/**
			 * Constructor for a new ObjectPage. Do not instantiate this class directly! Instead use the
			 * ControlAnalyzerFactory.
			 *
			 * @class Context - controller for flexibility changes
			 * @extends sap.ui.base.ManagedObject
			 *
			 * @author SAP SE
			 * @version 1.38.33
			 *
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.ObjectPage
			 * @augments sap.ui.rta.controlAnalyzer.Base
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var ObjectPage = Base.extend("sap.ui.rta.controlAnalyzer.ObjectPage", {
				metadata : {
					library : "sap.ui.rta"
				}
			});
			
			/**
			 * @override
			 */
			ObjectPage.prototype.setControl = function(oControl) {
				var oObjectPageLayout = Utils.getClosestTypeForControl(oControl, "sap.uxap.ObjectPageLayout");
				this.setProperty("control", oObjectPageLayout, true);
				this.setProperty("selectedControl", oControl, true);
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getSelectedBlock = function(oControl) {
				return Utils.findSupportedBlock(oControl, ["sap.uxap.ObjectPageLayout"]);
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getClosestType = function(oControl) {
				return Utils.getClosestTypeForControl(oControl, "sap.uxap.ObjectPageLayout");
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.getControlsFieldCollection = function(oControl) {
				throw new Error('getControlsFieldCollection not yet implemented in ObjectPage');
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl, oSelectedControl) {
				var mChangeData = {};
				var oBindingContextObject = oControl.getBindingContext().getObject();
				var sControldId = oBindingContextObject.controlId
						? oBindingContextObject.controlId
						: oBindingContextObject.fieldLabel;
		
				var oObjectPage = sap.ui.getCore().byId(sControldId);
				var bControlExists = !!oObjectPage;

				var fnCreateChangeEvent = function() {
					if (bControlExists) {
						if (oBindingContextObject.visibilityType === "hide") {
							mChangeData = {
									controlId : sControldId,
									changeType : bHideControl ? "hideControl" : "unhideControl"
							};
						} else if (oBindingContextObject.visibilityType === "stash") {
							var aSections = Utils.getObjectPageSections(oCurrentSelectedBlock);
							var iTargetIndex = Utils.determineTargetIndex(oSelectedControl, oCurrentSelectedBlock, aSections, 1);

							mChangeData = {
									controlId : sControldId,
									changeType : bHideControl ? "stashControl" : "unstashControl",
									parentAggregationName : "sections",
									iTargetIndex : iTargetIndex
							};
						}
					}
					return mChangeData;
				};

				return new Promise(function(resolve, reject) {
					resolve(fnCreateChangeEvent());
				});

			};

			/**
			 * @override
			 */
			ObjectPage.prototype.findVisibleAndBoundFieldsAndLabelNames = function(oControl) {

				var mVisibleAndBoundFields = [];
				var mFieldsAndLabelNames = {};
				var mFieldsAndBoundPropertyName = {};
				var aElements = ElementUtil.findAllPublicElements(oControl);

				var i = 0;
				for (i = 0; i < aElements.length; i++) {
					var oObHeaderElement = aElements[i];
					if (oObHeaderElement instanceof sap.m.ObjectAttribute) {
						mVisibleAndBoundFields.push(oObHeaderElement.getBindingPath("text"));
					}
				}

				return {
					visibleAndBoundFields : mVisibleAndBoundFields,
					fieldsAndLabelNames : mFieldsAndLabelNames,
					fieldsAndBoundPropertyName : mFieldsAndBoundPropertyName
				};
			};

			ObjectPage.prototype.prepare = function() {
				var oControl = this.getControl();
				var aSections = Utils.getObjectPageSections(oControl);

				if (!this.getPrepared()) {
					for (var i = 0; i < aSections.length; i++) {
						
						var sTitle = aSections[i].getTitle ? aSections[i].getTitle() : aSections[i].getId();
						
						if (aSections[i].getStashed && (aSections[i].getStashed() || aSections[i].getVisible() === false)) {
							this._mAvailableElements[aSections[i].getId()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "stash"
							};
						} else if (aSections[i].getVisible && aSections[i].getVisible() === false) {
							this._mAvailableElements[aSections[i].getTitle()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "hide"
							};
						} else {
							this._mHiddenElements[aSections[i].getTitle()] = {
								fieldLabel : sTitle,
								quickInfo : sTitle,
								entityType : "",
								controlId : aSections[i].getId(),
								visibilityType: "hide"
							};
						}
					}
					sap.ui.rta.controlAnalyzer.Base.prototype.prepare.apply(this);
				}
				return Promise.resolve();
			};

			/**
			 * @override
			 */
			ObjectPage.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
				if (ElementUtil.isInstanceOf(oMovedElement, "sap.uxap.ObjectPageSection")) {
					if (ElementUtil.isInstanceOf(oParentElement, "sap.uxap.ObjectPageLayout")) {
						if (oMovedElement.getParent() === oParentElement && sAggregationName === "sections") {
							return true;
						}
					}
				}
			};

			return ObjectPage;

		}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/ObjectPage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.SmartForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.SmartForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/controlAnalyzer/SmartForm",['sap/ui/rta/controlAnalyzer/Base', 'sap/ui/rta/Utils', 'sap/ui/dt/ElementUtil',
		'sap/ui/rta/ModelConverter', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/rta/model/ElementPreprocessor'],
		function(Base, Utils, ElementUtil, ModelConverter, MetadataAnalyser, ElementPreprocessing) {
			"use strict";

			/**
			 * Constructor for a new change controller for the SmartForm. Do not instantiate this class directly! Instead use
			 * the ControlAnalyzerFactory.
			 *
			 * @class Context - controller for flexibility changes
			 * @extends sap.ui.base.ManagedObject
			 * @author SAP SE
			 * @version 1.38.33
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.controlAnalyzer.SmartForm
			 * @augments sap.ui.rta.controlAnalyzer.Base
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var SmartForm = Base.extend("sap.ui.rta.controlAnalyzer.SmartForm", {
				metadata : {
					library : "sap.ui.rta",
					properties : {
						customFieldAvailable : {
							type : "object",
							defaultValue : false
						}
					}
				}
			});

			SmartForm.rules = {};
			SmartForm.rules["EXCLUDEVISIBLERULE"] = "excludeVisibleElements";
			SmartForm.rules["EXCLUDEIGNOREDFIELDS"] = "excludeIgnoredFields";

			/**
			 * @override
			 */
			SmartForm.prototype.init = function() {
				var that = this;
				this._mVisibleAndBoundFields;
				this._mRegisteredRules = {};
				this._mRegisteredRules[SmartForm.rules.EXCLUDEVISIBLERULE] = function(oElement) {
					if (!that._mVisibleAndBoundFields) {
						that._mVisibleAndBoundFields = that.findBoundFields(false);
					}
					return that._retrieveElementFromMap(that._mVisibleAndBoundFields, oElement);
				};
				this._mRegisteredRules[SmartForm.rules.EXCLUDEIGNOREDFIELDS] = function(oElement) {
					var aIgnoredFields = that._getIgnoredFields();
					//Complex properties are divided by '.'
					if (oElement.isComplexProperty) {
						return aIgnoredFields.indexOf(oElement.complexTypePropertyName + "." + oElement.name) !== -1;
					}
					return aIgnoredFields.indexOf(oElement.name) !== -1;
				};
			};
			/**
			 * @override
			 */
			SmartForm.prototype.setControl = function(oControl) {
				var oSmartForm = Utils.getClosestTypeForControl(oControl, "sap.ui.comp.smartform.SmartForm");
				this.setProperty("control", oSmartForm, true);
				this.setProperty("selectedControl", oControl, true);
			};

			/**
			 * @override
			 */
			SmartForm.prototype.getFlexChangeType = function(sType, oElement) {

				var sFlexChangeType;
				switch (sType) {
					case "Move" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
							sFlexChangeType = "moveGroups";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
							sFlexChangeType = "moveFields";
						}
						break;
					case "Add" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
							sFlexChangeType = "addGroup";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
							sFlexChangeType = "addFields";
						}
						break;
					case "Rename" :
						if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
							sFlexChangeType = "renameField";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
							sFlexChangeType = "renameGroup";
						} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
							sFlexChangeType = "renameField";
						}
						break;
					default :
						break;
				}
				return sFlexChangeType;
			};

			/**
			 * @override
			 */
			SmartForm.prototype.mapSpecificChangeData = function(sType, mSpecificChangeData) {
				var mResult;
				switch (sType) {
					case "Move" :
						mResult = this._mapMoveSpecificChangeData(sType, mSpecificChangeData);
						break;
					case "Add" :
						mResult = this._mapAddSpecificChangeData(sType, mSpecificChangeData);
						break;
					case "Rename" :
						mResult = this._mapRenameSpecificChangeData(sType, mSpecificChangeData);
						break;
					default :
						mResult = this.prototype.mapSpecificChangeData(sType, mSpecificChangeData);
						break;
				}
				return mResult;
			};

			SmartForm.prototype.getLabel = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					return oElement.getTitle();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					return oElement.getLabel();
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					return oElement.getLabelText();
				}
			};

			SmartForm.prototype.getLabelBinding = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					return oElement.getBindingInfo("title");
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					return oElement.getBindingInfo("label");
				}
			};

			SmartForm.prototype.resumeLabelBinding = function(oElement) {
				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					var oBinding = oElement.getBinding("title");
					if (oBinding) {
						oBinding.resume();
					}
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")
						|| ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					var oBinding = oElement.getBinding("label");
					if (oBinding) {
						oBinding.resume();
					}
				}
			};

			SmartForm.prototype._mapMoveSpecificChangeData = function(sType, mSpecificChangeData) {
				var sSourceParentId = mSpecificChangeData.source.id;
				var sTargetParentId = mSpecificChangeData.target.id;
				var mChangeData = {
					changeType : mSpecificChangeData.changeType,
					selector : {
						id : sSourceParentId
					},
					targetId : sTargetParentId !== sSourceParentId ? sTargetParentId : null
				};
				mChangeData[mSpecificChangeData.changeType] = [];

				mSpecificChangeData.movedElements.forEach(function(mMovedElement) {
					mChangeData[mSpecificChangeData.changeType].push({
						id : mMovedElement.id,
						index : mMovedElement.targetIndex
					});
				});

				return mChangeData;
			};

			SmartForm.prototype._mapAddSpecificChangeData = function(sType, mSpecificChangeData) {
				if (mSpecificChangeData.changeType === "addFields") {
					mSpecificChangeData.fieldLabels = mSpecificChangeData.labels;
					delete mSpecificChangeData.labels;

				} else if (mSpecificChangeData.changeType === "addGroup") {
					mSpecificChangeData.groupLabel = mSpecificChangeData.labels[0];
					delete mSpecificChangeData.labels;
				}
				return mSpecificChangeData;
			};

			SmartForm.prototype._mapRenameSpecificChangeData = function(sType, mSpecificChangeData) {

				var oElement = mSpecificChangeData.element;

				if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
					mSpecificChangeData.fieldLabel = mSpecificChangeData.value;
					mSpecificChangeData.labelProperty = "title";
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.Group")) {
					mSpecificChangeData.groupLabel = mSpecificChangeData.value;
				} else if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.GroupElement")) {
					mSpecificChangeData.fieldLabel = mSpecificChangeData.value;
					mSpecificChangeData.labelProperty = "label";
				}
				delete mSpecificChangeData.value;
				delete mSpecificChangeData.element;

				return mSpecificChangeData;

			};

			/**
			 * @override
			 */
			SmartForm.prototype.getSelectedBlock = function(oControl) {
				return Utils.findSupportedBlock(oControl, ["sap.ui.comp.smartform.Group"]);
			};

			/**
			 * @override
			 */
			SmartForm.prototype.getClosestType = function(oControl) {
				return Utils.getClosestTypeForControl(oControl, "sap.ui.comp.smartform.SmartForm");
			};

			/**
			 * @override
			 */
			SmartForm.prototype.createChangeData = function(oControl, oCurrentSelectedBlock, bHideControl, oSelectedControl) {
				var mChangeData = {};
				var oBindingContextObject = oControl.getBindingContext().getObject();
				var sControldId = oBindingContextObject.controlId ? oBindingContextObject.controlId : oCurrentSelectedBlock
						.getId()
						+ "_" + oBindingContextObject.entityName + "_" + oBindingContextObject.name;
				var oSmartField = sap.ui.getCore().byId(sControldId);
				var bControlExists = !!oSmartField;

				var fnCreateChangeEvent = function() {
					if (bControlExists) {
						mChangeData = {
							controlId : sControldId,
							changeType : bHideControl ? "hideControl" : "unhideControl"
						};
					} else {
						// create new control
						var sBindingPath = oBindingContextObject.complexTypePropertyName ? oBindingContextObject.complexTypePropertyName + "/"
								+ oBindingContextObject.name : oBindingContextObject.name;
						if (oCurrentSelectedBlock) {
							var oGroup;
							if (oCurrentSelectedBlock instanceof sap.ui.comp.smartform.Group) {
								oGroup = oCurrentSelectedBlock;
							} else {
								oGroup = oCurrentSelectedBlock.getGroups()[0];
							}
							var aGroupElements = oGroup.getGroupElements();
							var iTargetIndex = Utils.determineTargetIndex(oSelectedControl, oCurrentSelectedBlock, aGroupElements, -1);

							mChangeData = {
								unhide : bControlExists,
								newControlId : sControldId,
								jsType : "sap.ui.comp.smartfield.SmartField",
								selectorId : oGroup.getId(),
								index : iTargetIndex,
								valueProperty : "value",
								changeType : "addField",
								fieldLabel : oBindingContextObject.fieldLabel,
								fieldValue : sBindingPath
							};
						}
					}
					return mChangeData;
				};

				if (bHideControl && !Utils.isElementHideable(oSmartField)) {
					return Utils.openHideElementConfirmationDialog(oSmartField).then(function(bConfirmed) {
						if (bConfirmed) {
							return fnCreateChangeEvent();
						} else {
							return null;
						}
					});
				} else {
					return new Promise(function(resolve, reject) {
						resolve(fnCreateChangeEvent());
					});
				}

			};

			/**
			 * @override
			 */
			SmartForm.prototype.findChangedFieldLabels = function() {
				if (!this._mFieldsAndLabelNames) {
					this._mFieldsAndLabelNames = this._findChangedFieldLabels();
				}
				return this._mFieldsAndLabelNames;
			};

			SmartForm.prototype._findChangedFieldLabels = function() {
				var mFieldsAndLabelNames = {};
				var mInvisibleBoundFields = this.findBoundFields(true);
				var mVisibleBoundFields = this.findBoundFields(false);
				var mAllBoundFields = jQuery.extend( {}, mInvisibleBoundFields, mVisibleBoundFields );
				for (var sPathValue in mAllBoundFields) {
					var oField = sap.ui.getCore().byId(mAllBoundFields[sPathValue]);
					var sText = Utils.getLabelForElement(oField);
					mFieldsAndLabelNames[sPathValue] = sText;
				}
				return mFieldsAndLabelNames;
			};

			/**
			 * @override
			 */
			SmartForm.prototype.findBoundFields = function(bOnlyInvisibleFields) {
				// TODO: can be control specific (not generic)
				var oSmartForm = this.getControl();
				var aGroups = oSmartForm.getGroups();
				var oFieldData = {
						elementIds : {},
						boundFields : {}
				};
				var i, j, k = 0;
				for (i = 0; i < aGroups.length; i++) {
					var aElements = aGroups[i].getGroupElements();
					for (j = 0; j < aElements.length; j++) {
						var oFormElement = aElements[j];
						var aFields = oFormElement.getFields();
						for (k = 0; k < aFields.length; k++) {
							var oField = aFields[k];
							if (oField.mBindingInfos) {
								for ( var oInfo in oField.mBindingInfos) {
									var sPath = Utils.getPathFromBindingInfo(oInfo, oField.mBindingInfos);
									var oParent = oField.getParent();
									if (oParent && sPath) {
										//only groupElements which are invisible
										if (bOnlyInvisibleFields && !oField.getDomRef()) {
											this._addBoundFields(oFieldData, sPath, oField);
											continue;
										}
										//only groupElements which are visible
										if (oField.getDomRef() && oField.getVisible() && !bOnlyInvisibleFields) { // existing domref
											this._addBoundFields(oFieldData, sPath, oField);
										}
									}
								}
							}
						}
					}
				}

				return oFieldData.boundFields;
			};

			SmartForm.prototype._addBoundFields = function(oFieldData, sPath, oField) {
				var oParent = oField.getParent();
				//check if we already found a binding path
				if (oFieldData.boundFields[sPath]) {
					//if so we use the groupElement with only one field
					if (oParent.getFields().length === 1) {
						oFieldData.boundFields[sPath] = oParent.getId();
					//if the groupElement has already more than one field we try to use the previous groupelement.
					} else if (oFieldData.elementIds[oField.getId()] && oFieldData.elementIds[oField.getId()].getFields() === 1) {
						oFieldData.boundFields[sPath] = oParent.getId();
					}
				} else {
					oFieldData.boundFields[sPath] = oParent.getId();
				}
				 oFieldData.elementIds[oField.getId()] = oParent;
			};

			/**
			 * Checks if a custom field is available
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return {Boolean} true if custom fields are available, else false
			 * @private
			 */
			SmartForm.prototype._prepareCustomFields = function() {
				var that = this;
				return Utils.isCustomFieldAvailable(this.getControl()).then(function(oResult) {
					if (oResult) {
						that.setCustomFieldAvailable(oResult);
					}
					return oResult;
				});
			};

			/**
			 * Read ignored fields from smart form and parse CSV into array
			 *
			 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm smart form instance
			 * @private
			 * @returns {Array} Returns a list of ignored fields or empty.
			 */
			SmartForm.prototype._getIgnoredFields = function() {
				var oSmartForm = this.getControl();
				if (oSmartForm) {
					var sCsvIgnoredFields = oSmartForm.getIgnoredFields();
					if (sCsvIgnoredFields) {
						var aIgnoredFields = sCsvIgnoredFields.split(",");
						return aIgnoredFields;
					}
				}
				return [];
			};

			/**
			 * Checks if a custom field is available
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return {Boolean} true if custom fields are available, else false
			 * @private
			 */
			SmartForm.prototype.getCustomFieldAvailable = function() {
				if (!this.getPrepared()) {
					this._raiseIllegalState();
				}
				return this.getProperty("customFieldAvailable");
			};

			/**
			 * Getter for field model which contains only the invisible fields
			 *
			 * @param {sap.ui.core.Control}
			 *          oControl Currently selected control
			 * @return field model with invisible fields
			 * @private
			 */
			SmartForm.prototype.getCustomizeControlModel = function(oControl, bFiltered) {
				// TODO: Remove, old model
				var oClosestType = this.getClosestType(oControl);
				var vEntityType = oClosestType.getEntityType();

				if (vEntityType) {
					vEntityType = vEntityType.replace(/\s+/g, '').match(/([^,]+)/g);
				}

				if (!bFiltered) {
					return ModelConverter.getConvertedModelWithBoundAndRenamedLabels(oClosestType, vEntityType, this);
				} else {
					return ModelConverter.getConvertedModelWithBoundAndRenamedLabels(oClosestType, vEntityType, this).then(
							function(aElements) {
								return aElements.filter(function(mElement) {
									return !mElement.checked;
								});
							});
				}
			};

			/**
			 * @overwrite
			 */
			SmartForm.prototype.prepare = function() {
				if (!this.getPrepared()) { // prevent redundant preparation
					// 1. compute collection of fields that can be added to the control
					var fetchFieldsPromise = this._getFieldFetcherPromise();
					// 2. compute whether or not it's possible to ad custom fields to the control
					var fnIsCustomFieldAvailable = this._prepareCustomFields();

					return Promise.all([fetchFieldsPromise, fnIsCustomFieldAvailable]);
				} else {
					return new Promise().resolve();
				}
			};

			/**
			 * @return a Promise to compute collection of adable and not available fields
			 */
			SmartForm.prototype._getFieldFetcherPromise = function() {
				var that = this;
				return Utils.fetchODataPropertiesFor(this.getControl().getModel()).then(function(mProperties) {
					var sEntityTypeName = that.getBoundEntityType();
					Object.keys(mProperties).forEach(function(sKey) {
						mProperties[sKey].forEach(function(oElement) {
							var oChangedElement = that._applyChanges(oElement);
							var bFiltered = that._applyRules(oChangedElement);
							if (!bFiltered && oChangedElement.entityName === sEntityTypeName) {
								that._mAvailableElements[oChangedElement.name] = oChangedElement;
							} else {
								that._mHiddenElements[oChangedElement.name] = oChangedElement;
							}
						});
					});
					sap.ui.rta.controlAnalyzer.Base.prototype.prepare.apply(that);
				});
			};

			/**
			 * @param oElement
			 *          a smart field
			 * @return true if field does not satisfy all rules to be a candidate to be added to the control, false if all
			 *         rules are satisfied
			 */
			SmartForm.prototype._applyRules = function(oElement) {
				var mFnRules = this._getRules();
				var bFiltered = false;
				for ( var sRule in mFnRules) {
					var fnRule = mFnRules[sRule];
					if (fnRule(oElement)) {
						bFiltered = true;
						break;
					}
				}
				return bFiltered;
			};

			/**
			 * Applies all static changes to the field originated in the model meta data
			 *
			 * @private
			 * @param oElement
			 *          a smart field
			 * @return changed oElement
			 */
			SmartForm.prototype._applyChanges = function(oElement) {
				var oChangedElement = oElement;
				var aFnChanges = this._getChanges();
				aFnChanges.forEach(function(fnChange) {
					oChangedElement = fnChange(oChangedElement);
				});
				return oChangedElement;
			};

			/**
			 * Returns the registered rules for filtering the available fields
			 *
			 * @return a map of name, rule pairs (every rule has a name
			 */
			SmartForm.prototype._getRules = function() {
				return this._mRegisteredRules;
			};

			SmartForm.prototype.getBoundEntityType = function() {
				var oControl = this.getSelectedControl();
				var sContextPath;
				if (oControl.getBindingContext()) {
					sContextPath = oControl.getBindingContext().sPath;
				}

				if (ElementUtil.isInstanceOf(oControl, "sap.ui.comp.smartform.GroupElement")) {
					var oParent = oControl.getParent();
					if (oParent.getBindingContext()) {
						sContextPath = oParent.getBindingContext().sPath;
					}
				}

				if (sContextPath && oControl.getModel()) {
					var oMetaModel = oControl.getModel().getMetaModel();
					var oEntityType = oMetaModel.oMetadata._getEntityTypeByPath(sContextPath);
					return oEntityType.name;
				}
			};

			SmartForm.prototype._retrieveElementFromMap = function(mElements, oElement) {
				var oResultElement;
				if (oElement.isComplexProperty) {
					oResultElement = mElements[oElement.complexTypePropertyName + "/" + oElement.name];
				} else {
					oResultElement = mElements[oElement.name];
				}
				return oResultElement;
			};

			/**
			 * Returns all modifying functions to be applied to the raw field definition
			 *
			 * @return an array of modifying functions
			 */
			SmartForm.prototype._getChanges = function() {
				var that = this;
				return [function(oElement) {
					var mChangedFieldLabels = that.findChangedFieldLabels(oElement);
					var oChangedElement = that._retrieveElementFromMap(mChangedFieldLabels, oElement);
					if (oChangedElement) {
						oElement["fieldLabel"] = oChangedElement;
					}
					return oElement;
				}, function(oElement) {
					var sControlId;
					if (!that._mBoundFields) {
						that._mBoundFields = that.findBoundFields(true);
					}
					if (oElement.isComplexProperty) {
						sControlId = that._mBoundFields[oElement.complexTypePropertyName + "/" + oElement.name];
					} else {
						sControlId = that._mBoundFields[oElement.name];
					}
					if (sControlId) {
						oElement["controlId"] = sControlId;
					}
					return oElement;
				}];
			};

			/**
			 * @override
			 */
			SmartForm.prototype.checkTargetZone = function(oParentElement, sAggregationName, oMovedElement) {
				var oSourceSmartForm = ElementUtil.getClosestElementOfType(oMovedElement, "sap.ui.comp.smartform.SmartForm");
				var oTargetSmartForm = ElementUtil.getClosestElementOfType(oParentElement, "sap.ui.comp.smartform.SmartForm");

				if (oSourceSmartForm === oTargetSmartForm) {
					return true;
				}
			};

			return SmartForm;

		}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/SmartForm.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.MultiSelection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.dt.plugin.MultiSelection.
jQuery.sap.declare('sap.ui.rta.plugin.MultiSelection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/MultiSelection",['sap/ui/dt/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/rta/Utils'],
		function(Plugin, ElementUtil, RTAUtils) {
			"use strict";

			/**
			 * Constructor for a new MultiSelection.
			 * 
			 * @param {string}
			 *          [sId] id for the new object, generated automatically if no id is given
			 * @param {object}
			 *          [mSettings] initial settings for the new object
			 * 
			 * @class The MultiSelection allows to select the Overlays with a mouse click
			 * @extends sap.ui.dt.Plugin
			 * 
			 * @author SAP SE
			 * @version 1.33.0-SNAPSHOT
			 * 
			 * @constructor
			 * @private
			 * @since 1.33
			 * @alias sap.ui.rta.plugin.MultiSelection
			 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var MultiSelection = Plugin.extend("sap.ui.rta.plugin.MultiSelection", /** @lends sap.ui.dt.plugin.MultiSelection.prototype */
			{
				metadata : {
					library : "sap.ui.rta",
					properties : {
						multiSelectionTypes : {
							type : "string[]"
						}
					}
				}
			});

			/**
			 * @override
			 */
			MultiSelection.prototype.init = function() {
				Plugin.prototype.init.apply(this, arguments);
				this._fnKeyDown = this._onKeyDown.bind(this);
				this._fnKeyUp = this._onKeyUp.bind(this);

				window.addEventListener("keydown", this._fnKeyDown);
				window.addEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.exit = function() {
				Plugin.prototype.exit.apply(this, arguments);

				window.removeEventListener("keydown", this._fnKeyDown);
				window.removeEventListener("keyup", this._fnKeyUp);

			};

			/**
			 * @override
			 */
			MultiSelection.prototype.setDesignTime = function(oDesignTime) {
				this._oDesignTime = oDesignTime;

				if (this._oDesignTime) {
					this._oDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
				Plugin.prototype.setDesignTime.apply(this, arguments);

				if (oDesignTime) {
					oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
				}
			};

			/**
			 * Event handler for key down events. Sets DesignTime SelectionMode to multi if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyDown = function(oEvent) {
				// left or right cmd / ctrl key
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Multi);
					}
				}
			};

			/**
			 * Event handler for key up events. Sets DesignTime SelectionMode to single if cmd key was used.
			 * 
			 * @param {sap.ui.base.Event}
			 *          oEvent event object
			 * @private
			 */
			MultiSelection.prototype._onKeyUp = function(oEvent) {
				if (sap.ui.Device.os.name === sap.ui.Device.os.OS.WINDOWS) {
					if (oEvent.keyCode === 17) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				} else if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH) {
					if (oEvent.keyCode === 91 || oEvent.keyCode === 93) {
						this._oDesignTime.setSelectionMode(sap.ui.dt.SelectionMode.Single);
					}
				}
			};

			/**
			 * React on selection change from designTime
			 * 
			 * @param {event}
			 *          oEvent fired
			 * @override
			 */
			MultiSelection.prototype._onDesignTimeSelectionChange = function(oEvent) {
				if (this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				
				var aMultiSelectionTypes = this.getMultiSelectionTypes();
				var bMultiSelectisValid = true;
				var oCurrentSelectedOverlay = oEvent.getParameter("selection")[oEvent.getParameter("selection").length - 1];
				var aSelections = this._oDesignTime.getSelection();
				if (aSelections && aSelections.length === 1) {
					oCurrentSelectedOverlay.setSelected(true);
					return;
				}
				if (!oCurrentSelectedOverlay || this._oDesignTime.getSelectionMode() === sap.ui.dt.SelectionMode.Single) {
					return;
				}
				aMultiSelectionTypes.forEach(function(sType, iIndex, aArray) {
					aSelections.forEach(function(oSelecedElement) {
						if (!ElementUtil.isInstanceOf(oSelecedElement.getElementInstance(), sType)) {
							bMultiSelectisValid = false;
						}
					});
					oCurrentSelectedOverlay.setSelected(bMultiSelectisValid);
				});
			};

			return MultiSelection;
		}, /* bExport= */true);
}; // end of sap/ui/rta/plugin/MultiSelection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.util.FakeLrepConnectorLocalStorage') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.util.FakeLrepConnectorLocalStorage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/util/FakeLrepConnectorLocalStorage",[
	"sap/ui/rta/util/FakeLrepLocalStorage"
	], function(
	FakeLrepLocalStorage) {
	"use strict";

	/**
	 * Class for SAP RTA Fake Lrep changes in localStorage
	 *
	 * @class
	 * Utility functionality for SAP RTA Fake Lrep localStorage
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias sap.ui.rta.FakeLrepConnectorLocalStorage
	 */

	var FakeLrepConnectorLocalStorage = {};

	/**
	 * Creates a Fake Lrep change in localStorage
	 * @param  {Object|Array} vChange - the change array/object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.create = function(vChange) {
		
		if (Array.isArray(vChange)) {
			vChange.forEach(function(elem) {
				FakeLrepLocalStorage.saveChange(elem.fileName, elem);
			});
		} else {
			FakeLrepLocalStorage.saveChange(vChange.fileName, vChange);	
		}
		return Promise.resolve();
	};

	/**
	 * Deletes a Fake Lrep change in localStorage
	 * @param  {Object} oChange - the change Object
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChange = function(oChange) {

		FakeLrepLocalStorage.deleteChange(oChange.sChangeName);

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Deletes all Fake Lrep changes in localStorage
	 * @returns {Promise} Returns a promise to the result of the request
	 */
	FakeLrepConnectorLocalStorage.deleteChanges = function() {

		FakeLrepLocalStorage.deleteChanges();

		return Promise.resolve({
			response: undefined,
			status: "nocontent"
		});
	};

	/**
	 * Loads the changes for the given Component class name
	 * from the FakeLrepLocalStorage
	 * and also loads the mandatory FakeLrepConnector.json file.
	 * The settings are take from the JSON file, but changes are replaced with
	 * the changes from the local storage.
	 * 
	 * @param {String} sComponentClassName - Component class name
	 * @returns {Promise} Returns a Promise with the changes and componentClassName
	 * @public
	 */
	FakeLrepConnectorLocalStorage.loadChanges = function(sComponentClassName) {

		var aChanges = FakeLrepLocalStorage.getChanges(),
			initialComponentJsonPath = this.sInitialComponentJsonPath;

		return new Promise(function(resolve, reject){
			jQuery.getJSON(initialComponentJsonPath).done(function(oResponse){
				oResponse.changes = aChanges;
				var result = {
					changes: oResponse,
					componentClassName: sComponentClassName
				};
				resolve(result);
			}).fail(function(error){
				reject(error);
			});
		});

	};

	return FakeLrepConnectorLocalStorage;

}, /* bExport= */ true);
}; // end of sap/ui/rta/util/FakeLrepConnectorLocalStorage.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides object sap.ui.rta.ControlAnalyzerFactory.
jQuery.sap.declare('sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory",['sap/ui/rta/controlAnalyzer/SmartForm', 'sap/ui/rta/controlAnalyzer/Form', 'sap/ui/rta/controlAnalyzer/ObjectPage'], function() {
	"use strict";

	/**
	 * @class ControlAnalyzerFactory delivers change controller for a specific component
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @private
	 * @static
	 * @since 1.34
	 * @alias ControlAnalyzerFactory
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */

	var ControlAnalyzerFactory = {};

	// Add here all known change controllers. Actually we support only the SmartForm and ObjectPage
	var _mapOfControllers = {

		'sap.ui.comp.smartform' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.SmartForm
		},

		'sap.ui.layout.form' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.Form
		},

		'sap.uxap' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.ObjectPage
		},

		//fallback
		'sap' : {
			'Constructor' : sap.ui.rta.controlAnalyzer.Base
		},

		// search function to search map by name or prefix
		'findControlAnalyzerByName' : function(oContext, sName) {
			var result = oContext._mapOfControllers[sName];
			if (!result) { // if not yet found try also the prefix, TODO generalize algorithm
				var iIndex = sName.lastIndexOf('.');
				if (iIndex > 0) {
					result = oContext._mapOfControllers.findControlAnalyzerByName(oContext, sName.substr(0, iIndex));
				}
			}
			return result;
		}

	};
	ControlAnalyzerFactory._mapOfControllers = _mapOfControllers;

	/**
	 * Factory method to provide a change controller for a given control
	 *
	 * @param {sap.ui.core.Control}
	 *          oControl Control for which a change controller is requested
	 * @returns {sap.ui.rta.controlAnalyzer.Base} the change controller or null
	 */
	ControlAnalyzerFactory.getControlAnalyzerFor = function(oControl) {
		var result = null;
		jQuery.sap.assert(!!oControl, "Cannot get rta change controller for undefined control.");
		if (oControl) {
			var sType = oControl.getMetadata().getName();
			var oDescriptor = this._mapOfControllers.findControlAnalyzerByName(this, sType);
			if (oDescriptor) {
					result = oDescriptor.instance = new oDescriptor.Constructor({"control" : oControl});
			}
		}
		return result;
	};

	return ControlAnalyzerFactory;
}, /* bExport= */true);

}; // end of sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.RTAElementMover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.RTAElementMover.
jQuery.sap.declare('sap.ui.rta.plugin.RTAElementMover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.plugin.ElementMover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/RTAElementMover",[
  'sap/ui/dt/plugin/ElementMover',
	'sap/ui/dt/OverlayUtil',
	'sap/ui/dt/ElementUtil',
	'sap/ui/fl/Utils',
	'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
	'sap/ui/rta/Utils'
],
function(ElementMover, OverlayUtil, ElementUtil, FlexUtils, ControlAnalyzerFactory, Utils) {
	"use strict";

	/**
	 * Constructor for a new RTAElementMover.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The RTAElementMover is responsible for the RTA specific adaption of element movements.
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.RTAElementMover
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RTAElementMover = ElementMover.extend("sap.ui.rta.plugin.RTAElementMover", /** @lends sap.ui.rta.plugin.RTAElementMover.prototype */ {
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				movableTypes : {
					type : "string[]",
					defaultValue : ["sap.ui.core.Element"]
				}
			},
			associations : {
			},
			events : {
			}
		}
	});

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if parent has stable Id, false if not
	 * @private
	 */
	RTAElementMover.prototype._hasParentStableId = function(oOverlay) {
		var oBlockOverlay = oOverlay.getParentElementOverlay();
		var oBlock = oBlockOverlay ? oBlockOverlay.getElementInstance() : null;

		return oBlock && FlexUtils.checkControlId(oBlock);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if embedded, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkMovable = function(oOverlay) {
		var bMovable = ElementMover.prototype.checkMovable.apply(this, arguments);
		var oElement;
		var oControlAnalyzer;

		if (bMovable) {
			oElement = oOverlay.getElementInstance();
			oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
			bMovable = oControlAnalyzer.isEditable(oElement);

		}

		return bMovable && oControlAnalyzer.hasParentStableId(oOverlay);
	};

	/**
	 * Checks droppability for aggregation overlays
	 * @param  {sap.ui.dt.Overlay} oAggregationOverlay aggregation overlay object
	 * @return {boolean}                     true if aggregation overlay is droppable, false if not
	 * @override
	 */
	RTAElementMover.prototype.checkTargetZone = function(oAggregationOverlay) {
		var bTargetZone = ElementMover.prototype.checkTargetZone.call(this, oAggregationOverlay);

		if (bTargetZone) {
			var oMovedOverlay = this.getMovedOverlay();
			var oMovedElement = oMovedOverlay.getElementInstance();
			var oOverlay = oAggregationOverlay.getParent();
			var oParentElement = oOverlay.getElementInstance();
			var sAggregationName = oAggregationOverlay.getAggregationName();

			var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oMovedElement);

			bTargetZone = oAnalyzer.isEditable(oParentElement) && oAnalyzer.checkTargetZone(oParentElement, sAggregationName, oMovedElement);
		}

		return bTargetZone;
	};

//	RTAElementMover.Default = new RTAElementMover();

	return RTAElementMover;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/RTAElementMover.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Selection') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Selection.
jQuery.sap.declare('sap.ui.rta.plugin.Selection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Selection",[
	'sap/ui/dt/Plugin',
	'sap/ui/rta/Utils',
	'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'
],
function(Plugin, Utils, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Constructor for a new Selection plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new object
	 * @class The Selection plugin allows you to select or focus overlays with mouse or keyboard and navigate to others.
	 * @extends sap.ui.dt.Plugin
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.plugin.Selection
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Selection = Plugin.extend("sap.ui.rta.plugin.Selection", /** @lends sap.ui.dt.Plugin.prototype */
	{
		metadata: {
			// ---- object ----

			// ---- control specific ----
			library: "sap.ui.rta",
			properties: {},
			associations: {},
			events: {}
		}
	});

	/**
	 * Register an overlay
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.registerElementOverlay = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		var bSelectable = ControlAnalyzerFactory.getControlAnalyzerFor(oElement).isEditable(oElement);

		oOverlay.setSelectable(bSelectable);

		oOverlay.attachBrowserEvent("click", this._onClick, this);
		oOverlay.attachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.attachBrowserEvent("mousedown", this._onMouseDown, this);
	};

	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 *
	 * @param {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	Selection.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachBrowserEvent("click", this._onClick, this);
		oOverlay.detachBrowserEvent("keydown", this._onKeyDown, this);
		oOverlay.detachBrowserEvent("mousedown", this._onMouseDown, this);
	};

	/**
	 * Handle keydown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onKeyDown = function(oEvent) {
		var oOverlay = Utils.getFocusedOverlay();
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			if ((oOverlay) && (!oOverlay.isSelected())) {
				oOverlay.setSelected(true);
				oEvent.stopPropagation();
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oParentOverlay = oOverlay.getParentElementOverlay();
				if ((oParentOverlay) && (oParentOverlay.isSelectable())) {
					oParentOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oFirstChildOverlay = Utils.getFirstFocusableChildOverlay(oOverlay);
				if (oFirstChildOverlay) {
					oFirstChildOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oPrevSiblingOverlay = Utils.getPreviousFocusableSiblingOverlay(oOverlay);
				if (oPrevSiblingOverlay) {
					oPrevSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oNextSiblingOverlay = Utils.getNextFocusableSiblingOverlay(oOverlay);
				if (oNextSiblingOverlay) {
					oNextSiblingOverlay.focus();
					oEvent.stopPropagation();
				}
			}
		}
	};

	/**
	 * Handle MouseDown event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onMouseDown = function(oEvent) {
		if (sap.ui.Device.browser.name == "ie"){
			var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
			if (oOverlay.isSelectable()){
				oOverlay.focus();
				oEvent.stopPropagation();
			} else {
				oOverlay.getDomRef().blur();
			}
			oEvent.preventDefault;
		}
	};

	/**
	 * Handle click event
	 *
	 * @param {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	Selection.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay.isSelectable()) {
			oOverlay.setSelected(!oOverlay.getSelected());
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	return Selection;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Selection.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.AddSmart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.AddSmart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/AddSmart",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(jQuery, FlexCommand, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Add new group / group element to a smart form
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.AddSmart
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var AddSmart = FlexCommand.extend("sap.ui.rta.command.AddSmart", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				source : {
					type : "object"
				},
				index : {
					type : "number"
				},
				newControlId : {
					type : "string"
				},
				labels : {
					type : "array"
				},
				jsTypes : {
					type : "array"
				},
				fieldValues : {
					type : "array"
				},
				valuePropertys : {
					type : "array"
				}
			},
			associations : {},
			events : {}
		}
	});

	AddSmart.prototype._getSpecificChangeInfo = function() {
		// general format
		var mSpecificInfo = {
			changeType : this.getChangeType(),
			selector : {
				id : this._getElement().getId()
			},
			index : this.getIndex(),
			newControlId : this.getNewControlId(),
			labels : this.getLabels()
		};

		// optional properties (e.g. add fields specific)
		if (this.getJsTypes()) {
			mSpecificInfo.jsTypes = this.getJsTypes();
		}
		if (this.getFieldValues()) {
			mSpecificInfo.fieldValues = this.getFieldValues();
		}
		if (this.getValuePropertys()) {
			mSpecificInfo.valueProperty = this.getValuePropertys();
		}

		var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(this._getElement());
		if (oControlAnalyzer) {
			mSpecificInfo = oControlAnalyzer.mapSpecificChangeData("Add", mSpecificInfo);
		}

		return mSpecificInfo;
	};

	AddSmart.prototype._getFlexChange = function() {
		var mSpecificChangeInfo = this._getSpecificChangeInfo();

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : this._getElement()
		};
	};

	/**
	 * @override
	 */
	AddSmart.prototype._getForwardFlexChange = function(oElement) {
		return this._getFlexChange();
	};

	/**
	 * @override
	 */
	AddSmart.prototype.undo = function() {
		var sAddedControlId = this.getNewControlId();
		var oAddedControl = sap.ui.getCore().byId(sAddedControlId);
		if (oAddedControl) {
			// TODO check this logic, when deserializing stack
			oAddedControl.destroy();
		}
	};

	/**
	 * @override
	 */
	AddSmart.prototype.serialize = function() {
		return this._getSpecificChangeInfo();
	};

	return AddSmart;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/AddSmart.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Group') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Group",['sap/ui/rta/command/BaseCommand', 'sap/ui/rta/Utils',
               'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(BaseCommand, Utils, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Group = BaseCommand.extend("sap.ui.rta.command.Group", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				source : {
					type : "object"
				},
				index : {
					type : "number"
				},
				labels : {
					type : "array"
				},
				jsTypes : {
					type : "array"
				},
				fieldValues : {
					type : "array"
				},
				valuePropertys : {
					type : "array"
				},
				groupFields : {
					type : "array"
				},
				smartForm : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});

	Group.prototype.init = function() {
		this._aCommands = [];
		this._aOdataFields = [];
	};
	
	/**
	 * @override
	 */
	Group.prototype.undo = function() {
		this._updateElement();
		for (var i = 0; i < this._aCommands.length; i++) {
			this._aCommands[i].undo();
		}
		this.getElement().destroy();
	};
	
	Group.prototype.execute = function() {
		var that = this;
		return this._createGroupCommands().then(function() {
			for (var i = 0; i < that._aCommands.length; i++) {
				that._aCommands[i].execute();
			}
		});
	};

	Group.prototype.getCommands = function() {
		return this._aCommands;
	};

	Group.prototype.serialize = function() {
		var aSeralized = [];
		for (var i = 0; i < this._aCommands.length; i++) {
			aSeralized.push(this._aCommands[i].serialize());
		}
		return aSeralized;
	};

	Group.prototype._updateElement = function() {
		var that = this;
		sap.ui.getCore().applyChanges();
		var aPaths = this._aOdataFields.map(function(oField) {
			return that._getBindingPath(oField);
		});
		var sElementId = Utils.createNewSmartFormGroupElementId(this.getSmartForm(), aPaths);
		this.setElement(sap.ui.getCore().byId(sElementId));
	};

	Group.prototype._createGroupCommands = function() {
		if (this._aCommands.length > 0 ) {
			return Promise.resolve();
		}
		var that = this;
		var oSmartFormAnalyzer = sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory.getControlAnalyzerFor(this.getSmartForm());
		var aGroupFields = this.getGroupFields();
		return oSmartFormAnalyzer.prepare().then(function() {
			var aJsTypes = [];
			var aFieldLabels = [];
			var aFieldValues = [];
			var aFieldProperties = [];
			var mHiddenElements = oSmartFormAnalyzer.getHiddenElements();
			that._aOdataFields = [];
			for (var i = 0; i < aGroupFields.length; i++) {
				var aFields = aGroupFields[i].getFields();

				for (var z = 0; z < aFields.length; z++) {
					var oField = aFields[z];
					var mPaths = Utils.getElementBindingPaths(oField);
					var sFoundFieldPath = Utils.findFieldBindingPathInFieldsArray(mPaths, mHiddenElements);
					var oFoundDataField = mHiddenElements[sFoundFieldPath];
					var sPath = that._getBindingPath(oFoundDataField);

					that._aOdataFields.push(oFoundDataField);
					aJsTypes.push(oField.getMetadata().getName());
					aFieldLabels.push(oFoundDataField["fieldLabel"]);
					aFieldValues.push(sPath);
					aFieldProperties.push(mPaths[sFoundFieldPath].valueProperty);
				}
				var oFieldHideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(aGroupFields[i], "Hide");
				that._aCommands.push(oFieldHideCommand);
//				}
			}
			var sNewFieldId = Utils.createNewSmartFormGroupElementId(that.getSmartForm(), aFieldValues);
			if (sap.ui.getCore().byId(sNewFieldId)) {
				var oExisitingField = sap.ui.getCore().byId(sNewFieldId);
				var oParentContainer = oExisitingField.getParent();
				var oExisitingFieldUnhideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oExisitingField, "Unhide");
				var oExisitingFieldMoveCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oParentContainer, "Move");
				oExisitingFieldMoveCommand.setMovedElements([{
					element : oExisitingField,
					sourceIndex : 0,
					targetIndex : that.getIndex()
				}]);
				oExisitingFieldMoveCommand.setTarget({
					aggregation: "formElements",
					index: that.getIndex(),
					parent: oParentContainer
				});
				oExisitingFieldMoveCommand.setSource({
					aggregation: "formElements",
					index: 0,
					parent: oParentContainer
				});
				var oExisitingFieldRenameCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oExisitingField, "Rename");
				var sNewText;
				for (var j = 0; j < aFieldLabels.length; j++) {
					sNewText = sNewText ? sNewText + "/" + aFieldLabels[j] : aFieldLabels[j];
				}
				oExisitingFieldRenameCommand.setNewValue(sNewText);
				that._aCommands.push(oExisitingFieldRenameCommand);
				that._aCommands.push(oExisitingFieldUnhideCommand);
				that._aCommands.push(oExisitingFieldMoveCommand);
			} else {
				that._aCommands.push(Utils.createNewAddFieldsCommand(that.getSmartForm(), that.getSource().getParent(), that.getIndex(), aJsTypes, aFieldLabels, aFieldProperties, aFieldValues));
			}
		});
	};

	Group.prototype._getBindingPath = function(oDataField) {
		var sPath = "";
		if (oDataField.isComplexProperty) {
			sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
		} else {
			sPath = oDataField.name;
		}
		return sPath;
	};

	return Group;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Group.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Move') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Move'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.MoveElements'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Move",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', "sap/ui/fl/changeHandler/MoveElements"],
		function(jQuery, FlexCommand, ControlAnalyzerFactory, MoveElementsChangeHandler) {
			"use strict";

			/**
			 * Move Element from one place to another
			 *
			 * @class
			 * @extends sap.ui.rta.command.FlexCommand
			 * @author SAP SE
			 * @version 1.38.33
			 * @constructor
			 * @private
			 * @since 1.34
			 * @alias sap.ui.rta.command.Move
			 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API
			 *               might be changed in future.
			 */
			var Move = FlexCommand.extend("sap.ui.rta.command.Move", {
				metadata : {
					library : "sap.ui.rta",
					properties : {
						movedElements : {
							type : "array"
						},
						target : {
							type : "object"
						},
						source : {
							type : "object"
						},
						changeType : {
							type : "string",
							defaultValue : "moveElements"
						}
					},
					associations : {},
					events : {}
				}
			});

			Move.prototype.init = function() {
				this.setChangeHandler(MoveElementsChangeHandler);
			};

			Move.FORWARD = true;
			Move.BACKWARD = false;

			Move.prototype._getSpecificChangeInfo = function(bForward) {
				var mSource = bForward ? this.getSource() : this.getTarget();
				var mTarget = bForward ? this.getTarget() : this.getSource();
				var oSourceParent = mSource.parent || sap.ui.getCore().byId(mSource.id);

				// replace elements by their id, unify format and help with serialization
				if (mSource.parent) {
					mSource.id = mSource.parent.getId();
					delete mSource.parent;
				}
				if (mTarget.parent) {
					mTarget.id = mTarget.parent.getId();
					delete mTarget.parent;
				}
				var mSpecificInfo = {
					changeType : this.getChangeType(),
					source : mSource,
					target : mTarget,
					movedElements : []
				};

				this.getMovedElements().forEach(function(mMovedElement) {
					mSpecificInfo.movedElements.push({
						id : mMovedElement.id || mMovedElement.element.getId(),
						sourceIndex : bForward ? mMovedElement.sourceIndex : mMovedElement.targetIndex,
						targetIndex : bForward ? mMovedElement.targetIndex : mMovedElement.sourceIndex
					});
				});

				var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oSourceParent);
				if (oControlAnalyzer) {
					mSpecificInfo = oControlAnalyzer.mapSpecificChangeData("Move", mSpecificInfo);
				}

				return {
					data : mSpecificInfo,
					sourceParent : oSourceParent
				};
			};

			Move.prototype._getFlexChange = function(bForward) {
				var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

				var oChange = this._completeChangeContent(mSpecificChangeInfo.data);

				return {
					change : oChange,
					selectorElement : mSpecificChangeInfo.sourceParent
				};
			};

			/**
			 * @override
			 */
			Move.prototype._getForwardFlexChange = function(oElement) {
				return this._getFlexChange(Move.FORWARD);
			};

			/**
			 * @override
			 */
			Move.prototype._getBackwardFlexChange = function(oElement) {
				return this._getFlexChange(Move.BACKWARD);
			};

			/**
			 * @override
			 */
			Move.prototype.serialize = function() {
				return this._getSpecificChangeInfo(Move.FORWARD).data;
			};

			return Move;

		}, /* bExport= */true);

}; // end of sap/ui/rta/command/Move.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Rename') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.changes.RenameGroup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.changes.RenameField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Change'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/Rename",['jquery.sap.global', 'sap/ui/rta/command/FlexCommand',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', "sap/ui/comp/smartform/flexibility/changes/RenameGroup",
		"sap/ui/comp/smartform/flexibility/changes/RenameField", "sap/ui/fl/Change"], function(jQuery, FlexCommand,
		ControlAnalyzerFactory, RenameGroupChangeHandler, RenameFieldChangeHandler, Change) {
	"use strict";

	/**
	 * Rename Element from one place to another
	 * 
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Rename
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = FlexCommand.extend("sap.ui.rta.command.Rename", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				newValue : {
					type : "string",
					defaultValue : "new text"
				},
				oldValue : {
					type : "string",
					defaultValue : undefined
				}
			},
			associations : {},
			events : {}
		}
	});

	Rename.FORWARD = true;
	Rename.BACKWARD = false;

	Rename.prototype._getSpecificChangeInfo = function(bForward) {

		var oElement = this.getElement();
		var mSpecificInfo = {};

		mSpecificInfo.selector = {};
		mSpecificInfo.selector.id = oElement.getId();
		mSpecificInfo.value = bForward ? this.getNewValue() : this.getOldValue();
		mSpecificInfo.changeType = this.getChangeType();
		mSpecificInfo.element = oElement;

		// Rewrite the change info according to the element type
		var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(this._getElement());
		if (oControlAnalyzer) {
			mSpecificInfo = oControlAnalyzer.mapSpecificChangeData("Rename", mSpecificInfo);
		}
		return mSpecificInfo;

	};

	/**
	 * @override
	 */
	Rename.prototype.execute = function() {
		this._rememberOldValue();
		FlexCommand.prototype.execute.apply(this, arguments);
	};

	/**
	 * @override
	 */
	Rename.prototype.undo = function() {
		FlexCommand.prototype.undo.apply(this, arguments);
		this._rememberOldValue();
	};

	Rename.prototype._rememberOldValue = function() {
		var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(this.getElement());
		if (oControlAnalyzer) {
			var sText = oControlAnalyzer.getLabel(this.getElement());
			if (sText !== null) {
				this.setOldValue(sText);
			}
		}
	};

	Rename.prototype._getFlexChange = function(bForward, oElement) {
		var mSpecificChangeInfo = this._getSpecificChangeInfo(bForward);

		var oChange = this._completeChangeContent(mSpecificChangeInfo);

		return {
			change : oChange,
			selectorElement : oElement
		};
	};

	/**
	 * @overrideR
	 */
	Rename.prototype._getForwardFlexChange = function(oElement) {
		return this._getFlexChange(Rename.FORWARD, oElement);
	};

	/**
	 * @override
	 */
	Rename.prototype._getBackwardFlexChange = function(oElement) {
		return this._getFlexChange(Rename.BACKWARD, oElement);
	};
	
	Rename.prototype._undoWithElement = function(oElement) {
		FlexCommand.prototype._undoWithElement.apply(this, arguments);
		var oControlAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);
		var sBindingValue = "";
		if (oControlAnalyzer) {
			var oBindingInfo = oControlAnalyzer.getLabelBinding(this.getElement());
			if (oBindingInfo) {
				sBindingValue = oBindingInfo.binding.getValue();
				if (sBindingValue === this.getOldValue()) {
					oControlAnalyzer.resumeLabelBinding(oElement);
				}
			}
		}
		
	};
	
	/**
	 * @override
	 */
	Rename.prototype.serialize = function() {
		return this._getSpecificChangeInfo(Rename.FORWARD);
	};

	return Rename;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.Ungroup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.Ungroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/rta/command/Ungroup",['sap/ui/rta/command/BaseCommand', 'sap/ui/rta/Utils',
               'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(BaseCommand, Utils, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Unhide a control/element
	 *
	 * @class
	 * @extends sap.ui.rta.command.FlexCommand
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.Unhide
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Ungroup = BaseCommand.extend("sap.ui.rta.command.Ungroup", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				changeType : {
					type : "string",
					defaultValue : "UngroupControl"
				},
				smartForm : {
					type : "object"
				}
			},
			associations : {},
			events : {}
		}
	});


	Ungroup.prototype.init = function() {
		this._aCommands = [];
		this._aUngroupFields = [];
	};

	/**
	 * @override
	 */
	Ungroup.prototype.undo = function() {
		var aUngroupFields = this._aUngroupFields;
		var aJsTypes = [];
		var aFieldLabels = [];
		var aFieldValues = [];
		var aFieldProperties = [];
		if (aUngroupFields) {
			for (var i = 0; i < aUngroupFields.length; i++) {
				var oElement = sap.ui.getCore().byId(aUngroupFields[i].controlId);
				var oDataField = aUngroupFields[i];
				aJsTypes.push(oElement.getFields()[0].getMetadata().getName());
				aFieldLabels.push(oDataField["sap:label"]);
				var sPath = "";
				if (oDataField.isComplexProperty) {
					sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
				} else {
					sPath = oDataField.name;
				}
				aFieldValues.push(sPath);
				aFieldProperties.push(oDataField.valueProperty);
				var oFieldHideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oElement, "Hide");
				oFieldHideCommand.execute();
			}
			var oAddFieldCommand = Utils.createNewAddFieldsCommand(this.getSmartForm(), oElement.getParent(), 0, aJsTypes, aFieldLabels, aFieldProperties, aFieldValues);
			oAddFieldCommand.execute();
		}
	};

	Ungroup.prototype.execute = function() {
		var that = this;
		return this._createUngroupCommands().then(function() {
			for (var i = 0; i < that._aCommands.length; i++) {
				that._aCommands[i].execute();
			}
			that._updateElement();
			that.getElement().destroy();
		});
	};

	Ungroup.prototype.getCommands = function() {
		return this._aCommands;
	};

	Ungroup.prototype.serialize = function() {
		var aSeralized = [];
		for (var i = 0; i < this._aCommands.length; i++) {
			aSeralized.push(this._aCommands[i].serialize());
		}
		return aSeralized;
	};

	Ungroup.prototype._createUngroupCommands = function() {
		var that = this;
		var oGroupContainer = this.getElement().getParent();
		if (this._aCommands.length > 0) {
			return Promise.resolve();
		}

		var oSmartFormAnalyzer = sap.ui.rta.controlAnalyzer.ControlAnalyzerFactory.getControlAnalyzerFor(this.getSmartForm());
		return oSmartFormAnalyzer.prepare().then(function() {
			var mHiddenElements = oSmartFormAnalyzer.getHiddenElements();
			var aFields = that.getElement().getFields();

			for (var i = 0; i < aFields.length; i++) {
				var oField = aFields[i];
				var mPaths = Utils.getElementBindingPaths(oField);
				var sFoundFieldPath = Utils.findFieldBindingPathInFieldsArray(mPaths, mHiddenElements);
				var oFoundDataField = mHiddenElements[sFoundFieldPath];
				oFoundDataField["valueProperty"] = mPaths[sFoundFieldPath].valueProperty;

				if (oFoundDataField && oFoundDataField.controlId) {
					var oGroupElement = sap.ui.getCore().byId(oFoundDataField.controlId);
					var oUnhideCommand = sap.ui.rta.command.CommandFactory.getCommandFor(oGroupElement, "Unhide");
					that._aCommands.push(oUnhideCommand);
					var oMoveCommand = that._createMoveFieldCommand(oFoundDataField, oGroupElement);
					that._aCommands.push(oMoveCommand);
				} else if (oFoundDataField && !oFoundDataField.controlId) {
					var sPath = that._getBindingPath(oFoundDataField);
					var oNewFieldCommand = Utils.createNewAddFieldsCommand(that.getSmartForm(), oGroupContainer, 0, [oField.getMetadata().getName()], 
							[oFoundDataField["sap:label"]],[mPaths[oFoundDataField.name].valueProperty], [sPath]);
					that._aCommands.push(oNewFieldCommand);
					oFoundDataField["controlId"] = oNewFieldCommand.getNewControlId();
				}
				that._aUngroupFields.push(oFoundDataField);
			}
		});
	};

	Ungroup.prototype._updateElement = function() {
		sap.ui.getCore().applyChanges();
		if (this._aUngroupFields.length === 0 || (this.getElement() && !this.getElement().bIsDestroyed) ) {
			return;
		}
		var aPaths = [];
		for (var i = 0; i < this._aUngroupFields.length; i++) {
			aPaths.push(this._getBindingPath(this._aUngroupFields[i]));
		}
		var sElementId = Utils.createNewSmartFormGroupElementId(this.getSmartForm(), aPaths);
		this.setElement(sap.ui.getCore().byId(sElementId));
	};

	Ungroup.prototype._createMoveFieldCommand = function(oFieldData, oGroupElement) {
		var oGroupContainer = this.getElement().getParent();
		var oMove = sap.ui.rta.command.CommandFactory.getCommandFor(oGroupContainer, "Move");
		oMove.setMovedElements([{
			element : oGroupElement,
			sourceIndex : 0,
			targetIndex : 1
		}]);
		oMove.setTarget({
			aggregation: "formElements",
			index: 0,
			id: oGroupContainer.getId()
		});
		oMove.setSource({
			aggregation: "formElements",
			index: 0,
			id: oGroupElement.getParent().getId()
		});
		return oMove;
	};
	
	Ungroup.prototype._getBindingPath = function(oDataField) {
		var sPath = "";
		if (oDataField.isComplexProperty) {
			sPath = oDataField.complexTypePropertyName + "/" + oDataField.name;
		} else {
			sPath = oDataField.name;
		}
		return sPath;
	};

	return Ungroup;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/Ungroup.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.DragDrop') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.DragDrop.
jQuery.sap.declare('sap.ui.rta.plugin.DragDrop'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ControlDragDrop'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/DragDrop",[
	'jquery.sap.global', 
	'sap/ui/dt/plugin/ControlDragDrop',
	'sap/ui/rta/plugin/RTAElementMover'
],
function(jQuery,
		ControlDragDrop, 
		RTAElementMover) {
	"use strict";

	/**
	 * Constructor for a new DragDrop plugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The DragDrop plugin adds functionality/styling required for RTA.
	 * @extends sap.ui.dt.ControlDragDrop
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.DragDrop
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var DragDrop = ControlDragDrop.extend("sap.ui.rta.plugin.DragDrop", /** @lends sap.ui.rta.plugin.DragDrop.prototype */ {		
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				elementMover : {
					type : "sap.ui.dt.plugin.ElementMover"
				}
			},
			associations : {
			},
			events : {
				dragStarted : {}
			}
		}
	});
	
	/**
	 * @override
	 */
	DragDrop.prototype.init = function() {
		ControlDragDrop.prototype.init.apply(this, arguments);
		this.setElementMover(new RTAElementMover());
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.registerElementOverlay = function(oOverlay) {
		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
		}

		ControlDragDrop.prototype.registerElementOverlay.apply(this, arguments);
	};


	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.deregisterElementOverlay = function(oOverlay) {
		ControlDragDrop.prototype.deregisterElementOverlay.apply(this, arguments);
		this._detachMovableBrowserEvents(oOverlay);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._attachMovableBrowserEvents = function(oOverlay) {
		oOverlay.attachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.attachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};
	
	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	DragDrop.prototype._detachMovableBrowserEvents = function(oOverlay) {
		oOverlay.detachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.detachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};


	/**
	 * Additionally to super->onDragStart this method stores the parent's id in an instance variable
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragStart = function(oOverlay) {
		this.fireDragStarted();
		
		ControlDragDrop.prototype.onDragStart.apply(this, arguments);

		this.getDesignTime().getSelection().forEach(function(oOverlay) {
			oOverlay.setSelected(false);
		});

		oOverlay.$().addClass("sapUiRtaOverlayPlaceholder");
	};
	
	/**
	 * Additionally to super->onDragEnd this method takes care about moving the element
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onDragEnd = function(oOverlay) {
		ControlDragDrop.prototype.onDragEnd.apply(this, arguments);

		oOverlay.$().removeClass("sapUiRtaOverlayPlaceholder");
		oOverlay.setSelected(true);
		oOverlay.focus();	
	};

	/**
	 * If overlay is draggable attach browser events o overlay. If not remove them.
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	DragDrop.prototype.onMovableChange = function(oOverlay) {
		ControlDragDrop.prototype.onMovableChange.apply(this, arguments);
		if (oOverlay.isMovable()) {
			this._attachMovableBrowserEvents(oOverlay);
		} else {
			this._detachMovableBrowserEvents(oOverlay);
		}
	};
	/**
	 * Handle mouse over event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseOver = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay !== this._oPreviousHoverTarget) {
			if (this._oPreviousHoverTarget) {
				this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
			}
			this._oPreviousHoverTarget = oOverlay;
			oOverlay.$().addClass("sapUiRtaOverlayHover");
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
		
	};

	/**
	 * Handle mouse leave event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	DragDrop.prototype._onMouseLeave = function(oEvent) {
		if (this._oPreviousHoverTarget) {
			this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
		}
		delete this._oPreviousHoverTarget;
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	return DragDrop;
}, /* bExport= */ true);

}; // end of sap/ui/rta/plugin/DragDrop.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.command.CommandFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.command.CommandFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/command/CommandFactory",['sap/ui/base/ManagedObject', 'sap/ui/rta/command/Hide', 'sap/ui/rta/command/Unhide',
    'sap/ui/rta/command/Stash', 'sap/ui/rta/command/Unstash',
		'sap/ui/rta/command/Move', 'sap/ui/rta/command/AddSmart', 'sap/ui/rta/command/Rename', 'sap/ui/rta/command/Group',
		'sap/ui/rta/command/Ungroup', 'sap/ui/rta/command/Property', 'sap/ui/rta/command/BindProperty', 'sap/ui/rta/command/CompositeCommand',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory', 'sap/ui/fl/registry/ChangeRegistry'], function(ManagedObject,
		Hide, Unhide, Stash, Unstash, Move, AddSmart, RenameCommand, Group, Ungroup, PropertyCommand, BindPropertyCommand, CompositeCommand, ControlAnalyzerFactory,
		ChangeRegistry) {
	"use strict";

	var fnConfigureCommand = function(oElement, oCommand) {

		var oAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oElement);

		var sControlType = oElement.getMetadata().getName();
		var sChangeType = oAnalyzer.getFlexChangeType(oCommand.getName(), oElement);

		if (sChangeType) {
			var oResult = ChangeRegistry.getInstance().getRegistryItems({
				controlType : sControlType,
				changeTypeName : sChangeType
			});

			if (oResult && oResult[sControlType] && oResult[sControlType][sChangeType]) {
				var oRegItem = oResult[sControlType][sChangeType];
				var ChangeHandler = oRegItem.getChangeTypeMetadata().getChangeHandler();

				oCommand.setChangeHandler(ChangeHandler);
				oCommand.setChangeType(sChangeType);

			} else {
				jQuery.sap.log.warning("No '" + sChangeType + "' change handler for " + sControlType + " registered");
			}

		} else {
			jQuery.sap.log.warning("No " + oCommand.getName() + " change type registered for " + sControlType);
		}

		return oCommand;
	};

	var mCommands = {
		"Hide" : {
			clazz : Hide
		},
		"Unhide" : {
			clazz : Unhide
		},
		"Stash" : {
			clazz : Stash
		},
		"Unstash" : {
			clazz : Unstash
		},
		"Ungroup" : {
			clazz : Ungroup
		},
		"Group" : {
			clazz : Group
		},
		"Move" : {
			clazz : Move,
			configure : fnConfigureCommand
		},
		"Add" : {
			clazz : AddSmart,
			configure : fnConfigureCommand
		},
		"Composite" : {
			clazz : CompositeCommand
		},
		"Rename" : {
			clazz : RenameCommand,
			configure : fnConfigureCommand
		},
		"Property" : {
			clazz : PropertyCommand
		},
		"BindProperty" : {
			clazz : BindPropertyCommand
		}
	};

	/**
	 * Factory for commands. Shall handle the control specific command configuration.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.34
	 * @alias sap.ui.rta.command.CommandFactory
	 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var CommandFactory = ManagedObject.extend("sap.ui.rta.command.CommandFactory", {
		metadata : {
			library : "sap.ui.rta",
			properties : {},
			associations : {},
			events : {}
		}
	});

	/**
	 *
	 */
	CommandFactory.getCommandFor = function(oElement, sCommand, mSettings) {
		var mCommand = mCommands[sCommand];

		var Command = mCommand.clazz;

		mSettings = jQuery.extend(mSettings, {
			element : oElement,
			name : sCommand
		});

		var oCommand = new Command(mSettings);

		if (mCommand.configure) {
			mCommand.configure(oElement, oCommand);
		}
		return oCommand;
	};

	return CommandFactory;

}, /* bExport= */true);

}; // end of sap/ui/rta/command/CommandFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.plugin.Rename') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.plugin.Rename.
jQuery.sap.declare('sap.ui.rta.plugin.Rename'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DOMUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/plugin/Rename",['jquery.sap.global', 'sap/ui/dt/Plugin', 'sap/ui/dt/ElementUtil', 'sap/ui/dt/OverlayUtil',
		'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/Utils', 'sap/ui/rta/command/Stack',
		'sap/ui/rta/command/CommandFactory', 'sap/ui/dt/DOMUtil', 'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory'], function(jQuery, Plugin, ElementUtil, OverlayUtil,
		OverlayRegistry, Utils, CommandStack, CommandFactory, DOMUtil, ControlAnalyzerFactory) {
	"use strict";

	/**
	 * Constructor for a new Rename.
	 *
	 * @param {string}
	 *          [sId] id for the new object, generated automatically if no id is given
	 * @param {object}
	 *          [mSettings] initial settings for the new object
	 *
	 * @class The Rename allows to create a set of Overlays above the root elements and theire public children and manage
	 *        their events.
	 * @extends sap.ui.core.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.38.33
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.plugin.Rename
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be
	 *               changed in future.
	 */
	var Rename = Plugin.extend("sap.ui.rta.plugin.Rename", /** @lends sap.ui.rta.plugin.Rename.prototype */
	{
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
				commandStack : {
					type : "sap.ui.rta.commandStack"
				},
				oldValue : "string"
			},
			associations : {},
			events : {
				/** Fired when renaming is possible */
				"editable" : {},

				/** Fired when renaming is switched off */
				"nonEditable" : {}
			}
		}
	});

	/**
	 * @override
	 */
	Rename.prototype.exit = function() {
		Plugin.prototype.exit.apply(this, arguments);

		if (this._$oEditableControlDomRef) {
			this._stopEdit();
		}

		clearTimeout(this._iStopTimeout);
	};

	/**
	 * @override
	 */
	Rename.prototype.setDesignTime = function(oDesignTime) {
		this._aSelection = [];
		var oOldDesignTime = this.getDesignTime();

		if (oOldDesignTime) {
			oOldDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
		}
		Plugin.prototype.setDesignTime.apply(this, arguments);

		if (oDesignTime) {
			oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
			this._aSelection = oDesignTime.getSelection();
		}
	};

	/**
	 * @override
	 */
	Rename.prototype.registerElementOverlay = function(oOverlay) {
		oOverlay.attachEvent("editableChange", this._manageClickEvent, this);

		if (this.checkEditable(oOverlay)) {
			oOverlay.setEditable(true);
		}
	};

	/**
	 * @override
	 */
	Rename.prototype.deregisterElementOverlay = function(oOverlay) {
		oOverlay.detachEvent("editableChange", this._manageClickEvent, this);
		oOverlay.detachBrowserEvent("click", this._onClick, this);
	};

	/**
	 * @private
	 */
	Rename.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		this.startEdit(oOverlay);
		oEvent.preventDefault();
	};

	/**
	 * @override
	 */
	Rename.prototype._onDesignTimeSelectionChange = function(oEvent) {
		var that = this;
		var aSelection = oEvent.getParameter("selection");

		// merge all overlays from old and current selection together
		aSelection.forEach(function(oOverlay) {
			if (that._aSelection.indexOf(oOverlay) === -1) {
				that._aSelection.push(oOverlay);
			}
		});
		that._aSelection.forEach(this._manageClickEvent, this);
	};

	/**
	 * @override
	 */
	Rename.prototype._manageClickEvent = function(vEventOrElement) {
		var oOverlay = vEventOrElement.getSource ? vEventOrElement.getSource() : vEventOrElement;
		if (oOverlay.isSelected() && oOverlay.isEditable() && oOverlay.isMovable()) {
			oOverlay.attachBrowserEvent("click", this._onClick, this);
		} else {
			oOverlay.detachBrowserEvent("click", this._onClick, this);
		}
	};

	/**
	 * @override
	 */
	Rename.prototype.checkEditable = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		return ControlAnalyzerFactory.getControlAnalyzerFor(oElement).isEditable(oElement);
	};

	/**
	 * [startEdit description]
	 *
	 * @param {[type]}
	 *          oOverlay [description]
	 * @return {[type]} [description]
	 * @public
	 */
	Rename.prototype.startEdit = function(oOverlay) {

		this._oEditedOverlay = oOverlay;

		var oEditableControl = this._getEditableControl(this._oEditedOverlay);
		this._$oEditableControlDomRef = oEditableControl.$();

		var oEditableControlOverlay = sap.ui.dt.OverlayRegistry.getOverlay(oEditableControl) || oOverlay;

		var oWrapper = jQuery("<div class='sapUiRtaEditableField'></div>").appendTo(oEditableControlOverlay.$());
		this._$editableField = jQuery("<div contentEditable='true'></div>").appendTo(oWrapper);

		// if label is empty, set a preliminary dummy text at the control to get an overlay
		if (this._$oEditableControlDomRef.text() === "") {
			this._$oEditableControlDomRef.text("_?_");
			this._$editableField.text("");
		} else {
			this._$editableField.text(this._$oEditableControlDomRef.text());
		}

		DOMUtil.copyComputedStyles(this._$oEditableControlDomRef, this._$editableField);
		this._$editableField.children().remove();

		// TODO : for all browsers
		this._$editableField.css({
			"-moz-user-modify" : "read-write",
			"-webkit-user-modify" : "read-write",
			"-ms-user-modify" : "read-write",
			"user-modify" : "read-write",

			"margin-top" : parseInt(this._$editableField.css("margin-top"), 10) - 1 + "px",
			"margin-left" : parseInt(this._$editableField.css("margin-left"), 10) - 1 + "px"
		});

		this._$oEditableControlDomRef.css("visibility", "hidden");

		this._$editableField.one("focus", this._onEditableFieldFocus.bind(this));

		this._$editableField.on("blur", this._onEditableFieldBlur.bind(this));
		this._$editableField.on("keydown", this._onEditableFieldKeydown.bind(this));
		this._$editableField.on("dragstart", this._stopPropagation.bind(this));
		this._$editableField.on("drag", this._stopPropagation.bind(this));
		this._$editableField.on("dragend", this._stopPropagation.bind(this));

		this._$editableField.on("click", this._stopPropagation.bind(this));
		this._$editableField.on("mousedown", this._stopPropagation.bind(this));

		this._$editableField.focus();

		this.setOldValue(this._getCurrentEditableFieldText());
	};

	/**
	 * @private
	 */
	Rename.prototype._getEditableControl = function(oTargetOverlay) {
		var sName = oTargetOverlay.getElementInstance().getMetadata().getName();

		// TODO : control analyzer
		switch (sName) {
			case "sap.ui.comp.smartform.Group" :
				return oTargetOverlay.getElementInstance().getTitle();
			case "sap.ui.comp.smartform.GroupElement" :
				return oTargetOverlay.getElementInstance().getLabel();
			default :
				break;
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._stopPropagation = function(oEvent) {
		oEvent.stopPropagation();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldFocus = function(oEvent) {
		this._oEditedOverlay.setSelected(false);
		var el = oEvent.target;
		var range = document.createRange();
		range.selectNodeContents(el);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	};

	/**
	 * @private
	 */
	Rename.prototype._stopEdit = function(bRestoreFocus) {
		// exchange the dummy text at the label with the genuine empty text (see start_edit function)
		if (this._$oEditableControlDomRef.text() === "_?_") {
			this._$oEditableControlDomRef.text("");
		}

		this._oEditedOverlay.$().find(".sapUiRtaEditableField").remove();
		this._$oEditableControlDomRef.css("visibility", "visible");

		if (bRestoreFocus) {
			var oOverlay = this._oEditedOverlay;

			// timeout is needed because of invalidation (test on bounded fields)
			this._iStopTimeout = setTimeout(function() {
				oOverlay.setSelected(true);
				oOverlay.focus();
			}, 0);
		}

		delete this._$editableField;
		delete this._$oEditableControlDomRef;
		delete this._oEditedOverlay;
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldBlur = function(oEvent) {
		this._emitLabelChangeEvent();
		this._stopEdit();
	};

	/**
	 * @private
	 */
	Rename.prototype._onEditableFieldKeydown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			oEvent.preventDefault();

			this._emitLabelChangeEvent();
			this._stopEdit(true);
		} else if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
			oEvent.preventDefault();
			this._stopEdit(true);
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._emitLabelChangeEvent = function() {
		var sText = this._getCurrentEditableFieldText();
		if (this.getOldValue() !== sText) { //check for real change before creating a command
			this._$oEditableControlDomRef.text(sText);
			try {
				var oRenameCommand = CommandFactory.getCommandFor(this._oEditedOverlay.getElementInstance(), "Rename");
				oRenameCommand.setNewValue(sText);
				this.getCommandStack().pushAndExecute(oRenameCommand);
			} catch (oError) {
				jQuery.sap.log.error("Error during rename : ", oError);
			}
		}
	};

	/**
	 * @private
	 */
	Rename.prototype._getCurrentEditableFieldText = function() {
		return this._$editableField.text();
	};

	return Rename;
}, /* bExport= */true);

}; // end of sap/ui/rta/plugin/Rename.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.AddElementsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.ui.AddElementsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScrollContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/AddElementsDialog",['jquery.sap.global',
			   'sap/ui/rta/library',
			   'sap/ui/rta/Utils',
			   'sap/ui/core/Control',
			   'sap/ui/commons/Label',
			   'sap/ui/commons/LabelDesign',
			   'sap/m/Dialog',
			   'sap/ui/model/json/JSONModel',
			   'sap/m/SearchField',
			   'sap/m/Button',
			   'sap/m/Toolbar',
			   'sap/m/ToolbarSpacer',
			   'sap/ui/model/Filter',
			   'sap/ui/model/FilterOperator',
			   'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
			   'sap/ui/rta/command/CommandFactory',
			   'sap/ui/rta/command/CompositeCommand',
			   'sap/m/List',
			   'sap/m/CustomListItem',
			   'sap/m/ListType',
			   'sap/m/ScrollContainer',
			   'sap/ui/model/Sorter',
			   'sap/ui/dt/ElementUtil'
			   ],
			   function (jQuery,library,Utils,Control,Label,LabelDesign,Dialog,JSONModel,SearchField,Button,Toolbar,ToolbarSpacer,Filter,FilterOperator,ControlAnalyzerFactory,CommandFactory,CompositeCommand,List,ListItem,ListType,ScrollContainer,Sorter,ElementUtil) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.AddElementsDialog control.
	 *
	 * @class Context - Dialog for available Fields in Runtime Authoring
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias AddElementsDialog
	 * @experimental Since 1.32. This class is experimental and provides only limited functionality. Also the API might be
	 *			   changed in future.
	 */
	var AddElementsDialog = Control.extend("sap.ui.rta.ui.AddElementsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				/** The root control which the runtime authoring should handle */
				"commandStack" : {
					type : "sap.ui.core.Control"
				}
			},
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			events : {
				"opened" : {},
				"closed" : {},
				"openCustomField" : {}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype.init = function() {
		this._aData = [];
		var that = this;
		this._oModel = new JSONModel();
		// Get messagebundle.properties for sap.ui.rta
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._bAscendingSortOrder = false;
		this._oDialog = this._createDialog();
		var aContent = this._createContent();
		var aButtons = this._createButtons();
		aContent.forEach(function(oContent) {
			that._oDialog.addContent(oContent);
		});
		aButtons.forEach(function(oButton) {
			that._oDialog.addButton(oButton);
		});
		this._oDialog.setInitialFocus(this._oInput);
	};

	/**
	 * Create the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createDialog = function() {
		var oDialog;
		oDialog = new Dialog({
			title : this._oTextResources.getText("HEADER_FREP")
		}).addStyleClass("sapUIRtaFieldRepositoryDialog");


		return oDialog;
	};

	/**
	 * Create the Content of the Dialog
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createContent = function() {
		// SearchField
		this._oInput =  new SearchField({
			width : "100%",
			liveChange : [this._updateModelFilter, this]
		}).addStyleClass("resourceListIF");

		// Button for sorting the List
		var oResortButton = new Button({
			text : "",
			icon : "sap-icon://sort",
			press : [this._resortList, this]
		});

		// Button for creating Custom Fields
		this._oCustomFieldButton = new Button({
			text : "",
			icon : "sap-icon://add",
			tooltip : this._oTextResources.getText("BTN_FREP_CCF"),
			enabled : false,
			press : [this._redirectToCustomFieldCreation, this]
		});

		// Toolbar
		this._oToolbarSpacer1 = new ToolbarSpacer();
		this.oInputFields = new Toolbar({
			content: [this._oInput, oResortButton, this._oToolbarSpacer1, this._oCustomFieldButton]
		});

		// Fields of the List
		var oFieldName = new Label({
			design: LabelDesign.Bold,
			tooltip: {
				parts: [{path: "quickInfo"},{path: "fieldLabel"}],
				formatter: function(quickInfo, fieldLabel) {
											if (!quickInfo) {
													return fieldLabel;
											}
											return quickInfo;
									}
			},
			text: "{fieldLabel}"
		});

		// List
		var oSorter = new Sorter("fieldLabel", this._bAscendingSortOrder);
		this._oList = new List(
				{
					mode : "MultiSelect",
					includeItemInSelection : true,
					growing : false,
					growingScrollToLoad : false,
					select: [this._fnSelected, this]
				});
		var oListItem = new ListItem({
			type: ListType.Active,
			selected : "{checked}",
			content : [oFieldName]
		});
		this._oModel.setData({modelData: this._aData});
		this._oList.setModel(this._oModel);
		this._oList.bindItems({path:"/modelData", template: oListItem, sorter : oSorter});

		// Scrollcontainer containing the List
		// Needed for scrolling the List
		var oScrollContainer = new ScrollContainer({
			content: this._oList,
			vertical: true,
			horizontal: false
		}).addStyleClass("sapUIRtaCCDialogScrollContainer");

		return [this.oInputFields,
				oScrollContainer];
	};

	/**
	 * Create the Buttons of the Dialog (OK/Cancel)
	 *
	 * @private
	 */
	AddElementsDialog.prototype._createButtons = function() {
		var oOKButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_OK"),
			press : [this.applyChanges, this]
		});
		var oCancelButton = new Button({
			text : this._oTextResources.getText("BTN_FREP_CANCEL"),
			press : [this.cancelDialog, this]
		});
		return [oOKButton, oCancelButton];
	};

	/**
	 * Close the dialog.
	 */
	AddElementsDialog.prototype.applyChanges = function() {
		// push and Execute the Commands onto the command stack
		if (this._oCompositeCommand.getCommands().length > 0){
			this.getCommandStack().pushAndExecute(this._oCompositeCommand);
		}
		// clear all variables
		this._oList.removeSelections();
		this._oCompositeCommand = null;
		this._mCommands = [];
		this._oCurrentAnalyzer = null;
		this._oCurrentSelectedBlock = null;
		this._oDialog.close();
	};

	/**
	 * Close dialog and revert all change operations
	 */
	AddElementsDialog.prototype.cancelDialog = function() {
		// clear all variables
		this._oList.removeSelections();
		this._oCompositeCommand = null;
		this._mCommands = [];
		this._oCurrentAnalyzer = null;
		this._oCurrentSelectedBlock = null;
		this._oDialog.close();
	};

	/**
	 * Function to be called when a field is selected in list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._fnSelected = function(oEvent) {
		var oItem = oEvent.getParameter("listItem");
		var oContextObject = oItem.getBindingContext().getObject();
		var sItemId = oContextObject.name ? oContextObject.name : null;
		if (!sItemId) {
			sItemId = oContextObject.controlId ? oContextObject.controlId : null;
		}
		if (sItemId) {
			var oSavedCommandForElement = this._mCommands[sItemId];
			this._executeCommandForSelectedElement(oItem, oSavedCommandForElement, sItemId);
		} else {
			jQuery.sap.log.error("Change could not be applied because of missing id of listItem\n");
		}
	};

	/**
	 * Function to analyze wether a move command is necessary in case of unhiding elements
	 *
	 * @param {sap.ui.Control}
	 *		  oCurrentSelectedBlock {object} mChangeData
	 * @private
	 */
	AddElementsDialog.prototype._getMoveCommand = function(oCurrentSelectedBlock, mChangeData, oSelectedControl) {
		var oResult;

		var oSourceElement = sap.ui.getCore().byId(mChangeData.controlId);
		var oSourceParent = oSourceElement ? oSourceElement.getParent() : null;
		if (oCurrentSelectedBlock && oSourceParent && (oCurrentSelectedBlock.getId() !== oSourceElement.getId())) {
			// TODO: this works only for groups, use componentAnalyzer to decide method
			var aSourceChildren = ElementUtil.getAggregation(oSourceParent, "groupElements");
			if (aSourceChildren.length > 0) {
				oResult = CommandFactory.getCommandFor(oSourceParent, "Move");
				var iSourceIndex = aSourceChildren.indexOf(oSourceElement);
				var aTargetChildren = ElementUtil.getAggregation(oCurrentSelectedBlock, "groupElements");
				var iTargetIndex = Utils.determineTargetIndex(oSelectedControl, oCurrentSelectedBlock, aTargetChildren, 0);

				oResult.setMovedElements([{
					element : oSourceElement,
					sourceIndex : iSourceIndex,
					targetIndex : iTargetIndex
				}]);
				oResult.setSource({
					parent : oSourceParent,
					aggregation : oSourceElement.sParentAggregationName
				});
				oResult.setTarget({
					parent : oCurrentSelectedBlock,
					aggregation : "groupElements"
				});
			}
		}
		return oResult;
	};

	/**
	 * Function which executes the command for the selected element
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._executeCommandForSelectedElement = function(oItem, oCommand, sItemId) {
		var bIsChecked = oItem.getSelected();
		var that = this;

		// If already a command exists, then the new command is remove selection
		if (oCommand){
			delete that._mCommands[sItemId];
			that._oCompositeCommand.removeCommand(oCommand);
			return;
		}
		// There is no Command for this Item in the list
		this._oCurrentAnalyzer.createChangeData(oItem, this._oCurrentSelectedBlock, !bIsChecked, this._oSelectedControl).then(function(oChangeData) {
			if (oChangeData) {
				// New Field on the screen
				if (oChangeData.changeType === "addField") {
					oCommand = CommandFactory.getCommandFor(that._oCurrentSelectedBlock, "Add");
					oCommand.setIndex(oChangeData.index);
					oCommand.setNewControlId(oChangeData.newControlId);
					oCommand.setLabels([oChangeData.fieldLabel]);
					oCommand.setJsTypes([oChangeData.jsType]);
					oCommand.setFieldValues([oChangeData.fieldValue]);
					oCommand.setValuePropertys([oChangeData.valueProperty]);
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.addCommand(oCommand);
				} else if (oChangeData.changeType === "unhideControl") {
					// Field has already been on the screen and has been hidden
					oCommand = CommandFactory.getCommandFor(sap.ui.getCore().byId(oChangeData.controlId), "Unhide");
					var oMoveCommand = that._getMoveCommand(that._oCurrentSelectedBlock, oChangeData, that._oSelectedControl);
					if (oMoveCommand) {
						var oComposit = new CompositeCommand();
						oComposit.addCommand(oMoveCommand);
						oComposit.addCommand(oCommand);
						oCommand = oComposit;
					}
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.addCommand(oCommand);
				} else if (oChangeData.changeType === "unstashControl") {
					oCommand = CommandFactory.getCommandFor(sap.ui.getCore().byId(oChangeData.controlId), "Unstash");
					oCommand.setParentAggregationName(oChangeData.parentAggregationName);
					oCommand.setIndex(oChangeData.iTargetIndex);
					that._mCommands[sItemId] = oCommand;
					that._oCompositeCommand.addCommand(oCommand);
				}
			} else {
				// undo selection, as it was prevented inside change controller
				oItem.setSelected(!bIsChecked);
			}
		}).catch(function(oError) {
			jQuery.sap.log.error("Change could not be applied \n" + oError);
		});
	};

	/**
	 * Open the Field Repository Dialog
	 *
	 * @param {sap.ui.core.Control}
	 *		  oControl Currently selected control
	 */
	AddElementsDialog.prototype.open = function(oControl) {
		var that = this;
		this._oSelectedControl = oControl;
		this._mCommands = [];
		this._oCompositeCommand = new CompositeCommand();

		if (oControl.getMetadata().getName().indexOf("ObjectPage") !== -1) {
			this._oDialog.setTitle(this._oTextResources.getText("HEADER_SREP"));
		} else {
			this._oDialog.setTitle(this._oTextResources.getText("HEADER_FREP"));
		}

		Utils.isServiceUpToDate(oControl).then(function(bUpToDate){
			if (bUpToDate){
				that._oCurrentAnalyzer = ControlAnalyzerFactory.getControlAnalyzerFor(oControl);
				return that._oCurrentAnalyzer.prepare().then(function() {
					var oCustomFields = that._oCurrentAnalyzer.getCustomFieldAvailable ? that._oCurrentAnalyzer.getCustomFieldAvailable() : false;
					if (oCustomFields) {
							that.setShowCreateCustomField(true);
							that._oCurrentFieldExtInfo = oCustomFields;
							that.attachEventOnce('openCustomField', null, that._onOpenCustomField, that);
					}
				}).then(function(){
					// Get a change controller that is able to handle the actual selected control
					if (that._oCurrentAnalyzer) {
						that._oCurrentSelectedBlock = that._oCurrentAnalyzer.getSelectedBlock(oControl);

						// TODO: remove url-parameter
						if (/[&?](sap-rta-oldmodel=(true|x)[&#]?)+/i.test(window.location.search)) {
							that._oCurrentAnalyzer.getCustomizeControlModel(oControl, true).then(function(aFieldCollection) {
								that._oModel.setData({modelData: aFieldCollection});
								that._oDialog.oPopup.attachOpened(function (){
									that.fireOpened();
								});
								// Makes sure the modal div element does not change the size of our application (which would result in
								// recalculation of our overlays)
								that._oDialog.open();
							});
						} else {
								var mAvailableElements = that._oCurrentAnalyzer.getAvailableElements();
								that._oModel.setData({modelData:mAvailableElements});
								that._oDialog.oPopup.attachOpened(function (){
									that.fireOpened();
								});
								// Makes sure the modal div element does not change the size of our application (which would result in
								// recalculation of our overlays)
								that._oDialog.open();
						}
					}

				});
			} else {
				that.fireOpened();
			}

		});

	};


	/**
	 * Resort the list
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._resortList = function(oEvent) {
		this._bAscendingSortOrder = !this._bAscendingSortOrder;
		var oBinding = this._oList.getBinding("items");
		var aSorter = [];
		aSorter.push(new Sorter("fieldLabel", this._bAscendingSortOrder));
		oBinding.sort(aSorter);
	};

	/**
	 * Fire an event to redirect to custom field creation
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._redirectToCustomFieldCreation = function(oEvent) {
		this.fireOpenCustomField();
		this._oDialog.close();
	};

	/**
	 * Enables the Custom Field Creation button
	 *
	 * @param {boolean}
	 *		  bShowCCF true shows the button, false not
	 */
	AddElementsDialog.prototype.setShowCreateCustomField = function(bShowCCF) {
		this._oCustomFieldButton.setEnabled(bShowCCF);
	};

	/**
	 * Function called when custom field button was pressed
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 */
	AddElementsDialog.prototype._onOpenCustomField = function(oEvent) {
		// open field ext ui
		var oCrossAppNav = sap.ushell && sap.ushell.Container
		&& sap.ushell.Container.getService("CrossApplicationNavigation");
		var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
			target : {
				semanticObject : "CustomField",
				action : "develop"
			},
			params : {
				businessContexts : this._oCurrentFieldExtInfo.BusinessContexts,
				serviceName : this._oCurrentFieldExtInfo.ServiceName,
				serviceVersion : this._oCurrentFieldExtInfo.ServiceVersion,
				entityType : this._oCurrentFieldExtInfo.EntityType
			}
		}));

		Utils.openNewWindow(sHrefForFieldExtensionUi);
	};
	/**
	 * Updates the model on filter events
	 *
	 * @param {sap.ui.base.Event}
	 *		  oEvent event object
	 * @private
	 */
	AddElementsDialog.prototype._updateModelFilter = function(oEvent) {
		var sValue = oEvent.getParameter("newValue");
		var oBinding = this._oList.getBinding("items");
		if ((typeof sValue) === "string") {
			var oFilterLabel = new Filter("fieldLabel", FilterOperator.Contains, sValue);
			var oFilterQuickInfo = new Filter("quickInfo", FilterOperator.Contains, sValue);
			var oFilterLabelOrInfo = new Filter({ filters: [oFilterLabel, oFilterQuickInfo], and: false });
			oBinding.filter([oFilterLabelOrInfo]);
		} else {
			oBinding.filter([]);
		}
	};

	return AddElementsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/AddElementsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ui.SettingsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.rta.ui.SettingsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ui/SettingsDialog",['jquery.sap.global',
			'sap/ui/rta/library',
			'sap/ui/core/Control',
			'sap/m/Dialog',
			'sap/ui/layout/VerticalLayout',
			'sap/m/Label',
			'sap/m/Input',
			'sap/m/Select',
			'sap/ui/core/Item',
			'sap/m/Button',
			'sap/m/CheckBox',
			'sap/ui/rta/command/CommandFactory',
			'sap/ui/rta/command/CompositeCommand',
			'sap/ui/dt/ElementUtil'
	],
	function (jQuery,
			library,
			Control,
			Dialog,
			VerticalLayout,
			Label,
			Input,
			Select,
			Item,
			Button,
			CheckBox,
			CommandFactory,
			CompositeCommand,
			ElementUtil
	) {
	"use strict";

		/**
		 * Constructor for a new sap.ui.rta.SettingsDialog control.
		 * @extends sap.ui.core.Control
		 * @author SAP SE
		 * @version 1.38.33
		 * @constructor
		 * @private
		 * @since 1.34
		 * @alias SettingsDialog
		 * @experimental Since 1.34. This class is experimental and provides only limited functionality. Also the API might
		 *               be changed in future.
		 */
	var SettingsDialog = Control.extend("sap.ui.rta.ui.SettingsDialog", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
				"commandStack" : {
					type : "sap.ui.core.Control"
				}
			},
			associations : {
				"element" : {
					type : "sap.ui.core.Element"
				}
			}
		}
	});

	/**
	 * Initialize the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype.init = function() {
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._oDialog = this._createDialog();
	};

	/**
	 * Create the Dialog
	 *
	 * @private
	 */
	SettingsDialog.prototype._createDialog = function() {
		return new Dialog({
			title : this._oTextResources.getText("HEADER_SETTINGS"),
			contentHeight : "500px",
			draggable: true,
			buttons : [
				new Button({
					text : this._oTextResources.getText("BTN_FREP_OK"),
					press : [this._applyChangesAndClose, this]
				}),
				new Button({
					text : this._oTextResources.getText("BTN_FREP_CANCEL"),
					press : [this._cancelDialog, this]
				})
			]
		}).addStyleClass("sapUiPopupWithPadding").addStyleClass("sapUiSizeCompact");
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChangesAndClose = function() {
		this._applyChanges();
		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._iterateExecutedCommands = function(fnCallback) {
		var that = this;

		Object.keys(this._mCommands).forEach(function(sPropertyName) {
			fnCallback(that._mCommands[sPropertyName]);
		});
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._applyChanges = function() {
		var oCompositeCommand = new CompositeCommand();
		this._iterateExecutedCommands(function(oCommand) {
			oCompositeCommand.addCommand(oCommand);
		});
		if (oCompositeCommand.getCommands().length) {
			this.getCommandStack().pushExecutedCommand(oCompositeCommand);
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._cancelDialog = function() {
		this._iterateExecutedCommands(function(oCommand) {
			oCommand.undo();
		});

		this._oDialog.close();
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._executePropertyChangeCommand = function(oElement, sPropertyName, bNewValue, bOldValue) {
		if (!this._mCommands[sPropertyName]) {
			var oPropertyChangeCommand = CommandFactory.getCommandFor(oElement, "Property");
			oPropertyChangeCommand.setPropertyName(sPropertyName);
			oPropertyChangeCommand.setNewValue(bNewValue);
			oPropertyChangeCommand.setOldValue(bOldValue);
			this._mCommands[sPropertyName] = oPropertyChangeCommand;
			oPropertyChangeCommand.execute();
		} else {
			this._mCommands[sPropertyName].undo();
			delete this._mCommands[sPropertyName];
		}
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createBooleanEditor = function(oElement, sPropertyName, bPropertyValue) {
		var that = this;

		var oCheckBox = new CheckBox({
			text : sPropertyName,
			selected : bPropertyValue
		});

		oCheckBox.attachSelect(function(oEvent) {
			var bNewValue = oEvent.getParameter("selected");
			var bOldValue = !bNewValue;
			that._executePropertyChangeCommand(oElement, sPropertyName, bNewValue, bOldValue);
		});

		return oCheckBox;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createStringEditor = function(oElement, sPropertyName, sPropertyValue) {
		var that = this;

		var oInput = new Input({value : sPropertyValue});

		oInput.attachChange(function(oEvent) {
			var sNewValue = oEvent.getParameter("value");
			// TODO : get old value via elementUtil
			var sOldValue = sPropertyValue;
			that._executePropertyChangeCommand(oElement, sPropertyName, sNewValue, sOldValue);
		});

		return oInput;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._createEnumEditor = function(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue) {
		var that = this;


		var oSelect = new Select();
		Object.keys(oPropertyTypeDescription).forEach(function(sKey) {
			oSelect.addItem(new Item({
				text : sKey,
				key : oPropertyTypeDescription[sKey]
			}));
		});

		oSelect.setSelectedKey(vPropertyValue);

		oSelect.attachChange(function(oEvent) {
			var oItem = oEvent.getParameter("selectedItem");
			if (oItem) {
				var vNewValue = oItem.getKey();
				var vOldValue = vPropertyValue;
				that._executePropertyChangeCommand(oElement, sPropertyName, vNewValue, vOldValue);
			}
		});

		return oSelect;
	};

	/**
	 * @private
	 */
	SettingsDialog.prototype._updateDialogContent = function(oElement) {
		var that = this;

		this._oDialog.removeAllContent();
		var oVerticalLayout = new VerticalLayout();
		var mProperties = oElement.getMetadata().getAllProperties();
		Object.keys(mProperties).forEach(function(sPropertyName) {
			var oPropertyChangeControl;
			var oPropertyMetadata = mProperties[sPropertyName];
			// TODO : elementUtil for properties getters
			var vPropertyValue = oElement[oPropertyMetadata._sGetter]();

			if (oPropertyMetadata.type === "boolean") {
				oPropertyChangeControl = that._createBooleanEditor(oElement, sPropertyName, vPropertyValue);
				oVerticalLayout.addContent(oPropertyChangeControl);
			} else 	if (oPropertyMetadata.type === "string" || oPropertyMetadata.type === "sap.ui.core.CSSSize") {
				oPropertyChangeControl = new VerticalLayout();
				var oInput = that._createStringEditor(oElement, sPropertyName, vPropertyValue);

				oPropertyChangeControl.addContent(new Label({
					text : sPropertyName,
					labelFor : oInput.getId()
				}));
				oPropertyChangeControl.addContent(oInput);
				oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
			} else {
				var oPropertyTypeDescription = jQuery.sap.getObject(oPropertyMetadata.type);
				if (oPropertyTypeDescription) {
					oPropertyChangeControl = new VerticalLayout();
					var oDropdown = that._createEnumEditor(oElement, oPropertyTypeDescription, sPropertyName, vPropertyValue);

					oPropertyChangeControl.addContent(new Label({
						text : sPropertyName,
						labelFor : oDropdown.getId()
					}));
					oPropertyChangeControl.addContent(oDropdown);
					oPropertyChangeControl.addStyleClass("sapUiRtaDialogEntryWithMargin");
				}
			}

			if (oPropertyChangeControl) {
				oVerticalLayout.addContent(oPropertyChangeControl);
			}
		});
		this._oDialog.addContent(oVerticalLayout);
	};

	/**
	 * Open the Settings Dialog
	 *
	 * @param {sap.ui.core.Element}
	 *          oElement Currently selected control
	 */
	SettingsDialog.prototype.open = function(oElement) {
		this._mCommands = {};

		this._updateDialogContent(oElement);

		// Makes sure the modal div element does not change the size of our application (which would result in recalculation of our overlays)
		this._oDialog.open();
	};

	return SettingsDialog;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ui/SettingsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RuntimeAuthoring') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2016 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.Main.
jQuery.sap.declare('sap.ui.rta.RuntimeAuthoring'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.FormP13nHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DesignTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.CutPaste'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ContextMenu'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.TabHandling'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.TransportSelection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.SmartForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageLayout'); // unlisted dependency retained
jQuery.sap.require('sap.uxap.ObjectPageSection'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RuntimeAuthoring",['sap/ui/base/ManagedObject', 'sap/ui/rta/ui/ToolsMenu', 'sap/ui/comp/smartform/flexibility/FormP13nHandler', 'sap/ui/dt/ElementUtil',
		'sap/ui/dt/DesignTime', 'sap/ui/dt/OverlayRegistry', 'sap/ui/rta/command/Stack',
		'sap/ui/rta/command/CommandFactory', 'sap/ui/rta/command/CompositeCommand', 'sap/ui/rta/plugin/Rename',
		'sap/ui/rta/plugin/DragDrop', 'sap/ui/rta/plugin/RTAElementMover', 'sap/ui/dt/plugin/CutPaste',
		'sap/ui/rta/plugin/Hide', 'sap/ui/rta/plugin/Selection', 'sap/ui/rta/plugin/MultiSelection',
		'sap/ui/dt/plugin/ContextMenu', 'sap/ui/dt/plugin/TabHandling', 'sap/ui/fl/FlexControllerFactory',
		'sap/ui/rta/ui/SettingsDialog', 'sap/ui/rta/ui/AddElementsDialog', './Utils', './ModelConverter',
		'sap/ui/fl/transport/Transports', 'sap/ui/fl/transport/TransportSelection','sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/MessageBox', 'sap/m/MessageToast',
		'sap/ui/comp/smartform/GroupElement', 'sap/ui/comp/smartform/Group', 'sap/ui/comp/smartform/SmartForm', 'sap/ui/comp/smarttable/SmartTable',
		'sap/ui/rta/controlAnalyzer/ControlAnalyzerFactory',
		'sap/uxap/ObjectPageLayout', 'sap/uxap/ObjectPageSection'], function(
		ManagedObject, ToolsMenu, FormP13nHandler, ElementUtil, DesignTime, OverlayRegistry, CommandStack,
		CommandFactory, CompositeCommand, RTARenamePlugin, RTADragDropPlugin, RTAElementMover, CutPastePlugin,
		HidePlugin, SelectionPlugin, RTAMultiSelectionPlugin, ContextMenuPlugin, TabHandlingPlugin, FlexControllerFactory,
		SettingsDialog, AddElementsDialog, Utils, ModelConverter, Transports, TransportSelection, FlexUtils, FlexSettings, MessageBox, MessageToast,
		GroupElement, Group, SmartForm, SmartTable, ControlAnalyzerFactory, ObjectPageLayout, ObjectPageSection) {
	"use strict";
	/**
	 * Constructor for a new sap.ui.rta.RuntimeAuthoring class.
	 *
	 * @class The runtime authoring allows to adapt the fields of a running application.
	 * @extends sap.ui.core.ManagedObject
	 * @author SAP SE
	 * @version 1.38.33
	 * @constructor
	 * @public
	 * @since 1.30
	 * @alias sap.ui.rta.RuntimeAuthoring
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API
	 *               might be changed in future.
	 */
	var RuntimeAuthoring = ManagedObject.extend("sap.ui.rta.RuntimeAuthoring", /** @lends sap.ui.rta.RuntimeAuthoring.prototype */
	{
		metadata : {
			// ---- control specific ----
			library : "sap.ui.rta",
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				/** The URL which is called when the custom field dialog is opened */
				"customFieldUrl" : "string",

				/** Whether the create custom field button should be shown */
				"showCreateCustomField" : "boolean",

				/** Whether the create custom field button should be shown */
				"showToolbars" : {
					type : "boolean",
					defaultValue : true
				},

				/** Temporary property : whether to show a dialog for changing control's properties#
				 * should be removed after DTA will fully switch to a property panel
				 */
				"showSettingsDialog" : {
					type : "boolean",
					defaultValue : true
				},

				/** Whether the window unload dialog should be shown */
				"showWindowUnloadDialog" : {
					type : "boolean",
					defaultValue : true
				},

				"commandStack" : {
					type : "sap.ui.rta.command.Stack"
				}
			},
			events : {
				/** Fired when the runtime authoring is started */
				"start" : {},

				/** Fired when the runtime authoring is stopped */
				"stop" : {},

				/**
				 * Event fired when a DesignTime selection is changed
				 */
				selectionChange : {
					parameters : {
						selection : { type : "sap.ui.dt.Overlay[]" }
					}
				},

				/**
				 * Fired when the undo/redo stack has changed, undo/redo buttons can be updated
				 */
				"undoRedoStackModified" : {}
			}
		},
		_sAppTitle : null

	});
	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.init = function() {
		this._onCommandStackModified = this._adaptUndoRedoButtons.bind(this);
	};

	/**
	 * Start Runtime Authoring
	 *
	 * @public
	 */
	RuntimeAuthoring.prototype.start = function() {
		var aMOVABLE_TYPES = ["sap.ui.comp.smartform.Group", "sap.ui.comp.smartform.GroupElement", "sap.ui.table.Column",
				"sap.uxap.ObjectPageSection"];

		var that = this;

		this._aPopups = [];

		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._aSupportedControls = ["sap.ui.comp.smartform.Group", "sap.uxap.ObjectPageSection",
				"sap.uxap.ObjectPageLayout"];

		// Create DesignTimec
		if (!this._oDesignTime) {
			this._oRootControl = sap.ui.getCore().byId(this.getRootControl());

			this._oRTAElementMover =  new RTAElementMover({
				movableTypes : aMOVABLE_TYPES
			});

			this._oRTADragDropPlugin = new RTADragDropPlugin({
				draggableTypes : aMOVABLE_TYPES,
				elementMover : this._oRTAElementMover
			});

			this._oRTADragDropPlugin.attachDragStarted(this._handleStopCutPaste, this);

			this._oCutPastePlugin = new CutPastePlugin({
				movableTypes : aMOVABLE_TYPES,
				elementMover : this._oRTAElementMover
			});

			if (ElementUtil.sACTION_MOVE) {
				this._oRTAElementMover.attachElementMoved(this._handleMoveElement, this);
			} else { // TODO this else case when new DesignTime is always there
				this._oRTADragDropPlugin.attachElementMoved(this._handleMoveElement, this);
				this._oCutPastePlugin.attachElementMoved(this._handleMoveElement, this);
			}

			this._oHidePlugin = new HidePlugin();
			this._oHidePlugin.attachHideElement(this._handleHideElement, this);

			this._oRenamePlugin = new RTARenamePlugin({
				commandStack : this.getCommandStack()
			});
			this._oRenamePlugin.attachEditable(this._handleStopCutPaste, this);

			this._oSelectionPlugin = new SelectionPlugin();

			this._oMultiSelectionPlugin = new RTAMultiSelectionPlugin({
				multiSelectionTypes : ["sap.ui.comp.smartform.GroupElement"]
			});

			this._oContextMenuPlugin = new ContextMenuPlugin();
			this._oTabHandlingPlugin = new TabHandlingPlugin();
			this._buildContextMenu();

			jQuery.sap.measure.start("rta.dt.startup","Measurement of RTA: DesignTime start up");
			this._oDesignTime = new DesignTime({
				rootElements : [this._oRootControl],
				plugins : [this._oRTADragDropPlugin, this._oCutPastePlugin, this._oHidePlugin, this._oRenamePlugin,
						this._oSelectionPlugin, this._oMultiSelectionPlugin, this._oContextMenuPlugin,
						this._oTabHandlingPlugin]
			});

			this._oDesignTime.attachSelectionChange(function(oEvent) {
				that.fireSelectionChange({selection: oEvent.getParameter("selection")});
			}, this);

			this._oDesignTime.attachEventOnce("synced", function() {
				that.fireStart();
				jQuery.sap.measure.end("rta.dt.startup","Measurement of RTA: DesignTime start up");
			});
		}

		if (this.getShowToolbars()) {
			// Create ToolsMenu
			this._createToolsMenu();
			// set focus initially on top toolbar
			var oDelegate = {
				"onAfterRendering" : function() {
					this._oToolsMenuTop._oToolBarTop.focus();
					this._oToolsMenuTop._oToolBarTop.removeEventDelegate(oDelegate, this);
				}
			};
			this._oToolsMenuTop._oToolBarTop.addEventDelegate(oDelegate, this);

			// Show Toolbar(s)
			this._oToolsMenuTop.show();
			this._oToolsMenuBottom.show();
		}

		// Register function for checking unsaved before leaving RTA
		this._oldUnloadHandler = window.onbeforeunload;
		window.onbeforeunload = this._onUnload.bind(this);
	};

	/**
	 * @override
	 */
	RuntimeAuthoring.prototype.setCommandStack = function(oCommandStack) {
		var  oOldCommandStack = this.getProperty("commandStack");
		if (oOldCommandStack) {
			oOldCommandStack.detachModified(this._onCommandStackModified);
		}

		if (this._oInternalCommandStack) {
			this._oInternalCommandStack.destroy();
			delete this._oInternalCommandStack;
		}

		var oResult = this.setProperty("commandStack", oCommandStack);

		if (oCommandStack) {
			oCommandStack.attachModified(this._onCommandStackModified);
		}

		// TODO : clarify, if rename plugin is only for ui rename and command should be build outside of it?
		if (this._oRenamePlugin) {
			this._oRenamePlugin.setCommandStack(oCommandStack);
		}

		return oResult;
	};

	/**
	 *
	 * @override
	 */
	RuntimeAuthoring.prototype.getCommandStack = function() {
		var oCommandStack = this.getProperty("commandStack");
		if (!oCommandStack) {
			oCommandStack = new CommandStack();
			this._oInternalCommandStack = oCommandStack;
		}
		this.setCommandStack(oCommandStack);

		return oCommandStack;
	};


	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._adaptUndoRedoButtons = function() {
		var oCommandStack = this.getCommandStack();
		this._oToolsMenuBottom.adaptUndoRedoEnablement(oCommandStack.canUndo(), oCommandStack.canRedo());
		this.fireUndoRedoStackModified();
	};

	/**
	 * Close Toolbars
	 *
	 * @public
	 */
	RuntimeAuthoring.prototype.closeToolBars = function() {
		this._oToolsMenuTop.hide();
		this._oToolsMenuBottom.hide();
	};

	/**
	 * Returns a selection from the DesignTime
	 * @return {sap.ui.dt.Overlay[]} selected overlays
	 * @public
	 */
	RuntimeAuthoring.prototype.getSelection = function() {
		if (this._oDesignTime) {
			return this._oDesignTime.getSelection();
		} else {
			return [];
		}
	};

	/**
	 * Stop Runtime Authoring
	 *
	 * @public
	 */
	RuntimeAuthoring.prototype.stop = function() {
		var that = this;

		return this._serializeToLrep().then(function() {
			that.exit();
			that.fireStop();
		});
	};

	RuntimeAuthoring.prototype.restore = function() {
		this._onRestore();
	};

	RuntimeAuthoring.prototype.transport = function() {
		this._onTransport();
	};

	// ---- backward compatibility API
	RuntimeAuthoring.prototype.undo = function() {
		this._onUndo();
	};

	RuntimeAuthoring.prototype.redo = function() {
		this._onRedo();
	};

	RuntimeAuthoring.prototype.canUndo = function() {
		return this.getCommandStack().canUndo();
	};

	RuntimeAuthoring.prototype.canRedo = function() {
		return this.getCommandStack().canRedo();
	};
	// ---- backward compatibility API

	/**
	 * Check for unsaved changes before Leaving Runtime Authoring
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onUnload = function() {
		var oCommandStack = this.getCommandStack();
		var bUnsaved = oCommandStack.canUndo() || oCommandStack.canRedo();
		if (bUnsaved && this.getShowWindowUnloadDialog()) {
			var sMessage = this._oTextResources.getText("MSG_UNSAVED_CHANGES");
			return sMessage;
		} else {
			window.onbeforeunload = this._oldUnloadHandler;
		}
	};

	RuntimeAuthoring.prototype._serializeToLrep = function() {
		var oCommandStack = this.getCommandStack();
		// serialize changes to LREP
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);
		var aChanges = oCommandStack.serialize();
		var aCommands = oCommandStack.getSerializableCommands();

		aChanges.forEach(function(oChange, i) {
			var oElement = aCommands[i].getElement();
			oFlexController.addChange(oChange, oElement);
		});

		var that = this;
		return oFlexController.saveAll().then(
				function() {
					jQuery.sap.log.info("Runtime adaptation successfully transfered changes to layered repository");
					that.getCommandStack().removeAllCommands();
				},
				function(vError) {
					var sErrorMessage = vError.message || vError.status || vError;
					jQuery.sap.log.error("Failed to transfer runtime adaptation changes to layered repository", sErrorMessage);
					jQuery.sap.require("sap.m.MessageBox");
					var sMsg = that._oTextResources.getText("MSG_LREP_TRANSFER_ERROR") + "\n"
							+ that._oTextResources.getText("MSG_ERROR_REASON", sErrorMessage);
					sap.m.MessageBox.error(sMsg);
				});
	};

	RuntimeAuthoring.prototype._onUndo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().undo();
	};

	RuntimeAuthoring.prototype._onRedo = function() {
		this._handleStopCutPaste();

		this.getCommandStack().redo();
	};

	RuntimeAuthoring.prototype._createToolsMenu = function() {
		if (!this._oToolsMenuTop) {
			this._sAppTitle = this._getApplicationTitle();
			this._oToolsMenuTop = new ToolsMenu({
				toolbarType : "top"
			});
			this._oToolsMenuTop.createToolbar();
			this._oToolsMenuTop.setTitle(this._sAppTitle);
			this._oToolsMenuTop.setRootControl(this._oRootControl);
			this._oToolsMenuTop.adaptButtonsVisibility();
			this._oToolsMenuTop.attachToolbarClose(this.closeToolBars, this);
			this._oToolsMenuTop.attachClose(this.stop, this);
			this._oToolsMenuTop.attachTransport(this._onTransport, this);
			this._oToolsMenuTop.attachRestore(this._onRestore, this);
		}
		if (!this._oToolsMenuBottom) {
			this._oToolsMenuBottom = new ToolsMenu({
				toolbarType : "bottom"
			});
			this._oToolsMenuBottom.createToolbar();
			this._oToolsMenuBottom.setRootControl(this._oRootControl);
			this._oToolsMenuBottom.attachUndo(this._onUndo, this);
			this._oToolsMenuBottom.attachRedo(this._onRedo, this);
		}
	};

	/**
	 * Exit Runtime Authoring - destroy all controls
	 *
	 * @protected
	 */
	RuntimeAuthoring.prototype.exit = function() {
		if (this._oToolsMenuTop) {
			this._oToolsMenuTop.destroy();
			this._oToolsMenuTop = null;
		}
		if (this._oToolsMenuBottom) {
			this._oToolsMenuBottom.destroy();
			this._oToolsMenuBottom = null;
		}
		if (this._oDesignTime) {
			this._oDesignTime.destroy();
			this._oDesignTime = null;
		}

		if (this._handler) {
			if (this._handler._oDialog) {
				this._handler._oDialog.destroy();
			}
			this._handler = null;
		}
		this.setCommandStack(null);
		window.onbeforeunload = this._oldUnloadHandler;
	};

	/**
	 * Function to handle ABAP transport of the changes
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onTransport = function() {
		var that = this;
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);

		function fnHandleCreateAndApplyChangesErrors(oError) {
			FlexUtils.log.error("Changes could not be applied or saved: " + oError);
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_APPLYSAVE_ERROR", "MSG_TRANSPORT_APPLYSAVE_ERROR", oError).then(function() {
				throw new Error('createAndApply failed');
			});
		}

		function fnHandleAllErrors(oError) {
			if (oError.message === 'createAndApply failed') {
				return;
			}
			FlexUtils.log.error("transport error" + oError);
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_ERROR", "MSG_TRANSPORT_ERROR", oError);
		}

		this._handleStopCutPaste();

		var oTransportSelection = new TransportSelection();

		return this._serializeToLrep().then(function() {
			return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {
				if (aAllLocalChanges.length > 0) {
					return that._createAndApplyChanges(aAllLocalChanges, oFlexController);
				}
			})['catch'](fnHandleCreateAndApplyChangesErrors).then(function() {
				return oFlexController.getComponentChanges();
			}).then(function(aAllLocalChanges) {
				return !!aAllLocalChanges.length;
			}).then(function(bShouldTransport) {
				if (bShouldTransport) {
					return oTransportSelection.openTransportSelection(null, that._oRootControl);
				} else {
					that._showMessageToast("MSG_TRANSPORT_SUCCESS");
				}
			}).then(function(oTransportInfo) {
				if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
					return that._transportAllLocalChanges(oTransportInfo, oFlexController);
				}
			})['catch'](fnHandleAllErrors);
		});
	};

	/**
	 * Create and apply changes
	 *
	 * Function is copied from FormP13nHandler. We need all changes for various controls.
	 * The function _createAndApplyChanges in the FormP13Handler calls that._getFlexController()
	 * which is specific for the SmartForm
	 *
	 * @private
	 * @param {array} aChangeSpecificData - array of objects with change specific data
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} promise that resolves with no parameters
	 */
	RuntimeAuthoring.prototype._createAndApplyChanges = function(aChangeSpecificData, oFlexController) {

		var that = this;

		return Promise.resolve().then(function() {

			function fnValidChanges(oChangeSpecificData) {
				return oChangeSpecificData && oChangeSpecificData.selector && oChangeSpecificData.selector.id;
			}

			aChangeSpecificData.filter(fnValidChanges).forEach(function(oChangeSpecificData) {
				var oControl = sap.ui.getCore().byId(oChangeSpecificData.selector.id);
				oFlexController.createAndApplyChange(oChangeSpecificData, oControl);
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply error: " + oError);
			return oError;
		}).then(function(oError) {
			return oFlexController.saveAll().then(function() {
				if (oError) {
					throw oError;
				}
			});
		})['catch'](function(oError) {
			FlexUtils.log.error("Create and apply and/or save error: " + oError);
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_TRANSPORT_APPLYSAVE_ERROR", "MSG_TRANSPORT_APPLYSAVE_ERROR", oError);
		});
	};

	/**
	 * Delete all changes for current layer and root control's component
	 *
	 * @private
	 * @return {Promise} the promise from the FlexController
	 */
	RuntimeAuthoring.prototype._deleteChanges = function() {
		var that = this;
		var oTransportSelection = new TransportSelection();
		var oFlexController = FlexControllerFactory.createForControl(this._oRootControl);
		
		oFlexController.getComponentChanges().then(function(aChanges) {
			return FlexSettings.getInstance(FlexUtils.getComponentClassName(that._oRootControl)).then(function(oSettings) {
				if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
					return oTransportSelection.setTransports(aChanges, that._oRootControl);
				}
			}).then(function() {
				return oFlexController.discardChanges(aChanges);
			}).then(function() {
				return window.location.reload();
			});
		})["catch"](function(oError) {
			return that._showMessage(MessageBox.Icon.ERROR, "HEADER_RESTORE_FAILED", "MSG_RESTORE_FAILED", oError);
		});
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessage = function(oMessageType, sTitleKey, sMessageKey, oError) {
		if (oError) {
			var sMessage = this._oTextResources.getText(sMessageKey, [oError.message || oError]);
		} else {
			var sMessage = this._oTextResources.getText(sMessageKey);
		}
		var sTitle = this._oTextResources.getText(sTitleKey);
		return new Promise(function(resolve) {
			MessageBox.show(sMessage, {
				icon: oMessageType,
				title: sTitle,
				onClose: resolve
			});
		});
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._showMessageToast = function(sMessageKey) {
		var sMessage = this._oTextResources.getText(sMessageKey);

		MessageToast.show(sMessage);
	};

	/**
	 * Ensure that we have a FormP13Handler which is needed for example for transports and restoring
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._ensureFormP13Handler = function() {

		if (!this._handler) {
			this._handler = new FormP13nHandler();
			this._handler._textResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		}
	};

	/**
	 * Discard all LREP changes and restores the default app state,
	 * opens a MessageBox where the user can confirm
	 * the restoring to the default app state
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._onRestore = function() {
		var that = this;

		var sMessage = this._oTextResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._oTextResources.getText("FORM_PERS_RESET_TITLE");

		this._handleStopCutPaste();

		function fnConfirmDiscardAllChanges(sAction) {
			//save current changes to discard them via flex controller api
			that._serializeToLrep().then(function() {
				if (sAction === "OK") {
					that._deleteChanges();
				}
			});
		}

		MessageBox.confirm(sMessage, {
			icon: MessageBox.Icon.WARNING,
			title : sTitle,
			onClose : fnConfirmDiscardAllChanges
		});
	};

	/**
	 * Prepare all changes and assign them to an existing transport
	 *
	 * @private
	 * @param {object} oTransportInfo - information about the selected transport
	 * @param {sap.ui.fl.FlexController} - instance of FlexController
	 * @returns {Promise} Promise which resolves without parameters
	 */
	RuntimeAuthoring.prototype._transportAllLocalChanges = function(oTransportInfo, oFlexController) {

		var that = this;

		return oFlexController.getComponentChanges().then(function(aAllLocalChanges) {

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var aTransportData = oTransports._convertToChangeTransportData(aAllLocalChanges);
			var oTransportParams = {};
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;

			return oTransports.makeChangesTransportable(oTransportParams).then(function() {

				// remove the $TMP package from all changes; has been done on the server as well,
				// but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange) {

					if (oChange.getPackage() === '$TMP') {
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = '';
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function() {
				that._showMessageToast("MSG_TRANSPORT_SUCCESS");
			});
		});
	};

	/**
	 * Checks the two parent-information maps for equality
	 *
	 * @param {object}
	 *          oInfo1 *
	 * @param {object}
	 *          oInfo2
	 * @return {boolean} true if equal, false otherwise
	 * @private
	 */
	RuntimeAuthoring.prototype._isEqualParentInfo = function(oInfo1, oInfo2) {
		var oResult = !!oInfo1 && !!oInfo2;
		if (oResult && (oInfo1.parent && oInfo2.parent)) {
			oResult = oInfo1.parent.getId() === oInfo2.parent.getId();
		}
		if (oResult && (oInfo1.index || oInfo2.index)) {
			oResult = oInfo1.index === oInfo2.index;
		}
		if (oResult && (oInfo1.aggregation || oInfo2.aggregation)) {
			oResult = oInfo1.aggregation === oInfo2.aggregation;
		}
		return oResult;
	};

	/**
	 * Function to handle moving an element
	 *
	 * @param {sap.ui.base.Event}
	 *          oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleMoveElement = function(oEvent) {
		var oData = oEvent.getParameter("data");
		if (Array.isArray(oData)) {
			for (var i = 0; i < oData.length; i++) {
				var oAction = oData[i];
				this._handleAction(oAction);
				// TODO: create apropriate commands and a composite command
			}
		} else {
			this._handleAction(oData);
		}
	};

	RuntimeAuthoring.prototype._handleAction = function(oData) {
		if (oData && !this._isEqualParentInfo(oData.source, oData.target)) {
			var oMove = CommandFactory.getCommandFor(oData.source.parent, "Move");
			oMove.setMovedElements([{
				element : oData.element,
				sourceIndex : oData.source.index,
				targetIndex : oData.target.index
			}]);
			oMove.setSource(oData.source);
			oMove.setTarget(oData.target);
			this.getCommandStack().pushAndExecute(oMove);
		}
	};

	/**
	 * Function to handle hiding an element
	 *
	 * @param {object}
	 *          oEventOrOverlays object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleHideElement = function(oEventOrOverlays) {
		var that = this;
		var aSelectedOverlays = (oEventOrOverlays.mParameters)
				? oEventOrOverlays.getParameter("selectedOverlays")
				: oEventOrOverlays;
		var oCompositeCommand = new CompositeCommand();
		var aUnHideableElements = [];

		this._handleStopCutPaste();

		for (var i = 0; i < aSelectedOverlays.length; i++) {
			var oElement = aSelectedOverlays[i].getElementInstance();

			if (fnIsGroupElement(oElement) && Utils.hasGroupElementUnBoundFields(oElement)) {
				return;
			} else if (fnIsGroup(oElement) && Utils.hasGroupUnBoundFields(oElement)) {
				return;
			} else if (fnIsGroup(oElement)) {
				aUnHideableElements = aUnHideableElements.concat(Utils.getGroupMandatoryElements(oElement));
			} else if (!Utils.isElementHideable(oElement)) {
				aUnHideableElements.push(oElement);
			}

			if (fnIsSection(oElement) && oElement.getStashed) {
				var oStashCommand = CommandFactory.getCommandFor(oElement, "Stash");
				oCompositeCommand.addCommand(oStashCommand);
			} else {
				var oHideCommand = CommandFactory.getCommandFor(oElement, "Hide");
				oCompositeCommand.addCommand(oHideCommand);
			}
		}
		if (aUnHideableElements.length > 0) {
			Utils.openHideElementConfirmationDialog(oElement, aUnHideableElements).then(function(bResult) {
				if (bResult) {
					that.getCommandStack().pushAndExecute(oCompositeCommand);
				}
			});
		} else {
			this.getCommandStack().pushAndExecute(oCompositeCommand);
		}
	};

	/**
	 * @private
	 */
	RuntimeAuthoring.prototype._openSettingsDialog = function(oEventOrOverlays) {
		var aSelectedOverlays = (oEventOrOverlays.mParameters) ? oEventOrOverlays.getParameter("selectedOverlays") : oEventOrOverlays;
		var oElement = aSelectedOverlays[0].getElementInstance();
		this._handleStopCutPaste();

		if (!this._oSettingsDialog) {
			this._oSettingsDialog = new SettingsDialog();
		}
		this._oSettingsDialog.setCommandStack(this.getCommandStack());
		this._oSettingsDialog.open(oElement);
	};

	var fnHasParentStableId = function(oElement) {
		var oOverlay = OverlayRegistry.getOverlay(oElement);
		return ControlAnalyzerFactory.getControlAnalyzerFor(oElement).hasParentStableId(oOverlay);
	};
	var fnIsMovable = function(oElement) {
		var oOverlay = OverlayRegistry.getOverlay(oElement);
		return oOverlay.getMovable();
	};
	var fnIsGroupElement = function(oElement) {
		return oElement instanceof GroupElement;
	};

	var fnIsGroup = function(oElement) {
		return oElement instanceof Group;
	};

	var fnIsGroupElementOrGroup = function(oElement) {
		return fnIsGroupElement(oElement) || fnIsGroup(oElement);
	};

	var fnIsSmartForm = function(oElement) {
		return oElement instanceof SmartForm;
	};

	var fnHasSettingsDialog = function(oElement) {
		if (FlexUtils.isVendorLayer() && this.getShowSettingsDialog()) {
			var aControlTypesWithSettings = ["sap.ui.comp.smartfilterbar.SmartFilterBar",
					"sap.ui.comp.smarttable.SmartTable", "sap.ui.comp.smartform.SmartForm", "sap.uxap.ObjectPageLayout",
					"sap.uxap.ObjectPageSection", "sap.uxap.ObjectPageHeaderActionButton", "sap.uxap.ObjectPageHeader",
					"sap.ui.table.Column"];

			return aControlTypesWithSettings.some(function(sControlTypeWithSettings) {
				return ElementUtil.isInstanceOf(oElement, sControlTypeWithSettings);
			});
		}
	};

	var fnIsSection = function(oElement) {
		return oElement instanceof ObjectPageSection;
	};

	var fnIsObjectPage = function(oElement) {
		return oElement instanceof ObjectPageLayout;
	};

	var fnIsGroupOrSmartForm = function(oElement) {
		return fnIsGroup(oElement) || fnIsSmartForm(oElement);
	};

	var fnIsAdaptEnabled = function(oElement) {
		if (!FlexUtils.isVendorLayer()) {
			return fnIsGroupElementOrGroup(oElement) || fnIsSmartForm(oElement);
		}
		return false;
	};

	var fnIsMultSelectionActive = function(oElement) {
		return this._oDesignTime.getSelection().length > 1;
	};

	var fnIsSectionOrObjectPage = function(oElement) {
		return fnIsSection(oElement) || fnIsObjectPage(oElement);
	};

	var not = function(fn) {
		var that = this;
		return function(oElement) {
			return !fn.call(that, oElement);
		};
	};

	var and = function(fn1, fn2){
		var that = this;
		return function(oElement) {
			return fn1.call(that, oElement) && fn2.call(that, oElement);
		};
	};

	RuntimeAuthoring.prototype._buildContextMenu = function() {
		var that = this;

		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_RENAME_LABEL",
			text : that._oTextResources.getText("CTX_RENAME"),
			handler : this._handleRenameLabel.bind(this),
			available : fnIsGroupElement,
			enabled : not.call(this, fnIsMultSelectionActive)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_RENAME_GROUP",
			text : that._oTextResources.getText("CTX_RENAME"),
			handler : this._handleRenameLabel.bind(this),
			available : fnIsGroup,
			enabled : not.call(this, fnIsMultSelectionActive)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_ADD_FIELD",
			text : that._oTextResources.getText("CTX_ADD_FIELD"),
			handler : this._handleAddElement.bind(this),
			available : fnIsGroupElementOrGroup,
			enabled : and.call(this, not.call(this, fnIsMultSelectionActive), fnHasParentStableId)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_ADD_GROUP",
			text : that._oTextResources.getText("CTX_ADD_GROUP"),
			handler : this._handleAddGroup.bind(this),
			available : fnIsGroupOrSmartForm,
			enabled : not.call(this, fnIsMultSelectionActive)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_ADD_SECTION",
			text : that._oTextResources.getText("CTX_ADD_SECTION"),
			handler : this._handleAddElement.bind(this),
			available : fnIsSectionOrObjectPage,
			enabled : Utils.hasObjectPageLayoutInvisibleSections.bind(Utils)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_HIDE_FIELD",
			text : that._oTextResources.getText("CTX_HIDE"),
			handler : this._handleHideElement.bind(this),
			available : fnIsGroupElement,
			enabled : not(Utils.hasGroupElementUnBoundFields.bind(Utils))
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_HIDE_GROUP",
			text : that._oTextResources.getText("CTX_HIDE"),
			handler : this._handleHideElement.bind(this),
			available : fnIsGroup,
			enabled : not(Utils.hasGroupUnBoundFields.bind(Utils))
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_HIDE_SECTION",
			text : that._oTextResources.getText("CTX_HIDE"),
			handler : this._handleHideElement.bind(this),
			available : fnIsSection
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_CUT",
			text : that._oTextResources.getText("CTX_CUT"),
			handler : this._handleCutElement.bind(this),
			available : fnIsMovable
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_PASTE",
			text : that._oTextResources.getText("CTX_PASTE"),
			handler : this._handlePasteElement.bind(this),
			available : fnIsMovable,
			enabled : function(oElement) {
				var oOverlay = OverlayRegistry.getOverlay(oElement.getId());
				return that._oCutPastePlugin.isElementPasteable(oOverlay);
			}
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_GROUP_FIELDS",
			text : that._oTextResources.getText("CTX_GROUP_FIELDS"),
			handler : this._handleGroupElements.bind(this),
			available : function(oElement) {
				var aSelectedOverlays = that._oDesignTime.getSelection();
				return (aSelectedOverlays.length > 1);
			},
			enabled : function(oElement) {
				var bIsEnabled = true;
				var aSelectedElementFields = [];
				var aSelectedOverlays = that._oDesignTime.getSelection();
				aSelectedOverlays.forEach(function(oOverlay) {
					var oElement = oOverlay.getElementInstance();
					aSelectedElementFields = aSelectedElementFields.concat(oElement.getFields());
				});
				if (aSelectedOverlays.length > 3 || aSelectedElementFields.length > 3) {
					return false;
				}
				aSelectedOverlays.some(function(oOverlay) {
					var oElement = oOverlay.getElementInstance();
					if (Utils.hasGroupElementUnBoundFields(oElement)) {
						bIsEnabled = false;
						return true;
					}
				});
				return bIsEnabled;
			}
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_UNGROUP_FIELDS",
			text : that._oTextResources.getText("CTX_UNGROUP_FIELDS"),
			handler : this._handleUngroupElements.bind(this),
			available : function(oElement) {
				var aSelectedOverlays = that._oDesignTime.getSelection();
				return fnIsGroupElement(oElement) && oElement.getFields().length > 1 && aSelectedOverlays.length < 2;
			},
			enabled : not(Utils.hasGroupElementUnBoundFields.bind(Utils))
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_SETTINGS",
			text : "Settings",
			handler : this._openSettingsDialog.bind(this),
			available : fnHasSettingsDialog.bind(this)
		});
		this._oContextMenuPlugin.addMenuItem({
			id : "CTX_ADAPT",
			text : that._oTextResources.getText("CTX_ADAPT"),
			startSection : not(fnIsSmartForm),
			handler : this._handleAdaptElement.bind(this),
			available : fnIsAdaptEnabled
		});
	};

	/**
	 * Function to handle renaming a label
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRenameLabel = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oRenamePlugin.startEdit(oOverlay);
	};

	/**
	 * Function to handle adding an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAddElement = function(aOverlays) {
		this._handleStopCutPaste();
		var oSelectedElement = aOverlays[0].getElementInstance();

		if (!this._oAddElementsDialog) {
			this._oAddElementsDialog = new AddElementsDialog({
				rootControl : this._oRootControl
			});
		}
		this._oAddElementsDialog.setCommandStack(this.getCommandStack());
		this._oAddElementsDialog.open(oSelectedElement);
	};

	/**
	 * Function to handle cutting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleCutElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oCutPastePlugin.cut(oOverlay);
	};

	/**
	 * Function to handle pasting an element
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handlePasteElement = function(aOverlays) {
		var oOverlay = aOverlays[0];
		this._oCutPastePlugin.paste(oOverlay);
	};

	/**
	 * Handler function to stop cut and paste, because some other operation has started
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleStopCutPaste = function() {
		this._oCutPastePlugin.stopCutAndPaste();
	};

	/**
	 * Function to handle grouping of sap.ui.comp.smartfield.SmartFields
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleGroupElements = function() {
		this._handleStopCutPaste();

		var aSelectedOverlays = this._oDesignTime.getSelection();
		var oSelectedGroupElement = this._oContextMenuPlugin._oElement;
		var oTargetGroupContainer = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.Group");
		var iTargetIndex = oTargetGroupContainer.getGroupElements().indexOf(oSelectedGroupElement);

		var oGroupContainer = Utils.findSupportedBlock(oSelectedGroupElement, this._aSupportedControls);
		var oSmartForm = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.SmartForm");
		var aToGroupElements = [];
		for (var i = 0; i < aSelectedOverlays.length; i++) {
			var oElement = aSelectedOverlays[i].getElementInstance();
			aToGroupElements.push(oElement);
		}

		var oGroupCommand = CommandFactory.getCommandFor(oGroupContainer, "Group");
		oGroupCommand.setSource(oSelectedGroupElement);
		oGroupCommand.setIndex(iTargetIndex);
		oGroupCommand.setGroupFields(aToGroupElements);
		oGroupCommand.setSmartForm(oSmartForm);
		this.getCommandStack().pushAndExecute(oGroupCommand);
	};

	/**
	 * Function to handle ungrouping of sap.ui.comp.smartform.GroupElements
	 *
	 * @private
	 */
	RuntimeAuthoring.prototype._handleUngroupElements = function() {
		this._handleStopCutPaste();

		var oSelectedOverlays = this._oDesignTime.getSelection();
		var oSelectedGroupElement = oSelectedOverlays[0].getElementInstance();
		var oSmartForm = Utils.getClosestTypeForControl(oSelectedGroupElement, "sap.ui.comp.smartform.SmartForm");
		var oUngroupCommand = CommandFactory.getCommandFor(oSelectedGroupElement, "Ungroup");

		oUngroupCommand.setSmartForm(oSmartForm);
		this.getCommandStack().pushAndExecute(oUngroupCommand);
	};

	/**
	 * Function to handle adding an group
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAddGroup = function(aOverlays) {
		this._handleStopCutPaste();
		var that = this;
		var oTargetElement = aOverlays[0].getElementInstance();

		var oView = Utils.getClosestViewFor(oTargetElement);
		var oSmartForm = Utils.getClosestTypeForControl(oTargetElement, "sap.ui.comp.smartform.SmartForm");

		var oAddGroup = CommandFactory.getCommandFor(oSmartForm, "Add");
		oAddGroup.setNewControlId(oView.createId(jQuery.sap.uid()));
		oAddGroup.setLabels(["New Group"]);

		var iIndex = 0; // already suitable for smartform

		if (oTargetElement.getMetadata().getName() === "sap.ui.comp.smartform.Group") {
			var aGroups = oTargetElement.getParent().getAggregation("formContainers");
			for (var i = 0; i < aGroups.length; i++) {
				if (aGroups[i].getId() === oTargetElement.getId()) {
					iIndex = i + 1;
					break;
				}
			}
		}
		oAddGroup.setIndex(iIndex);

		this.getCommandStack().pushAndExecute(oAddGroup);

		var oOverlay = OverlayRegistry.getOverlay(oAddGroup.getNewControlId());
		oOverlay.setSelected(true);
		var oDelegate = {
			"onAfterRendering" : function() {
				// TODO : remove timeout
				setTimeout(function() {
					that._oRenamePlugin.startEdit(oOverlay);
				}, 0);
				oOverlay.removeEventDelegate(oDelegate);
			}
		};
		oOverlay.addEventDelegate(oDelegate);

	};

	/**
	 * @param {sap.ui.core.Element}
	 *          oElement The element which exists in the smart form
	 * @return {sap.ui.comp.smartform.SmartForm} the closest smart form found
	 * @private
	 */
	RuntimeAuthoring.prototype._getSmartFormForElement = function(oElement) {
		while (oElement && !ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
			oElement = oElement.getParent();
		}

		return oElement;
	};

	/**
	 * Function to handle to open the workaround dialog
	 *
	 * @param {array}
	 *          aOverlays list of selected overlays
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAdaptElement = function(aOverlays, fnOnBeforeDialogOpen) {
		this._handleStopCutPaste();
		var that = this;
		var oElement = aOverlays[0].getElementInstance();
		// flush changes as we have not changed the dialog to work on the command stack
		return this._serializeToLrep().then(function() {
			that._ensureFormP13Handler();

			var oSmartForm = that._getSmartFormForElement(oElement);
			that._handler.init(oSmartForm);

			if (fnOnBeforeDialogOpen) {
				fnOnBeforeDialogOpen(that._handler);
			}

			that._handler.show();
		});
	};

	/**
	 * Get the Title of the Application from the manifest.json
	 *
	 * @private
	 * @returns {String} the application title or empty string
	 */
	RuntimeAuthoring.prototype._getApplicationTitle = function() {

		var sTitle = "";
		var oComponent = sap.ui.core.Component.getOwnerComponentFor(this._oRootControl);
		if (oComponent) {
			sTitle = oComponent.getMetadata().getManifestEntry("sap.app").title;
		}
		return sTitle;
	};

	return RuntimeAuthoring;

}, /* bExport= */true);

}; // end of sap/ui/rta/RuntimeAuthoring.js
