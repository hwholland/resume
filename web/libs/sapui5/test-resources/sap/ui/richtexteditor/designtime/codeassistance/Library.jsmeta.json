{"!define":{"sap.ui.richtexteditor":{"editorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Relative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.","!type":"String","!category":"enum"},"RichTextEditor":"sap.ui.richtexteditor.RichTextEditor_obj","sanitizeValue":{"!description":"Determines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>","!type":"Boolean","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nSee {@link sap.ui.core.RenderManager#writeInvisiblePlaceholderData RenderManager#writeInvisiblePlaceholderData} for details.","!type":"Boolean","!category":"enum"},"plugins":{"!description":"An array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.","!type":"[Object]","!category":"enum"},"showGroupInsert":{"!description":"Determines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"!module":"sap/ui/richtexteditor/library","editorType":{"!description":"The editor implementation to use. Valid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration). <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.","!type":"String","!category":"enum"},"showGroupUndo":{"!description":"Determines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"height":{"!description":"Height of RichTextEditor control in CSS units.","!type":"sap.ui.core.CSSSize","!category":"enum"},"useLegacyTheme":{"!description":"Determines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.","!type":"Boolean","!category":"enum"},"value":{"!description":"An HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.","!type":"String","!category":"enum"},"!category":"namespace","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"required":{"!description":"Determines whether a value is required.","!type":"Boolean","!category":"enum"},"showGroupFont":{"!description":"Determines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"customToolbar":{"!description":"Determines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.","!type":"Boolean","!category":"enum"},"IToolbar":"sap.ui.richtexteditor.IToolbar","width":{"!description":"Width of RichTextEditor control in CSS units.","!type":"sap.ui.core.CSSSize","!category":"enum"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!type":"sap.ui.core.BusyIndicatorSize","!category":"enum"},"EditorType":"sap.ui.richtexteditor.EditorType","showGroupStructure":{"!description":"Determines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"showGroupLink":{"!description":"Determines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"editable":{"!description":"Determines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.","!type":"Boolean","!category":"enum"},"textDirection":{"!description":"The text direction","!type":"sap.ui.core.TextDirection","!category":"enum"},"showGroupFontStyle":{"!description":"Determines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"showGroupClipboard":{"!description":"Determines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"buttonGroups":{"!description":"An array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.","!type":"[Object]","!category":"enum"},"!description":"A rich text editor (RTE) control. Requires installation of an additional rich text editor library.","showGroupTextAlign":{"!description":"Determines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.","!type":"Boolean","!category":"enum"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is raised.\n\nSee {@link sap.ui.core.Control#attachValidateFieldGroup}.","!type":"[String]","!category":"enum"},"wrapping":{"!description":"Determines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.","!type":"Boolean","!category":"enum"},"!helpDescription":"A rich text editor (RTE) control. Requires installation of an additional rich text editor library."},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui":{"!category":"namespace","richtexteditor":"sap.ui.richtexteditor"},"sap.ui.richtexteditor.IToolbar":{"!description":"Interface for controls which are suitable as a Toolbar for RichTextEditor.","!category":"static class","!module":"sap/ui/richtexteditor/library"},"sap.ui.richtexteditor.EditorType":{"TinyMCE4":{"!description":"Uses TinyMCE version 4 as editor","!type":"String","!category":"enum"},"!description":"Determines which editor component should be used for editing the text.","TinyMCE":{"!description":"Uses TinyMCE version 3 as editor (default)","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/richtexteditor/library"},"sap.ui.richtexteditor.RichTextEditor":{"getEditorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Gets current value of property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.\n\nDefault value is <code>js/tiny_mce/tiny_mce_src.js<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"setEditorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Sets a new value for property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>js/tiny_mce/tiny_mce_src.js<\/code>.","!type":"fn(sEditorLocation: String) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sEditorLocation":"type: string, description: New value for property <code>editorLocation<\/code>"},"!static":false},"getShowGroupStructure":{"!description":"Gets current value of property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getNativeApi":{"!description":"Returns the current editor's instance. CAUTION: using the native editor introduces a dependency to that editor and breaks the wrapping character of the RichTextEditor control, so it should only be done in justified cases.","!type":"fn() -> Object","!category":"function","!static":false},"destroyCustomButtons":{"!description":"Destroys all the customButtons in the aggregation {@link #getCustomButtons customButtons}.","!type":"fn() -> sap.ui.richtexteditor.RichTextEditor","!category":"function","!static":false},"removeCustomButton":{"!description":"Removes a customButton from the aggregation {@link #getCustomButtons customButtons}.","!type":"fn(vCustomButton: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vCustomButton":"type: int|string|sap.ui.core.Control, description: The customButton to remove or its index or id"},"!static":false},"setShowGroupTextAlign":{"!description":"Sets a new value for property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowGroupTextAlign: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupTextAlign":"type: boolean, description: New value for property <code>showGroupTextAlign<\/code>"},"!static":false},"!module":"sap/ui/richtexteditor/RichTextEditor","getCustomButtons":{"!description":"Gets content of aggregation {@link #getCustomButtons customButtons}.\n\nCustom buttons are meant to extend the RichTextEditor's custom toolbar. Though type is set to sap.ui.Control, only sap.m.Button is allowed. <b>Note:<\/b> customButtons are available only when the customToolbar is enabled and all the requirements are fulfilled.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"attachBeforeEditorInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nThis event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter \"configuration\" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself"},"!static":false},"setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEditable: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"},"!static":false},"setCustomToolbar":{"!description":"Sets a new value for property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bCustomToolbar: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bCustomToolbar":"type: boolean, description: New value for property <code>customToolbar<\/code>"},"!static":false},"fireReadyRecurring":{"!description":"Fires event {@link #event:readyRecurring readyRecurring} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setShowGroupClipboard":{"!description":"Sets a new value for property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowGroupClipboard: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupClipboard":"type: boolean, description: New value for property <code>showGroupClipboard<\/code>"},"!static":false},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nFired when the used editor is loaded and ready (its HTML is also created).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself"},"!static":false},"getWrapping":{"!description":"Gets current value of property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getRequired":{"!description":"Gets current value of property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new RichTextEditor.\n\nThe RichTextEditor uses a third party component, which might in some cases not be\ncompletely compatible with the way UI5's (re-)rendering mechanism works. If you keep hidden\ninstances of the control (instances which are not visible in the DOM), you might run into\nproblems with some browser versions. In this case please make sure you destroy the\nRichTextEditor instance instead of hiding it and create a new one when you show it again.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : string (default: )<\/li>\n<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditorType editorType} : string (default: TinyMCE)<\/li>\n<li>{@link #getEditorLocation editorLocation} : string (default: js/tiny_mce/tiny_mce_src.js)<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupFontStyle showGroupFontStyle} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupTextAlign showGroupTextAlign} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupStructure showGroupStructure} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupFont showGroupFont} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupClipboard showGroupClipboard} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupInsert showGroupInsert} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupLink showGroupLink} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupUndo showGroupUndo} : boolean (default: false)<\/li>\n<li>{@link #getWrapping wrapping} : boolean (default: true)<\/li>\n<li>{@link #getRequired required} : boolean (default: false)<\/li>\n<li>{@link #getSanitizeValue sanitizeValue} : boolean (default: true)<\/li>\n<li>{@link #getPlugins plugins} : object[] (default: [])<\/li>\n<li>{@link #getUseLegacyTheme useLegacyTheme} : boolean (default: true)<\/li>\n<li>{@link #getButtonGroups buttonGroups} : object[] (default: [])<\/li>\n<li>{@link #getCustomToolbar customToolbar} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getCustomButtons customButtons} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:readyRecurring readyRecurring} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeEditorInit beforeEditorInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getShowGroupLink":{"!description":"Gets current value of property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSanitizeValue":{"!description":"Gets current value of property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getUseLegacyTheme":{"!description":"Gets current value of property {@link #getUseLegacyTheme useLegacyTheme}.\n\nDetermines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"indexOfCustomButton":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getCustomButtons customButtons}. and returns its index if found or -1 otherwise.","!type":"fn(oCustomButton: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton whose index is looked for"},"!static":false},"setPlugins":{"!description":"Sets a new value for property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!type":"fn(sPlugins: [[object Object]]) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sPlugins":"type: [object Object][], description: New value for property <code>plugins<\/code>"},"!static":false},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"},"!static":false},"fireChange":{"!description":"Fires event {@link #event:change change} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setShowGroupInsert":{"!description":"Sets a new value for property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowGroupInsert: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupInsert":"type: boolean, description: New value for property <code>showGroupInsert<\/code>"},"!static":false},"detachReadyRecurring":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getShowGroupFont":{"!description":"Gets current value of property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"The RichTextEditor-Control is used to enter formatted text.\n\nThe <code>RichTextEditor<\/code> uses a third party component, which might in some cases not be completely compatible with the way UI5's (re-)rendering mechanism works. <strong>If you keep hidden instances of the control (instances which are not visible in the DOM), you might run into problems with some browser versions.<\/strong> In this case please make sure you destroy the <code>RichTextEditor<\/code> instance instead of hiding it and create a new one when you show it again.\n\nWith version 1.48 onward, aside from the native toolbar of the TinyMCE, the RichTextEditor can also use a toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the control is being initialized and it will not be possible to change it during runtime, because of lifecycle incompatibilities between the SAPUI5 and the third-party library. The custom toolbar acts like a wrapper to the native toolbar and takes care of synchronizing the state of its internal controls with the current state of the selection in the editor (bold, italics, font styles etc.).\n\n<b>Limitation:<\/b>\n\nThe third-party component TinyMCE does not fully support the High Contrast themes. The control, which internally uses TinyMCE, is thus also not compliant to this product standard. Applications, which embed the RichTextEditor control and use the high-contrast theme, will not have a full High Contrast support. Certain buttons, menus etc. are available in the correct theme, but many elements are still showing up with a normal, non-contrast style.","!proto":"sap.ui.core.Control","getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nDefault value is <code>empty string<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"setSanitizeValue":{"!description":"Sets a new value for property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bSanitizeValue: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bSanitizeValue":"type: boolean, description: New value for property <code>sanitizeValue<\/code>"},"!static":false},"getTextDirection":{"!description":"Gets current value of property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nDefault value is <code>Inherit<\/code>.","!type":"fn() -> sap.ui.core.TextDirection","!category":"function","!static":false},"addButtonGroup":{"!description":"Adds a button group to the editor.","!type":"fn(mGroup?: map | String) -> Object","!category":"function","parameters":{"mGroup":"type: map|string, description: Name/ID of a single button or map containing the group information"},"!static":false},"setRequired":{"!description":"Sets a new value for property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bRequired: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bRequired":"type: boolean, description: New value for property <code>required<\/code>"},"!static":false},"setButtonGroups":{"!description":"Sets the button groups to the editor.","!type":"fn(aGroups?: Array) -> Object","!category":"function","parameters":{"aGroups":"type: array, description: Array of names or objects containing the group information"},"!static":false},"insertCustomButton":{"!description":"Inserts a customButton into the aggregation {@link #getCustomButtons customButtons}.","!type":"fn(oCustomButton: sap.ui.core.Control, iIndex: Number) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the customButton should be inserted at; for a negative value of <code>iIndex<\/code>, the customButton is inserted at position 0; for a value greater than the current size of the aggregation, the customButton is inserted at the last position"},"!static":false},"getCustomToolbar":{"!description":"Gets current value of property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setWrapping":{"!description":"Sets a new value for property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bWrapping: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bWrapping":"type: boolean, description: New value for property <code>wrapping<\/code>"},"!static":false},"setShowGroupFontStyle":{"!description":"Sets a new value for property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowGroupFontStyle: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupFontStyle":"type: boolean, description: New value for property <code>showGroupFontStyle<\/code>"},"!static":false},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"detachBeforeEditorInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setShowGroupStructure":{"!description":"Sets a new value for property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowGroupStructure: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupStructure":"type: boolean, description: New value for property <code>showGroupStructure<\/code>"},"!static":false},"fireBeforeEditorInit":{"!description":"Fires event {@link #event:beforeEditorInit beforeEditorInit} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!category":"class","setEditorType":{"!description":"Switches the editor type and sets the default settings for the editor. All plugins and button groups should be set after this has been invoked","!type":"fn(sEditorType?: String) -> Object","!category":"function","parameters":{"sEditorType":"type: string, description: Which editor type to be used (currently only TinyMCE 3 and 4)"},"!static":false},"setShowGroupFont":{"!description":"Sets a new value for property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowGroupFont: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupFont":"type: boolean, description: New value for property <code>showGroupFont<\/code>"},"!static":false},"removeAllCustomButtons":{"!description":"Removes all the controls from the aggregation {@link #getCustomButtons customButtons}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"getEditorType":{"!description":"Gets current value of property {@link #getEditorType editorType}.\n\nThe editor implementation to use. Valid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration). <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.\n\nDefault value is <code>TinyMCE<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"getShowGroupFontStyle":{"!description":"Gets current value of property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getShowGroupInsert":{"!description":"Gets current value of property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setTextDirection":{"!description":"Sets a new value for property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Inherit<\/code>.","!type":"fn(sTextDirection: sap.ui.core.TextDirection) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sTextDirection":"type: sap.ui.core.TextDirection, description: New value for property <code>textDirection<\/code>"},"!static":false},"removePlugin":{"!description":"Removes the plugin with the given name/ID from the list of plugins to load","!type":"fn(sPluginName?: String) -> Object","!category":"function","parameters":{"sPluginName":"type: string, description: The name/ID of the plugin to remove"},"!static":false},"addCustomButton":{"!description":"Adds some customButton to the aggregation {@link #getCustomButtons customButtons}.","!type":"fn(oCustomButton: sap.ui.core.Control) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton to add; if empty, nothing is inserted"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.richtexteditor.RichTextEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"addPlugin":{"!description":"Allows to add plugins (that must already be installed on the server) to the RichtextEditor.","!type":"fn(mPlugin?: map | String) -> Object","!category":"function","parameters":{"mPlugin":"type: map|string, description: A map with the property name containing the plugin IDs/name or an object with the property \"name\"."},"!static":false},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!type":"fn(sValue: String) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"},"!static":false},"detachChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachReadyRecurring":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nAnalogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself"},"!static":false},"getShowGroupUndo":{"!description":"Gets current value of property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getPlugins":{"!description":"Gets current value of property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nDefault value is <code>[]<\/code>.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"!description":"The RichTextEditor-Control is used to enter formatted text.\n\nThe <code>RichTextEditor<\/code> uses a third party component, which might in some cases not be completely compatible with the way UI5's (re-)rendering mechanism works. <strong>If you keep hidden instances of the control (instances which are not visible in the DOM), you might run into problems with some browser versions.<\/strong> In this case please make sure you destroy the <code>RichTextEditor<\/code> instance instead of hiding it and create a new one when you show it again.\n\nWith version 1.48 onward, aside from the native toolbar of the TinyMCE, the RichTextEditor can also use a toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the control is being initialized and it will not be possible to change it during runtime, because of lifecycle incompatibilities between the SAPUI5 and the third-party library. The custom toolbar acts like a wrapper to the native toolbar and takes care of synchronizing the state of its internal controls with the current state of the selection in the editor (bold, italics, font styles etc.).\n\n<b>Limitation:<\/b>\n\nThe third-party component TinyMCE does not fully support the High Contrast themes. The control, which internally uses TinyMCE, is thus also not compliant to this product standard. Applications, which embed the RichTextEditor control and use the high-contrast theme, will not have a full High Contrast support. Certain buttons, menus etc. are available in the correct theme, but many elements are still showing up with a normal, non-contrast style.","getShowGroupTextAlign":{"!description":"Gets current value of property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getButtonGroups":{"!description":"Gets current value of property {@link #getButtonGroups buttonGroups}.\n\nAn array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.\n\nDefault value is <code>[]<\/code>.","!type":"fn() -> [[object Object]]","!category":"function","!static":false},"setUseLegacyTheme":{"!description":"Allows to opt out of the legacy theme that is applied to keep the old button look. In case butons are used that are not in the legacy theme, this can be disabled in order to show the button correctly.","!type":"fn(bUseLegacyTheme?: Boolean) -> Object","!category":"function","parameters":{"bUseLegacyTheme":"type: boolean, description: Whether to use the legacy button theme"},"!static":false},"setShowGroupLink":{"!description":"Sets a new value for property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowGroupLink: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupLink":"type: boolean, description: New value for property <code>showGroupLink<\/code>"},"!static":false},"attachChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nEvent is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself"},"!static":false},"getShowGroupClipboard":{"!description":"Gets current value of property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setShowGroupUndo":{"!description":"Sets a new value for property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowGroupUndo: Boolean) -> sap.ui.richtexteditor.RichTextEditor","!category":"function","parameters":{"bShowGroupUndo":"type: boolean, description: New value for property <code>showGroupUndo<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.richtexteditor.RichTextEditor.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.richtexteditor.RichTextEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.richtexteditor.RichTextEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.richtexteditor.RichTextEditor"}},"!name":"sap.ui.richtexteditor","!version":"1.18.0"}