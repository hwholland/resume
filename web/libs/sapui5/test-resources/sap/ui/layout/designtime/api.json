{
	"$schema-ref": "http://schemas.sap.com/sapui5/designtime/api.json/1.0",
	"version": "1.38.33",
	"library": "sap.ui.layout",
	"symbols": [
		{
			"kind": "namespace",
			"name": "sap.ui.layout",
			"basename": "layout",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"description": "SAPUI5 library with layout controls."
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.BackgroundDesign",
			"basename": "BackgroundDesign",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"since": "1.36.0",
			"description": "Available Background Design.",
			"properties": [
				{
					"name": "Solid",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "A solid background color dependent on the theme."
				},
				{
					"name": "Translucent",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "A translucent background depending on the opacity value of the theme."
				},
				{
					"name": "Transparent",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Transparent background."
				}
			]
		},
		{
			"kind": "namespace",
			"name": "sap.ui.layout.BlockBackgroundType",
			"basename": "BlockBackgroundType",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"description": "A string type that is used inside the BlockLayout to set predefined background color to the cells inside\nthe control.",
			"properties": [
				{
					"name": "Default",
					"visibility": "public",
					"static": true,
					"type": "undefined",
					"description": "Background is transparent"
				},
				{
					"name": "Light",
					"visibility": "public",
					"static": true,
					"type": "undefined",
					"description": "Background is with predefined light colors"
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.BlockLayout",
			"basename": "BlockLayout",
			"resource": "sap/ui/layout/BlockLayout.js",
			"module": "sap/ui/layout/BlockLayout",
			"static": true,
			"visibility": "public",
			"since": "1.34",
			"extends": "sap.ui.core.Control",
			"description": "The BlockLayout is used to display several objects in a section-based manner. It features horizontal and vertical subdivisions, and full-width banners seen frequently in contemporary web design. Background colors are attached directly to these “blocks” of the layout. Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.\nExample use cases are SAP HANA Cloud Integration and the SAPUI5 Demo Kit. In SAP HANA Cloud Integration the BlockLayout serves as a banner-like presentation of illustrative icons with associated text. By placing pictorial and textual elements side by side in different blocks, a relation of content is established. In the SAPUI5 Demo Kit the BlockLayout serves as a flexible container for diverging content, such as headings, explanatory texts, code snippets, remarks, and examples.\nThe BlockLayout comes in three types: Layout only (default), Bright, and Mixed background colors.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "background",
						"type": "sap.ui.layout.BlockBackgroundType",
						"defaultValue": "Default",
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines the background used for the Layout",
						"methods": [
							"getBackground",
							"setBackground"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.layout.BlockLayoutRow",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The Rows to be included in the content of the control",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new BlockLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutRow",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getBackground",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockBackgroundType",
						"description": "Value of property <code>background</code>"
					},
					"description": "Gets current value of property <code>background</code>.\n\nDetermines the background used for the Layout\n\nDefault value is <code>Default</code>."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nThe Rows to be included in the content of the control"
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.BlockLayout."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutRow",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.layout.BlockLayoutRow</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutRow",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.layout.BlockLayoutRow",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setBackground",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sBackground",
							"type": "sap.ui.layout.BlockBackgroundType",
							"optional": false,
							"description": "New value for property <code>background</code>"
						}
					],
					"description": "Sets a new value for property <code>background</code>.\n\nDetermines the background used for the Layout\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Default</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.BlockLayoutCell",
			"basename": "BlockLayoutCell",
			"resource": "sap/ui/layout/BlockLayoutCell.js",
			"module": "sap/ui/layout/BlockLayoutCell",
			"static": true,
			"visibility": "public",
			"since": "1.34",
			"extends": "sap.ui.core.Control",
			"description": "The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.\nThe BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "title",
						"type": "string",
						"defaultValue": null,
						"group": "Appearance",
						"visibility": "public",
						"description": "Defines the title of the cell",
						"methods": [
							"getTitle",
							"setTitle"
						]
					},
					{
						"name": "titleAlignment",
						"type": "sap.ui.core.HorizontalAlign",
						"defaultValue": "Begin",
						"group": "Appearance",
						"visibility": "public",
						"description": "Defines the alignment of the cell title",
						"methods": [
							"getTitleAlignment",
							"setTitleAlignment"
						]
					},
					{
						"name": "titleLevel",
						"type": "sap.ui.core.TitleLevel",
						"defaultValue": "Auto",
						"group": "Appearance",
						"visibility": "public",
						"description": "Defines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.",
						"methods": [
							"getTitleLevel",
							"setTitleLevel"
						]
					},
					{
						"name": "width",
						"type": "int",
						"defaultValue": 0,
						"group": "Appearance",
						"visibility": "public",
						"description": "Defines the width of the cell. Depending on the context of the cell - whether it's in scrollable,\nor non scrollable row, this property is interpreted in two different ways.\nIf the cell is placed inside a scrollable row - this property defines the width of the cell in\npercentages. If no value is provided - the default is 40%.\nIf the cell is placed inside a non scrollable row - this property defines the grow factor of the cell\ncompared to the whole row.\n<b>For example:</b> If you have 2 cells, each with width of 1, this means that they should be of equal size,\nand they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,\none with width of 1, the other with width of 3, this means that the whole row width is 4, so the first\ncell will have a width of 25%, the second - 75%.\nAccording to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in\nyou applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)",
						"methods": [
							"getWidth",
							"setWidth"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The content to be included inside the cell",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new BlockLayoutCell.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nThe content to be included inside the cell"
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.BlockLayoutCell."
				},
				{
					"name": "getTitle",
					"visibility": "public",
					"returnValue": {
						"type": "string",
						"description": "Value of property <code>title</code>"
					},
					"description": "Gets current value of property <code>title</code>.\n\nDefines the title of the cell"
				},
				{
					"name": "getTitleAlignment",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.HorizontalAlign",
						"description": "Value of property <code>titleAlignment</code>"
					},
					"description": "Gets current value of property <code>titleAlignment</code>.\n\nDefines the alignment of the cell title\n\nDefault value is <code>Begin</code>."
				},
				{
					"name": "getTitleLevel",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.TitleLevel",
						"description": "Value of property <code>titleLevel</code>"
					},
					"description": "Gets current value of property <code>titleLevel</code>.\n\nDefines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\n\nDefault value is <code>Auto</code>."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nDefines the width of the cell. Depending on the context of the cell - whether it's in scrollable,\nor non scrollable row, this property is interpreted in two different ways.\nIf the cell is placed inside a scrollable row - this property defines the width of the cell in\npercentages. If no value is provided - the default is 40%.\nIf the cell is placed inside a non scrollable row - this property defines the grow factor of the cell\ncompared to the whole row.\n<b>For example:</b> If you have 2 cells, each with width of 1, this means that they should be of equal size,\nand they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,\none with width of 1, the other with width of 3, this means that the whole row width is 4, so the first\ncell will have a width of 25%, the second - 75%.\nAccording to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in\nyou applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)\n\nDefault value is <code>0</code>."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sTitle",
							"type": "string",
							"optional": false,
							"description": "New value for property <code>title</code>"
						}
					],
					"description": "Sets a new value for property <code>title</code>.\n\nDefines the title of the cell\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setTitleAlignment",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sTitleAlignment",
							"type": "sap.ui.core.HorizontalAlign",
							"optional": false,
							"description": "New value for property <code>titleAlignment</code>"
						}
					],
					"description": "Sets a new value for property <code>titleAlignment</code>.\n\nDefines the alignment of the cell title\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Begin</code>."
				},
				{
					"name": "setTitleLevel",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sTitleLevel",
							"type": "sap.ui.core.TitleLevel",
							"optional": false,
							"description": "New value for property <code>titleLevel</code>"
						}
					],
					"description": "Sets a new value for property <code>titleLevel</code>.\n\nDefines the aria level of the title\nThis information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Auto</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.BlockLayoutRow",
			"basename": "BlockLayoutRow",
			"resource": "sap/ui/layout/BlockLayoutRow.js",
			"module": "sap/ui/layout/BlockLayoutRow",
			"static": true,
			"visibility": "public",
			"since": "1.34",
			"extends": "sap.ui.core.Control",
			"description": "The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.\nThe BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "scrollable",
						"type": "boolean",
						"defaultValue": false,
						"group": "Appearance",
						"visibility": "public",
						"description": "Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.",
						"methods": [
							"getScrollable",
							"setScrollable"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.layout.BlockLayoutCell",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The content cells to be included in the row.",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new BlockLayoutRow.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutCell",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nThe content cells to be included in the row."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.BlockLayoutRow."
				},
				{
					"name": "getScrollable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>scrollable</code>"
					},
					"description": "Gets current value of property <code>scrollable</code>.\n\nSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutCell",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.layout.BlockLayoutCell</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.layout.BlockLayoutCell",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutCell",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.layout.BlockLayoutCell",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setScrollable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BlockLayoutRow",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bScrollable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>scrollable</code>"
						}
					],
					"description": "Sets a new value for property <code>scrollable</code>.\n\nSets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get\naligned side by side, with horizontal scroll bar for the row.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.DynamicSideContent",
			"basename": "DynamicSideContent",
			"resource": "sap/ui/layout/DynamicSideContent.js",
			"module": "sap/ui/layout/DynamicSideContent",
			"static": true,
			"visibility": "public",
			"since": "1.30",
			"extends": "sap.ui.core.Control",
			"description": "The DynamicSideContent control allows additional (side) content to be displayed alongside or below the main\ncontent, within the container the control is used in. There are different size ratios between the main and\nthe side content for the different breakpoints. The side content position (alongside/below the main content)\nand visibility (visible/hidden) can be configured per breakpoint. There are 4 predefined breakpoints:\n- Screen width > 1440 px (XL breakpoint)\n- Screen width <= 1440 px (L breakpoint)\n- Main content width <= 600 px (M breakpoint)\n- Screen width <= 720 px (S breakpoint)",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "showSideContent",
						"type": "boolean",
						"defaultValue": true,
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines whether the side content is visible or hidden.",
						"methods": [
							"getShowSideContent",
							"setShowSideContent"
						]
					},
					{
						"name": "showMainContent",
						"type": "boolean",
						"defaultValue": true,
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines whether the main content is visible or hidden.",
						"methods": [
							"getShowMainContent",
							"setShowMainContent"
						]
					},
					{
						"name": "sideContentVisibility",
						"type": "sap.ui.layout.SideContentVisibility",
						"defaultValue": "ShowAboveS",
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines on which breakpoints the side content is visible.",
						"methods": [
							"getSideContentVisibility",
							"setSideContentVisibility"
						]
					},
					{
						"name": "sideContentFallDown",
						"type": "sap.ui.layout.SideContentFallDown",
						"defaultValue": "OnMinimumWidth",
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines on which breakpoints the side content falls down below the main content.",
						"methods": [
							"getSideContentFallDown",
							"setSideContentFallDown"
						]
					},
					{
						"name": "equalSplit",
						"type": "boolean",
						"defaultValue": false,
						"group": "Appearance",
						"visibility": "public",
						"description": "Defines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.",
						"methods": [
							"getEqualSplit",
							"setEqualSplit"
						]
					},
					{
						"name": "containerQuery",
						"type": "boolean",
						"defaultValue": false,
						"group": "Behavior",
						"visibility": "public",
						"description": "If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.",
						"methods": [
							"getContainerQuery",
							"setContainerQuery"
						]
					},
					{
						"name": "sideContentPosition",
						"type": "sap.ui.layout.SideContentPosition",
						"defaultValue": "End",
						"group": "Appearance",
						"visibility": "public",
						"since": "1.36",
						"description": "Determines whether the side content is on the left or on the right side of the main content.",
						"methods": [
							"getSideContentPosition",
							"setSideContentPosition"
						]
					}
				],
				"aggregations": [
					{
						"name": "mainContent",
						"singularName": "mainContent",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Main content controls.",
						"methods": [
							"getMainContent",
							"destroyMainContent",
							"insertMainContent",
							"addMainContent",
							"removeMainContent",
							"indexOfMainContent",
							"removeAllMainContent"
						]
					},
					{
						"name": "sideContent",
						"singularName": "sideContent",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Side content controls.",
						"methods": [
							"getSideContent",
							"destroySideContent",
							"insertSideContent",
							"addSideContent",
							"removeSideContent",
							"indexOfSideContent",
							"removeAllSideContent"
						]
					}
				],
				"defaultAggregation": "mainContent",
				"events": [
					{
						"name": "breakpointChanged",
						"visibility": "public",
						"since": "1.32",
						"description": "Fires when the current breakpoint has been changed.",
						"parameters": {
							"currentBreakpoint": {
								"name": "currentBreakpoint",
								"type": "string"
							}
						},
						"methods": [
							"attachBreakpointChanged",
							"detachBreakpointChanged",
							"fireBreakpointChanged"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new DynamicSideContent.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"events": [
				{
					"name": "breakpointChanged",
					"visibility": "public",
					"since": "1.32",
					"parameters": [
						{
							"name": "oControlEvent",
							"type": "sap.ui.base.Event",
							"parameterProperties": {
								"getSource": {
									"name": "getSource",
									"type": "sap.ui.base.EventProvider",
									"optional": false
								},
								"getParameters": {
									"name": "getParameters",
									"type": "object",
									"optional": false,
									"parameterProperties": {
										"currentBreakpoint": {
											"name": "currentBreakpoint",
											"type": "string",
											"optional": false
										}
									}
								}
							}
						}
					],
					"description": "Fires when the current breakpoint has been changed."
				}
			],
			"methods": [
				{
					"name": "addMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"parameters": [
						{
							"name": "oControl",
							"type": "object",
							"optional": false,
							"description": "Object to be added in the aggregation"
						}
					],
					"description": "Adds a control to the main content area.\nOnly the main content part in the aggregation is re-rendered."
				},
				{
					"name": "addSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"parameters": [
						{
							"name": "oControl",
							"type": "object",
							"optional": false,
							"description": "Object to be added in the aggregation"
						}
					],
					"description": "Adds a control to the side content area.\nOnly the side content part in the aggregation is re-rendered."
				},
				{
					"name": "attachBreakpointChanged",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.32",
					"parameters": [
						{
							"name": "oData",
							"type": "object",
							"optional": true,
							"description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
						},
						{
							"name": "fnFunction",
							"type": "function",
							"optional": false,
							"description": "The function to be called when the event occurs"
						},
						{
							"name": "oListener",
							"type": "object",
							"optional": true,
							"description": "Context object to call the event handler with. Defaults to this <code>sap.ui.layout.DynamicSideContent</code> itself"
						}
					],
					"description": "Attaches event handler <code>fnFunction</code> to the <code>breakpointChanged</code> event of this <code>sap.ui.layout.DynamicSideContent</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, \notherwise it will be bound to this <code>sap.ui.layout.DynamicSideContent</code> itself.\n\nFires when the current breakpoint has been changed."
				},
				{
					"name": "destroyMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the mainContent in the aggregation <code>mainContent</code>."
				},
				{
					"name": "destroySideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the sideContent in the aggregation <code>sideContent</code>."
				},
				{
					"name": "detachBreakpointChanged",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.32",
					"parameters": [
						{
							"name": "fnFunction",
							"type": "function",
							"optional": false,
							"description": "The function to be called, when the event occurs"
						},
						{
							"name": "oListener",
							"type": "object",
							"optional": false,
							"description": "Context object on which the given function had to be called"
						}
					],
					"description": "Detaches event handler <code>fnFunction</code> from the <code>breakpointChanged</code> event of this <code>sap.ui.layout.DynamicSideContent</code>.\n\nThe passed function and listener object must match the ones used for event registration."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "fireBreakpointChanged",
					"visibility": "protected",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.32",
					"parameters": [
						{
							"name": "mArguments",
							"type": "Map",
							"optional": true,
							"description": "The arguments to pass along with the event"
						}
					],
					"description": "Fires event <code>breakpointChanged</code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>currentBreakpoint</code> of type <code>string</code></li>\n</ul>"
				},
				{
					"name": "getContainerQuery",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>containerQuery</code>"
					},
					"description": "Gets current value of property <code>containerQuery</code>.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getCurrentBreakpoint",
					"visibility": "public",
					"returnValue": {
						"type": "String",
						"description": "currentBreakpoint"
					},
					"description": "Returns the breakpoint for the current state of the control."
				},
				{
					"name": "getEqualSplit",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>equalSplit</code>"
					},
					"description": "Gets current value of property <code>equalSplit</code>.\n\nDefines whether the control is in equal split mode. In this mode, the side and the main content\ntake 50:50 percent of the container on all screen sizes except for phone, where the main and\nside contents are switching visibility using the toggle method.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>mainContent</code>.\n\nMain content controls."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.DynamicSideContent."
				},
				{
					"name": "getShowMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Side content visibility state"
					},
					"description": "Gets the value of showMainContent property."
				},
				{
					"name": "getShowSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Side content visibility state"
					},
					"description": "Gets the value of showSideContent property."
				},
				{
					"name": "getSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>sideContent</code>.\n\nSide content controls."
				},
				{
					"name": "getSideContentFallDown",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SideContentFallDown",
						"description": "Value of property <code>sideContentFallDown</code>"
					},
					"description": "Gets current value of property <code>sideContentFallDown</code>.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nDefault value is <code>OnMinimumWidth</code>."
				},
				{
					"name": "getSideContentPosition",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SideContentPosition",
						"description": "Value of property <code>sideContentPosition</code>"
					},
					"since": "1.36",
					"description": "Gets current value of property <code>sideContentPosition</code>.\n\nDetermines whether the side content is on the left or on the right side of the main content.\n\nDefault value is <code>End</code>."
				},
				{
					"name": "getSideContentVisibility",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SideContentVisibility",
						"description": "Value of property <code>sideContentVisibility</code>"
					},
					"description": "Gets current value of property <code>sideContentVisibility</code>.\n\nDetermines on which breakpoints the side content is visible.\n\nDefault value is <code>ShowAboveS</code>."
				},
				{
					"name": "indexOfMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oMainContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The mainContent whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>mainContent</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "indexOfSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oSideContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The sideContent whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>sideContent</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oMainContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the mainContent to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the mainContent should be inserted at; for\n             a negative value of <code>iIndex</code>, the mainContent is inserted at position 0; for a value\n             greater than the current size of the aggregation, the mainContent is inserted at\n             the last position"
						}
					],
					"description": "Inserts a mainContent into the aggregation <code>mainContent</code>."
				},
				{
					"name": "insertSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oSideContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the sideContent to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the sideContent should be inserted at; for\n             a negative value of <code>iIndex</code>, the sideContent is inserted at position 0; for a value\n             greater than the current size of the aggregation, the sideContent is inserted at\n             the last position"
						}
					],
					"description": "Inserts a sideContent into the aggregation <code>sideContent</code>."
				},
				{
					"name": "removeAllMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>mainContent</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAllSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>sideContent</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed mainContent or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vMainContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The mainContentto remove or its index or id"
						}
					],
					"description": "Removes a mainContent from the aggregation <code>mainContent</code>."
				},
				{
					"name": "removeSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed sideContent or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vSideContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The sideContentto remove or its index or id"
						}
					],
					"description": "Removes a sideContent from the aggregation <code>sideContent</code>."
				},
				{
					"name": "setContainerQuery",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bContainerQuery",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>containerQuery</code>"
						}
					],
					"description": "Sets a new value for property <code>containerQuery</code>.\n\nIf set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setEqualSplit",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"parameters": [
						{
							"name": "bState",
							"type": "boolean",
							"optional": true,
							"description": "Determines if the page is set to equalSplit mode"
						}
					],
					"description": "Sets or unsets the page in equalSplit mode."
				},
				{
					"name": "setShowMainContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"parameters": [
						{
							"name": "bVisible",
							"type": "boolean",
							"optional": false,
							"description": "Determines if the main content part is visible"
						},
						{
							"name": "bSuppressVisualUpdate",
							"type": "boolean",
							"optional": false,
							"description": "Determines if the visual state is updated"
						}
					],
					"description": "Sets the showMainContent property."
				},
				{
					"name": "setShowSideContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"parameters": [
						{
							"name": "bVisible",
							"type": "boolean",
							"optional": false,
							"description": "Determines if the side content part is visible"
						},
						{
							"name": "bSuppressVisualUpdate",
							"type": "boolean",
							"optional": false,
							"description": "Determines if the visual state is updated"
						}
					],
					"description": "Sets the showSideContent property."
				},
				{
					"name": "setSideContentFallDown",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sSideContentFallDown",
							"type": "sap.ui.layout.SideContentFallDown",
							"optional": false,
							"description": "New value for property <code>sideContentFallDown</code>"
						}
					],
					"description": "Sets a new value for property <code>sideContentFallDown</code>.\n\nDetermines on which breakpoints the side content falls down below the main content.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>OnMinimumWidth</code>."
				},
				{
					"name": "setSideContentPosition",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36",
					"parameters": [
						{
							"name": "sSideContentPosition",
							"type": "sap.ui.layout.SideContentPosition",
							"optional": false,
							"description": "New value for property <code>sideContentPosition</code>"
						}
					],
					"description": "Sets a new value for property <code>sideContentPosition</code>.\n\nDetermines whether the side content is on the left or on the right side of the main content.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>End</code>."
				},
				{
					"name": "setSideContentVisibility",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.DynamicSideContent",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sSideContentVisibility",
							"type": "sap.ui.layout.SideContentVisibility",
							"optional": false,
							"description": "New value for property <code>sideContentVisibility</code>"
						}
					],
					"description": "Sets a new value for property <code>sideContentVisibility</code>.\n\nDetermines on which breakpoints the side content is visible.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>ShowAboveS</code>."
				},
				{
					"name": "toggle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.m.DynamicSideContent",
						"description": "this pointer for chaining"
					},
					"description": "Used for the toggle button functionality.\nWhen the control is on a phone screen size only, one control area is visible.\nThis helper method is used to implement a button/switch for changing\nbetween the main and side content areas.\nOnly works if the current breakpoint is \"S\"."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.FixFlex",
			"basename": "FixFlex",
			"resource": "sap/ui/layout/FixFlex.js",
			"module": "sap/ui/layout/FixFlex",
			"static": true,
			"visibility": "public",
			"since": "1.25.0",
			"extends": "sap.ui.core.Control",
			"description": "The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container. The fix container can hold any number of controls, while the flexible container can hold only one.\n\nIn order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.\n\nWarning: Avoid nesting FixFlex in other flexbox based layout controls (FixFlex, FlexBox, Hbox, Vbox). Otherwise contents may be not accessible or multiple scrollbars can appear.\n\nNote: If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view. If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the vertical property.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "vertical",
						"type": "boolean",
						"defaultValue": true,
						"group": "Appearance",
						"visibility": "public",
						"description": "Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.",
						"methods": [
							"getVertical",
							"setVertical"
						]
					},
					{
						"name": "fixFirst",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "Determines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").",
						"methods": [
							"getFixFirst",
							"setFixFirst"
						]
					},
					{
						"name": "fixContentSize",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "auto",
						"group": "Dimension",
						"visibility": "public",
						"description": "Determines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.",
						"methods": [
							"getFixContentSize",
							"setFixContentSize"
						]
					},
					{
						"name": "minFlexSize",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.29",
						"description": "Enables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.",
						"methods": [
							"getMinFlexSize",
							"setMinFlexSize"
						]
					}
				],
				"aggregations": [
					{
						"name": "fixContent",
						"singularName": "fixContent",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Controls in the fixed part of the layout.",
						"methods": [
							"getFixContent",
							"destroyFixContent",
							"insertFixContent",
							"addFixContent",
							"removeFixContent",
							"indexOfFixContent",
							"removeAllFixContent"
						]
					},
					{
						"name": "flexContent",
						"singularName": "flexContent",
						"type": "sap.ui.core.Control",
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Control in the stretching part of the layout.",
						"methods": [
							"getFlexContent",
							"destroyFlexContent",
							"setFlexContent"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new FixFlex.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFixContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the fixContent to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some fixContent to the aggregation <code>fixContent</code>."
				},
				{
					"name": "destroyFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the fixContent in the aggregation <code>fixContent</code>."
				},
				{
					"name": "destroyFlexContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the flexContent in the aggregation <code>flexContent</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>fixContent</code>.\n\nControls in the fixed part of the layout."
				},
				{
					"name": "getFixContentSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>fixContentSize</code>"
					},
					"description": "Gets current value of property <code>fixContentSize</code>.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nDefault value is <code>auto</code>."
				},
				{
					"name": "getFixFirst",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>fixFirst</code>"
					},
					"description": "Gets current value of property <code>fixFirst</code>.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getFlexContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control"
					},
					"description": "Gets content of aggregation <code>flexContent</code>.\n\nControl in the stretching part of the layout."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.FixFlex."
				},
				{
					"name": "getMinFlexSize",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>minFlexSize</code>"
					},
					"since": "1.29",
					"description": "Gets current value of property <code>minFlexSize</code>.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getVertical",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>vertical</code>"
					},
					"description": "Gets current value of property <code>vertical</code>.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "indexOfFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oFixContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The fixContent whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>fixContent</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFixContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the fixContent to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the fixContent should be inserted at; for\n             a negative value of <code>iIndex</code>, the fixContent is inserted at position 0; for a value\n             greater than the current size of the aggregation, the fixContent is inserted at\n             the last position"
						}
					],
					"description": "Inserts a fixContent into the aggregation <code>fixContent</code>."
				},
				{
					"name": "removeAllFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>fixContent</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeFixContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed fixContent or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vFixContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The fixContentto remove or its index or id"
						}
					],
					"description": "Removes a fixContent from the aggregation <code>fixContent</code>."
				},
				{
					"name": "setFixContentSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sFixContentSize",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>fixContentSize</code>"
						}
					],
					"description": "Sets a new value for property <code>fixContentSize</code>.\n\nDetermines the height (if the vertical property is \"true\") or the width (if the vertical property is \"false\") of the fixed area. If left at the default value \"auto\", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>auto</code>."
				},
				{
					"name": "setFixFirst",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bFixFirst",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>fixFirst</code>"
						}
					],
					"description": "Sets a new value for property <code>fixFirst</code>.\n\nDetermines whether the fixed-size area should be on the beginning/top ( if the value is \"true\") or beginning/bottom ( if the value is \"false\").\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setFlexContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFlexContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The flexContent to set"
						}
					],
					"description": "Sets the aggregated <code>flexContent</code>."
				},
				{
					"name": "setMinFlexSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.29",
					"parameters": [
						{
							"name": "iMinFlexSize",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>minFlexSize</code>"
						}
					],
					"description": "Sets a new value for property <code>minFlexSize</code>.\n\nEnables scrolling inside the flexible part. The given size is calculated in \"px\". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setVertical",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.FixFlex",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVertical",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>vertical</code>"
						}
					],
					"description": "Sets a new value for property <code>vertical</code>.\n\nDetermines the direction of the layout of child elements. True for vertical and false for horizontal layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.Form",
			"basename": "Form",
			"resource": "sap/ui/layout/form/Form.js",
			"module": "sap/ui/layout/form/Form",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "Form control.\nA <code>Form</code> is structured into <code>FormContainers</code>. Each <code>FormContainer</code> consists of <code>FormElements</code>.\nThe <code>FormElements</code> consists of a label and the form fields.\nA <code>Form</code> doesn't render its content by itself. The rendering is done by the assigned <code>FormLayout</code>.\nThis is so that the rendering can be adopted to new UI requirements without changing the Form itself.\n\nFor the content of a <code>Form</code>, <code>VariantLayoutData</code> are supported to allow simple switching of the <code>FormLayout</code>.\n<code>LayoutData</code> on the content can be used to overwrite the default layout of the code>Form</code>.\n\n<b>Note:</b> Do not put any layout controls into the <code>FormElements</code>. This could destroy the visual layout,\nkeyboard support and screen-reader support.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": null,
						"group": "Dimension",
						"visibility": "public",
						"description": "Width of the <code>Form</code>.",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "editable",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"since": "1.20.0",
						"description": "Applies a device and theme specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.",
						"methods": [
							"getEditable",
							"setEditable"
						]
					}
				],
				"aggregations": [
					{
						"name": "formContainers",
						"singularName": "formContainer",
						"type": "sap.ui.layout.form.FormContainer",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Containers with the content of the form. A <code>FormContainer</code> represents a group inside the <code>Form</code>.",
						"methods": [
							"getFormContainers",
							"destroyFormContainers",
							"insertFormContainer",
							"addFormContainer",
							"removeFormContainer",
							"indexOfFormContainer",
							"removeAllFormContainers"
						]
					},
					{
						"name": "title",
						"singularName": "title",
						"type": "sap.ui.core.Title",
						"altTypes": [
							"string"
						],
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Title of the <code>Form</code>. Can either be a <code>Title</code> object, or a string.\nIf a <code>Title</code> object it used, the style of the title can be set.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.",
						"methods": [
							"getTitle",
							"destroyTitle",
							"setTitle"
						]
					},
					{
						"name": "toolbar",
						"singularName": "toolbar",
						"type": "sap.ui.core.Toolbar",
						"cardinality": "0..1",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Toolbar of the <code>Form</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.",
						"methods": [
							"getToolbar",
							"destroyToolbar",
							"setToolbar"
						]
					},
					{
						"name": "layout",
						"singularName": "layout",
						"type": "sap.ui.layout.form.FormLayout",
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Layout of the <code>Form</code>. The assigned <code>Layout</code> renders the <code>Form</code>.\nWe suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>Form</code>, as its responsiveness allows the available space to be used in the best way possible.",
						"methods": [
							"getLayout",
							"destroyLayout",
							"setLayout"
						]
					}
				],
				"defaultAggregation": "formContainers",
				"associations": [
					{
						"name": "ariaLabelledBy",
						"singularName": "ariaLabelledBy",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"since": "1.28.0",
						"description": "Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).",
						"methods": [
							"getAriaLabelledBy",
							"addAriaLabelledBy",
							"removeAriaLabelledBy",
							"removeAllAriaLabelledBy"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.Form.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.28.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "string|sap.ui.core.Control",
							"optional": false,
							"description": "the ariaLabelledBy to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "addFormContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFormContainer",
							"type": "sap.ui.layout.form.FormContainer",
							"optional": false,
							"description": "the formContainer to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some formContainer to the aggregation <code>formContainers</code>."
				},
				{
					"name": "destroyFormContainers",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the formContainers in the aggregation <code>formContainers</code>."
				},
				{
					"name": "destroyLayout",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the layout in the aggregation <code>layout</code>."
				},
				{
					"name": "destroyTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the title in the aggregation <code>title</code>."
				},
				{
					"name": "destroyToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"description": "Destroys the toolbar in the aggregation <code>toolbar</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"since": "1.28.0",
					"description": "Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "getEditable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>editable</code>"
					},
					"since": "1.20.0",
					"description": "Gets current value of property <code>editable</code>.\n\nApplies a device and theme specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getFormContainers",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer[]"
					},
					"description": "Gets content of aggregation <code>formContainers</code>.\n\nContainers with the content of the form. A <code>FormContainer</code> represents a group inside the <code>Form</code>."
				},
				{
					"name": "getLayout",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormLayout"
					},
					"description": "Gets content of aggregation <code>layout</code>.\n\nLayout of the <code>Form</code>. The assigned <code>Layout</code> renders the <code>Form</code>.\nWe suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>Form</code>, as its responsiveness allows the available space to be used in the best way possible."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.Form."
				},
				{
					"name": "getTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Title|string"
					},
					"description": "Gets content of aggregation <code>title</code>.\n\nTitle of the <code>Form</code>. Can either be a <code>Title</code> object, or a string.\nIf a <code>Title</code> object it used, the style of the title can be set.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored."
				},
				{
					"name": "getToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Toolbar"
					},
					"since": "1.36.0",
					"description": "Gets content of aggregation <code>toolbar</code>.\n\nToolbar of the <code>Form</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nWidth of the <code>Form</code>."
				},
				{
					"name": "indexOfFormContainer",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oFormContainer",
							"type": "sap.ui.layout.form.FormContainer",
							"optional": false,
							"description": "The formContainer whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.layout.form.FormContainer</code> in the aggregation <code>formContainers</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertFormContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFormContainer",
							"type": "sap.ui.layout.form.FormContainer",
							"optional": false,
							"description": "the formContainer to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the formContainer should be inserted at; for\n             a negative value of <code>iIndex</code>, the formContainer is inserted at position 0; for a value\n             greater than the current size of the aggregation, the formContainer is inserted at\n             the last position"
						}
					],
					"description": "Inserts a formContainer into the aggregation <code>formContainers</code>."
				},
				{
					"name": "removeAllAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"since": "1.28.0",
					"description": "Removes all the controls in the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeAllFormContainers",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>formContainers</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "the removed ariaLabelledBy or <code>null</code>"
					},
					"since": "1.28.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The ariaLabelledByto be removed or its index or ID"
						}
					],
					"description": "Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeFormContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "The removed formContainer or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vFormContainer",
							"type": "int|string|sap.ui.layout.form.FormContainer",
							"optional": false,
							"description": "The formContainerto remove or its index or id"
						}
					],
					"description": "Removes a formContainer from the aggregation <code>formContainers</code>."
				},
				{
					"name": "setEditable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.20.0",
					"parameters": [
						{
							"name": "bEditable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>editable</code>"
						}
					],
					"description": "Sets a new value for property <code>editable</code>.\n\nApplies a device and theme specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLayout",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oLayout",
							"type": "sap.ui.layout.form.FormLayout",
							"optional": false,
							"description": "The layout to set"
						}
					],
					"description": "Sets the aggregated <code>layout</code>."
				},
				{
					"name": "setTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "vTitle",
							"type": "sap.ui.core.Title|string",
							"optional": false,
							"description": "The title to set"
						}
					],
					"description": "Sets the aggregated <code>title</code>."
				},
				{
					"name": "setToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "oToolbar",
							"type": "sap.ui.core.Toolbar",
							"optional": false,
							"description": "The toolbar to set"
						}
					],
					"description": "Sets the aggregated <code>toolbar</code>."
				},
				{
					"name": "setWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.Form",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sWidth",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>width</code>"
						}
					],
					"description": "Sets a new value for property <code>width</code>.\n\nWidth of the <code>Form</code>.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.FormContainer",
			"basename": "FormContainer",
			"resource": "sap/ui/layout/form/FormContainer.js",
			"module": "sap/ui/layout/form/FormContainer",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Element",
			"description": "A <code>FormContainer</code> represents a group inside a <code>Form</code>. It consists of <code>FormElements</code>.\nThe rendering of the <code>FormContainer</code> is done by the <code>FormLayout</code> assigned to the <code>Form</code>.",
			"ui5-metadata": {
				"stereotype": "element",
				"properties": [
					{
						"name": "expanded",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "Container is expanded.\n<b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.",
						"methods": [
							"getExpanded",
							"setExpanded"
						]
					},
					{
						"name": "expandable",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Defines if the <code>FormContainer</code> is expandable.\n<b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.",
						"methods": [
							"getExpandable",
							"setExpandable"
						]
					},
					{
						"name": "visible",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "If set to <code>false</code>, the <code>FormContainer</code> is not rendered.",
						"methods": [
							"getVisible",
							"setVisible"
						]
					}
				],
				"aggregations": [
					{
						"name": "formElements",
						"singularName": "formElement",
						"type": "sap.ui.layout.form.FormElement",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The <code>FormElements</code> contain the content (labels and fields) of the <code>FormContainers</code>.",
						"methods": [
							"getFormElements",
							"destroyFormElements",
							"insertFormElement",
							"addFormElement",
							"removeFormElement",
							"indexOfFormElement",
							"removeAllFormElements"
						]
					},
					{
						"name": "title",
						"singularName": "title",
						"type": "sap.ui.core.Title",
						"altTypes": [
							"string"
						],
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Title of the <code>FormContainer</code>. Can either be a <code>Title</code> object, or a string.\nIf a <code>Title</code> object is used, the style of the title can be set.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.",
						"methods": [
							"getTitle",
							"destroyTitle",
							"setTitle"
						]
					},
					{
						"name": "toolbar",
						"singularName": "toolbar",
						"type": "sap.ui.core.Toolbar",
						"cardinality": "0..1",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Toolbar of the <code>FormContainer</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.",
						"methods": [
							"getToolbar",
							"destroyToolbar",
							"setToolbar"
						]
					}
				],
				"defaultAggregation": "formElements",
				"associations": [
					{
						"name": "ariaLabelledBy",
						"singularName": "ariaLabelledBy",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).\n\n<b>Note:</b> This attribute is only rendered if the <code>FormContainer</code> has it's own\nDOM representation in the used <code>FormLayout</code>.",
						"methods": [
							"getAriaLabelledBy",
							"addAriaLabelledBy",
							"removeAriaLabelledBy",
							"removeAllAriaLabelledBy"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.FormContainer.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "string|sap.ui.core.Control",
							"optional": false,
							"description": "the ariaLabelledBy to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "addFormElement",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFormElement",
							"type": "sap.ui.layout.form.FormElement",
							"optional": false,
							"description": "the formElement to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some formElement to the aggregation <code>formElements</code>."
				},
				{
					"name": "destroyFormElements",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the formElements in the aggregation <code>formElements</code>."
				},
				{
					"name": "destroyTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the title in the aggregation <code>title</code>."
				},
				{
					"name": "destroyToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"description": "Destroys the toolbar in the aggregation <code>toolbar</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}."
				},
				{
					"name": "getAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"since": "1.36.0",
					"description": "Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "getExpandable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>expandable</code>"
					},
					"description": "Gets current value of property <code>expandable</code>.\n\nDefines if the <code>FormContainer</code> is expandable.\n<b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getExpanded",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>expanded</code>"
					},
					"description": "Gets current value of property <code>expanded</code>.\n\nContainer is expanded.\n<b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getFormElements",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement[]"
					},
					"description": "Gets content of aggregation <code>formElements</code>.\n\nThe <code>FormElements</code> contain the content (labels and fields) of the <code>FormContainers</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.FormContainer."
				},
				{
					"name": "getTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Title|string"
					},
					"description": "Gets content of aggregation <code>title</code>.\n\nTitle of the <code>FormContainer</code>. Can either be a <code>Title</code> object, or a string.\nIf a <code>Title</code> object is used, the style of the title can be set.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored."
				},
				{
					"name": "getToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Toolbar"
					},
					"since": "1.36.0",
					"description": "Gets content of aggregation <code>toolbar</code>.\n\nToolbar of the <code>FormContainer</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association."
				},
				{
					"name": "getVisible",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visible</code>"
					},
					"description": "Gets current value of property <code>visible</code>.\n\nIf set to <code>false</code>, the <code>FormContainer</code> is not rendered.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "indexOfFormElement",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oFormElement",
							"type": "sap.ui.layout.form.FormElement",
							"optional": false,
							"description": "The formElement whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.layout.form.FormElement</code> in the aggregation <code>formElements</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertFormElement",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oFormElement",
							"type": "sap.ui.layout.form.FormElement",
							"optional": false,
							"description": "the formElement to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the formElement should be inserted at; for\n             a negative value of <code>iIndex</code>, the formElement is inserted at position 0; for a value\n             greater than the current size of the aggregation, the formElement is inserted at\n             the last position"
						}
					],
					"description": "Inserts a formElement into the aggregation <code>formElements</code>."
				},
				{
					"name": "removeAllAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"since": "1.36.0",
					"description": "Removes all the controls in the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeAllFormElements",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>formElements</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "the removed ariaLabelledBy or <code>null</code>"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The ariaLabelledByto be removed or its index or ID"
						}
					],
					"description": "Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeFormElement",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "The removed formElement or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vFormElement",
							"type": "int|string|sap.ui.layout.form.FormElement",
							"optional": false,
							"description": "The formElementto remove or its index or id"
						}
					],
					"description": "Removes a formElement from the aggregation <code>formElements</code>."
				},
				{
					"name": "setExpandable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bExpandable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>expandable</code>"
						}
					],
					"description": "Sets a new value for property <code>expandable</code>.\n\nDefines if the <code>FormContainer</code> is expandable.\n<b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setExpanded",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bExpanded",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>expanded</code>"
						}
					],
					"description": "Sets a new value for property <code>expanded</code>.\n\nContainer is expanded.\n<b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "vTitle",
							"type": "sap.ui.core.Title|string",
							"optional": false,
							"description": "The title to set"
						}
					],
					"description": "Sets the aggregated <code>title</code>."
				},
				{
					"name": "setToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "oToolbar",
							"type": "sap.ui.core.Toolbar",
							"optional": false,
							"description": "The toolbar to set"
						}
					],
					"description": "Sets the aggregated <code>toolbar</code>."
				},
				{
					"name": "setVisible",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisible",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visible</code>"
						}
					],
					"description": "Sets a new value for property <code>visible</code>.\n\nIf set to <code>false</code>, the <code>FormContainer</code> is not rendered.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.FormElement",
			"basename": "FormElement",
			"resource": "sap/ui/layout/form/FormElement.js",
			"module": "sap/ui/layout/form/FormElement",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Element",
			"description": "A <code>FormElement</code> represents a row in a <code>FormContainer</code>.\nA <code>FormElement</code> is a combination of one label and different controls associated to this label.",
			"ui5-metadata": {
				"stereotype": "element",
				"properties": [
					{
						"name": "visible",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "If set to <code>false</code>, the <code>FormElement</code> is not rendered.",
						"methods": [
							"getVisible",
							"setVisible"
						]
					}
				],
				"aggregations": [
					{
						"name": "label",
						"singularName": "label",
						"type": "sap.ui.core.Label",
						"altTypes": [
							"string"
						],
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Label of the fields. Can either be a <code>Label</code> object, or a string.\nIf a <code>Label</code> object is used, the properties of the <code>Label</code> can be set.\nIf no assignment between <code>Label</code> and the fields is set, it will be done automatically by the\n<code>FormElement</code>. In this case the <code>Label</code> is assigned to the fields of the <code>FormElement</code>.",
						"methods": [
							"getLabel",
							"destroyLabel",
							"setLabel"
						]
					},
					{
						"name": "fields",
						"singularName": "field",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Formular controls that belong together to be displayed in one row of a <code>Form</code>.\n\n<b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support.",
						"methods": [
							"getFields",
							"destroyFields",
							"insertField",
							"addField",
							"removeField",
							"indexOfField",
							"removeAllFields"
						]
					}
				],
				"defaultAggregation": "fields"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.FormElement.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addField",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oField",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the field to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some field to the aggregation <code>fields</code>."
				},
				{
					"name": "destroyFields",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the fields in the aggregation <code>fields</code>."
				},
				{
					"name": "destroyLabel",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the label in the aggregation <code>label</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}."
				},
				{
					"name": "getFields",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>fields</code>.\n\nFormular controls that belong together to be displayed in one row of a <code>Form</code>.\n\n<b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support."
				},
				{
					"name": "getLabel",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Label|string"
					},
					"description": "Gets content of aggregation <code>label</code>.\n\nLabel of the fields. Can either be a <code>Label</code> object, or a string.\nIf a <code>Label</code> object is used, the properties of the <code>Label</code> can be set.\nIf no assignment between <code>Label</code> and the fields is set, it will be done automatically by the\n<code>FormElement</code>. In this case the <code>Label</code> is assigned to the fields of the <code>FormElement</code>."
				},
				{
					"name": "getLabelControl",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Label",
						"description": "<code>Label</code> control used to render the label"
					},
					"description": "Returns the <code>Label</code> of the <code>FormElement</code>, even if the <code>Label</code> is assigned as string.\nThe <code>FormLayout</code> needs the information of the label to render the <code>Form</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.FormElement."
				},
				{
					"name": "getVisible",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visible</code>"
					},
					"description": "Gets current value of property <code>visible</code>.\n\nIf set to <code>false</code>, the <code>FormElement</code> is not rendered.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "indexOfField",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oField",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The field whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>fields</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertField",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oField",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the field to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the field should be inserted at; for\n             a negative value of <code>iIndex</code>, the field is inserted at position 0; for a value\n             greater than the current size of the aggregation, the field is inserted at\n             the last position"
						}
					],
					"description": "Inserts a field into the aggregation <code>fields</code>."
				},
				{
					"name": "removeAllFields",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>fields</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeField",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed field or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vField",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The fieldto remove or its index or id"
						}
					],
					"description": "Removes a field from the aggregation <code>fields</code>."
				},
				{
					"name": "setLabel",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "vLabel",
							"type": "sap.ui.core.Label|string",
							"optional": false,
							"description": "The label to set"
						}
					],
					"description": "Sets the aggregated <code>label</code>."
				},
				{
					"name": "setVisible",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormElement",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisible",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visible</code>"
						}
					],
					"description": "Sets a new value for property <code>visible</code>.\n\nIf set to <code>false</code>, the <code>FormElement</code> is not rendered.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.FormLayout",
			"basename": "FormLayout",
			"resource": "sap/ui/layout/form/FormLayout.js",
			"module": "sap/ui/layout/form/FormLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "Base layout to render a <code>Form</code>.\nOther layouts to render a <code>Form</code> must inherit from this one.\n<b>Note:</b> This control must not be used to render a <code>Form</code> in productive applications as it does not fulfill any\ndesign guidelines and usability standards.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "backgroundDesign",
						"type": "sap.ui.layout.BackgroundDesign",
						"defaultValue": "Translucent",
						"group": "Appearance",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Specifies the background color of the <code>Form</code> content.\n\nThe visualization of the different options depends on the used theme.",
						"methods": [
							"getBackgroundDesign",
							"setBackgroundDesign"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.FormLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getBackgroundDesign",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BackgroundDesign",
						"description": "Value of property <code>backgroundDesign</code>"
					},
					"since": "1.36.0",
					"description": "Gets current value of property <code>backgroundDesign</code>.\n\nSpecifies the background color of the <code>Form</code> content.\n\nThe visualization of the different options depends on the used theme.\n\nDefault value is <code>Translucent</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.FormLayout."
				},
				{
					"name": "setBackgroundDesign",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.FormLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "sBackgroundDesign",
							"type": "sap.ui.layout.BackgroundDesign",
							"optional": false,
							"description": "New value for property <code>backgroundDesign</code>"
						}
					],
					"description": "Sets a new value for property <code>backgroundDesign</code>.\n\nSpecifies the background color of the <code>Form</code> content.\n\nThe visualization of the different options depends on the used theme.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Translucent</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.GridContainerData",
			"basename": "GridContainerData",
			"resource": "sap/ui/layout/form/GridContainerData.js",
			"module": "sap/ui/layout/form/GridContainerData",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.LayoutData",
			"description": "<code>GridLayout</code>-specific properties for <code>FormContainers</code>.",
			"ui5-metadata": {
				"properties": [
					{
						"name": "halfGrid",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "If set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.",
						"methods": [
							"getHalfGrid",
							"setHalfGrid"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.GridContainerData.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}."
				},
				{
					"name": "getHalfGrid",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>halfGrid</code>"
					},
					"description": "Gets current value of property <code>halfGrid</code>.\n\nIf set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.GridContainerData."
				},
				{
					"name": "setHalfGrid",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.GridContainerData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bHalfGrid",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>halfGrid</code>"
						}
					],
					"description": "Sets a new value for property <code>halfGrid</code>.\n\nIf set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).\nIf the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				}
			]
		},
		{
			"kind": "namespace",
			"name": "sap.ui.layout.form.GridElementCells",
			"basename": "GridElementCells",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"description": "A string that defines the number of used cells in a <code>GridLayout</code>. This can be a number from 1 to 16, \"auto\" or \"full\".\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect."
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.GridElementData",
			"basename": "GridElementData",
			"resource": "sap/ui/layout/form/GridElementData.js",
			"module": "sap/ui/layout/form/GridElementData",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.LayoutData",
			"description": "The <code>GridLayout</code>-specific layout data for <code>FormElement</code> fields.",
			"ui5-metadata": {
				"properties": [
					{
						"name": "hCells",
						"type": "sap.ui.layout.form.GridElementCells",
						"defaultValue": "auto",
						"group": "Appearance",
						"visibility": "public",
						"description": "Number of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.",
						"methods": [
							"getHCells",
							"setHCells"
						]
					},
					{
						"name": "vCells",
						"type": "int",
						"defaultValue": 1,
						"group": "Appearance",
						"visibility": "public",
						"description": "Number of cells in vertical direction.\n<b>Note:</b> This property has no effect for labels.",
						"methods": [
							"getVCells",
							"setVCells"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.GridElementData.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}."
				},
				{
					"name": "getHCells",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.GridElementCells",
						"description": "Value of property <code>hCells</code>"
					},
					"description": "Gets current value of property <code>hCells</code>.\n\nNumber of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.\n\nDefault value is <code>auto</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.GridElementData."
				},
				{
					"name": "getVCells",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>vCells</code>"
					},
					"description": "Gets current value of property <code>vCells</code>.\n\nNumber of cells in vertical direction.\n<b>Note:</b> This property has no effect for labels.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setHCells",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.GridElementData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sHCells",
							"type": "sap.ui.layout.form.GridElementCells",
							"optional": false,
							"description": "New value for property <code>hCells</code>"
						}
					],
					"description": "Sets a new value for property <code>hCells</code>.\n\nNumber of cells in horizontal direction.\nIf set to \"auto\" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.\nIf set to \"full\" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>auto</code>."
				},
				{
					"name": "setVCells",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.GridElementData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iVCells",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>vCells</code>"
						}
					],
					"description": "Sets a new value for property <code>vCells</code>.\n\nNumber of cells in vertical direction.\n<b>Note:</b> This property has no effect for labels.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.GridLayout",
			"basename": "GridLayout",
			"resource": "sap/ui/layout/form/GridLayout.js",
			"module": "sap/ui/layout/form/GridLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.layout.form.FormLayout",
			"description": "This <code>FormLayout</code> renders a <code>Form</code> using a HTML-table based grid.\nThis can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the <code>Form</code>.\nOnly the width of the single grid columns depends on the available width.\n\nTo adjust the appearance inside the <code>GridLayout</code>, you can use <code>GridContainerData</code> for <code>FormContainers</code>\nand <code>GridElementData</code> for content fields.\n\n<b>Note:</b> If content fields have a <code>width</code> property this will be ignored, as the width of the controls is set by the grid cells.\n\nThis control cannot be used stand alone, it only renders a <code>Form</code>, so it must be assigned to a <code>Form</code>.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "singleColumn",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "If set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.",
						"methods": [
							"getSingleColumn",
							"setSingleColumn"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.GridLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.GridLayout."
				},
				{
					"name": "getSingleColumn",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>singleColumn</code>"
					},
					"description": "Gets current value of property <code>singleColumn</code>.\n\nIf set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setSingleColumn",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.GridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bSingleColumn",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>singleColumn</code>"
						}
					],
					"description": "Sets a new value for property <code>singleColumn</code>.\n\nIf set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.\n\nIf not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.ResponsiveGridLayout",
			"basename": "ResponsiveGridLayout",
			"resource": "sap/ui/layout/form/ResponsiveGridLayout.js",
			"module": "sap/ui/layout/form/ResponsiveGridLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.layout.form.FormLayout",
			"description": "Renders a <code>Form</code> using a responsive grid. Internally the <code>Grid</code> control is used for rendering.\nUsing this layout, the <code>Form</code> is rendered in a responsive way.\nDepending on the available space, the <code>FormContainers</code> are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.\nThis behavior can be influenced by the properties of this layout control.\n\nOn the <code>FormContainers</code>, labels and content fields, <code>GridData</code> can be used to change the default rendering.\n<code>GridData</code> is not supported for <code>FormElements</code>.\n\n<b>Note:</b> If <code>GridData</code> is used, this may result in a much more complex layout than the default one.\nThis means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>GridData</code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used standalone, it only renders a <code>Form</code>, so it must be assigned to a <code>Form</code>.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "labelSpanXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Default span for labels in extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.",
						"methods": [
							"getLabelSpanXL",
							"setLabelSpanXL"
						]
					},
					{
						"name": "labelSpanL",
						"type": "int",
						"defaultValue": 4,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.",
						"methods": [
							"getLabelSpanL",
							"setLabelSpanL"
						]
					},
					{
						"name": "labelSpanM",
						"type": "int",
						"defaultValue": 2,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.",
						"methods": [
							"getLabelSpanM",
							"setLabelSpanM"
						]
					},
					{
						"name": "labelSpanS",
						"type": "int",
						"defaultValue": 12,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in small size.",
						"methods": [
							"getLabelSpanS",
							"setLabelSpanS"
						]
					},
					{
						"name": "adjustLabelSpan",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.",
						"methods": [
							"getAdjustLabelSpan",
							"setAdjustLabelSpan"
						]
					},
					{
						"name": "emptySpanXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Number of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.",
						"methods": [
							"getEmptySpanXL",
							"setEmptySpanXL"
						]
					},
					{
						"name": "emptySpanL",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on large size.",
						"methods": [
							"getEmptySpanL",
							"setEmptySpanL"
						]
					},
					{
						"name": "emptySpanM",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on medium size.",
						"methods": [
							"getEmptySpanM",
							"setEmptySpanM"
						]
					},
					{
						"name": "emptySpanS",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on small size.",
						"methods": [
							"getEmptySpanS",
							"setEmptySpanS"
						]
					},
					{
						"name": "columnsXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Number of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).",
						"methods": [
							"getColumnsXL",
							"setColumnsXL"
						]
					},
					{
						"name": "columnsL",
						"type": "int",
						"defaultValue": 2,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.",
						"methods": [
							"getColumnsL",
							"setColumnsL"
						]
					},
					{
						"name": "columnsM",
						"type": "int",
						"defaultValue": 1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of columns for medium size.",
						"methods": [
							"getColumnsM",
							"setColumnsM"
						]
					},
					{
						"name": "singleContainerFullSize",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.",
						"methods": [
							"getSingleContainerFullSize",
							"setSingleContainerFullSize"
						]
					},
					{
						"name": "breakpointXL",
						"type": "int",
						"defaultValue": 1440,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Breakpoint (in pixel) between large size and extra large (XL) size.",
						"methods": [
							"getBreakpointXL",
							"setBreakpointXL"
						]
					},
					{
						"name": "breakpointL",
						"type": "int",
						"defaultValue": 1024,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Breakpoint (in pixel) between Medium size and Large size.",
						"methods": [
							"getBreakpointL",
							"setBreakpointL"
						]
					},
					{
						"name": "breakpointM",
						"type": "int",
						"defaultValue": 600,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Breakpoint (in pixel) between Small size and Medium size.",
						"methods": [
							"getBreakpointM",
							"setBreakpointM"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout</code>.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}."
				},
				{
					"name": "getAdjustLabelSpan",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>adjustLabelSpan</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>adjustLabelSpan</code>.\n\nIf set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getBreakpointL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>breakpointL</code>.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nDefault value is <code>1024</code>."
				},
				{
					"name": "getBreakpointM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>breakpointM</code>.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nDefault value is <code>600</code>."
				},
				{
					"name": "getBreakpointXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>breakpointXL</code>.\n\nBreakpoint (in pixel) between large size and extra large (XL) size.\n\nDefault value is <code>1440</code>."
				},
				{
					"name": "getColumnsL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>columnsL</code>.\n\nNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "getColumnsM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>columnsM</code>.\n\nNumber of columns for medium size.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "getColumnsXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>columnsXL</code>.\n\nNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getEmptySpanL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanL</code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanM</code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanS</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanS</code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>emptySpanXL</code>.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getLabelSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanL</code>.\n\nDefault span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.\n\nDefault value is <code>4</code>."
				},
				{
					"name": "getLabelSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanM</code>.\n\nDefault span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "getLabelSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanS</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanS</code>.\n\nDefault span for labels in small size.\n\nDefault value is <code>12</code>."
				},
				{
					"name": "getLabelSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>labelSpanXL</code>.\n\nDefault span for labels in extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.ResponsiveGridLayout."
				},
				{
					"name": "getSingleContainerFullSize",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>singleContainerFullSize</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>singleContainerFullSize</code>.\n\nIf the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setAdjustLabelSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "bAdjustLabelSpan",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>adjustLabelSpan</code>"
						}
					],
					"description": "Sets a new value for property <code>adjustLabelSpan</code>.\n\nIf set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setBreakpointL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iBreakpointL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointL</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointL</code>.\n\nBreakpoint (in pixel) between Medium size and Large size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1024</code>."
				},
				{
					"name": "setBreakpointM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iBreakpointM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointM</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointM</code>.\n\nBreakpoint (in pixel) between Small size and Medium size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>600</code>."
				},
				{
					"name": "setBreakpointXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iBreakpointXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointXL</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointXL</code>.\n\nBreakpoint (in pixel) between large size and extra large (XL) size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1440</code>."
				},
				{
					"name": "setColumnsL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iColumnsL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsL</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsL</code>.\n\nNumber of columns for large size.\n\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "setColumnsM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iColumnsM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsM</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsM</code>.\n\nNumber of columns for medium size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setColumnsXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iColumnsXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsXL</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsXL</code>.\n\nNumber of columns for extra large size.\n\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setEmptySpanL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanL</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanL</code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanM</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanM</code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanS</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanS</code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iEmptySpanXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanXL</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanXL</code>.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setLabelSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanL</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanL</code>.\n\nDefault span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>4</code>."
				},
				{
					"name": "setLabelSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanM</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanM</code>.\n\nDefault span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "setLabelSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanS</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanS</code>.\n\nDefault span for labels in small size.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>12</code>."
				},
				{
					"name": "setLabelSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iLabelSpanXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanXL</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanXL</code>.\n\nDefault span for labels in extra large size.\n\n<b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setSingleContainerFullSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.ResponsiveGridLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "bSingleContainerFullSize",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>singleContainerFullSize</code>"
						}
					],
					"description": "Sets a new value for property <code>singleContainerFullSize</code>.\n\nIf the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.ResponsiveLayout",
			"basename": "ResponsiveLayout",
			"resource": "sap/ui/layout/form/ResponsiveLayout.js",
			"module": "sap/ui/layout/form/ResponsiveLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.layout.form.FormLayout",
			"description": "Renders a <code>Form</code> with a responsive layout. Internally the <code>ResponsiveFlowLayout</code> is used.\nThe responsiveness of this layout tries to best use the available space. This means that the order of the <code>FormContainers</code>, labels and fields depends on the available space.\n\nOn the <code>FormContainers</code>, <code>FormElements</code>, labels and content fields, <code>ResponsiveFlowLayoutData</code> can be used to change the default rendering.\n\nWe suggest using the <code>ResponsiveGridLayout</code> instead of this layout because this is easier to consume and brings more stable responsive output.\n\n<b>Note:</b> If <code>ResponsiveFlowLayoutData</code> are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.\nIn such cases, <code>ResponsiveFlowLayoutData</code> should be used for all content controls to disable the default behavior.\n\nThis control cannot be used stand alone, it only renders a <code>Form</code>, so it must be assigned to a <code>Form</code>.",
			"ui5-metadata": {
				"stereotype": "control"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.ResponsiveLayout."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.ResponsiveLayout."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.form.SimpleForm",
			"basename": "SimpleForm",
			"resource": "sap/ui/layout/form/SimpleForm.js",
			"module": "sap/ui/layout/form/SimpleForm",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "The <code>SimpleForm</code> provides an easy-to-use API to create simple forms.\nInside a <code>SimpleForm</code>, a <code>Form</code> control is created along with its <code>FormContainers</code> and <code>FormElements</code>, but the complexity in the API is removed.\n<ul>\n<li>A new title starts a new group (<code>FormContainer</code>) in the form.</li>\n<li>A new label starts a new row (<code>FormElement</code>) in the form.</li>\n<li>All other controls will be assigned to the row (<code>FormElement</code>) started with the last label.</li>\n</ul>\nUse <code>LayoutData</code> to influence the layout for special cases in the Input/Display controls.\n<b>Note:</b> If a more complex form is needed, use <code>Form</code> instead.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "maxContainerCols",
						"type": "int",
						"defaultValue": 2,
						"group": "Appearance",
						"visibility": "public",
						"description": "The maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.\n<b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.",
						"methods": [
							"getMaxContainerCols",
							"setMaxContainerCols"
						]
					},
					{
						"name": "minWidth",
						"type": "int",
						"defaultValue": -1,
						"group": "Appearance",
						"visibility": "public",
						"description": "The overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.",
						"methods": [
							"getMinWidth",
							"setMinWidth"
						]
					},
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": null,
						"group": "Dimension",
						"visibility": "public",
						"since": "1.28.0",
						"description": "Width of the form.",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "editable",
						"type": "boolean",
						"defaultValue": null,
						"group": "Misc",
						"visibility": "public",
						"description": "Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.",
						"methods": [
							"getEditable",
							"setEditable"
						]
					},
					{
						"name": "labelMinWidth",
						"type": "int",
						"defaultValue": 192,
						"group": "Misc",
						"visibility": "public",
						"description": "Specifies the min-width in pixels of the label in all form containers.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.",
						"methods": [
							"getLabelMinWidth",
							"setLabelMinWidth"
						]
					},
					{
						"name": "layout",
						"type": "sap.ui.layout.form.SimpleFormLayout",
						"defaultValue": "ResponsiveLayout",
						"group": "Misc",
						"visibility": "public",
						"description": "The <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.\nWe suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.",
						"methods": [
							"getLayout",
							"setLayout"
						]
					},
					{
						"name": "labelSpanXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Default span for labels in extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).",
						"methods": [
							"getLabelSpanXL",
							"setLabelSpanXL"
						]
					},
					{
						"name": "labelSpanL",
						"type": "int",
						"defaultValue": 4,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getLabelSpanL",
							"setLabelSpanL"
						]
					},
					{
						"name": "labelSpanM",
						"type": "int",
						"defaultValue": 2,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getLabelSpanM",
							"setLabelSpanM"
						]
					},
					{
						"name": "labelSpanS",
						"type": "int",
						"defaultValue": 12,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Default span for labels in small size.\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getLabelSpanS",
							"setLabelSpanS"
						]
					},
					{
						"name": "adjustLabelSpan",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getAdjustLabelSpan",
							"setAdjustLabelSpan"
						]
					},
					{
						"name": "emptySpanXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Number of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).",
						"methods": [
							"getEmptySpanXL",
							"setEmptySpanXL"
						]
					},
					{
						"name": "emptySpanL",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getEmptySpanL",
							"setEmptySpanL"
						]
					},
					{
						"name": "emptySpanM",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getEmptySpanM",
							"setEmptySpanM"
						]
					},
					{
						"name": "emptySpanS",
						"type": "int",
						"defaultValue": 0,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Number of grid cells that are empty at the end of each line on small size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getEmptySpanS",
							"setEmptySpanS"
						]
					},
					{
						"name": "columnsXL",
						"type": "int",
						"defaultValue": -1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Form columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).",
						"methods": [
							"getColumnsXL",
							"setColumnsXL"
						]
					},
					{
						"name": "columnsL",
						"type": "int",
						"defaultValue": 2,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Form columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getColumnsL",
							"setColumnsL"
						]
					},
					{
						"name": "columnsM",
						"type": "int",
						"defaultValue": 1,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Form columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getColumnsM",
							"setColumnsM"
						]
					},
					{
						"name": "singleContainerFullSize",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getSingleContainerFullSize",
							"setSingleContainerFullSize"
						]
					},
					{
						"name": "breakpointXL",
						"type": "int",
						"defaultValue": 1440,
						"group": "Misc",
						"visibility": "public",
						"since": "1.34.0",
						"description": "Breakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getBreakpointXL",
							"setBreakpointXL"
						]
					},
					{
						"name": "breakpointL",
						"type": "int",
						"defaultValue": 1024,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Breakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getBreakpointL",
							"setBreakpointL"
						]
					},
					{
						"name": "breakpointM",
						"type": "int",
						"defaultValue": 600,
						"group": "Misc",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Breakpoint between Small size and Medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.",
						"methods": [
							"getBreakpointM",
							"setBreakpointM"
						]
					},
					{
						"name": "backgroundDesign",
						"type": "sap.ui.layout.BackgroundDesign",
						"defaultValue": "Translucent",
						"group": "Appearance",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Specifies the background color of the <code>SimpleForm</code> content.\n\nThe visualization of the different options depends on the used theme.",
						"methods": [
							"getBackgroundDesign",
							"setBackgroundDesign"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Element",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The content of the form is structured in the following way:\n<ul>\n<li>Add a <code>Title</code> or <code>Toolbar</code> control to start a new group (<code>FormContainer</code>).</li>\n<li>Add a <code>Label</code> control to start a new row (<code>FormElement</code>).</li>\n<li>Add controls as input fields, text fields or other as needed.</li>\n<li>Use <code>LayoutData</code> to influence the layout for special cases in the single controls.\nFor example, if a <code>ResponsiveLayout</code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.\nIf your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData</code> to them via <code>setLayoutData</code> method.\nEnsure that the sum of the weights in the <code>ResponsiveFlowLayoutData</code> is not more than 5, as this is the total width of the input control part of each form row.</li>\n</ul>\nExample for a row where the <code>TextField</code> takes 4 and the <code>TextView</code> takes 1 weight (using <code>ResponsiveLayout</code>):\n<pre>\nnew sap.ui.commons.Label({text:\"Label\"});\nnew sap.ui.commons.TextField({value:\"Weight 4\",\nlayoutData:new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),\nnew sap.ui.commons.TextView({text:\"Weight 1\",\nlayoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),\n</pre>\n\n<b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support.",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					},
					{
						"name": "form",
						"singularName": "form",
						"type": "sap.ui.layout.form.Form",
						"cardinality": "0..1",
						"visibility": "hidden",
						"description": "Hidden, for internal use only.",
						"methods": [
							"getForm",
							"destroyForm",
							"setForm"
						]
					},
					{
						"name": "title",
						"singularName": "title",
						"type": "sap.ui.core.Title",
						"altTypes": [
							"string"
						],
						"cardinality": "0..1",
						"visibility": "public",
						"since": "1.16.3",
						"description": "Title element of the <code>SimpleForm</code>. Can either be a <code>Title</code> control, or a string.",
						"methods": [
							"getTitle",
							"destroyTitle",
							"setTitle"
						]
					},
					{
						"name": "toolbar",
						"singularName": "toolbar",
						"type": "sap.ui.core.Toolbar",
						"cardinality": "0..1",
						"visibility": "public",
						"since": "1.36.0",
						"description": "Toolbar of the <code>SimpleForm</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.",
						"methods": [
							"getToolbar",
							"destroyToolbar",
							"setToolbar"
						]
					}
				],
				"defaultAggregation": "content",
				"associations": [
					{
						"name": "ariaLabelledBy",
						"singularName": "ariaLabelledBy",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"since": "1.32.0",
						"description": "Association to controls / IDs which label this control (see WAI-ARIA attribute aria-labelledby).",
						"methods": [
							"getAriaLabelledBy",
							"addAriaLabelledBy",
							"removeAriaLabelledBy",
							"removeAllAriaLabelledBy"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new sap.ui.layout.form.SimpleForm.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.32.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "string|sap.ui.core.Control",
							"optional": false,
							"description": "the ariaLabelledBy to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "destroyTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"description": "Destroys the title in the aggregation <code>title</code>."
				},
				{
					"name": "destroyToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"description": "Destroys the toolbar in the aggregation <code>toolbar</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAdjustLabelSpan",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>adjustLabelSpan</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>adjustLabelSpan</code>.\n\nIf set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"since": "1.32.0",
					"description": "Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "getBackgroundDesign",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.BackgroundDesign",
						"description": "Value of property <code>backgroundDesign</code>"
					},
					"since": "1.36.0",
					"description": "Gets current value of property <code>backgroundDesign</code>.\n\nSpecifies the background color of the <code>SimpleForm</code> content.\n\nThe visualization of the different options depends on the used theme.\n\nDefault value is <code>Translucent</code>."
				},
				{
					"name": "getBreakpointL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>breakpointL</code>.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>1024</code>."
				},
				{
					"name": "getBreakpointM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>breakpointM</code>.\n\nBreakpoint between Small size and Medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>600</code>."
				},
				{
					"name": "getBreakpointXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>breakpointXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>breakpointXL</code>.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>1440</code>."
				},
				{
					"name": "getColumnsL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>columnsL</code>.\n\nForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "getColumnsM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>columnsM</code>.\n\nForm columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "getColumnsXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>columnsXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>columnsXL</code>.\n\nForm columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nThe content of the form is structured in the following way:\n<ul>\n<li>Add a <code>Title</code> or <code>Toolbar</code> control to start a new group (<code>FormContainer</code>).</li>\n<li>Add a <code>Label</code> control to start a new row (<code>FormElement</code>).</li>\n<li>Add controls as input fields, text fields or other as needed.</li>\n<li>Use <code>LayoutData</code> to influence the layout for special cases in the single controls.\nFor example, if a <code>ResponsiveLayout</code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.\nIf your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData</code> to them via <code>setLayoutData</code> method.\nEnsure that the sum of the weights in the <code>ResponsiveFlowLayoutData</code> is not more than 5, as this is the total width of the input control part of each form row.</li>\n</ul>\nExample for a row where the <code>TextField</code> takes 4 and the <code>TextView</code> takes 1 weight (using <code>ResponsiveLayout</code>):\n<pre>\nnew sap.ui.commons.Label({text:\"Label\"});\nnew sap.ui.commons.TextField({value:\"Weight 4\",\nlayoutData:new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),\nnew sap.ui.commons.TextView({text:\"Weight 1\",\nlayoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),\n</pre>\n\n<b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,\nkeyboard support and screen-reader support."
				},
				{
					"name": "getEditable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>editable</code>"
					},
					"description": "Gets current value of property <code>editable</code>.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content."
				},
				{
					"name": "getEmptySpanL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanL</code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanM</code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanS</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>emptySpanS</code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getEmptySpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>emptySpanXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>emptySpanXL</code>.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getLabelMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelMinWidth</code>"
					},
					"description": "Gets current value of property <code>labelMinWidth</code>.\n\nSpecifies the min-width in pixels of the label in all form containers.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.\n\nDefault value is <code>192</code>."
				},
				{
					"name": "getLabelSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanL</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanL</code>.\n\nDefault span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>4</code>."
				},
				{
					"name": "getLabelSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanM</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanM</code>.\n\nDefault span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "getLabelSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanS</code>"
					},
					"since": "1.16.3",
					"description": "Gets current value of property <code>labelSpanS</code>.\n\nDefault span for labels in small size.\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>12</code>."
				},
				{
					"name": "getLabelSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>labelSpanXL</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>labelSpanXL</code>.\n\nDefault span for labels in extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getLayout",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleFormLayout",
						"description": "Value of property <code>layout</code>"
					},
					"description": "Gets current value of property <code>layout</code>.\n\nThe <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.\nWe suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.\n\nDefault value is <code>ResponsiveLayout</code>."
				},
				{
					"name": "getMaxContainerCols",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>maxContainerCols</code>"
					},
					"description": "Gets current value of property <code>maxContainerCols</code>.\n\nThe maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.\n<b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.form.SimpleForm."
				},
				{
					"name": "getMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>minWidth</code>"
					},
					"description": "Gets current value of property <code>minWidth</code>.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "getSingleContainerFullSize",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>singleContainerFullSize</code>"
					},
					"since": "1.34.0",
					"description": "Gets current value of property <code>singleContainerFullSize</code>.\n\nIf the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Title|string"
					},
					"since": "1.16.3",
					"description": "Gets content of aggregation <code>title</code>.\n\nTitle element of the <code>SimpleForm</code>. Can either be a <code>Title</code> control, or a string."
				},
				{
					"name": "getToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Toolbar"
					},
					"since": "1.36.0",
					"description": "Gets content of aggregation <code>toolbar</code>.\n\nToolbar of the <code>SimpleForm</code>.\n\n<b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.\nIf a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.\nIn this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"since": "1.28.0",
					"description": "Gets current value of property <code>width</code>.\n\nWidth of the form."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"since": "1.32.0",
					"description": "Removes all the controls in the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "the removed ariaLabelledBy or <code>null</code>"
					},
					"since": "1.32.0",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The ariaLabelledByto be removed or its index or ID"
						}
					],
					"description": "Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.core.Element",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setAdjustLabelSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "bAdjustLabelSpan",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>adjustLabelSpan</code>"
						}
					],
					"description": "Sets a new value for property <code>adjustLabelSpan</code>.\n\nIf set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.\nIf only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.\nThis is the same for medium and large <code>Forms</code>.\nThis is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>\n(because every <code>FormContainer</code> has its own grid inside).\n\nIf not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.\nThe number of <code>FormContainers</code> doesn't matter in this case.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setBackgroundDesign",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "sBackgroundDesign",
							"type": "sap.ui.layout.BackgroundDesign",
							"optional": false,
							"description": "New value for property <code>backgroundDesign</code>"
						}
					],
					"description": "Sets a new value for property <code>backgroundDesign</code>.\n\nSpecifies the background color of the <code>SimpleForm</code> content.\n\nThe visualization of the different options depends on the used theme.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Translucent</code>."
				},
				{
					"name": "setBreakpointL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iBreakpointL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointL</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointL</code>.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1024</code>."
				},
				{
					"name": "setBreakpointM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iBreakpointM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointM</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointM</code>.\n\nBreakpoint between Small size and Medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>600</code>."
				},
				{
					"name": "setBreakpointXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iBreakpointXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>breakpointXL</code>"
						}
					],
					"description": "Sets a new value for property <code>breakpointXL</code>.\n\nBreakpoint between Medium size and Large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1440</code>."
				},
				{
					"name": "setColumnsL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iColumnsL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsL</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsL</code>.\n\nForm columns for large size.\nThe number of columns for large size must not be smaller than the number of columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "setColumnsM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iColumnsM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsM</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsM</code>.\n\nForm columns for medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setColumnsXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iColumnsXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>columnsXL</code>"
						}
					],
					"description": "Sets a new value for property <code>columnsXL</code>.\n\nForm columns for extra large size.\nThe number of columns for extra large size must not be smaller than the number of columns for large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setEditable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bEditable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>editable</code>"
						}
					],
					"description": "Sets a new value for property <code>editable</code>.\n\nApplies a device-specific and theme-specific line-height to the form rows if the form has editable content.\nIf set, all (not only the editable) rows of the form will get the line height of editable fields.\nThe accessibility aria-readonly attribute is set according to this property.\n<b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setEmptySpanL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanL</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanL</code>.\n\nNumber of grid cells that are empty at the end of each line on large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanM</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanM</code>.\n\nNumber of grid cells that are empty at the end of each line on medium size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iEmptySpanS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanS</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanS</code>.\n\nNumber of grid cells that are empty at the end of each line on small size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setEmptySpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iEmptySpanXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>emptySpanXL</code>"
						}
					],
					"description": "Sets a new value for property <code>emptySpanXL</code>.\n\nNumber of grid cells that are empty at the end of each line on extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setLabelMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iLabelMinWidth",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelMinWidth</code>"
						}
					],
					"description": "Sets a new value for property <code>labelMinWidth</code>.\n\nSpecifies the min-width in pixels of the label in all form containers.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>192</code>."
				},
				{
					"name": "setLabelSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanL</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanL</code>.\n\nDefault span for labels in large size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>4</code>."
				},
				{
					"name": "setLabelSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanM</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanM</code>.\n\nDefault span for labels in medium size.\n\n<b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "setLabelSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "iLabelSpanS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanS</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanS</code>.\n\nDefault span for labels in small size.\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>12</code>."
				},
				{
					"name": "setLabelSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "iLabelSpanXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>labelSpanXL</code>"
						}
					],
					"description": "Sets a new value for property <code>labelSpanXL</code>.\n\nDefault span for labels in extra large size.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setLayout",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sLayout",
							"type": "sap.ui.layout.form.SimpleFormLayout",
							"optional": false,
							"description": "New value for property <code>layout</code>"
						}
					],
					"description": "Sets a new value for property <code>layout</code>.\n\nThe <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.\nWe suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>ResponsiveLayout</code>."
				},
				{
					"name": "setMaxContainerCols",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iMaxContainerCols",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>maxContainerCols</code>"
						}
					],
					"description": "Sets a new value for property <code>maxContainerCols</code>.\n\nThe maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.\n<b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>2</code>."
				},
				{
					"name": "setMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iMinWidth",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>minWidth</code>"
						}
					],
					"description": "Sets a new value for property <code>minWidth</code>.\n\nThe overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).\nThe default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.\n<b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>-1</code>."
				},
				{
					"name": "setSingleContainerFullSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.34.0",
					"parameters": [
						{
							"name": "bSingleContainerFullSize",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>singleContainerFullSize</code>"
						}
					],
					"description": "Sets a new value for property <code>singleContainerFullSize</code>.\n\nIf the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,\nthe <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.\nIn this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.\n\nIn all other cases the <code>FormContainer</code> is displayed in the size of one column.\n\n<b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setTitle",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.16.3",
					"parameters": [
						{
							"name": "vTitle",
							"type": "sap.ui.core.Title|string",
							"optional": false,
							"description": "The title to set"
						}
					],
					"description": "Sets the aggregated <code>title</code>."
				},
				{
					"name": "setToolbar",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.36.0",
					"parameters": [
						{
							"name": "oToolbar",
							"type": "sap.ui.core.Toolbar",
							"optional": false,
							"description": "The toolbar to set"
						}
					],
					"description": "Sets the aggregated <code>toolbar</code>."
				},
				{
					"name": "setWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.form.SimpleForm",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.28.0",
					"parameters": [
						{
							"name": "sWidth",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>width</code>"
						}
					],
					"description": "Sets a new value for property <code>width</code>.\n\nWidth of the form.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				}
			]
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.form.SimpleFormLayout",
			"basename": "SimpleFormLayout",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"description": "Available <code>FormLayouts</code> used to render a <code>SimpleForm</code>.",
			"properties": [
				{
					"name": "GridLayout",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Uses the <code>GridLayout</code> to render the <code>SimpleForm</code>"
				},
				{
					"name": "ResponsiveGridLayout",
					"visibility": "public",
					"static": true,
					"since": "1.16.0",
					"type": "string",
					"description": "Uses the <code>ResponsiveGridLayout</code> to render the <code>SimpleForm</code>"
				},
				{
					"name": "ResponsiveLayout",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Uses the <code>ResponsiveLayout</code> to render the <code>SimpleForm</code>"
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.Grid",
			"basename": "Grid",
			"resource": "sap/ui/layout/Grid.js",
			"module": "sap/ui/layout/Grid",
			"static": true,
			"visibility": "public",
			"since": "1.15.0",
			"extends": "sap.ui.core.Control",
			"description": "The Grid control is a layout which positions its child controls in a 12 column flow layout. Its children can be specified to take on a variable amount of columns depending on available screen size. With this control it is possible to achieve flexible layouts and line-breaks for extra large-, large-, medium- and small-sized screens, such as large desktop, desktop, tablet, and mobile. The Grid control's width can be percentage- or pixel-based and the spacing between its columns can be set to various pre-defined values.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "100%",
						"group": "Dimension",
						"visibility": "public",
						"description": "Optional. Width of the Grid. If not specified, then 100%.",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "vSpacing",
						"type": "float",
						"defaultValue": 1,
						"group": "Dimension",
						"visibility": "public",
						"description": "Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.",
						"methods": [
							"getVSpacing",
							"setVSpacing"
						]
					},
					{
						"name": "hSpacing",
						"type": "float",
						"defaultValue": 1,
						"group": "Dimension",
						"visibility": "public",
						"description": "Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.",
						"methods": [
							"getHSpacing",
							"setHSpacing"
						]
					},
					{
						"name": "position",
						"type": "sap.ui.layout.GridPosition",
						"defaultValue": "Left",
						"group": "Dimension",
						"visibility": "public",
						"description": "Optional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".",
						"methods": [
							"getPosition",
							"setPosition"
						]
					},
					{
						"name": "defaultSpan",
						"type": "sap.ui.layout.GridSpan",
						"defaultValue": "XL3 L3 M6 S12",
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.",
						"methods": [
							"getDefaultSpan",
							"setDefaultSpan"
						]
					},
					{
						"name": "defaultIndent",
						"type": "sap.ui.layout.GridIndent",
						"defaultValue": "XL0 L0 M0 S0",
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.",
						"methods": [
							"getDefaultIndent",
							"setDefaultIndent"
						]
					},
					{
						"name": "containerQuery",
						"type": "boolean",
						"defaultValue": false,
						"group": "Behavior",
						"visibility": "public",
						"description": "If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).",
						"methods": [
							"getContainerQuery",
							"setContainerQuery"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Controls that are placed into Grid layout.",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content",
				"associations": [
					{
						"name": "ariaLabelledBy",
						"singularName": "ariaLabelledBy",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"since": "1.38.32",
						"description": "Association to controls / IDs that label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).",
						"methods": [
							"getAriaLabelledBy",
							"addAriaLabelledBy",
							"removeAriaLabelledBy",
							"removeAllAriaLabelledBy"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new Grid.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.38.32",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "string|sap.ui.core.Control",
							"optional": false,
							"description": "the ariaLabelledBy to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAccessibilityInfo",
					"visibility": "protected"
				},
				{
					"name": "getAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"since": "1.38.32",
					"description": "Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "getContainerQuery",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>containerQuery</code>"
					},
					"description": "Gets current value of property <code>containerQuery</code>.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nControls that are placed into Grid layout."
				},
				{
					"name": "getDefaultIndent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridIndent",
						"description": "Value of property <code>defaultIndent</code>"
					},
					"description": "Gets current value of property <code>defaultIndent</code>.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL0 L0 M0 S0</code>."
				},
				{
					"name": "getDefaultSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridSpan",
						"description": "Value of property <code>defaultSpan</code>"
					},
					"description": "Gets current value of property <code>defaultSpan</code>.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nDefault value is <code>XL3 L3 M6 S12</code>."
				},
				{
					"name": "getHSpacing",
					"visibility": "public",
					"returnValue": {
						"type": "float",
						"description": "Value of property <code>hSpacing</code>"
					},
					"description": "Gets current value of property <code>hSpacing</code>.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.Grid."
				},
				{
					"name": "getPosition",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridPosition",
						"description": "Value of property <code>position</code>"
					},
					"description": "Gets current value of property <code>position</code>.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nDefault value is <code>Left</code>."
				},
				{
					"name": "getVSpacing",
					"visibility": "public",
					"returnValue": {
						"type": "float",
						"description": "Value of property <code>vSpacing</code>"
					},
					"description": "Gets current value of property <code>vSpacing</code>.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"since": "1.38.32",
					"description": "Removes all the controls in the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "the removed ariaLabelledBy or <code>null</code>"
					},
					"since": "1.38.32",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The ariaLabelledByto be removed or its index or ID"
						}
					],
					"description": "Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setContainerQuery",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bContainerQuery",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>containerQuery</code>"
						}
					],
					"description": "Sets a new value for property <code>containerQuery</code>.\n\nIf true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setDefaultIndent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sDefaultIndent",
							"type": "sap.ui.layout.GridIndent",
							"optional": false,
							"description": "New value for property <code>defaultIndent</code>"
						}
					],
					"description": "Sets a new value for property <code>defaultIndent</code>.\n\nOptional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>XL0 L0 M0 S0</code>."
				},
				{
					"name": "setDefaultSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sDefaultSpan",
							"type": "sap.ui.layout.GridSpan",
							"optional": false,
							"description": "New value for property <code>defaultSpan</code>"
						}
					],
					"description": "Sets a new value for property <code>defaultSpan</code>.\n\nOptional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>XL3 L3 M6 S12</code>."
				},
				{
					"name": "setHSpacing",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "fHSpacing",
							"type": "float",
							"optional": false,
							"description": "New value for property <code>hSpacing</code>"
						}
					],
					"description": "Sets a new value for property <code>hSpacing</code>.\n\nOptional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setPosition",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sPosition",
							"type": "sap.ui.layout.GridPosition",
							"optional": false,
							"description": "New value for property <code>position</code>"
						}
					],
					"description": "Sets a new value for property <code>position</code>.\n\nOptional. Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Left</code>."
				},
				{
					"name": "setVSpacing",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "fVSpacing",
							"type": "float",
							"optional": false,
							"description": "New value for property <code>vSpacing</code>"
						}
					],
					"description": "Sets a new value for property <code>vSpacing</code>.\n\nOptional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Grid",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sWidth",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>width</code>"
						}
					],
					"description": "Sets a new value for property <code>width</code>.\n\nOptional. Width of the Grid. If not specified, then 100%.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100%</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.GridData",
			"basename": "GridData",
			"resource": "sap/ui/layout/GridData.js",
			"module": "sap/ui/layout/GridData",
			"static": true,
			"visibility": "public",
			"since": "1.15.0",
			"extends": "sap.ui.core.LayoutData",
			"description": "Grid layout data",
			"ui5-metadata": {
				"properties": [
					{
						"name": "span",
						"type": "sap.ui.layout.GridSpan",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.",
						"methods": [
							"getSpan",
							"setSpan"
						]
					},
					{
						"name": "spanXL",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".",
						"methods": [
							"getSpanXL",
							"setSpanXL"
						]
					},
					{
						"name": "spanL",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".",
						"methods": [
							"getSpanL",
							"setSpanL"
						]
					},
					{
						"name": "spanM",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".",
						"methods": [
							"getSpanM",
							"setSpanM"
						]
					},
					{
						"name": "spanS",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".",
						"methods": [
							"getSpanS",
							"setSpanS"
						]
					},
					{
						"name": "indent",
						"type": "sap.ui.layout.GridIndent",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.",
						"methods": [
							"getIndent",
							"setIndent"
						]
					},
					{
						"name": "indentXL",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".",
						"methods": [
							"getIndentXL",
							"setIndentXL"
						]
					},
					{
						"name": "indentL",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".",
						"methods": [
							"getIndentL",
							"setIndentL"
						]
					},
					{
						"name": "indentM",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".",
						"methods": [
							"getIndentM",
							"setIndentM"
						]
					},
					{
						"name": "indentS",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".",
						"methods": [
							"getIndentS",
							"setIndentS"
						]
					},
					{
						"name": "visibleXL",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Defines if this Control is visible on XL - extra Large screens.",
						"methods": [
							"getVisibleXL",
							"setVisibleXL"
						]
					},
					{
						"name": "visibleL",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Defines if this Control is visible on Large screens.",
						"methods": [
							"getVisibleL",
							"setVisibleL"
						]
					},
					{
						"name": "visibleM",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Defines if this Control is visible on Medium size screens.",
						"methods": [
							"getVisibleM",
							"setVisibleM"
						]
					},
					{
						"name": "visibleS",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Defines if this Control is visible on small screens.",
						"methods": [
							"getVisibleS",
							"setVisibleS"
						]
					},
					{
						"name": "moveBackwards",
						"type": "sap.ui.layout.GridIndent",
						"defaultValue": null,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. Moves a cell backwards so many columns as specified.",
						"methods": [
							"getMoveBackwards",
							"setMoveBackwards"
						]
					},
					{
						"name": "moveForward",
						"type": "sap.ui.layout.GridIndent",
						"defaultValue": null,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. Moves a cell forwards so many columns as specified.",
						"methods": [
							"getMoveForward",
							"setMoveForward"
						]
					},
					{
						"name": "linebreak",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.",
						"methods": [
							"getLinebreak",
							"setLinebreak"
						]
					},
					{
						"name": "linebreakXL",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.",
						"methods": [
							"getLinebreakXL",
							"setLinebreakXL"
						]
					},
					{
						"name": "linebreakL",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.",
						"methods": [
							"getLinebreakL",
							"setLinebreakL"
						]
					},
					{
						"name": "linebreakM",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.",
						"methods": [
							"getLinebreakM",
							"setLinebreakM"
						]
					},
					{
						"name": "linebreakS",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.",
						"methods": [
							"getLinebreakS",
							"setLinebreakS"
						]
					},
					{
						"name": "spanLarge",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use spanL instead."
						},
						"methods": [
							"getSpanLarge",
							"setSpanLarge"
						]
					},
					{
						"name": "spanMedium",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use spanM instead."
						},
						"methods": [
							"getSpanMedium",
							"setSpanMedium"
						]
					},
					{
						"name": "spanSmall",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use spanS instead."
						},
						"methods": [
							"getSpanSmall",
							"setSpanSmall"
						]
					},
					{
						"name": "indentLarge",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use indentL instead."
						},
						"methods": [
							"getIndentLarge",
							"setIndentLarge"
						]
					},
					{
						"name": "indentMedium",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use indentM instead."
						},
						"methods": [
							"getIndentMedium",
							"setIndentMedium"
						]
					},
					{
						"name": "indentSmall",
						"type": "int",
						"defaultValue": null,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use indentS instead."
						},
						"methods": [
							"getIndentSmall",
							"setIndentSmall"
						]
					},
					{
						"name": "visibleOnLarge",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines if this Control is visible on Large screens.",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use visibleL instead."
						},
						"methods": [
							"getVisibleOnLarge",
							"setVisibleOnLarge"
						]
					},
					{
						"name": "visibleOnMedium",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines if this Control is visible on Medium size screens.",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use visibleM instead."
						},
						"methods": [
							"getVisibleOnMedium",
							"setVisibleOnMedium"
						]
					},
					{
						"name": "visibleOnSmall",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Deprecated. Defines if this Control is visible on small screens.",
						"deprecated": {
							"since": "1.17.1",
							"text": "Use visibleS instead."
						},
						"methods": [
							"getVisibleOnSmall",
							"setVisibleOnSmall"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new GridData.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}."
				},
				{
					"name": "getIndent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridIndent",
						"description": "Value of property <code>indent</code>"
					},
					"description": "Gets current value of property <code>indent</code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small."
				},
				{
					"name": "getIndentL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentL</code>"
					},
					"description": "Gets current value of property <code>indentL</code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\"."
				},
				{
					"name": "getIndentLarge",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentLarge</code>"
					},
					"description": "Gets current value of property <code>indentLarge</code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentL instead."
					}
				},
				{
					"name": "getIndentM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentM</code>"
					},
					"description": "Gets current value of property <code>indentM</code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\"."
				},
				{
					"name": "getIndentMedium",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentMedium</code>"
					},
					"description": "Gets current value of property <code>indentMedium</code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentM instead."
					}
				},
				{
					"name": "getIndentS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentS</code>"
					},
					"description": "Gets current value of property <code>indentS</code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\"."
				},
				{
					"name": "getIndentSmall",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentSmall</code>"
					},
					"description": "Gets current value of property <code>indentSmall</code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentS instead."
					}
				},
				{
					"name": "getIndentXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>indentXL</code>"
					},
					"description": "Gets current value of property <code>indentXL</code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\"."
				},
				{
					"name": "getLinebreak",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreak</code>"
					},
					"description": "Gets current value of property <code>linebreak</code>.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getLinebreakL",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreakL</code>"
					},
					"description": "Gets current value of property <code>linebreakL</code>.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getLinebreakM",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreakM</code>"
					},
					"description": "Gets current value of property <code>linebreakM</code>.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getLinebreakS",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreakS</code>"
					},
					"description": "Gets current value of property <code>linebreakS</code>.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getLinebreakXL",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreakXL</code>"
					},
					"description": "Gets current value of property <code>linebreakXL</code>.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.GridData."
				},
				{
					"name": "getMoveBackwards",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridIndent",
						"description": "Value of property <code>moveBackwards</code>"
					},
					"description": "Gets current value of property <code>moveBackwards</code>.\n\nOptional. Moves a cell backwards so many columns as specified."
				},
				{
					"name": "getMoveForward",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridIndent",
						"description": "Value of property <code>moveForward</code>"
					},
					"description": "Gets current value of property <code>moveForward</code>.\n\nOptional. Moves a cell forwards so many columns as specified."
				},
				{
					"name": "getSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridSpan",
						"description": "Value of property <code>span</code>"
					},
					"description": "Gets current value of property <code>span</code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small."
				},
				{
					"name": "getSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanL</code>"
					},
					"description": "Gets current value of property <code>spanL</code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\"."
				},
				{
					"name": "getSpanLarge",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanLarge</code>"
					},
					"description": "Gets current value of property <code>spanLarge</code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanL instead."
					}
				},
				{
					"name": "getSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanM</code>"
					},
					"description": "Gets current value of property <code>spanM</code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\"."
				},
				{
					"name": "getSpanMedium",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanMedium</code>"
					},
					"description": "Gets current value of property <code>spanMedium</code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanM instead."
					}
				},
				{
					"name": "getSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanS</code>"
					},
					"description": "Gets current value of property <code>spanS</code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\"."
				},
				{
					"name": "getSpanSmall",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanSmall</code>"
					},
					"description": "Gets current value of property <code>spanSmall</code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanS instead."
					}
				},
				{
					"name": "getSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>spanXL</code>"
					},
					"description": "Gets current value of property <code>spanXL</code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\"."
				},
				{
					"name": "getVisibleL",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleL</code>"
					},
					"description": "Gets current value of property <code>visibleL</code>.\n\nDefines if this Control is visible on Large screens.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getVisibleM",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleM</code>"
					},
					"description": "Gets current value of property <code>visibleM</code>.\n\nDefines if this Control is visible on Medium size screens.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getVisibleOnLarge",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleOnLarge</code>"
					},
					"description": "Gets current value of property <code>visibleOnLarge</code>.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleL instead."
					}
				},
				{
					"name": "getVisibleOnMedium",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleOnMedium</code>"
					},
					"description": "Gets current value of property <code>visibleOnMedium</code>.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleM instead."
					}
				},
				{
					"name": "getVisibleOnSmall",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleOnSmall</code>"
					},
					"description": "Gets current value of property <code>visibleOnSmall</code>.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleS instead."
					}
				},
				{
					"name": "getVisibleS",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleS</code>"
					},
					"description": "Gets current value of property <code>visibleS</code>.\n\nDefines if this Control is visible on small screens.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getVisibleXL",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>visibleXL</code>"
					},
					"description": "Gets current value of property <code>visibleXL</code>.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setIndent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sIndent",
							"type": "sap.ui.layout.GridIndent",
							"optional": false,
							"description": "New value for property <code>indent</code>"
						}
					],
					"description": "Sets a new value for property <code>indent</code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setIndentL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentL</code>"
						}
					],
					"description": "Sets a new value for property <code>indentL</code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setIndentLarge",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentLarge",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentLarge</code>"
						}
					],
					"description": "Sets a new value for property <code>indentLarge</code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentL instead."
					}
				},
				{
					"name": "setIndentM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentM</code>"
						}
					],
					"description": "Sets a new value for property <code>indentM</code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setIndentMedium",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentMedium",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentMedium</code>"
						}
					],
					"description": "Sets a new value for property <code>indentMedium</code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentM instead."
					}
				},
				{
					"name": "setIndentS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentS</code>"
						}
					],
					"description": "Sets a new value for property <code>indentS</code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setIndentSmall",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentSmall",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentSmall</code>"
						}
					],
					"description": "Sets a new value for property <code>indentSmall</code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use indentS instead."
					}
				},
				{
					"name": "setIndentXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iIndentXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>indentXL</code>"
						}
					],
					"description": "Sets a new value for property <code>indentXL</code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"indent\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setLinebreak",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreak",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreak</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreak</code>.\n\nOptional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLinebreakL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreakL",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreakL</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreakL</code>.\n\nOptional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLinebreakM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreakM",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreakM</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreakM</code>.\n\nOptional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLinebreakS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreakS",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreakS</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreakS</code>.\n\nOptional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLinebreakXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreakXL",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreakXL</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreakXL</code>.\n\nOptional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setMoveBackwards",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sMoveBackwards",
							"type": "sap.ui.layout.GridIndent",
							"optional": false,
							"description": "New value for property <code>moveBackwards</code>"
						}
					],
					"description": "Sets a new value for property <code>moveBackwards</code>.\n\nOptional. Moves a cell backwards so many columns as specified.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setMoveForward",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sMoveForward",
							"type": "sap.ui.layout.GridIndent",
							"optional": false,
							"description": "New value for property <code>moveForward</code>"
						}
					],
					"description": "Sets a new value for property <code>moveForward</code>.\n\nOptional. Moves a cell forwards so many columns as specified.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setSpan",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sSpan",
							"type": "sap.ui.layout.GridSpan",
							"optional": false,
							"description": "New value for property <code>span</code>"
						}
					],
					"description": "Sets a new value for property <code>span</code>.\n\nA string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters has to be provided in the order large medium small.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setSpanL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanL</code>"
						}
					],
					"description": "Sets a new value for property <code>spanL</code>.\n\nOptional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setSpanLarge",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanLarge",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanLarge</code>"
						}
					],
					"description": "Sets a new value for property <code>spanLarge</code>.\n\nDeprecated. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanL instead."
					}
				},
				{
					"name": "setSpanM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanM",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanM</code>"
						}
					],
					"description": "Sets a new value for property <code>spanM</code>.\n\nOptional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setSpanMedium",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanMedium",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanMedium</code>"
						}
					],
					"description": "Sets a new value for property <code>spanMedium</code>.\n\nDeprecated. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanM instead."
					}
				},
				{
					"name": "setSpanS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanS",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanS</code>"
						}
					],
					"description": "Sets a new value for property <code>spanS</code>.\n\nOptional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setSpanSmall",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanSmall",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanSmall</code>"
						}
					],
					"description": "Sets a new value for property <code>spanSmall</code>.\n\nDeprecated. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use spanS instead."
					}
				},
				{
					"name": "setSpanXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iSpanXL",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>spanXL</code>"
						}
					],
					"description": "Sets a new value for property <code>spanXL</code>.\n\nOptional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter \"span\".\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored."
				},
				{
					"name": "setVisibleL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleL",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleL</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleL</code>.\n\nDefines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setVisibleM",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleM",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleM</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleM</code>.\n\nDefines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setVisibleOnLarge",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleOnLarge",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleOnLarge</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleOnLarge</code>.\n\nDeprecated. Defines if this Control is visible on Large screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleL instead."
					}
				},
				{
					"name": "setVisibleOnMedium",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleOnMedium",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleOnMedium</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleOnMedium</code>.\n\nDeprecated. Defines if this Control is visible on Medium size screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleM instead."
					}
				},
				{
					"name": "setVisibleOnSmall",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleOnSmall",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleOnSmall</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleOnSmall</code>.\n\nDeprecated. Defines if this Control is visible on small screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>.",
					"deprecated": {
						"since": "1.17.1",
						"text": "Use visibleS instead."
					}
				},
				{
					"name": "setVisibleS",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleS",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleS</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleS</code>.\n\nDefines if this Control is visible on small screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setVisibleXL",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.GridData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bVisibleXL",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>visibleXL</code>"
						}
					],
					"description": "Sets a new value for property <code>visibleXL</code>.\n\nDefines if this Control is visible on XL - extra Large screens.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "namespace",
			"name": "sap.ui.layout.GridIndent",
			"basename": "GridIndent",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"final": true,
			"static": true,
			"visibility": "public",
			"description": "A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small."
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.GridPosition",
			"basename": "GridPosition",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"description": "The position of the Grid. Can be \"Left\", \"Center\" or \"Right\". \"Left\" is default.",
			"properties": [
				{
					"name": "Center",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Grid is centered on the screen."
				},
				{
					"name": "Left",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Grid is aligned left."
				},
				{
					"name": "Right",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Grid is aligned to the right."
				}
			]
		},
		{
			"kind": "namespace",
			"name": "sap.ui.layout.GridSpan",
			"basename": "GridSpan",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"final": true,
			"static": true,
			"visibility": "public",
			"description": "A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\". Note that the parameters have to be provided in the order large  medium  small."
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.HorizontalLayout",
			"basename": "HorizontalLayout",
			"resource": "sap/ui/layout/HorizontalLayout.js",
			"module": "sap/ui/layout/HorizontalLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "A layout that provides support for horizontal alignment of controls",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "allowWrapping",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.",
						"methods": [
							"getAllowWrapping",
							"setAllowWrapping"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The controls inside this layout",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new HorizontalLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.HorizontalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.HorizontalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAccessibilityInfo",
					"visibility": "protected"
				},
				{
					"name": "getAllowWrapping",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>allowWrapping</code>"
					},
					"description": "Gets current value of property <code>allowWrapping</code>.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nThe controls inside this layout"
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.HorizontalLayout."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.HorizontalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setAllowWrapping",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.HorizontalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bAllowWrapping",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>allowWrapping</code>"
						}
					],
					"description": "Sets a new value for property <code>allowWrapping</code>.\n\nSpecifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.PaneContainer",
			"basename": "PaneContainer",
			"resource": "sap/ui/layout/PaneContainer.js",
			"module": "sap/ui/layout/PaneContainer",
			"static": true,
			"visibility": "public",
			"since": "1.38",
			"extends": "sap.ui.core.Element",
			"description": "PaneContainer is an abstraction of Splitter\nCould be used as an aggregation of ResponsiveSplitter or other PaneContainers.",
			"ui5-metadata": {
				"stereotype": "element",
				"properties": [
					{
						"name": "orientation",
						"type": "sap.ui.core.Orientation",
						"defaultValue": "Horizontal",
						"group": "Behavior",
						"visibility": "public",
						"description": "The orientation of the Splitter",
						"methods": [
							"getOrientation",
							"setOrientation"
						]
					}
				],
				"aggregations": [
					{
						"name": "panes",
						"singularName": "pane",
						"type": "sap.ui.core.Element",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width.",
						"methods": [
							"getPanes",
							"destroyPanes",
							"insertPane",
							"addPane",
							"removePane",
							"indexOfPane",
							"removeAllPanes"
						]
					}
				],
				"defaultAggregation": "panes"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new PaneContainer.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addPane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oPane",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "the pane to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some pane to the aggregation <code>panes</code>."
				},
				{
					"name": "destroyPanes",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the panes in the aggregation <code>panes</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.PaneContainer."
				},
				{
					"name": "getOrientation",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Orientation",
						"description": "Value of property <code>orientation</code>"
					},
					"description": "Gets current value of property <code>orientation</code>.\n\nThe orientation of the Splitter\n\nDefault value is <code>Horizontal</code>."
				},
				{
					"name": "getPanes",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element[]"
					},
					"description": "Gets content of aggregation <code>panes</code>.\n\nThe Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width."
				},
				{
					"name": "indexOfPane",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oPane",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "The pane whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <code>panes</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertPane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oPane",
							"type": "sap.ui.core.Element",
							"optional": false,
							"description": "the pane to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the pane should be inserted at; for\n             a negative value of <code>iIndex</code>, the pane is inserted at position 0; for a value\n             greater than the current size of the aggregation, the pane is inserted at\n             the last position"
						}
					],
					"description": "Inserts a pane into the aggregation <code>panes</code>."
				},
				{
					"name": "removeAllPanes",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>panes</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removePane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Element",
						"description": "The removed pane or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vPane",
							"type": "int|string|sap.ui.core.Element",
							"optional": false,
							"description": "The paneto remove or its index or id"
						}
					],
					"description": "Removes a pane from the aggregation <code>panes</code>."
				},
				{
					"name": "setLayoutData",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer",
						"description": "this to allow method chaining."
					},
					"parameters": [
						{
							"name": "oLayoutData",
							"type": "sap.ui.core.LayoutData",
							"optional": false,
							"description": "The LayoutData object."
						}
					],
					"description": "Setter for property layoutData."
				},
				{
					"name": "setOrientation",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer",
						"description": "this to allow method chaining."
					},
					"parameters": [
						{
							"name": "sOrientation",
							"type": "sap.ui.core.Orientation",
							"optional": false,
							"description": "The Orientation type."
						}
					],
					"description": "Setter for property orientation.\nDefault value is sap.ui.core.Orientation.Horizontal"
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.ResponsiveFlowLayout",
			"basename": "ResponsiveFlowLayout",
			"resource": "sap/ui/layout/ResponsiveFlowLayout.js",
			"module": "sap/ui/layout/ResponsiveFlowLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "responsive",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.",
						"methods": [
							"getResponsive",
							"setResponsive"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Added content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content",
				"associations": [
					{
						"name": "ariaLabelledBy",
						"singularName": "ariaLabelledBy",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"since": "1.38.32",
						"description": "Association to controls / IDs that label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).",
						"methods": [
							"getAriaLabelledBy",
							"addAriaLabelledBy",
							"removeAriaLabelledBy",
							"removeAllAriaLabelledBy"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new ResponsiveFlowLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"since": "1.38.32",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "string|sap.ui.core.Control",
							"optional": false,
							"description": "the ariaLabelledBy to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "addContent",
					"visibility": "public",
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content that should be added to the layout"
						}
					],
					"description": "Adds content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"since": "1.38.32",
					"description": "Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nAdded content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayout."
				},
				{
					"name": "getResponsive",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>responsive</code>"
					},
					"description": "Gets current value of property <code>responsive</code>.\n\nIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content that should be inserted to the layout"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "The index where the content should be inserted into"
						}
					],
					"description": "Inserts content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added."
				},
				{
					"name": "removeAllAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"since": "1.38.32",
					"description": "Removes all the controls in the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeAriaLabelledBy",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "the removed ariaLabelledBy or <code>null</code>"
					},
					"since": "1.38.32",
					"parameters": [
						{
							"name": "vAriaLabelledBy",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The ariaLabelledByto be removed or its index or ID"
						}
					],
					"description": "Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The <code>this</code> pointer for chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The content that should be removed from the layout"
						}
					],
					"description": "Removes content.\nThis function needs to be overridden to prevent any rendering while some\ncontent is still being added."
				},
				{
					"name": "setResponsive",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bResponsive",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>responsive</code>"
						}
					],
					"description": "Sets a new value for property <code>responsive</code>.\n\nIf set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.ResponsiveFlowLayoutData",
			"basename": "ResponsiveFlowLayoutData",
			"resource": "sap/ui/layout/ResponsiveFlowLayoutData.js",
			"module": "sap/ui/layout/ResponsiveFlowLayoutData",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.LayoutData",
			"description": "This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.",
			"ui5-metadata": {
				"properties": [
					{
						"name": "minWidth",
						"type": "int",
						"defaultValue": 100,
						"group": "Misc",
						"visibility": "public",
						"description": "Defines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.",
						"methods": [
							"getMinWidth",
							"setMinWidth"
						]
					},
					{
						"name": "weight",
						"type": "int",
						"defaultValue": 1,
						"group": "Misc",
						"visibility": "public",
						"description": "Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.",
						"methods": [
							"getWeight",
							"setWeight"
						]
					},
					{
						"name": "linebreak",
						"type": "boolean",
						"defaultValue": false,
						"group": "Misc",
						"visibility": "public",
						"description": "If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.",
						"methods": [
							"getLinebreak",
							"setLinebreak"
						]
					},
					{
						"name": "margin",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "Prevents any margin of the element if set to false.",
						"methods": [
							"getMargin",
							"setMargin"
						]
					},
					{
						"name": "linebreakable",
						"type": "boolean",
						"defaultValue": true,
						"group": "Misc",
						"visibility": "public",
						"description": "Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.",
						"methods": [
							"getLinebreakable",
							"setLinebreakable"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new ResponsiveFlowLayoutData.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}."
				},
				{
					"name": "getLinebreak",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreak</code>"
					},
					"description": "Gets current value of property <code>linebreak</code>.\n\nIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "getLinebreakable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>linebreakable</code>"
					},
					"description": "Gets current value of property <code>linebreakable</code>.\n\nShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getMargin",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>margin</code>"
					},
					"description": "Gets current value of property <code>margin</code>.\n\nPrevents any margin of the element if set to false.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.ResponsiveFlowLayoutData."
				},
				{
					"name": "getMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>minWidth</code>"
					},
					"description": "Gets current value of property <code>minWidth</code>.\n\nDefines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.\n\nDefault value is <code>100</code>."
				},
				{
					"name": "getWeight",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>weight</code>"
					},
					"description": "Gets current value of property <code>weight</code>.\n\nDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\n\nDefault value is <code>1</code>."
				},
				{
					"name": "setLinebreak",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreak",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreak</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreak</code>.\n\nIf this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>false</code>."
				},
				{
					"name": "setLinebreakable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bLinebreakable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>linebreakable</code>"
						}
					],
					"description": "Sets a new value for property <code>linebreakable</code>.\n\nShows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setMargin",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bMargin",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>margin</code>"
						}
					],
					"description": "Sets a new value for property <code>margin</code>.\n\nPrevents any margin of the element if set to false.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setMinWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iMinWidth",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>minWidth</code>"
						}
					],
					"description": "Sets a new value for property <code>minWidth</code>.\n\nDefines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100</code>."
				},
				{
					"name": "setWeight",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveFlowLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iWeight",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>weight</code>"
						}
					],
					"description": "Sets a new value for property <code>weight</code>.\n\nDefines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>1</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.ResponsiveSplitter",
			"basename": "ResponsiveSplitter",
			"resource": "sap/ui/layout/ResponsiveSplitter.js",
			"module": "sap/ui/layout/ResponsiveSplitter",
			"static": true,
			"visibility": "public",
			"since": "1.38",
			"extends": "sap.ui.core.Control",
			"description": "ResponsiveSplitter is a control that enables responsiveness of normal Splitter.\nResponsiveSplitter consists of PaneContainers that further  agregate other PaneContainers and SplitPanes.\nSplitPanes can be moved to the pagination when a minimum width of their parent is reached.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "100%",
						"group": "Appearance",
						"visibility": "public",
						"description": "The width of the control",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "height",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "100%",
						"group": "Appearance",
						"visibility": "public",
						"description": "The height of the control",
						"methods": [
							"getHeight",
							"setHeight"
						]
					}
				],
				"aggregations": [
					{
						"name": "rootPaneContainer",
						"singularName": "rootPaneContainer",
						"type": "sap.ui.layout.PaneContainer",
						"cardinality": "0..1",
						"visibility": "public",
						"description": "The root PaneContainer of the ResponsiveSplitter",
						"methods": [
							"getRootPaneContainer",
							"destroyRootPaneContainer",
							"setRootPaneContainer"
						]
					},
					{
						"name": "_pages",
						"singularName": "_page",
						"type": "sap.ui.layout.ResponsiveSplitterPage",
						"cardinality": "0..n",
						"visibility": "hidden",
						"description": "Contains the internal pages that are used for pagination",
						"methods": [
							"get_pages",
							"destroy_pages",
							"insert_page",
							"add_page",
							"remove_page",
							"indexOf_page",
							"removeAll_pages"
						]
					}
				],
				"defaultAggregation": "rootPaneContainer",
				"associations": [
					{
						"name": "defaultPane",
						"singularName": "defaultPane",
						"type": "sap.ui.layout.SplitPane",
						"cardinality": "0..1",
						"visibility": "public",
						"description": "The default pane that will remain always visible\nIf no defaultPane is specified, the ResponsiveSplitter sets the first SplitPane that is added to a PaneContainer in it as a default.",
						"methods": [
							"getDefaultPane",
							"setDefaultPane"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new ResponsiveSplitter.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "destroyRootPaneContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveSplitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the rootPaneContainer in the aggregation <code>rootPaneContainer</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getDefaultPane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitPane"
					},
					"description": "ID of the element which is the current target of the association <code>defaultPane</code>, or <code>null</code>."
				},
				{
					"name": "getHeight",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>height</code>"
					},
					"description": "Gets current value of property <code>height</code>.\n\nThe height of the control\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.ResponsiveSplitter."
				},
				{
					"name": "getRootPaneContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.PaneContainer"
					},
					"description": "Gets content of aggregation <code>rootPaneContainer</code>.\n\nThe root PaneContainer of the ResponsiveSplitter"
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nThe width of the control\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "setDefaultPane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveSplitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oDefaultPane",
							"type": "sap.ui.layout.SplitPane",
							"optional": false,
							"description": "Id of an element which becomes the new target of this defaultPane association; alternatively, an element instance may be given"
						}
					],
					"description": "Sets the associated <code>defaultPane</code>."
				},
				{
					"name": "setHeight",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveSplitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sHeight",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>height</code>"
						}
					],
					"description": "Sets a new value for property <code>height</code>.\n\nThe height of the control\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "setRootPaneContainer",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveSplitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oRootPaneContainer",
							"type": "sap.ui.layout.PaneContainer",
							"optional": false,
							"description": "The rootPaneContainer to set"
						}
					],
					"description": "Sets the aggregated <code>rootPaneContainer</code>."
				},
				{
					"name": "setWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.ResponsiveSplitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sWidth",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>width</code>"
						}
					],
					"description": "Sets a new value for property <code>width</code>.\n\nThe width of the control\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100%</code>."
				}
			]
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.SideContentFallDown",
			"basename": "SideContentFallDown",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"since": "1.30",
			"description": "Types of the DynamicSideContent FallDown options",
			"properties": [
				{
					"name": "BelowL",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Side content falls down on breakpoints below L"
				},
				{
					"name": "BelowM",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Side content falls down on breakpoints below M"
				},
				{
					"name": "BelowXL",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Side content falls down on breakpoints below XL"
				},
				{
					"name": "OnMinimumWidth",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Side content falls down on breakpoint M and the minimum width for the side content"
				}
			]
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.SideContentPosition",
			"basename": "SideContentPosition",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"description": "The position of the side content - End (default) and Begin.",
			"properties": [
				{
					"name": "Begin",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode."
				},
				{
					"name": "End",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode."
				}
			]
		},
		{
			"kind": "enum",
			"name": "sap.ui.layout.SideContentVisibility",
			"basename": "SideContentVisibility",
			"resource": "sap/ui/layout/library.js",
			"module": "sap/ui/layout/library",
			"static": true,
			"visibility": "public",
			"since": "1.30",
			"description": "Types of the DynamicSideContent Visibility options",
			"properties": [
				{
					"name": "AlwaysShow",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Show the side content on any breakpoint"
				},
				{
					"name": "NeverShow",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Don't show the side content on any breakpoints"
				},
				{
					"name": "ShowAboveL",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Show the side content on XL breakpoint"
				},
				{
					"name": "ShowAboveM",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Show the side content on L and XL breakpoints"
				},
				{
					"name": "ShowAboveS",
					"visibility": "public",
					"static": true,
					"type": "string",
					"description": "Show the side content on M, L and XL breakpoints"
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.SplitPane",
			"basename": "SplitPane",
			"resource": "sap/ui/layout/SplitPane.js",
			"module": "sap/ui/layout/SplitPane",
			"static": true,
			"visibility": "public",
			"since": "1.38",
			"extends": "sap.ui.core.Element",
			"description": "SplitPane is a container of a single control.\nCould be used as an aggregation of a PaneContainer.",
			"ui5-metadata": {
				"stereotype": "element",
				"properties": [
					{
						"name": "demandPane",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Determines whether the pane will be moved to the pagination",
						"methods": [
							"getDemandPane",
							"setDemandPane"
						]
					},
					{
						"name": "requiredParentWidth",
						"type": "int",
						"defaultValue": "800",
						"group": "Misc",
						"visibility": "public",
						"description": "Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.",
						"methods": [
							"getRequiredParentWidth",
							"setRequiredParentWidth"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..1",
						"visibility": "public",
						"description": "Content of the SplitPane",
						"methods": [
							"getContent",
							"destroyContent",
							"setContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "ID for the new control, generated automatically if no ID is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "Initial settings for the new control"
					}
				],
				"description": "Constructor for a new SplitPane.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitPane",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}."
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nContent of the SplitPane"
				},
				{
					"name": "getDemandPane",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>demandPane</code>"
					},
					"description": "Gets current value of property <code>demandPane</code>.\n\nDetermines whether the pane will be moved to the pagination\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.SplitPane."
				},
				{
					"name": "getRequiredParentWidth",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>requiredParentWidth</code>"
					},
					"description": "Gets current value of property <code>requiredParentWidth</code>.\n\nDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\n\nDefault value is <code>800</code>."
				},
				{
					"name": "setContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitPane",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content to set"
						}
					],
					"description": "Sets the aggregated <code>content</code>."
				},
				{
					"name": "setDemandPane",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitPane",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bDemandPane",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>demandPane</code>"
						}
					],
					"description": "Sets a new value for property <code>demandPane</code>.\n\nDetermines whether the pane will be moved to the pagination\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setRequiredParentWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitPane",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iRequiredParentWidth",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>requiredParentWidth</code>"
						}
					],
					"description": "Sets a new value for property <code>requiredParentWidth</code>.\n\nDetermines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>800</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.Splitter",
			"basename": "Splitter",
			"resource": "sap/ui/layout/Splitter.js",
			"module": "sap/ui/layout/Splitter",
			"static": true,
			"visibility": "public",
			"since": "1.22.0",
			"extends": "sap.ui.core.Control",
			"description": "\nA layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.\n\nBy adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.\n\nThe orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.\n\nThe splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).\n\nThe splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "orientation",
						"type": "sap.ui.core.Orientation",
						"defaultValue": "Horizontal",
						"group": "Behavior",
						"visibility": "public",
						"description": "Whether to split the contents horizontally (default) or vertically.",
						"methods": [
							"getOrientation",
							"setOrientation"
						]
					},
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "100%",
						"group": "Appearance",
						"visibility": "public",
						"description": "The width of the control",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "height",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "100%",
						"group": "Appearance",
						"visibility": "public",
						"description": "The height of the control",
						"methods": [
							"getHeight",
							"setHeight"
						]
					}
				],
				"aggregations": [
					{
						"name": "contentAreas",
						"singularName": "contentArea",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "The content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.",
						"methods": [
							"getContentAreas",
							"destroyContentAreas",
							"insertContentArea",
							"addContentArea",
							"removeContentArea",
							"indexOfContentArea",
							"removeAllContentAreas"
						]
					}
				],
				"defaultAggregation": "contentAreas",
				"events": [
					{
						"name": "resize",
						"visibility": "public",
						"description": "Event is fired when contents are resized.",
						"parameters": {
							"id": {
								"name": "id",
								"type": "string",
								"description": "The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event."
							},
							"oldSizes": {
								"name": "oldSizes",
								"type": "int[]",
								"description": "An array of values representing the old (pixel-)sizes of the splitter contents"
							},
							"newSizes": {
								"name": "newSizes",
								"type": "int[]",
								"description": "An array of values representing the new (pixel-)sizes of the splitter contents"
							}
						},
						"methods": [
							"attachResize",
							"detachResize",
							"fireResize"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new Splitter.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"events": [
				{
					"name": "resize",
					"visibility": "public",
					"parameters": [
						{
							"name": "oControlEvent",
							"type": "sap.ui.base.Event",
							"parameterProperties": {
								"getSource": {
									"name": "getSource",
									"type": "sap.ui.base.EventProvider",
									"optional": false
								},
								"getParameters": {
									"name": "getParameters",
									"type": "object",
									"optional": false,
									"parameterProperties": {
										"id": {
											"name": "id",
											"type": "string",
											"optional": false,
											"description": "The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event."
										},
										"oldSizes": {
											"name": "oldSizes",
											"type": "int[]",
											"optional": false,
											"description": "An array of values representing the old (pixel-)sizes of the splitter contents"
										},
										"newSizes": {
											"name": "newSizes",
											"type": "int[]",
											"optional": false,
											"description": "An array of values representing the new (pixel-)sizes of the splitter contents"
										}
									}
								}
							}
						}
					],
					"description": "Event is fired when contents are resized."
				}
			],
			"methods": [
				{
					"name": "addContentArea",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContentArea",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the contentArea to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some contentArea to the aggregation <code>contentAreas</code>."
				},
				{
					"name": "attachResize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oData",
							"type": "object",
							"optional": true,
							"description": "An application-specific payload object that will be passed to the event handler along with the event object when firing the event"
						},
						{
							"name": "fnFunction",
							"type": "function",
							"optional": false,
							"description": "The function to be called when the event occurs"
						},
						{
							"name": "oListener",
							"type": "object",
							"optional": true,
							"description": "Context object to call the event handler with. Defaults to this <code>sap.ui.layout.Splitter</code> itself"
						}
					],
					"description": "Attaches event handler <code>fnFunction</code> to the <code>resize</code> event of this <code>sap.ui.layout.Splitter</code>.\n\nWhen called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, \notherwise it will be bound to this <code>sap.ui.layout.Splitter</code> itself.\n\nEvent is fired when contents are resized."
				},
				{
					"name": "destroyContentAreas",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the contentAreas in the aggregation <code>contentAreas</code>."
				},
				{
					"name": "detachResize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "fnFunction",
							"type": "function",
							"optional": false,
							"description": "The function to be called, when the event occurs"
						},
						{
							"name": "oListener",
							"type": "object",
							"optional": false,
							"description": "Context object on which the given function had to be called"
						}
					],
					"description": "Detaches event handler <code>fnFunction</code> from the <code>resize</code> event of this <code>sap.ui.layout.Splitter</code>.\n\nThe passed function and listener object must match the ones used for event registration."
				},
				{
					"name": "disableAutoResize",
					"visibility": "protected",
					"parameters": [
						{
							"name": "bTemporarily",
							"type": "boolean",
							"optional": true,
							"defaultValue": false,
							"description": "Only disable autoResize temporarily (used for live resize), so that the previous status can be restored afterwards"
						}
					],
					"description": "Disables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()",
					"deprecated": {
						"text": "This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface"
					}
				},
				{
					"name": "disableKeyboardSupport",
					"visibility": "protected",
					"description": "Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars\nto non-focussable elements."
				},
				{
					"name": "disableLiveResize",
					"visibility": "protected",
					"description": "Disables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized only once after moving the splitter bar.",
					"deprecated": {
						"text": "This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface"
					}
				},
				{
					"name": "enableAutoResize",
					"visibility": "protected",
					"parameters": [
						{
							"name": "bTemporarily",
							"type": "boolean",
							"optional": true,
							"defaultValue": false,
							"description": "Only enables autoResize if it was previously disabled temporarily (used for live resize)"
						}
					],
					"description": "Enables the resize handler for this control, this leads to an automatic resize of\nthe contents whenever the control changes its size. The resize handler is enabled\nin every control instance by default.\nFor performance reasons this behavior can be disabled by calling disableAutoResize()",
					"deprecated": {
						"text": "This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface"
					}
				},
				{
					"name": "enableKeyboardSupport",
					"visibility": "protected",
					"description": "Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars\nfocussable elements."
				},
				{
					"name": "enableLiveResize",
					"visibility": "protected",
					"description": "Enables recalculation and resize of the splitter contents while dragging the splitter bar.\nThis means that the contents are resized several times per second when moving the splitter bar.",
					"deprecated": {
						"text": "This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface"
					}
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "fireResize",
					"visibility": "protected",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "mArguments",
							"type": "Map",
							"optional": true,
							"description": "The arguments to pass along with the event"
						}
					],
					"description": "Fires event <code>resize</code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>id</code> of type <code>string</code>The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event.</li>\n<li><code>oldSizes</code> of type <code>int[]</code>An array of values representing the old (pixel-)sizes of the splitter contents</li>\n<li><code>newSizes</code> of type <code>int[]</code>An array of values representing the new (pixel-)sizes of the splitter contents</li>\n</ul>"
				},
				{
					"name": "getCalculatedSizes",
					"visibility": "protected",
					"returnValue": {
						"type": "Number[]",
						"description": "Array of px values that correspond to the content area sizes"
					},
					"description": "Returns the current actual content sizes as pixel value - these values can change with every\nresize.",
					"deprecated": {
						"text": "This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface"
					}
				},
				{
					"name": "getContentAreas",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>contentAreas</code>.\n\nThe content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation."
				},
				{
					"name": "getHeight",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>height</code>"
					},
					"description": "Gets current value of property <code>height</code>.\n\nThe height of the control\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.Splitter."
				},
				{
					"name": "getOrientation",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Orientation",
						"description": "Value of property <code>orientation</code>"
					},
					"description": "Gets current value of property <code>orientation</code>.\n\nWhether to split the contents horizontally (default) or vertically.\n\nDefault value is <code>Horizontal</code>."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nThe width of the control\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "indexOfContentArea",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContentArea",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The contentArea whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>contentAreas</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContentArea",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContentArea",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the contentArea to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the contentArea should be inserted at; for\n             a negative value of <code>iIndex</code>, the contentArea is inserted at position 0; for a value\n             greater than the current size of the aggregation, the contentArea is inserted at\n             the last position"
						}
					],
					"description": "Inserts a contentArea into the aggregation <code>contentAreas</code>."
				},
				{
					"name": "removeAllContentAreas",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>contentAreas</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContentArea",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed contentArea or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContentArea",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The contentAreato remove or its index or id"
						}
					],
					"description": "Removes a contentArea from the aggregation <code>contentAreas</code>."
				},
				{
					"name": "setHeight",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sHeight",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>height</code>"
						}
					],
					"description": "Sets a new value for property <code>height</code>.\n\nThe height of the control\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "setOrientation",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sOrientation",
							"type": "sap.ui.core.Orientation",
							"optional": false,
							"description": "New value for property <code>orientation</code>"
						}
					],
					"description": "Sets a new value for property <code>orientation</code>.\n\nWhether to split the contents horizontally (default) or vertically.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>Horizontal</code>."
				},
				{
					"name": "setWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.Splitter",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sWidth",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>width</code>"
						}
					],
					"description": "Sets a new value for property <code>width</code>.\n\nThe width of the control\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>100%</code>."
				},
				{
					"name": "triggerResize",
					"visibility": "public",
					"parameters": [
						{
							"name": "forceDirectly",
							"type": "boolean",
							"optional": true,
							"defaultValue": false,
							"description": "Do not delay the resize, trigger it right now."
						}
					],
					"description": "This method  triggers a resize on the Splitter - meaning it forces the Splitter to recalculate\nall sizes.\nThis method should only be used in rare cases, for example when the CSS that defines the sizes\nof the splitter bars changes without triggering a rerendering of the splitter."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.SplitterLayoutData",
			"basename": "SplitterLayoutData",
			"resource": "sap/ui/layout/SplitterLayoutData.js",
			"module": "sap/ui/layout/SplitterLayoutData",
			"static": true,
			"visibility": "public",
			"since": "1.22.0",
			"extends": "sap.ui.core.LayoutData",
			"description": "Holds layout data for the splitter contents.\nAllowed size values are numeric values ending in \"px\" and \"%\" and the\nspecial case \"auto\".\n(The CSS value \"auto\" is used internally to recalculate the size of the content\ndynamically and is not directly set as style property.)",
			"experimental": {
				"since": "1.22.0",
				"text": "API is not yet finished and might change completely"
			},
			"ui5-metadata": {
				"properties": [
					{
						"name": "resizable",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "Determines whether the control in the splitter can be resized or not.",
						"methods": [
							"getResizable",
							"setResizable"
						]
					},
					{
						"name": "size",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": "auto",
						"group": "Dimension",
						"visibility": "public",
						"description": "Sets the size of the splitter content.",
						"methods": [
							"getSize",
							"setSize"
						]
					},
					{
						"name": "minSize",
						"type": "int",
						"defaultValue": 0,
						"group": "Dimension",
						"visibility": "public",
						"description": "Sets the minimum size of the splitter content in px.",
						"methods": [
							"getMinSize",
							"setMinSize"
						]
					}
				]
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new SplitterLayoutData.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.SplitterLayoutData."
				},
				{
					"name": "getMinSize",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "Value of property <code>minSize</code>"
					},
					"description": "Gets current value of property <code>minSize</code>.\n\nSets the minimum size of the splitter content in px.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "getResizable",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>resizable</code>"
					},
					"description": "Gets current value of property <code>resizable</code>.\n\nDetermines whether the control in the splitter can be resized or not.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>size</code>"
					},
					"description": "Gets current value of property <code>size</code>.\n\nSets the size of the splitter content.\n\nDefault value is <code>auto</code>."
				},
				{
					"name": "setMinSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitterLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "iMinSize",
							"type": "int",
							"optional": false,
							"description": "New value for property <code>minSize</code>"
						}
					],
					"description": "Sets a new value for property <code>minSize</code>.\n\nSets the minimum size of the splitter content in px.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>0</code>."
				},
				{
					"name": "setResizable",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitterLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bResizable",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>resizable</code>"
						}
					],
					"description": "Sets a new value for property <code>resizable</code>.\n\nDetermines whether the control in the splitter can be resized or not.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "setSize",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.SplitterLayoutData",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "sSize",
							"type": "sap.ui.core.CSSSize",
							"optional": false,
							"description": "New value for property <code>size</code>"
						}
					],
					"description": "Sets a new value for property <code>size</code>.\n\nSets the size of the splitter content.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>auto</code>."
				}
			]
		},
		{
			"kind": "class",
			"name": "sap.ui.layout.VerticalLayout",
			"basename": "VerticalLayout",
			"resource": "sap/ui/layout/VerticalLayout.js",
			"module": "sap/ui/layout/VerticalLayout",
			"static": true,
			"visibility": "public",
			"since": "1.16.0",
			"extends": "sap.ui.core.Control",
			"description": "In this layout the content controls are rendered one below the other.",
			"ui5-metadata": {
				"stereotype": "control",
				"properties": [
					{
						"name": "width",
						"type": "sap.ui.core.CSSSize",
						"defaultValue": null,
						"group": "Dimension",
						"visibility": "public",
						"description": "Width of the <code>VerticalLayout</code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout.",
						"methods": [
							"getWidth",
							"setWidth"
						]
					},
					{
						"name": "enabled",
						"type": "boolean",
						"defaultValue": true,
						"group": "Behavior",
						"visibility": "public",
						"description": "If not enabled, all controls inside are not enabled automatically.",
						"methods": [
							"getEnabled",
							"setEnabled"
						]
					}
				],
				"aggregations": [
					{
						"name": "content",
						"singularName": "content",
						"type": "sap.ui.core.Control",
						"cardinality": "0..n",
						"visibility": "public",
						"description": "Content controls within the layout.",
						"methods": [
							"getContent",
							"destroyContent",
							"insertContent",
							"addContent",
							"removeContent",
							"indexOfContent",
							"removeAllContent"
						]
					}
				],
				"defaultAggregation": "content"
			},
			"constructor": {
				"visibility": "public",
				"parameters": [
					{
						"name": "sId",
						"type": "string",
						"optional": true,
						"description": "Id for the new control, generated automatically if no id is given"
					},
					{
						"name": "mSettings",
						"type": "object",
						"optional": true,
						"description": "initial settings for the new control"
					}
				],
				"description": "Constructor for a new VerticalLayout.\n\n\nAccepts an object literal <code>mSettings</code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object."
			},
			"methods": [
				{
					"name": "addContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.VerticalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to add; if empty, nothing is inserted"
						}
					],
					"description": "Adds some content to the aggregation <code>content</code>."
				},
				{
					"name": "destroyContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.VerticalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"description": "Destroys all the content in the aggregation <code>content</code>."
				},
				{
					"name": "extend",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "function",
						"description": "Created class / constructor function"
					},
					"parameters": [
						{
							"name": "sClassName",
							"type": "string",
							"optional": false,
							"description": "Name of the class being created"
						},
						{
							"name": "oClassInfo",
							"type": "object",
							"optional": true,
							"description": "Object literal with information about the class"
						},
						{
							"name": "FNMetaImpl",
							"type": "function",
							"optional": true,
							"description": "Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>"
						}
					],
					"description": "Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName</code>\nand enriches it with the information contained in <code>oClassInfo</code>.\n\n<code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}."
				},
				{
					"name": "getAccessibilityInfo",
					"visibility": "protected"
				},
				{
					"name": "getContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]"
					},
					"description": "Gets content of aggregation <code>content</code>.\n\nContent controls within the layout."
				},
				{
					"name": "getEnabled",
					"visibility": "public",
					"returnValue": {
						"type": "boolean",
						"description": "Value of property <code>enabled</code>"
					},
					"description": "Gets current value of property <code>enabled</code>.\n\nIf not enabled, all controls inside are not enabled automatically.\n\nDefault value is <code>true</code>."
				},
				{
					"name": "getMetadata",
					"visibility": "public",
					"static": true,
					"returnValue": {
						"type": "sap.ui.base.Metadata",
						"description": "Metadata object describing this class"
					},
					"description": "Returns a metadata object for class sap.ui.layout.VerticalLayout."
				},
				{
					"name": "getWidth",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.CSSSize",
						"description": "Value of property <code>width</code>"
					},
					"description": "Gets current value of property <code>width</code>.\n\nWidth of the <code>VerticalLayout</code>. If no width is set, the width of the content is used.\nIf the content of the layout has a larger width than the layout, it is cut off.\nThere is no scrolling inside the layout."
				},
				{
					"name": "indexOfContent",
					"visibility": "public",
					"returnValue": {
						"type": "int",
						"description": "The index of the provided control in the aggregation if found, or -1 otherwise"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "The content whose index is looked for"
						}
					],
					"description": "Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.\nand returns its index if found or -1 otherwise."
				},
				{
					"name": "insertContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.VerticalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "oContent",
							"type": "sap.ui.core.Control",
							"optional": false,
							"description": "the content to insert; if empty, nothing is inserted"
						},
						{
							"name": "iIndex",
							"type": "int",
							"optional": false,
							"description": "the <code>0</code>-based index the content should be inserted at; for\n             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value\n             greater than the current size of the aggregation, the content is inserted at\n             the last position"
						}
					],
					"description": "Inserts a content into the aggregation <code>content</code>."
				},
				{
					"name": "removeAllContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control[]",
						"description": "An array of the removed elements (might be empty)"
					},
					"description": "Removes all the controls from the aggregation <code>content</code>.\n\nAdditionally, it unregisters them from the hosting UIArea."
				},
				{
					"name": "removeContent",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.core.Control",
						"description": "The removed content or <code>null</code>"
					},
					"parameters": [
						{
							"name": "vContent",
							"type": "int|string|sap.ui.core.Control",
							"optional": false,
							"description": "The contentto remove or its index or id"
						}
					],
					"description": "Removes a content from the aggregation <code>content</code>."
				},
				{
					"name": "setEnabled",
					"visibility": "public",
					"returnValue": {
						"type": "sap.ui.layout.VerticalLayout",
						"description": "Reference to <code>this</code> in order to allow method chaining"
					},
					"parameters": [
						{
							"name": "bEnabled",
							"type": "boolean",
							"optional": false,
							"description": "New value for property <code>enabled</code>"
						}
					],
					"description": "Sets a new value for property <code>enabled</code>.\n\nIf not enabled, all controls inside are not enabled automatically.\n\nWhen called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.\n\nDefault value is <code>true</code>."
				}
			]
		}
	]
}