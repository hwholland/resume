// This file has been generated by the SAPUI5 'AllInOne' Builder
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.analytical.analyticalChart", {
		onInit: function () {
			sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
			/* Chart Navigation */
//			var vizFrame = this.getView().byId("analyticalChart");
//			if (vizFrame) {
//				vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
//				}
				this.bFlag = true;
				this.busyDelegate = {
						onBeforeRendering: function(){
							this.setBusy(true);
						}
					};
							
				this.freeDelegate = {
						onAfterRendering: function(){
							this.setBusy(false);
						}
					};
		},
		onBeforeRendering : function() {
			if (this.bCardProcessed) {
				return;
			}
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("analyticalChart");
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.VizAnnotationManager.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes(vizFrame);
				sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
			}
			this.bCardProcessed = true;
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("analyticalChart");
			if (this.bFlag == true) {
			vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
			this.bFlag = false;
			} else {
				setTimeout(function(){
					vizFrame.setBusy(false);
					},0);
			}
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("analyticalChart");
			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.bubble.BubbleChart", {
		onInit: function () {
			sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
//			var vizFrame = this.getView().byId("bubbleChartCard");
//			if (vizFrame) {
//				vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
//				}
				this.bFlag = true;
				this.busyDelegate = {
						onBeforeRendering: function(){
							this.setBusy(true);
						}
					};
							
				this.freeDelegate = {
						onAfterRendering: function(){
							this.setBusy(false);
						}
					};
		},
		onBeforeRendering : function() {
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("bubbleChartCard");
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.Utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Bubble");
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("bubbleChartCard");
			if (this.bFlag == true) {
				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame, "valueAxis");
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("bubbleChartCard");
			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.donut.DonutChart", {
		onInit: function () {
//			var vizFrame = this.getView().byId("donutChartCard");
//			if (vizFrame) {
//				vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
//				}
				this.bFlag = true;
				this.busyDelegate = {
						onBeforeRendering: function(){
							this.setBusy(true);
						}
					};
							
				this.freeDelegate = {
						onAfterRendering: function(){
							this.setBusy(false);
						}
					};
		},
		onBeforeRendering: function () {
			var utils = sap.ovp.cards.charts.Utils;
			var VizAnnotationManager = sap.ovp.cards.charts.VizAnnotationManager;
			VizAnnotationManager.validateCardConfiguration(this);
			var measureArrNames = [];
			var dimensionArrayNames = [];
			var vizFrame = this.getView().byId("donutChartCard");
			if (!vizFrame) {
				jQuery.sap.log.error(utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Donut");
				var entityTypeObject = this.getCardPropertiesModel().getProperty("/entityType");
				var columnLabels = utils.getAllColumnLabels(entityTypeObject);
				var measuresArr = vizFrame.getDataset().getMeasures();
				var dimensionsArr = vizFrame.getDataset().getDimensions();
	
				measureArrNames.push(measuresArr[0].getName());
				var dimensionName = columnLabels[dimensionsArr[0].getName()];
				dimensionArrayNames.push(dimensionName ? dimensionName : dimensionsArr[0].getName());

				vizFrame.removeAllFeeds();
				vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
					'uid': "size",
					'type': "Measure",
					'values': measureArrNames
				}));
				vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
					'uid': "color",
					'type': "Dimension",
					'values': dimensionArrayNames
				}));
	
				vizFrame.setVizProperties({
					size:{
						title:{
							visible:false
						}
					},
					color:{
						title:{
							visible:false
						}
					},
					legend: {
						isScrollable: false
					},
	
					title: {
						visible: false
					},
					interaction:{
						noninteractiveMode: false,
						selectability: {
							legendSelection: false,
							axisLabelSelection: false,
							mode: "EXCLUSIVE",
							plotLassoSelection: false,
							plotStdSelection: true
						}
					}
				});
				VizAnnotationManager.formatChartAxes();
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("donutChartCard");
			if (this.bFlag == true) {
				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("donutChartCard");
			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.line.LineChart", {
		onInit: function () {
			sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
//			var vizFrame = this.getView().byId("lineChartCard");
//			if (vizFrame) {
//				vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
//				}
				this.bFlag = true;
				this.busyDelegate = {
						onBeforeRendering: function(){
							this.setBusy(true);
						}
					};
							
				this.freeDelegate = {
						onAfterRendering: function(){
							this.setBusy(false);
						}
					};
		},
		onBeforeRendering : function() {
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("lineChartCard");
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.Utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Line");
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("lineChartCard");
			if (this.bFlag == true) {
				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame, "categoryAxis");
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("lineChartCard");
			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.image.Image", {
        onInit: function () {
        },

        onImagePress: function (oEvent) {
            this.doNavigation(oEvent.getSource().getBindingContext());
        }

    });
})();
(function() {
	"use strict";
	/*global sap, jQuery */
	var oDelegateOnBefore = {
		onBeforeRendering: function(oEvent) {
			this.itemOnBeforeRendering(oEvent);
		}
	};
	var oDelegateOnAfter = {
		onAfterRendering: function(oEvent) {
			this.itemOnAfterRendering(oEvent);
		}
	};

	sap.ui.controller("sap.ovp.cards.linklist.LinkList", {

		onInit: function() {
			jQuery.sap.log.setLevel(jQuery.sap.log.Level.INFO);
			this._bInitialLoad = true;
			this._iColumns = 0;
		},

		onBeforeRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var oView = this.getView();
			if (oCardPropertiesModel.getProperty("/listFlavor") === "standard") {
				var oLiItem = oView.byId("ovpCLI"); //Only available in case of StaticContent
				if (oLiItem) {
					oLiItem.addEventDelegate(oDelegateOnBefore, this);
				}
			}
		},

		onAfterRendering: function(oEvent) {
			var oView = this.getView();
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");

			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					if (oCardPropertiesModel.getProperty("/staticContent")) {
						if (iCols && iRows) {
							//Dashboard Layout
							this._itemOnEventBuildStandard(oView, oCardPropertiesModel, iCols, iRows, true);
						} else {
							// EasyScan Layout
							this._aLinkListIds = ["ovpLinkList"];
							this._setListColumnWidthInStandardCard(oView, 1);
						}
					}
					break;

				case "carousel":
					if (iRows) {
						//Dashboard Layout
						this._setListHeightInCarouselCard(oView, iRows);
					}

					var oCarousel = oView.byId("pictureCarousel");
					oCarousel.addEventDelegate(oDelegateOnAfter, this);
					this._setCarouselImageProperties(oView);
					break;

				case "grid": //experimental - DON´t USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
		},

		itemOnBeforeRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var oView = this.getView();
			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
					var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");
					var oList = oView.byId("ovpLinkList");
					var aListItems = oList.getItems();
					for (var j = 0; j < aListItems.length; j++) {
						aListItems[j].removeEventDelegate(oDelegateOnBefore);
					}
					if (this._bInitialLoad) {
						this._itemOnEventBuildStandard(oView, oCardPropertiesModel, iCols, iRows, true);
					} else {
						this._itemOnEventBuildStandard(oView, oCardPropertiesModel, iCols, iRows, false);
					}
					break;

				case "carousel":
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;

				case "grid": //grid: experimental  -- DON´T USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
		},

		itemOnAfterRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");
			var oView = this.getView();
			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					//remove the Delegated Event - if necessary if will added again
					//this step is necessary as the actual last item might be next time a different item
					try {
						var oList = oView.byId("ovpLinkList");
						var aListItems = oList.getItems(this._aLinkListIds[this._aLinkListIds.length - 1]);
						aListItems[aListItems.length - 1].removeEventDelegate(oDelegateOnAfter);
					} catch (e) {
						jQuery.sap.log.info("FYI: Unable to remove the delagted event at the last item of the last list");
					}

					if (iRows) {
						this._setListHeightInStandardCard(oView, iRows);
					}
					if (iCols) {
						// Dashboard Layout
						this._setListColumnWidthInStandardCard(oView, iCols);
					} else {
						// EasyScan Layout
						this._setListColumnWidthInStandardCard(oView, 1);
					}
					break;

				case "carousel":
					//remove the Delegated Event - if necessary if will added again
					try {
						var oCarousel = oView.byId("pictureCarousel");
						oCarousel.removeEventDelegate(oDelegateOnAfter);
					} catch (e) {
						jQuery.sap.log.info("FYI: Unable to remove the delagted event on the carousel");
					}

					if (iRows) {
						this._setListHeightInCarouselCard(oView, iRows);
					}
					this._setCarouselImageProperties(oView);
					break;

				case "grid": //grid: experimental  -- DON´T USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
		},

		_itemOnEventBuildStandard: function(oView, oCardPropertiesModel, iCols, iRows, bInitiaLoad) {
			var iPossibleItems;
			var oList = oView.byId("ovpLinkList");
			if (bInitiaLoad && this._oListRest === undefined) {
				this._oListRest = new sap.m.List(oView.getId() + "--RestOfData", {});
			}
			this._aLinkListIds = ["ovpLinkList"];
			this._iAvailableItems = oList.getItems().length;

			var iCardItems = oCardPropertiesModel.getProperty("/cardLayout/items");

			if (iCardItems !== undefined) {
				//EasyScan Layout
				this._iNoOfItemsPerColumn = iCardItems;
				iPossibleItems = iCardItems;
				this._iVisibleColums = 1; //

			} else {
				//Dashboard Layout
				var iItemHeight = 72;
				try {
					iItemHeight = this._getLinkListItemHigh();
				} catch (e) {
					jQuery.sap.log.info("Error: " + e);
				}

				var iLinkListHeight = this._getListHeightInStandardCard(oView, iRows);

				this._iNoOfItemsPerColumn = Math.floor(iLinkListHeight / iItemHeight); //calculate list length			

				var iNeededColums = Math.ceil(this._iAvailableItems / this._iNoOfItemsPerColumn);

				this._iVisibleColums = Math.min(iNeededColums, iCols);

				iPossibleItems = this._iVisibleColums * this._iNoOfItemsPerColumn;

			}
			if (iPossibleItems > this._iAvailableItems) {
				//less data available as space on the card, set iPossibleItems to max. Items 
				iPossibleItems = this._iAvailableItems;
			} else {
				//remove all items which are too much for this card
				for (var i = iPossibleItems; i < this._iAvailableItems; i++) {
					this._oListRest.addItem(oList.getItems()[iPossibleItems]);
				}
			}

			if (this._iVisibleColums > 1) {
				var oListRow = oView.byId("ovpListRow");
				var iItemOfList = this._iNoOfItemsPerColumn; //Set the Startindex for the new column
				var iLinkListIdCounter = 0;

				for (var j = this._iNoOfItemsPerColumn; j < iPossibleItems; j++) {
					if (iItemOfList >= this._iNoOfItemsPerColumn) {
						//create a new list            
						iItemOfList = 0;
						iLinkListIdCounter++;
						var sLinkListId = "ovpLinkList" + iLinkListIdCounter;
						var oNewList = new sap.m.List(oView.getId() + "--" + sLinkListId, {
							showSeparators: oList.getProperty("showSeparators")
						});
						//Add StyleClass
						this._aLinkListIds.push(sLinkListId);
						if (oList.hasStyleClass("_iNoOfItemsPerColumnPaddingCozy")) {
							oNewList.addStyleClass("sapOvpLinkListStandardPaddingCozy");
						} else {
							oNewList.addStyleClass("sapOvpLinkListStandardPaddingCompact");
						}
						oListRow.addItem(oNewList);
					}

					oNewList.addItem(oList.getItems()[this._iNoOfItemsPerColumn]);
					iItemOfList++;
				}
				var aItemsLastList = oNewList.getItems();
				aItemsLastList[aItemsLastList.length - 1].addEventDelegate(oDelegateOnAfter, this);
			} else {
				if (bInitiaLoad) {
					this.itemOnAfterRendering(null);
				} else {
					var aListItemsFirstList = oList.getItems();
					aListItemsFirstList[aListItemsFirstList.length - 1].addEventDelegate(oDelegateOnAfter, this);
				}
			}

		},

		/**
		 * Trigger resize of ItemLength
		 */
		resizeCard: function(newCardLayout) {
			//jQuery.sap.log.info("Resize Card");
			var oCardPropertiesModel = this.getCardPropertiesModel();
			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					this._resizeStandard(newCardLayout);
					break;

				case "carousel":
					this._resizeCarousel(newCardLayout);
					break;

				case "grid": //grid: experimental  -- DON´T USE
					this._resizeGrid(newCardLayout);
					break;
			}
		},

		_resizeStandard: function(newCardLayout) {

			// 1 Step - select the Original List
			var oView = this.getView();
			var oList = this.byId(this._aLinkListIds[0]);

			// 2 Step - copy from all addition list the Items to the original List and after that destroy the List
			for (var i = 1; i < this._aLinkListIds.length; i++) {
				var oListAdd = oView.byId(this._aLinkListIds[i]);
				var iListLength = oListAdd.getItems().length;
				for (var j = 0; j < iListLength; j++) {
					oList.addItem(oListAdd.getItems()[0]);
				}
				oListAdd.destroy();
			}

			// 3 Step - copy the saved "rest" to the Original List back as well 
			var iRestListLength = this._oListRest.getItems().length;
			try {
				for (var k = 0; k < iRestListLength; k++) {
					oList.addItem(this._oListRest.getItems()[0]);
				}
			} catch (e) {
				jQuery.sap.log.info("Error: " + e);
			}
			var oCardPropertiesModel = this.getCardPropertiesModel();
			oCardPropertiesModel.setProperty("/cardLayout/rowSpan", newCardLayout.rowSpan);
			oCardPropertiesModel.setProperty("/cardLayout/colSpan", newCardLayout.colSpan);

			// 4 Step build additional Lists (and if needed load additional Items from Backend)	
			var oBindingInfo = oList.getBindingInfo("items");
			var iItemHeight = this._getLinkListItemHigh();
			var iNewCardHeight = this._getListHeightInStandardCard(oView, newCardLayout.rowSpan);
			var iNewLengthTotal = Math.floor(iNewCardHeight / iItemHeight) * newCardLayout.colSpan;
			this._bInitialLoad = false;
			if (oBindingInfo) {
				//Card with backend data	
				if (iNewLengthTotal > this._iAvailableItems && oBindingInfo.length <= this._iAvailableItems) {
					oBindingInfo.length = iNewLengthTotal;
					oList.bindItems(oBindingInfo);
				} else {
					this._itemOnEventBuildStandard(oView, oCardPropertiesModel, newCardLayout.colSpan, newCardLayout.rowSpan, false);
				}
			} else {
				//Card with static content					
				this._itemOnEventBuildStandard(oView, oCardPropertiesModel, newCardLayout.colSpan, newCardLayout.rowSpan, false);
			}
		},

		_resizeCarousel: function(newCardLayout) {
			var oView = this.getView();
			var oCarousel = oView.byId("pictureCarousel");
			var oCardPropertiesModel = this.getCardPropertiesModel();
			oCardPropertiesModel.setProperty("/cardLayout/rowSpan", newCardLayout.rowSpan);
			//trigger a refresh by the following 
			oCarousel.next();
			oCarousel.previous();
			this._setListHeightInCarouselCard(oView, newCardLayout.rowSpan);
			this._setCarouselImageProperties(oView);
		},

		_resizeGrid: function(newCardLayout) {
			var oGrid = this.getView().byId("ovpLinkListGrid");
			var sOldColSpan = parseInt(this.getView().byId("idColSpan").getValue(), 10);
			var sNewColSpan = newCardLayout.colSpan;
			if (newCardLayout.colSpan > 5) {
				sNewColSpan = 5; // max supported column span
			}
			this.getView().byId("idColSpan").setValue(sNewColSpan);
			//Replace StyleClass dependent on colSpan
			if (sNewColSpan !== sOldColSpan) {
				var sStyleClassOld = "sapOvpCardLinkListGridColSpan" + sOldColSpan;
				oGrid.removeStyleClass(sStyleClassOld);
				var sStyleClassNew = "sapOvpCardLinkListGridColSpan" + sNewColSpan;
				oGrid.addStyleClass(sStyleClassNew);
			}
			//Calculate Items dependent on colSpan and rowSpan
			var iNewLength = newCardLayout.rowSpan * newCardLayout.colSpan * 2;
			var oBindingInfo = oGrid.getBindingInfo("items");
			var oItems = oGrid.getItems();
			if (iNewLength > oItems.length) {
				oBindingInfo.length = iNewLength;
				oGrid.bindItems(oBindingInfo);
			} else if (iNewLength < oItems.length) {
				var sRemoveItems = oItems.length - iNewLength;
				var sLastIndex = oItems.length - 1;
				for (var i = 0; i < sRemoveItems; i++) {
					var iItemIndex = sLastIndex - i;
					oGrid.removeItem(iItemIndex);
				}
			}
		},

		_setListHeightInCarouselCard: function(oView, iRows) {
			var iCarouselHeight = 0;

			if (iRows) {
				var iHeaderHeight = 0;
				var oHeader = oView.byId("ovpCardHeader");
				if (oHeader) {
					iHeaderHeight = oHeader.$().height();
				}

				var oCardPropertiesModel = this.getCardPropertiesModel();
				var iRowHeight = oCardPropertiesModel.getProperty("/cardLayout/iRowHeigthPx");

				// iCarouselHeight = ( iRows * RowHeight ) - ( HeaderHeight + Page Padding + Page indicator [dots] )
				iCarouselHeight = (iRows * iRowHeight) - (iHeaderHeight + 27 + 8);
				var oCarousel = oView.byId("pictureCarousel");
				oCarousel.$().height(iCarouselHeight);
			}
		},

		_setCarouselImageProperties: function(oView) {
			// Check if we have a restriction in two dimensions ( like in the dashboard layout)

			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");

			if (iRows && iCols) {
				//sets the width and height of the background image in case the carousel shows only one page.
				//check if there is one or more pages in the carousel
				var oCarousel = oView.byId("pictureCarousel"),
					oCardHeader = oView.byId("ovpCardHeader"),
					oImg = null,
					oPage = null,
					sImgHeight,
					sImgWidth;

				if (oCarousel.getPages().length === 1 && oCardHeader) {
					// try to get a reference to the cards image - if there is one it should be the last item of the page
					oPage = sap.ui.getCore().byId(oCarousel.getActivePage());
					if (oPage && oPage.getItems()[oPage.getItems().length - 1] instanceof sap.m.Image) {
						oImg = oPage.getItems()[oPage.getItems().length - 1];
						//calc image heigth -> needs to be set explicitly for background images
						//the image shall use the complete card minus the cards' pseudo header
						if (oPage.getItems().length === 1) {
							//the page contains only the picture
							sImgHeight = oCarousel.$().height();
						} else {
							// there is a inner header -> reduce picture height accordingly
							// the inner header is the first item of the page
							sImgHeight = oCarousel.$().height() - oPage.getItems()[0].$().outerHeight();
						}
						if (sImgHeight) {
							sImgHeight = sImgHeight + "px";
							oImg.setHeight(sImgHeight);
						}
						//calc image width -> needs to be set explicitly for background images
						//the image witdth shall be the same as the cards pseudo header width
						sImgWidth = oCardHeader.$().outerWidth();
						if (sImgWidth) {
							sImgWidth = sImgWidth + "px";
							oImg.setWidth(sImgWidth);
						}
						oImg.setMode(sap.m.ImageMode.Background);
						oImg.setBackgroundPosition("center center");
					}
				}
			}
		},

		_setListHeightInStandardCard: function(oView, iRows) {
			var nLinkListHeight = 0;
			var oList;
			var oDomParent;
			jQuery.sap.log.info("TEST: " + this._aLinkListIds.toString());
			for (var i = 0; i < this._aLinkListIds.length; i++) {
				oList = oView.byId(this._aLinkListIds[i]);
				jQuery.sap.log.info("TEST: " + i.toString());
				jQuery.sap.log.info("TEST: " + this._aLinkListIds[i].toString());
				oDomParent = oList.$().parent();
				nLinkListHeight = this._getListHeightInStandardCard(oView, iRows);
				oDomParent.height(nLinkListHeight);
			}

		},

		_getListHeightInStandardCard: function(oView, iRows) {
			var iLinkListHeight = 0;
			var oCardPropertiesModel = this.getCardPropertiesModel();
			if (iRows) {
				var iHeaderHeight = 0;
				var oHeader = oView.byId("ovpCardHeader");
				if (oHeader) {
					iHeaderHeight = oHeader.$().height();
				}
				var iRowHeight = oCardPropertiesModel.getProperty("/cardLayout/iRowHeigthPx");
				// nLinkListHeight = ( iRows * iRowHeight ) - ( CardBorderTop + HeaderHeight + LinkListBorderTop + CardBorderBottom + LinkListBorderBottom)
				iLinkListHeight = (iRows * iRowHeight) - (8 + iHeaderHeight + 8 + 8 + 8);
			}
			return iLinkListHeight;
		},

		_setListColumnWidthInStandardCard: function(oView, iCols) {
			var oList;
			var oDomParent;
			var sColumnWidth = "100%";
			if (this._aLinkListIds.length > 1) {
				for (var j = 0; j < this._aLinkListIds.length; j++) {
					oList = oView.byId(this._aLinkListIds[j]);
					oDomParent = oList.$().parent();
					sColumnWidth = (100 / iCols) + "%";
					oDomParent.width(sColumnWidth);
				}
			} else {
				oList = oView.byId(this._aLinkListIds[0]);
				if (oList) {
					oDomParent = oList.$().parent();
					oDomParent.width(sColumnWidth);
				}
			}
		},

		_getLinkListItemHigh: function(sListId) {
			var sLiId = (sListId) ? sListId : "ovpLinkList";
			var oCardPropertiesModel = this.getCardPropertiesModel(),
				oView = this.getView(),
				oList = oView.byId(sLiId),
				iItemHeight = 72,
				sPicture = "",
				bTitle = false,
				bSubTitle = false,
				iNoOfLines = 1,
				density = oCardPropertiesModel.getProperty("/densityStyle"),
				iTitleIndex = 0,
				iSubTitleIndex = 0;

			//Picture
			var aListItems = oList.getItems();
			for (var j = 0; j < aListItems.length; j++) {
				try {
					var sPictureUrl = aListItems[j]
						.getAggregation("content")[0]
						.getAggregation("items")[0]
						.getAggregation("items")[0]
						.getAggregation("items")[0]
						.getProperty("src");
					if (sPictureUrl.length > 0) {
						if (sPictureUrl.toLowerCase().indexOf("icon") > 0) {
							sPicture = "icon";
						} else {
							sPicture = "image";
						}
						iTitleIndex = 1;
						break;
					}
				} catch (e) {
					jQuery.sap.log.info("Item:" + j + " doesn´t contain a image");
				}
			}

			if (sPicture.length > 0) {
				iNoOfLines = 2;
			} else {
				//Title
				try {
					var sTitle = oList.getItems()[0]
						.getAggregation("content")[0]
						.getAggregation("items")[iTitleIndex]
						.getAggregation("items")[0].getProperty("text");

					bTitle = sTitle.length > 0;
					iSubTitleIndex = 1;
				} catch (e) {
					jQuery.sap.log.info("Item doesn´t contain a title");
				}

				//SubTitle
				try {
					var sSubTitle = oList.getItems()[0]
						.getAggregation("content")[0]
						.getAggregation("items")[iTitleIndex]
						.getAggregation("items")[iSubTitleIndex]
						.getProperty("text");

					bSubTitle = sSubTitle.length > 0;
				} catch (e) {
					jQuery.sap.log.info("Item doesn´t contain a subTitle");
				}

				if (bTitle === true && bSubTitle === true) {
					iNoOfLines = 2;
				}
			}

			if (density === "cozy") {
				iItemHeight = 72;
				if (iNoOfLines === 1) {
					iItemHeight = sPicture !== "image" ? 40 : 56;
				}
			} else {
				iItemHeight = 60;
				if (iNoOfLines === 1) {
					iItemHeight = 48;
				}
			}
			return iItemHeight;
		},

		/**
		 * Navigates in case of usage of local data in the content of the card
		 */
		onLinkListItemPressLocalData: function(oEvent) {
			var sTargetUrl = oEvent.getSource().data("targetUri");
			var sInNewWindow = oEvent.getSource().data("openInNewWindow");
			var sBaseUrl = this.getView().getModel("ovpCardProperties").getProperty("/baseUrl");

			sTargetUrl = this.buildUrl(sBaseUrl, sTargetUrl);

			if (sInNewWindow === "true") {
				window.open(sTargetUrl);
			} else {
				window.location.href = sTargetUrl;
			}
		},

		/**
		 * Calls a function import in case of usage of local data in the content of the card
		 */
		onLinkListActionPressLocalData: function(oEvent) {
			var sAction = oEvent.getSource().data("dataAction");

			this.getView().getModel().callFunction(sAction, {
				method: "POST",
				urlParameters: {
					FunctionImport: sAction
				},
				success: (this.onFuImpSuccess.bind(this)),
				error: (this.onFuImpFailed.bind(this))
			});
		},

		onFuImpSuccess: function(oEvent) {
			sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Success"), {
				duration: 3000
			});
		},

		onFuImpFailed: function(oResponse) {
			sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error"), {
				duration: 3000
			});
		},

		onLinkListItemPress: function(oEvent) {
			var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty(
				"/annotationPath"));
			this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
		},

		/**
		 * Open the Details Popover
		 */
		onLinkPopover: function(oEvent) {
			var oPopover;
			switch (this.getCardPropertiesModel().getProperty("/listFlavor")) {
				case "grid": //grid: experimental  -- DON´T USE
					oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation("items")[1].getAggregation(
						"items")[1];
					break;

				case "standard":
					oPopover = this.getView().byId("ovpListRow").getParent().getAggregation("items")[2];
					if (!oPopover) {
						oPopover = this.getView().byId("ovpListRow").getParent().getAggregation("items")[1];
					}
					break;

				case "carousel":
					if (oEvent.getParameter("id").indexOf("link") > 0) {
						oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getAggregation("items")[1];
					} else {
						oPopover = oEvent.getSource().getParent().getParent().getParent().getAggregation("items")[1];
					}
					break;
			}

			oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
			oPopover.openBy(oEvent.getSource());
		},

		/**
		 * Do CrossApplicationNavigation using the Identification annotation - all items have the same target app
		 */
		onLinkNavigationSingleTarget: function(oEvent) {
			var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(),
				"com.sap.vocabularies.UI.v1.Identification");
			this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
		},

		/**
		 * Do CrossApplicationNavigation
		 */
		onLinkNavigation: function(oEvent) {
			if (sap.ushell.Container.getService("CrossApplicationNavigation")) {
				var oBindingContext = oEvent.getSource().getBindingContext();
				//var oNavArguments = {target : {	semanticObject : "Action",	action : "toappnavsample"} }; // for test with testOVP.html
				if (oBindingContext.getProperty("SemanticObject")) {
					var oNavArguments = {
						target: {
							semanticObject: oBindingContext.getProperty("SemanticObject"),
							action: oBindingContext.getProperty("SemanticAction")
						}
					};
					sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
				}
			}
		},

		buildUrl: function(sBaseUrl, sManifestUrl) {
			if (sManifestUrl.startsWith(sBaseUrl) || sManifestUrl.indexOf("://") > 0) {
				return sManifestUrl;
			} else if (sManifestUrl.startsWith("/")) {
				return sBaseUrl + sManifestUrl;
			} else {
				return sBaseUrl + "/" + sManifestUrl;
			}
		},
		/**
		 * Calls a function import
		 */
		onLinkListActionPress: function(oEvent) {
			var sAction = oEvent.getSource().data("dataAction");

			this.getView().getModel().callFunction(sAction, {
				method: "POST",
				urlParameters: {
					FunctionImport: sAction
				},
				success: (this.onFuImpSuccess.bind(this)),
				error: (this.onFuImpFailed.bind(this))
			});
		},

		/**
		 * CrossApp Navigation with staticContent
		 */
		onLinkListSemanticObjectPressLocalData: function(oEvent) {
			var oStaticContent = this.getCardPropertiesModel().getProperty("/staticContent");
			var iRowIndex = parseInt(oEvent.getSource().data("contentRowIndex"), 10);
			var oNavArguments = {
				target: {
					semanticObject: oStaticContent[iRowIndex].semanticObject,
					action: oStaticContent[iRowIndex].action
				},
				params: oStaticContent[iRowIndex].params
			};

			sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);

		}

	});
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.list.List", {
        maxValue: -1,
        counter: 0,
        arrayLength: 0,
        onInit: function () {
            this.counter = 0;
        },

        onListItemPress: function (oEvent) {
            var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
            this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
        },

        normalizeValueToPercentage: function (value) {
            var oEntityType = this.getEntityType(),
                sAnnotationPath = this.getCardPropertiesModel().getProperty("/annotationPath"),
                aRecords = oEntityType[sAnnotationPath],
                context = this.getMetaModel().createBindingContext(oEntityType.$path + "/" + sAnnotationPath);
            if (sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit(context, aRecords)) {
                var iPercent = parseInt(value, 10);
                return iPercent <= 100 ? iPercent : 100;
            }
            var maxV = this._getMaxValue();
            if (this.counter == this.arrayLength) {
                this.counter = 0;
                this.maxValue = -1;
            }
            if (value > maxV) {
                return 100;
            } else {
                var iValue = (parseInt(value, 10) * 100) / maxV;
                if (iValue != 0) {
                    return iValue;
                } else { //if the value is 0 we want to show some minimal value in the bar
                    return 0.5;
                }
            }
        },

        _getMaxValue: function () {
            this.counter++;
            if (this.maxValue != -1) {
                return this.maxValue;
            }
            var oEntityType = this.getEntityType(),
                sAnnotationPath = this.getCardPropertiesModel().getProperty("/annotationPath"),
                aRecords = oEntityType[sAnnotationPath],
                context = this.getMetaModel().createBindingContext(oEntityType.$path + "/" + sAnnotationPath);
            var dataPointValue = sap.ovp.cards.AnnotationHelper.getFirstDataPointValue(context, aRecords);
            var barList = this.getView().byId("ovpList"),
                listItems = barList.getBinding("items"),
                itemsContextsArray = listItems.getCurrentContexts();
            this.arrayLength = itemsContextsArray.length;

            for (var i = 0; i < itemsContextsArray.length; i++) {
                if (parseInt(itemsContextsArray[i].getObject()[dataPointValue], 10) > this.maxValue) {
                    this.maxValue = parseInt(itemsContextsArray[i].getObject()[dataPointValue], 10);
                }
            }
            return this.maxValue;
        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function() {
            var list = this.getView().byId("ovpList");
            return list.getBinding("items");
        }


    });
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.loading.Loading", {

        onInit: function () {
        },

        onAfterRendering: function(){
            var oView = this.getView();
            oView.addStyleClass("sapOvpLoadingCard");
            var loadingFooter = oView.byId("ovpLoadingFooter");

            var sState = this.getCardPropertiesModel().getProperty("/state");

            if (sState === sap.ovp.cards.loading.State.ERROR){
                loadingFooter.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cannotLoadCard"));
            } else {
                //sState === sap.ovp.cards.loading.State.LOADING
                setTimeout(function () {
                    loadingFooter.setBusy(true);
                }, 6000);

                setTimeout(function(){
                    loadingFooter.setBusy(false);
                    loadingFooter.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cannotLoadCard"));
                }, 9000);
            }
        }
    });
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.table.Table", {

        onInit: function () {
        },

        onColumnListItemPress: function (oEvent) {
            var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
            this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function() {
            var table = this.getView().byId("ovpTable");
            return table.getBinding("items");
        }
    });
})();
jQuery.sap.declare('sap.ovp.library-all');
jQuery.sap.declare('sap.ovp.cards.charts.analytical.analyticalChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.bubble.BubbleChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.donut.DonutChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.line.LineChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.image.Image.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.linklist.LinkList.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.list.List.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.loading.Loading.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.table.Table.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ovp.app.Component') ) {
(function() {
	"use strict";
	/*global sap, jQuery */

	/**
	 * @fileOverview Application component to display information on entities from the GWSAMPLE_BASIC
	 *   OData service.
	 * @version 1.38.10
	 */
	jQuery.sap.declare("sap.ovp.app.Component");
	jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained


	sap.ui.core.UIComponent.extend("sap.ovp.app.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			routing: {
				config: {
					routerClass: sap.ui.core.routing.Router
				},
				targets: {},
				routes: []
			},

			properties: {
				"cardContainerFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.app.CardContainer"
				},
				"dashboardLayoutUtil": {
					"type": "sap.ovp.ui.DashboardLayoutUtil"
				}
			},

			version: "1.38.10",

			library: "sap.ovp.app",

			dependencies: {
				libs: ["sap.m",
					"sap.ui.comp",
					"sap.uxap"
				],
				components: []
			},
			config: {
				fullWidth: true,
				hideLightBackground: true
			}
		},

		_addModelsMeasurements: function() {
			var oModels = this.oModels;
			var oModel, sModel;
			for (sModel in oModels) {
				oModel = this.getModel(sModel);
				if (oModel.getMetaModel()) {
					this._addModelMeasurements(oModel, sModel);
				}
			}
		},

		_addModelMeasurements: function(oModel, sModel) {
			var sId = "ovp:ModelLoading-" + sModel;
			var sIdBatch = "ovp:ModelBatchCall-" + sModel + ":";
			jQuery.sap.measure.start(sId, "Component createContent -> MetaData loaded", "ovp");
			oModel.getMetaModel().loaded().then(function() {
				jQuery.sap.measure.end(sId);
			});

			oModel.attachBatchRequestSent(function(oEvent) {
				jQuery.sap.measure.start(sIdBatch + oEvent.getParameter("ID"), "BatchRequestSent -> BatchRequestCompleted", "ovp");
			});
			oModel.attachBatchRequestCompleted(function(oEvent) {
				jQuery.sap.measure.end(sIdBatch + oEvent.getParameter("ID"));
			});

		},

		/**
		 * get the merged sap.ovp section from all component hierarchy
		 * @returns merged sap.ovp section from manifes files
		 */
		getOvpConfig: function() {
			var oOvpConfig;
			var aExtendArgs = [];
			var oManifest = this.getMetadata();
			//loop over the manifest hierarchy till we reach the current generic component
			while (oManifest && oManifest.getComponentName() !== "sap.ovp.app") {
				oOvpConfig = oManifest.getManifestEntry("sap.ovp");
				if (oOvpConfig) {
					//as the last object is the dominant one we use unshift and not push
					aExtendArgs.unshift(oOvpConfig);
				}
				oManifest = oManifest.getParent();
			}
			//add an empty object for the merged config as we don't whant to change the actual manifest objects
			aExtendArgs.unshift({});
			//add deep flag so the merge would be recurcive
			aExtendArgs.unshift(true);
			oOvpConfig = jQuery.extend.apply(jQuery, aExtendArgs);
			return oOvpConfig;
		},

		createXMLView: function(ovpConfig) {
			jQuery.sap.measure.start("ovp:AppCreateContent", "OVP app Component createContent", "ovp");
			this._addModelsMeasurements();

			this.getRouter().initialize();
			var appConfig = this.getMetadata().getManifestEntry("sap.app");
			var uiConfig = this.getMetadata().getManifestEntry("sap.ui");
			var sIcon = jQuery.sap.getObject("icons.icon", undefined, uiConfig);

			var sComponentName = this.getMetadata().getComponentName();
			ovpConfig.baseUrl = jQuery.sap.getModulePath(sComponentName);
			var uiModel = new sap.ui.model.json.JSONModel(ovpConfig);

			uiModel.setProperty("/title", jQuery.sap.getObject("title", undefined, appConfig));
			uiModel.setProperty("/description", jQuery.sap.getObject("description", undefined, appConfig));

			if (sIcon) {
				if (sIcon.indexOf("sap-icon") < 0 && sIcon.charAt(0) !== '/') {
					sIcon = ovpConfig.baseUrl + "/" + sIcon;
				}
				uiModel.setProperty("/icon", sIcon);
			}

			//convert cards object into sorted array
			var oCards = ovpConfig.cards;
			var aCards = [];
			var oCard;
			for (var cardKey in oCards) {
				if (oCards.hasOwnProperty(cardKey) && oCards[cardKey]) {
					oCard = oCards[cardKey];
					oCard.id = cardKey;
					aCards.push(oCard);
				}
			}

			aCards.sort(function(card1, card2) {
				if (card1.id < card2.id) {
					return -1;
				} else if (card1.id > card2.id) {
					return 1;
				} else {
					return 0;
				}
			});

			uiModel.setProperty("/cards", aCards);

			// Layout switch: read 'containerLayout' property from manifest
			if (ovpConfig.containerLayout && ovpConfig.containerLayout === "dashboard") {
                jQuery.sap.require("sap.ovp.ui.DashboardLayoutUtil");
				uiModel.setProperty("/cardContainerFragment", "sap.ovp.app.DashboardCardContainer");
				var oDblUtil = new sap.ovp.ui.DashboardLayoutUtil(uiModel);
				this.setDashboardLayoutUtil(oDblUtil);
			} else {
				// default + compatibility --> EasyScanLayout
				uiModel.setProperty("/cardContainerFragment", this.getCardContainerFragment());
			}
            var oValueHelpEntityMap = this.createMapForValueHelpEntity(ovpConfig);
            uiModel.setProperty("/ValueHelpEntityMap", oValueHelpEntityMap);
			this.setModel(uiModel, "ui");
			var oFilterModel = this.getModel(ovpConfig.globalFilterModel);
			this.setModel(oFilterModel);
			var oEntityType = oFilterModel.getMetaModel().getODataEntityType(oFilterModel.getMetaModel().getODataEntityContainer().namespace +
				"." + ovpConfig.globalFilterEntityType, true);
			var oView = sap.ui.view({
				height: "100%",
				preprocessors: {
					xml: {
						bindingContexts: {
							ui: uiModel.createBindingContext("/"),
							meta: oFilterModel.getMetaModel().createBindingContext(oEntityType)
						},
						models: {
							ui: uiModel,
							meta: oFilterModel.getMetaModel()
						}
					}
				},
				type: sap.ui.core.mvc.ViewType.XML,
				viewName: "sap.ovp.app.Main"
			});

			jQuery.sap.measure.end("ovp:AppCreateContent");

			return oView;
		},

		setContainer: function() {
			var ovpConfig = this.getOvpConfig();
			var oFilterModel = this.getModel(ovpConfig.globalFilterModel);
			// call overwritten setContainer (sets this.oContainer)
			sap.ui.core.UIComponent.prototype.setContainer.apply(this, arguments);

			if (oFilterModel) {
				oFilterModel.getMetaModel().loaded().then(function() {
					// Do the templating once the metamodel is loaded
					this.runAsOwner(function() {
						var oView = this.createXMLView(ovpConfig);
						this.setAggregation("rootControl", oView);
						this.oContainer.invalidate();
					}.bind(this));
				}.bind(this));
			}

		},

        createMapForEntityContainer: function (oEntityContainer) {
            var oEntitySetMap = {};
            var oEntitySets = oEntityContainer.entitySet;
            for (var i = 0; i < oEntitySets.length; i++) {
                oEntitySetMap[oEntitySets[i].name] = oEntitySets[i].entityType;
            }
            return oEntitySetMap;

        },

        createMapForValueHelpEntity: function (oOvpConfig) {
            var oFilterModel = this.getModel(oOvpConfig.globalFilterModel);
            var oValueHelpEntityMap = [];
            var oFilterEntityType = oFilterModel.getMetaModel().getODataEntityType(oFilterModel.getMetaModel().getODataEntityContainer().namespace +
                "." + oOvpConfig.globalFilterEntityType);
            if (!oFilterEntityType) {
                return oValueHelpEntityMap;
            }
            var oEntityCollection = [];
            oEntityCollection.push(oFilterEntityType);
            var counter = 0;
            var bNavigationProperty = false;
            var oEntitySetMap = this.createMapForEntityContainer(oFilterModel.getMetaModel().getODataEntityContainer());
            if (oFilterEntityType.navigationProperty) {
                bNavigationProperty = true;
            }
            while (oEntityCollection.length != 0) {
                var oEntityType = oEntityCollection.shift();
                for (var i = 0; i < oEntityType.property.length; i++) {
                    var oProp = oEntityType.property[i];
                    if (oProp["com.sap.vocabularies.Common.v1.ValueList"]) {
                        oValueHelpEntityMap.push(oEntitySetMap[oProp["com.sap.vocabularies.Common.v1.ValueList"].CollectionPath.String]);
                    }
                }
                if (!bNavigationProperty || !(oFilterEntityType.navigationProperty[counter])) {
                    break;
                }
                //get association
                var sAssociationEntity = oFilterModel.getMetaModel().getODataAssociationEnd(oFilterEntityType, oFilterEntityType.navigationProperty[counter].name).type;
                var oNavigationEntityType = oFilterModel.getMetaModel().getODataEntityType(sAssociationEntity);
                oEntityCollection.push(oNavigationEntityType);
                counter++;
            }
            return oValueHelpEntityMap;
        }
	});
}());
}; // end of sap/ovp/app/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.ActionUtils') ) {

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    jQuery.sap.declare("sap.ovp.cards.ActionUtils");

    sap.ovp.cards.ActionUtils = {};

    sap.ovp.cards.ActionUtils.getActionInfo = function(oContext, action, oEntityType) {

        var metaModel = oContext.getModel().getMetaModel();
        var sFunctionName = action.action.split('/')[1];
        var oContextObject = oContext.getObject();
        var actionData = {
            oContext: oContext,
            sFunctionImportPath: action.action,
            sFunctionLabel: action.label,
            oFunctionImport: metaModel.getODataFunctionImport(sFunctionName),
            parameterData: {},
            allParameters: []
        };
        var oParameterValue;

        if (actionData.oFunctionImport.parameter) {
            var keyMap = this._getKeyProperties(oEntityType);
            for (var i = 0; i < actionData.oFunctionImport.parameter.length; i++) {
                var oParameter = actionData.oFunctionImport.parameter[i];
                this._addParamLabel(oParameter, oEntityType, metaModel);
                if (keyMap[oParameter.name]) {
                    oParameter.isKey = true;
                }

                if (typeof oParameter.nullable === 'undefined') {
                    oParameter.nullable = true;// default is not mandatory parameter == could be null
                }
                if (oContextObject.hasOwnProperty(oParameter.name)) {
                    oParameterValue = oContextObject[oParameter.name];
                } else {
                    oParameterValue = "";
                }

                actionData.parameterData[oParameter.name] = oParameterValue;
                actionData.allParameters.push(oParameter);
            }
        }
        return actionData;
    };

    sap.ovp.cards.ActionUtils._getKeyProperties = function(oEntityType){
        var oKeyMap = {};

        if (oEntityType && oEntityType.key && oEntityType.key.propertyRef){
            for (var i = 0; i < oEntityType.key.propertyRef.length; i++) {
                var sKeyName = oEntityType.key.propertyRef[i].name;
                oKeyMap[sKeyName] = true;
            }
        }

        return oKeyMap;
    };

    sap.ovp.cards.ActionUtils._addParamLabel = function (oParameter, oEntityType, metaModel){
        if (oEntityType && oParameter && !oParameter["com.sap.vocabularies.Common.v1.Label"]) {

            var oProperty = metaModel.getODataProperty(oEntityType, oParameter.name, false);
            if (oProperty && oProperty["com.sap.vocabularies.Common.v1.Label"]) {
                // copy label from property to parameter with same name as default if no label is set for function import parameter
                oParameter["com.sap.vocabularies.Common.v1.Label"] = oProperty["com.sap.vocabularies.Common.v1.Label"];
            } else if (oProperty && oProperty["sap:label"]) {
                oParameter["sap:label"] = oProperty["sap:label"];
            }
        }
    };

    sap.ovp.cards.ActionUtils.buildParametersForm = function(actionData, onFieldChangeCB) {

        function getParamLabel(oParameter){
            var sLabel = "";
            if (oParameter["com.sap.vocabularies.Common.v1.Label"]) {
                sLabel = oParameter["com.sap.vocabularies.Common.v1.Label"].String;
            } else if (oParameter["sap:label"]) {
                sLabel = oParameter["sap:label"];
            } else {
                sLabel = oParameter.name;
            }

            return sLabel;
        }

        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.ui.comp.smartfield.SmartField");

        var oForm = new sap.ui.layout.form.SimpleForm({
            editable: true
        });
        var aFields = [];

        for (var i = 0; i < actionData.allParameters.length; i++) {
            var oParameter = actionData.allParameters[i];

            var sParameterLabel = getParamLabel(oParameter);
            var sBinding = '{/' + oParameter.name + '}';
            var sJSONType = null;
            var sEdmType = oParameter.type;

            // max length - default undefined if not set in OData metadata
            var iMaxLength = oParameter.maxLength ? parseInt(oParameter.maxLength, 10) : undefined;

            // covers Edm.Byte, Edm.SByte, Edm.Boolean, Edm.Int16, Edm.Int32, Edm.Time
            if (sEdmType === 'Edm.Boolean') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Boolean;
            } else if (sEdmType === 'Edm.Byte' || sEdmType === 'Edm.SByte' || sEdmType === 'Edm.Int16' || sEdmType === 'Edm.Int32') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Integer;
            } else {
                sJSONType = sap.ui.comp.smartfield.JSONType.String;
            }

            var isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);

            var oField = new sap.ui.comp.smartfield.SmartField({
                value: sBinding,
                mandatory: isMandatory,
                jsontype: sJSONType,
                maxLength: iMaxLength,
                editable:!oParameter.isKey
            });
            oField.attachChange(onFieldChangeCB);
            aFields.push(oField);
            var oLabel = new sap.ui.comp.smartfield.SmartLabel();
            oLabel.setRequired(isMandatory && !oParameter.isKey);

            oLabel.setText(sParameterLabel);
            oLabel.setLabelFor(oField);

            oForm.addContent(oLabel);
            oForm.addContent(oField);
        }

        return oForm;
    };

    sap.ovp.cards.ActionUtils.getParameters = function (oParameterModel, functionImport){
        var paramObject = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return paramObject.preparedParameterData;
    };

    sap.ovp.cards.ActionUtils.mandatoryParamsMissing = function(oParameterModel, functionImport) {
        var oValidatedParams = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return oValidatedParams.missingMandatoryParameters && oValidatedParams.missingMandatoryParameters.length > 0;
    };

    sap.ovp.cards.ActionUtils._validateParametersValue = function(oParameterModel, functionImport) {
        var aMissingMandatoryParameters = [];
        var oModelParameterData = oParameterModel.getObject('/');
        var oPreparedParameterData = {};
        var oValue, isMandatory;
        for (var i = 0; i < functionImport.parameter.length; i++) {
            var oParameter = functionImport.parameter[i];
            var sParameterName = oParameter.name;
            if (oModelParameterData.hasOwnProperty(sParameterName)) {

                oValue = oModelParameterData[sParameterName];
                isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);
                if (oValue === undefined || oValue === "") {
                    if (isMandatory) {
                        if (oParameter.type === 'Edm.Boolean'){
                            oPreparedParameterData[sParameterName] = false;
                        } else {
                            aMissingMandatoryParameters.push(oParameter);
                        }
                    }
                } else {
                    oPreparedParameterData[sParameterName] = oValue;
                }
            } else {
                throw new Error("Unknown parameter: " + sParameterName);
            }
        }
        return {
            preparedParameterData: oPreparedParameterData,
            missingMandatoryParameters: aMissingMandatoryParameters
        };
    };

    sap.ovp.cards.ActionUtils._isMandatoryParameter = function(oParameter) {
        return !sap.ovp.cards.ActionUtils._toBoolean(oParameter.nullable);
    };

    sap.ovp.cards.ActionUtils._toBoolean = function(oParameterValue) {
        if (typeof oParameterValue === "string"){
            var oValue = oParameterValue.toLowerCase();
            return !(oValue == "false" || oValue == "" || oValue == " ");
        }

        return !!oParameterValue;
    };
}());

}; // end of sap/ovp/cards/ActionUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.AnnotationHelper') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function() {
	"use strict";
	/*global dispatchEvent, document, jQuery, localStorage, sap */

	// ensure that sap.ushell exists
	jQuery.sap.declare("sap.ovp.cards.AnnotationHelper");

	sap.ovp.cards.AnnotationHelper = {};
	sap.ovp.cards.AnnotationHelper.formatFunctions = {
		count: 0
	};
	sap.ovp.cards.AnnotationHelper.NumberFormatFunctions = {};

	sap.ovp.cards.AnnotationHelper.criticalityConstants = {
		StateValues: {
			None: "None",
			Negative: "Error",
			Critical: "Warning",
			Positive: "Success"
		},
		ColorValues: {
			None: "Neutral",
			Negative: "Error",
			Critical: "Critical",
			Positive: "Good"
		}
	};

	function getCacheEntry(iContext, sKey) {
		if (iContext.getSetting) {
			var oCache = iContext.getSetting("_ovpCache");
			// temp fix
			if (oCache) {
				return oCache[sKey];
			}
		}
		return undefined;
	}

	function setCacheEntry(iContext, sKey, oValue) {
		if (iContext.getSetting) {
			var oCache = iContext.getSetting("_ovpCache");
			// temp fix			
			if (oCache) {
				oCache[sKey] = oValue;
			}
		}
	}

	function setFormatFunctionAndGetFunctionName(func, sNamePrefix) {
		if (!sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix]) {
			sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix] = 0;
		}
		sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix]++;

		var sFuncName = sNamePrefix + sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix];
		sap.ovp.cards.AnnotationHelper.formatFunctions[sFuncName] = func;

		return "sap.ovp.cards.AnnotationHelper.formatFunctions." + sFuncName;
	}

	function criticality2state(criticality, oCriticalityConfigValues) {
		var sState;
		if (oCriticalityConfigValues) {
			sState = oCriticalityConfigValues.None;
			if (criticality && criticality.EnumMember) {
				var val = criticality.EnumMember;
				if (endsWith(val, 'Negative')) {
					sState = oCriticalityConfigValues.Negative;
				} else if (endsWith(val, 'Critical')) {
					sState = oCriticalityConfigValues.Critical;
				} else if (endsWith(val, 'Positive')) {
					sState = oCriticalityConfigValues.Positive;
				}
			}
		}
		return sState;
	}

	function endsWith(sString, sSuffix) {
		return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
	}

	function calculateCriticalityState(value, sImproveDirection, deviationLow, deviationHigh, toleranceLow, toleranceHigh,
		oCriticalityConfigValues) {

		var oCriticality = {};
		oCriticality.EnumMember = "None";

		// number could be a zero number so check if it is not undefined
		if (value !== undefined) {
			value = Number(value);

			if (endsWith(sImproveDirection, "Minimize") || endsWith(sImproveDirection, "Minimizing")) {

				if ((toleranceHigh !== undefined && toleranceHigh !== null) && (deviationHigh != undefined && deviationHigh != null)) {
					if (value <= toleranceHigh) {
						oCriticality.EnumMember = "Positive";
					} else if (value > deviationHigh) {
						oCriticality.EnumMember = "Negative";
					} else {
						oCriticality.EnumMember = "Critical";
					}
				}

			} else if (endsWith(sImproveDirection, "Maximize") || endsWith(sImproveDirection, "Maximizing")) {

				if ((toleranceLow !== undefined && toleranceLow !== null) && (deviationLow !== undefined && deviationLow !== null)) {
					if (value >= toleranceLow) {
						oCriticality.EnumMember = "Positive";
					} else if (value < deviationLow) {
						oCriticality.EnumMember = "Negative";
					} else {
						oCriticality.EnumMember = "Critical";
					}
				}

			} else if (endsWith(sImproveDirection, "Target")) {

				if ((toleranceHigh !== undefined && toleranceHigh !== null) && (deviationHigh != undefined && deviationHigh != null) && (toleranceLow !== undefined && toleranceLow !== null) && (deviationLow !== undefined && deviationLow !== null)) {
					if (value >= toleranceLow && value <= toleranceHigh) {
						oCriticality.EnumMember = "Positive";
					} else if (value < deviationLow || value > deviationHigh) {
						oCriticality.EnumMember = "Negative";
					} else {
						oCriticality.EnumMember = "Critical";
					}
				}
			}
		}

		return criticality2state(oCriticality, oCriticalityConfigValues);
	}

	/* Trend Direction for Header */
	function calculateTrendDirection(aggregateValue, referenceValue, upDifference, downDifference) {
		if (!aggregateValue || !referenceValue) {
			return;
		}

		aggregateValue = Number(aggregateValue);

		if (!upDifference && (aggregateValue - referenceValue >= 0)) {
			return "Up";
		}
		if (!downDifference && (aggregateValue - referenceValue <= 0)) {
			return "Down";
		}

		if (referenceValue && upDifference && (aggregateValue - referenceValue >= upDifference)) {
			return "Up";
		}
		if (referenceValue && downDifference && (aggregateValue - referenceValue <= downDifference)) {
			return "Down";
		}
	}

	function getSortedDataFields(iContext, aCollection) {
		var sCacheKey = iContext.getPath() + "-DataFields-Sorted";
		var aSortedFields = getCacheEntry(iContext, sCacheKey);
		if (!aSortedFields) {
			var aDataPoints = getSortedDataPoints(iContext, aCollection);
			var aDataPointsValues = aDataPoints.map(function(oDataPoint) {
				return oDataPoint.Value.Path;
			});
            aDataPointsValues = aDataPointsValues.filter(function (element) {
                return !!element;
            });
			aSortedFields = aCollection.filter(function(item) {
				if (item.RecordType === "com.sap.vocabularies.UI.v1.DataField" && aDataPointsValues.indexOf(item.Value.Path) === -1) {
					return true;
				}
				return false;
			});
            aSortedFields = sortCollectionByImportance(aSortedFields);
			setCacheEntry(iContext, sCacheKey, aSortedFields);
		}
		return aSortedFields;
	}

	function getSortedDataPoints(iContext, aCollection) {
		var sCacheKey = iContext.getPath() + "-DataPoints-Sorted";
		var aSortedFields = getCacheEntry(iContext, sCacheKey);
		if (!aSortedFields) {
			aSortedFields = aCollection.filter(isDataFieldForAnnotation);
            aSortedFields = sortCollectionByImportance(aSortedFields);
			var sEntityTypePath;
			for (var i = 0; i < aSortedFields.length; i++) {
				sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
				aSortedFields[i] = iContext.getModel().getProperty(getTargetPathForDataFieldForAnnotation(sEntityTypePath, aSortedFields[i]));
				sEntityTypePath = "";
			}
			setCacheEntry(iContext, sCacheKey, aSortedFields);
		}
		return aSortedFields;
	}

	function isDataFieldForAnnotation(oItem) {
		if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" &&
			oItem.Target.AnnotationPath.match(/@com.sap.vocabularies.UI.v1.DataPoint.*/)) {
			return true;
		}
		return false;
	}

	function getTargetPathForDataFieldForAnnotation(sEntityTypePath, oDataFieldForAnnotation) {
		if (sEntityTypePath && !endsWith(sEntityTypePath, '/')) {
			sEntityTypePath += '/';
		}
		return sEntityTypePath + oDataFieldForAnnotation.Target.AnnotationPath.slice(1);
	}

    function getImportance(oDataField) {
        var sImportance, iImportance;
        if (oDataField["com.sap.vocabularies.UI.v1.Importance"]) {
            sImportance = oDataField["com.sap.vocabularies.UI.v1.Importance"].EnumMember;
            switch (sImportance) {
                case "com.sap.vocabularies.UI.v1.ImportanceType/High":
                    iImportance = 1;
                    break;
                case "com.sap.vocabularies.UI.v1.ImportanceType/Medium":
                    iImportance = 2;
                    break;
                case "com.sap.vocabularies.UI.v1.ImportanceType/Low":
                    iImportance = 3;
                    break;
            }
        } else {
            iImportance = 4;
        }
        return iImportance;
    }

    /**
     * Sorting the collection by importance. Using merge sort as the Javascript sort implementation behaves unexpectedly
     * for same elements - it is a known issue
     * @param aCollection
     * @returns [] - SortedArray
     */
    function sortCollectionByImportance(aCollection) {
        if (aCollection.length < 2) {
            return aCollection;
        }

        var middle = parseInt(aCollection.length / 2, 10);
        var left = aCollection.slice(0, middle);
        var right = aCollection.slice(middle, aCollection.length);

        return merge(sortCollectionByImportance(left), sortCollectionByImportance(right));
    }

    function merge(left, right) {
        var aSortedArray = [];
        while (left.length && right.length) {
            var aImportance = getImportance(left[0]),
                bImportance = getImportance(right[0]);
            if (aImportance <= bImportance) {
                aSortedArray.push(left.shift());
            } else {
                aSortedArray.push(right.shift());
            }
        }
        while (left.length) {
            aSortedArray.push(left.shift());
        }
        while (right.length) {
            aSortedArray.push(right.shift());
        }

        return aSortedArray;
    }

	function formatDataField(iContext, aCollection, index) {
		var item = getSortedDataFields(iContext, aCollection)[index];
		if (item) {
			return formatField(iContext, item);
		}
		return "";
	}

	function getDataFieldName(iContext, aCollection, index) {
		var item = getSortedDataFields(iContext, aCollection)[index];

		if (item) {
			return item.Label.String;
		}
		return "";
	}

	function getDataPointName(iContext, aCollection, index) {
		var item = getSortedDataPoints(iContext, aCollection)[index];

		if (item && item.Title) {
			return item.Title.String;
		}
		return "";
	}

	function formatDataPoint(iContext, aCollection, index) {
		var item = getSortedDataPoints(iContext, aCollection)[index];
		if (!item) {
			return "";
		}

		var oModel = iContext.getSetting('ovpCardProperties');
		var oEntityType = oModel.getProperty("/entityType");
		var oMetaModel = oModel.getProperty("/metaModel");

		return _formatDataPoint(iContext, item, oEntityType, oMetaModel);
	}

    function _formatDataPoint(iContext, oItem, oEntityType, oMetaModel) {

        if (!oItem || !oItem.Value) {
            return "";
        }

        var oModel = iContext.getSetting('ovpCardProperties');
        var bIgnoreSapText = false;
        if (oModel) {
            var bExtractedIgnoreSapText = oModel.getProperty("/ignoreSapText");
            bIgnoreSapText = bExtractedIgnoreSapText == undefined ? bIgnoreSapText : bExtractedIgnoreSapText;
        }
        var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oItem.Value.Path);

        //Support sap:aggregation-role=measure configuration
        var bMeasuresType = false;
        if (bIgnoreSapText == true) {
            if (oEntityTypeProperty && oEntityTypeProperty["sap:aggregation-role"] == "measure") {
                bMeasuresType = true;
            }
        }

        //Support sap:text attribute
        if (!bMeasuresType) {
            if (oEntityTypeProperty && oEntityTypeProperty["sap:text"]) {
                oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oEntityTypeProperty["sap:text"]);
                oItem = {
                    Value: {
                        Path: oEntityTypeProperty.name
                    }
                };
            }
        }
        return formatField(iContext, oItem);
    }

	function formatField(iContext, item, bDontIncludeUOM, bIncludeOnlyUOM) {

		if (item.Value.Apply) {
			return sap.ui.model.odata.AnnotationHelper.format(iContext, item.Value);
		}

		var oModel = iContext.getSetting('ovpCardProperties');
		var oEntityType = oModel.getProperty("/entityType");
		var oMetaModel = oModel.getProperty("/metaModel");

		return _formatField(iContext, item, oEntityType, oMetaModel, bDontIncludeUOM, bIncludeOnlyUOM);
	}

	function _formatField(iContext, oItem, oEntityType, oMetaModel, bDontIncludeUOM, bIncludeOnlyUOM, bUseSimplePath) {

		if (oItem.Value.Apply) {
			return sap.ui.model.odata.AnnotationHelper.format(iContext, oItem.Value);
		}

		var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oItem.Value.Path);
		var result = "";
		var functionName;

		if (!bIncludeOnlyUOM) {

			//Support association
			if (oItem.Value.Path.split("/").length > 1) {
				oEntityTypeProperty = getNavigationSuffix(oMetaModel, oEntityType, oItem.Value.Path);
			}

			if (!oEntityTypeProperty) {
				return "";
			}

			//Item has ValueFormat annotation
			if (oItem.ValueFormat && oItem.ValueFormat.NumberOfFractionalDigits) {
				functionName = getNumberFormatFunctionName(oItem.ValueFormat.NumberOfFractionalDigits.Int);
				result = "{path:'" + oItem.Value.Path + "', formatter: '" + functionName + "'}";
			} else if (oEntityTypeProperty["scale"]) {
				//If there is no value format annotation, we will use the metadata scale property
				functionName = getNumberFormatFunctionName(oEntityTypeProperty["scale"]);
				result = "{path:'" + oEntityTypeProperty.name + "', formatter: '" + functionName + "'}";
			} else {
                if (bUseSimplePath) {
                    result = sap.ui.model.odata.AnnotationHelper.simplePath(iContext, oItem.Value);
                } else {
				result = sap.ui.model.odata.AnnotationHelper.format(iContext, oItem.Value);
			}
		}
		}

		if (!bDontIncludeUOM) {
			//Add currency using path or string
			if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) {
				var oCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
				if (oCurrency.Path) {
					result = result + " {path: '" + oCurrency.Path + "'}";
				} else if (oCurrency.String) {
					result = result + " " + oCurrency.String;
				}
			}

			//Add unit using path or string
			if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
				var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
				if (oUnit.Path) {
					result = result + " {path: '" + oUnit.Path + "'}";
				} else if (oUnit.String) {
					result = result + " " + oUnit.String;
				}
			}
		}

		if (result[0] === " ") {
			result = result.substring(1);
		}

		return result;
	}

	function getNumberFormatFunctionName(numberOfFractionalDigits) {
		var functionName = "formatNumberCalculation" + numberOfFractionalDigits;
		if (!sap.ovp.cards.AnnotationHelper.NumberFormatFunctions[functionName]) {
			sap.ovp.cards.AnnotationHelper.NumberFormatFunctions[functionName] = generateNumberFormatFunc(Number(numberOfFractionalDigits));
		}
		return "sap.ovp.cards.AnnotationHelper.NumberFormatFunctions." + functionName;
	}

	function generateNumberFormatFunc(numOfFragmentDigit) {
		return function(value) {
            jQuery.sap.require("sap.ui.core.format.NumberFormat");
			var formatNumber = sap.ui.core.format.NumberFormat.getFloatInstance({
				style: 'short',
				showMeasure: false,
				minFractionDigits: numOfFragmentDigit,
				maxFractionDigits: numOfFragmentDigit
			});
			return formatNumber.format(Number(value));
		};
	}

	function getNavigationSuffix(oMetaModel, oEntityType, sProperty) {
		var aParts = sProperty.split("/");

		if (aParts.length > 1) {
			for (var i = 0; i < (aParts.length - 1); i++) {
				var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
				if (oAssociationEnd) {
					oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
				}
			}

			return oMetaModel.getODataProperty(oEntityType, aParts[aParts.length - 1]);
		}
	}

	function formatDataPointState(iContext, aCollection, index) {
		var aDataPoints = getSortedDataPoints(iContext, aCollection);
		var sState = "None";
		if (aDataPoints.length > index) {
			var item = aDataPoints[index];
			sState = formatDataPointToValue(iContext, item, sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues);
		}
		return sState;
	}

	function formatDataPointToValue(iContext, oDataPoint, oCriticalityConfigValues) {
		var sState = oCriticalityConfigValues.None;
		if (oDataPoint.Criticality) {
			sState = criticality2state(oDataPoint.Criticality, oCriticalityConfigValues);
		} else if (oDataPoint.CriticalityCalculation && oDataPoint.Value && oDataPoint.Value && oDataPoint.Value.Path) {
			sState = formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues);
		}

		return sState;
	}

	function formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues) {

		var value = getPathOrPrimitiveValue(oDataPoint.Value);
		var sImprovementDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;

		var deviationLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue);
		var deviationHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue);
		var toleranceLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue);
		var toleranceHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue);

		var bIsDeviationLowBinding = isBindingValue(deviationLow);
		var bIsDeviationHighBinding = isBindingValue(deviationHigh);
		var bIsToleranceLowBinding = isBindingValue(toleranceLow);
		var bIsToleranceHighBinding = isBindingValue(toleranceHigh);

		var sParts = "parts: [" + value;
		sParts += bIsDeviationLowBinding ? "," + deviationLow : "";
		sParts += bIsDeviationHighBinding ? "," + deviationHigh : "";
		sParts += bIsToleranceLowBinding ? "," + toleranceLow : "";
		sParts += bIsToleranceHighBinding ? "," + toleranceHigh : "";
		sParts += "]";

		var formatFunc = function() {
			var index = 1;
			return calculateCriticalityState(
				arguments[0],
				sImprovementDirection,
				bIsDeviationLowBinding ? arguments[index++] : deviationLow,
				bIsDeviationHighBinding ? arguments[index++] : deviationHigh,
				bIsToleranceLowBinding ? arguments[index++] : toleranceLow,
				bIsToleranceHighBinding ? arguments[index++] : toleranceHigh,
				oCriticalityConfigValues
			);
		};

		var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatCriticalityCalculation");
		return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
	}

	function isBindingValue(value) {
		return (typeof value === "string") && value.charAt(0) === "{";
	}

	function getNavigationPrefix(oMetaModel, oEntityType, sProperty) {
		var sExpand = "";
		var aParts = sProperty.split("/");

		if (aParts.length > 1) {
			for (var i = 0; i < (aParts.length - 1); i++) {
				var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
				if (oAssociationEnd) {
					oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
					if (sExpand) {
						sExpand = sExpand + "/";
					}
					sExpand = sExpand + aParts[i];
				} else {
					return sExpand;
				}
			}
		}

		return sExpand;
	}

	sap.ovp.cards.AnnotationHelper.formatField = function(iContext, oItem) {
		return formatField(iContext, oItem);
	};

	/*
	 * This formatter method parses the List-Card List's items aggregation path in the Model.
	 * The returned path may contain also sorter definition (for the List) sorting is defined
	 * appropriately via respected Annotations.
	 *
	 * @param iContext
	 * @param itemsPath
	 * @returns List-Card List's items aggregation path in the Model
	 */
	sap.ovp.cards.AnnotationHelper.formatItems = function(iContext, oEntitySet) {
		var oModel = iContext.getSetting('ovpCardProperties');

		var bAddODataSelect = oModel.getProperty("/addODataSelect");
		var oMetaModel = oModel.getProperty("/metaModel");
		var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		var oSelectionVariant = oEntityType[oModel.getProperty('/selectionAnnotationPath')];
		var oPresentationVariant = oEntityType[oModel.getProperty('/presentationAnnotationPath')];
		var sEntitySetPath = "/" + oEntitySet.name;
		var aAnnotationsPath = Array.prototype.slice.call(arguments, 2);

		//check if entity set needs parameters
		// if selection-annotations path is supplied - we need to resolve it in order to resolve the full entity-set path
        if (oSelectionVariant) {
            if (oSelectionVariant && oSelectionVariant.Parameters && oSelectionVariant.Parameters.length > 0) {
                // in case we have UI.SelectionVariant annotation defined on the entityType including Parameters - we need to resolve the entity-set path to include it
                sEntitySetPath = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting('dataModel'), oEntitySet,
                    oSelectionVariant);
            }
        }

		var result = "{path: '" + sEntitySetPath + "', length: " + getItemsLength(oModel);

		//prepare the select fields in case flag is on
		var aSelectFields = [];
		if (bAddODataSelect) {
			aSelectFields = getSelectFields(iContext, oMetaModel, oEntityType, aAnnotationsPath);
		}
		//prepare the expand list if navigation properties are used
		var aExpand = getExpandList(oMetaModel, oEntityType, aAnnotationsPath);

		//add select and expand parameters to the binding info string if needed
		if (aSelectFields.length > 0 || aExpand.length > 0) {
			result = result + ", parameters: {";
			if (aSelectFields.length > 0) {
				result = result + "select: '" + aSelectFields.join(',') + "'";
			}

			if (aExpand.length > 0) {
				if (aSelectFields.length > 0) {
					result = result + ", ";
				}
				result = result + "expand: '" + aExpand.join(',') + "'";
			}
			result = result + "}";
		}

		//apply sorters information
		var aSorters = getSorters(oModel, oPresentationVariant);
		if (aSorters.length > 0) {
			result = result + ", sorter:" + JSON.stringify(aSorters);
		}

		//apply filters information
		var aFilters = getFilters(oModel, oSelectionVariant);
		if (aFilters.length > 0) {
			result = result + ", filters:" + JSON.stringify(aFilters);
		}
		result = result + "}";

		// returning the parsed path for the Card's items-aggregation binding
		return result;
	};

	/**
	 * returns an array of navigation properties prefixes to be used in an odata $expand parameter
	 *
	 * @param oMetaModel - metamodel to get the annotations to query
	 * @param oEntityType - the relevant entityType
	 * @param aAnnotationsPath - an array of annotation path to check
	 * @returns {Array} of navigation properties prefixes to be used in an odata $expand parameter
	 */
	function getExpandList(oMetaModel, oEntityType, aAnnotationsPath) {
		var aExpand = [];
		var sAnnotationPath, oBindingContext, aColl, sExpand;

		//loop over the annotation paths
		for (var i = 0; i < aAnnotationsPath.length; i++) {
			if (!aAnnotationsPath[i]) {
				continue;
			}
			sAnnotationPath = oEntityType.$path + "/" + aAnnotationsPath[i];
			oBindingContext = oMetaModel.createBindingContext(sAnnotationPath);
			aColl = oBindingContext.getObject();
			//if the annotationPath does not exists there is no BindingContext
			aColl = aColl ? aColl : [];
			for (var j = 0; j < aColl.length; j++) {
				if (aColl[j].Value && aColl[j].Value.Path) {
					sExpand = getNavigationPrefix(oMetaModel, oEntityType, aColl[j].Value.Path);
					if (sExpand && aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
			}
		}
		return aExpand;
	}

	/**
	 * returns an array of properties paths to be used in an odata $select parameter
	 *
	 * @param oMetaModel - metamodel to get the annotations to query
	 * @param oEntityType - the relevant entityType
	 * @param aAnnotationsPath - an array of annotation path to check
	 * @returns {Array} of properties paths to be used in an odata $select parameter
	 */
	function getSelectFields(iContext, oMetaModel, oEntityType, aAnnotationsPath) {

		var aSelectFields = [];
		var sAnnotationPath, oBindingContext, aColl;

		//loop over the annotation paths
		for (var i = 0; i < aAnnotationsPath.length; i++) {
			if (!aAnnotationsPath[i]) {
				continue;
			}

			sAnnotationPath = oEntityType.$path + "/" + aAnnotationsPath[i];
			oBindingContext = oMetaModel.createBindingContext(sAnnotationPath);

            var oContext = {};

            // This is currently true for stack cards, we have sent a dummy iContext which we need to enrich in order to format fields correctly
            if (iContext && iContext.bDummyContext) {
                jQuery.extend(oContext, iContext, oBindingContext, true);
            } else {
                oContext = iContext;
            }

			aColl = oBindingContext.getObject();

			//if the annotationPath does not exists there is no BindingContext
            if (!aColl) {
                aColl = [];
            } else if (jQuery.isPlainObject(aColl)) {
                // For the case of FieldGroups
                if (aColl.Data) {
                    aColl = aColl.Data;
                } else {
                    aColl = [];
                }
            }

			var oItem;
			var aItemValue;
			var sFormattedField;
			var sRecordType;
			for (var j = 0; j < aColl.length; j++) {

				aItemValue = [];
				oItem = aColl[j];
				sFormattedField = "";

				sRecordType = oItem.RecordType;

				if (sRecordType === "com.sap.vocabularies.UI.v1.DataField") {
					// in case of a DataField we format the field to get biding string ; we use simple paths as we simply need select column names
					sFormattedField = _formatField(oContext, oItem, oEntityType, oMetaModel, undefined, undefined, true);

				} else if (sRecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {

					// in case of DataFieldForAnnotation we resolve the DataPoint target path of the DataField and format the field to get biding string
					var sTargetPath = getTargetPathForDataFieldForAnnotation(oEntityType.$path, oItem);
					sFormattedField = _formatDataPoint(oContext, oMetaModel.getProperty(sTargetPath), oEntityType, oMetaModel);

				} else if (sRecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" && oItem.Url) {

					// format the URL ONLY IN CASE NO UrlRef member resides under it
					var sFormattedUrl;
					if (!oItem.Url.UrlRef) {
						sFormattedUrl = sap.ui.model.odata.AnnotationHelper.format(oContext, oItem.Url);
					}

					// meaning binding which needs to be evaluated at runtime
					if (sFormattedUrl && sFormattedUrl.substring(0, 2) === "{=") {
						sFormattedField = sFormattedUrl;
					}
				}

				// if we have found a relevant binding-info-string this iteration then parse it to get binded properties
				if (sFormattedField) {
					aItemValue = getPropertiesFromBindingString(sFormattedField);
				}

				if (aItemValue && aItemValue.length > 0) {
					// for each property found we check if has sap:unit and sap:text
					var sItemValue;
					for (var k = 0; k < aItemValue.length; k++) {
						sItemValue = aItemValue[k];

						// if this property is found for the first time - look for its unit and text properties as well
						if (!aSelectFields[sItemValue]) {

							aSelectFields[sItemValue] = true;

							// checking if we need to add also the sap:unit property of the field's value
							var sUnitPropName = getUnitColumn(sItemValue, oEntityType);
							if (sUnitPropName && sUnitPropName !== sItemValue) {
								aSelectFields[sUnitPropName] = true;
							}

							// checking if we need to add also the sap:text property of the field's value
							var sTextPropName = getTextPropertyForEntityProperty(oMetaModel, oEntityType, sItemValue);
							if (sTextPropName && sTextPropName !== sItemValue) {
								aSelectFields[sTextPropName] = true;
							}
						}
					}
				}
			}
		}
		// return all relevant property names
		return Object.keys(aSelectFields);
	}

	function getPropertiesFromBindingString(sBinding) {

		/**
		 * BCP: 1680241227
		 * Regex expressions were not handling properties that included the '_' character.
		 * With '\_' as part of [a-zA-Z0-9], they should be able to handle.
		 */
		var regexBindingEvaluation = /\${([a-zA-Z0-9\_|\/]*)/g;
		var regexBindingNoPath = /[^[{]*[a-zA-Z0-9\_]/g;
		var regexBindingPath = /path *\: *\'([a-zA-Z0-9\_]+)*\'/g;

		var regex, index, matches = [];

		if (sBinding.substring(0, 2) === "{=") {
			/*
             meaning binding string looks like "{= <rest of the binding string>}"
             which is a binding which needs to be evaluated using some supported function
             properties appear as ${propertyName} inside the string
             */
			regex = regexBindingEvaluation;

			/* index is 1 as each match found by this regular expression (by invoking regex.exec(string) below) */
			/* is an array of 2 items, for example ["${Address}", "Address"] so we need the 2nd result each match found */
			index = 1;

		} else if (sBinding.indexOf("path") !== -1) {

			/* In a scenario where binding contains string like "{propertyName} {path:'propertyName'}" */
			/* Here we get the properties without path and add it to array matches*/
			var matchWithNoPath = regexBindingNoPath.exec(sBinding);
			while (matchWithNoPath) {
				if (matchWithNoPath[0].indexOf("path") === -1) {
					matches.push(matchWithNoPath[0]);
				}
				matchWithNoPath = regexBindingNoPath.exec(sBinding);
			}

			/* meaning binding contains string like "{path:'propertyName'}" */
			regex = regexBindingPath;

			/* index is 1 as each match found by this regular expression (by invoking regex.exec(string) below) */
			/* is an array of 2 items, for example ["{path: 'Address'}", "Address"] so we need the 2nd result each match found */
			index = 1;

		} else {
			/* meaning binding contains string like "{'propertyName'}" */
			regex = regexBindingNoPath;

			/* index is 0 as each match found by this regular expression (by invoking regex.exec(string) below) */
			/* is an array of one item, for example ["Address"] so we need the 1st result each match found */
			index = 0;
		}

		var match = regex.exec(sBinding);
		while (match) {
			if (match[index]) {
				matches.push(match[index]);
			}
			match = regex.exec(sBinding);
		}
		return matches;
	}

	/**
	 * return the sorters that need to be applyed on an aggregation
	 *
	 * @param ovpCardProperties - card properties model which might contains sort configurations
	 * @param oPresentationVariant - optional presentation variant annotation with SortOrder configuration
	 * @returns {Array} of model sorters
	 */
	function getSorters(ovpCardProperties, oPresentationVariant) {
		var aSorters = [];
		var oSorter, bDescending;

		//get the configured sorter if exist and append them to the sorters array
		var sPropertyPath = ovpCardProperties.getProperty("/sortBy");
		if (sPropertyPath) {
			// If sorting is enabled by card configuration
			var sSortOrder = ovpCardProperties.getProperty('/sortOrder');
			if (sSortOrder && sSortOrder.toLowerCase() !== 'descending') {
				bDescending = false;
			} else {
				bDescending = true;
			}
			oSorter = {
				path: sPropertyPath,
				descending: bDescending
			};
			aSorters.push(oSorter);
		}

		//get the sorters from the presentation variant annotations if exists
		var aSortOrder = oPresentationVariant && oPresentationVariant.SortOrder || undefined;
		var oSortOrder, sPropertyPath;
		if (aSortOrder) {
			for (var i = 0; i < aSortOrder.length; i++) {
				oSortOrder = aSortOrder[i];
				sPropertyPath = oSortOrder.Property.PropertyPath;
				bDescending = getBooleanValue(oSortOrder.Descending, true);
				oSorter = {
					path: sPropertyPath,
					descending: bDescending
				};
				aSorters.push(oSorter);
			}
		}

		return aSorters;
	}

	sap.ovp.cards.AnnotationHelper.getCardFilters = function(ovpCardProperties) {
		var oEntityType = ovpCardProperties.getProperty('/entityType');
		var oSelectionVariant = oEntityType[ovpCardProperties.getProperty('/selectionAnnotationPath')];

		return getFilters(ovpCardProperties, oSelectionVariant);
	};

	/**
	 * return the filters that need to be applyed on an aggregation
	 *
	 * @param ovpCardProperties - card properties model which might contains filters configurations
	 * @param oSelectionVariant - optional selection variant annotation with SelectOptions configuration
	 * @returns {Array} of model filters
	 */
	function getFilters(ovpCardProperties, oSelectionVariant) {
		var aFilters = [];
		//get the configured filters if exist and append them to the filter array
		var aConfigFilters = ovpCardProperties.getProperty("/filters");
		if (aConfigFilters) {
			aFilters = aFilters.concat(aConfigFilters);
		}

		//get the filters from the selection variant annotations if exists
		var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
		var oSelectOption, sPropertyPath, oRange;
		if (aSelectOptions) {
			for (var i = 0; i < aSelectOptions.length; i++) {
				oSelectOption = aSelectOptions[i];
				sPropertyPath = oSelectOption.PropertyName.PropertyPath;
				//a select option might contains more then one filter in the Ranges array
				for (var j = 0; j < oSelectOption.Ranges.length; j++) {
					oRange = oSelectOption.Ranges[j];
					if (oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
						//create the filter. the Low value is mandatory
						var oFilter = {
							path: sPropertyPath,
							operator: oRange.Option.EnumMember.split("/")[1],
							value1: getPrimitiveValue(oRange.Low),
							value2: getPrimitiveValue(oRange.High)
						};
						//append the filter to the filters array
						aFilters.push(oFilter);
					}
				}
			}
		}

		return aFilters;
	}

	function getBooleanValue(oValue, bDefault) {
		if (oValue && oValue.Boolean) {
			if (oValue.Boolean.toLowerCase() === "true") {
				return true;
			} else if (oValue.Boolean.toLowerCase() === "false") {
				return false;
			}
		}
		return bDefault;
	}

	function getNumberValue(oValue) {
		var value;

		if (oValue) {
			if (oValue.String) {
				value = Number(oValue.String);
			} else if (oValue.Int) {
				value = Number(oValue.Int);
			} else if (oValue.Decimal) {
				value = Number(oValue.Decimal);
			} else if (oValue.Double) {
				value = Number(oValue.Double);
			} else if (oValue.Single) {
				value = Number(oValue.Single);
			}
		}

		return value;
	}

	function getPrimitiveValue(oValue) {
		var value;

		if (oValue) {
			if (oValue.String) {
				value = oValue.String;
			} else if (oValue.Boolean) {
				value = getBooleanValue(oValue);
			} else {
				value = getNumberValue(oValue);
			}
		}

		return value;
	}

	function getPathOrPrimitiveValue(oItem) {
		if (oItem) {
			if (oItem.Path) {
				return "{path:'" + oItem.Path + "'}";
			} else {
				return getPrimitiveValue(oItem);
			}
		} else {
			return "";
		}
	}

	//This object is responsive for devices
	//the id build by Type-ListType-flavor
	var ITEM_LENGTH = {
		"List_condensed": {
			phone: 5,
			tablet: 5,
			desktop: 5
		},
		"List_extended": {
			phone: 3,
			tablet: 3,
			desktop: 3
		},
		"List_condensed_bar": {
			phone: 5,
			tablet: 5,
			desktop: 5
		},
		"List_extended_bar": {
			phone: 3,
			tablet: 3,
			desktop: 3
		},
		"Table": {
			phone: 5,
			tablet: 5,
			desktop: 5
		},
		"Stack_simple": {
			phone: 20,
			tablet: 20,
			desktop: 20
		},
		"Stack_complex": {
			phone: 5,
			tablet: 5,
			desktop: 5
		}
	};

	function getItemsLength(oOvpCardPropertiesModel) {
		var type = oOvpCardPropertiesModel.getProperty('/contentFragment');
		var listType = oOvpCardPropertiesModel.getProperty('/listType');
		var flavor = oOvpCardPropertiesModel.getProperty('/listFlavor');
		var oItemSizes;

		var device = "desktop";

		//get current device
		if (sap.ui.Device.system.phone) {
			device = "phone";
		} else if (sap.ui.Device.system.tablet) {
			device = "tablet";
		}

		//check the current card type and get the sizes objects
		if (type == "sap.ovp.cards.list.List") {
			if (listType == "extended") {
				if (flavor == "bar") {
					oItemSizes = ITEM_LENGTH["List_extended_bar"];
				} else {
					oItemSizes = ITEM_LENGTH["List_extended"];
				}
			} else if (flavor == "bar") {
				oItemSizes = ITEM_LENGTH["List_condensed_bar"];
			} else {
				oItemSizes = ITEM_LENGTH["List_condensed"];
			}
		} else if (type == "sap.ovp.cards.table.Table") {
			oItemSizes = ITEM_LENGTH["Table"];
		} else if (type == "sap.ovp.cards.stack.Stack") {

			if (oOvpCardPropertiesModel.getProperty('/objectStreamCardsNavigationProperty')) {
				oItemSizes = ITEM_LENGTH["Stack_complex"];
			} else {
				oItemSizes = ITEM_LENGTH["Stack_simple"];
			}
		}

		if (oItemSizes) {
			return oItemSizes[device];
		}

		return 5;
	}

	sap.ovp.cards.AnnotationHelper.formatUrl = function(iContext, sUrl) {
		if (sUrl.charAt(0) === '/' || sUrl.indexOf("http") === 0) {
			return sUrl;
		}
		var sBaseUrl = iContext.getModel().getProperty("/baseUrl");
		if (sBaseUrl) {
			return sBaseUrl + "/" + sUrl;
		}
		return sUrl;
	};

	sap.ovp.cards.AnnotationHelper.getDataPointsCount = function(iContext, aCollection) {
		var aDataPoints = getSortedDataPoints(iContext, aCollection);
		return aDataPoints.length;
	};

	sap.ovp.cards.AnnotationHelper.getFirstDataPointValue = function(iContext, aCollection) {
		return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.getSecondDataPointValue = function(iContext, aCollection) {
		return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.getDataPointValue = function(iContext, aCollection, index) {
		var aDataPoints = getSortedDataPoints(iContext, aCollection),
			oDataPoint = aDataPoints[index];

		if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
			return oDataPoint.Value.Path;
		}
		return "";
	};

	sap.ovp.cards.AnnotationHelper.getFirstDataFieldName = function(iContext, aCollection) {
		return getDataFieldName(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.getSecondDataFieldName = function(iContext, aCollection) {
		return getDataFieldName(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.getThirdDataFieldName = function(iContext, aCollection) {
		return getDataFieldName(iContext, aCollection, 2);
	};

	sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 2);
	};

	sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 3);
	};

	sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 4);
	};

	sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue = function(iContext, aCollection) {
		return formatDataField(iContext, aCollection, 5);
	};

	sap.ovp.cards.AnnotationHelper.getFirstDataPointName = function(iContext, aCollection) {
		return getDataPointName(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.getSecondDataPointName = function(iContext, aCollection) {
		return getDataPointName(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.getThirdDataPointName = function(iContext, aCollection) {
		return getDataPointName(iContext, aCollection, 2);
	};

	sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue = function(iContext, aCollection) {
		return formatDataPoint(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue = function(iContext, aCollection) {
		return formatDataPoint(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue = function(iContext, aCollection) {
		return formatDataPoint(iContext, aCollection, 2);
	};

	sap.ovp.cards.AnnotationHelper.formatFirstDataPointState = function(iContext, aCollection) {
		return formatDataPointState(iContext, aCollection, 0);
	};

	sap.ovp.cards.AnnotationHelper.formatSecondDataPointState = function(iContext, aCollection) {
		return formatDataPointState(iContext, aCollection, 1);
	};

	sap.ovp.cards.AnnotationHelper.formatThirdDataPointState = function(iContext, aCollection) {
		return formatDataPointState(iContext, aCollection, 2);
	};

	sap.ovp.cards.AnnotationHelper.formatKPIHeaderState = function(iContext, oDataPoint) {
		return formatDataPointToValue(iContext, oDataPoint, sap.ovp.cards.AnnotationHelper.criticalityConstants.ColorValues);
	};

	/*
	 * @param iContext
	 * @returns 0 for false - there are no actions for this context
	 *          1 for true - there are actions for this context
	 *          does not return actual boolean - so we won't need to parse the result in the xml
	 */
	sap.ovp.cards.AnnotationHelper.hasActions = function(iContext, aCollection) {
		var oItem;
		for (var i = 0; i < aCollection.length; i++) {
			oItem = aCollection[i];
			if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" ||
				oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
				oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
				return 1;
			}
		}
		return 0;
	};

	sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit = function(iContext, aCollection) {
		var oDataPoint = getSortedDataPoints(iContext, aCollection)[0];

		if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
			var sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
			var oModel = iContext.getModel();
			var oEntityType = oModel.getProperty(sEntityTypePath);
			var oProperty = oModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			if (oProperty && oProperty["Org.OData.Measures.V1.Unit"]) {
				return oProperty["Org.OData.Measures.V1.Unit"].String === "%";
			}
		}
		return false;
	};

	sap.ovp.cards.AnnotationHelper.resolveEntityTypePath = function(oAnnotationPathContext) {
		var sAnnotationPath = oAnnotationPathContext.getObject();
		var oModel = oAnnotationPathContext.getModel();
		var oMetaModel = oModel.getProperty("/metaModel");
		var oEntitySet = oMetaModel.getODataEntitySet(oModel.getProperty("/entitySet"));
		var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		sAnnotationPath = oEntityType.$path + "/" + sAnnotationPath;
		return oMetaModel.createBindingContext(sAnnotationPath);
	};

	sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet = function(oDataModel, oEntitySet, oSelectionVariant) {

		jQuery.sap.require("sap.ui.model.analytics.odata4analytics");
		var path = "";
		var o4a = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oDataModel));
		var queryResult = o4a.findQueryResultByName(oEntitySet.name);
		var queryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(queryResult);
		var parameterization = queryResult.getParameterization();

		if (parameterization) {
			queryResultRequest.setParameterizationRequest(new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(parameterization));
			jQuery.each(oSelectionVariant.Parameters, function() {
				if (this.RecordType === "com.sap.vocabularies.UI.v1.IntervalParameter") {
					queryResultRequest.getParameterizationRequest().setParameterValue(
						this.PropertyName.PropertyPath,
						this.PropertyValueFrom.String,
						this.PropertyValueTo.String
					);
				} else {
					queryResultRequest.getParameterizationRequest().setParameterValue(
						this.PropertyName.PropertyPath,
						this.PropertyValue.String
					);
				}
			});
		}

		try {
			path = queryResultRequest.getURIToQueryResultEntitySet();
		} catch (exception) {
			queryResult = queryResultRequest.getQueryResult();
			path = "/" + queryResult.getEntitySet().getQName();
			jQuery.sap.log.error("getEntitySetPathWithParameters", "binding path with parameters failed - " + exception || exception.message);
		}
		return path;
	};

	sap.ovp.cards.AnnotationHelper.getAssociationObject = function(oModel, sAssociation, ns) {
		// find a nicer way of getting association set entry in meta model
		var aAssociations = oModel.getServiceMetadata().dataServices.schema[0].association;
		for (var i = 0; i < aAssociations.length; i++) {
			if (ns + "." + aAssociations[i].name === sAssociation) {
				return aAssociations[i];
			}
		}
	};

	/**************************** Formatters & Helpers for KPI-Header logic  ****************************/

	/* Returns binding path for singleton */
	sap.ovp.cards.AnnotationHelper.getAggregateNumber = function(iContext, oEntitySet, oDataPoint, oSelectionVariant) {
		var measure = oDataPoint.Value.Path;
		var ret = "";
		var bParams = oSelectionVariant && oSelectionVariant.Parameters;
		var filtersString = "";

		if (bParams) {
			var dataModel = iContext.getSetting("dataModel");
			var path = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(dataModel, oEntitySet, oSelectionVariant);
			ret += "{path: '" + path + "'";
		} else {
			ret += "{path: '/" + oEntitySet.name + "'";
		}

		ret += ", length: 1";
		var oOvpCardSettings = iContext.getSetting('ovpCardProperties');
		var oEntityType = oOvpCardSettings.getProperty("/entityType");
		var unitColumn = getUnitColumn(measure, oEntityType);
		var aFilters = getFilters(oOvpCardSettings, oSelectionVariant);

		if (aFilters.length > 0) {
			filtersString += ", filters: " + JSON.stringify(aFilters);
		}

		var selectArr = [];
		selectArr.push(measure);
		if (unitColumn) {
			selectArr.push(unitColumn);
		}
		if (oDataPoint.TrendCalculation && oDataPoint.TrendCalculation.ReferenceValue && oDataPoint.TrendCalculation.ReferenceValue.Path) {
			selectArr.push(oDataPoint.TrendCalculation.ReferenceValue.Path);
		}

		return ret + ", parameters:{select:'" + selectArr.join(",") + "'}" + filtersString + "}";
	};

	/* Creates binding path for NumericContent value */
	sap.ovp.cards.AnnotationHelper.formThePathForAggregateNumber = function(iContext, dataPoint) {
		if (!dataPoint || !dataPoint.Value || !dataPoint.Value.Path) {
			return "";
		}

		return formatField(iContext, dataPoint, true, false);
	};

	/* Creates binding path for trend icon */
	sap.ovp.cards.AnnotationHelper.formThePathForTrendIcon = function(iContext, oDataPoint) {
		if (!oDataPoint || !oDataPoint.Value || !oDataPoint.Value.Path || !oDataPoint.TrendCalculation) {
			return "";
		}

		var value = getPathOrPrimitiveValue(oDataPoint.Value);
		var referenceValue = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
		var downDifference = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.DownDifference);
		var upDifference = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.UpDifference);

		var bIsRefValBinding = isBindingValue(referenceValue);
		var bIsDownDiffBinding = isBindingValue(downDifference);
		var bIsUpDiffBinding = isBindingValue(upDifference);

		var sParts = "parts: [" + value;
		sParts += bIsRefValBinding ? "," + referenceValue : "";
		sParts += bIsDownDiffBinding ? "," + downDifference : "";
		sParts += bIsUpDiffBinding ? "," + upDifference : "";
		sParts += "]";

		var formatFunc = function() {
			var index = 1;
			return calculateTrendDirection(
				arguments[0],
				bIsRefValBinding ? arguments[index++] : referenceValue,
				bIsDownDiffBinding ? arguments[index++] : downDifference,
				bIsUpDiffBinding ? arguments[index++] : upDifference
			);
		};

		var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTrendDirection");
		return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
	};

	/* Creates binding path for UOM placeholder */
	sap.ovp.cards.AnnotationHelper.formThePathForUOM = function(iContext, dataPoint) {
		if (!dataPoint || !dataPoint.Value || !dataPoint.Value.Path) {
			return "";
		}

		return formatField(iContext, dataPoint, false, true);
	};

	/* Creates binding path for % change */
	sap.ovp.cards.AnnotationHelper.formPathForPercentageChange = function(dataPoint) {
		if (!dataPoint || !dataPoint.TrendCalculation || !dataPoint.TrendCalculation.ReferenceValue) {
			return "";
		}
		if (dataPoint.TrendCalculation.ReferenceValue.Path) {
			return "{parts: [{path:'" + dataPoint.Value.Path + "'}, {path:'" + dataPoint.TrendCalculation.ReferenceValue.Path +
				"'}], formatter: 'sap.ovp.cards.AnnotationHelper.returnPercentageChange'}";
		} else {
			return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.AnnotationHelper.returnPercentageChange'}";
		}
	};

	/* Formatter for % change for Header */
	sap.ovp.cards.AnnotationHelper.returnPercentageChange = function(aggregateValue, referenceValuePath) {
        jQuery.sap.require("sap.ui.core.format.NumberFormat");
		var ret = "";
		aggregateValue = Number(aggregateValue);
		var ovpModel = this.getModel("ovpCardProperties");
		if (!ovpModel) {
			return ret;
		}
		var fullQualifier = ovpModel.getProperty("/dataPointAnnotationPath");
		var dataPoint = ovpModel.getProperty("/entityType")[fullQualifier];
		var referenceValue;
		if (!dataPoint.TrendCalculation) {
			return ret;
		}
		if (dataPoint.TrendCalculation.ReferenceValue) {
			if (dataPoint.TrendCalculation.ReferenceValue.String) {
				referenceValue = Number(dataPoint.TrendCalculation.ReferenceValue.String);
			}
			if (dataPoint.TrendCalculation.ReferenceValue.Path) {
				referenceValue = Number(referenceValuePath);
			}
			if (!referenceValue || referenceValue == 0) {
				return ret;
			}
			var percentNumber = ((Number(aggregateValue) - referenceValue) / referenceValue);
			var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
				style: 'short',
				minFractionDigits: 2,
				maxFractionDigits: 2
			});

			return percentFormatter.format(percentNumber);
		}
	};

	/*
	 * Reads groupBy from annotation and prepares comma separated list
	 */
	sap.ovp.cards.AnnotationHelper.listGroupBy = function(oPresentationVariant) {
		var result = "";
		var bPV = oPresentationVariant && oPresentationVariant.GroupBy;
		if (!bPV) {
			return result;
		}

		var metaModel = this.getModel('ovpCardProperties').getProperty("/metaModel");
		var oEntityType = this.getModel('ovpCardProperties').getProperty("/entityType");
		var groupByList;

		if (oPresentationVariant.GroupBy.constructor === Array) {
			groupByList = oPresentationVariant.GroupBy;
		} else if (!oPresentationVariant.GroupBy.Collection) {
			return result;
		} else {
			groupByList = oPresentationVariant.GroupBy.Collection;
		}

		var propVal;
		jQuery.each(groupByList, function() {

			propVal = getLabelForEntityProperty(metaModel, oEntityType, this.PropertyPath);
			if (!propVal) {
				return;
			}

			result += propVal;
			result += ", ";
		});
		if (result[result.length - 1] === " " && result[result.length - 2] === ",") {
			result = result.substring(0, result.length - 2);
		}
		return result == "" ? "" : sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("By", [result]);
	};

	/*
	 * returns the string for the filter-by values of the KPI Header
	 * */
	sap.ovp.cards.AnnotationHelper.formTheFilterByString = function(iContext, oSelectionVariant) {
		var oCardPropsModel = iContext.getSetting('ovpCardProperties');
		var oEntityType = oCardPropsModel.getProperty("/entityType");
		var oMetaModel = oCardPropsModel.getProperty("/metaModel");
		var aFilters = getFilters(oCardPropsModel, oSelectionVariant);
		var sProp;
		var sTextPropKey;

		//Clean from Filter array all the filters with sap-text that the filter array contains there sap-text
		for (var i = 0; i < aFilters.length; i++) {
			sProp = aFilters[i].path;
			sTextPropKey = getTextPropertyForEntityProperty(oMetaModel, oEntityType, sProp);

			//Check if there is sap-text, in case there is checks that the Filter array contains it
			if (sTextPropKey !== sProp) {
				for (var j = 0; j < aFilters.length; j++) {

					// if there is sap test - we won't show the original filter (instead we will show the sap-text) and we clean it from the array
					if ((aFilters[j].path == sTextPropKey)) {
						aFilters.splice(i, 1);
						break;
					}
				}
			}
		}
		// build the filter string
		return generateStringForFilters(aFilters);
	};

	/************************ METADATA PARSERS ************************/

	function generateStringForFilters(aFilters) {
		var aFormatterFilters = [];

		for (var i = 0; i < aFilters.length; i++) {
			aFormatterFilters.push(generateSingleFilter(aFilters[i]));
		}

		return aFormatterFilters.join(', ');
	}

	function generateSingleFilter(oFilter) {
		var bNotOperator = false;
		var sFormattedFilter = oFilter.value1;

		if (oFilter.operator[0] === "N") {
			bNotOperator = true;
		}

		if (oFilter.value2) {
			sFormattedFilter += " - " + oFilter.value2;
		}

		if (bNotOperator) {
			sFormattedFilter = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("kpiHeader_Filter_NotOperator", [sFormattedFilter]);
		}

		return sFormattedFilter;
	}

	/* Returns column name that contains the unit for the measure */
	function getUnitColumn(measure, oEntityType) {
		var properties = oEntityType.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].name == measure) {
				if (properties[i].hasOwnProperty("sap:unit")) {
					return properties[i]["sap:unit"];
				}
				break;
			}
		}
		return null;
	}

	function getLabelForEntityProperty(oMetadata, oEntityType, sPropertyName) {
		return getAttributeValueForEntityProperty(oMetadata, oEntityType,
			sPropertyName, "com.sap.vocabularies.Common.v1.Label");
	}

	function getTextPropertyForEntityProperty(oMetamodel, oEntityType, sPropertyName) {
		return getAttributeValueForEntityProperty(oMetamodel, oEntityType,
			sPropertyName, "sap:text");
	}

	function getAttributeValueForEntityProperty(oMetamodel, oEntityType, sPropertyName, sAttributeName) {
		var oProp = oMetamodel.getODataProperty(oEntityType, sPropertyName);
		if (!oProp) {
			jQuery.sap.log.error("No Property Found for with Name '" + sPropertyName + " For Entity-Type '" + oEntityType.name + "'");
			return;
		}
		var oPropAttVal = oProp[sAttributeName];
		if (oPropAttVal) {
			if (sAttributeName === "com.sap.vocabularies.Common.v1.Label") {
				return oPropAttVal.String;
			}
			return oPropAttVal;
		}

		return oProp.name;
	}

	sap.ovp.cards.AnnotationHelper._criticality2state = criticality2state;
	sap.ovp.cards.AnnotationHelper._calculateCriticalityState = calculateCriticalityState;
	sap.ovp.cards.AnnotationHelper._calculateTrendDirection = calculateTrendDirection;
	sap.ovp.cards.AnnotationHelper._getPropertiesFromBindingString = getPropertiesFromBindingString;
	sap.ovp.cards.AnnotationHelper.sortCollectionByImportance = sortCollectionByImportance;

	sap.ovp.cards.AnnotationHelper.formatField.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formThePathForAggregateNumber.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formThePathForTrendIcon.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formThePathForUOM.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formTheFilterByString.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getAggregateNumber.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getFirstDataFieldName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getSecondDataFieldName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getThirdDataFieldName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getDataPointsCount.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getFirstDataPointName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getSecondDataPointName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getThirdDataPointName.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatFirstDataPointState.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatSecondDataPointState.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatThirdDataPointState.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatKPIHeaderState.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatItems.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.formatUrl.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.hasActions.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getFirstDataPointValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.getSecondDataPointValue.requiresIContext = true;
	sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit.requiresIContext = true;

}());
}; // end of sap/ovp/cards/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.CommonUtils') ) {
(function () {
    "use strict";
    jQuery.sap.declare("sap.ovp.cards.CommonUtils");
    sap.ovp.cards.CommonUtils = {
        app : undefined,
        navigationHandler : undefined,

        enable : function(app, oNavHandler) {
            this.app = app;
            this.navigationHandler = oNavHandler;
        },

        getApp : function() {
            return this.app;
        },

        getNavigationHandler : function() {
            return this.navigationHandler;
        }
    };
}());
}; // end of sap/ovp/cards/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.Utils') ) {
/**
 * @fileOverview Miscellaneous utility functions for legacy cards.
 * See VizAnnotationManager.js for generic card methods.
 * This file can be safely deleted when legacy cards deprecate.
 */

(function () {
	"use strict";
	jQuery.sap.declare("sap.ovp.cards.charts.Utils");


	sap.ovp.cards.charts.Utils = sap.ovp.cards.charts.Utils || {};


	/* All constants feature here */
	sap.ovp.cards.charts.Utils.constants = {
			/* qualifiers for annotation terms */
			CHART_QUALIFIER_KEY: "chartAnnotationPath",
			SELVAR_QUALIFIER_KEY: "selectionAnnotationPath",
			PREVAR_QUALIFIER_KEY: "presentationAnnotationPath",
			/* DEBUG MESSAGES */
			ERROR_NO_CHART: "Analytic cards require valid \"chartAnnotationPath\" " +
					"configured in manifest.json",
			LABEL_KEY: "sap:label",
			TEXT_KEY: "sap:text",
			TYPE_KEY:"type"
	};

	/* retrieve qualifier from iContext */
	sap.ovp.cards.charts.Utils.getQualifier = function (iContext, annoTerm) {
		/* see sap.ovp.cards.charts.Utils.constants for legal values of annoTerm */
		if (!annoTerm) {
			return "";
		}
		var settingsModel = iContext.getSetting('ovpCardProperties');
		if (!settingsModel) {
			return "";
		}
		var oSettings = settingsModel.oData;
		if (!oSettings) {
			return "";
		}
		var fullQualifier = oSettings && oSettings[annoTerm] ? oSettings[annoTerm] : "";
		return fullQualifier === "" ? "" : fullQualifier.split("#")[1];
	};

	/************************ FORMATTERS ************************/

	sap.ovp.cards.charts.Utils.wrapInBraces = function(whateverNeedsToBeInBraces) {
		return "{" + whateverNeedsToBeInBraces + "}";
	};

	sap.ovp.cards.charts.Utils.getSapLabel = function(property) {
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var label = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject)[property];
		return label ? label : property;
	};

	sap.ovp.cards.charts.Utils.formDimensionPath = function(dimension) {
		var ret = "{" + dimension + "}";
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return ret;
		}
		var edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
		if (!edmTypes || !edmTypes[dimension]) {
			return ret;
		}
		var type = edmTypes[dimension];
		if (type == "Edm.DateTime") {
			return "{path:'" + dimension + "', formatter: 'sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat'}";
		}
		var columnTexts = sap.ovp.cards.charts.Utils.getAllColumnTexts(entityTypeObject);
		if (!columnTexts) {
			return ret;
		}
		ret = "{" + (columnTexts[dimension] || dimension) + "}";
		return ret;
	};


	/************************ METADATA PARSERS ************************/

	/* Returns the set of all properties in the metadata */
	sap.ovp.cards.charts.Utils.getAllColumnProperties = function(prop, entityTypeObject) {
		var finalObject = {};
		var properties = entityTypeObject.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].hasOwnProperty(prop) && prop == "com.sap.vocabularies.Common.v1.Label") {
				finalObject[properties[i].name] = properties[i][prop].String;
			} else if (properties[i].hasOwnProperty(prop)) {
				finalObject[properties[i].name] = properties[i][prop];
			} else {
				finalObject[properties[i].name] = properties[i].name;
			}
		}
		return finalObject;
	};

	/* Returns column name that contains the sap:label(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnLabels = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("com.sap.vocabularies.Common.v1.Label", entityTypeObject);
	};


	/* Returns column name that contains the sap:text(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnTexts = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("sap:text", entityTypeObject);
	};


	/* get EdmType of all properties from $metadata */
	sap.ovp.cards.charts.Utils.getEdmTypeOfAll = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("type", entityTypeObject);
	};


	/************************ Line Chart functions ************************/

	sap.ovp.cards.charts.Utils.LineChart = sap.ovp.cards.charts.Utils.LineChart || {};
	sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList = {};

	sap.ovp.cards.charts.Utils.LineChart.getVizProperties = function(iContext, dimensions, measures) {
		var rawValueAxisTitles = sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed(iContext, measures).split(",");
		var rawCategoryAxisTitles = sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed(iContext, dimensions).split(",");
		var valueAxisTitles = [];
		jQuery.each(rawValueAxisTitles, function(i, m){
			valueAxisTitles.push(m);
		});
		var categoryAxisTitles = [];
		jQuery.each(rawCategoryAxisTitles, function(i, d){
			categoryAxisTitles.push(d);
		});
		/*
		 //Readable version for debugging
		 //eslint can't multiline strings
		 return "{\
				valueAxis:{\
					title:{\
						visible:true,\
						text: '" + valueAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				categoryAxis:{\
					title:{\
						visible:true,\
						text: '" + categoryAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				legend: {\
					isScrollable: false\
				},\
				title: {\
					visible: false\
				},\
				interaction:{\
					noninteractiveMode: false,\
					selectability: {\
						legendSelection: false,\
						axisLabelSelection: false,\
						mode: 'EXCLUSIVE',\
						plotLassoSelection: false,\
						plotStdSelection: true\
					}\
				}\
			}";
		*/
		return "{ valueAxis:{  title:{   visible:true,   text: '" + valueAxisTitles.join(",") + "'  },  label:{   formatString:'axisFormatter'  } }, categoryAxis:{  title:{   visible:true,   text: '" + categoryAxisTitles.join(",") + "'  },  label:{   formatString:'axisFormatter'  } }, legend: {  isScrollable: false }, title: {  visible: false }, interaction:{  noninteractiveMode: false,  selectability: {   legendSelection: false,   axisLabelSelection: false,   mode: 'EXCLUSIVE',   plotLassoSelection: false,   plotStdSelection: true  },  zoom:{   enablement: 'disabled'} } }";
	};
	sap.ovp.cards.charts.Utils.LineChart.getVizProperties.requiresIContext = true;

	sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed = function(iContext, measures) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		jQuery.each(measures, function(i, m){
			ret.push(columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath);
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var qualifier;
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		/*
		 * If no dimensions are given as category, pick first dimension as category
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		if (ret.length < 1) {
			feedValue = columnLabels[dimensions[0].Dimension.PropertyPath];
			ret.push(feedValue ? feedValue : dimensions[0].Dimension.PropertyPath);
		}
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier] = ret;
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.getColorFeed = function(iContext, dimensions) {
		var ret = [];
		var qualifier;
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		/*
		 * If the dimensions is picked up for category feed as no category is given in the annotation,
		 * remove it from color feed.
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		ret = jQuery.grep(ret, function(value) {
			if (!sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier]) {
				return true;
			}
			return value != sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier][0];
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getColorFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.testColorFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.LineChart.getColorFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.LineChart.testColorFeed.requiresIContext = true;



	/************************ Bubble Chart Functions ************************/

	sap.ovp.cards.charts.Utils.BubbleChart = sap.ovp.cards.charts.Utils.BubbleChart || {};

	sap.ovp.cards.charts.Utils.BubbleChart.getVizProperties = function(iContext, dimensions, measures) {
		var rawValueAxisTitles = sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed(iContext, measures).split(",");
		var rawValueAxis2Titles = sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed(iContext, measures).split(",");
		var valueAxisTitles = [];
		jQuery.each(rawValueAxisTitles, function(i, m){
			valueAxisTitles.push(m);
		});
		var valueAxis2Titles = [];
		jQuery.each(rawValueAxis2Titles, function(i, m){
			valueAxis2Titles.push(m);
		});
		/*
		 //Readable version for debugging
		 //eslint can't multiline strings
		return "{\
				valueAxis:{\
					title:{\
						visible:true,\
						text: '" + valueAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				valueAxis2:{\
					title:{\
						visible:true,\
						text: '" + valueAxis2Titles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				categoryAxis:{\
					title:{\
						visible:true\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				legend: {\
					isScrollable: false\
				},\
				title: {\
					visible: false\
				},\
				interaction:{\
					noninteractiveMode: false,\
					selectability: {\
						legendSelection: false,\
						axisLabelSelection: false,\
						mode: 'EXCLUSIVE',\
						plotLassoSelection: false,\
						plotStdSelection: true\
					}\
				}\
			}";
		*/
		return "{ valueAxis:{  title:{ visible:true, text: '" + valueAxisTitles.join(",") + "'  },  label:{ formatString:'axisFormatter'  } }, valueAxis2:{  title:{ visible:true, text: '" + valueAxis2Titles.join(",") + "'  },  label:{ formatString:'axisFormatter'  } }, categoryAxis:{  title:{ visible:true  },  label:{ formatString:'axisFormatter'  } }, legend: {  isScrollable: false }, title: {  visible: false }, interaction:{  noninteractiveMode: false,  selectability: { legendSelection: false, axisLabelSelection: false, mode: 'EXCLUSIVE', plotLassoSelection: false, plotStdSelection: true  },  zoom:{   enablement: 'disabled'} } }";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getVizProperties.requiresIContext = true;

	sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList = function(iContext, measures) {
		/* (see Software Design Description UI5 Chart Control - Bubble Chart) */
		var ovpCardPropertiesModel;
		if (!iContext ||
				!iContext.getSetting ||
				!(ovpCardPropertiesModel = iContext.getSetting('ovpCardProperties'))) {
			return [""];
		}
		var entityTypeObject = ovpCardPropertiesModel.getProperty("/entityType");
		if (!entityTypeObject) {
			return [""];
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [null, null, null];
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis1") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis2") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis3") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		return ret;
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[0];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[1];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getBubbleWidthFeed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[2];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getBubbleWidthFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed.requiresIContext = true;

	sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.testColorFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.testColorFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.testShapeFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.testShapeFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.validateMeasuresDimensions = function(vizFrame, type) {
		var measuresArr = null;
		var dimensionsArr = null;
		if (!vizFrame.getDataset()) {
			jQuery.sap.log.error("OVP-AC: " + type + " Card Error: No Dataset defined for chart.");
			return false;
		}
		measuresArr = vizFrame.getDataset().getMeasures();
		dimensionsArr = vizFrame.getDataset().getDimensions();

		switch (type) {
		case "Bubble":
			if (measuresArr.length !== 3 || dimensionsArr.length < 1 ||
					!measuresArr[0].getName() || !measuresArr[1].getName() || !measuresArr[2].getName() ||
					!dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Bubble Card Error: Enter exactly 3 measures and at least 1 dimension.");
				return false;
			}
			break;

		case "Donut":
			if (measuresArr.length !== 1 || dimensionsArr.length !== 1 ||
					!measuresArr[0].getName() || !dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Donut Card Error: Enter exactly 1 measure and 1 dimension.");
				return false;
			}
			break;

		case "Line":
			if (measuresArr.length < 1 || dimensionsArr.length < 1 ||
					!measuresArr[0].getName() || !dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Line Card Error: Configure at least 1 dimensions and 1 measure.");
				return false;
			}
			break;
		}
		return true;
	};
}());

}; // end of sap/ovp/cards/charts/Utils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.VizAnnotationManager') ) {
/**
 * @fileOverview Library to Manage rendering of Viz Charts.
 * Reads configuration from config.js.
 */

(function () {
	"use strict";
	jQuery.sap.declare("sap.ovp.cards.charts.VizAnnotationManager");
	sap.ovp.cards.charts.VizAnnotationManager = sap.ovp.cards.charts.VizAnnotationManager || {};


	/* All constants feature here */
	sap.ovp.cards.charts.VizAnnotationManager.constants = {
		LABEL_KEY: "sap:label",
		TEXT_KEY: "sap:text",
		TYPE_KEY: "type",
		NAME_KEY: "name",
		NAME_CAP_KEY: "Name"
	};
	
	/* All constans for error messages feature here */
	sap.ovp.cards.charts.VizAnnotationManager.errorMessages = {
		CARD_WARNING: "OVP-AC: Analytic card: Warning: ",	
		CARD_ERROR: "OVP-AC: Analytic card Error: ",
		CARD_ANNO_ERROR: "OVP-AC: Analytic card: Error ",
		CHART_ANNO_ERROR: "OVP-AC: Analytic card: Error ",
		INVALID_CHART_ANNO: "OVP-AC: Analytic Cards: Invalid Chart Annotation.",
		ANALYTICAL_CONFIG_ERROR: "Analytic card configuration error",
		CACHING_ERROR: "no model defined while caching OdataMetaData",
		INVALID_MAXITEMS: "maxItems is Invalid. ",
		NO_DATASET: "OVP-AC: Analytic Cards: Could not obtain dataset.",
		SORTORDER_WARNING:"SortOrder is present in PresentationVariant, but it is empty or not well formed.",
		BOOLEAN_ERROR: "Boolean value is not present in PresentationVariant.",
		IS_MANDATORY: "is mandatory.",
		IS_MISSING: "is missing.",
		NOT_WELL_FORMED: "is not found or not well formed)",
		MISSING_CHARTTYPE: "Missing ChartType in ",
		CHART_ANNO: "Chart Annotation.",
		CARD_ANNO: "card annotation.",
		CARD_CONFIG: "card configuration.",
		CARD_CONFIG_ERROR: "Could not obtain configuration for ",
		CARD_CONTAINER_ERROR: "Could not obtain card container. ",
		DATA_UNAVAIALABLE: "No data available.",
		CONFIG_LOAD_ERROR: "Failed to load config.json. Reason: ",
		INVALID_CHARTTYPE: "Invalid ChartType given for ",
		INVALID_CONFIG: "No valid configuration given for ",
		CONFIG_JSON: "in config.json",
		ENTER_INTEGER: "Please enter an Integer.",
		NO_CARD_MODEL: "Could not obtain Cards model.",
		ANNO_REF: "com.sap.vocabularies.UI.v1 annotation.",
		INVALID_REDUNDANT: "Invalid/redundant role configured for ",
		CHART_IS: "chart is/are ",
		CARD_CONFIG_JSON:"card from config.json",
		ALLOWED_ROLES: "Allowed role(s) for ",
		DIMENSIONS_MANDATORY: "DimensionAttributes are mandatory.",
		MEASURES_MANDATORY: "MeasureAttributes are mandatory.",
		CARD_LEAST: "card: Enter at least ",
		CARD_MOST: "card: Enter at most ",
		FEEDS: "feed(s).",
		MIN_FEEDS: "Minimum number of feeds required for ",
		FEEDS_OBTAINED: "card is not configured. Obtained ",
		FEEDS_REQUIRED: "feed(s), Required: "			
	};


	/*
	 * Reads filters from annotation and prepares data binding path
	 */
	sap.ovp.cards.charts.VizAnnotationManager.formatItems = function(iContext, oEntitySet, oSelectionVariant, oPresentationVariant, oDimensions, oMeasures) {
		var dataModel = iContext.getSetting("dataModel");
		var ret = "{";
		var dimensionsList = [];
		var measuresList = [];
		var sorterList = [];
		var bFilter = oSelectionVariant && oSelectionVariant.SelectOptions;
		var bParams = oSelectionVariant && oSelectionVariant.Parameters;
		var bSorter = oPresentationVariant && oPresentationVariant.SortOrder;
		var maxItemTerm = oPresentationVariant && oPresentationVariant.MaxItems, maxItems = null;
		var aConfigFilters;
		var tmp;
		var entitySet = null;
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var textKey = self.constants.TEXT_KEY;

		if (maxItemTerm) {
			maxItems = maxItemTerm.Int32 ? maxItemTerm.Int32 : maxItemTerm.Int;
		}

		if (maxItems) {
			if (maxItems == "0") {
				jQuery.sap.log.error("OVP-AC: Analytic card Error: maxItems is configured as " +
					maxItems);
				ret += "}";
				return ret;
			}
			if (!/^\d+$/.test(maxItems)) {
				jQuery.sap.log.error("OVP-AC: Analytic card Error: maxItems is Invalid. " +
					"Please enter an Integer.");
				ret += "}";
				return ret;
			}
		}

		if (bParams) {
			var path = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(dataModel, oEntitySet, oSelectionVariant);
			ret += "path: '" + path + "'";
		} else {
			ret += "path: '/" + oEntitySet.name + "'";
		}

		var filters = [];
		if (!iContext || !iContext.getSetting('ovpCardProperties')) {
			jQuery.sap.log.error(self.errorMessages.ANALYTICAL_CONFIG_ERROR);
			ret += "}";
			return ret;
		}
		entitySet = iContext.getSetting('ovpCardProperties').getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return ret;
		}
		var oMetadata = self.getMetadata(dataModel, entitySet);
		aConfigFilters = iContext.getSetting('ovpCardProperties').getProperty("/filters");

		if (bFilter) {
			jQuery.each(oSelectionVariant.SelectOptions, function() {
				var prop = this.PropertyName.PropertyPath;
				jQuery.each(this.Ranges, function() {
					if (this.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
						var filtervalue = sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue(this.Low);
						var filtervaueHigh = this.High && this.High.String;
						var formatByType = self.formatByType;
						filtervalue = formatByType(oMetadata, prop, filtervalue);
						var filter = {
								path : prop,
								operator : this.Option.EnumMember.split("/")[1],
								value1 : filtervalue
						};
						if (filtervaueHigh) {
							filter.value2 = formatByType(oMetadata, prop, filtervaueHigh);
						}
						filters.push(filter);
					}
				});
			});
		}

		/*
		 * code for ObjectStream
		 */
		if (aConfigFilters && aConfigFilters.length > 0){
			filters = filters.concat(aConfigFilters);
		}

		if (filters.length > 0) {
			ret += ", filters: " + JSON.stringify(filters);
		}

		if (bSorter) {
			var oSortAnnotationCollection = oPresentationVariant.SortOrder;
			if (oSortAnnotationCollection.length < 1) {
				jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.SORTORDER_WARNING);
			} else {
				var sSorterValue = "";
				var oSortOrder;
				var sSortOrder;
				var sSortBy;
				for (var i = 0; i < oSortAnnotationCollection.length; i++) {
					oSortOrder = oSortAnnotationCollection[i];
					sSortBy = oSortOrder.Property.PropertyPath;
					sorterList.push(sSortBy);
					if (typeof oSortOrder.Descending == "undefined") {
						sSortOrder = 'true';
					} else {
						var checkFlag = oSortOrder.Descending.Bool || oSortOrder.Descending.Boolean;
						if (!checkFlag) {
							jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.BOOLEAN_ERROR);
							sSortOrder = 'true';
						} else {
							sSortOrder = checkFlag.toLowerCase() == 'true' ? 'true' : 'false';
						}
					}
					sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
				}
				/* trim the last ',' */
				ret += ", sorter: [" + sSorterValue.substring(0, sSorterValue.length - 1) + "]";
			}
		}

		jQuery.each(oMeasures, function(i, m){
			tmp = m.Measure.PropertyPath;
			measuresList.push(tmp);
			if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
				measuresList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
			}
		});
		jQuery.each(oDimensions, function(i, d){
			tmp = d.Dimension.PropertyPath;
			dimensionsList.push(tmp);
			if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
				dimensionsList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
			}
		});
		ret += ", parameters: {select:'" + [].concat(dimensionsList, measuresList).join(",");
		if (sorterList.length > 0) {
			ret += "," + sorterList.join(",");
		}
		/* close `parameters` */
		ret += "'}";

		if (maxItems) {
			ret += ", length: " + maxItems;
		}
		ret += "}";
		return ret;
	};
	sap.ovp.cards.charts.VizAnnotationManager.formatItems.requiresIContext = true;


	sap.ovp.cards.charts.VizAnnotationManager.formatByType = function(oMetadata, sProp, sVal) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var typeKey = self.constants.TYPE_KEY;
		if (!oMetadata || !oMetadata[sProp] || !oMetadata[sProp][typeKey]) {
			return sVal;
		}
		var aNumberTypes = [
			"Edm.Int",
			"Edmt.Int16",
			"Edm.Int32",
			"Edm.Int64",
			"Edm.Decimal"
		];
		var currentType = oMetadata[sProp][typeKey];
		if (jQuery.inArray(currentType, aNumberTypes) !== -1){
			return Number(sVal);
		}
		return sVal;
	};


	sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat = function(date) {
		if (date) {
			jQuery.sap.require("sap.ui.core.format.DateFormat");
			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: "dd-MMM"});
			return oDateFormat.format(new Date(date));
		}
		return "";
	};


	sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes = function() {
		jQuery.sap.require("sap.ui.core.format.NumberFormat");
		var customFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					if (pattern == "axisFormatter") {
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(
							{style: 'short',
								minFractionDigits: 2,
								maxFractionDigits: 2}
						);
						return numberFormat.format(Number(value)); 
					}
				}
		};

		jQuery.sap.require("sap.viz.ui5.api.env.Format");
		sap.viz.ui5.api.env.Format.numericFormatter(customFormatter);
	};


	sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis = function(vizFrame, feedName) {
		var dataModel = vizFrame.getModel();
		var type = vizFrame.getVizType();
		if (type != "line" && type != "bubble") {
			return;
		}
		if (!feedName) {
			feedName = type == "line" ? "categoryAxis" : "valueAxis";
		}
		var entitySet = vizFrame.getModel('ovpCardProperties').getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return;
		}
		var oMetadata = this.getMetadata(dataModel, entitySet);
		var feeds = vizFrame.getFeeds();
		for (var i = 0; i < feeds.length; i++) {
			if (feeds[i].getUid() == feedName) {
				var feedValues = feeds[i].getValues();
				if (!feedValues) {
					return;
				}
				for (var j = 0; j < feedValues.length; j++) {
					if (oMetadata[feedValues[j][this.constants.TYPE_KEY]] != "Edm.DateTime") {
						return;
					}
				}
				vizFrame.setVizProperties({categoryAxis:{
					title:{
						visible: false
					}
				}});
				return;
			}
		}
	};


	/*
	 * Check if annotations exist vis-a-vis manifest
	 * @param {String} term - Annotation with Qualifier
	 * @param {Object} annotation - Annotation Data
	 * @param {String} type - Type of Annotation
	 * @param {Boolean} [bMandatory=false] - Whether the term is mandatory
	 * @param {String} logViewId - Id of the view for log purposes
	 * @param {String} contentFragment - To check whether we're dealing with
	 * generic analytic card or legacy type.
	 * @returns {Boolean}
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkExists = function(term, annotation, type, bMandatory, logViewId, contentFragment) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		bMandatory = typeof bMandatory === "undefined" ? false : bMandatory;
		var ret = false;
		var annoTerm;
		if (!term && bMandatory) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + type + self.errorMessages.IS_MANDATORY);
			return ret;
		}
		if (!term) {
			/* Optional parameters can be blank */
			jQuery.sap.log.warning(logViewId + self.errorMessagesCARD_WARNING + type + self.errorMessages.IS_MISSING);
			ret = true;
			return ret;
		}
		annoTerm = annotation[term];
		if (!annoTerm || typeof annoTerm !== "object") {
			var logger = bMandatory ? jQuery.sap.log.error : jQuery.sap.log.warning;
			logger(logViewId + self.errorMessages.CARD_ERROR + "in " + type +
					". (" + term + " " + self.errorMessages.NOT_WELL_FORMED);
			return ret;
		}
		/*
		 * For new style generic analytical card, make a check chart annotation
		 * has chart type.
		 */
		if (contentFragment &&
			contentFragment == "sap.ovp.cards.charts.analytical.analyticalChart" &&
			type == "Chart Annotation" &&
			(!annoTerm.ChartType || !annoTerm.ChartType.EnumMember)) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + self.errorMessages.MISSING_CHARTTYPE +
					self.errorMessages.CHART_ANNO);
			return ret;
		}
		ret = true;
		return ret;
	};

	/*
	 * Check and log errors/warnings if any.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration = function(oController) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var ret = false;
		if (!oController) {
			return ret;
		}
		var selVar;
		var chartAnno;
		var contentFragment;
		var preVar;
		var idAnno;
		var dPAnno;
		var entityTypeData;
		var logViewId = "";
		var oCardsModel;
		var oView = oController.getView();
		if (oView) {
			logViewId = "[" + oView.getId() + "] ";
		}

		if (!(oCardsModel = oController.getCardPropertiesModel())) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.NO_CARD_MODEL);
			return ret;
		}

		entityTypeData = oCardsModel.getProperty("/entityType");
		if (!entityTypeData || jQuery.isEmptyObject(entityTypeData)) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return ret;
		}

		selVar = oCardsModel.getProperty("/selectionAnnotationPath");
		chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
		preVar = oCardsModel.getProperty("/presentationAnnotationPath");
		idAnno = oCardsModel.getProperty("/identificationAnnotationPath");
		dPAnno = oCardsModel.getProperty("/dataPointAnnotationPath");
		contentFragment = oCardsModel.getProperty("/contentFragment");

		ret = this.checkExists(selVar, entityTypeData, "Selection Variant", false, logViewId);
		ret = this.checkExists(chartAnno, entityTypeData, "Chart Annotation", true, logViewId, contentFragment) && ret;
		ret = this.checkExists(preVar, entityTypeData, "Presentation Variant", false, logViewId) && ret;
		ret = this.checkExists(idAnno, entityTypeData, "Identification Annotation", true, logViewId) && ret;
		ret = this.checkExists(dPAnno, entityTypeData, "Data Point", false, logViewId) && ret;
		return ret;
	};


	/*
	 * Check if backend supplies no data.
	 * If so, show the no-data fragment.
	 * Commented out due to an issue with filters.
	 * Shows No data available even when correct filters are applied the second time.
	 * So, removing it temporarily.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkNoData = function(oEvent, cardContainer, vizFrame) {
//		var self = sap.ovp.cards.charts.VizAnnotationManager;
//		var data, noDataDiv;
//		if (!cardContainer) {
//			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CARD_CONTAINER_ERROR +
//					"(" + vizFrame.getId() + ")");
//			return;
//		}
//		data = oEvent.getParameter("data");
//		if (!data || jQuery.isEmptyObject(data) ||
//			!data.results || !data.results.length) {
//
//			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.DATA_UNAVAIALABLE  +
//					"(" + vizFrame.getId() + ")");
//			noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
//			cardContainer.removeAllItems();
//			cardContainer.addItem(noDataDiv);
//		}
	};


	/*
	 * @param {Object} [oChartType] - Chart Annotation Object
	 * @returns {Object} - Get config object of a particular chart type from
	 * configuration defined in config.json.
	 * If the param is absent, return config of all charts.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getConfig = function(oChartType) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var ret = {};
		var chartAnnoName, chartType, analyticDIR, reference, fullConf = null;
		var bChartType = !!oChartType;
		if (!jQuery.sap.getObject("sap.ovp.cards.charts.config")) {
			analyticDIR = jQuery.sap.getModulePath("sap.ovp.cards.charts");
			sap.ovp.cards = sap.ovp.cards  || {};
			sap.ovp.cards.charts = sap.ovp.cards.charts || {};
			try {
				sap.ovp.cards.charts.config = jQuery.sap.loadResource({
					url: analyticDIR + "/config.json",
					dataType: "json",
					async: false
				});
			} catch (e) {
				jQuery.sap.log.error(self.errorMessages.CONFIG_LOAD_ERROR + e);
			}
			sap.ovp.cards.charts.config = sap.ovp.cards.charts.config || {};
		}
		fullConf = sap.ovp.cards.charts.config;

		if (!bChartType) {
			return fullConf;
		}

		if (!oChartType.EnumMember ||
			!(chartAnnoName = oChartType.EnumMember.split("/")) ||
			chartAnnoName.length < 2) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.INVALID_CHARTTYPE +
					self.errorMessages.ANNO_REF);
			return ret;
		}
		chartType = chartAnnoName[1];
		if (!fullConf[chartType]) {
			jQuery.sap.log.error(self.errorMessages.INVALID_CONFIG + chartType + " " +
					self.errorMessages.CONFIG_JSON);
			return ret;
		}
		if ((reference = fullConf[chartType].reference) &&
			fullConf[reference]) {
			var virtualEntry = jQuery.extend(true, {}, fullConf[reference]);
			fullConf[chartType] = virtualEntry;
		}
		ret = fullConf[chartType];
		return ret;
	};


	/*
	 * Formatter for VizFrame type.
	 * @param {Object} oChartType - Chart Annotation Object
	 * @returns {String} Valid Enum for Vizframe type
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getChartType = function(oChartType) {
		var ret = "";
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var config = self.getConfig(oChartType);
		if (!config) {
			return ret;
		}
		ret = config.type;
		return ret;
	};


	/*
	 * Check if roles are valid for dimension/measure for the chart type
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkRolesForProperty = function(queue, config, type) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		/* Nothing remains in the queue, all good !!! */
		if (!queue.length) {
			return;
		}
		var feedtype = type == "dimension" ? "Dimension" : "Measure";
		var queuedNames = [];
		jQuery.each(queue, function(i, val) {
			if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
				jQuery.sap.log.error(self.errorMessages.INVALID_CHART_ANNO);
				return false;
			}
			queuedNames.push(val[feedtype].PropertyPath);
		});
		var allowedRoles = jQuery.map(config.feeds, function(f) {
			if (f.type == type) {
				if (f.role) {
					return f.role.split("|");
				}
				return [];
			}
		});
		allowedRoles = jQuery.grep(allowedRoles, function(role, i) {
			return jQuery.inArray(role, allowedRoles) == i;
		}).join(", ");

		jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.INVALID_REDUNDANT  +
			type + "(s) " + queuedNames.join(", ") + ". " + self.errorMessages.ALLOWED_ROLES + config.type +
			self.errorMessages.CHART_IS + allowedRoles);
	};

	sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue = function(oValue) {
		var value;

		if (oValue) {
			if (oValue.String) {
				value = oValue.String;
			} else if (oValue.Boolean) {
				value = sap.ovp.cards.charts.VizAnnotationManager.getBooleanValue(oValue);
			} else {
				value = sap.ovp.cards.charts.VizAnnotationManager.getNumberValue(oValue);
			}
		}
		return value;
	};

	sap.ovp.cards.charts.VizAnnotationManager.getBooleanValue = function(oValue, bDefault) {
		if (oValue && oValue.Boolean) {
			if (oValue.Boolean.toLowerCase() === "true") {
				return true;
			} else if (oValue.Boolean.toLowerCase() === "false") {
				return false;
			}
		}
		return bDefault;
	};

	sap.ovp.cards.charts.VizAnnotationManager.getNumberValue = function(oValue) {
		var value;

		if (oValue) {
			if (oValue.String) {
				value = Number(oValue.String);
			} else if (oValue.Int) {
				value = Number(oValue.Int);
			} else if (oValue.Decimal) {
				value = Number(oValue.Decimal);
			} else if (oValue.Double) {
				value = Number(oValue.Double);
			} else if (oValue.Single) {
				value = Number(oValue.Single);
			}
		}
		return value;
	};

	/*
	 * Construct VizProperties and Feeds for VizFrame
	 * @param {Object} VizFrame
	 */
	sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes = function(vizFrame) {
		var oCardsModel, entityTypeObject, chartAnno, chartContext;
		var chartType, allConfig, config, aDimensions, aMeasures;
		var oVizProperties;
		var aQueuedProperties, aQueuedDimensions, aQueuedMeasures;
		var aPropertyWithoutRoles, aDimensionWithoutRoles = [], aMeasureWithoutRoles = [];
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var reference;
		chartType = vizFrame.getVizType();
		allConfig = this.getConfig();
		for (var key in allConfig) {
			if ((reference = allConfig[key].reference) &&
					allConfig[reference]) {
				var virtualEntry = jQuery.extend(true, {}, allConfig[reference]);
				allConfig[key] = virtualEntry;
			}
			if (allConfig[key].type == chartType) {
				config = allConfig[key];
				break;
			}
		}

		if (!config) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.CARD_CONFIG_ERROR + chartType + " " + self.errorMessages.CARD_CONFIG_JSON);
			return;
		}

		if (!(oCardsModel = vizFrame.getModel('ovpCardProperties'))) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.NO_CARD_MODEL);
			return;
		}
		var dataModel = vizFrame.getModel();
		var entitySet = oCardsModel.getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return;
		}
		entityTypeObject = oCardsModel.getProperty("/entityType");
		if (!entityTypeObject) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}
		var oMetadata = self.getMetadata(dataModel, entitySet);
		chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
		if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}

		if (!(aDimensions = chartContext.DimensionAttributes) ||
				!aDimensions.length) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.DIMENSIONS_MANDATORY);
			return;
		}
		if (!(aMeasures = chartContext.MeasureAttributes) ||
				!aMeasures.length) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.MEASURES_MANDATORY);
			return;
		}

		var bErrors = false;
		/*
		 * Check if given number of dimensions, measures
		 * are valid acc to config's min and max requirements
		 */
		[config.dimensions, config.measures].forEach(function(entry, i) {
			var oProperty = i ? aMeasures : aDimensions;
			var typeCue = i ? "measure(s)" : "dimension(s)";
			if (entry.min && oProperty.length < entry.min) {
				jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + chartType +
					" " + self.errorMessages.CARD_LEAST + entry.min + " " + typeCue);
				bErrors = true;
			}
			if (entry.max && oProperty.length > entry.max) {
				jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + chartType +
						self.errorMessages.CARD_MOST + entry.max + " " + typeCue);
				bErrors = true;
			}
		});

		if (bErrors) {
			return;
		}

		/* HEADER UX stuff */
		var bHideAxisTitle = true;
		
		if (config.hasOwnProperty("properties") &&
				config.properties.hasOwnProperty("hideLabelWhenHeader") &&
				!config.properties["hideLabelWhenHeader"]) {
			bHideAxisTitle = false;
		} else {
			var dPAnno = oCardsModel.getProperty("/dataPointAnnotationPath");
			var manifestTitle = oCardsModel.getProperty("/title");
			var manifestSubTitle = oCardsModel.getProperty("/subTitle");
			var headerAnnotation = entityTypeObject[dPAnno];
			var bDataPointTitleExist = (headerAnnotation &&
									typeof headerAnnotation == "object" &&
									headerAnnotation.Title &&
									headerAnnotation.Title.String);
			/*
			 * Show Axis Title(s) on chart only if none of the following exist:
			 * DataPoint->Title, manifest->title, manifest->subTitle
			 */
			if (!bDataPointTitleExist &&
					!manifestTitle &&
					!manifestSubTitle) {
					bHideAxisTitle = false;
			}
		}

		vizFrame.removeAllAggregation();
		/*
		 * Default viz properties template
		 */
		oVizProperties = {
				legend: {
					isScrollable: false
				},
				title: {
					visible: false
				},
				interaction:{
					noninteractiveMode: false,
					selectability: {
						legendSelection: false,
						axisLabelSelection: false,
						mode: 'EXCLUSIVE',
						plotLassoSelection: false,
						plotStdSelection: true
					},
					zoom:{   
							enablement: 'disabled'
					}
				},
				plotArea:{
					window: {
						start: 'firstDataPoint',
						end: 'lastDataPoint'
					}
				},
				general:{
					groupData: false
				}
		};

		aQueuedDimensions = aDimensions.slice();
		aQueuedMeasures = aMeasures.slice();
		jQuery.each(config.feeds, function(i, feed) {
			var uid = feed.uid;
			var aFeedProperties = [];
			if (feed.type) {
				var iPropertiesLength, feedtype, propertyName;
				if (feed.type === "dimension") {
					iPropertiesLength = aDimensions.length;
					feedtype = "Dimension";
					propertyName = "dimensions";
					aQueuedProperties = aQueuedDimensions;
					aPropertyWithoutRoles = aDimensionWithoutRoles;
				} else {
					iPropertiesLength = aMeasures.length;
					feedtype = "Measure";
					propertyName = "measures";
					aQueuedProperties = aQueuedMeasures;
					aPropertyWithoutRoles = aMeasureWithoutRoles;
				}
				var min = 0, max = iPropertiesLength;
				if (feed.min) {
					min = min > feed.min ? min : feed.min;
				}
				if (feed.max) {
					max = max < feed.max ? max : feed.max;
				}
				/* If no roles configured - add the property to feed */
				if (!feed.role) {
					var len = aQueuedProperties.length;
					for (var j = 0; j < len && aFeedProperties.length < max; ++j) {
						var val = aQueuedProperties[j];
						aQueuedProperties.splice(j, 1);
						--len;
						--j;
						aFeedProperties.push(val);
					}
				} else {
					var rolesByPrio = feed.role.split("|");
					jQuery.each(rolesByPrio, function(j, role) {
						if (aFeedProperties.length == max) {
							return false;
						}
						var len = aQueuedProperties.length;
						for (var k = 0; k < len && aFeedProperties.length < max; ++k) {
							var val = aQueuedProperties[k];
							if (val && val.Role && val.Role.EnumMember &&
								val.Role.EnumMember.split("/") && val.Role.EnumMember.split("/")[1]) {
								var annotationRole = val.Role.EnumMember.split("/")[1];
								if (annotationRole == role) {
									aQueuedProperties.splice(k, 1);
									--len;
									--k;
									aFeedProperties.push(val);
								}
							} else if (jQuery.inArray(val, aPropertyWithoutRoles) == -1) {
								aPropertyWithoutRoles.push(val);
							}
						}
					});
					if (aFeedProperties.length < max) {
						jQuery.each(aPropertyWithoutRoles, function(k, val) {
							/* defaultRole is the fallback role */
							var defaultRole;
							var index;
							if ((defaultRole = config[propertyName].defaultRole)  &&
								(jQuery.inArray(defaultRole, rolesByPrio) !== -1) &&
								(index = jQuery.inArray(val, aQueuedProperties)) !== -1) {
								aQueuedProperties.splice(index, 1);
								aFeedProperties.push(val);
								if (aFeedProperties.length == max) {
									return false;
								}
							}
						});
					}
					if (aFeedProperties.length < min) {
						jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.MIN_FEEDS + chartType +
						" " + self.errorMessages.FEEDS_OBTAINED + aFeedProperties.length + " " + self.errorMessages.FEEDS_REQUIRED + min +
						" " + self.errorMessages.FEEDS);
						return false;
					}
				}
				if (aFeedProperties.length) {
					var aFeeds = [];
					var dataset;
					if (!(dataset = vizFrame.getDataset())) {
						jQuery.sap.log.error(self.errorMessages.NO_DATASET);
						return false;
					}
					jQuery.each(aFeedProperties, function(i, val) {
						if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
							jQuery.sap.log.error(self.errorMessages.INVALID_CHART_ANNO);
							return false;
						}
						var property = val[feedtype].PropertyPath;
						var feedName = property;
						var textColumn = property;
						var edmType = null;
						if (oMetadata && oMetadata[property]) {
							feedName = oMetadata[property][self.constants.LABEL_KEY] || property;
							textColumn = oMetadata[property][self.constants.TEXT_KEY] || property;
							edmType = oMetadata[property][self.constants.TYPE_KEY] || null;
						}
						var displayBindingPath;
						if (edmType == "Edm.DateTime" && textColumn == property) {
							displayBindingPath = "{path:'" + property + "', formatter: 'sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat'}";
						} else {
							displayBindingPath = "{" + textColumn + "}";
						}
						aFeeds.push(feedName);
						if (feedtype == "Dimension") {
							dataset.addDimension(new sap.viz.ui5.data.DimensionDefinition({
								name: feedName,
								value: "{" + property + "}",
								displayValue: displayBindingPath
							}));
						} else {
							dataset.addMeasure(new sap.viz.ui5.data.MeasureDefinition({
								name: feedName,
								value: "{" + property + "}"
							}));
						}

					});
					vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
						'uid': uid,
						'type': feedtype,
						'values': aFeeds
					}));
					oVizProperties[uid] = {
							title:{
								visible: bHideAxisTitle ? false : true,
								text: aFeeds.join(", ")
							},
							label:{
								formatString:'axisFormatter'
							}
					};
					if (uid == "valueAxis") {
						oVizProperties[uid].layout = {
									maxWidth: 0.4
						};
					}
				}
			}
		});

		this.checkRolesForProperty(aQueuedDimensions, config, "dimension");
		this.checkRolesForProperty(aQueuedMeasures, config, "measure");

		vizFrame.setVizProperties(oVizProperties);
	};


	/*
	 * Get the (cached) OData metadata information.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getMetadata = function(model, entitySet) {
		var map = this.cacheODataMetadata(model);
		if (!map) {
			return undefined;
		}
		return map[entitySet];
	};


	/*
	 * Cache OData metadata information with key as UI5 ODataModel id.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.cacheODataMetadata  = function(model) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		if (model){
			if (!jQuery.sap.getObject("sap.ovp.cards.charts.cachedMetaModel")) {
				sap.ovp.cards.charts.cachedMetaModel = {};
			}
		var map = sap.ovp.cards.charts.cachedMetaModel[model.getId()];
		if (!map) {
			var metaModel = model.getMetaModel();
			map = {};
			var container = metaModel.getODataEntityContainer();
			jQuery.each(container.entitySet, function(anIndex,entitySet) {
				var entityType = metaModel.getODataEntityType(entitySet.entityType);
				var entitysetMap = {};
				jQuery.each(entityType.property,function(propertyIndex,property) {
					entitysetMap[property.name] = property;
				});
				map[entitySet.name] = entitysetMap;
			});
			sap.ovp.cards.charts.cachedMetaModel[model.getId()] = map;
		}
		return map;
		} else {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CACHING_ERROR );
		}
	};
	sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint = function(vizFrame, controller) {


		vizFrame.attachSelectData(function(oEvent){

			var self = sap.ovp.cards.charts.VizAnnotationManager;
			var oCardsModel = vizFrame.getModel('ovpCardProperties');
			var dataModel = vizFrame.getModel();
			var entitySet = oCardsModel.getProperty("/entitySet");
			var oMetadata = self.getMetadata(dataModel, entitySet);			
			var dimensionArrayNames = [], dimensions = [];
			var finalDimensions = {};
			var dimensionsArr = vizFrame.getDataset().getDimensions();
			var contextNumber;

			for (var i = 0; i < dimensionsArr.length; i++){
				dimensionArrayNames.push(dimensionsArr[i].getName());
			}

			var allData = jQuery.map(vizFrame.getDataset().getBinding("data").getCurrentContexts(), function(x) {return x.getObject();});

			if (oEvent.getParameter("data") && oEvent.getParameter("data")[0] && oEvent.getParameter("data")[0].data){
				
				contextNumber = oEvent.getParameter("data")[0].data._context_row_number;
				
				dimensions = Object.keys(oEvent.getParameter("data")[0].data);

				for (var j = 0; j < dimensionArrayNames.length; j++){
					for (var k = 0; k < dimensions.length; k++){
						if (dimensionArrayNames[j] == dimensions[k]){ 
							for (var key in oMetadata) {
								if (oMetadata.hasOwnProperty(key)) {
									var propertyName = oMetadata[key][self.constants.LABEL_KEY] || oMetadata[key][self.constants.NAME_KEY] || oMetadata[key][self.constants.NAME_CAP_KEY];
									if (propertyName == dimensions[k]) {
										finalDimensions[key] = allData[contextNumber][key];
									}
								}
							}							
						}
					}
				}
				var payLoad = {getObject : function(){return finalDimensions;}};

				controller.doNavigation(payLoad);
			}
		});
	};
}());

}; // end of sap/ovp/cards/charts/VizAnnotationManager.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Card.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.generic.Card.controller');
(function() {
    "use strict";
    /*global sap, jQuery */
    
    jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained

    

    var ActionUtils = sap.ovp.cards.ActionUtils;

    sap.ui.controller("sap.ovp.cards.generic.Card", {

        onInit: function() {
            var oHeader = this.getView().byId("ovpCardHeader");
            oHeader.attachBrowserEvent("click", this.onHeaderClick.bind(this));
            oHeader.addEventDelegate({
                onkeydown: function(oEvent) {
                    if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                        oEvent.preventDefault();
                        this.onHeaderClick();
                    }
                }.bind(this)
            });

            var oNumericControl = this.getView().byId("kpiNumberValue");
            if (oNumericControl) {
                oNumericControl.addEventDelegate({
                    onAfterRendering: function() {
                        var $numericControl = oNumericControl.$();
                        var $number = $numericControl.find(".sapMNCValueScr");
                        var $scale = $numericControl.find(".sapMNCScale");
                        $number.attr("aria-label", $number.text());
                        $scale.attr("aria-label", $scale.text());
                    }
                });
            }

            //if this card is owned by a dashboard layout, check if autoSpan is required
            try {
                var oCompData = this.getOwnerComponent().getComponentData();
                if (oCompData.appComponent && oCompData.appComponent.getDashboardLayoutUtil) {
                    var oDashboardLayoutUtil = oCompData.appComponent.getDashboardLayoutUtil();
                    if (oDashboardLayoutUtil && oDashboardLayoutUtil.isCardAutoSpan(oCompData.cardId)) {
                        this.resizeHandlerId = sap.ui.core.ResizeHandler.register(this.getView(), function(oEvent) {
                            jQuery.sap.log.info("DashboardLayout autoSize:" + oEvent.target.id + " -> " + oEvent.size.height);
                            oDashboardLayoutUtil.setAutoCardSpanHeight(oEvent);
                        });
                    }
                }
            } catch (err) {
                jQuery.sap.log.error("DashboardLayout autoSpan check failed.");
            }
        },

        onAfterRendering: function() {
            var footer = this.getCardPropertiesModel().getProperty("/footerFragment");
            if (footer) {
                this._handleCountFooter();
            }
        },

        onHeaderClick: function() {
            //call the navigation with the binded context to support single object cards such as quickview card
            this.doNavigation(this.getView().getBindingContext());
        },

        resizeCard: function(cardSpan) {
            jQuery.sap.log.info(cardSpan);
            //card was manually resized --> de-register handler
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
                this.resizeHandlerId = null;
            }
        },

        _handleCountFooter: function() {
            var countFooter = this.getView().byId("ovpCountFooter");
            if (countFooter) {
                //Gets the card items binding object
                var oItemsBinding = this.getCardItemsBinding();
                if (oItemsBinding) {
                    oItemsBinding.attachDataReceived(function() {
                        var iTotal = oItemsBinding.getLength();
                        var iCurrent = oItemsBinding.getCurrentContexts().length;
                        var countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Zero_Footer");
                        if (iTotal !== 0) {
                            countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Footer", [iCurrent, iTotal]);
                        }
                        countFooter.setText(countFooterText);
                        countFooter.data("aria-label", countFooterText);
                    });
                }
            }
        },

        /**
         * default empty implementation for the count footer
         */
        getCardItemsBinding: function() {},

        onActionPress: function(oEvent) {
            var sourceObject = oEvent.getSource(),
                oCustomData = this._getActionObject(sourceObject),
                context = sourceObject.getBindingContext();
            if (oCustomData.type.indexOf("DataFieldForAction") !== -1) {
                this.doAction(context, oCustomData);
            } else {
                this.doNavigation(context, oCustomData);
            }
        },
        _getActionObject: function(sourceObject) {
            var aCustomData = sourceObject.getCustomData();
            var oCustomData = {};
            for (var i = 0; i < aCustomData.length; i++) {
                oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
            }
            return oCustomData;
        },

        doNavigation: function(oContext, oNavigationField) {

            if (!oNavigationField) {
                oNavigationField = this.getEntityNavigationEntries(oContext)[0];
            }

            if (oNavigationField) {
                switch (oNavigationField.type) {
                    case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
                        this.doNavigationWithUrl(oContext, oNavigationField);
                        break;
                    case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
                        this.doIntentBasedNavigation(oContext, oNavigationField, false);
                        break;
                }
            }
        },

        doNavigationWithUrl: function(oContext, oNavigationField) {
            var oParsingSerivce = sap.ushell.Container.getService("URLParsing");

            //Checking if navigation is external or IntentBasedNav with paramters
            //If Not a internal navigation, navigate in a new window
            if (!(oParsingSerivce.isIntentUrl(oNavigationField.url))) {
                window.open(oNavigationField.url);
            } else {
                var oParsedShellHash = oParsingSerivce.parseShellHash(oNavigationField.url);
              //Url can also contain an intent based navigation with route, route can be static or dynamic with paramters
                this.doIntentBasedNavigation(oContext, oParsedShellHash, true);
            }
        },

        doIntentBasedNavigation: function (oContext, oIntent, oUrlWithIntent) {
            var oParameters,
                oNavArguments,
                sIntent,
                oEntity = oContext ? oContext.getObject() : null;

            if (oEntity && oEntity.__metadata){
                delete oEntity.__metadata;
            }

            var oNavigationHandler = sap.ovp.cards.CommonUtils.getNavigationHandler();

            if (oNavigationHandler) {
                if (oIntent) {
                    oParameters = this._getEntityNavigationParameters(oEntity);
                        oNavArguments = {
                            target: {
                                semanticObject: oIntent.semanticObject,
                                action: oIntent.action
                            },
                            appSpecificRoute: oIntent.appSpecificRoute,
                        params: oParameters.newSelectionVariant
                        };

                    var oAppInnerData = {
                        selectionVariant: oParameters.oldSelectionVariant
                    };

                    var fnHandleError = function (oError) {
                            if (oError instanceof Error) {
                                oError.showMessageBox();
                            }
                    };
                    if (oUrlWithIntent) {
                        if (oIntent && oIntent.semanticObject && oIntent.action) {
                            sIntent = oIntent.semanticObject + '-' + oIntent.action;
                            sap.ushell.Container.getService("CrossApplicationNavigation").isIntentSupported([sIntent])
                                .done(function (oResponse) {
                                    if (oResponse[sIntent].supported === true) {
                                        // enable link
                                        sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
                                    }
                                })
                                .fail(function () {
                                    jQuery.sap.log.error("Could not get authorization from isIntentSupported");
                                });
                        }
                    } else {
                        oNavigationHandler.navigate(oNavArguments.target.semanticObject, oNavArguments.target.action, oNavArguments.params,
                            oAppInnerData, fnHandleError);
                    }
                }
            }
        },

        doAction: function(oContext, action) {
            this.actionData = ActionUtils.getActionInfo(oContext, action, this.getEntityType());
            if (this.actionData.allParameters.length > 0) {
                this._loadParametersForm();
            } else {
                this._callFunction();
            }
        },

        getEntityNavigationEntries: function(oContext, sAnnotationPath) {
            var aNavigationFields = [];
            var oEntityType = this.getEntityType();

            if (!sAnnotationPath) {
                var oCardPropsModel = this.getCardPropertiesModel();
                var sIdentificationAnnotationPath = oCardPropsModel.getProperty("/identificationAnnotationPath");
                sAnnotationPath = sIdentificationAnnotationPath;
            }

            // if we have an array object e.g. we have records
            var aRecords = oEntityType[sAnnotationPath];
            if (Array.isArray(aRecords)) {

                // sort the records by Importance - before we initialize the navigation-actions of the card
                aRecords = sap.ovp.cards.AnnotationHelper.sortCollectionByImportance(aRecords);

                for (var i = 0; i < aRecords.length; i++) {
                    if (aRecords[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
                        aNavigationFields.push({
                            type: aRecords[i].RecordType,
                            semanticObject: aRecords[i].SemanticObject.String,
                            action: aRecords[i].Action.String,
                            label: aRecords[i].Label ? aRecords[i].Label.String : null
                        });
                    }
                    if (aRecords[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" && !aRecords[i].Url.UrlRef) {

                        var oModel = this.getView().getModel();
                        var oMetaData = oModel.oMetaModel;
                        var oEntityBindingContext = oMetaData.createBindingContext(oEntityType.$path);
                        var sBindingString = sap.ui.model.odata.AnnotationHelper.format(oEntityBindingContext, aRecords[i].Url);
                        var oCustomData = new sap.ui.core.CustomData({
                            key: "url",
                            value: sBindingString
                        });
                        oCustomData.setModel(oModel);
                        oCustomData.setBindingContext(oContext);
                        var oUrl = oCustomData.getValue();

                        aNavigationFields.push({
                            type: aRecords[i].RecordType,
                            url: oUrl,
                            value: aRecords[i].Value.String,
                            label: aRecords[i].Label ? aRecords[i].Label.String : null
                        });
                    }
                }
            }
            return aNavigationFields;
        },

        getModel: function() {
            return this.getView().getModel();
        },

        getMetaModel: function() {
            return this.getModel().getMetaModel();
        },

        getCardPropertiesModel: function() {
            return this.getView().getModel("ovpCardProperties");
        },

        getEntitySet: function() {
            if (!this.entitySet) {
                var sEntitySet = this.getCardPropertiesModel().getProperty("/entitySet");
                this.entitySet = this.getMetaModel().getODataEntitySet(sEntitySet);
            }

            return this.entitySet;
        },

        getEntityType: function() {
            if (!this.entityType) {
                if (this.getMetaModel() && this.getEntitySet()) {
                    this.entityType = this.getMetaModel().getODataEntityType(this.getEntitySet().entityType);
                }
            }

            return this.entityType;
        },

        getCardContentContainer: function() {
            if (!this.cardContentContainer) {
                this.cardContentContainer = this.getView().byId("ovpCardContentContainer");
            }
            return this.cardContentContainer;
        },

		//_saveAppState: function(sFilterDataSuiteFormat) {
		//	var oDeferred = jQuery.Deferred();
		//	var oAppState = sap.ushell.Container.getService("CrossApplicationNavigation").createEmptyAppState(this.getOwnerComponent());
		//	var sAppStateKey = oAppState.getKey();
		//	var oAppDataForSave = {
		//		selectionVariant: sFilterDataSuiteFormat
		//	};
		//	oAppState.setData(oAppDataForSave);
		//	var oSavePromise = oAppState.save();
        //
		//	oSavePromise.done(function() {
         //       oDeferred.resolve(sAppStateKey,oAppDataForSave);
		//	});
        //
		//	return oDeferred.promise();
		//},

        /**
         * Retrieve entity parameters (if exists) and add xAppState from oComponentData.appStateKeyFunc function (if exists)
         * @param oEntity
         * @returns {*}
         * @private
         */
        _getEntityNavigationParameters: function(oEntity) {
            var oUrlParameters = {};
            var oEntityType;
            var oComponentData = this.getOwnerComponent().getComponentData();
            var oGlobalFilter = oComponentData ? oComponentData.globalFilter : undefined;
            var oCardFilters = sap.ovp.cards.AnnotationHelper.getCardFilters(this.getCardPropertiesModel());
            if (oCardFilters && oCardFilters[0] && oCardFilters[0].path) {
                oCardFilters[0].path = oCardFilters[0].path.replace("/", ".");
            }
            var oSelectionVariant;

            // Build result object of card parameters
            if (oEntity) {
                oEntityType = this.getEntityType();
                var key;
                for (var i = 0; oEntityType.property && i < oEntityType.property.length; i++) {
                    key = oEntityType.property[i].name;
                    var vAttributeValue = oEntity[key];

                    if (oEntity.hasOwnProperty(key)) {
                        if (window.Array.isArray(oEntity[key]) && oEntity[key].length === 1) {
                            oUrlParameters[key] = oEntity[key][0];
                        } else if (jQuery.type(vAttributeValue) !== "object") {
                            oUrlParameters[key] = vAttributeValue;
                        }
                    }
                }
            }

            //Build selection variant object from global filter, card filter and card parameters
            oSelectionVariant = this._buildSelectionVariant(oGlobalFilter, oCardFilters);

            var oNavigationHandler = sap.ovp.cards.CommonUtils.getNavigationHandler();
            var newSelectionVariant = null;
            if (oNavigationHandler) {
                newSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oUrlParameters, oSelectionVariant.toJSONString());
            }

            return {
                oldSelectionVariant: oSelectionVariant ? oSelectionVariant.toJSONString() : null,
                newSelectionVariant: newSelectionVariant ? newSelectionVariant.toJSONString() : null
            };
        },

        _buildSelectionVariant: function(oGlobalFilter, oCardFilters) {
            var sGlobalFilter = oGlobalFilter ? oGlobalFilter.getFilterDataAsString() : "{}";
            var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant(sGlobalFilter);
            var oFilter, sValue1, sValue2;

            // Add card filters to selection variant
            for (var i = 0; i < oCardFilters.length; i++) {
                oFilter = oCardFilters[i];
                //value1 might be typeof number, hence we check not typeof undefined
                if (oFilter.path && oFilter.operator && typeof oFilter.value1 !== "undefined") {
                    //value2 is optional, hence we check it separately
                    sValue1 = oFilter.value1.toString();
                    sValue2 = (typeof oFilter.value2 !== "undefined") ? oFilter.value2.toString() : undefined;
                    oSelectionVariant.addSelectOption(oFilter.path, "I", oFilter.operator, sValue1, sValue2);
                }
            }

            return oSelectionVariant;
        },

        _loadParametersForm: function() {
            var oParameterModel = new sap.ui.model.json.JSONModel();
            oParameterModel.setData(this.actionData.parameterData);
            var that = this;

            // first create dialog
            var oParameterDialog = new sap.m.Dialog('ovpCardActionDialog', {
                title: this.actionData.sFunctionLabel,
                afterClose: function() {
                    oParameterDialog.destroy();
                }
            }).addStyleClass("sapUiNoContentPadding");

            // action button (e.g. BeginButton)
            var actionButton = new sap.m.Button({
                text: this.actionData.sFunctionLabel,
                press: function(oEvent) {
                    var mParameters = ActionUtils.getParameters(oEvent.getSource().getModel(), that.actionData.oFunctionImport);
                    oParameterDialog.close();
                    that._callFunction(mParameters);
                }
            });

            // cancel button (e.g. EndButton)
            var cancelButton = new sap.m.Button({
                text: "Cancel",
                press: function() {
                    oParameterDialog.close();
                }
            });
            // assign the buttons to the dialog
            oParameterDialog.setBeginButton(actionButton);
            oParameterDialog.setEndButton(cancelButton);

            // preparing a callback function which will be invoked on the Form's Fields-change
            var onFieldChangeCB = function(oEvent) {
                var missingMandatory = ActionUtils.mandatoryParamsMissing(oEvent.getSource().getModel(), that.actionData.oFunctionImport);
                actionButton.setEnabled(!missingMandatory);
            };

            // get the form assign it the Dialog and open it
            var oForm = ActionUtils.buildParametersForm(this.actionData, onFieldChangeCB);

            oParameterDialog.addContent(oForm);
            oParameterDialog.setModel(oParameterModel);
            oParameterDialog.open();
        },

        _callFunction: function(mUrlParameters) {
            var mParameters = {
                batchGroupId: "Changes",
                changeSetId: "Changes",
                urlParameters: mUrlParameters,
                forceSubmit: true,
                context: this.actionData.oContext,
                functionImport: this.actionData.oFunctionImport
            };
            var that = this;
            var oPromise = new Promise(function(resolve, reject) {
                var model = that.actionData.oContext.getModel();
                var sFunctionImport;
                sFunctionImport = "/" + mParameters.functionImport.name;
                model.callFunction(sFunctionImport, {
                    method: mParameters.functionImport.httpMethod,
                    urlParameters: mParameters.urlParameters,
                    batchGroupId: mParameters.batchGroupId,
                    changeSetId: mParameters.changeSetId,
                    headers: mParameters.headers,
                    success: function(oData, oResponse) {
                        resolve(oResponse);
                    },
                    error: function(oResponse) {
                        reject(oResponse);
                    }
                });
            });
            //Todo: call translation on message toast
            oPromise.then(function(oResponse) {
                return sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Success"), {
                    duration: 1000
                });
            }, function(oError) {
                return sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error"), {
                    duration: 1000
                });
            });
        },

        /**
         * In case of error card implementation can call this method to display
         * card error state.
         * Current instance of the card will be destroied and instead loading card
         * will be presenetd with the 'Cannot load card' meassage
         */
        setErrorState: function() {
            //get the current card component
            var oCurrentCard = this.getOwnerComponent();
            //get the component container
            var oComponentContainer = oCurrentCard.oContainer;
            //prepare card configuration, i.e. category, title, description and entitySet
            //which are required for the loading card. in addition set the card state to error
            //so no loading indicator will be presented
            var oCardPropertiesModel = this.getCardPropertiesModel();
            var oComponentConfig = {
                name: "sap.ovp.cards.loading",
                componentData: {
                    model: this.getView().getModel(),
                    settings: {
                        category: oCardPropertiesModel.getProperty("/category"),
                        title: oCardPropertiesModel.getProperty("/title"),
                        description: oCardPropertiesModel.getProperty("/description"),
                        entitySet: oCardPropertiesModel.getProperty("/entitySet"),
                        state: sap.ovp.cards.loading.State.ERROR
                    }
                }
            };
            //create the loading card
            var oLoadingCard = sap.ui.component(oComponentConfig);
            //set the loading card in the container
            oComponentContainer.setComponent(oLoadingCard);
            //destroy the current card
            setTimeout(function() {
                oCurrentCard.destroy();
            }, 0);
        }

    });
})();
}; // end of sap/ovp/cards/generic/Card.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Component') ) {
(function() {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.generic.Component");
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

	

	sap.ui.core.UIComponent.extend("sap.ovp.cards.generic.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string"
				},
				"headerExtensionFragment": {
					"type": "string"
				},
				"contentPosition": {
					"type": "string",
					"defaultValue": "Middle"
				},
				"footerFragment": {
					"type": "string"
				},
				"identificationAnnotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Identification"
				},
				"selectionAnnotationPath": {
					"type": "string"
				},
				"filters": {
					"type": "object"
				},
				"addODataSelect": {
					"type": "boolean",
					"defaultValue": false
				}
			},
			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: ["sap.m"],
				components: []
			},
			config: {}
		},

		/**
		 * Default "abstract" empty function.
		 * In case there is a need to enrich the default preprocessor which provided by OVP, the extended Component should provide this function and return a preprocessor object.
		 * @public
		 * @returns {Object} SAPUI5 preprocessor object
		 */
		getCustomPreprocessor: function() {},

		getPreprocessors: function(ovplibResourceBundle) {
			var oComponentData = this.getComponentData(),
				oSettings = oComponentData.settings,
				oModel = oComponentData.model,
				oMetaModel,
				oEntityType,
				oEntityTypeContext,
				oEntitySetContext;

			//Backwards compatibility to support "description" property
			if (oSettings.description && !oSettings.subTitle) {
				oSettings.subTitle = oSettings.description;
			}
			if (oModel) {
				oMetaModel = oModel.getMetaModel();
				if (oSettings.entitySet) {
					var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
					var sEntitySetPath = oMetaModel.getODataEntitySet(oSettings.entitySet, true);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

					oEntitySetContext = oMetaModel.createBindingContext(sEntitySetPath);
					oEntityTypeContext = oMetaModel.createBindingContext(oEntityType.$path);
				}
			}

			var oCardProperties = this._getCardPropertyDefaults();
			var oCardLayoutData = this._completeLayoutDefaults(oCardProperties, oSettings);
			var oAdditionalData = {
				metaModel: oMetaModel,
				entityType: oEntityType
			};
			//set the densityProperty for the card
			oCardProperties.densityStyle = this._setCardpropertyDensityAttribute();
			if (oCardLayoutData) {
				oAdditionalData.cardLayout = oCardLayoutData.cardLayout;
			}
			oCardProperties = jQuery.extend(true, oAdditionalData, oCardProperties, oSettings);

			var oOvpCardPropertiesModel = new sap.ui.model.json.JSONModel(oCardProperties);
			var ovplibResourceBundle = this.getOvplibResourceBundle();

			// device model
			var oDeviceModel = new sap.ui.model.json.JSONModel(sap.ui.Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			var oDefaultPreprocessors = {
				xml: {
					bindingContexts: {
						entityType: oEntityTypeContext,
						entitySet: oEntitySetContext
					},
					models: {
						device: oDeviceModel,
						entityType: oMetaModel,
						entitySet: oMetaModel,
						ovpMeta: oMetaModel,
						ovpCardProperties: oOvpCardPropertiesModel,
						ovplibResourceBundle: ovplibResourceBundle
					},
					ovpCardProperties: oOvpCardPropertiesModel,
					dataModel: oModel,
					_ovpCache: {}
				}
			};

			return jQuery.extend(true, {}, this.getCustomPreprocessor(), oDefaultPreprocessors);
		},

		_completeLayoutDefaults: function(oCardProperties, oSettings) {
			var oCardLayoutData = null,
				oComponentData = this.getComponentData(),
				oUiModel = null,
				oConfig = null,
				iRowHeightPx = null;
			if (oComponentData.appComponent){
				oUiModel = oComponentData.appComponent.getModel("ui");
				oConfig = oComponentData.appComponent.getOvpConfig();
			}
			if (!oConfig) {
				return null;
			}
			if (oConfig.containerLayout === "dashboard") {
				iRowHeightPx = oComponentData.appComponent.getDashboardLayoutUtil().getRowHeightPx();
				if (oSettings.defaultSpan) {
					oCardLayoutData = {
						cardLayout: {
							colSpan: oSettings.defaultSpan.cols,
							rowSpan: oSettings.defaultSpan.rows
						}
					};
				} else {
					//no defaultSapn
					oCardLayoutData = {
						cardLayout: {
							colSpan: 1,
							rowSpan: 1
						}
					};
				}

				//in dashboard layout each card may contain layout data -> use this if available
				var aDashboardLayoutData = oUiModel.getProperty("/initialDashboardLayout");
				var sCardId = oComponentData.cardId;
				for (var i = 0; i < aDashboardLayoutData.length; i++) {
					var oDashboardLayoutData = aDashboardLayoutData[i];
					if (oDashboardLayoutData[sCardId]) {
						oCardLayoutData.cardLayout = oDashboardLayoutData[sCardId];
						break;
					}
				}
				
				if (iRowHeightPx) {
					oCardLayoutData.cardLayout.iRowHeigthPx = iRowHeightPx;
				}

			} else {
				if (oConfig.cards[oComponentData.cardId].template === "sap.ovp.cards.linklist") {
					oCardLayoutData = {
						cardLayout: {
							items: 5
						}
					};
				}
			}

			return oCardLayoutData;
		},

		_getCardPropertyDefaults: function() {
			var oCardProperties = {};
			var oPropsDef = this.getMetadata().getAllProperties();
			var oPropDef;
			for (var propName in oPropsDef) {
				oPropDef = oPropsDef[propName];
				if (oPropDef.defaultValue !== undefined) {
					oCardProperties[oPropDef.name] = oPropDef.defaultValue;
				}
			}
			return oCardProperties;
		},

		getOvplibResourceBundle: function() {
			if (!this.ovplibResourceBundle) {
				var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
				this.ovplibResourceBundle = oResourceBundle ? new sap.ui.model.resource.ResourceModel({
					bundleUrl: oResourceBundle.oUrlInfo.url
				}) : null;
			}
			return this.ovplibResourceBundle;
		},

		createContent: function() {
			var oComponentData = this.getComponentData && this.getComponentData();
			var oModel = oComponentData.model;
			var oPreprocessors = this.getPreprocessors();

			var oView;
			oView = sap.ui.view({
				preprocessors: oPreprocessors,
				type: sap.ui.core.mvc.ViewType.XML,
				viewName: "sap.ovp.cards.generic.Card"
			});

			oView.setModel(oModel);
			// check if i18n model is available and then add it to card view
			if (oComponentData.i18n) {
				oView.setModel(oComponentData.i18n, "@i18n");
			}
			oView.setModel(oPreprocessors.xml.ovpCardProperties, "ovpCardProperties");
			oView.setModel(this.getOvplibResourceBundle(), "ovplibResourceBundle");

			return oView;
		},

		/**
		 * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy
		 * design mode class should be set, which influences the size appearance of some controls.
		 * @public
		 * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set
		 */
		getContentDensityClass: function() {
			if (this._sContentDensityClass === undefined) {
				// check whether FLP has already set the content density class; do nothing in this case
				if (jQuery(document.body).hasClass("sapUiSizeCozy") || jQuery(document.body).hasClass("sapUiSizeCompact")) {
					this._sContentDensityClass = "";
				} else if (!sap.ui.Device.support.touch) { // apply "compact" mode if touch is not supported
					this._sContentDensityClass = "sapUiSizeCompact";
				} else {
					// "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
					this._sContentDensityClass = "sapUiSizeCozy";
				}
			}
			return this._sContentDensityClass;
		},

		_setCardpropertyDensityAttribute: function() {
			var sContentDensityClassName = this.getContentDensityClass();
			if (sContentDensityClassName === "sapUiSizeCompact") {
				return "compact";
			} else if (sContentDensityClassName === "sapUiSizeCozy") {
				return "cozy";
			} else if (!sap.ui.Device.support.touch) { // apply "compact" mode if touch is not supported
				return "compact";
			} else {
				// "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
				return "cozy";
			}
		}

	});

})();
}; // end of sap/ovp/cards/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.image.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.image.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.image.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.image.Image"
                }
            },

            version: "1.38.10",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.image.Image"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/image/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.linklist.AnnotationHelper') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function() {
	"use strict";
	/*global dispatchEvent, document, jQuery, localStorage, sap */

	// ensure that sap.ushell exists
	jQuery.sap.declare("sap.ovp.cards.linklist.AnnotationHelper");

	sap.ovp.cards.linklist.AnnotationHelper = {};

	/*
	 * return the sorters that need to be applyed on an aggregation
	 * @param ovpCardProperties - card properties model which might contains sort configurations
	 * @returns {Array} of model sorters
	 */
	function getSorters(ovpCardProperties) {
		var aSorters = [];
		var oSorter, bDescending;

		//get the configured sorter if exist and append them to the sorters array
		var sPropertyPath = ovpCardProperties.getProperty("/sortBy");
		if (sPropertyPath) {
			// If sorting is enabled by card configuration
			var sSortOrder = ovpCardProperties.getProperty("/sortOrder");
			if (sSortOrder && sSortOrder.toLowerCase() !== "descending") {
				bDescending = false;
			} else {
				bDescending = true;
			}
			oSorter = {
				path: sPropertyPath,
				descending: bDescending
			};
			aSorters.push(oSorter);
		}
		// returning Sorter
		return aSorters;
	}

	/*
	 * return the filters that need to be applyed on an aggregation
	 * @param ovpCardProperties - card properties model which might contains filters configurations
	 * @param oSelectionVariant - optional selection variant annotation with SelectOptions configuration
	 * @returns {Array} of model filters
	 */
	function getFilters(ovpCardProperties, oSelectionVariant) {
		var aFilters = [];
		//get the configured filters if exist and append them to the filter array
		var aConfigFilters = ovpCardProperties.getProperty("/filters");
		if (aConfigFilters) {
			aFilters = aFilters.concat(aConfigFilters);
		}

		//get the filters from the selection variant annotations if exists
		var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
		var oSelectOption, sPropertyPath, oRange;
		if (aSelectOptions) {
			for (var i = 0; i < aSelectOptions.length; i++) {
				oSelectOption = aSelectOptions[i];
				sPropertyPath = oSelectOption.PropertyName.PropertyPath;
				//a select option might contains more then one filter in the Ranges array
				for (var j = 0; j < oSelectOption.Ranges.length; j++) {
					oRange = oSelectOption.Ranges[j];
					if (oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
						//create the filter. the Low value is mandatory
						var oFilter = {
							path: sPropertyPath,
							operator: oRange.Option.EnumMember.split("/")[1],
							value1: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.Low),
							value2: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.High)
						};
						//append the filter to the filters array
						aFilters.push(oFilter);
					}
				}
			}
		}
		// returning Filter
		return aFilters;
	}

	/*
	 * This formatter method parses the items aggregation path in the Model.
	 * @param iContext
	 * @param itemsPath
	 * @returns items aggregation path in the Model
	 */
	sap.ovp.cards.linklist.AnnotationHelper.formatItems = function(iContext, oEntitySet) {
		var oModel = iContext.getSetting("ovpCardProperties");
		var oMetaModel = oModel.getProperty("/metaModel");
		var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		var sEntitySetPath = "/" + oEntitySet.name;
		var oSelectionVariant = oEntityType[oModel.getProperty("/selectionAnnotationPath")];
		var iItemsLength = oModel.getProperty("/cardLayout/items");
		if (iItemsLength === undefined) {
			var oCardLayout = oModel.getProperty("/cardLayout");
			if (oCardLayout && !oCardLayout.autoSpan && oCardLayout.autoSpan !== true) {
				// Item Length dependent on Card listFlavor
				if (oModel.getProperty("/listFlavor") === "standard") {
					var iRowHeight = oModel.getProperty("/cardLayout/iRowHeigthPx");
					if (iRowHeight === undefined) {
					    iRowHeight = 176;
					}
					var iItemHeight = 72;
					if (oModel.getProperty("/densityStyle") === "cozy") {
						iItemHeight = 72;
					} else {
						iItemHeight = 60;
					}
					// Calculate Items dependent on colSpan and rowSpan and ItemHeigth
					iItemsLength = Math.floor(oCardLayout.rowSpan * iRowHeight / iItemHeight) * oCardLayout.colSpan;
				} else if (oModel.getProperty("/listFlavor") === "carousel") {
					iItemsLength = 10;
				} else if (oModel.getProperty("/listFlavor") === "grid") {
					iItemsLength = oCardLayout.rowSpan * oCardLayout.colSpan * 2;
				}
			}
		}
		//check if entity set needs parameters
		// if selection-annotations path is supplied - we need to resolve it in order to resolve the full entity-set path
		if (oSelectionVariant) {
			if (oSelectionVariant && oSelectionVariant.Parameters) {
				// in case we have UI.SelectionVariant annotation defined on the entityType including Parameters - we need to resolve the entity-set path to include it
				sEntitySetPath = sap.ovp.cards.linklist.AnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting("dataModel"), oEntitySet,
					oSelectionVariant);
			}
		}

		var result = "{path: '" + sEntitySetPath + "', length: " + iItemsLength;

		//apply sorters information
		var aSorters = getSorters(oModel);
		if (aSorters.length > 0) {
			result = result + ", sorter:" + JSON.stringify(aSorters);
		}
		//apply filters information
		var aFilters = getFilters(oModel, oSelectionVariant);
		if (aFilters.length > 0) {
			result = result + ", filters:" + JSON.stringify(aFilters);
		}
		result = result + "}";

		// returning the parsed path for the Card's items-aggregation binding
		return result;
	};

	/*
	 * This formatter method parses the items Url and extend it with the "baseUrl" if required
	 * @param iContext
	 * @param sUrl
	 * @returns sUrl
	 */
	sap.ovp.cards.linklist.AnnotationHelper.formatUrl = function(iContext, sUrl) {
		var sBaseUrl = iContext.getModel().getProperty("/baseUrl");
		if (sUrl.startsWith(sBaseUrl) || sUrl.indexOf("://") > 0) {
			return sUrl;
		} else if (sUrl.startsWith("/")) {
			return sBaseUrl + sUrl;
		} else {
			return sBaseUrl + "/" + sUrl;
		}
	};

	/* This formatter check whether is ImageUri is true or not
	 *
	 * @returns true or false
	 */
	sap.ovp.cards.linklist.AnnotationHelper.isImageUrl = function(oInterface, oDataField) {
		var bIsImageUrl = true;
		var sOdataPath = sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		if (sOdataPath.toLowerCase().indexOf("icon") > 0) {
			bIsImageUrl = false;
		}
		return bIsImageUrl;
	};

	/* This formatter check whether is ImageUri is true or not
	 *
	 * @returns true or false
	 */
	sap.ovp.cards.linklist.AnnotationHelper.isImageUrlStaticData = function(oDataField) {
		var bIsImageUrl = true;
		if (oDataField === undefined) {
			return null;
		} else if (oDataField.toLowerCase().indexOf("icon") > 0) {
			bIsImageUrl = false;
		}
		return bIsImageUrl;
	};
	/* This formatter make string to path
	 * @returns Icon Path
	 */
	sap.ovp.cards.linklist.AnnotationHelper.getIconPath = function(sTypeImageUrl) {
		var sIconPath = "{" + sTypeImageUrl.String + "}";
		return sIconPath;
	};

	/* This formatter make string to path
	 * @returns Path like {<string>}
	 */
	sap.ovp.cards.linklist.AnnotationHelper.formatString = function(sObject) {
		var sPath = "{" + sObject.String + "}";
		return sPath;
	};

	/*
	 * @param oAnnotation
	 * @returns 0 for false - there are no actions for this context
	 *          1 for true - there are actions for this context
	 *          does not return actual boolean - so we won't need to parse the result in the xml
	 */
	sap.ovp.cards.linklist.AnnotationHelper.linkedAction = function(oAnnotation) {
		if (oAnnotation) {
			return 1;
		}
		return 0;
	};

	sap.ovp.cards.linklist.AnnotationHelper.staticContentWithLength = function(sPath) {
		var sPathWithLength = "{" + sPath + ", length:3}";
		return sPathWithLength;
	};

	sap.ovp.cards.linklist.AnnotationHelper.contentRowIndex = function(oRow) {
		if (this._repeatRowId !== this.getId()) {
			this._rowIndex = 0;
			this._repeatRowId = this.getId();
		} else {
			this._rowIndex++;
		}
		return this._rowIndex;
	};

	//*** Requires IContext ***//
	sap.ovp.cards.linklist.AnnotationHelper.isImageUrl.requiresIContext = true;
	sap.ovp.cards.linklist.AnnotationHelper.formatItems.requiresIContext = true;
	sap.ovp.cards.linklist.AnnotationHelper.formatUrl.requiresIContext = true;
}());
}; // end of sap/ovp/cards/linklist/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.linklist.Component') ) {
(function() {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.linklist.Component");
	
	

	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.linklist.Component", {
		// use inline declaration instead of component.json to save 1 round trip

		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.linklist.LinkList"
				},
				"annotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.HeaderInfo"
				},
				"communicationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.Communication.v1.Contact"
				}				
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: ["sap.m"],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.linklist.LinkList"
					}
				}
			}
		},

		getCustomPreprocessor: function() {
		}
	});
})();
}; // end of sap/ovp/cards/linklist/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.list.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.list.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.list.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.list.List"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountFooter"
                },
                "headerExtensionFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.KPIHeader"
                }
            },

            version: "1.38.10",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.list.List"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/list/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.loading.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.loading.Component");
    

    sap.ovp.cards.loading.State = {
        ERROR: "Error",
        LOADING: "Loading"
    };

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.loading.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.loading.LoadingFooter"
                },
                "state": {
                    "type": "string",
                    "defaultValue": sap.ovp.cards.loading.State.LOADING
                }
            },

            version: "1.38.10",

            library: "sap.ovp",
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.loading.Loading"
                    }
                }
            }

        }

    });
})();


}; // end of sap/ovp/cards/loading/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.quickview.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.quickview.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.quickview.Quickview"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.Facets"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.ActionsFooter"
                }
            },

            version: "1.38.10",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.quickview.Quickview"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/quickview/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Quickview.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.quickview.Quickview.controller');
(function () {
    "use strict";
    /*global sap, jQuery */

    
    sap.ui.controller("sap.ovp.cards.quickview.Quickview", {
        onInit: function () {
        },
        onAfterRendering: function(){
        }

    });
})();

}; // end of sap/ovp/cards/quickview/Quickview.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.stack.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.stack.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.stack.Stack"
                },
                "contentPosition": {
                    "type": "string",
                    "defaultValue": "Right"
                },
                "objectStreamCardsSettings" : {
                    "type": "object",
                    "defaultValue": {
                    }
                },
                "objectStreamCardsTemplate" : {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.quickview"
                },
                "objectStreamCardsNavigationProperty" : {
                    "type": "string"
                }
            },

            version: "1.38.10",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.stack.Stack"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/stack/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.table.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.table.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.table.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.table.Table"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountFooter"
                },
                "headerExtensionFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.KPIHeader"
                }
            },

            version: "1.38.10",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.table.Table"
                    }
                }
            }
        }
    });
})();


}; // end of sap/ovp/cards/table/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.library') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ovp (1.38.10)
 */
jQuery.sap.declare("sap.ovp.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP library: sap.ovp
 *
 * @namespace
 * @name sap.ovp
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.generic.app.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.comp.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.ovp",
	dependencies : ["sap.ui.core","sap.ui.layout","sap.ui.generic.app","sap.m","sap.ui.comp"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	version: "1.38.10"
});


}; // end of sap/ovp/library.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.CardContentContainer') ) {
/*!
 * ${copyright}
 */

/*global sap window*/

jQuery.sap.declare('sap.ovp.ui.CardContentContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/CardContentContainer",["jquery.sap.global", "sap/ovp/library"],
    function(jQuery) {
        "use strict";

        var CardContentContainer = sap.m.FlexBox.extend("sap.ovp.ui.CardContentContainer", {
            metadata: {
                library: "sap.ovp"
            },
            renderer: {
                render: function (oRm, oControl) {
                    oRm.write("<div");
                    oRm.writeControlData(oControl);
                    oRm.addClass("sapOvpCardContentContainer");
                    oRm.writeClasses();
                    oRm.write(">");
                    var items = oControl.getItems();
                    for (var i = 0; i < items.length; i++) {
                        oRm.renderControl(items[i]);
                    }
                    oRm.write("</div>");
                }
            }

        });


        return CardContentContainer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/CardContentContainer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.CustomData') ) {
/*!
 * ${copyright}
 */
jQuery.sap.declare('sap.ovp.ui.CustomData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.library'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/CustomData",['jquery.sap.global', 'sap/ui/core/CustomData', 'sap/ushell/library'],
    function (jQuery, CustomData, library) {
        "use strict";

        var CustomData = CustomData.extend("sap.ovp.ui.CustomData");
           // fnOrigcheckWriteToDom = CustomData.prototype._checkWriteToDom;


        CustomData.prototype._checkWriteToDom = function (oRelated) {
            var sKey = this.getKey().toLowerCase(),
                bIsAccessibilityOn = sap.ui.getCore().getConfiguration().getAccessibility();
            if (!bIsAccessibilityOn) {
                return;
            }
            if (!this.getWriteToDom()) {
                return null;
            }
            var value = this.getValue();

            if (typeof value != "string") {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the value is not a string.");
                return null;
            }

            if (!(sap.ui.core.ID.isValid(sKey)) || (sKey.indexOf(":") != -1)) {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (must be a valid sap.ui.core.ID without any colon).");
                return null;
            }

            if (sKey == jQuery.sap._FASTNAVIGATIONKEY) {
                value = /^\s*(x|true)\s*$/i.test(value) ? "true" : "false"; // normalize values
            } else if (sKey.indexOf("sap-ui") == 0) {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (may not start with 'sap-ui').");
                return null;
            }
            return {key: sKey, value: value};
        };

        return CustomData;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/CustomData.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutModel') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutModel",[], function() {
		"use strict";

		var LayoutModel = function(uiModel, iColCount) {
			this.uiModel = uiModel;
			this.setColCount(iColCount);
			this.aCards = [];
			this.oLayoutVars = null;
			this.oUndoBuffer = {};
			this.bSequenceLayout = null;
			this.oCurrLayoutVar = null;
			this.sManifestLayoutsJSON = null;
			this.iDisplaceRow = 9999;
		};

		/**
		 * set number of columns
		 *
		 * @method setColCount
		 * @param {Int} iColCount - number of columns
		 */
		LayoutModel.prototype.setColCount = function(iColCount) {

			if (!iColCount) {
				this.iColCount = 5; //default
			} else if (iColCount !== this.iColCount) {
				//extract current changed layout variant for later use
				if (this.bLayoutChanged) {
					this._updateCurrentLayoutVariant();
					this.oUndoBuffer = {};
					this.bLayoutChanged = false;
				}
				this.iColCount = iColCount;

				//console.log("colCount: " + this.iColCount);
			}
		};

		/**
		 * set layout variants
		 * (add and overwriting existing ones)
		 *
		 * @method setLayoutVars
		 * @param {Object} oLayoutVars - object containing layout variants
		 */
		LayoutModel.prototype.setLayoutVars = function(oLayoutVars) {
			var layoutKey = null;
			var sCurrentId = null;
			if (this.oCurrLayoutVar && this.oCurrLayoutVar.__ovpDBLVarId) {
				sCurrentId = this.oCurrLayoutVar.__ovpDBLVarId;
			}
			for (layoutKey in oLayoutVars) {
				if (oLayoutVars.hasOwnProperty(layoutKey) && oLayoutVars[layoutKey]) {
					//overwrite existing ones
					this.oLayoutVars[layoutKey] = oLayoutVars[layoutKey];
				}
			}
			if (sCurrentId) {
				this.oCurrLayoutVar = this.oLayoutVars[sCurrentId];
			}

			//build layout based on new variant
			this._buildGrid();

			//condense empty rows (includes update of current layout variant)
			this.condenseEmptyRows();
		};

		LayoutModel.prototype.setManifestLayoutsJSON = function(sManifestJSON) {
			this.sManifestLayoutsJSON = sManifestJSON;
		};

		/**
		 * update visibility of given cards
		 * (usually called from manage cards dialog)
		 *
		 * @method updateCardVisibility
		 * @param {Array} aChgCards - array containing card ids and visibility state
		 */
		LayoutModel.prototype.updateCardVisibility = function(aChgCards) {
			var i = 0;
			var layoutKey;
			var layoutVar;

			//extract current layout
			this.oLayoutVars["C" + this.iColCount] = this.extractCurrentLayoutVariant();

			for (i = 0; i < aChgCards.length; i++) {
				for (layoutKey in this.oLayoutVars) {
					if (this.oLayoutVars[layoutKey].hasOwnProperty(aChgCards[i].id)) {
						layoutVar = this.oLayoutVars[layoutKey];
						if (layoutVar[aChgCards[i].id].hasOwnProperty("visible") && layoutVar[aChgCards[i].id].visible === false && aChgCards[i].visibility) {
							//init cell coordinates - will be handled later in setCardsLayoutFromVariant
							layoutVar[aChgCards[i].id].col = 0;
							layoutVar[aChgCards[i].id].row = 0;
						}
						layoutVar[aChgCards[i].id].visible = aChgCards[i].visibility;
					}
				}
				this.oCurrLayoutVar = this.oLayoutVars["C" + this.iColCount];
			}
			this._setCardsLayoutFromVariant(this.aCards, this.oCurrLayoutVar);

			//condense empty rows (includes update of current layout variant)
			this.condenseEmptyRows();
		};

		/**
		 * return number of columns
		 *
		 * @method getColCount
		 * @returns {Int} iColCount - number of columns
		 */
		LayoutModel.prototype.getColCount = function() {
			return this.iColCount;
		};

		/**
		 * get cards in current layout
		 *
		 * @method getCards
		 * @param {Int} (optional) iColCount - number of columns
		 * @returns {Array} array containing cards in layout
		 */
		LayoutModel.prototype.getCards = function(iColCount) {

			//build grid if cards array was not filled before or the number of columns has changed
			if (this.aCards.length === 0 || iColCount && iColCount !== this.iColCount) {
				if (iColCount) {
					this.setColCount(iColCount);
				}
				//build grid for this.iColCount columns
				this._buildGrid();
			}

			return this.aCards;
		};

		/**
		 * get card by its id
		 *
		 * @method getCardById
		 * @param {ID} cardId
		 * @returns {Object} card
		 */
		LayoutModel.prototype.getCardById = function(cardId) {

			var oCard = null;
			var i = 0;
			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];
				if (oCard.id === cardId) {
					break;
				}
			}
			return oCard;
		};

		/**
		 * get cards that are (partly) located in given grid
		 *
		 * @method getCardsByGrid
		 * @param {Object} grid
		 * @param {String} ignoreId - (optional) id of card that should be skipped
		 * @returns {Array} of cards
		 */
		LayoutModel.prototype.getCardsByGrid = function(gridSpan, ignoreId) {
			var oCardSpan = {};
			var i = 0;
			var oCard = {};
			var aMatches = [];

			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];

				if (oCard.id === ignoreId || !oCard.dashboardLayout.visible) {
					continue;
				}

				oCardSpan.y1 = oCard.dashboardLayout.row;
				oCardSpan.x1 = oCard.dashboardLayout.column;
				oCardSpan.y2 = oCard.dashboardLayout.row + oCard.dashboardLayout.rowSpan - 1;
				oCardSpan.x2 = oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan - 1;

				if (this._checkOverlap(oCardSpan, gridSpan)) {
					aMatches.push(oCard);
				}
			}
			return aMatches;
		};

		/** 
		 * get the DashboardLayout variants in JSON format
		 * (only variants that were changed manually or originate from lrep)
		 * 
		 * @method getLayoutVariants
		 * @returns {Object} JSON containing the layout variants
		 */
		LayoutModel.prototype.getLayoutVariants4Pers = function() {
			//return this.oLayoutVars;

			var variant = null;
			//clone this.oLayoutVars and remove variants that were not changed manually
			var oPersVars = JSON.parse(JSON.stringify(this.oLayoutVars));
			for (variant in oPersVars) {
				if (oPersVars[variant].__ovpDBLVarSource === "auto" || oPersVars[variant].__ovpDBLVarSource === "manifest") {
					//delete unchanged variants
					delete oPersVars[variant];
				}
			}
			return oPersVars;
		};

		/**
		 * get card that resides at given grid position
		 *
		 * @method getCardByGridPos
		 * @param {Object} gridPos - column and row
		 * @returns {Object} card residing at grid position
		 */
		LayoutModel.prototype.getCardByGridPos = function(gridPos) {

			this._sortCardsByCol(this.aCards); // can we trust that's already sorted correctly??? not sure...

			var i = 0;
			var oCard = {};

			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];

				if (oCard.dashboardLayout.column <= gridPos.column && (oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan - 1) >= gridPos.column &&
					oCard.dashboardLayout.row <= gridPos.row && (oCard.dashboardLayout.row + oCard.dashboardLayout.rowSpan - 1) >= gridPos.row) {
					return oCard;
				}
			}
		};

		/** 
		 * read layout variants from ui model
		 * @method _readVariants
		 * @param {Boolean} bUseManifest - use manifest versions
		 */
		LayoutModel.prototype._readVariants = function(bUseManifest) {
			var oVariant = {};
			this.oLayoutVars = {};
			var oLayoutRaw = null;

			if (!this.sManifestLayoutsJSON) {
				//this is the initial call, lrep merge not yet done --> "decouple" manifest variants by storing JSON, lrep merge might overwrite later
				oLayoutRaw = this.uiModel.getProperty("/dashboardLayout");
				if (oLayoutRaw) {
					this.sManifestLayoutsJSON = JSON.stringify(oLayoutRaw);
				}
			}

			if (bUseManifest) {
				//these variants are purely manifest based (see above)
				oLayoutRaw = JSON.parse(this.sManifestLayoutsJSON);
			} else {
				//these variants can contain local changes
				oLayoutRaw = this.uiModel.getProperty("/dashboardLayout");
			}

			//pre-set bSequenceLayout; if no variants exist, grid will be build from cards sequence
			this.bSequenceLayout = true;

			if (!oLayoutRaw) {
				return;
			}
			for (var layoutKey in oLayoutRaw) {
				if (oLayoutRaw.hasOwnProperty(layoutKey) && oLayoutRaw[layoutKey]) {
					oVariant = oLayoutRaw[layoutKey];
					oVariant.id = layoutKey;

					if (bUseManifest) {
						oVariant.__ovpDBLVarSource = "manifest";
						oVariant.__ovpDBLVarId = "C" + parseInt(oVariant.id.replace(/[^0-9\.]/g, ""), 10);
					}
					this.oLayoutVars["C" + parseInt(oVariant.id.replace(/[^0-9\.]/g, ""), 10)] = oVariant;
					//variant exists --> no fallback to cards sequence
					this.bSequenceLayout = false;

				}
			}
		};

		/** 
		 * drop layout variants and reload manifest variants
		 * @method resetToManifest
		 */
		LayoutModel.prototype.resetToManifest = function() {
			this.oCurrLayoutVar = null;
			this.oLayoutVars = null;

			this._buildGrid( /*bUseManifest*/ true);
		};

		/**
		 * find best matching layout variant (or create one) and update card dashboardLayout
		 *
		 * @method _buildGrid
		 * @param {Boolean} bUseManifest - use manifest layout variants for read variants (needed for reset)
		 */
		LayoutModel.prototype._buildGrid = function(bUseManifest) {

			var i = 0;
			var oLayoutVar = null;

			if (this.aCards.length === 0) {
				//read cards if not yet done
				this.aCards = this.uiModel.getProperty("/cards");
			}
			if (!this.oLayoutVars || bUseManifest) {
				//read layout variants is not yet done
				this._readVariants(bUseManifest);
			}

			//find best matching layout variant
			if (this.bSequenceLayout) {
				this._sliceSequenceSausage();
				oLayoutVar = this.oLayoutVars["C" + this.iColCount];
				oLayoutVar.__ovpDBLVarSource = "auto";
				this.bSequenceLayout = false;
				// }
			} else if (this.oLayoutVars["C" + this.iColCount]) {
				//get matching variant -- BEST MATCH
				oLayoutVar = this.oLayoutVars["C" + this.iColCount];
			} else if (this.oCurrLayoutVar) {
				//slice current layout variant
				this._sliceSequenceSausage(this.oCurrLayoutVar);
				oLayoutVar = this.oLayoutVars["C" + this.iColCount];
				oLayoutVar.__ovpDBLVarSource = "auto";
			} else {
				//use layout variants for smaller colCounts
				for (i = this.iColCount; i > 0; i--) {
					if (this.oLayoutVars["C" + i]) {
						this._sliceSequenceSausage(this.oLayoutVars["C" + i]);
						oLayoutVar = this.oLayoutVars["C" + this.iColCount];
						oLayoutVar.__ovpDBLVarSource = "auto";
						break;
					}
				}
			}
			if (!oLayoutVar) {
				//last chance: take first variant in object
				for (var oLVar in this.oLayoutVars) {
					//slice this layout variant (the number of columns != this.iColCount)
					this._sliceSequenceSausage(this.oLayoutVars[oLVar]);
					oLayoutVar = this.oLayoutVars["C" + this.iColCount];
					oLayoutVar.__ovpDBLVarSource = "auto";
					break;
				}
			}

			this.oCurrLayoutVar = oLayoutVar;

			// set card grid data from layout variant
			this._setCardsLayoutFromVariant(this.aCards, this.oCurrLayoutVar);
			this._sortCardsByCol(this.aCards);
		};

		LayoutModel.prototype._setCardsLayoutFromVariant = function(aCards, oLayoutVariant) {
			var oCard = {};
			var oLayoutCard = {};
			var i = 0;
			var bCondenseRequired = false;

			for (i = 0; i < aCards.length; i++) {
				oCard = aCards[i];
				oLayoutCard = oLayoutVariant[oCard.id];
				if (oLayoutCard) {
					oCard.dashboardLayout = {};
					if (oLayoutCard.colSpan) {
						oCard.dashboardLayout.colSpan = oLayoutCard.colSpan;
					} else {
						oCard.dashboardLayout.colSpan = 1;
					}
					if (oLayoutCard.rowSpan) {
						oCard.dashboardLayout.rowSpan = oLayoutCard.rowSpan;
					} else {
						oCard.dashboardLayout.rowSpan = 1;
					}

					if (oLayoutCard.hasOwnProperty("visible") && oLayoutCard.visible === false) {
						oCard.dashboardLayout.column = 0;
						oCard.dashboardLayout.row = 0;
						oCard.dashboardLayout.visible = false;
						bCondenseRequired = true;
					} else {
						oCard.dashboardLayout.visible = true;

						if (oLayoutCard.col === 0 || oLayoutCard.row === 0) {
							//card was invisible before --> put it at the very end (empty rows will be condensed later)
							this._displaceCardToEnd(oCard);
							bCondenseRequired = true;
						} else {
							oCard.dashboardLayout.column = oLayoutCard.col;
							oCard.dashboardLayout.row = oLayoutCard.row;
						}

						if (oLayoutCard.autoSpan) {
							oCard.dashboardLayout.autoSpan = oLayoutCard.autoSpan;
						}
						if (oCard.dashboardLayout.colSpan > this.iColCount) {
							oCard.dashboardLayout.colSpan = this.iColCount;
						}
					}
				} else {
					//card is not maintained in layout --> put it at the very end
					//get default span from card settings
					this._setCardSpanFromDefault(oCard);
					this._displaceCardToEnd(oCard);
					bCondenseRequired = true;

					//add card to layout variant
					oLayoutVariant[oCard.id] = {
						col: oCard.dashboardLayout.column,
						row: oCard.dashboardLayout.row,
						colSpan: oCard.dashboardLayout.colSpan,
						rowSpan: oCard.dashboardLayout.rowSpan
					};
					oLayoutVariant.__ovpDBLVarSource = "auto";
				}

				//layout verification; if data is inconsistent (non existing column, too wide) put card to the end
				if (oCard.dashboardLayout.column > this.iColCount) {
					//card is located in invalid column
					this._displaceCardToEnd(oCard);
					bCondenseRequired = true;
					jQuery.sap.log.error("DashboardLayout: card (" + oCard.id + ") in invalid column -> moved to end");
				}
				if (oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan - 1 > this.iColCount) {
					//card is too wide for its position
					oCard.dashboardLayout.colSpan = Math.min(oCard.dashboardLayout.colSpan, this.iColCount);
					this._displaceCardToEnd(oCard);
					bCondenseRequired = true;
					jQuery.sap.log.error("DashboardLayout: card (" + oCard.id + ") too wide -> moved to end");
				}
			}
			if (bCondenseRequired) {
				//condense empty rows (includes update of current layout variant)
				this.condenseEmptyRows();
			}

			//finally ensure a consistent grid
			this.validateGrid( /*bRepair*/ true);
		};

		LayoutModel.prototype._displaceCardToEnd = function(oCard) {
			oCard.dashboardLayout.column = 1;
			oCard.dashboardLayout.row = this.iDisplaceRow;
			this.iDisplaceRow += oCard.dashboardLayout.rowSpan;
		};

		LayoutModel.prototype._setCardSpanFromDefault = function(oCard) {
			if (!oCard.dashboardLayout) {
				oCard.dashboardLayout = {};
			}
			if (!oCard.settings.defaultSpan || oCard.settings.defaultSpan === "auto") {
				oCard.dashboardLayout.autoSpan = true;
				oCard.dashboardLayout.colSpan = 1;
				oCard.dashboardLayout.rowSpan = 1;
			} else {
				if (oCard.settings.defaultSpan && oCard.settings.defaultSpan.cols) {
					oCard.dashboardLayout.colSpan = Math.min(oCard.settings.defaultSpan.cols, this.iColCount);
				} else {
					oCard.dashboardLayout.colSpan = 1;
				}
				if (oCard.settings.defaultSpan && oCard.settings.defaultSpan.rows) {
					oCard.dashboardLayout.rowSpan = oCard.settings.defaultSpan.rows;
				} else {
					oCard.dashboardLayout.rowSpan = 1;
				}
			}
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._sliceSequenceSausage = function(oUseVariant) {
			// fallback grid
			var i = 0;
			var j = 0;
			var iCol = 0;
			var iColEnd = 0;
			var iMaxRows = 0;
			var oCard = {};
			var aSliceCols = [];

			if (!oUseVariant) {
				this._sortCardsSausage(this.aCards);
			}

			// array to remember occupied columns
			for (i = 0; i < this.iColCount; i++) {
				aSliceCols.push({
					col: i + 1,
					rows: 0
				});
			}

			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];

				// span data from card settings
				if (!oCard.dashboardLayout) {
					oCard.dashboardLayout = {};
				}

				if (!oUseVariant || !oUseVariant.hasOwnProperty(oCard.id)) {
					//set defaults if variant not given or card is not included in variant
					this._setCardSpanFromDefault(oCard);
				} else {
					if (oUseVariant[oCard.id].hasOwnProperty("visible")) {
						oCard.dashboardLayout.visible = oUseVariant[oCard.id].visible;
					}
					if (oUseVariant[oCard.id].colSpan && oUseVariant[oCard.id].colSpan > 0) {
						oCard.dashboardLayout.colSpan = oUseVariant[oCard.id].colSpan;
					} else {
						oCard.dashboardLayout.colSpan = 1;
					}
					if (oUseVariant[oCard.id].rowSpan && oUseVariant[oCard.id].rowSpan > 0) {
						oCard.dashboardLayout.rowSpan = oUseVariant[oCard.id].rowSpan;
					} else {
						oCard.dashboardLayout.rowSpan = 1;
					}
				}

				if (oCard.dashboardLayout.hasOwnProperty("visible") && oCard.dashboardLayout.visible === false) {
					oCard.dashboardLayout.column = 0;
					oCard.dashboardLayout.row = 0;
					continue;
				} else if (!oCard.dashboardLayout.hasOwnProperty("visible")) {
					oCard.dashboardLayout.visible = true;
				}

				if (oCard.dashboardLayout.colSpan > this.iColCount) {
					oCard.dashboardLayout.colSpan = this.iColCount;
				}

				if (iColEnd < this.iColCount) {
					iCol = iColEnd + 1;
				} else {
					iCol = 1;
				}
				//iCol = (i % this.iColCount) + 1;

				//check end col
				if (iCol + oCard.dashboardLayout.colSpan - 1 > this.iColCount) {
					iCol = 1;
				}
				iColEnd = iCol + oCard.dashboardLayout.colSpan - 1;
				oCard.dashboardLayout.column = iCol;

				// get max rows of all affected rows
				iMaxRows = 0;
				for (j = oCard.dashboardLayout.column; j < oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan; j++) {
					if (aSliceCols[j - 1].rows > iMaxRows) {
						iMaxRows = aSliceCols[j - 1].rows;
					}
				}
				oCard.dashboardLayout.row = iMaxRows + 1;

				// set rows count of all affected columns
				for (j = oCard.dashboardLayout.column; j < oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan; j++) {
					aSliceCols[j - 1].rows = iMaxRows + oCard.dashboardLayout.rowSpan;
				}
			}

			this.oLayoutVars["C" + this.iColCount] = this.extractCurrentLayoutVariant();
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._sortCardsSausage = function(aCards) {
			aCards.sort(function(card1, card2) {
				// both cards have sequence position
				if (card1.sequencePos && card2.sequencePos) {
					if (card1.sequencePos < card2.sequencePos) {
						return -1;
					} else if (card1.sequencePos > card2.sequencePos) {
						return 1;
					} else {
						return 0;
					}
					// the one with sequence pos moves up
				} else if (card1.sequencePos && !card2.sequencePos) {
					return -1;
				} else if (!card1.sequencePos && card2.sequencePos) {
					return 1;
					// sort by id
				} else {
					if (card1.id < card2.id) {
						return -1;
					} else if (card1.id > card2.id) {
						return 1;
					} else {
						return 0;
					}
				}
			});
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._sortCardsByCol = function(aCards) {

			//sort by columns and order in column
			aCards.sort(function(card1, card2) {
				//if one card has no layout data, the other one get's up
				if (!card1.dashboardLayout && card2.dashboardLayout) {
					return 1;
				} else if (card1.dashboardLayout && !card2.dashboardLayout) {
					return -1;
				}

				// defaults for cards without dashboardLayout data
				if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.column === card2.dashboardLayout.column) {
					if (card1.dashboardLayout.row < card2.dashboardLayout.row) {
						return -1;
					} else if (card1.dashboardLayout.row > card2.dashboardLayout.row) {
						return 1;
					}
				} else if (card1.dashboardLayout.column) {
					return card1.dashboardLayout.column - card2.dashboardLayout.column;
				} else {
					return 0;
				}
			});
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._sortCardsByRow = function(aCards) {

			//sort by columns and order in column
			aCards.sort(function(card1, card2) {
				//if one card has no layout data, the other one get's up
				if (!card1.dashboardLayout && card2.dashboardLayout) {
					return 1;
				} else if (card1.dashboardLayout && !card2.dashboardLayout) {
					return -1;
				}

				// defaults for cards without dashboardLayout data
				if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.row === card2.dashboardLayout.row) {
					if (card1.dashboardLayout.column < card2.dashboardLayout.column) {
						return -1;
					} else if (card1.dashboardLayout.column > card2.dashboardLayout.column) {
						return 1;
					}
				} else if (card1.dashboardLayout.row) {
					return card1.dashboardLayout.row - card2.dashboardLayout.row;
				} else {
					return 0;
				}
			});
		};

		LayoutModel.prototype._checkOverlap = function(a, b) {
			var bX, bY = false;

			if ((a.x1 >= b.x1 && a.x1 <= b.x2) || // overlaps a from the left
				(a.x2 >= b.x1 && a.x2 <= b.x2) || // overlaps a from the right
				(b.x1 >= a.x1 && b.x2 <= a.x2) // inside a
			) {
				bX = true;
			}

			if ((a.y1 >= b.y1 && a.y1 <= b.y2) || // overlaps from top
				(a.y2 >= b.y1 && a.y2 <= b.y2) || // overlaps from bottom
				(b.y1 >= a.y1 && b.y2 <= a.y2) // inside a
			) {
				bY = true;
			}
			return (bX && bY);
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype.undoLastChange = function() {
			if (this.oUndoBuffer.layoutVariant) {
				this.oLayoutVars["C" + this.iColCount] = this.oUndoBuffer.layoutVariant;
				this.oUndoBuffer = {};
			}
		};

		/**
		 *
		 *
		 * @method moveCardToGrid
		 * @param {Boolean} bInProgress - function is called internally (reuse), model not stable -> do not update variant
		 */
		LayoutModel.prototype.moveCardToGrid = function(floaterId, cell, bPushHorizontal, oFloaterCard, bInProgress) {

			if (!bInProgress) {
				//internal call, model not stable
				this._registerChange("move");
			}
			var aAffectedCards = [];
			var aCondenseCards = [];

			var oFloater = null;
			if (oFloaterCard) {
				oFloater = oFloaterCard;
			} else {
				oFloater = this.getCardById(floaterId);
			}
			if (!oFloater) {
				return [];
			}

			if (cell.column < 1 || cell.column + oFloater.dashboardLayout.colSpan - 1 > this.iColCount) {
				//invalid call! --> move card back to its model position
				return [oFloater];
			}

			oFloater.dashboardLayout.column = cell.column;
			oFloater.dashboardLayout.row = cell.row;

			//get overlapped cards
			var oGrid = {
				x1: oFloater.dashboardLayout.column,
				y1: oFloater.dashboardLayout.row,
				x2: oFloater.dashboardLayout.column + oFloater.dashboardLayout.colSpan - 1,
				y2: oFloater.dashboardLayout.row + oFloater.dashboardLayout.rowSpan - 1
			};
			var aOverlaps = this.getCardsByGrid(oGrid, oFloater.id);
			//calculate min col/row and aggregated row/col span
			var oPushGrid = this._getPushGrid(aOverlaps);
			var oInsertSpan = {};

			if (bPushHorizontal) {
				oInsertSpan.rowSpan = oPushGrid.rowSpan;
				oInsertSpan.colSpan = oFloater.dashboardLayout.column + oFloater.dashboardLayout.colSpan - oPushGrid.column;
			} else {
				oInsertSpan.rowSpan = oFloater.dashboardLayout.row + oFloater.dashboardLayout.rowSpan - oPushGrid.row;
				oInsertSpan.colSpan = oPushGrid.colSpan;
			}

			aAffectedCards = this._pushCards({
				column: oPushGrid.column,
				row: oPushGrid.row
			}, oInsertSpan, oFloater.id, bPushHorizontal, aOverlaps);

			if (!bInProgress) {
				//condense empty rows (includes update of current layout variant)
				aCondenseCards = this.condenseEmptyRows();
				if (aCondenseCards.length > 0) {
					aAffectedCards = aAffectedCards.concat(aCondenseCards);
					aAffectedCards = this.condenseCardArray(aAffectedCards);
				}
			}

			return aAffectedCards;
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._getPushGrid = function(aCards) {
			var oPushGrid = {};
			var i = 0;

			var minRow = 99999;
			var maxRow = 1;
			var minCol = this.iColCount;
			var maxCol = 1;

			if (!aCards && aCards.length === 0) {
				return oPushGrid;
			}

			for (i = 0; i < aCards.length; i++) {
				if (aCards[i].dashboardLayout.row < minRow) {
					minRow = aCards[i].dashboardLayout.row;
				}
				if (aCards[i].dashboardLayout.row + aCards[i].dashboardLayout.rowSpan - 1 > maxRow) {
					maxRow = aCards[i].dashboardLayout.row + aCards[i].dashboardLayout.rowSpan - 1;
				}
				if (aCards[i].dashboardLayout.column < minCol) {
					minCol = aCards[i].dashboardLayout.column;
				}
				if (aCards[i].dashboardLayout.column + aCards[i].dashboardLayout.colSpan - 1 > maxCol) {
					maxCol = aCards[i].dashboardLayout.column + aCards[i].dashboardLayout.colSpan - 1;
				}
			}

			oPushGrid.column = minCol;
			oPushGrid.row = minRow;
			oPushGrid.colSpan = maxCol - minCol + 1;
			oPushGrid.rowSpan = maxRow - minRow + 1;

			return oPushGrid;
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._updateGapDelta = function(oGapDelta) {

			if (oGapDelta.cardLayout[oGapDelta.axis] > oGapDelta.curr) {
				//new column/row - check for empty columns/rows before it
				oGapDelta.curr = oGapDelta.cardLayout[oGapDelta.axis];

				if (oGapDelta.max > 0 && oGapDelta.curr > oGapDelta.max + 1) {
					//there is at least one empty col/row between
					oGapDelta.delta += oGapDelta.curr - 1 - oGapDelta.max;
				}
				//set max col for new column/row
				oGapDelta.max = oGapDelta.cardLayout[oGapDelta.axis] + oGapDelta.cardLayout[oGapDelta.span] - 1;
			} else {
				if (oGapDelta.cardLayout[oGapDelta.axis] + oGapDelta.cardLayout[oGapDelta.span] - 1 > oGapDelta.max) {
					//this card has more columns/rows
					oGapDelta.max = oGapDelta.cardLayout[oGapDelta.axis] + oGapDelta.cardLayout[oGapDelta.span] - 1;
				}
			}
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._pushCards = function(oUpperLeftCell, oInsertSpan, floaterId, bPushHorizontal, aOverlapCards) {

			var i = 0;
			var j = 0;
			var iNew1 = 0;
			var iNew2 = 0;
			var iEndRow = 0;
			var oGapDelta = {
				curr: 0,
				max: 0,
				delta: 0
			};
			var oInsertGrid = {
				column: oUpperLeftCell.column,
				row: oUpperLeftCell.row
			};

			var aAffectedCards = [];
			var aPushedDownCards = [];

			//-------- HORIZONTAL --------------------------------------------------------
			if (bPushHorizontal) {
				var aFallDownCards = [];
				oGapDelta.axis = "column";
				oGapDelta.span = "colSpan";
				oGapDelta.curr = oUpperLeftCell.column - 1;
				oGapDelta.max = oUpperLeftCell.column - 1;

				oInsertGrid.rowSpan = oInsertSpan.rowSpan;
				oInsertGrid.colSpan = 0;

				if (aOverlapCards && aOverlapCards.length > 0) {
					//get followers based onn add cards
					for (j in aOverlapCards) {
						if (aOverlapCards[j].dashboardLayout) {
							aAffectedCards = aAffectedCards.concat(this._getHorizontalFollower(aOverlapCards[j].dashboardLayout, floaterId));
						}
					}
					aAffectedCards = this.condenseCardArray(aAffectedCards);
				} else {
					//get followers using insert grid
					aAffectedCards = this._getHorizontalFollower(oInsertGrid, floaterId);
				}

				for (i = 0; i < aAffectedCards.length; i++) {

					oGapDelta.cardLayout = aAffectedCards[i].dashboardLayout;
					this._updateGapDelta(oGapDelta);

					iNew1 = aAffectedCards[i].dashboardLayout.column + oInsertSpan.colSpan - oGapDelta.delta;
					iNew2 = iNew1 + aAffectedCards[i].dashboardLayout.colSpan - 1;

					if (iNew1 > aAffectedCards[i].dashboardLayout.column) {
						if (iNew2 <= this.iColCount) {
							aAffectedCards[i].dashboardLayout.column = iNew1;
							iEndRow = aAffectedCards[i].dashboardLayout.row + aAffectedCards[i].dashboardLayout.rowSpan - 1;
						} else {
							aFallDownCards.push(aAffectedCards[i]);
						}
					}
				}
				if (aFallDownCards.length > 0) {
					if (iEndRow === 0) {
						//insert cards after last card in row; if no card was pushed directly, take insertGrid data
						var oFloaterCard = this.getCardById(floaterId);
						if (oFloaterCard) {
							iEndRow = oFloaterCard.dashboardLayout.row + oFloaterCard.dashboardLayout.rowSpan - 1;
						} else {
							iEndRow = oInsertGrid.row + oInsertGrid.rowSpan - 1;
						}
					}
					aPushedDownCards = this._pushFallDownCards(iEndRow + 1, floaterId, aFallDownCards);

					if (aPushedDownCards.length > 0) {
						aAffectedCards = this.condenseCardArray(aAffectedCards.concat(aPushedDownCards));
					}
				}

			} else {
				//-------- VERTICAL --------------------------------------------------------
				oGapDelta.axis = "row";
				oGapDelta.span = "rowSpan";
				oGapDelta.curr = oUpperLeftCell.row - 1;
				oGapDelta.max = oUpperLeftCell.row - 1;

				oInsertGrid.rowSpan = 0;
				oInsertGrid.colSpan = oInsertSpan.colSpan;

				if (aOverlapCards && aOverlapCards.length > 0) {
					//get followers based onn add cards
					for (j in aOverlapCards) {
						if (aOverlapCards[j].dashboardLayout) {
							aAffectedCards = aAffectedCards.concat(this._getVerticalFollower(aOverlapCards[j].dashboardLayout, floaterId));
						}
					}
					aAffectedCards = this.condenseCardArray(aAffectedCards);
					this._sortCardsByRow(aAffectedCards);
				} else {
					//get followers using insert grid
					aAffectedCards = this._getVerticalFollower(oInsertGrid, floaterId);
				}

				for (i = 0; i < aAffectedCards.length; i++) {

					oGapDelta.cardLayout = aAffectedCards[i].dashboardLayout;
					this._updateGapDelta(oGapDelta);

					iNew1 = aAffectedCards[i].dashboardLayout.row + oInsertSpan.rowSpan - oGapDelta.delta;

					if (iNew1 > aAffectedCards[i].dashboardLayout.row) {
						aAffectedCards[i].dashboardLayout.row = iNew1;
					}
				}
			}
			return aAffectedCards;
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype.resizeCard = function(cardId, oSpan, bManualResize) {

			this._registerChange("resize");

			var oRCard = this.getCardById(cardId);
			if (!oRCard) {
				return [];
			}
			var deltaH = oSpan.colSpan - oRCard.dashboardLayout.colSpan;
			var deltaV = oSpan.rowSpan - oRCard.dashboardLayout.rowSpan;

			if (deltaH === 0 && deltaV === 0) {
				return {
					resizeCard: oRCard,
					affectedCards: []
				};
			} else if (bManualResize && oRCard.dashboardLayout.autoSpan) {
				oRCard.dashboardLayout.autoSpan = false;
			}

			var aAffectedCards = [];
			var aAffectedCardsV = [];

			// 1) push horizontally
			if (deltaH > 0) {

				if (deltaV < 0) {
					//special case: if size is reduced: push with NEW size!
					// copy resize card layout data, don't use original data reference!
					aAffectedCards = this._pushCards({
						column: oRCard.dashboardLayout.column + oRCard.dashboardLayout.colSpan,
						row: oRCard.dashboardLayout.row
					}, {
						colSpan: deltaH,
						rowSpan: oSpan.rowSpan
					}, cardId, true);
				} else {
					aAffectedCards = this._pushCards({
						column: oRCard.dashboardLayout.column + oRCard.dashboardLayout.colSpan,
						row: oRCard.dashboardLayout.row
					}, {
						colSpan: deltaH,
						rowSpan: oSpan.rowSpan
					}, cardId, true);
				}
			}
			oRCard.dashboardLayout.colSpan = oSpan.colSpan;
			//2) push vertically
			if (deltaV > 0) {

				if (deltaH < 0) {
					//special case: if size is reduced: push with NEW size!
					// copy resize card layout data, don't use original data reference!
					aAffectedCardsV = this._pushCards({
						column: oRCard.dashboardLayout.column,
						row: oRCard.dashboardLayout.row + oRCard.dashboardLayout.rowSpan
					}, {
						colSpan: oSpan.colSpan,
						rowSpan: deltaV
					}, cardId, false);
				} else {
					aAffectedCardsV = this._pushCards({
						column: oRCard.dashboardLayout.column,
						row: oRCard.dashboardLayout.row + oRCard.dashboardLayout.rowSpan
					}, {
						colSpan: oSpan.colSpan,
						rowSpan: deltaV
					}, cardId, false);
				}
			}

			oRCard.dashboardLayout.rowSpan = oSpan.rowSpan;

			// concat arrays
			aAffectedCards = aAffectedCards.concat(aAffectedCardsV);
			aAffectedCards = this.condenseCardArray(aAffectedCards);

			//condense empty rows (includes update of current layout variant)
			aAffectedCardsV = this.condenseEmptyRows();
			if (aAffectedCardsV.length > 0) {
				aAffectedCards = aAffectedCards.concat(aAffectedCardsV);
				aAffectedCards = this.condenseCardArray(aAffectedCards);
			}

			return {
				resizeCard: oRCard,
				affectedCards: aAffectedCards
			};
		};

		/**
		 *
		 *
		 * @method
		 */
		LayoutModel.prototype._pushFallDownCards = function(insRow, ignoreId, aPCards) {
			//move cards to grid pos
			var i = 0;
			var oNextRowData = {};
			var oTargetCell = {};
			var aAffectedCards = [];
			var aAggrAffectedCards = [];
			for (i = aPCards.length - 1; i >= 0; i--) {
				//preset target row
				aPCards[i].dashboardLayout.row = insRow;
				//get next possible insert row (and the cards that collide)
				oNextRowData = this._getNextPossibleRowAndColliders(insRow, aPCards[i]);
				oTargetCell.column = this.iColCount - aPCards[i].dashboardLayout.colSpan + 1;
				oTargetCell.row = oNextRowData.row;
				aAffectedCards = this.moveCardToGrid(aPCards[i].id, oTargetCell, /*bHoriz*/ false, aPCards[i], /*bInProgress*/ true);
				aAggrAffectedCards = aAggrAffectedCards.concat(aAffectedCards);
			}
			aAggrAffectedCards = this.condenseCardArray(aAggrAffectedCards);
			return aAggrAffectedCards;
		};

		/**
		 * find next possible insertion row and the cards, that collide with it
		 *
		 * @method _getNextPossibleRowAndColliders
		 * @param {Int} insRow - intended insertion row
		 * @param {Int} column - grid column
		 * @param {Int} colSpan -  column span
		 * @returns {Object} Object containing the target row and the colliding cards
		 */
		LayoutModel.prototype._getNextPossibleRowAndColliders = function(insRow, insCard) {
			var i = 0;
			var oCard;
			var iTargetRow = insRow;
			var aCollidingCards = [];
			for (i = insCard.dashboardLayout.column; i <= insCard.dashboardLayout.column + insCard.dashboardLayout.colSpan - 1; i++) {
				oCard = this.getCardByGridPos({
					column: i,
					row: insRow
				});
				if (oCard && oCard.dashboardLayout && oCard.id !== insCard.id) {
					if (oCard.dashboardLayout.row === insRow) {
						//card starts here -> can be inserted before
						//remember card, it has to be pushed down below iTargetRow later
						aCollidingCards.push(oCard);
					} else if (oCard.dashboardLayout.row + oCard.dashboardLayout.rowSpan + 1 > iTargetRow) {
						//insert after this card
						iTargetRow = oCard.dashboardLayout.row + oCard.dashboardLayout.rowSpan + 1;
					}
				}
			}
			return {
				row: iTargetRow,
				collidingCards: aCollidingCards
			};
		};

		/**
		 * collect all cards that needs to be rearranged in horizontal direction after floater insertion
		 *
		 * @method getHorizontalFollower
		 * @param {Object} insertMarker - insertion marker position and size
		 * @param {ID} floaterId - ID of the floater card
		 * @returns {Array} aHFollow - Array with all members from this.aCards that needs to be shifted to the right
		 */
		LayoutModel.prototype._getHorizontalFollower = function(insertMarker, floaterId) {
			this._sortCardsByCol(this.aCards);
			var aHFollow = [];
			var extStartRow = insertMarker.row; //start of pusher
			var extEndRow = insertMarker.row + insertMarker.rowSpan - 1; //end of pusher. Initial value is floater height
			var i = 0;
			var oCard = {};
			var cardEndRow = 0;

			if (insertMarker.column <= this.iColCount + insertMarker.colSpan) { //no insert marker at right grid border 
				for (i = 0; i < this.aCards.length; i++) {
					oCard = this.aCards[i];
					if (oCard.id === floaterId || !oCard.dashboardLayout.visible) {
						continue; //skip floater and invisible cards
					}
					cardEndRow = oCard.dashboardLayout.row + oCard.dashboardLayout.rowSpan - 1;
					if (oCard.dashboardLayout.column >= insertMarker.column && oCard.dashboardLayout.row <= extEndRow && cardEndRow >= extStartRow) {

						if (cardEndRow > extEndRow) {
							extEndRow = cardEndRow; //resize pusher height to cover all cards to the right which overlap with the biggest card in the row
						}
						if (oCard.dashboardLayout.row < extStartRow) {
							extStartRow = oCard.dashboardLayout.row;
						}
						aHFollow.push(oCard);
					}
				}
			}
			return aHFollow;
		};

		/**
		 * collect all cards that needs to be rearranged in vertical direction after floater insertion
		 *
		 * @method getVerticalFollower
		 * @param {Object} insertMarker - insertion marker position and size
		 * @param {ID} floaterId - ID of the floater card
		 * @returns {Array} aVFollow - Array with all members from this.aCards that needs to be shifted to the right
		 */
		LayoutModel.prototype._getVerticalFollower = function(insertMarker, floaterId) {
			var aVFollow = [];
			this._sortCardsByRow(this.aCards);
			var extStartCol = insertMarker.column; //start of pusher
			var extEndCol = insertMarker.column + insertMarker.colSpan - 1; //end of pusher. Initial value is floater width
			var i = 0;
			var oCard = {};
			var cardEndCol = 0;

			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];
				if (oCard.id === floaterId || !oCard.dashboardLayout.visible) {
					continue; //skip floater and invisible cards
				}
				cardEndCol = oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan - 1;
				if (oCard.dashboardLayout.row >= insertMarker.row && oCard.dashboardLayout.column <= extEndCol && cardEndCol >= extStartCol) {

					if (cardEndCol > extEndCol) {
						extEndCol = cardEndCol; //resize pusher height to cover all cards to the right which overlap with the biggest card in the row
					}
					if (oCard.dashboardLayout.column < extStartCol) {
						extStartCol = oCard.dashboardLayout.column;
					}
					aVFollow.push(oCard);
				}
			}

			return aVFollow;
		};

		/**
		 * drop duplicate entries in given array
		 *
		 * @method condenseCardArray
		 * @param {Array} array of cards
		 * @return {Array} resulting condensed array
		 */
		LayoutModel.prototype.condenseCardArray = function(array) {
			//array.sort();
			this._sortCardsByCol(array);
			return array.reduce(function(collect, current) {
				if (collect.indexOf(current) < 0) {
					collect.push(current);
				}
				return collect;
			}, []);
			//return this._sortCardsByCol(array);
		};

		/**
		 * extract the current layout variant into a new object
		 *
		 * @method extractCurrentLayoutVariant
		 * @returns {Object} new object containing current layout variant data
		 */
		LayoutModel.prototype.extractCurrentLayoutVariant = function() {
			var i = 0;
			var oCard = {};
			var oVariant = {};

			for (i = 0; i < this.aCards.length; i++) {
				oCard = this.aCards[i];
				oVariant[oCard.id] = {
					col: oCard.dashboardLayout.column,
					row: oCard.dashboardLayout.row,
					colSpan: oCard.dashboardLayout.colSpan,
					rowSpan: oCard.dashboardLayout.rowSpan,
					visible: oCard.dashboardLayout.visible
				};
				if (oCard.dashboardLayout.autoSpan) {
					oVariant[oCard.id].autoSpan = oCard.dashboardLayout.autoSpan;
				}
			}
			if (this.oCurrLayoutVar && this.oCurrLayoutVar.__ovpDBLVarSource) {
				oVariant.__ovpDBLVarSource = this.oCurrLayoutVar.__ovpDBLVarSource;
			}
			oVariant.__ovpDBLVarId = "C" + this.iColCount;
			return oVariant;
		};

		/**
		 * update the current layout variant
		 *
		 * @method _updateCurrentLayoutVariant
		 */
		LayoutModel.prototype._updateCurrentLayoutVariant = function() {
			this.oCurrLayoutVar = this.extractCurrentLayoutVariant();
			this.oLayoutVars["C" + this.iColCount] = this.oCurrLayoutVar;
		};

		/**
		 * get the current layout variant
		 *
		 * @method _getCurrentLayoutVariant
		 * @returns current layout variant
		 */
		LayoutModel.prototype._getCurrentLayoutVariant = function() {
			//return this.oLayoutVars["C" + this.iColCount];
			return this.oCurrLayoutVar;
		};

		LayoutModel.prototype._registerChange = function(action) {
			this.bLayoutChanged = true;
			this.oCurrLayoutVar.__ovpDBLVarSource = "user";
			this.oUndoBuffer.action = action;
			this.oUndoBuffer.layoutVariant = this.extractCurrentLayoutVariant();
		};

		/**
		 * get an array containing all occupied grid cells and their "tenant"
		 *
		 * @method _extractGrid
		 * @param sortBy - "col" or "row"
		 * @returns array of cells
		 */
		LayoutModel.prototype._extractGrid = function(sortBy) {
			var first = sortBy;
			var second = "";

			if (first === "col") {
				second = "row";
			} else if (first === "row") {
				second = "col";
			} else {
				jQuery.sap.log.error("DashboardLayoutModel._getCurrentLayoutVariant: param sortBy has to be col or row!");
			}

			//get occupied cells first
			var aCells = [];
			var i = 0;
			var ri = 0;
			var ci = 0;

			for (i = 0; i < this.aCards.length; i++) {
				var cardLayout = this.aCards[i].dashboardLayout;
				if (cardLayout.visible === false) {
					continue;
				}
				for (ri = cardLayout.row; ri < cardLayout.row + cardLayout.rowSpan; ri++) {
					for (ci = cardLayout.column; ci < cardLayout.column + cardLayout.colSpan; ci++) {
						aCells.push({
							col: ci,
							row: ri,
							card: this.aCards[i]
						});
					}
				}
			}

			//sort by given attribute
			aCells.sort(function(cell1, cell2) {
				// defaults for cards without dashboardLayout data
				if (cell1[first] === cell2[first]) {
					if (cell1[second] < cell2[second]) {
						return -1;
					} else if (cell1[second] > cell2[second]) {
						return 1;
					}
				} else {
					return cell1[first] - cell2[first];
				}
			});
			return aCells;
		};

		/**
		 * get the current layout variant
		 *
		 * @method validateGrid
		 * @param bRepair - repair grid (put inconistent cards at the end)
		 * @returns bGridValid - indicates the validity
		 */
		LayoutModel.prototype.validateGrid = function(bRepair) {
			var bGridValid = true;
			var i = 0;
			var aCells = this._extractGrid("row");
			var prev = aCells[0];
			var curr = {};
			var aDisplaceCards = [];

			for (i = 1; i < aCells.length; i++) {
				curr = aCells[i];
				if (curr.col > this.iColCount || curr.col < 0) {
					bGridValid = false;
					aDisplaceCards.push(curr.card);
					jQuery.sap.log.error("DashboardLayout: Cell is outside (col/row): " + curr.col + "/" + curr.row);
				}
				if (curr.col === prev.col && curr.row === prev.row) {
					bGridValid = false;
					aDisplaceCards.push(curr.card);
					jQuery.sap.log.error("DashboardLayout: Cell has two tenants (col/row//id1/id2: " + curr.col + "/" + curr.row + "//" + prev.card.id +
						"/" + curr
						.card.id);
				}
				prev = curr;
			}

			//repair grid
			if (bRepair && aDisplaceCards.length > 0) {
				aDisplaceCards = this.condenseCardArray(aDisplaceCards);
				for (i = 0; i < aDisplaceCards.length; i++) {
					this._displaceCardToEnd(aDisplaceCards[i]);
				}
				this.condenseEmptyRows();
				bGridValid = true;
				jQuery.sap.log.info("DashboardLayout: invalid grid repaired");
			}

			return bGridValid;
		};

		LayoutModel.prototype.condenseEmptyRows = function() {
			var aCells = this._extractGrid("row");
			var i = 0;
			var prevRow = 0;
			var currRow = 0;
			var iAggDelta = 0;
			var prevCard = {};
			var cell = {};
			var aAffectedCards = [];

			for (i = 0; i < aCells.length; i++) {
				cell = aCells[i];

				if (currRow !== cell.row) {
					prevRow = currRow;
					currRow = cell.row;
					if (prevRow === 0 && currRow > 1) {
						//empty first rows will be condensed to 0
						iAggDelta += currRow - 1;
					} else if (currRow - prevRow > 2) {
						iAggDelta += currRow - prevRow - 2;
					}
				}

				// there are at least two empty rows --> move up
				if (prevCard !== cell.card) {
					if (cell.row === cell.card.dashboardLayout.row) {
						//move each card only once!
						cell.card.dashboardLayout.row -= iAggDelta;
						prevCard = cell.card;
						aAffectedCards.push(cell.card);
					}
				}
			}
			this._updateCurrentLayoutVariant();

			//reset displace start row
			this.iDisplaceRow = 9999;

			return aAffectedCards;
		};

		return LayoutModel;

	}, /* bExport= */
	true);
}; // end of sap/ovp/ui/DashboardLayoutModel.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutRearrange') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutRearrange'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutRearrange",[], function() {
	"use strict";

	jQuery.sap.require("sap.ovp.ui.UIActions");

	var Rearrange = function(settings) {
		this.init(settings);
	};

	Rearrange.prototype.init = function(settings) {
		settings.beforeDragCallback = this._beforeDragHandler.bind(this);
		settings.dragStartCallback = this._dragStartHandler.bind(this);
		settings.dragMoveCallback = this._dragMoveHandler.bind(this);
		settings.dragEndCallback = this._dragEndHandler.bind(this);
		settings.resizeStartCallback = this._resizeStartHandler.bind(this);
		settings.resizeMoveCallback = this._resizeMoveHandler.bind(this);
		settings.resizeEndCallback = this._resizeEndHandler.bind(this);
		settings.endCallback = this._endHandler.bind(this);

		this.placeHolderClass = settings.placeHolderClass;
		this.layout = settings.layout;
		//this.afterReplaceElements = settings.afterReplaceElements || function() {};
		this.settings = settings;
		//delete settings.afterReplaceElements;
		this.destroy(); //destroy the previous instance of UIActions
		this.uiActions = new sap.ovp.ui.UIActions(this.settings).enable();
		this.aCardsOrder = null; //DOM elements array
		this.aCards = settings.aCards; //cards properties persistence
		this.layoutUtil = settings.layoutUtil;
		this.verticalMargin = null; //space vertical between items
		this.horizontalMargin = null; //horizontal space vertical between items
		this.top = null; //space between layout top and first card
		this.left = null; //space between layout left and first card
		this.width = null; //item width
		this.layoutOffset = null; //layout coordinates on screen, needed to normalize mouse position to layout
		this.jqLayout = null; //layout jQuery reference
		this.jqLayoutInner = null; //layout inner wrapper jQuery reference
		this.isRTLEnabled = null; //RTL flag
		this.lastCollidedEl = null; //last collided element
		this.rowHeight = settings.rowHeight;
		this.dropZoneItem = null; //floater drop item and insert section 
		this.floaterData = null; //id, position and width of the currently dragged card
		this.resizeData = {}; //card resize data (ghost values)
		this.delta = {
			top: 0,
			left: 0
		};
		switch (true) {
			case sap.ui.Device.browser.webkit:
				this.cssVendorTransition = "-webkit-transition";
				this.cssVendorTransform = "-webkit-transform";
				break;
			case sap.ui.Device.browser.msie:
				this.cssVendorTransition = "-ms-transition";
				this.cssVendorTransform = "-ms-transform";
				break;
			case sap.ui.Device.browser.mozilla:
				this.cssVendorTransition = "-moz-transition";
				this.cssVendorTransform = "-moz-transform";
				break;
			default:
				this.cssVendorTransition = "transition";
				this.cssVendorTransform = "transform";
		}
	};

	Rearrange.prototype.destroy = function() {
		if (this.uiActions) {
			this.uiActions.disable();
			this.uiActions = null;
		}
	};

	//****** resizing card handlers

	Rearrange.prototype._resizeStartHandler = function(evt, cardElement) {
		//Prevent selection of text on tiles and groups
		//var $elem = jQuery(cardElement);
		//this.resizeStartOffset = $elem.offset();
		//console.log("resize start handler reached");
		if (jQuery(window).getSelection) {
			var selection = jQuery(window).getSelection();
			selection.removeAllRanges();
		}
		this.initCardsSettings();

	};

	Rearrange.prototype._resizeEndHandler = function(evt, ui) {

		if (sap.ui.Device.system.desktop) {
			jQuery("body").removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
		}
		jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
		jQuery("#ovpResizeGhost").remove();
		jQuery("#ovpResizeRubberBand").remove();

		if (!ui) {
			return;
		}

		if (this.resizeData.colSpan && this.resizeData.rowSpan) {
			//get card controller and send resize data
			this.layoutUtil.resizeCard(ui.getAttribute("id"), this.resizeData);
		}
		this.resizeData = {};

		if (jQuery(window).getSelection) {
			var selection = jQuery(window).getSelection();
			selection.removeAllRanges();
		}
	};

	Rearrange.prototype._resizeMoveHandler = function(actionObject) {

		if (actionObject.element) {

			var $elem = jQuery(actionObject.element);
			var fElementPosLeft = $elem.position().left;
			var fElementPosTop = $elem.position().top;
			var ghostWidthCursor = actionObject.moveX - fElementPosLeft - this.layoutOffset.left;
			var ghostHeightCursor = actionObject.moveY - fElementPosTop - this.layoutOffset.top + this.jqLayout.scrollTop(); //this.resizeStartOffset.top;

			this.resizeData.colSpan = Math.round(ghostWidthCursor / this.layoutUtil.getColWidthPx());
			if (this.resizeData.colSpan < 1) {
				this.resizeData.colSpan = 1;
			}
			this.resizeData.rowSpan = Math.round(ghostHeightCursor / this.layoutUtil.getRowHeightPx());
			if (this.resizeData.rowSpan < 1) {
				this.resizeData.rowSpan = 1;
			}

			var ghostHeightGrid = this.resizeData.rowSpan * this.layoutUtil.getRowHeightPx();
			var ghostWidthGrid = this.resizeData.colSpan * this.layoutUtil.getColWidthPx();
			if (ghostWidthGrid + fElementPosLeft > this.layoutUtil.getLayoutWidthPx()) {
				//card can't be resized beyond layout width
				ghostWidthGrid = this.layoutUtil.getLayoutWidthPx() - fElementPosLeft;
				this.resizeData.colSpan = Math.round(ghostWidthGrid / this.layoutUtil.getColWidthPx());
			}

			jQuery("#ovpResizeRubberBand").remove();
			var oElementWrapper = jQuery(actionObject.element).parent();
			oElementWrapper.append("<div id='ovpResizeRubberBand' class='ovpResizeRubberBand' style='top: " + fElementPosTop + "px; left: " +
				fElementPosLeft + "px; width: " + ghostWidthCursor + "px; height: " + ghostHeightCursor + "px;'></div>");

			jQuery("#ovpResizeGhost").remove();
			oElementWrapper.append("<div id='ovpResizeGhost' class='ovpCardResizeGhost' style='top: " + fElementPosTop + "px; left: " +
				fElementPosLeft + "px; width: " + ghostWidthGrid + "px; height: " + ghostHeightGrid + "px;'></div>");
		}
	};
	
	
	//****** drag and drop card handlers

	//callback before clone created
	Rearrange.prototype._beforeDragHandler = function(evt, ui) {
		//Prevent the browser to mark any elements while dragging
		if (sap.ui.Device.system.desktop) {
			jQuery("body").addClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
		}
		//Prevent text selection menu and magnifier on mobile devices
		if (sap.ui.Device.browser.mobile) {
			this.selectableElemets = jQuery(ui).find(".sapUiSelectable");
			this.selectableElemets.removeClass("sapUiSelectable");
		}
		jQuery(this.settings.wrapper).addClass("dragAndDropMode");
	};

	//callback when drag starts
	Rearrange.prototype._dragStartHandler = function(evt, cardElement) {
		//Prevent selection of text on tiles and groups
		jQuery.sap.log.info(cardElement);
		if (jQuery(window).getSelection) {
			var selection = jQuery(window).getSelection();
			selection.removeAllRanges();
		}
		this.initCardsSettings();
		//store the width and height of the card for ghost size
		var oCardRect = cardElement.children[0].getBoundingClientRect();
		this.floaterData = {
			width: oCardRect.width,
			height: oCardRect.height,
			startLeft: oCardRect.left - this.layoutOffset.left,
			startTop: oCardRect.top - this.layoutOffset.top - parseInt(jQuery("." + this.placeHolderClass).css("border-top-width"), 10)
		};
	};

	//callback for UIActions, every time when mouse is moved in drag mode.
	Rearrange.prototype._dragMoveHandler = function(actionObject) {
		// get floater
		var oFloater = jQuery(actionObject.clone);
		this.floaterData.id = oFloater.attr("id");
		this.floaterData.left = actionObject.moveX - this.uiActions.startX + this.floaterData.startLeft;
		this.floaterData.top = actionObject.moveY - this.uiActions.startY + this.floaterData.startTop + this.jqLayout.scrollTop();

		var dropSimData = this.layoutUtil.getDropSimData(this.floaterData);
		this.floaterData.top = dropSimData.cellPos.top;
		this.floaterData.left = dropSimData.cellPos.left;
		this.showGhostWhileDragMove(actionObject.element, dropSimData.cellPos);
		this.floaterData.bPushHorizontal = dropSimData.pushHorizontal;

		//reset previous preview
		if (jQuery(".displaceItem")[0]) {
			jQuery(".displaceItem").css(this.getCSSTransition(0, 0));
			jQuery(".sapUshellEasyScanLayoutInner").children().removeClass("displaceItem");
		}

		if (dropSimData.coveredCardIds.length > 0) {
			var offset = this.layoutUtil.convertRemToPx("4rem"); //displacment offset
			dropSimData.coveredCardIds.forEach(function(sCardId) {
				jQuery("#" + sCardId).addClass("displaceItem");
			});
			jQuery(".displaceItem").css(dropSimData.pushHorizontal ? this.getCSSTransition(offset, 0) : this.getCSSTransition(0, offset));
		}
	};

	//model changes, and cleanup after drag and drop finished
	Rearrange.prototype._dragEndHandler = function(evt, floater) {
		this.lastCollidedEl = null;
		jQuery("#ovpDashboardLayoutMarker").remove(); //remove insert marker
		jQuery(".displaceItem").css(this.getCSSTransition(0, 0));
		jQuery(".displaceItem").removeClass("displaceItem");

		var bHorizontal = this.floaterData.bPushHorizontal;
		var ghostPos = this.layoutUtil.mapPositionToGrid({
			top: this.floaterData.top,
			left: this.floaterData.left
		});

		//move the card to the target position and make the card content visible again
		jQuery(floater).css({
			left: this.floaterData.left,
			top: this.floaterData.top
		});

		this.layoutUtil.moveCardToGrid(this.floaterData.id, {
			column: ghostPos.gridCoordX,
			row: ghostPos.gridCoordY
		}, bHorizontal);

		//Cleanup added classes and styles before drag
		if (sap.ui.Device.system.desktop) {
			jQuery("body").removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
		}
		jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
		/*this.jqLayoutInner.removeAttr("style");
                               jQuery(this.aCardsOrder).removeAttr("style");*/

		if (jQuery(window).getSelection) {
			var selection = jQuery(window).getSelection();
			selection.removeAllRanges();
		}

	};

	Rearrange.prototype._endHandler = function(evt, ui) {
		jQuery.sap.log.info(ui);
		//Prevent text selection menu and magnifier on mobile devices
		if (sap.ui.Device.browser.mobile && this.selectableElemets) {
			this.selectableElemets.addClass("sapUiSelectable");
		}
	};
	
	
	//******** helpers *****//
	
	/**
	 * get the card and the viewport settings when the drag and resize starts
	 *
	 * @method initCardsSettings
	 */
	Rearrange.prototype.initCardsSettings = function() {
		this.jqLayout = this.layout.$();
		this.jqLayoutInner = this.jqLayout.children().first();
		var layoutScroll = this.jqLayout.scrollTop();
		var layoutHeight = this.jqLayoutInner.height();
		this.isRTLEnabled = sap.ui.getCore().getConfiguration().getRTL() ? 1 : -1;
		this.aCardsOrder = [];
		this.layoutOffset = this.jqLayout.offset();
		this.corrY = this.jqLayout.get(0).getBoundingClientRect().top + this.jqLayout.scrollTop();
		this.corrX = this.layoutOffset.left;
		this.columnCount = this.layoutUtil.oLayoutData.colCount;
		var visibleLayoutItems = this.layout.getVisibleLayoutItems();
		if (!visibleLayoutItems) {
			return;
		}
		this.aCardsOrder = visibleLayoutItems.map(function(item) {
			var element = item.$().parent()[0];
			element.posDnD = {
				width: element.offsetWidth,
				height: element.offsetHeight
			};
			element.style.width = element.offsetWidth + "px";
			return element;
		});
		var jqFirstColumn = this.jqLayoutInner.children().first();
		var marginProp = (this.isRTLEnabled === 1) ? "margin-left" : "margin-right";
		this.verticalMargin = parseInt(jqFirstColumn.css(marginProp), 10);
		var firstItemEl = this.aCardsOrder[0];
		this.horizontalMargin = parseInt(jQuery(firstItemEl).css("margin-bottom"), 10);
		this.verticalMargin = this.horizontalMargin;
		this.top = firstItemEl.getBoundingClientRect().top - this.jqLayoutInner[0].getBoundingClientRect().top;
		this.left = firstItemEl.getBoundingClientRect().left - this.jqLayoutInner[0].getBoundingClientRect().left;
		this.width = firstItemEl.offsetWidth;

		jQuery(this.aCardsOrder).css("position", "absolute");
		this.drawLayout(this.aCardsOrder);

		//all elements are switched to position absolute to prevent layout from collapsing we put height on it like it was before change.
		//and fix scroll, so user will not see position changes on the screen.
		this.jqLayoutInner.height(layoutHeight);
		this.jqLayout.scrollTop(layoutScroll);
	};

	/**
	 * put all items to new positions
	 *
	 * @method drawLayout
	 * @param {Array} aCardsLayout - card layout
	 */
	Rearrange.prototype.drawLayout = function(aCardsLayout) {
		var oCountColumnHeight = [];
		for (var i = 0; i < this.columnCount; i++) {
			oCountColumnHeight[i] = 0;
		}
		for (var naturalIndex = 0; naturalIndex < aCardsLayout.length; naturalIndex++) {
			var domElement = aCardsLayout[naturalIndex];

			var $card = jQuery(aCardsLayout[naturalIndex]);
			domElement.posDnD.top = $card.position().top;
			domElement.posDnD.bottom = $card.position().top + domElement.posDnD.height;
			domElement.posDnD.left = $card.position().left;
			domElement.posDnD.right = $card.position().left + domElement.posDnD.width;
			this.updateElementCSS(aCardsLayout[naturalIndex]);
		}
	};


	Rearrange.prototype.showGhostWhileDragMove = function(hiddenElem, ghostData) {
		// preview action: place ghost card and displace covered items by offset
		if (jQuery("#ovpDashboardLayoutMarker").length === 0) {
			// place ghost item
			jQuery(".sapUshellEasyScanLayoutInner").append(
				"<div id='ovpDashboardLayoutMarker' style= 'top: " + ghostData.top + "px;" +
				"; left: " + ghostData.left + "px;" +
				"; width: " + this.floaterData.width + "px;" +
				" height: " + this.floaterData.height + "px;" +
				"; position: absolute;'>" +

				"<div id='ovpDashboardLayoutMarkernner' class='sapOvpDasboardGhost' style= 'margin: 8px" +
				"; width: " + this.floaterData.width + "px;" +
				" height: " + this.floaterData.height + "px;'>" +
				"</div>" +

				"</div>");
		} else {
			jQuery("#ovpDashboardLayoutMarker").css({
				top: ghostData.top + "px",
				left: ghostData.left + "px"
			});
		}

		// move the wrapper of the card to the new position, the original card must not be shown
		jQuery(hiddenElem).css({
			left: ghostData.left + 2,
			top: ghostData.top + 2
		});
	};

	Rearrange.prototype.updateElementCSS = function(element) {
		jQuery(element).css({
			top: element.posDnD.top,
			left: element.posDnD.left
		});
	};

	Rearrange.prototype.getCSSTransition = function(offsetX, offsetY) {
		var oCSS = {};
		oCSS[this.cssVendorTransition] = "all 0.25s ease";
		oCSS[this.cssVendorTransform] = "translate3d(" + offsetX + "px, " + offsetY + "px, 0px)";
		return oCSS;
	};

	return Rearrange;

});
}; // end of sap/ovp/ui/DashboardLayoutRearrange.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutUtil') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutUtil",[
	"sap/ovp/ui/DashboardLayoutRearrange",
	"sap/ovp/ui/DashboardLayoutModel"
], function(Rearrange, DashboardLayoutModel) {

	// (function() {
	"use strict";

	var DashboardLayoutUtil = function(uiModel) {

		this.aCards = null;
		this.dashboardLayoutModel = new DashboardLayoutModel(uiModel);
		this.layoutDomId = "";
		this.oLayoutCtrl = {};
		this.componentDomId = "";
		this.oLayoutData = {
			layoutWidthPx: 1680,
			contentWidthPx: 1600,
			colCount: 5,
			colWidthPx: 320,
			rowHeightPx: 176,
			marginPx: this.convertRemToPx(3) - 8
		};
		this.lastTriggeredColWidth = 0.0;
	};

	DashboardLayoutUtil.prototype.setLayout = function(layout) {
		this.oLayoutCtrl = layout;
		this.layoutDomId = layout.getId();
		this.componentDomId = this.layoutDomId.split("--")[0];
	};

	DashboardLayoutUtil.prototype.getDashboardLayoutModel = function() {
		return this.dashboardLayoutModel;
	};

	DashboardLayoutUtil.prototype.updateCardVisibility = function(aChgCards) {
		this.dashboardLayoutModel.updateCardVisibility(aChgCards);
		this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
		this._setCardsCssValues(this.aCards);
		this.layoutCards();
	};

	DashboardLayoutUtil.prototype.updateLayoutData = function(iDashboardWidth) {
		// shortcut
		if (this.oLayoutData.layoutWidthPx === iDashboardWidth) {
			return this.oLayoutData;
		}

		var iDashboardMargin = this.oLayoutData.marginPx,
			iExtraSpaceForDesktop = 0,
			iSmallScreenWidth = 320,
			iMiddleScreenWidth = 1024,
			iCardMargin = 8,
			iNewScreenWidth = iDashboardWidth + iDashboardMargin; //iDashboardWidth is without left margin
		this.oLayoutData.layoutWidthPx = iDashboardWidth;

		if (iNewScreenWidth <= iSmallScreenWidth) {
			iDashboardMargin = this.convertRemToPx(0.5) - iCardMargin;
			iExtraSpaceForDesktop = sap.ui.Device.system.desktop ? 16 : 0; //considering vertical scrollbar on the desktop
		} else if (iNewScreenWidth <= iMiddleScreenWidth) {
			iDashboardMargin = this.convertRemToPx(1) - iCardMargin;
			iExtraSpaceForDesktop = sap.ui.Device.system.desktop ? 8 : 0;
		} else {
			iDashboardMargin = this.convertRemToPx(3) - iCardMargin;
		}
		if (iDashboardMargin !== this.oLayoutData.marginPx) {
			this.oLayoutData.marginPx = iDashboardMargin;
			jQuery(".sapUshellEasyScanLayout").css({
				"margin-left": iDashboardMargin + "px"
			});
		}

		//calculates content width excluding symmetric margin sapce on the right 
		//and the extra space for vertical scrollbar on the desktop
		this.oLayoutData.contentWidthPx = iDashboardWidth - iDashboardMargin - iExtraSpaceForDesktop;
		this.oLayoutData.colCount = Math.floor(this.oLayoutData.contentWidthPx / 320);
		if (this.oLayoutData.colCount === 0) {
			this.oLayoutData.colCount = 1;
		}
		this.oLayoutData.colWidthPx = this.oLayoutData.contentWidthPx / this.oLayoutData.colCount;

		return this.oLayoutData;
	};

	DashboardLayoutUtil.prototype.getRearrange = function(settings) {
		var defaultSettings = {
			containerSelector: ".sapUshellEasyScanLayoutInner",
			wrapper: ".sapUshellEasyScanLayout",
			draggableSelector: ".easyScanLayoutItemWrapper",
			placeHolderClass: "easyScanLayoutItemWrapper-placeHolder",
			cloneClass: "easyScanLayoutItemWrapperClone",
			moveTolerance: 10,
			switchModeDelay: 500,
			isTouch: !sap.ui.Device.system.desktop,
			debug: false,
			aCards: this.aCards,
			layoutUtil: this,
			rowHeight: this.oLayoutData.rowHeightPx,
			colWidth: this.oLayoutData.colWidthPx
		};

		settings = jQuery.extend(defaultSettings, settings);
		this.rearrange = new Rearrange(settings);
		return this.rearrange;
	};

	DashboardLayoutUtil.prototype.resizeLayout = function(iWidth) {

		var iBeforeCol = this.oLayoutData.colCount;
		var bTriggerResize = false;

		if (this.oLayoutData.layoutWidthPx !== iWidth) {
			this.updateLayoutData(iWidth);

			bTriggerResize = Math.abs(this.lastTriggeredColWidth - this.oLayoutData.colWidthPx) > this.convertRemToPx(0.5);

			// column width can grow pixel by pixel --> render even if number of columns stays same
			this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
			var i = 0;

			for (i = 0; i < this.aCards.length; i++) {

				//re-set css values for current card
				this.setCardCssValues(this.aCards[i]);

				var $card = jQuery("#" + this.getCardDomId(this.aCards[i].id));
				$card.css({
					top: this.aCards[i].dashboardLayout.top,
					left: this.aCards[i].dashboardLayout.left,
					width: this.aCards[i].dashboardLayout.width,
					height: this.aCards[i].dashboardLayout.height
				});

				//if number of columns changed --> trigger card resize
				if (iBeforeCol !== this.oLayoutData.colCount || bTriggerResize) {
					this._triggerCardResize(this.aCards[i].dashboardLayout, $card);
				}
			}

			if (bTriggerResize) {
				this.lastTriggeredColWidth = this.oLayoutData.colWidthPx;
			}
		}
	};

	/**
	 * build layout variant for specified width
	 *
	 * @method buildLayout
	 * @param {Int} iWidth - layout width in pixel
	 * @returns {Object} layout variant
	 */
	DashboardLayoutUtil.prototype.buildLayout = function(iWidth) {
		var oLayoutVar = {};
		if (!iWidth) {
			return oLayoutVar;
		}

		this.updateLayoutData(iWidth);
		this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
		this._setCardsCssValues(this.aCards);

		oLayoutVar = this.dashboardLayoutModel.extractCurrentLayoutVariant();
		return oLayoutVar;
	};

	/**
	 * get cards for specified number of columns
	 *
	 * @method getCards
	 * @param {Int} iColCount - number of columns
	 * @returns {Array} cards
	 */
	DashboardLayoutUtil.prototype.getCards = function(iColCount) {

		if (this.aCards && this.oLayoutData.colCount === iColCount) {
			return this.aCards;
		}

		this._setColCount(iColCount);
		this.aCards = this.dashboardLayoutModel.getCards(iColCount);
		this._setCardsCssValues(this.aCards);

		return this.aCards;
	};

	DashboardLayoutUtil.prototype.resetToManifest = function() {
		this.aCards = [];
		this.dashboardLayoutModel.resetToManifest();
		this.buildLayout(this.oLayoutData.layoutWidthPx);
		this.layoutCards();
	};

	/**
	 * get card at pixel position in it's container
	 * scroll and offset are not considered here
	 *
	 * @method getCardDomId
	 * @param {ID} cardId
	 * @returns {ID} card dom id
	 */
	DashboardLayoutUtil.prototype.getCardDomId = function(cardId) {
		// card00 --> __xmlview0--ovpLayout--card00
		return this.layoutDomId + "--" + cardId;
	};

	DashboardLayoutUtil.prototype.getCardId = function(cardDomId) {
		// __xmlview0--ovpLayout--card00 --> card00
		var cdi = "";
		if (cardDomId) {
			cdi = cardDomId.split("--")[2];
		}
		return cdi;
	};

	/**
	 * get card at pixel position in it's container
	 * scroll and offset are not considered here
	 *
	 * @method getCardByPosition
	 * @param {Object} pos - position
	 * @returns {Object} card residing at grid position
	 */
	DashboardLayoutUtil.prototype.getCardByPositionPx = function(pos) {
		var iRow = Math.floor(pos.top / this.oLayoutData.rowHeightPx) + 1;
		var iCol = Math.floor(pos.left / this.oLayoutData.colWidthPx) + 1;

		var gridPos = {
			row: iRow,
			column: iCol
		};
		return this.dashboardLayoutModel.getCardByGridPos(gridPos);
	};

	/**
	 * get cards in (partly) contained in given area in it's container
	 * scroll and offset are not considered here
	 *
	 * @method getCardsByArea
	 * @param {Object} area (x,y,width,height)
	 * @returns {Object} cards contained in area
	 */
	DashboardLayoutUtil.prototype.getCardsByArea = function(area, bRoundHalfUp) {
		var oGridSpan = {};
		var oCardAtPos = this.getCardByPositionPx(area);

		var oTPCell = {};
		// floor + 1 vs round
		if (bRoundHalfUp) {
			oTPCell.column = Math.round(area.x / this.oLayoutData.colWidthPx);
			oTPCell.row = Math.round(area.y / this.oLayoutData.rowHeightPx);
		} else {
			oTPCell.column = Math.floor(area.x / this.oLayoutData.colWidthPx) + 1;
			oTPCell.row = Math.floor(area.y / this.oLayoutData.rowHeightPx) + 1;
		}

		// min 1 / 1
		if (oTPCell.column > 1) {
			oTPCell.column = 1;
		}
		if (oTPCell.row > 1) {
			oTPCell.row = 1;
		}

		if (oCardAtPos) {
			oGridSpan.x1 = oCardAtPos.dashboardLayout.column;
			oGridSpan.y1 = oCardAtPos.dashboardLayout.row;
		} else {
			oGridSpan.x1 = oTPCell.column;
			oGridSpan.y1 = oTPCell.row;
		}
		oGridSpan.x2 = Math.ceil(area.width / this.oLayoutData.colWidthPx) + oGridSpan.x1 - 1;
		oGridSpan.y2 = Math.ceil(area.height / this.oLayoutData.rowHeightPx) + oGridSpan.y1 - 1;
		var result = {
			cards: this.dashboardLayoutModel.getCardsByGrid(oGridSpan),
			upperLeftEdge: this._mapGridToPositionPx({
				column: oGridSpan.x1,
				row: oGridSpan.y1
			}),
			upperLeftGridCell: {
				column: oGridSpan.x1,
				row: oGridSpan.y1
			},
			cardUpperLeft: oCardAtPos,
			touchPointCell: this._mapGridToPositionPx(oTPCell),
			touchPointGridCell: oTPCell
		};

		return result;
	};

	/**
	 * move card to given position in its container (in pixel, scroll and offset are not considered here)
	 *
	 * @method moveCardToGrid
	 * @param {Object} floaterDomId - if of floater
	 * @param {Object} gridCell - cell coordinates
	 * @param (boolean) bPushHorizontal
	 */
	DashboardLayoutUtil.prototype.moveCardToGrid = function(floaterDomId, gridCell, bPushHorizontal) {
		var aToBeMoved = this.dashboardLayoutModel.moveCardToGrid(this.getCardId(floaterDomId), gridCell, bPushHorizontal);

		if (aToBeMoved.length > 0) {
			this._positionCards(aToBeMoved);
		}

		this.oLayoutCtrl.fireAfterDragEnds();

		if (!this.dashboardLayoutModel.validateGrid()) {
			/*sap.m.MessageToast.show("DashboardLayoutModel is inconsistent! [MoveCard]", {
				at: "center center",
				width: "50rem"
			});*/
			//should not happen! fallback: undo last change to avoid inconsisties in model
			this.dashboardLayoutModel.undoLastChange();
		}
	};

	DashboardLayoutUtil.prototype.isCardAutoSpan = function(cardId) {
		return this.dashboardLayoutModel.getCardById(cardId).dashboardLayout.autoSpan;
	};

	DashboardLayoutUtil.prototype.setAutoCardSpanHeight = function(evt) { //cardId, iHeight) {
		//evt.target.parentElement.parentElement
		var layoutChanges;
		var cardId = evt.target.parentElement.parentElement.id.split("--")[1];
		var iRows = Math.ceil(evt.size.height / this.getRowHeightPx());
		layoutChanges = this.dashboardLayoutModel.resizeCard(cardId, {
			rowSpan: iRows,
			colSpan: 1
		}, /*manual resize*/ false);
		this._sizeCard(layoutChanges.resizeCard);
		this._positionCards(layoutChanges.affectedCards);
	};

	DashboardLayoutUtil.prototype._sizeCard = function(oCard) {

		if (!oCard) {
			return;
		}
		var $card = jQuery("#" + this.getCardDomId(oCard.id));
		$card.css({
			width: oCard.dashboardLayout.colSpan * this.oLayoutData.colWidthPx + "px",
			height: oCard.dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx + "px"
		});

		this._triggerCardResize(oCard.dashboardLayout, $card);

	};

	DashboardLayoutUtil.prototype._triggerCardResize = function(cardLayout, $card) {
		//get card controller and send resize data
		if (cardLayout.autoSpan || !cardLayout.visible) {
			//no trigger for autoSpan and hidden cards
			return;
		}
		var cardId = $card.children().first().attr("id");
		try {
			var oCompInst = sap.ui.getCore().byId(cardId).getComponentInstance();
			if (oCompInst) {
				var oGenCardCtrl = oCompInst.getAggregation("rootControl").getController();
				if (oGenCardCtrl) {
					oGenCardCtrl.resizeCard(cardLayout);
				} else {
					jQuery.sap.log.error("OVP resize: no controller found for " + cardId);
				}
			}
		} catch (err) {
			jQuery.sap.log.warning("OVP resize: " + cardId + " catch " + err.toString());
		}
	};

	DashboardLayoutUtil.prototype._positionCards = function(aCards) {
		if (!aCards) {
			return;
		}
		var i = 0;
		var pos = {};

		for (i = 0; i < aCards.length; i++) {
			if (!aCards[i].dashboardLayout.visible) {
				continue; //skip invisible cards
			}
			pos = this._mapGridToPositionPx(aCards[i].dashboardLayout);

			var $card = jQuery("#" + this.getCardDomId(aCards[i].id));
			$card.css({
				top: pos.top,
				left: pos.left
			});
		}
	};

	DashboardLayoutUtil.prototype.layoutCards = function(cards) {
		var aCards = cards || this.aCards;

		var i = 0;
		var pos = {};

		for (i = 0; i < aCards.length; i++) {
			if (!aCards[i].dashboardLayout.visible) {
				continue; //skip invisible cards
			}
			pos = this._mapGridToPositionPx(aCards[i].dashboardLayout);

			var $card = jQuery("#" + this.getCardDomId(aCards[i].id));
			$card.css({
				top: pos.top,
				left: pos.left,
				width: aCards[i].dashboardLayout.colSpan * this.oLayoutData.colWidthPx + "px",
				height: aCards[i].dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx + "px"
			});
			this._triggerCardResize(aCards[i].dashboardLayout, $card);
		}
	};

	DashboardLayoutUtil.prototype.resizeCard = function(cardDomId, span) {
		var layoutChanges = this.dashboardLayoutModel.resizeCard(this.getCardId(cardDomId), span, /*manual resize*/ true);

		this._sizeCard(layoutChanges.resizeCard);
		this._positionCards(layoutChanges.affectedCards);

		this.oLayoutCtrl.fireAfterDragEnds();

		if (!this.dashboardLayoutModel.validateGrid()) {
			/*sap.m.MessageToast.show("DashboardLayoutModel is inconsistent! [ResizeCard]", {
				at: "center center",
				width: "50rem"
			});*/
			//should not happen! fallback: undo last change to avoid inconsisties in model
			this.dashboardLayoutModel.undoLastChange();
		}
	};

	DashboardLayoutUtil.prototype._sortCardsByCol = function(aCards) {

		//sort by columns and order in column
		aCards.sort(function(card1, card2) {
			// defaults for cards without dashboardLayout data
			if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.column === card2.dashboardLayout.column) {
				if (card1.dashboardLayout.row < card2.dashboardLayout.row) {
					return -1;
				} else if (card1.dashboardLayout.row > card2.dashboardLayout.row) {
					return 1;
				}
			} else if (card1.dashboardLayout.column) {
				return card1.dashboardLayout.column - card2.dashboardLayout.column;
			} else {
				return 0;
			}
		});
	};

	DashboardLayoutUtil.prototype._sortCardsByRow = function(aCards) {

		//sort by columns and order in column
		aCards.sort(function(card1, card2) {
			// defaults for cards without dashboardLayout data
			if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.row === card2.dashboardLayout.row) {
				if (card1.dashboardLayout.column < card2.dashboardLayout.column) {
					return -1;
				} else if (card1.dashboardLayout.column > card2.dashboardLayout.column) {
					return 1;
				}
			} else if (card1.dashboardLayout.row) {
				return card1.dashboardLayout.row - card2.dashboardLayout.row;
			} else {
				return 0;
			}
		});
	};

	// map grid coords to position coords
	DashboardLayoutUtil.prototype._mapGridToPositionPx = function(gridPos) {
		var pos = {
			top: (gridPos.row - 1) * this.getRowHeightPx() + "px",
			left: (gridPos.column - 1) * this.getColWidthPx() + "px"
		};
		return pos;
	};

	// map position coords to grid coords to position coords
	DashboardLayoutUtil.prototype.mapPositionToGrid = function(pos) {
		var gridPos = {};
		var gridCoord = {};

		//get grid coordinates from the current touchpoint coordinates
		gridCoord.y1 = Math.floor((pos.top + 1) / this.oLayoutData.rowHeightPx) + 1;
		gridCoord.x1 = Math.floor((pos.left + 1) / this.oLayoutData.colWidthPx) + 1;

		//get upper left position coordinates from grid coordinates
		gridPos = this._mapGridToPositionPx({
			column: gridCoord.x1,
			row: gridCoord.y1
		});
		gridPos.gridCoordX = gridCoord.x1;
		gridPos.gridCoordY = gridCoord.y1;
		return gridPos;
	};

	//returns the number of pixel for one rem from the current browser font size
	DashboardLayoutUtil.prototype.getPixelPerRem = function() {
		// Returns a number
		var fontSize = parseFloat(
			// of the computed font-size, so in px
			getComputedStyle(
				// for the root <html> element
				document.documentElement
			)
			.fontSize
		);
		return fontSize;
	};

	DashboardLayoutUtil.prototype._getCardComponentDomId = function(cardId) {
		return this.componentDomId + "--" + cardId;
	};

	DashboardLayoutUtil.prototype._getCardController = function(cardId) {
		//.getComponentInstance().getAggregation("rootControl").getController();
		var oCtrl = null;
		var cardView = sap.ui.getCore().byId(this._getCardComponentDomId(cardId));
		if (cardView) {
			oCtrl = cardView.getComponentInstance().getAggregation("rootControl").getController();
		}
		return oCtrl;
	};

	DashboardLayoutUtil.prototype._setCardsCssValues = function(aCards) {
		var i = 0;
		for (i = 0; i < aCards.length; i++) {
			this.setCardCssValues(aCards[i]);
		}
	};

	DashboardLayoutUtil.prototype.setCardCssValues = function(oCard) {
		oCard.dashboardLayout.top = ((oCard.dashboardLayout.row - 1) * this.oLayoutData.rowHeightPx) + "px";
		oCard.dashboardLayout.left = ((oCard.dashboardLayout.column - 1) * this.oLayoutData.colWidthPx) + "px";
		oCard.dashboardLayout.width = (oCard.dashboardLayout.colSpan * this.oLayoutData.colWidthPx) + "px";
		oCard.dashboardLayout.height = (oCard.dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx) + "px";
	};

	DashboardLayoutUtil.prototype.convertRemToPx = function(value) {
		var val = value;
		if (typeof value === "string" || value instanceof String) { //take string with a rem unit
			val = value.length > 0 ? parseInt(value.split("rem")[0], 10) : 0;
		}
		return val * this.getPixelPerRem();
	};

	DashboardLayoutUtil.prototype.convertPxToRem = function(value) {
		var val = value;
		if (typeof value === "string" || value instanceof String) { //take string with a rem unit
			val = value.length > 0 ? parseFloat(value.split("px")[0], 10) : 0;
		}
		return val / this.getPixelPerRem();
	};

	DashboardLayoutUtil.prototype.getLayoutWidthPx = function() {
		return this.oLayoutData.colCount * this.oLayoutData.colWidthPx;
	};

	DashboardLayoutUtil.prototype.getColWidthPx = function() {
		return this.oLayoutData.colWidthPx;
	};

	DashboardLayoutUtil.prototype.getRowHeightPx = function() {
		return this.oLayoutData.rowHeightPx;
	};

	DashboardLayoutUtil.prototype._setColCount = function(iColCount) {
		this.oLayoutData.colCount = iColCount;
		//console.log("ColCount set to " + this.oLayoutData.colCount);
	};

	/**
	 * get cell by rounded position values and cards covered by ghost
	 * scroll and offset are not considered here
	 *
	 * @method getRoundedCell
	 * @param {Object} floaterData - top/left/id
	 * @returns {Object} containing cellPos + coveredCardIds + push direction
	 */
	DashboardLayoutUtil.prototype.getDropSimData = function(floaterData) {
		var bPushHorizontal = true;
		var oGridSpan = {};
		var aCoveredCards = [];
		var aCoveredCardIds = [];
		var i = 0;

		var rowHeightPx = this.oLayoutData.rowHeightPx;
		var colWidthPx = this.oLayoutData.colWidthPx;
		var oCard = this.dashboardLayoutModel.getCardById(this.getCardId(floaterData.id));

		var targetCell = {
			column: Math.round(floaterData.left / colWidthPx),
			row: Math.round(floaterData.top / rowHeightPx)
		};
		var bTargetOnRigthEdge = true;
		//for top/left 0 is valid
		targetCell.row = (targetCell.row < 1) ? 0 : targetCell.row;
		targetCell.column = (targetCell.column < 0) ? 0 : targetCell.column;

		var floaterColumns = oCard ? oCard.dashboardLayout.colSpan : 0;
		if (targetCell.column + floaterColumns > (this.oLayoutData.colCount)) {
			targetCell.column = this.oLayoutData.colCount - floaterColumns;
		}
		if (targetCell.column + floaterColumns < this.oLayoutData.colCount) {
			bTargetOnRigthEdge = false;
		}

		var cellPos = {
			left: (targetCell.column) * colWidthPx,
			top: (targetCell.row) * rowHeightPx
		};
		var iTopRowTopPx = cellPos.top;

		if (cellPos.left > this.oLayoutData.colCount * colWidthPx) {
			cellPos.left = this.oLayoutData.colCount * colWidthPx;
		}

		if (oCard) {
			//for cards location: + 1
			oGridSpan.y1 = targetCell.row + 1;
			oGridSpan.x1 = targetCell.column + 1;
			oGridSpan.y2 = oGridSpan.y1 + oCard.dashboardLayout.rowSpan - 1;
			oGridSpan.x2 = oGridSpan.x1 + oCard.dashboardLayout.colSpan - 1;

			aCoveredCards = this.dashboardLayoutModel.getCardsByGrid(oGridSpan, this.getCardId(floaterData.id));
			for (i = 0; i < aCoveredCards.length; i++) {
				aCoveredCardIds.push(this.getCardDomId(aCoveredCards[i].id));
			}
		}
		// decide push direction
		// if floater is located (considerably (> 16px)) above top card --> push vertically
		for (i = 0; i < aCoveredCards.length; i++) {

			if ((aCoveredCards[i].dashboardLayout.row - 1) * rowHeightPx < iTopRowTopPx) {
				iTopRowTopPx = (aCoveredCards[i].dashboardLayout.row - 1) * rowHeightPx;
			}
		}
		if (floaterData.top < iTopRowTopPx - 16) {
			bPushHorizontal = false;
		}

		if (bTargetOnRigthEdge) {
			bPushHorizontal = false;
		}

		return {
			cellPos: cellPos,
			coveredCardIds: aCoveredCardIds,
			pushHorizontal: bPushHorizontal
		};
	};

	return DashboardLayoutUtil;
}, /* bExport*/ true); //();
}; // end of sap/ovp/ui/DashboardLayoutUtil.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.EasyScanLayout') ) {
/*!
 * ${copyright}
 */

/*global sap window*/
jQuery.sap.declare('sap.ovp.ui.EasyScanLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/EasyScanLayout",["jquery.sap.global", "sap/ovp/library"],
    function (jQuery) {
        "use strict";
        jQuery.sap.require('sap.ovp.ui.UIActions');

        var ReplaceItems = function (settings) {
            this.init(settings);
        };

        ReplaceItems.prototype.init = function (settings) {
            settings.beforeDragCallback = this._beforeDragHandler.bind(this);
            settings.dragStartCallback = this._dragStartHandler.bind(this);
            settings.dragMoveCallback = this._dragMoveHandler.bind(this);
            settings.dragEndCallback = this._dragEndHandler.bind(this);
            settings.endCallback = this._endHandler.bind(this);

            this.layout = settings.layout;
            this.afterReplaceElements = settings.afterReplaceElements || function () {};
            this.settings = settings;
            delete settings.afterReplaceElements;
            this.destroy(); //destroy the previous instance of UIActions
            this.uiActions = new sap.ovp.ui.UIActions(this.settings).enable();
            this.aCardsOrder = null; //DOM elements array
            this.verticalMargin = null; //space vertical between items
            this.horizontalMargin = null; //horizontal space vertical between items
            this.columnCount = null; //number of layout columns
            this.top = null; //space between layout top and first card
            this.left = null; //space between layout left and first card
            this.width = null; //item width
            this.layoutOffset = null; //layout coordinates on screen, needed to normalize mouse position to layout
            this.jqLayout = null; //layout jQuery reference
            this.jqLayoutInner = null; //layout inner wrapper jQuery reference
            this.isRTLEnabled = null; //RTL flag
            this.lastCollidedEl = null; //last collided element
            this.lastCollisionTop = null; //last element collision top or bottom true/false
        };


        //search collision with elements,
        //moveX - normalized X cord.
        //moveY - normalized Y cord.
        //itemList array of elements with posDnD property {top: , left: , height:, width: }
        //returns found element or undefined
        ReplaceItems.prototype.findCollision = function (moveX, moveY, itemList) {
            var colliedItem;
            for (var i = 0; i < itemList.length; i++) {
                var item = itemList[i];
                var isHorizontalIntersection = !(item.posDnD.right < moveX || item.posDnD.left > moveX);
                var isVerticalIntersection = !(item.posDnD.bottom < moveY || item.posDnD.top > moveY);
                if (isHorizontalIntersection && isVerticalIntersection) {
                    colliedItem = item;
                    break;
                }
            }
            return colliedItem;
        };

        //returns which part of element has collision - true for top, false for bottom
        ReplaceItems.prototype.isCollisionTop = function (moveX, moveY, item) {
            var halfBottom = ((item.posDnD.bottom - item.posDnD.top) / 2) + item.posDnD.top;
            var isCollisionTop = !(halfBottom < moveY || item.posDnD.top > moveY);
            return isCollisionTop;
        };

        //callback for UIActions, every time when mouse is moved in drag mode.
        ReplaceItems.prototype._dragMoveHandler = function (actionObject) {
            //{evt : evt, clone : this.clone, element: this.element, isScrolling: isScrolling, moveX : this.moveX, moveY : this.moveY}
            var sourceElement = actionObject.element;
            var moveX = actionObject.moveX - this.layoutOffset.left;
            var moveY = actionObject.moveY - this.jqLayout.get(0).getBoundingClientRect().top + this.jqLayout.scrollTop();

            var collidedItem = this.findCollision(moveX, moveY, this.aCardsOrder);
            if (!collidedItem) {
                return; //no collided item, no need to act
            }
            var collidedItemTopCollision = this.isCollisionTop(moveX, moveY, collidedItem); //get element collision part
            if (collidedItem === sourceElement) {
                this.lastCollidedEl = collidedItem; //collided is dragged element, save it as last collided, and exit.
                return;
            }
            if (collidedItem === this.lastCollidedEl) {
                //current collided element the same as it was last time
                if (this.lastCollisionTop === collidedItemTopCollision) {
                    //mouse was not moved to another element part (from top to bottom or wise versa), so no need to act
                    return;
                }
                if (this.lastCollisionTop) {
                    this.lastCollisionTop = collidedItemTopCollision;
                    if (sourceElement.posDnD.top > collidedItem.posDnD.top) {
                        //mouse was moved from top to bottom, but sourceElement already on the bottom of collided element, no need to switch.
                        return;
                    }
                } else {
                    this.lastCollisionTop = collidedItemTopCollision;
                    if (sourceElement.posDnD.top < collidedItem.posDnD.top) {
                        //mouse was moved from bottom to top, but sourceElement already on the top of collided element, no need to switch.
                        return;
                    }
                }
            }
            if (this.lastCollidedEl && (this.lastCollidedEl !== collidedItem && this.lastCollidedEl !== sourceElement) &&
                (this.lastCollidedEl.posDnD.left === collidedItem.posDnD.left && this.lastCollidedEl.posDnD.left ===  sourceElement.posDnD.left)){
                //complicated situation, when lastCollided, currentCollided and sourceElement, it's 3 different items, and they all in the same column.
                //it means that we don't want to switch with currentCollided element, becouse it dosn't look good.
                //Instead we switch with lastCollided item, which is more logical behaviour for user.
                collidedItem = this.lastCollidedEl;
            }
            //switch elements and recalculate new layout state.
            this.dragAndDropElement(sourceElement, collidedItem);
            //we want to know under which card mouse will be after  cards change places.
            //Because cards could be very high, it's possible that after change, mouse will appear under another card.
            //So we need to prevent future collision with this card, else you could face endless loop, when two high card will change each other endlessly.
            this.lastCollidedEl = this.findCollision(moveX, moveY, this.aCardsOrder);
            if (this.lastCollidedEl) {
                this.lastCollisionTop = this.isCollisionTop(moveX, moveY, this.lastCollidedEl);
            }
        };

        //switch elements and apply new element positions
        ReplaceItems.prototype.dragAndDropElement = function (sourceElement, targetElement) {
            if (sourceElement && targetElement) {
                this.aCardsOrder = this.dragAndDropSwapElement(sourceElement, targetElement, this.aCardsOrder);
                this.drawLayout(this.aCardsOrder);
            }
        };

        //switch two elements
        ReplaceItems.prototype.dragAndDropSwapElement = function (sourceElement, targetElement, itemsList) {
            var newOrder = itemsList.slice();
            var sourceElementIndex = itemsList.indexOf(sourceElement);
            var targetElementIndex = itemsList.indexOf(targetElement);
            newOrder[targetElementIndex] = sourceElement;
            newOrder[sourceElementIndex] = targetElement;
            return newOrder;
        };


        //keyboard navigation
        ReplaceItems.prototype.dragAndDropSwapElementForKeyboardNavigation = function (sourceElement, targetElement) {
            if (sourceElement && targetElement) {
                var aLayoutCards = this.layout.getVisibleLayoutItems().map(function (item) {
                    return item.$().parent()[0];
                });

                var changes = 0;
                for (var i = 0; i < aLayoutCards.length; i++){
                    if (aLayoutCards[i] === sourceElement){
                        aLayoutCards[i] = targetElement;
                        changes++;
                        continue;
                    }
                    if (aLayoutCards[i] === targetElement){
                        aLayoutCards[i] = sourceElement;
                        changes++;
                        continue;
                    }
                }

                //callback afterSwapItems
                if (changes === 2) {
                    this.afterReplaceElements(aLayoutCards);
                }
            }
        };

        //init function called when drag start
        ReplaceItems.prototype.initCardsSettingsForDragAndDrop = function () {
            this.jqLayout = this.layout.$();
            this.jqLayoutInner = this.jqLayout.children().first();
            var layoutScroll = this.jqLayout.scrollTop();
            var layoutHeight = this.jqLayoutInner.height();
            this.isRTLEnabled = sap.ui.getCore().getConfiguration().getRTL() ? 1 : -1;
            this.aCardsOrder = [];
            this.layoutOffset = this.jqLayout.offset();

            var visibleLayoutItems = this.layout.getVisibleLayoutItems();
            if (!visibleLayoutItems) {
                return;
            }
            this.aCardsOrder = visibleLayoutItems.map(function (item) {
                var element = item.$().parent()[0];
                element.posDnD = {
                    width: element.offsetWidth,
                    height: element.offsetHeight
                };
                element.style.width = element.offsetWidth + "px";
                return element;
            });
            var jqFirstColumn = this.jqLayoutInner.children().first();
            var marginProp = (this.isRTLEnabled === 1) ? "margin-left" : "margin-right";
            this.verticalMargin = parseInt(jqFirstColumn.css(marginProp), 10);
            var firstItemEl = this.aCardsOrder[0];
            this.horizontalMargin = parseInt(jQuery(firstItemEl).css("margin-bottom"), 10);
            this.columnCount = this.layout.getColumnCount();
            this.top = firstItemEl.getBoundingClientRect().top - this.jqLayoutInner[0].getBoundingClientRect().top;
            this.left = firstItemEl.getBoundingClientRect().left - this.jqLayoutInner[0].getBoundingClientRect().left;
            this.width = firstItemEl.offsetWidth;

            jQuery(this.aCardsOrder).css("position", "absolute");
            this.drawLayout(this.aCardsOrder);

            //all elements are switched to position absolute to prevent layout from collapsing we put height on it like it was before change.
            //and fix scroll, so user will not see position changes on the screen.
            this.jqLayoutInner.height(layoutHeight);
            this.jqLayout.scrollTop(layoutScroll);

        };

        //put all elements to new position.
        ReplaceItems.prototype.drawLayout = function (aCardsLayout) {
            var oCountColumnHeight = [];
            for (var i = 0; i < this.columnCount; i++) {
                oCountColumnHeight[i] = 0;
            }
            for (var naturalIndex = 0; naturalIndex < aCardsLayout.length; naturalIndex++) {
                var currentColumn = naturalIndex % this.columnCount;
                var currentHeight = oCountColumnHeight[currentColumn]++;
                var currentLeft = this.left - this.isRTLEnabled * (currentColumn * this.verticalMargin + currentColumn * this.width);
                var currentTop = this.top;
                var domElement =  aCardsLayout[naturalIndex];

                for (var j = 0; j < currentHeight; j++) {
                    currentTop += this.horizontalMargin;
                    var parentIndex = naturalIndex - (j + 1) * this.columnCount;
                    currentTop += aCardsLayout[parentIndex].posDnD.height;
                }

                domElement.posDnD.top = currentTop;
                domElement.posDnD.bottom = currentTop + domElement.posDnD.height;
                domElement.posDnD.left = currentLeft;
                domElement.posDnD.right = currentLeft + domElement.posDnD.width;
                this.updateElementCSS(aCardsLayout[naturalIndex]);
            }
        };

        ReplaceItems.prototype.updateElementCSS = function (element) {
            jQuery(element).css({
                top: element.posDnD.top,
                left: element.posDnD.left
            });
        };

        //callback when drag starts
        ReplaceItems.prototype._dragStartHandler = function (evt, cardElement) {
            //Prevent selection of text on tiles and groups
            if (window.getSelection) {
                var selection = window.getSelection();
                selection.removeAllRanges();
            }
            this.initCardsSettingsForDragAndDrop();
        };

        //callback before clone created
        ReplaceItems.prototype._beforeDragHandler = function (evt, ui) {
            //Prevent the browser to mark any elements while dragging
            if (sap.ui.Device.system.desktop) {
                jQuery('body').addClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
            }
            //Prevent text selection menu and magnifier on mobile devices
            if (sap.ui.Device.browser.mobile) {
                this.selectableElemets = jQuery(ui).find('.sapUiSelectable');
                this.selectableElemets.removeClass('sapUiSelectable');
            }
            jQuery(this.settings.wrapper).addClass("dragAndDropMode");
        };

        //model changes, and cleanup after drag and drop finished
        ReplaceItems.prototype._dragEndHandler = function (evt, ui) {
            this.lastCollidedEl = null;
            if (this.aCardsOrder) {
                this.afterReplaceElements(this.aCardsOrder);
            }
            //Cleanup added classes and styles before drag
            if (sap.ui.Device.system.desktop) {
                jQuery('body').removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
            }
            jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
            this.jqLayoutInner.removeAttr("style");
            jQuery(this.aCardsOrder).removeAttr("style");
        };

        ReplaceItems.prototype._endHandler = function (evt, ui) {
            //Prevent text selection menu and magnifier on mobile devices
            if (sap.ui.Device.browser.mobile && this.selectableElemets) {
                this.selectableElemets.addClass('sapUiSelectable');
            }
        };

        ReplaceItems.prototype.getSwapItemsFunction = function () {
            return this.dragAndDropSwapElementForKeyboardNavigation.bind(this);
        };

        ReplaceItems.prototype.destroy = function () {
            if (this.uiActions) {
                this.uiActions.disable();
                this.uiActions = null;
            }
        };

        var DragAndDropFactory = {
            buildReplaceItemsInstance: function (settings) {
                var defaultSettings = {
                    containerSelector: ".sapUshellEasyScanLayoutInner",
                    wrapper: ".sapUshellEasyScanLayout",
                    draggableSelector: ".easyScanLayoutItemWrapper",
                    placeHolderClass: "easyScanLayoutItemWrapper-placeHolder",
                    cloneClass: "easyScanLayoutItemWrapperClone",
                    moveTolerance: 10,
                    switchModeDelay: 800,
                    isTouch: !sap.ui.Device.system.desktop,
                    debug: false
                };

                settings = jQuery.extend(defaultSettings, settings);
                return new ReplaceItems(settings);
            }
        };

        var KeyboardNavigation = function (easyScanLayout, swapItemsFunction) {
            this.init(easyScanLayout, swapItemsFunction);
        };

        KeyboardNavigation.prototype.init = function (easyScanLayout, swapItemFunction) {
            this.easyScanLayout = easyScanLayout;
            this.swapItemsFunction = (typeof swapItemFunction === "function") ? swapItemFunction : function () {
            };
            this.keyCodes = jQuery.sap.KeyCodes;
            this.jqElement = easyScanLayout.$();
            this.jqElement.on('keydown.keyboardNavigation', this.keydownHandler.bind(this));
            this.jqElement.find(".after").on("focus.keyboardNavigation", this.afterFocusHandler.bind(this));
            this.jqElement.find(".sapUshellEasyScanLayoutInner").on("focus.keyboardNavigation", this.layoutFocusHandler.bind(this));
            this.jqElement.on("focus.keyboardNavigation", ".easyScanLayoutItemWrapper", this.layoutItemFocusHandler.bind(this));
            this._ignoreSelfFocus = false;
            this.swapSourceElement = null;
        };

        KeyboardNavigation.prototype.destroy = function () {
            if (this.jqElement) {
                this.jqElement.off(".keyboardNavigation");
                this.jqElement.find(".after").off(".keyboardNavigation");
                this.jqElement.find(".sapUshellEasyScanLayoutInner").off(".keyboardNavigation");
            }
            delete this.jqElement;
            delete this.easyScanLayout;
        };

        KeyboardNavigation.prototype.getVisibleLayoutItems = function () {
            //layout items could be hidden, so we filter them and receive only visible
            var content = this.easyScanLayout.getContent();
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            return filteredItems;
        };

        KeyboardNavigation.prototype.afterFocusHandler = function () {
            //two options are possible, or focus came to us from outside, as a result of outside navigation (Shift+tab Shift+F6 etc...)
            //or we put focus as a result of Tab button inside layout, to maintain Accessibility guide:
            // If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
            if (this._ignoreSelfFocus) {
                //focus was on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
                //so, this function was called from tabButtonHandler,  we put focus on after element, so browser will move it outside of layout
                this._ignoreSelfFocus = false;
                return;
            }
            //focus came to us from outside, as a result of outside navigation (Shift+tab Shift+F6 etc...)
            //	On enter first time, move focus to the last control of the first Item.
            //	On enter any consecutive time, move focus to the last control of the Item which had the focus before
            var jqItem = this.jqElement.find(".easyScanLayoutItemWrapper:sapTabbable").first();
            var lastTabbable = jqItem.find(":sapTabbable").last();
            if (!lastTabbable.length) {
                lastTabbable = jqItem;
            }
            lastTabbable.focus();
        };

        KeyboardNavigation.prototype.layoutFocusHandler = function () {
            //two options are possible, or focus came to us from outside, as a result of outside navigation (tab F6 etc...)
            //or we put focus as a result of Shift+Tab button inside layout, to maintain Accessibility guide:
            // If focus is on a Item, move focus to the previous control in the tab chain before the Item Container.
            if (this._ignoreSelfFocus) {
                //focus was on the Item, move focus to the previous control in the tab chain before the Item Container
                //so  this function was called from shiftTabButtonHandler, and we put focus on layout itself, so browser will move it outside of layout
                this._ignoreSelfFocus = false;
                return;
            }
            //focus was received from outside element
            //On enter first time, move focus to the first Item (as a whole).
            //On enter any consecutive time, move focus to the Item which had the focus before.
            this.jqElement.find(".easyScanLayoutItemWrapper:sapTabbable").first().focus();
        };

        KeyboardNavigation.prototype.layoutItemFocusHandler = function () {
            var jqFocused = jQuery(document.activeElement);

            // Check that focus element exits, id this item exits it will be easyScanLayoutItemWrapper (because the jQuery definitions
            // After we have the element we want to add to his aria-labelledby attribute all the IDs of his sub elements that have aria-label and role headind
            if (jqFocused) {

                // Select all sub elements with aria-label
                var labelledElement = jqFocused.find("[aria-label]");
                var i, strIdList = "";

                //  Add every element id with aria label and roll heading inside the LayoutItemWrapper to string list
                for (i = 0; i < labelledElement.length; i++) {
                    if (labelledElement[i].getAttribute("role") == "heading") {
                        strIdList += labelledElement[i].id + " ";
                    }
                }

                // add the id string list to the focus element (warpper) aria-labelledby attribute
                if (strIdList.length) {
                    jqFocused.attr("aria-labelledby", strIdList);
                }
            }
        };

        //return array index of visible items from layout content aggregation
        KeyboardNavigation.prototype._getLayoutItemIndex = function (jqFocused) {
            if (!jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                return false;
            }
            var currentItemId = jqFocused.children().attr("id");
            var itemIndex = false;
            this.getVisibleLayoutItems().forEach(function (item, index) {
                if (currentItemId == item.getId()) {
                    itemIndex = index;
                }
            });
            return itemIndex;
        };

        KeyboardNavigation.prototype._changeItemsFocus = function (jqItem) {
            //to preserve last focusable item, we need to set all other items tabindex=-1
            var jqTabbableElements = jQuery('.easyScanLayoutItemWrapper');
            jqTabbableElements.attr("tabindex", "-1");
            jqItem.attr("tabindex", 0);
            jqItem.focus();
        };

        KeyboardNavigation.prototype._swapItemsFocus = function (e, jqItemFrom, jqItemTo) {
            //to preserve last focusable item, first item received tabindex=-1, second tabindex=-1.
            e.preventDefault();
            jqItemFrom.attr("tabindex", "-1");
            jqItemTo.attr("tabindex", "0").focus();
        };


        KeyboardNavigation.prototype.tabButtonHandler = function (e) {
            //Forward navigation:
            //On enter first time, move focus to the first Item (as a whole).
            //On enter any consecutive time, move focus to the Item which had the focus before.
            //If focus is on a Item, move focus to the first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the next control in the tab chain inside the same Item.
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
            var jqFocusedElement = jQuery(document.activeElement);
            if (jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            var jqItem = jqFocusedElement.closest(".easyScanLayoutItemWrapper");
            //need to check if focus is inside layout item
            if (!jqItem.length) {
                return;
            }
            //we know that focus is inside item, so now we want to check if it is last focusable.
            var jqTabbables = jqItem.find(":sapTabbable");
            //need to filter elements which have `after` in id, becouse those are dummy focusable elements and they
            // prevent us from finding real last element
            jqTabbables = jqTabbables.filter(":not([id$=after])");
            //if currently focused element is itm's last one, then we place focus outside of layout
            if (jqTabbables.eq(jqTabbables.length - 1).is(jqFocusedElement)) {
                e.stopPropagation();
                e.stopImmediatePropagation();
                var beforeScrollLocation = this.jqElement.scrollTop();
                this._ignoreSelfFocus = true;
                this.jqElement.find(".after").focus();
                this.jqElement.scrollTop(beforeScrollLocation);
            }
        };

        KeyboardNavigation.prototype.f7Handler = function (e) {
            //If focus is on a Item, move focus to the control inside the Item. Default: first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the Item.
            var jqFocusedElement = jQuery(document.activeElement);
            if (jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                //focus on item we place on first element inside
                jqFocusedElement.find(":sapTabbable").first().focus();
            } else {
                //focus inside item, we put it on item itself
                jqFocusedElement.closest(".easyScanLayoutItemWrapper").focus();
            }
            e.preventDefault();
        };

        KeyboardNavigation.prototype.shiftTabButtonHandler = function (e) {
            //Backward navigation:
            //On enter first time, move focus to the last control of the first Item.
            //If focus is on a control inside a Item, move focus to the previous control in the tab chain inside the same Item.
            //If focus is on the first control inside a Item, move focus to the corresponding Item (as a whole).
            //If focus is on a Item, move focus to the previous control in the tab chain before the Item Container.
            var jqFocusedElement = jQuery(document.activeElement);
            if (!jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            //focus was on the Item, move focus to the previous control in the tab chain before the Item Container
            //we  put focus on layout itself, so browser will move it outside of layout
            this._ignoreSelfFocus = true;
            this.jqElement.find(".sapUshellEasyScanLayoutInner").focus();
        };

        KeyboardNavigation.prototype.arrowUpDownHandler = function (e, isArrowUp) {
            //UP - If focus is on a Item, move focus to the Item above. If focus is on the first Item of a column, do nothing.
            //DOWN - If focus is on a Item, move focus to the Item below. If focus is on the last Item of a column, do nothing.
            var fName = isArrowUp ? "prev" : "next";
            var jqFocused = jQuery(document.activeElement);
            var nextFocus = jQuery(jqFocused)[fName](".easyScanLayoutItemWrapper");
            if (!nextFocus.is(jqFocused)) {
                this._swapItemsFocus(e, jqFocused, nextFocus);
            }
        };

        KeyboardNavigation.prototype.arrowRightLeftHandler = function (e, isArrowRight) {
            //Left - If focus is on a Card, move focus one Card to the left.
            //      If focus is on the first Card of a row, move focus to the last Card of the previous row.
            //      If focus is on the first Card, do nothing.
            //Right - If focus is on a Card, move focus one Card to the right.
            //      If focus is on the last Card of a row, move focus to the first Card of the next row.
            //      If focus is on the last Card, do nothing.
            var indexDiff = isArrowRight ? 1 : -1;
            var jqFocused = jQuery(document.activeElement);
            var currentItemIndex = this._getLayoutItemIndex(jqFocused);
            if (currentItemIndex === false) {
                return;
            }
            var oItem = this.getVisibleLayoutItems()[currentItemIndex + indexDiff];
            if (oItem) {
                this._swapItemsFocus(e, jqFocused, oItem.$().parent());
            }
        };

        KeyboardNavigation.prototype.homeHandler = function (e) {
            //If focus is on a Card, move focus to the first Card of the same row.
            //If focus is on the first Card of a row, move focus to the first item within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if (indexDelta == 0) {
                //focus will be put to the first item in layout
                item = layoutItems[0];
            } else {
                //focus will be put to the first element in row
                item = layoutItems[focusedElementIndex - indexDelta];
            }

            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.endHandler = function (e) {
            //If focus is on a Card, move focus to the last Card of the same row.
            //If focus is on the last Card of a row, move focus to the last item within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if ((indexDelta == (colCount - 1)) ||
                ((focusedElementIndex + (colCount - indexDelta)) > layoutItems.length)) {
                //focus wil be put to last layout item
                item = layoutItems[(layoutItems.length - 1)];
            } else {
                //focus will be put to last item in row
                item = layoutItems[focusedElementIndex + (colCount - indexDelta - 1)];
            }
            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.ctrlHomeHandler = function (e) {
            //If focus is on a Card, move focus to the first Card of the same column.
            //If focus is on the first Card of a column, move focus to the first Card within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var visibleItems = this.getVisibleLayoutItems();
            var item = visibleItems[indexDelta];
            var nextFocus = item.$().parent();
            if (nextFocus.is(jqFocused)) {
                nextFocus = visibleItems[0].$().parent();
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.ctrlEndHandler = function (e) {
            //If focus is on a Card, move focus to the last Card of the same column.
            //If focus is on the last Card of a column, move focus to the last Card within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex < 0) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var visibleItems = this.getVisibleLayoutItems();
            for (var i = visibleItems.length - 1; i >= 0; i--) {
                if ((i % colCount) == indexDelta) {
                    item = visibleItems[i];
                    break;
                }
            }
            var nextFocus = item.$().parent();
            if (nextFocus.is(jqFocused)) {
                nextFocus = visibleItems[visibleItems.length - 1].$().parent();
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.altPageUpHandler = function (e) {
            //If focus is on a Card, move focus left by page size. Page size can be set by apps, default page size is 5 Cards.
            //If there are less Cards available than page size, move focus to the first Card of the row.
            //If focus is on the first Card of the row, do nothing.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (!focusedElementIndex) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item = this.getVisibleLayoutItems()[focusedElementIndex - indexDelta];
            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.altPageDownHandler = function (e) {
            //If focus is on a Card, move focus right by page size. Page size can be set by apps, default page size is 5 Cards.
            //If there are less Cards available than page size, move focus to the last Card of the row.
            //If focus is on the last Card of the row, do nothing.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex < 0) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if (indexDelta != (colCount - 1)) {
                item = layoutItems[focusedElementIndex + (colCount - indexDelta - 1)];
                if (!item) {
                    item = layoutItems[layoutItems.length - 1];
                }
                this._swapItemsFocus(e, jqFocused, item.$().parent());
            }
        };

        KeyboardNavigation.prototype.pageUpDownHandler = function (e, isPageUp) {
            //move focus Up/Down to the first not visible (outside of viewport).
            //if all items (on direction) are visible, then to first/last
            var fName = isPageUp ? "prev" : "next";

            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            if (!jqFocused[fName]().length) {
                return;
            }
            var nextFocusEl = false;
            var currentEl = jqFocused;
            var windowHeight = jQuery(window).height();
            var layoutTop = this.jqElement.offset().top;
            //find first "outside of viewport" item
            while (!nextFocusEl) {
                var next = currentEl[fName]();
                if (!next.length) {
                    nextFocusEl = currentEl;
                    break;
                }
                if (!isPageUp && next.offset().top > windowHeight) {
                    nextFocusEl = next;
                    break;
                }
                if (isPageUp && (next.offset().top + next.outerHeight()) <= layoutTop) {
                    nextFocusEl = next;
                    break;
                }
                currentEl = next;
            }
            this._swapItemsFocus(e, jqFocused, nextFocusEl);
        };

        KeyboardNavigation.prototype.ctrlArrowHandler = function (e) {
            //Check that we are not in Drag mode already
            //then we need to start the DragMode if it's possible
            if (this.swapSourceElement == null) {
                this.swapSourceElement = jQuery(document.activeElement);
                if (!this.swapSourceElement.hasClass("easyScanLayoutItemWrapper")) {
                    this.endSwap();
                } else {
                    this.jqElement.on('keyup.keyboardNavigation', this.keyupHandler.bind(this));
                    //change css of the current element
                    this.jqElement.addClass('dragAndDropMode');
                    this.swapSourceElement.addClass('dragHovered');
                }
            }
        };

        KeyboardNavigation.prototype.keyupHandler = function (e) {
            //This is the case when we finished our Drag and Drop actions, and we want to swap items
            if (this.swapSourceElement != null && e.keyCode === this.keyCodes.CONTROL) {
                var jqFocused = jQuery(document.activeElement);
                if (jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                    this.swapItemsFunction(this.swapSourceElement[0], jqFocused[0]);
                    this._changeItemsFocus(this.swapSourceElement);
                }
                this.endSwap();
            }
        };


        KeyboardNavigation.prototype.endSwap = function (e) {
            this.swapSourceElement.removeClass('dragHovered');
            this.jqElement.removeClass('dragAndDropMode');
            this.swapSourceElement = null;
            this.jqElement.off('keyup.keyboardNavigation');
        };

        KeyboardNavigation.prototype.checkIfSwapInterrupted = function (e) {
            //When Drag&Drop mode is enabled, any other button except arrowKey will stop Drag&Drop action
            if (this.swapSourceElement != null &&
                e.keyCode != this.keyCodes.ARROW_LEFT &&
                e.keyCode != this.keyCodes.ARROW_RIGHT &&
                e.keyCode != this.keyCodes.ARROW_UP &&
                e.keyCode != this.keyCodes.ARROW_DOWN) {
                this.endSwap();
            }
        };

        KeyboardNavigation.prototype.keydownHandler = function (e) {
            //in case swap was interrupted call end swap
            this.checkIfSwapInterrupted(e);

            switch (e.keyCode) {
                case this.keyCodes.TAB:
                    (e.shiftKey) ? this.shiftTabButtonHandler(e) : this.tabButtonHandler(e);
                    break;
                case this.keyCodes.F6:
                    if (e.shiftKey) {
                        this._ignoreSelfFocus = true;
                        this.jqElement.find(".sapUshellEasyScanLayoutInner").focus();
                        jQuery.sap.handleF6GroupNavigation(e);
                    } else {
                        this._ignoreSelfFocus = true;
                        var beforeScrollLocation = this.jqElement.scrollTop();
                        this.jqElement.find(".after").focus();
                        jQuery.sap.handleF6GroupNavigation(e);
                        this.jqElement.scrollTop(beforeScrollLocation);
                    }
                    break;
                case this.keyCodes.F7:
                    this.f7Handler(e);
                    break;
                case this.keyCodes.ARROW_UP:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowUpDownHandler(e, true);
                    break;
                case this.keyCodes.ARROW_DOWN:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowUpDownHandler(e, false);
                    break;
                case this.keyCodes.ARROW_RIGHT:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowRightLeftHandler(e, true);
                    break;
                case this.keyCodes.ARROW_LEFT:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowRightLeftHandler(e, false);
                    break;
                case this.keyCodes.HOME:
                    (e.ctrlKey == true) ? this.ctrlHomeHandler(e) : this.homeHandler(e);
                    break;
                case this.keyCodes.END:
                    (e.ctrlKey == true) ? this.ctrlEndHandler(e) : this.endHandler(e);
                    break;
                case this.keyCodes.PAGE_UP:
                    (e.altKey == true) ? this.altPageUpHandler(e) : this.pageUpDownHandler(e, true);
                    break;
                case this.keyCodes.PAGE_DOWN:
                    (e.altKey == true) ? this.altPageDownHandler(e) : this.pageUpDownHandler(e, false);
                    break;
            }
        };

        var EasyScanLayout = sap.ui.core.Control.extend("sap.ovp.ui.EasyScanLayout", {

            metadata: {
                library: "sap.ovp",
                aggregations: {
                    content: {type: "sap.ui.core.Control", multiple: true, singularName: "content"}
                },
                defaultAggregation: "content",
                events: {
                    afterRendering: {},
                    afterDragEnds: {}
                },
                properties: {
                    useMediaQueries: {group: "Misc", type: "boolean", defaultValue: false},
                    dragAndDropRootSelector: {group: "Misc", type: "string"},
                    dragAndDropEnabled: {group: "Misc", type: "boolean", defaultValue: true},
                    debounceTime: {group: "Misc", type: "sap.ui.core/int", defaultValue: 150}
                }
            },

            renderer: {
                render: function (oRm, oControl) {
                    oRm.write("<div");
                    oRm.writeControlData(oControl);
                    oRm.addClass("sapUshellEasyScanLayout");
                    oRm.writeClasses();
                    oRm.write(">");

                    oRm.write("<div class='sapUshellEasyScanLayoutInner' tabindex='0'>");

                    var columnCount = oControl.columnCount;
                    var columnList = Array.apply(null, new Array(columnCount)).map(function () {
                        return [];
                    });
                    var filteredItems = oControl.getContent().filter(function (item) {
                        return item.getVisible();
                    });
                    for (var i = 0; i < filteredItems.length; i++) {
                        columnList[i % columnCount].push(filteredItems[i]);
                    }
                    var itemCounter = 1;
                    columnList.forEach(function (column) {
                        oRm.write("<div");
                        oRm.addClass("easyScanLayoutColumn");
                        oRm.writeAccessibilityState(undefined, {role: "list"});
                        oRm.writeClasses();
                        oRm.write(">");
                        column.forEach(function (item, index) {
                            oRm.write("<div ");
                            (itemCounter === 1) ? oRm.write("tabindex='0' ") : oRm.write("tabindex='-1' ");
                            oRm.addClass("easyScanLayoutItemWrapper");
                            oRm.writeAccessibilityState(undefined, {role: "listitem"});
                            oRm.write("aria-setsize=" + filteredItems.length + " aria-posinset=" + itemCounter);
                            itemCounter++;
                            oRm.writeClasses();
                            oRm.write(">");
                            oRm.renderControl(item);
                            oRm.write("</div>");
                        });
                        oRm.write("</div>");
                    });

                    oRm.write("</div>");
                    // dummy after focusable area
                    oRm.write("<div class='after' tabindex='0'></div>");
                    oRm.write("</div>");
                }
            }

        });

        var getColumnResolutionList = function () {
            return [
                {minWidth: 0, styleClass: "columns-blank", columnCount: 1},
                {minWidth: 240, styleClass: "columns-block", columnCount: 1},
                {minWidth: 352, styleClass: "columns-narrow", columnCount: 1},
                {minWidth: 433, styleClass: "columns-wide", columnCount: 1},
                {minWidth: 704, styleClass: "columns-narrow", columnCount: 2},
                {minWidth: 864, styleClass: "columns-wide", columnCount: 2},
                {minWidth: 1024, styleClass: "columns-narrow", columnCount: 3},
                {minWidth: 1280, styleClass: "columns-wide", columnCount: 3},
                {minWidth: 1440, styleClass: "columns-narrow", columnCount: 4},
                {minWidth: 1920, styleClass: "columns-wide", columnCount: 4},
                {minWidth: 2560, styleClass: "columns-narrow", columnCount: 5},
                {minWidth: 3008, styleClass: "columns-wide", columnCount: 5},

                //This is for 8K and 4K Screens (on 3600px flp make 1rem - 32px)
                {minWidth: 3600, styleClass: "columns-narrow", columnCount: 4},
                {minWidth: 3840, styleClass: "columns-wide", columnCount: 4},
                {minWidth: 5120, styleClass: "columns-wide", columnCount: 5},
                {minWidth: 6016, styleClass: "columns-wide", columnCount: 5}
            ];
        };

        EasyScanLayout.prototype.init = function () {
            this.data("sap-ui-fastnavgroup", "true", true);
            this.columnResolutionList = getColumnResolutionList();
            this.columnCount = this.columnResolutionList[0].columnCount;
            this.columnStyle = "";
            this.updateColumnClass(this.columnResolutionList[0].styleClass);
            var matchMediaSupported = sap.ui.Device.browser.msie && sap.ui.Device.browser.version > 9;
            if (matchMediaSupported && this.getUseMediaQueries()) { //if matchMedia supported and full page --> use media queries
                this.mediaQueryList = this.initMediaListeners(this.columnResolutionList);
            } else { //if not full page --> use resize handler
                this.resizeHandlerId = this.initResizeHandler(this.columnResolutionList);
            }
        };

        var mediaListenerHandlerTimerId;

        var mediaListenersDebounce = function (columnCount, columnStyle, mq) {
            var mediaListenerHandler = function (cols, className) {
                this.updateColumnClass(className);
                this.refreshColumnCount(cols, this.getContent());
            };
            if (mq.matches) {
                window.clearTimeout(mediaListenerHandlerTimerId);
                mediaListenerHandlerTimerId = window.setTimeout(mediaListenerHandler.bind(this, columnCount, columnStyle), this.getDebounceTime());
            }
        };

        var buildQuery = function (bottomRes, topRes) {
            var min = bottomRes.minWidth;
            var max = topRes && topRes.minWidth;
            return "(min-width: " + min + "px)" + (max ? " and (max-width: " + (max - 1) + "px)" : "");
        };

        EasyScanLayout.prototype.initMediaListeners = function (colResList) {
            var mediaQueryList = [];
            for (var i = 0; i < colResList.length; i++) {
                var query = buildQuery(colResList[i], colResList[i + 1]);
                var mediaQuery = window.matchMedia(query);
                var boundedListener = mediaListenersDebounce.bind(this, colResList[i].columnCount, colResList[i].styleClass);
                mediaQuery.addListener(boundedListener);
                mediaQuery.bindedListener = boundedListener;
                boundedListener(mediaQuery);
                mediaQueryList.push(mediaQuery);
            }
            return mediaQueryList;
        };

        EasyScanLayout.prototype.initResizeHandler = function (colResList) {
            var resizeHandlerTimerId;
            var debounceTime = this.getDebounceTime();
            var resizeHandlerDebounce = function () {
                window.clearTimeout(resizeHandlerTimerId);
                resizeHandlerTimerId = window.setTimeout(this.oControl.resizeHandler.bind(this, colResList), debounceTime);
            };

            return sap.ui.core.ResizeHandler.register(this, resizeHandlerDebounce);
        };

        EasyScanLayout.prototype.resizeHandler = function (colResList) {
            var width = this.iWidth;
            var oControl = this.oControl;
            var resObject;
            for (var i = 0; i < colResList.length; i++) {
                if (!colResList[i + 1]) {
                    resObject = colResList[i];
                    break;
                }
                if (colResList[i].minWidth <= width && colResList[i + 1].minWidth > width) {
                    resObject = colResList[i];
                    break;
                }
            }

            oControl.refreshColumnCount(resObject.columnCount, oControl.getContent());
            oControl.updateColumnClass(resObject.styleClass);
        };

        EasyScanLayout.prototype.refreshColumnCount = function (columnCount, content) {
            this.columnCount = columnCount;
            var jqColumnsNew = jQuery();
            for (var i = 0; i < columnCount; i++) {
                jqColumnsNew = jqColumnsNew.add("<div class='easyScanLayoutColumn' role = 'list'/>");
            }
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            for (var j = 0; j < filteredItems.length; j++) {
                jqColumnsNew.get(j % columnCount).appendChild(filteredItems[j].getDomRef().parentNode);
            }

            this.$().children(".sapUshellEasyScanLayoutInner").empty().append(jqColumnsNew);

        };

        EasyScanLayout.prototype.getColumnCount = function () {
            return this.columnCount;
        };

        EasyScanLayout.prototype.getVisibleLayoutItems = function () {
            //layout items could be hidden, so we filter them and receive only visible
            var content = this.getContent();
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            return filteredItems;
        };

        EasyScanLayout.prototype.updateColumnClass = function (columnClass) {
            if (this.columnStyle === columnClass) {
                return;
            }
            this.removeStyleClass(this.columnStyle);
            this.addStyleClass(columnClass);
            this.columnStyle = columnClass;
        };


        EasyScanLayout.prototype.afterDragAndDropHandler = function (aElements) {
            var aAllControls = this.removeAllAggregation("content", true);
            var aVisibleControls = [];
            var iVizibleIndex = 0;
            //receive contols list from wrapperDOM list
            aElements.forEach(function (el) {
                var elementId = el.children[0].getAttribute("id");
                var oControl = sap.ui.getCore().byId(elementId);
                aVisibleControls.push(oControl);
            });

            // We need to keep all controls in the content aggregation, keep
            // the original order and change the order only for the visible controls
            for (var i = 0; i < aAllControls.length; i++){
                if (aAllControls[i].getVisible()){
                    this.addAggregation("content", aVisibleControls[iVizibleIndex], true);
                    iVizibleIndex++;
                } else {
                    this.addAggregation("content", aAllControls[i], true);
                }

            }

            this.fireAfterDragEnds();
            this.refreshColumnCount(this.getColumnCount(), this.getContent());
        };


        EasyScanLayout.prototype.onAfterRendering = function () {
            if (!this.getDragAndDropRootSelector()) {
                this.setDragAndDropRootSelector("#" + this.getId());
            }
            if (this.layoutDragAndDrop) {
                this.layoutDragAndDrop.destroy();
            }
            if (this.getDragAndDropEnabled()) {
                this.layoutDragAndDrop = DragAndDropFactory.buildReplaceItemsInstance({
                    afterReplaceElements: this.afterDragAndDropHandler.bind(this),
                    rootSelector: this.getDragAndDropRootSelector(),
                    layout: this
                });
            }
            if (this.keyboardNavigation) {
                this.keyboardNavigation.destroy();
            }
            var swapItemsFunc = this.layoutDragAndDrop ? this.layoutDragAndDrop.getSwapItemsFunction() : null;
            this.keyboardNavigation = new KeyboardNavigation(this, swapItemsFunc);
            this.fireAfterRendering();
        };

        EasyScanLayout.prototype.exit = function () {
            if (this.mediaQueryList) {
                this.mediaQueryList.forEach(function (mediaQuery) {
                    mediaQuery.removeListener(mediaQuery.bindedListener);
                });
                delete this.mediaQueryList;
            }
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
            }
            if (this.layoutDragAndDrop) {
                this.layoutDragAndDrop.destroy();
                delete this.layoutDragAndDrop;
            }
        };

        return EasyScanLayout;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/EasyScanLayout.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStream') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.declare('sap.ovp.ui.ObjectStream'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStream",['jquery.sap.global'],
    function(jQuery) {
        "use strict";

        var KeyboardNavigation = function (objectStream) {
            this.init(objectStream);
        };

        KeyboardNavigation.prototype.init = function(objectStream) {
            this.objectStream = objectStream;
            this.keyCodes = jQuery.sap.KeyCodes;
            this.jqElement = objectStream.$();
            this.jqElement.on('keydown.keyboardNavigation', this.keydownHandler.bind(this));
            this.jqElement.on("focus.keyboardNavigation",".sapOvpObjectStreamItem", this.ObjectStreamFocusAccessabilityHandler.bind(this));
        };

        KeyboardNavigation.prototype.destroy = function () {
            if (this.jqElement) {
                this.jqElement.off(".keyboardNavigation");
            }
            delete this.jqElement;
            delete this.objectStream;
        };

        KeyboardNavigation.prototype._swapItemsFocus = function (e, jqItemFrom, jqItemTo) {
            //to preserve last focusable item, first item received tabindex=-1, second tabindex=-1.
            e.preventDefault();
            jqItemFrom.attr("tabindex", "-1");
            jqItemTo.attr("tabindex", "0").focus();
        };

        //Handle focus on object stream item
        KeyboardNavigation.prototype.ObjectStreamFocusAccessabilityHandler = function () {
            var focusedDomElement = document.activeElement;
            focusedDomElement = jQuery(focusedDomElement);
            //Check that we got a focused item, after that will add to aria-labelledby every id
            // of items inside the object stream item that have role=heading and aria-label
            if (focusedDomElement){
                // get all elements inside that have aria-label
                var labelledElement = focusedDomElement.find("[aria-label]");
                var i, strIdList = "";
                // add every item that also have role heading to id list string
                for (i = 0; i < labelledElement.length; i++ ){
                    if (labelledElement[i].getAttribute("role") == "heading"){
                        strIdList += labelledElement[i].id + " ";
                    }
                }
                //add the object stream item the aria-labelledby attribute with list of relevants IDs
                if (strIdList.length) {
                    focusedDomElement.attr("aria-labelledby", strIdList);
                }
            }
        };

        KeyboardNavigation.prototype.tabButtonHandler = function (e) {
            //Forward navigation:
            //On enter first time, move focus to the first Item (as a whole).
            //If focus is on a Item, move focus to the first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the next control in the tab chain inside the same Item.
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Object Stream, usually it's Close button
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return;
            }
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                //focus on the close button, move focus to last focused item.
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamItem:sapTabbable").focus();
                return;
            }
            var jqCard = jqFocused.closest(".sapOvpObjectStreamItem");
            if (!jqCard.length) {
                return;
            }
            var jqTabbables = jqCard.find(":sapTabbable");
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Object Stream, usually it's Close button
            if (jqTabbables.eq(jqTabbables.length - 1).is(jqFocused)) {
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamClose").focus();
            }
        };

        KeyboardNavigation.prototype.shiftTabButtonHandler = function (e) {
            //Backward navigation:
            //On enter first time, move focus to the last control of the first Card.
            //On enter any consecutive time, move focus to the last control of the Card which had the focus before.
            //If focus is on a control inside a Card, move focus to the previous control in the tab chain inside the same Card. usually it's Close button
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamClose").focus();
            }
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamItem:sapTabbable *:sapTabbable").last().focus();
                return;
            }
        };


        KeyboardNavigation.prototype.enterHandler = function (e) {
            var jqFocused = jQuery(document.activeElement);
            //if Space/Enter was on Close button, close dialog
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                e.preventDefault();
                this.objectStream.getParent().close();
                return;
            }

            //if Space/Enter was last item (it is a Placeholder), trigger click
            if (jqFocused.hasClass("sapOvpObjectStreamItem") && !jqFocused.next().length) {
                jqFocused.children().click();
                return;
            }
        };

        KeyboardNavigation.prototype.f6Handler = function (e) {
            //No matter where the focus resides inside the Object Stream, move it to the first element in the tab chain of the next F6-group. (It's Close button)
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                this.jqElement.find('.sapOvpObjectStreamItem').attr("tabindex", "-1").first().attr("tabindex", "0").focus();
            } else {
                this.jqElement.find('.sapOvpObjectStreamClose').focus();
            }
        };

        KeyboardNavigation.prototype.f7Handler = function (e) {
            //If focus is on a Card, move focus to the control inside the Default: first control in the tab chain inside the Card.
            //If focus is on a control inside a Card, move focus to the Card.
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                jqFocused.find(':sapTabbable').first().focus();
            } else {
                jqFocused.closest('.sapOvpObjectStreamItem').focus();
            }
            e.preventDefault();
        };

        KeyboardNavigation.prototype.leftRightHandler = function (e, isRight) {
            //Left - If focus is on a Card, move focus to the previous Card. If focus is on the first Card, do nothing.
            //Right - If focus is on a Card, move focus to the next Card. If focus is on the last Card, do nothing.

                var fName = isRight ? "next" : "prev";
            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return false;
            }
            var nextFocus = jqFocused[fName]();
            if (!nextFocus.length) {
                return;
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.homeEndHandler = function (e, isHome) {
            //Home - If focus is on a Card, move focus to the first Card.
            //End - If focus is on a Card, move focus to the last Card. This is usually the Placeholder Card.
            var fName = isHome ? "first" : "last";
            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return false;
            }
            e.preventDefault();
            var nextFocus = this.jqElement.find(".sapOvpObjectStreamItem")[fName]();
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.pageUpDownHandler = function (e, isPageUp) {
            //move focus Left/Right to the first not visible (outside of viewport) item.
            //if all items (on direction) are visible, then to first/last
            var fName = isPageUp ? "prev" : "next";

            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return;
            }
            if (!jqFocused[fName]().length) {
                return;
            }
            var nextFocusEl = false;
            var currentEl = jqFocused;
            var windowWidth = jQuery(window).width();

            while (!nextFocusEl) {
                var next = currentEl[fName]();
                if (!next.length) {
                    nextFocusEl = currentEl;
                    break;
                }
                if (!isPageUp && next.offset().left > windowWidth) {
                    nextFocusEl = next;
                    break;
                }
                if (isPageUp && (next.offset().left + next.outerHeight()) <= 0) {
                    nextFocusEl = next;
                    break;
                }
                currentEl = next;
            }
            this._swapItemsFocus(e, jqFocused, nextFocusEl);
        };

        KeyboardNavigation.prototype.keydownHandler = function(e) {
            switch (e.keyCode) {
                case this.keyCodes.TAB:
                    (e.shiftKey) ? this.shiftTabButtonHandler(e) : this.tabButtonHandler(e);
                    break;
                case this.keyCodes.ENTER:
                case this.keyCodes.SPACE:
                    this.enterHandler(e);
                    break;
                case this.keyCodes.F6:
                    this.f6Handler(e);
                    break;
                case this.keyCodes.F7:
                    this.f7Handler(e);
                    break;
                case this.keyCodes.ARROW_UP:
                case this.keyCodes.ARROW_LEFT:
                    this.leftRightHandler(e, false);
                    break;
                case this.keyCodes.ARROW_DOWN:
                case this.keyCodes.ARROW_RIGHT:
                    this.leftRightHandler(e, true);
                    break;
                case this.keyCodes.HOME:
                    this.homeEndHandler(e, true);
                    break;
                case this.keyCodes.END:
                    this.homeEndHandler(e, false);
                    break;
                case this.keyCodes.PAGE_UP:
                    this.pageUpDownHandler(e, true);
                    break;
                case this.keyCodes.PAGE_DOWN:
                    this.pageUpDownHandler(e, false);
                    break;
            }
        };


        var ObjectStream = sap.ui.core.Control.extend("sap.ovp.ui.ObjectStream", { metadata : {
            library : "sap.ovp",
            properties : {
                title: {type : "string", defaultValue: ""}
            },
            aggregations : {
                content: {type: "sap.ui.core.Control", multiple: true},
                placeHolder: {type: "sap.ui.core.Control", multiple: false}
            }
        }});


        ObjectStream.prototype.init = function() {
            var that = this;
            this._closeIcon = new sap.ui.core.Icon({
                src: "sap-icon://decline",
                tooltip: "close"
            });
            this._closeIcon.addEventDelegate({
                onclick: function () {
                    that.getParent().close();
                }
            });
        };

        ObjectStream.prototype._startScroll = function(direction) {
            this._direction = direction;
            var scrollDiff = this.wrapper.scrollWidth - this.wrapper.offsetWidth - Math.abs(this.wrapper.scrollLeft);
            var leftToScroll;
            if (direction == "left" ) {
                leftToScroll = (this.rtl && !this.scrollReverse) ? scrollDiff :  this.wrapper.scrollLeft;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqRightEdge.css("opacity", 1);
            } else {
                leftToScroll = (this.rtl && !this.scrollReverse) ? Math.abs(this.wrapper.scrollLeft) : scrollDiff;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqLeftEdge.css("opacity", 1);
            }
            var scrollTime = leftToScroll * 3;
            var translateX = (direction == "left") ? leftToScroll : ~leftToScroll + 1;
            jQuery(this.container).one("transitionend", function () {
                this._mouseLeave({data: this});
            }.bind(this));
            this.container.style.transition = 'transform ' + scrollTime + 'ms linear';
            this.container.style.transform = 'translate(' + translateX + 'px, 0px) scale(1) translateZ(0px) ';
        };

        ObjectStream.prototype._mouseLeave = function (e) {
            var containerTransform = window.getComputedStyle(e.data.container).transform;
            e.data.container.style.transform = containerTransform;
            e.data.container.style.transition = '';

            var transformX;
            var transformParamsArr = containerTransform.split(",");
            if (containerTransform.substr(0, 8) == "matrix3d") {
                transformX = parseInt(transformParamsArr[12], 10);
            } else if (containerTransform.substr(0, 6) == "matrix") {
                transformX = parseInt(transformParamsArr[4], 10);
            }
            if (isNaN(transformX)) {
                return;
            }
            e.data.container.style.transform = "none";
            e.data.wrapper.scrollLeft += ~transformX + (e.data._direction == "left" ? -5 : 5);
            e.data._checkEdgesVisibility();
        };

        var scrollHandlerTimerId;
        ObjectStream.prototype.debounceScrollHandler = function () {
            window.clearTimeout(scrollHandlerTimerId);
            scrollHandlerTimerId = window.setTimeout(this._checkEdgesVisibility.bind(this), 150);
        };

        ObjectStream.prototype._initScrollVariables = function () {
            var jqObjectStream = this.$();
            this.container =  jqObjectStream.find(".sapOvpObjectStreamScroll").get(0);
            this.rtl = sap.ui.getCore().getConfiguration().getRTL();
            this.wrapper = jqObjectStream.find(".sapOvpObjectStreamCont").get(0);
            this.scrollReverse = this.scrollReverse || this.wrapper.scrollLeft > 0;
            this.shouldShowScrollButton = (!sap.ui.Device.system.phone && !sap.ui.Device.system.tablet) || sap.ui.Device.system.combi; //should be shown only in desktop (and combi)
            this.jqRightEdge = jqObjectStream.find(".sapOvpOSEdgeRight");
            this.jqLeftEdge = jqObjectStream.find(".sapOvpOSEdgeLeft");
            if (this.shouldShowScrollButton) {
                this.jqRightEdge.add(this.jqLeftEdge).on("mouseenter.objectStream", this, this._mouseEnter).
                    on("mouseleave.objectStream", this, this._mouseLeave);
                jQuery(this.wrapper).on("scroll.objectStream", this.debounceScrollHandler.bind(this));
            }else {
                this.jqLeftEdge.css("display", "none");
                this.jqRightEdge.css("display", "none");
            }

            this._checkEdgesVisibility();
        };

        ObjectStream.prototype._afterOpen = function () {
            if (sap.ui.Device.os.ios && this.$().length) {
                //prevent sap.m.Dialog from stop scroll by cancelling "touchmove" on iOS
                this.$().on("touchmove.scrollFix", function (e) {e.stopPropagation(); });
            }
            this.$().find('.sapOvpObjectStreamItem').first().focus();
            if (this.keyboardNavigation) {
                this.keyboardNavigation.destroy();
            }
            this.keyboardNavigation = new KeyboardNavigation(this);
            this._initScrollVariables();
            this.jqBackground = jQuery("<div id='objectStreamBackgroundId' class='objectStreamNoBackground'></div>");
            jQuery.sap.byId("sap-ui-static").prepend(this.jqBackground);
            this.jqBackground.on('click.closePopup', function () {
                this._oPopup.close();
            }.bind(this));
            jQuery(".sapUshellEasyScanLayout").addClass("bluredLayout");
        };

        ObjectStream.prototype._beforeClose = function () {
            if (sap.ui.Device.os.ios && this.$().length) {
                this.$().off(".scrollFix");
            }
            this.keyboardNavigation.destroy();
            this.jqBackground.remove();
            this.jqLeftEdge.add(this.jqRightEdge).add(this.wrapper).off(".objectStream");
            jQuery(".sapUshellEasyScanLayout").removeClass("bluredLayout");
        };

        ObjectStream.prototype._mouseEnter = function (evt) {
            var scrollDirection = 'right';
            if ((evt.target == evt.data.jqRightEdge.get(0)) ||
                (evt.currentTarget == evt.data.jqRightEdge.get(0))){
                scrollDirection = sap.ui.getCore().getConfiguration().getRTL() ? 'left' : 'right';
            }
            if ((evt.target == evt.data.jqLeftEdge.get(0)) ||
                (evt.currentTarget == evt.data.jqLeftEdge.get(0))){
                scrollDirection = sap.ui.getCore().getConfiguration().getRTL() ? 'right' : 'left';
            }
            evt.data._startScroll(scrollDirection);
        };

        ObjectStream.prototype._checkEdgesVisibility = function () {
            var scrollPosition = this.wrapper.scrollLeft;
            var leftToScroll = this.wrapper.scrollWidth - this.wrapper.offsetWidth - this.wrapper.scrollLeft;
            var leftEdgeOpacity = (scrollPosition == 0) ? 0 : 1;
            var rightEdgeOpacity = (leftToScroll == 0) ? 0 : 1;
            if (sap.ui.getCore().getConfiguration().getRTL() && this.scrollReverse) {
                this.jqLeftEdge.css("opacity", rightEdgeOpacity);
                this.jqRightEdge.css("opacity", leftEdgeOpacity);
            } else {
                this.jqLeftEdge.css("opacity", leftEdgeOpacity);
                this.jqRightEdge.css("opacity", rightEdgeOpacity);
            }
        };

        ObjectStream.prototype._createPopup = function () {
            this._oPopup = new sap.m.Dialog({
                showHeader: false,
                afterOpen: this._afterOpen.bind(this),
                beforeClose: this._beforeClose.bind(this),
                content: [this],
                stretch: sap.ui.Device.system.phone
            }).removeStyleClass("sapUiPopupWithPadding").addStyleClass("sapOvpStackedCardPopup");
            this._oPopup.oPopup.setModal(false);
        };

        ObjectStream.prototype.open = function (cardWidth) {
            if (!this._oPopup) {
                this._createPopup();
            }
            //save card width for after rendering
            this._cardWidth = cardWidth;

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);

            this._oPopup.open();
        };

        ObjectStream.prototype.onBeforeRendering = function() {
        };

        ObjectStream.prototype.onAfterRendering = function() {

            if (!this._oPopup || !this._oPopup.isOpen() || !this.getContent().length ) {
                return;
            }

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);
            setTimeout(function () {
                this._initScrollVariables();
            }.bind(this));
        };


        ObjectStream.prototype.exit = function() {
            if (this._oPopup){
                this._oPopup.destroy();
            }
            this._closeIcon.destroy();
            if (this._oScroller) {
                this._oScroller.destroy();
                this._oScroller = null;
            }
        };

        ObjectStream.prototype.setCardsSize = function(cardWidth) {
            var remSize = parseInt(window.getComputedStyle(document.documentElement).fontSize, 10);
            var cardHeight = sap.ui.Device.system.phone ? document.body.clientHeight / remSize - 4.5 : 28.75;
            var cardList = this.getContent();
            cardList.map(function (oCard) {
                oCard.setWidth(cardWidth + "px");
                oCard.setHeight(cardHeight + "rem");
            });

            var oPlaceHolder = this.getPlaceHolder();
            if (oPlaceHolder) {
                oPlaceHolder.setWidth(cardWidth + "px");
                oPlaceHolder.setHeight(cardHeight + "rem");
            }
        };

        ObjectStream.prototype.updateContent = function(reason){
            /* We are updaing the content only data was change and not by refresh
             * This is done due to the fact that UI5 is calling the updateContent
             * twice, one with reason = 'refresh' with no data in the model and second
             * with reason = 'change' with the data.
             * In order to be able to have rendering optimization we are updating only when
             * we have the data in the model and therefore we can reuse most of the items
             * Ticket was open on this # 1570807520
             */
            // in any case we need to call the oBinding.getContexts().
            // it seams that this will trigger the second call with the change reason
            var oBindingInfo = this.mBindingInfos["content"],
                oBinding = oBindingInfo.binding,
                aBindingContexts = oBinding.getContexts(oBindingInfo.startIndex, oBindingInfo.length);
            if (reason === "change"){
                var fnFactory = oBindingInfo.factory,
                    i = 0,
                    aItems = this.getContent(),
                    addNewItem = jQuery.proxy(function (oContext) {
                        var sId = this.getId() + "-" + jQuery.sap.uid(),
                            oClone = fnFactory(sId, oContext);
                        oClone.setBindingContext(oContext, oBindingInfo.model);
                        this.addContent(oClone);
                    }, this);


                // Bind as many context as possible to existing elements. Create new ones if necessary.
                for (i = 0; i < aBindingContexts.length; ++i) {
                    if (i < aItems.length) {
                        aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                    } else {
                        addNewItem(aBindingContexts[i]);
                    }
                }

                if (aItems.length > aBindingContexts.length){
                    // Delete unused elements.
                    for (; i < aItems.length; ++i) {
                        aItems[i].destroy();
                    }
                    // Update the array length.
                    aItems.length = aBindingContexts.length;
                }
            }
        };

        return ObjectStream;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStream.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStreamRenderer') ) {
jQuery.sap.declare('sap.ovp.ui.ObjectStreamRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStreamRenderer",['jquery.sap.global'],

    function(jQuery) {
        "use strict";

        /**
         * Button renderer.
         * @namespace
         */
        var ObjectStreamRenderer = {
        };

        /**
         * Renders the HTML for the given control, using the provided
         * {@link sap.ui.core.RenderManager}.
         *
         * @param {sap.ui.core.RenderManager} oRm
         *            the RenderManager that can be used for writing to
         *            the Render-Output-Buffer
         * @param {sap.ui.core.Control} oButton
         *            the button to be rendered
         */
        ObjectStreamRenderer.render = function(oRm, oControl) {

            if (!oControl.getVisible()) {
                return;
            }

            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.writeAccessibilityState(undefined, {role: "dialog"});
            oRm.writeAccessibilityState(oControl, {label: oControl.getTitle()});
            oRm.addClass("sapOvpObjectStream");
            oRm.writeClasses();
            oRm.write(">");

            /*header*/
            oRm.write("<div");
            oRm.addClass("sapOvpObjectStreamHeader");
            oRm.writeAccessibilityState(undefined, {role: "heading"});
            oRm.writeClasses();
            oRm.write(">" + oControl.getTitle() + "</div>");
            oRm.write('<div tabindex="0" ');
            oRm.addClass("sapOvpObjectStreamClose");
            oRm.writeAccessibilityState(undefined, {role: "button"});
            oRm.writeAccessibilityState(oControl, {label: "close"});
            oRm.writeClasses();
            oRm.write(">");
            oRm.renderControl(oControl._closeIcon);
            oRm.write("</div>");
            /*header*/

            oRm.write('<div id="' + oControl.getId() + '-cont" class="sapOvpObjectStreamCont"');
            oRm.write(">");
            oRm.write('<div id="' + oControl.getId() + '-scroll"');
            oRm.writeAccessibilityState(undefined, {role: "list"});
            oRm.addClass("sapOvpObjectStreamScroll");

            oRm.writeClasses();
            oRm.write(">");


            var aContent = oControl.getContent();

            aContent.forEach(function(control, i) {
                oRm.write("<div class='sapOvpObjectStreamItem' ");
                if (i == 0) {
                    oRm.write("tabindex='0' ");
                } else {
                    oRm.write("tabindex='-1' ");
                }
                oRm.writeAccessibilityState(undefined, {role: "listitem"});
                oRm.write("aria-setsize = " + (aContent.length + 1) + " aria-posinset = " + (i + 1));
                oRm.write(">");
                oRm.renderControl(control);
                oRm.write("</div>");
            });

            var placeHolder = oControl.getPlaceHolder();
            if (placeHolder){
                oRm.write("<div class='sapOvpObjectStreamItem' ");
                if (!aContent.length) {
                    oRm.write("tabindex='0'");
                } else {
                    oRm.write("tabindex='-1'");
                }
                oRm.writeAccessibilityState(undefined, {role: "listitem"});
                oRm.write("aria-setsize = " + (aContent.length + 1) + " aria-posinset = " + (aContent.length + 1));
                oRm.write(">");
                oRm.renderControl(placeHolder);
                oRm.write("</div>");
            }

            oRm.write("</div>"); // scroll

            oRm.write('<div id="' + oControl.getId() + '-leftedge" class="sapOvpOSEdgeLeft">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-left", useIconTooltip:false}));
            oRm.write('</div>');
            oRm.write('<div id="' + oControl.getId() + '-rightedge" class="sapOvpOSEdgeRight">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-right", useIconTooltip:false}));
            oRm.write('</div>');

            oRm.write("</div>"); // cont
            oRm.write("</div>"); // root

        };

        ObjectStreamRenderer.renderFooterContent = function(oRm, oControl) {

            // overrides this function
        };

        return ObjectStreamRenderer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStreamRenderer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.SmartphoneHeaderToggle') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.ui.SmartphoneHeaderToggle");

    sap.ovp.ui.SmartphoneHeaderToggle = {
        threshold : 10,
        headerVisible : true,
        startY : undefined,
        app : undefined,
        jqView : undefined,

        startHandler : function(e) {
            if (this.app.getGlobalFilter() && this.app.getGlobalFilter().hasOwnProperty("getVisible") && this.app.getGlobalFilter().getVisible()) {
                return;
            }
            this.startY = e.touches[0].pageY;
        },

        resizeHandler : function() {
            if (!this.headerVisible) {
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        animateHeader : function(setVisible) {
            var jqHeaderVbox = this.jqView.find('.ovpApplication > .sapUiFixFlexFixed > .sapMVBox');
            var jqFlexContainerParent = this.jqView.find('.ovpApplication > .sapUiFixFlexFlexible');
            var jqFlexContainer = jqFlexContainerParent.children();
            var translate;

            if (setVisible) {
                translate = "translateY(0px)";
                jqHeaderVbox.add(jqFlexContainerParent).css({"transform": translate, "-webkit-transform": translate});
                jqFlexContainerParent.one('transitionend', function(e) {
                    if (this.headerVisible) {
                        jqFlexContainer.css({bottom: "0px"});
                    }
                }.bind(this));
            } else {
                var headerHeight = this.view.byId('ovpPageHeader').$().height();
                jqFlexContainer.css({bottom: "-" + headerHeight + "px"});
                translate = "translateY(-" + headerHeight + "px)";
                jqFlexContainerParent.add(jqHeaderVbox).css({"transform": translate, "-webkit-transform": translate});
            }
        },

        moveHandler : function(e) {
            var moveY = e.touches[0].pageY;
            if (typeof this.startY === "undefined") {
                if (this.app.getGlobalFilter() && this.app.getGlobalFilter().hasOwnProperty("getVisible") && this.app.getGlobalFilter().getVisible()) {
                    return;
                }
                this.startY = moveY;
            }
            if (Math.abs(this.startY - moveY) < this.threshold) {
                return;
            }
            if (this.startY > moveY && this.headerVisible) {
                this.headerVisible = false;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
            if (this.startY < moveY && !this.headerVisible) {
                this.headerVisible = true;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        endHandler : function() {
            this.startY = undefined;
            return;
        },

        enable : function(app) {
            this.app = app;
            this.view = this.app.getView();
            this.jqView = this.view.$();

            this.jqView.on('touchstart.headerHiding', this.startHandler.bind(this));
            this.jqView.on('touchmove.headerHiding', this.moveHandler.bind(this));
            this.jqView.on('touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding', this.endHandler.bind(this));
            jQuery(window).on("resize.headerHiding", this.resizeHandler.bind(this));
        },

        disable : function() {
            this.jqView.off('touchstart.headerHiding touchmove.headerHiding touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding');
            jQuery(window).off("resize.headerHiding");
        }
    };

}());
}; // end of sap/ovp/ui/SmartphoneHeaderToggle.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.UIActions') ) {
/*global jQuery, sap, clearTimeout, console, window */
(function() {
	"use strict";

	jQuery.sap.declare("sap.ovp.ui.UIActions");

	sap.ovp.ui.UIActions = function(cfg) {

		if (!cfg || !cfg.rootSelector || !cfg.containerSelector || !cfg.draggableSelector) {
			throw new Error("No configuration object to initialize User Interaction module.");
		}

		/* PRIVATE MEMBERS */
		this.captureStart = null; // {Function} capture start event X and Y position
		this.captureMove = null; // {Function} capture move event X and Y position
		this.captureEnd = null; // {Function} capture end event X and Y position
		this.clickCallback = null; // {Function} Callback function execute after capture `click` event
		this.clickEvent = null; // {String} `click` event
		this.clickHandler = null; // {Function} capture click event and prevent the default behaviour on IOS
		this.clone = null; // {Element} cloned draggable element
		this.cloneClass = null; // {String} clone CSS Class
		this.container = null; // {Element} content container to be scrolled
		this.contextMenuEvent = null; // {String} `contextmenu` event for Windows 8 Chrome
		this.debug = false; // {Boolean} for debug mode
		this.dragMoveCallback = null; // {Function} Callback function executes while drag mode is active
		this.dragAndScrollDuration = null; // {Number} Scroll timer duration in ms
		this.dragAndScrollTimer = null; // {Number} timer ID. Used in drag & scroll animation
		this.draggable = null; // {Array<Element>|NodeList<Element>} list of draggable elements
		this.placeHolderClass = null; // {String} placeholder CSS Class
		this.draggableSelector = null; // {String} CSS Selector String which specifies the draggable elements
		this.doubleTapCallback = null; // {Function} Callback function execute when double tap
		this.doubleTapDelay = null; // {Number} number of milliseconds to recognize double tap
		this.element = null; // {Element} draggable element
		this.swapTargetElement = null; // {Element} draggable element to swap the current element with
		this.endX = null; // {Number} X coordinate of end event
		this.endY = null; // {Number} Y coordinate of end event
		this.isTouch = null; // {Boolean} does browser supports touch events
		this.lastElement = null; // {Element} last tapped element
		this.lastTapTime = null; // {Number} number of milliseconds elapsed since last touchstart or mousedown
		this.lockMode = null; // {Boolean} if the value is true, preventing change element mode
		this.log = null; // {Function} logs to console in debug mode
		this.mode = null; // {String} current feature mode `normal`, `scroll`, `drag`, `move`
		this.mouseDownEvent = null; // {String} 'mousedown'
		this.mouseMoveEvent = null; // {String} 'mousemove'
		this.mouseUpEvent = null; // {String} 'mouseup'
		this.moveTolerance = null; // {Number} tolerance in pixels between touchStart/mousedwon and touchMove/mousemove
		this.moveX = null; // {Number} X coordinate of move event
		this.moveY = null; // {Number} Y coordinate of move event
		this.noop = null; // {Function} empty function
		this.preventClickFlag = false; // {Boolean} flag indicates if prevent default click behaviour
		this.preventClickTimeoutId = null; // {Number}  timer ID. Used to clear click preventing
		this.scrollContainer = null; // {Element} the element we would like to transition while drag and scroll
		this.scrollContainerSelector = null; // {String} CSS Selector String which specifies the element we would like to transition while drag and scroll
		this.scrollEvent = null; // {String} `scroll` event
		this.scrollTimer = null; // {Number} number of milliseconds elapsed since the last scroll event
		this.startX = null; // {Number} X coordinate of start event
		this.startY = null; // {Number} Y coordinate of start event
		this.switchModeDelay = null; // {Number} switch mode delay in ms
		this.tapsNumber = null; // {Number} the number of taps. could be 0 / 1 / 2
		this.timer = null; // {Number} timer ID. Used to decide mode
		this.scrollHandler = null; // {Function} scroll event handler
		this.touchCancelEvent = null; // {String} `touchcancel` event
		this.dragStartCallback = null; // {Function} Callback function execute when drag mode is active
		this.dragEndCallback = null; // {Function} Callback function execute after capture `touchend` or `mouseup` event and mode is 'drag' or 'drag-and-scroll'
		this.endCallback = null; // {Function} Callback function execute after capture `touchend` or `mouseup` event
		this.touchEndEvent = null; // {String} `touchend`
		this.touchMoveEvent = null; // {String} `touchmove`
		this.beforeDragCallback = null; // {Function} Callback function execute after capture `touchstart` or `mousedown` event
		this.touchStartEvent = null; // {String} `touchstart`
		this.wrapper = null; // {Element} content container parent
		this.wrapperRect = null; // {Object} wrapper Bounding Rect
		this.scrollEdge = 100; // {Number} edge in pixels top and bottom when scroll is starting

		this.resizeStartCallback = null;
		this.resizeMoveCallback = null; // {Function} Callback function executes while resize mode is active
		this.resizeEndCallback = null;
		this.isResize = null;
		this.resizeHandleDistance = null;

		/**
		 * Initialize state using configuration
		 *
		 * @private
		 */
		this.init = function(cfg) {
			this.startX = -1;
			this.startY = -1;
			this.moveX = -1;
			this.moveY = -1;
			this.endX = -1;
			this.endY = -1;

			this.resizeHandleDistance = 48;
			this.isResize = false;

			this.noop = function() {};
			this.isTouch = cfg.isTouch ? !!cfg.isTouch : false;
			this.container = document.querySelector(cfg.containerSelector);
			this.scrollContainerSelector = cfg.scrollContainerSelector || cfg.containerSelector;
			this.switchModeDelay = cfg.switchModeDelay || 1500;
			this.dragAndScrollDuration = cfg.dragAndScrollDuration || 230;
			this.moveTolerance = cfg.moveTolerance === 0 ? 0 : cfg.moveTolerance || 10;
			this.draggableSelector = cfg.draggableSelector;
			this.mode = 'normal';
			this.debug = cfg.debug || false;
			this.root = document.querySelector(cfg.rootSelector);
			this.tapsNumber = 0;
			this.lastTapTime = 0;
			this.log = this.debug ? this.logToConsole : this.noop;
			this.lockMode = false;
			this.placeHolderClass = cfg.placeHolderClass || "";
			this.cloneClass = cfg.cloneClass || "";
			this.wrapper = cfg.wrapperSelector ? document.querySelector(cfg.wrapperSelector) : this.container.parentNode;
			this.clickCallback = typeof cfg.clickCallback === 'function' ? cfg.clickCallback : this.noop;
			this.beforeDragCallback = typeof cfg.beforeDragCallback === 'function' ? cfg.beforeDragCallback : this.noop;
			this.doubleTapCallback = typeof cfg.doubleTapCallback === 'function' ? cfg.doubleTapCallback : this.noop;
			this.dragEndCallback = typeof cfg.dragEndCallback === 'function' ? cfg.dragEndCallback : this.noop;
			this.endCallback = typeof cfg.endCallback === 'function' ? cfg.endCallback : this.noop;
			this.dragStartCallback = typeof cfg.dragStartCallback === 'function' ? cfg.dragStartCallback : this.noop;
			this.dragMoveCallback = typeof cfg.dragMoveCallback === 'function' ? cfg.dragMoveCallback : this.noop;
			this.doubleTapDelay = cfg.doubleTapDelay || 500;
			this.wrapperRect = this.wrapper.getBoundingClientRect();
			this.scrollEvent = 'scroll';
			this.touchStartEvent = 'touchstart';
			this.touchMoveEvent = 'touchmove';
			this.touchEndEvent = 'touchend';
			this.mouseDownEvent = 'mousedown';
			this.mouseMoveEvent = 'mousemove';
			this.mouseUpEvent = 'mouseup';
			this.contextMenuEvent = 'contextmenu';
			this.touchCancelEvent = 'touchcancel';
			this.clickEvent = 'click';

			this.resizeStartCallback = typeof cfg.resizeStartCallback === 'function' ? cfg.resizeStartCallback : this.noop;
			this.resizeMoveCallback = typeof cfg.resizeMoveCallback === 'function' ? cfg.resizeMoveCallback : this.noop;
			this.resizeEndCallback = typeof cfg.resizeEndCallback === 'function' ? cfg.resizeEndCallback : this.noop;

			if (this.wrapper) {
				jQuery(this.wrapper).css({
					"position": "absolute",
					"top": 0,
					"left": 0,
					"right": 0,
					"bottom": 0,
					"-webkit-transform": "translateZ(0)",
					"transform": "translateZ(0)"
				});
			}
		};

		/* PRIVATE METHODS */

		/**
		 * Iterates over array-like object and calls callback function
		 * for each item
		 *
		 * @param {Array|NodeList|Arguments} scope - array-like object
		 * @param {Function} callback - function to be called for each element in scope
		 * @returns {Array|NodeList|Arguments} scope
		 */
		this.forEach = function(scope, callback) {
			/*
			 * NodeList and Arguments don't have forEach,
			 * therefore borrow it from Array.prototype
			 */
			return Array.prototype.forEach.call(scope, callback);
		};

		/**
		 * Returns index of item in array-like object
		 *
		 * @param {Array|NodeList|Arguments} scope - array-like object
		 * @param {*} item - item which index to be found
		 * @returns {Number} index of item in the array-like object
		 */
		this.indexOf = function(scope, item) {
			/*
			 * NodeList and Arguments don't have indexOf,
			 * therefore borrow it from Array.prototype
			 */
			return Array.prototype.indexOf.call(scope, item);
		};

		/**
		 * Cuts item from array-like object and pastes before reference item
		 *
		 * @param {Array|NodeList|Arguments} scope
		 * @param {*} item
		 * @param {*} referenceItem
		 */
		this.insertBefore = function(scope, item, referenceItem) {
			var itemIndex,
				referenceItemIndex,
				splice;

			splice = Array.prototype.splice;
			itemIndex = this.indexOf(scope, item);
			referenceItemIndex = this.indexOf(scope, referenceItem);

			splice.call(
				scope,
				referenceItemIndex - (itemIndex < referenceItemIndex ? 1 : 0),
				0,
				splice.call(scope, itemIndex, 1)[0]
			);
		};

		/**
		 * Log to console
		 *
		 * @private
		 */
		this.logToConsole = function() {
			window.console.log.apply(console, arguments);
		};

		this.getDraggableElement = function(currentElement) {
			var element;

			this.draggable = jQuery(this.draggableSelector, this.container);
			//Since we are listening on the root element,
			//we would like to identify when a draggable element is being touched.
			//The target element of the event is the lowest element in the DOM hierarchy
			//where the user touched the screen.
			//We need to climb in the DOM tree from the target element until we identify the draggable element,
			//or getting out of container scope.
			while (typeof element === 'undefined' && currentElement !== this.root) {
				//Only draggable tiles
				if (this.indexOf(this.draggable, currentElement) >= 0) {
					element = currentElement;
				}
				currentElement = currentElement.parentNode;
			}

			return element;
		};


		/**
		 * Capture X and Y coordinates of touchstart or mousedown event
		 *
		 * @param {Event} evt - touchstart or mousedowm event
		 * @private
		 */
		this.captureStart = function(evt) {
			var eventObj;

			if (evt.type === 'touchstart' && evt.touches.length === 1) {
				eventObj = evt.touches[0];
			} else if (evt.type === 'mousedown') {
				eventObj = evt;
				if (evt.which !== 1) { //Only LEFT click operation is enabled. Otherwise do nothing.
					return;
				}
			}

			if (eventObj) {
				this.element = this.getDraggableElement(eventObj.target);
				this.startX = eventObj.pageX;
				this.startY = eventObj.pageY;
				this.lastMoveX = 0;
				this.lastMoveY = 0;

				//drag&drop or resize?
				if (this.element) {
					var $elem = jQuery(this.element);
					var dX = $elem.offset().left + $elem.width() - this.startX;
					var dY = $elem.offset().top + $elem.height() - this.startY;
					if (dX < this.resizeHandleDistance && dY < this.resizeHandleDistance) {
						this.isResize = true;
					}
				}

				//Check if it is a doubletap flow or single tap
				if (this.lastTapTime && this.lastElement && this.element && (this.lastElement === this.element) && Math.abs(Date.now() - this.lastTapTime) <
					this.doubleTapDelay) {
					this.lastTapTime = 0;
					this.tapsNumber = 2;
				} else {
					this.lastTapTime = Date.now();
					this.tapsNumber = 1;
					this.lastElement = this.element;
				}

				this.log('captureStart(' + this.startX + ', ' + this.startY + ')');
			}
		};

		/**
		 * Handler for `mousedown` or `touchstart`
		 *
		 * @private
		 */
		this.startHandler = function(evt) {
			this.log('startHandler');
			clearTimeout(this.timer);
			delete this.timer;
			this.captureStart(evt);
			if (this.element) {
				this.beforeDragCallback(evt, this.element);
				if (this.lockMode === false) {
					if (this.tapsNumber === 2) {
						this.mode = 'double-tap';
						return;
					}
					if (this.isTouch) {
						this.timer = setTimeout(function() {
							if (this.isResize) {
								this.log("mode switched to resize");
								this.mode = "resize";
								this.resizeStartCallback(evt, this.element);
							} else {
								this.log('mode switched to drag');
								this.mode = 'drag';
								this.createClone();
								this.dragStartCallback(evt, this.element);
							}
						}.bind(this), this.switchModeDelay);
					}
				}
			}
		}.bind(this);

		/**
		 * Capture X and Y coordinates of touchmove or mousemove event
		 *
		 * @param {Event} evt - touchmove or mousemove event
		 * @private
		 */
		this.captureMove = function(evt) {
			var eventObj;

			if (evt.type === 'touchmove' && evt.touches.length === 1) {
				eventObj = evt.touches[0];
			} else if (evt.type === 'mousemove') {
				eventObj = evt;
			}
			if (eventObj) {
				this.moveX = eventObj.pageX;
				this.moveY = eventObj.pageY;

				this.log('captureMove(' + this.moveX + ', ' + this.moveY + ')');
			}
		};

		/**
		 * Handler for `mousemove` or `touchmove`
		 *
		 * @private
		 */
		this.moveHandler = function(evt) {
			var isScrolling;
			this.log('moveHandler');
			this.captureMove(evt);
			switch (this.mode) {
				case 'normal':
					if ((Math.abs(this.startX - this.moveX) > this.moveTolerance || Math.abs(this.startY - this.moveY) > this.moveTolerance)) {
						if (this.isTouch) {
							this.log('-> normal');
							clearTimeout(this.timer);
							delete this.timer;
						} else if (this.element) { //In desktop start dragging immediately

							if (this.isResize) {
								this.log("mode switched to resize");
								this.mode = "resize";
								// resize  callback ??
							} else {
								this.log('mode switched to drag');
								this.mode = 'drag';
								this.createClone();
							}
						}
					}
					break;
				case 'drag':
					evt.preventDefault();
					this.log('-> drag');
					this.mode = 'drag-and-scroll';
					window.addEventListener(this.mouseUpEvent, this.endHandler, true);
					this.translateClone();
					this.scrollContainer = document.querySelector(this.scrollContainerSelector);
					this.dragAndScroll();

					if (!this.isTouch) {
						this.dragStartCallback(evt, this.element);
					}
					break;
				case 'drag-and-scroll':
					evt.stopPropagation();
					evt.preventDefault();
					this.log('-> drag-and-scroll');
					isScrolling = this.dragAndScroll();
					this.translateClone();
					this.dragMoveCallback({
						evt: evt,
						clone: this.clone,
						element: this.element,
						draggable: this.draggable,
						isScrolling: isScrolling,
						moveX: this.moveX,
						moveY: this.moveY
					});
					break;
				case "resize":
					evt.preventDefault();
					this.log('-> resize');
					this.mode = 'resize-and-scroll';
					window.addEventListener(this.mouseUpEvent, this.endHandler, true);
					//this.translateClone();
					this.scrollContainer = document.querySelector(this.scrollContainerSelector);
					this.dragAndScroll();

					if (!this.isTouch) {
						this.resizeStartCallback(evt, this.element);
					}
					break;
				case "resize-and-scroll":
					evt.stopPropagation();
					evt.preventDefault();
					this.log('-> resize-and-scroll');
					isScrolling = this.dragAndScroll();
					//this.translateClone();
					this.resizeMoveCallback({
						evt: evt,
						element: this.element,
						draggable: this.draggable,
						isScrolling: isScrolling,
						moveX: this.moveX,
						moveY: this.moveY
					});
					break;
				default:
					break;
			}
		}.bind(this);

		/**
		 * Capture X and Y coordinates of touchend or mouseup event
		 *
		 * @param {Event} evt - touchmove or mouseup event
		 * @private
		 */
		this.captureEnd = function(evt) {
			var eventObj;

			if ((evt.type === 'touchend' || evt.type === 'touchcancel') && (evt.changedTouches.length === 1)) {
				eventObj = evt.changedTouches[0];
			} else if (evt.type === 'mouseup') {
				eventObj = evt;
			}
			if (eventObj) {
				this.endX = eventObj.pageX;
				this.endY = eventObj.pageY;

				this.log('captureEnd(' + this.endX + ', ' + this.endY + ')');
			}
		};

		/**
		 * Handler for `contextmenu` event. Disable right click on Chrome
		 *
		 * @private
		 */
		this.contextMenuHandler = function(evt) {
			if (this.isTouch) {
				evt.preventDefault();
			}

		}.bind(this);

		/**
		 *
		 * @param event
		 */
		this.clickHandler = function(event) {

			if (this.preventClickFlag) {
				this.preventClickFlag = false;
				event.preventDefault();
				event.stopPropagation();
				event.stopImmediatePropagation();
				clearTimeout(this.preventClickTimeoutId);
			}
			this.clickCallback();

		}.bind(this);

		/**
		 * This function solves a bug which causes the tile to be launched after D&D.
		 */
		this.preventClick = function() {
			this.preventClickFlag = true;
			this.preventClickTimeoutId = setTimeout(function() {
				this.preventClickFlag = false;
			}.bind(this), 100);
		};

		/**
		 * Handler for `mouseup` or `touchend`
		 *
		 * @private
		 */
		this.endHandler = function(evt) {
			this.log('endHandler');
			this.captureEnd(evt);
			switch (this.mode) {
				case 'normal':
					this.log('-> normal');
					break;
				case 'drag':
					this.log('-> drag');
					this.removeClone(); //show placeholder
					this.dragEndCallback(evt, this.element);
					this.preventClick();
					break;
				case 'drag-and-scroll':
					this.log('-> drag-and-scroll');
					window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
					this.removeClone(); //show placeholde
					this.dragEndCallback(evt, this.element);
					this.preventClick();
					evt.stopPropagation();
					evt.preventDefault();
					break;
				case 'double-tap':
					this.log('-> double-tap');
					this.doubleTapCallback(evt, this.element);
					break;
				case "resize":
					this.log("-> resize");
					this.isResize = false;
					this.resizeEndCallback(evt, this.element);
					this.preventClick();
					break;
				case "resize-and-scroll":
					this.log("-> resize-and-scroll");
					window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
					this.isResize = false;
					this.resizeEndCallback(evt, this.element);
					this.preventClick();
					evt.stopPropagation();
					evt.preventDefault();
					break;
				default:
					break;
			}
			if (this.element) {
				this.endCallback(evt, this.element);
			}
			clearTimeout(this.timer);
			delete this.timer;
			this.lastMoveX = 0;
			this.lastMoveY = 0;
			this.swapTargetElement = null;
			this.element = null;
			this.mode = 'normal';
		}.bind(this);

		this.defaultDragStartHandler = function(evt) {
			//prevent the Native Drag behavior of the browser
			evt.preventDefault();
		};

		this.scrollHandler = function() {
			clearTimeout(this.scrollTimer);
			this.lockMode = true;
			//release the scroll lock after 100 ms
			this.scrollTimer = setTimeout(function() {
				this.lockMode = false;
			}.bind(this), 500);
		}.bind(this);

		/**
		 * Create clone of draggable element
		 *
		 * @private
		 */
		this.createClone = function() {
			var style,
				rect;
			if (this.clone) {
				this.removeClone(); 
			}
			rect = this.element.getBoundingClientRect();
			this.clone = this.element.cloneNode(true);
			this.clone.className += (' ' + this.cloneClass);
			// this.element.className += (' ' + this.removeClone);
			this.element.className += (' ' + 'easyScanLayoutItemWrapper-placeHolder');
			style = this.clone.style;
			style.position = 'absolute';
			style.display = 'block';
			style.top = (rect.top - this.root.getBoundingClientRect().top) + 'px';
			style.left = (rect.left - this.root.getBoundingClientRect().left) + 'px';
			style.width = rect.width + 'px';
			style.zIndex = '100';
			style.webkitTransition = '-webkit-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.mozTransition = '-moz-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.msTransition = '-ms-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.transition = 'transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.webkitTransform = 'translate3d(0px, 0px, 0px) ';
			style.mozTransform = 'translate3d(0px, 0px, 0px) ';
			style.msTransform = 'translate3d(0px, 0px, 0px) ';
			style.transform = 'translate3d(0px, 0px, 0px) ';
			this.root.appendChild(this.clone);
			this.log('createClone');
		};

		/**
		 * Remove clone of draggable element
		 *
		 * @private
		 */
		this.removeClone = function() {
			if (this.element !== null && typeof (this.element) !== "undefined"){
				this.element.className = this.element.className.split(' ' + this.placeHolderClass).join('');
			}
			
			if (this.clone !== null) {
				this.clone.parentElement.removeChild(this.clone);
				// unset reference to DOM element of the clone, otherwise it will remain DOM fragment
				this.clone = null;
				this.log("removeClone");
			}
		};

		/**
		 * Translate clone of draggable element
		 *
		 * @private
		 */
		this.translateClone = function() {
			var deltaX,
				deltaY;

			deltaX = this.moveX - this.startX;
			deltaY = this.moveY - this.startY;
			this.clone.style.webkitTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
			this.clone.style.mozTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
			//IE9 contains only 2-D transform
			this.clone.style.msTransform = 'translate(' + deltaX + 'px, ' + deltaY + 'px)';
			this.clone.style.transform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';

			this.log('translateClone (' + deltaX + ', ' + deltaY + ')');

			this.clone.style.opacity = '0.5'; // make floater transparent
		};

		/**
		 * Scroll while dragging if needed
		 *
		 * @private
		 */
		this.dragAndScroll = function() {

			var
			/*
			 * Duration of scrolling animation in milliseconds.
			 * Greater value makes scroll faster, lower values - smoother
			 */
				duration = this.dragAndScrollDuration,
				style,
				that = this;

			function startAnimation(transitionY) {

				style.webkitTransition = '-webkit-transform ' + duration + 'ms linear';
				style.transition = 'transform ' + duration + 'ms linear';
				style.mozTransition = '-moz-transform ' + duration + 'ms linear';
				style.msTransition = '-ms-transform ' + duration + 'ms linear';
				style.webkitTransform = 'translate(0px, ' + transitionY + 'px) scale(1) translateZ(0px)';
				style.mozTransform = 'translate(0px, ' + transitionY + 'px) scale(1) translateZ(0px)';
				style.msTransform = 'translate(0px, ' + transitionY + 'px) scale(1) translateZ(0px)';
				style.transform = 'translate(0px, ' + transitionY + 'px) scale(1) translateZ(0px)';
			}

			function clearAnimation(transitionY) {
				style.webkitTransition = '';
				style.mozTransition = '';
				style.msTransition = '';
				style.transition = '';
				style.webkitTransform = '';
				style.mozTransform = '';
				style.msTransform = '';
				style.transform = '';
				that.wrapper.scrollTop -= transitionY;
			}

			/*
			 * Indicates how much pixels of draggable element are overflowing in a vertical axis.
			 * When deltaY is negative - content should be scrolled down,
			 * when deltaY is positive - content should be scrolled up,
			 * when deltaY is zero - content should not be scrolled
			 */
			function getDeltaY() {
				var wrapperRect = that.wrapper.getBoundingClientRect();
				//Up
				var topDiff = that.moveY - wrapperRect.top - that.scrollEdge;
				if (topDiff < 0) {
					return Math.abs(topDiff);
				}

				//Down
				var bottomDiff = wrapperRect.bottom - that.moveY - that.scrollEdge;
				if (bottomDiff < 0) {
					return bottomDiff;
				}

				return 0;
			}

			function getNextTransitionY(deltaY) {
				var possibleScroll;
				var nextTransitionY = deltaY * 2;
				if (deltaY < 0) {
					//Down
					possibleScroll = (that.wrapper.offsetHeight + that.wrapper.scrollTop) - that.wrapper.scrollHeight;
					return nextTransitionY < possibleScroll ? possibleScroll : nextTransitionY;
				} else if (deltaY > 0) {
					//Up
					possibleScroll = that.wrapper.scrollTop;
					return nextTransitionY < possibleScroll ? nextTransitionY : possibleScroll;
				}
				return 0;
			}

			function start(transitionY) {
				startAnimation(transitionY);
				that.dragAndScrollTimer = setTimeout(function(oldTransitionY) {
					clearAnimation(oldTransitionY);
					that.dragAndScrollTimer = undefined;
					var nextTransitionY = getNextTransitionY(getDeltaY());
					if (nextTransitionY) {
						start(nextTransitionY);
					}
				}.bind(that, transitionY), duration);
			}

			var nextTransitionY = getNextTransitionY(getDeltaY());
			if (nextTransitionY && !this.dragAndScrollTimer) {
				//in IE when reaching the drag and scroll we lose the ref to this.scrollContainer
				this.scrollContainer = this.scrollContainer || document.querySelector(this.scrollContainerSelector);
				style = this.scrollContainer.style;
				start(nextTransitionY);
			}

			this.log('dragAndScroll (' + nextTransitionY + ')');

			return !!nextTransitionY;
		};

		/* PUBLIC METHODS */

		/**
		 * Enable feature
		 *
		 * @public
		 */
		this.enable = function() {
			this.log('enable');
			//Touch Events
			this.root.addEventListener(this.touchStartEvent, this.startHandler, false);
			this.root.addEventListener(this.touchMoveEvent, this.moveHandler, true);
			this.root.addEventListener(this.touchEndEvent, this.endHandler, false);
			this.root.addEventListener(this.touchCancelEvent, this.endHandler, false);
			//Mouse Events
			this.root.addEventListener(this.mouseMoveEvent, this.moveHandler, true);
			this.root.addEventListener(this.mouseDownEvent, this.startHandler, false);
			this.root.addEventListener(this.mouseUpEvent, this.endHandler, false);
			//Additional Events
			this.root.addEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
			this.root.addEventListener(this.clickEvent, this.clickHandler, true);
			this.wrapper.addEventListener(this.scrollEvent, this.scrollHandler, false);

			return this;
		};

		/**
		 * Disable feature
		 *
		 * @public
		 */
		this.disable = function() {
			this.log('disable');
			this.root.removeEventListener(this.touchStartEvent, this.startHandler, false);
			this.root.removeEventListener(this.touchMoveEvent, this.moveHandler, true);
			this.root.removeEventListener(this.touchEndEvent, this.endHandler, false);
			this.root.removeEventListener(this.mouseDownEvent, this.startHandler, false);
			this.root.removeEventListener(this.mouseMoveEvent, this.moveHandler, true);
			this.root.removeEventListener(this.mouseUpEvent, this.endHandler, false);
			this.root.removeEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
			this.root.removeEventListener(this.clickEvent, this.clickHandler, true);
			this.root.removeEventListener(this.touchCancelEvent, this.endHandler, false);
			this.wrapper.removeEventListener(this.scrollEvent, this.scrollHandler, false);

			return this;
		};

		/*
		 * Initialize dynamic feature state
		 * and behaviour using configuration
		 */
		this.init(cfg);

		/**
		 * @public
		 * @returns {{x: moveX, y: moveY}}
		 */
		this.getMove = function() {
			return {
				x: this.moveX,
				y: this.moveY
			};
		};
	};
})();
}; // end of sap/ovp/ui/UIActions.js
if ( !jQuery.sap.isDeclared('sap.ovp.app.Main.controller') ) {
  jQuery.sap.declare('sap.ovp.app.Main.controller');
(function() {
	"use strict";
	/*global sap, jQuery */

	jQuery.sap.require('sap.ui.model.odata.ODataUtils'); // unlisted dependency retained

	
	jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained

	jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


	sap.ui.controller("sap.ovp.app.Main", {

		onInit: function() {
			this.oCardsModels = {};
			this.oLoadedComponents = {};
			jQuery.sap.measure.start("ovp:GlobalFilter", "Main Controller init -> Global Filter loaded", "ovp");
			jQuery.sap.measure.start("ovp:Personalization", "Main Controller init -> Personalization loaded", "ovp");
			this.isInitialLoading = true;
			this._initSmartVariantManagement();
            if (this.getOwnerComponent()) {
                this.oValueHelpMap = this.getOwnerComponent().getModel("ui").getProperty("/ValueHelpEntityMap");
            }
			this.getLayout().addStyleClass("ovpLayoutElement");
			/* Appstate*/
			this.oState = {};
			this.oState.oSmartFilterbar = this.byId("ovpGlobalFilter");
			/* Appstate */
			this._initGlobalFilter();
		},

		//clarify with UI5 Core: why can view models not be accessed in onInit?
		onBeforeRendering: function() {},

		onAfterRendering: function() {
			//make sure we will not initialize more then ones
			if (this.initialized) {
				return;
			}
			this.initialized = true;

			this.oPersistencyVariantPromise.then(function(oVariant) {
				jQuery.sap.measure.end("ovp:Personalization");
				this.persistencyVariantLoaded = true;
				var oCard;
				this.aManifestOrderedCards = this._getCardArrayAsVariantFormat(this.getLayout().getContent());

				if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
					this.aOrderedCards = this._mergeLrepDashboardLayout(this.aManifestOrderedCards, oVariant);
				} else {
					this.aOrderedCards = this._mergeCards(this.aManifestOrderedCards, oVariant);
				}

				this._updateLayoutWithOrderedCards();
				if (this.isDragAndDropEnabled()) {
					this._initShowHideCardsButton();
				}

				jQuery.sap.measure.start("ovp:CreateLoadingCards", "Create Loading cards", "ovp");
				//First create the loading card
				for (var i = 0; i < this.aOrderedCards.length; i++) {
					if (this.aOrderedCards[i].visibility) {
						oCard = this._getCardFromManifest(this.aOrderedCards[i].id);
						if (oCard) {
							this.createLoadingCard(oCard);
						}
					}
				}
				jQuery.sap.measure.end("ovp:CreateLoadingCards");

				//In order to add the below css class after second layout rendering which caused by this._updateLayoutWithOrderedCards()
				setTimeout(function() {
					this.getLayout().addStyleClass("ovpLayoutElementShow");
				}.bind(this), 0);

				//Second load each card component and create the card
				//We would like to wait for the loading cards invocation
				setTimeout(function() {
					jQuery.sap.measure.start("ovp:CreateCards", "Create cards loop", "ovp");
					for (var i = 0; i < this.aOrderedCards.length; i++) {
						if (this.aOrderedCards[i].visibility) {
							oCard = this._getCardFromManifest(this.aOrderedCards[i].id);
							if (oCard) {
								oCard.settings.baseUrl = this._getBaseUrl();
								this._initCardModel(oCard.model);
								this._loadCardComponent(oCard.template);
								this.createCard(oCard);
							}
						}
					}
					jQuery.sap.measure.end("ovp:CreateCards");
				}.bind(this), 10);

				if (this.busyDialog) {
					this.busyDialog.close();
				}
			}.bind(this), function(err) {
				jQuery.sap.log.error("Could not load information from LREP Persistency");
				jQuery.sap.log.error(err);
			});
			if (sap.ui.Device.system.phone) {
				jQuery.sap.require("sap.ovp.ui.SmartphoneHeaderToggle");
				sap.ovp.ui.SmartphoneHeaderToggle.enable(this);
			}

			setTimeout(function() {
				if (!this.persistencyVariantLoaded) {
					this.busyDialog = new sap.m.BusyDialog({
						text: this._getLibraryResourceBundle().getText("loading_dialog_text")
					});
					this.busyDialog.open();
					this.busyDialog.addStyleClass('sapOVPBusyDialog');
				}
			}.bind(this), 500);
		},

		_getLibraryResourceBundle: function() {
			if (!this.oLibraryResourceBundle) {
				this.oLibraryResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
			}
			return this.oLibraryResourceBundle;
		},

		_getCardsModel: function() {
			var oUIModel = this.getView().getModel("ui");
			if (!this.oCards) {
				this.oCards = oUIModel.getProperty("/cards");
			}
			return this.oCards;
		},

		_getBaseUrl: function() {
			var oUIModel = this.getView().getModel("ui");
			if (!this.sBaseUrl) {
				this.sBaseUrl = oUIModel.getProperty("/baseUrl");
			}
			return this.sBaseUrl;
		},

		_getCardFromManifest: function(sCardId) {
			var aCards = this._getCardsModel();
			for (var i = 0; i < aCards.length; i++) {
				if (aCards[i].id === sCardId) {
					return aCards[i];
				}
			}

			return null;
		},

		_getCardArrayAsVariantFormat: function(aComponentContainerArray) {
			var aCards = [];

			for (var i = 0; i < aComponentContainerArray.length; i++) {
				aCards.push({
					id: this._getCardId(aComponentContainerArray[i].getId()),
					visibility: aComponentContainerArray[i].getVisible()
				});
			}
			return aCards;
		},

		_mergeCards: function(aLayoutCardsArray, oVariant) {
			var variantCardsArray = (oVariant && oVariant.cards) ? oVariant.cards : [];
			var oResult = [];
			var sCardId;
			var bCardVisibility;
			var aLayoutCardsArr = (aLayoutCardsArray && aLayoutCardsArray.length) ? aLayoutCardsArray : [];

			//First, we insert into the oResult the cards from the variant which exist in the oLayoutCard:
			for (var i = 0; i < variantCardsArray.length; i++) {
				bCardVisibility = variantCardsArray[i].visibility;
				for (var j = 0; j < aLayoutCardsArr.length; j++) {
					sCardId = aLayoutCardsArr[j].id;
					if (variantCardsArray[i].id === sCardId) {
						oResult.push({
							id: sCardId,
							visibility: bCardVisibility
						});
						break;
					}
				}
			}

			//Second, we add additional cards from the current layout (fragment + manifest) into the end of the oResult
			for (var j = 0; j < aLayoutCardsArr.length; j++) {
				var isFound = false;
				sCardId = aLayoutCardsArr[j].id;
				bCardVisibility = aLayoutCardsArr[j].visibility;
				for (var i = 0; !isFound && i < oResult.length; i++) {
					if (oResult[i].id === sCardId) {
						isFound = true;
					}
				}

				if (!isFound) {
					oResult.push({
						id: sCardId,
						visibility: bCardVisibility
					});
				}
			}

			return oResult;
		},

		/**
		 * _mergeLrepDashboardLayout is called once in first onAfterRendering
		 */
		_mergeLrepDashboardLayout: function(aLayoutCardsArray, oLrepContent) {
			var aCards = [];
			var oUiModel = this.getLayout().getModel("ui");
			var oLayouts = {};
			var layoutKey = null;

			//MANIFEST
			var oLayoutRaw = oUiModel.getProperty("/dashboardLayout");
			if (oLayoutRaw) {
				var oVariant = {};
				for (layoutKey in oLayoutRaw) {
					if (oLayoutRaw.hasOwnProperty(layoutKey) && oLayoutRaw[layoutKey]) {
						oVariant = oLayoutRaw[layoutKey];
						oVariant.id = layoutKey;
						oVariant.__ovpDBLVarSource = "manifest";
						oVariant.__ovpDBLVarId = "C" + parseInt(oVariant.id.replace(/[^0-9\.]/g, ""), 10);
						oLayouts[oVariant.__ovpDBLVarId] = oVariant;
					}
				}
			}
			//set manifest json string in dashboardmodel (required for reset)
			this.getLayout().getDashboardLayoutModel().setManifestLayoutsJSON(JSON.stringify(oLayouts));
			//remember that merge was executed --> following changes can be persisted
			this._bDashboardLayoutLrepActive = true;
			// 			}
			if (oLrepContent && oLrepContent.dashboardLayout) {
				for (layoutKey in oLrepContent.dashboardLayout) {
					if (oLrepContent.dashboardLayout[layoutKey]) {
						oLrepContent.dashboardLayout[layoutKey].__ovpDBLVarSource = "lrep";
						//add or overwrite manifest variant
						oLayouts[layoutKey] = oLrepContent.dashboardLayout[layoutKey];
					}
				}
			}
			//ui model keeps manifest version in /dashboardLayout (for reset)
			//update dashboardLayoutModel layout
			this.getLayout().getDashboardLayoutModel().setLayoutVars(oLayouts);
			//set initial layout (required for initial card rendering)
			oUiModel.setProperty("/initialDashboardLayout", [this.getLayout().getDashboardLayoutUtil().buildLayout(jQuery(window).width())]);
			//set card visibility
			if (layoutKey) {
				var aManifestCards = oUiModel.getProperty("/cards");
				var oLayout = oLayouts[layoutKey];
				if (aManifestCards && oLayout) {
					aCards = this._initDashboardLayoutCardVisibility(aManifestCards, oLayout, aLayoutCardsArray);
				}
			}
			if (aCards.length === 0) {
				//fallback to EasyScan version
				aCards = this._mergeCards(this.aManifestOrderedCards, oVariant);
			}
			return aCards;
		},

		_initDashboardLayoutCardVisibility: function(aManifestCards, oLayout, aLayoutCardsArray) {
			var aCards = [];
			var i = 0;
			var sCardId;
			var oLayoutCard = null;
			var bVisible = true;

			if (oLayout && aManifestCards) {
				for (i = 0; i < aManifestCards.length; i++) {
					sCardId = aManifestCards[i].id;
					// in the first version the card visibility is same for all layout variants --> take the current variant
					oLayoutCard = oLayout[sCardId];

					if (oLayoutCard && oLayoutCard.hasOwnProperty("visible")) {
						bVisible = oLayoutCard.visible;
					} else {
						bVisible = true;
					}
					aCards.push({
						id: sCardId,
						visibility: bVisible
					});
				}
				//merge aLayoutCardsArray if required
				if (aLayoutCardsArray && aLayoutCardsArray.length > 0) {
					for (i = 0; i < aLayoutCardsArray.length; i++) {
						sCardId = aLayoutCardsArray[i].id;
						if (!oLayout[sCardId]) {
							aCards.push({
								id: sCardId,
								visibility: aLayoutCardsArray[i].visibility
							});
						}
					}
				}
			}
			return aCards;
		},

		_updateLayoutWithOrderedCards: function() {
			var oLayout = this.getLayout();
			var aOrderedCards = this.aOrderedCards;
			oLayout.removeAllContent();
			for (var i = 0; i < aOrderedCards.length; i++) {
				var oComponentContainer = this.getView().byId(aOrderedCards[i].id);
				oComponentContainer.setVisible(aOrderedCards[i].visibility);
				oLayout.addContent(oComponentContainer);
			}
		},

		_updateDashboardLayoutCards: function(aCards) {
			if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
				if (this.getLayout().getDashboardLayoutUtil()) {
					this.getLayout().getDashboardLayoutUtil().updateCardVisibility(aCards);
				}
			}
		},

		_resetDashboardLayout: function() {
			if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
				if (this.getLayout().getDashboardLayoutUtil()) {
					this.getLayout().getDashboardLayoutUtil().resetToManifest();
				}
				this.getLayout().rerender();
			}
		},

		verifyGlobalFilterLoaded: function() {
			if (this.getGlobalFilter().search()) {
				return true;
			}
			//else make sure filter is open so user will see the required field
			return false;
		},

		/**
		 * Register to the filterChange event of the filter bar in order to mark that
		 * one or more of the filters were changed
		 */
		onGlobalFilterChange: function() {
			this.filterChanged = true;
		},

		/**
		 * Register to the search event of the filter bar in order to refresh all models
		 * with the changes in the filter bar (if there are changes) when "go" is clicked
		 */
		onGlobalFilterSearch: function() {
			if (this.filterChanged) {
				var sBatchGroupId = "ovp-" + new Date().getTime();
				for (var modelKey in this.oCardsModels) {
					if (this.oCardsModels.hasOwnProperty(modelKey)) {
						this.oCardsModels[modelKey].refresh(false, false, sBatchGroupId);
					}
				}
				this.filterChanged = false;
			}
		},

		_initGlobalFilter: function() {
			var oGlobalFilter = this.getGlobalFilter();
			if (!oGlobalFilter) {
                this._parseNavigationVariant();
				jQuery.sap.measure.end("ovp:GlobalFilter");
				return;
			}

			this.oGlobalFilterLodedPromise = new Promise(function(resolve, reject) {
				oGlobalFilter.attachAfterVariantLoad(function() {
					this.oParseNavigationPromise.done(function(oAppData, oURLParameters, sNavType) {
						this._setNavigationVariantToGlobalFilter(oAppData, oURLParameters, sNavType);
					}.bind(this));
					this.oParseNavigationPromise.fail(function() {
						jQuery.sap.log.error("Could not parse navigation variant from URL");
					});
					this.oParseNavigationPromise.always(function() {
						if (oGlobalFilter && this.verifyGlobalFilterLoaded()) {
							resolve();
						}
					}.bind(this));
				}, this);

				oGlobalFilter.attachInitialise(function() {
					//Parse navigation variant from the URL (if exists)
					this._parseNavigationVariant();
					// in case no variant is selected by user then the attachAfterVariantLoad
					//event is not fired, therefore we check if there is no variant we
					//call the verification here
                    if (!oGlobalFilter.getCurrentVariantId()) {
                        if (this.oParseNavigationPromise) {
                            this.oParseNavigationPromise.done(function (oAppData, oURLParameters, sNavType) {
                                if (oAppData) {
                                    this._setNavigationVariantToGlobalFilter(oAppData, oURLParameters, sNavType);
                                }
                            }.bind(this));
                            this.oParseNavigationPromise.fail(function () {
                                jQuery.sap.log.error("Could not parse navigation variant from URL");
                            });
                            this.oParseNavigationPromise.always(function () {
                                if (oGlobalFilter && this.verifyGlobalFilterLoaded()) {
                                    resolve();
                                }
                            }.bind(this));
                        } else {
                            if (oGlobalFilter && this.verifyGlobalFilterLoaded()) {
                                resolve();
                            }
                        }
                    }
				}, this);

				oGlobalFilter.attachSearch(function() {
					//If user pressed GO, it means that the required field varification
					//was allredy done by the globalFilter, therefore we can resolve the promise.
					//This is needed in case some required field was empty and therefore the promise
					//object was not resolved in the initial flow, we have to do it now after user
					//set the filter
					resolve();

					this.onGlobalFilterSearch();
				}, this);
				oGlobalFilter.attachFilterChange(this.onGlobalFilterChange, this);
			}.bind(this));

			this.oGlobalFilterLodedPromise.then(function(oVariant) {
				jQuery.sap.measure.end("ovp:GlobalFilter");
			});
		},

		_loadCardComponent: function(sComponentName) {
			if (!this.oLoadedComponents[sComponentName]) {
				jQuery.sap.measure.start("ovp:CardComponentLoad:" + sComponentName, "Card Component load", "ovp");
				this.oLoadedComponents[sComponentName] = sap.ui.component.load({
					name: sComponentName,
					url: jQuery.sap.getModulePath(sComponentName),
					async: true
				});
				this.oLoadedComponents[sComponentName].then(function() {
					jQuery.sap.measure.end("ovp:CardComponentLoad:" + sComponentName);
				});
			}
		},

		_initCardModel: function(sCardModel) {
			if (this.oCardsModels[sCardModel] || !sCardModel) {
				return;
			}
			this.oCardsModels[sCardModel] = this.getView().getModel(sCardModel);
			this.oCardsModels[sCardModel].setUseBatch(true);
			if (this.getGlobalFilter()) {
				this._overrideCardModelRead(this.oCardsModels[sCardModel]);
			}
		},

		toggleFilterBar: function toggleFilterBar() {
			var oGlobalFilter = this.getGlobalFilter();

			function toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
				jqGlobalFilterWrapper.height(height);
				jqGlobalFilter.css('top', 0);
			}

			function toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
				jqGlobalFilterWrapper.height(0);
				jqGlobalFilter.css("top", "-" + height + "px");
			}

			var isVisible = oGlobalFilter.getVisible();

			if ((sap.ui.Device.system.phone) || (sap.ui.Device.system.tablet)) {
				oGlobalFilter.setVisible(!isVisible);
				return;
			}
			if (toggleFilterBar.animationInProcess) {
				return;
			}
			toggleFilterBar.animationInProcess = true;

			if (isVisible) {
				var jqGlobalFilter = jQuery(oGlobalFilter.getDomRef());
				var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
				var height = jqGlobalFilterWrapper.height();
				toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
				jqGlobalFilterWrapper.height(); //make browser render css change
				jqGlobalFilterWrapper.one('transitionend', function(e) {
					oGlobalFilter.setVisible(false); //set filterbar invisible in case shell wants to reRender it
					toggleFilterBar.animationInProcess = false;
				});
				toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
			} else {
				oGlobalFilter.setVisible(true);
				setTimeout(function() { //we need this to wait for globalFilter renderer
					var jqGlobalFilter = jQuery(oGlobalFilter.getDomRef());
					var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
					var height = jqGlobalFilter.outerHeight();
					toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
					jqGlobalFilterWrapper.height(); //make browser render css change
					jqGlobalFilterWrapper.one('transitionend', function(e) {
						jqGlobalFilterWrapper.css("height", "auto");
						toggleFilterBar.animationInProcess = false;
					});
					toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
				}.bind(this));
			}
		},

		/**
		 * This function is overriding the read function of the oDataModel with a function that will
		 * first find the relevant filters from the filter bar and then will call the original
		 * read function with the relevant filters as parameters.
		 * @param oModel
		 * @private
		 */
		_overrideCardModelRead: function(oModel) {
			var fOrigRead = oModel.read;
			var that = this;
			oModel.read = function() {
				var aFilters = that.getGlobalFilter().getFilters();
				var oParameters = arguments[1];
				if (!oParameters) {
					oParameters = {};
					Array.prototype.push.call(arguments, oParameters);
				}
				var oEntityType = that._getEntityTypeFromPath(oModel, arguments[0], oParameters.context);
                var bValueHelpEntity = false;
                if (that.oValueHelpMap) {
                    if (that.oValueHelpMap.indexOf(oEntityType.entityType) != -1) {
                        bValueHelpEntity = true;
                    }
                }
                if (oEntityType && !bValueHelpEntity) {
					var aRelevantFIlters = that._getEntityRelevantFilters(oEntityType, aFilters);
					if (aRelevantFIlters.length > 0) {
						var foundIndex = -1;
						var aUrlParams = oParameters.urlParameters;
						if (aUrlParams) {
							for (var index = 0; index < aUrlParams.length; index++) {
								// We use here lastIndexOf instead of startsWith because it doesn't work on safari (ios devices)
								if ((aUrlParams[index]).lastIndexOf("$filter=", 0) === 0) {
									foundIndex = index;
									break;
								}
							}
						}
						if (foundIndex >= 0) {
							aUrlParams[foundIndex] =
								aUrlParams[foundIndex] + "%20and%20" +
								sap.ui.model.odata.ODataUtils.createFilterParams(aRelevantFIlters, oModel.oMetadata, oEntityType).substr(8);
						} else {
							oParameters.filters = aRelevantFIlters;
						}

					}
				}

				fOrigRead.apply(oModel, arguments);
			};
		},

		/**
		 * This is a temporary function used to retrieve the EntityType from a given path to an entity.
		 * This function is required due to fact that the function _getEntityTypeByPath of the ODataMetadata is not public.
		 * @param oModel
		 * @param sPath
		 * @param oContext
		 * @returns {object}
		 * @private
		 */
		_getEntityTypeFromPath: function(oModel, sPath, oContext) {
			//TODO need to request UI5 to have this a public API!!!!
			var sNormPath = sap.ui.model.odata.v2.ODataModel.prototype._normalizePath.apply(oModel, [sPath, oContext]);
			var oEntityType = sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeByPath.apply(oModel.oMetadata, [sNormPath]);
			return oEntityType;
		},

		/**
		 * This function goes over the provided list of filters and checks which filter appears as a field
		 * in the EntityType provided. The fields that appears in both lists  (filters and EntityType fields)
		 * will be returned in an array.
		 * @param oEntityType
		 * @param aFilters
		 * @returns {array}
		 * @private
		 */
		_getEntityRelevantFilters: function(oEntityType, aFilters) {
			var aRelevantFiltes = [];
			if (aFilters.length) {
				var allFilters = aFilters[0].aFilters;
				var entityProperties = oEntityType.property;
				for (var i = 0; i < allFilters.length; i++) {
					var currentFilterName;
					if (allFilters[i].aFilters) {
						currentFilterName = allFilters[i].aFilters[0].sPath;
					} else {
						currentFilterName = allFilters[i].sPath;
					}
					for (var j = 0; j < entityProperties.length; j++) {
						if (entityProperties[j].name === currentFilterName) {
							aRelevantFiltes.push(allFilters[i]);
							break;
						}
					}
				}
			}
			// Retaining the default OR/AND operation
			if (aRelevantFiltes.length != 0) {
				var aRelevantFilWrap = [];
				aRelevantFilWrap.push(new sap.ui.model.Filter(aRelevantFiltes, aFilters[0].bAnd));
				return aRelevantFilWrap;
			}

			return aRelevantFiltes;
		},

		/*
         Check derived Card Component is implemented with respect to the below restrictions:

         Custom card must be instance of sap.ovp.cards.generic.Component. In other words, custom card must extend sap.ovp.cards.generic.Component.
         If sap.ovp.cards.generic.Card view is replaced by another custom View it means the custom card is not valid.
         [If the extended Component has customization (under the component metadata) and the sap.ovp.cards.generic.Card is replaced by another view (using sap.ui.viewReplacements)]
         If the extended Component overrides the createContent function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.
         If the extended Component overrides the getPreprocessors function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.

         */
		_checkIsCardValid: function(sCardTemplate) {
			var sComponentClassName = sCardTemplate + ".Component";
			var oComponentMetadata, oCustomizations;

			jQuery.sap.require(sComponentClassName);

			var oComponentClass = jQuery.sap.getObject(sComponentClassName);

			if (!oComponentClass) {
				return false;
			}

			if ((oComponentClass !== sap.ovp.cards.generic.Component) && !(oComponentClass.prototype instanceof sap.ovp.cards.generic.Component)) {
				return false;
			}

			if ((oComponentMetadata = oComponentClass.getMetadata()) && (oCustomizations = oComponentMetadata.getCustomizing())) {
				//if OVP Card view was replaced
				if (oCustomizations["sap.ui.viewReplacements"] && oCustomizations["sap.ui.viewReplacements"]["sap.ovp.cards.generic.Card"]) {
					return false;
				}
			}

			if (oComponentClass.prototype.createContent != sap.ovp.cards.generic.Component.prototype.createContent) {
				return false;
			}

			if (oComponentClass.prototype.getPreprocessors != sap.ovp.cards.generic.Component.prototype.getPreprocessors) {
				return false;
			}

			return true;
		},

		_createCardComponent: function(oView, oModel, card) {
			var sId = "ovp:CreateCard-" + card.template + ":" + card.id;
			jQuery.sap.measure.start(sId, "Create Card", "ovp");
			var oi18nModel = oView.getModel("@i18n");
			if (card.template && this._checkIsCardValid(card.template)) {
				var oComponentConfig = {
					name: card.template,
					componentData: {
						model: oModel,
						i18n: oi18nModel,
						cardId: card.id,
						settings: card.settings,
                        appComponent: this.getOwnerComponent()
					}
				};
				var oGlobalFilter = this.getGlobalFilter();

				if (oGlobalFilter) {
					oComponentConfig.componentData.globalFilter = {
						getFilterDataAsString: oGlobalFilter.getDataSuiteFormat.bind(oGlobalFilter)
					};
				}
				var oComponent = sap.ui.component(oComponentConfig);
				var oComponentContainer = oView.byId(card.id);

				var oOldCard = oComponentContainer.getComponentInstance();
				oComponentContainer.setComponent(oComponent);
				if (oOldCard) {
					//currently the old component is not destroyed when setting a different component
					//so we need to do that in timeout to make sure that it will not be destoroyed
					//too early, before real card will be rendered on the screen.
					setTimeout(function() {
						oOldCard.destroy();
					}, 0);
				}
			} else {
				// TODO: define the proper behavior indicating a card loading failure
				jQuery.sap.log.error("Could not create Card from '" + card.template + "' template. Card is not valid.");
			}
			jQuery.sap.measure.end(sId);
		},

		createLoadingCard: function(card) {
			/*
			 * we have to make sure metadata and filter are loaded before we create the card
			 * so we first create loading card and once all promises will be resulved
			 * we will create the real card and replace the loading card
			 */
			var loadingCard = jQuery.extend(true, {}, card, {
				template: "sap.ovp.cards.loading"
			});
			this._createCardComponent(this.getView(), undefined, loadingCard);
		},

		createCard: function(card) {
			var oView = this.getView();
			var oModel = oView.getModel(card.model);
			
			///*
			// * we have to make sure metadata and filter are loaded before we create the card
			// * so we first create loading card and once all promises will be resulved
			// * we will create the real card and replace the loading card
			// */

			Promise.all([
				oModel.getMetaModel().loaded(),
				this.oGlobalFilterLodedPromise,
				this.oLoadedComponents[card.template]
			]).then(
				function() {
					this._createCardComponent(oView, oModel, card);
				}.bind(this),
				function(reason) {
					jQuery.sap.log.error("Can't load card with id:'" + card.id + "' and type:'" + card.template + "', reason:" + reason);
				}
			);
		},

		/**
		 * The function gets an UI5 generated id and returns the element original Id
		 *
		 * @param {string} generatedId - the UI5 generated id
		 * @param {string} elementId - the element original  id
		 */
		_getCardId: function(generatedId) {
			var appIdString = this.getView().getId() + "--";
			if (generatedId.indexOf(appIdString) != -1) {
				var start = generatedId.indexOf(appIdString) + appIdString.length;
				return generatedId.substr(start);
			}
			return generatedId;
		},

		_initSmartVariantManagement: function() {
			var oPersistencyControl = this._createPersistencyControlForSmartVariantManagement();
			var oOVPVariantInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
				type: "OVPVariant",
				keyName: "persistencyKey",
				control: oPersistencyControl
			});

			this.oPersistencyVariantPromise = new Promise(function(resolve, reject) {
				this.smartVariandManagement = new sap.ui.comp.smartvariants.SmartVariantManagement({
					personalizableControls: oOVPVariantInfo,
					initialise: function(oEvent) {
						var aKeys = oEvent.getParameters().variantKeys;
						if (aKeys.length) { //the user has already a variant
							resolve(this.smartVariandManagement.getVariantContent(oPersistencyControl, aKeys[0]));
						} else { //the user do not have have any variant
							resolve(null);
						}
					}.bind(this)
				});
				this.smartVariandManagement.initialise();
			}.bind(this));

		},

		layoutChanged: function() {
			if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
				if (this._bDashboardLayoutLrepActive) {
					//only save changes after persistency promise has been processed! 
					this.saveVariant();
				}
			} else {
				var aContent = this.getLayout().getContent();
				this.aOrderedCards = this._getCardArrayAsVariantFormat(aContent);
				this.saveVariant();
			}
		},

		saveVariant: function(oEvent) {
			var that = this;
			this.smartVariandManagement.getVariantsInfo(function(aVariants) {
				var oPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					oPersonalisationVariantKey = aVariants[0].key;
				}
				var bOverwrite = oPersonalisationVariantKey !== null;

				var oParams = {
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: oPersonalisationVariantKey,
					def: true
				};
				that.smartVariandManagement.fireSave(oParams);
			});

		},

		getLayout: function() {
			return this.getView().byId("ovpLayout");
		},

		_createPersistencyControlForSmartVariantManagement: function() {
			var that = this;
			sap.ui.core.Control.extend("sap.ovp.app.PersistencyControl", {
				metadata: {
					properties: {
						persistencyKey: {
							type: "string",
							group: "Misc",
							defaultValue: null
						}
					}
				}
			});
			var oPersistencyControl = new sap.ovp.app.PersistencyControl({
				persistencyKey: "ovpVariant"
			});

			/**
			 * Interface function for SmartVariantManagment control, returns the current used variant data
			 *
			 * @public
			 * @returns {json} The currently set variant
			 */
			oPersistencyControl.fetchVariant = function() {
				//in the initial loading the variant is not saved
				if (that.isInitialLoading) {
					that.isInitialLoading = false;
					return {};
				}
				var oLayout = this.getLayout();
				if (!oLayout) {
					jQuery.sap.log.error("Could not save persistency variant - 'ovpLayout' does not exists");
					return;
				}

				if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
					var oVariants = this.getLayout().getLayoutDataJSON();
					return {
						dashboardLayout: oVariants
					};
				} else {
					var aLayoutContent = oLayout.getContent();
					var aContentForSave = this._getCardArrayAsVariantFormat(aLayoutContent);
					this.oOrderedCards = aContentForSave;
					return {
						cards: aContentForSave
					};
				}
			}.bind(this);

			return oPersistencyControl;

		},

		_initShowHideCardsButton: function() {
			var srvc, oCardMenuButton;

			var srvc = sap.ushell.services.AppConfiguration;
			var oCardMenuButton = new sap.m.Button().addStyleClass("ovpManageCardsBtn");
			oCardMenuButton.setIcon('sap-icon://dimension');
			oCardMenuButton.setTooltip(this._getLibraryResourceBundle().getText("hideCardsBtn_tooltip"));
			oCardMenuButton.setText(this._getLibraryResourceBundle().getText("hideCardsBtn_title"));
			oCardMenuButton.attachPress((this._onCardMenuButtonPress).bind(this));
			srvc.addApplicationSettingsButtons([oCardMenuButton]);
		},

		_onCardMenuButtonPress: function() {
			var oModel;

			function getCardIndexInArray(aCardsArr, cardId) {
				for (var i = 0; i < aCardsArr.length; i++) {
					if (aCardsArr[i].id == cardId) {
						return i;
					}
				}
				return -1;
			}

			function createOrDestroyCards(aOldContent, aNewContent) {
				var oldIndex = -1;
				for (var i = 0; i < aNewContent.length; i++) {
					//In case the card position has been changed, we need to get the card index in the old array.
					//Otherwise, the new and the old position are the same
					if (aOldContent[i].id == aNewContent[i].id) {
						oldIndex = i;
					} else {
						oldIndex = getCardIndexInArray(aOldContent, aNewContent[i].id);
					}

					if (aNewContent[i].visibility != aOldContent[oldIndex].visibility) {
						if (aNewContent[i].visibility === true) {
							var oCard = this._getCardFromManifest(aNewContent[i].id);
							if (oCard) {
								this.createLoadingCard(oCard);
								oCard.settings.baseUrl = this._getBaseUrl();
								this._initCardModel(oCard.model);
								this._loadCardComponent(oCard.template);
								this.createCard(oCard);
							}
						} else {
							var oOldComponentContainer = this.getView().byId(aNewContent[i].id);
							var oOldCard = oOldComponentContainer.getComponentInstance();
							if (oOldCard) {
								oOldCard.destroy();
							}
						}
					}
				}
			}

			function cardTitleFormatter(id) {
				var oCard = this._getCardFromManifest(id);
				var cardSettings = oCard.settings;
				if (cardSettings.title) {
					return cardSettings.title;
				} else if (cardSettings.category) {
					return (cardSettings.category);
				} else if (cardSettings.subTitle) {
					return cardSettings.subTitle;
				}
				return id;
			}

			var oCardsTableTemplate = new sap.m.ColumnListItem({
				cells: [
					new sap.m.Text({
						text: {
							path: "id",
							formatter: cardTitleFormatter.bind(this)
						}
					}),
					new sap.m.Switch({
						state: "{visibility}",
						customTextOff: " ",
						customTextOn: " ",
						change: function(event) {
							var parent = event.oSource.getParent();
							parent.toggleStyleClass('sapOVPHideCardsTableItem');
							parent.getCells()[0].toggleStyleClass('sapOVPHideCardsDisabledCell');
						},
						tooltip: this._getLibraryResourceBundle().getText("hideCards_switchTooltip")
					})
				]
			});

			var oCardsTable = new sap.m.Table("sapOVPHideCardsTable", {
				backgroundDesign: sap.m.BackgroundDesign.Transparent,
				showSeparators: sap.m.ListSeparators.Inner,
				columns: [
					new sap.m.Column({
						vAlign: "Middle"
					}),
					new sap.m.Column({
						hAlign: sap.ui.core.TextAlign.Right,
						vAlign: "Middle",
						width: "4.94rem"
					})
				]
			});
			oCardsTable.addStyleClass('sapOVPHideCardsTable');
			oCardsTable.bindItems({
				path: "/cards",
				template: oCardsTableTemplate
			});

			var oOrigOnAfterRendering = oCardsTable.onAfterRendering;
			oCardsTable.onAfterRendering = function(event) {
				oOrigOnAfterRendering.apply(oCardsTable, arguments);

				var items = event.srcControl.mAggregations.items;
				if (items) {
					for (var i = 0; i < items.length; i++) {
						if (!items[i].getCells()[1].getState()) {
							items[i].addStyleClass('sapOVPHideCardsTableItem');
							items[i].getCells()[0].addStyleClass('sapOVPHideCardsDisabledCell');
						}
					}
				}
				setTimeout(function() {
					jQuery('.sapMListTblRow').first().focus();
				}, 200);
			};

			var oSaveButton = new sap.m.Button("manageCardsokBtn", {
				text: this._getLibraryResourceBundle().getText("okBtn"),
				press: function() {
					var aDialogCards = this.oDialog.getModel().getProperty('/cards');
					createOrDestroyCards.apply(this, [this.aOrderedCards, aDialogCards]);
					this.aOrderedCards = aDialogCards;
					this._updateDashboardLayoutCards(this.aOrderedCards);
					this._updateLayoutWithOrderedCards();
					this.saveVariant();
					this.oDialog.close();
				}.bind(this)
			});

			var oCancelButton = new sap.m.Button("manageCardsCancelBtn", {
				text: this._getLibraryResourceBundle().getText("cancelBtn"),
				press: function() {
					this.oDialog.close();
				}.bind(this)
			});

			var oResetButton = new sap.m.Button("manageCardsResetBtn", {
				text: this._getLibraryResourceBundle().getText("resetBtn"),
				press: function() {
					sap.m.MessageBox.show(this._getLibraryResourceBundle().getText("reset_cards_confirmation_msg"), {
						id: "resetCardsConfirmation",
						icon: sap.m.MessageBox.Icon.QUESTION,
						title: this._getLibraryResourceBundle().getText("reset_cards_confirmation_title"),
						actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
						onClose: function(oAction) {
							if (oAction === sap.m.MessageBox.Action.OK) {
								this.smartVariandManagement.getVariantsInfo(function(aVariants) {
									var oPersonalisationVariantKeys = null;
									if (aVariants && aVariants.length > 0) {
										oPersonalisationVariantKeys = aVariants[0].key;
										this.smartVariandManagement.fireManage({
											deleted: [oPersonalisationVariantKeys]
										});
									}
									createOrDestroyCards.apply(this, [this.aOrderedCards, this.aManifestOrderedCards]);
									this.aOrderedCards = this.aManifestOrderedCards;
									this._resetDashboardLayout();
									this._updateDashboardLayoutCards(this.aOrderedCards);
									this._updateLayoutWithOrderedCards();
									this.oDialog.close();
								}.bind(this));
							}
						}.bind(this)
					});
				}.bind(this)
			});

			this.oDialog = new sap.m.Dialog({
				title: this._getLibraryResourceBundle().getText("hideCardsBtn_title"),
				contentWidth: "29.6rem",
				contentHeight: "50%",
				stretch: sap.ui.Device.system.phone,
				content: oCardsTable,
				buttons: [oResetButton, oSaveButton, oCancelButton],
				afterClose: function() {
					this.oDialog.destroy();
				}.bind(this)
			}).addStyleClass("sapOVPCardsVisibilityDialog");

			var oDialogCardsModel = jQuery.extend(true, [], this.aOrderedCards);
			oModel = new sap.ui.model.json.JSONModel({
				cards: oDialogCardsModel
			});
			this.oDialog.setModel(oModel);

			this.oDialog.open();
		},

		isDragAndDropEnabled: function() {
			return !sap.ui.Device.system.phone;
		},

		getGlobalFilter: function() {
			if (!this.oGlobalFilter) {
				this.oGlobalFilter = this.getView().byId("ovpGlobalFilter");
			}
			return this.oGlobalFilter;
		},

        _parseNavigationVariant: function () {
            this.oNavigationHandler = this.oNavigationHandler || new sap.ui.generic.app.navigation.service.NavigationHandler(this);
            this.oParseNavigationPromise = this.oNavigationHandler.parseNavigation();
            jQuery.sap.require("sap.ovp.cards.CommonUtils");
            sap.ovp.cards.CommonUtils.enable(this, this.oNavigationHandler);
        },

		_setNavigationVariantToGlobalFilter: function (oAppData, oURLParameters, sNavType) {
            if (sNavType === "iAppState") {
                var oGlobalFilter = this.getGlobalFilter();
                if (oGlobalFilter) {
                    //var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
                    var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant(oAppData.selectionVariant);
                    var aSelectionVariantProperties = oSelectionVariant.getParameterNames().concat(oSelectionVariant.getSelectOptionsPropertyNames());
                    for (var i = 0; i < aSelectionVariantProperties.length; i++) {
                        oGlobalFilter.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
                    }
                }
            }
        }

		/* Appstate */
		/*
		getCurrentAppState: function() {
			var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant(this.oState.oSmartFilterbar.getDataSuiteFormat());
			return {
				selectionVariant: oSelectionVariant.toJSONString()
			};
		},

		storeCurrentAppStateAndAdjustURL: function(oCurrentAppState) {
			// oCurrentAppState is optional
			// - nothing, if NavigationHandler not available
			// - adjusts URL immediately
			// - stores appState for this URL (asynchronously)
			oCurrentAppState = oCurrentAppState || this.getCurrentAppState();
			try {
				var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(this);
				oNavigationHandler.storeInnerAppState(oCurrentAppState);
			} catch (err) {
				jQuery.sap.log.error("OVP.storeCurrentAppStateAndAdjustURL: " + err);
			}
		},

		onSearchButtonPressed: function() {
			//store navigation context
			this.storeCurrentAppStateAndAdjustURL();
		}
		*/
		/* Appstate */
	});
}());

}; // end of sap/ovp/app/Main.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.analytical.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.analytical.Component");
	
	
	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.charts.analytical.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.generic.KPIHeader"
				},
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.analytical.analyticalChart"
				}
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m","sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.analytical.analyticalChart"
					}
				}
			}
		},

		onAfterRendering: function() {
			jQuery(".tabindex0").attr("tabindex", 0);
		}
	});
})();

}; // end of sap/ovp/cards/charts/analytical/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.generic.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.generic.Component");
	
	
	
	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.charts.generic.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.generic.KPIHeader"
				},
				"selectionAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.SelectionVariant"
				},
				"chartAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Chart"
				},
				"presentationAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.PresentationVariant"
				},
				"identificationAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Identification"
				},
				"dataPointAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.DataPoint"
				}
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m" ],
				components: []
			},
			config: {}
		},

		addTabindex: function() {
			jQuery(".tabindex0").attr("tabindex", 0);
		},

		onAfterRendering: function() {
			this.addTabindex();
		}
	});
})();

}; // end of sap/ovp/cards/charts/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.line.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.line.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.line.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.line.LineChart"
				}
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m","sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.line.LineChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/line/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Stack.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.stack.Stack.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    
    

    sap.ui.controller("sap.ovp.cards.stack.Stack", {
        onInit: function () {
            var oVbox = this.getView().byId("stackContent");
            oVbox.addEventDelegate({
                onclick: this.openStack.bind(this),
                //when space or enter is pressed on stack card, we open ObjectStream
                onkeydown: function (oEvent) {
                    if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                        oEvent.preventDefault();
                        this.openStack();
                    }
                }.bind(this)
            });
        },
        onExit: function() {
            if (this.oObjectStream) {
                this.oObjectStream.destroy();
            }
        },

        onAfterRendering: function () {
            var oView = this.getView();
            var oModel = oView.getModel();
            var oCardPropsModel = oView.getModel("ovpCardProperties");
            var sEntitySet = oCardPropsModel.getProperty("/entitySet");
            var oObjectStreamCardsSettings = oCardPropsModel.getProperty("/objectStreamCardsSettings");
            var oMetaModel = oModel.getMetaModel();
            var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
            var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

            //in order to support auto expand, the annotationPath property contains a "hint" to the
            //annotaionPath of the stack card content. There might be more then 1 annotationPath value due to support of Facets
            var sAnnotationPath = oCardPropsModel.getProperty("/annotationPath");
            var aAnotationPath = (sAnnotationPath) ? sAnnotationPath.split(",") : [];

            function getSetting(sKey){
                if (sKey === "ovpCardProperties"){
                    return oCardPropsModel;
                } else if (sKey === "dataModel"){
                    return oModel;
                } else if (sKey === "_ovpCache"){
                    return {};
                }
            }
            var aFormatItemsArguments = [{getSetting: getSetting, bDummyContext: true}, oEntitySet].concat(aAnotationPath);
            var sBindingInfo = sap.ovp.cards.AnnotationHelper.formatItems.apply(this,aFormatItemsArguments);
            var oBindingInfo = sap.ui.base.BindingParser.complexParser(sBindingInfo);

            var sObjectStreamCardsNavigationProperty = oCardPropsModel.getProperty("/objectStreamCardsNavigationProperty");
            var bStackFlavorAssociation = sObjectStreamCardsNavigationProperty ? true : false;
            var oStackFilterMapping;
            var sObjectStreamCardsTemplate = oCardPropsModel.getProperty("/objectStreamCardsTemplate");


            // if we are in the association-flavor scenario we need to determine bot filter AND entity set for the object stream cards
            if (bStackFlavorAssociation) {
                if (sObjectStreamCardsTemplate === "sap.ovp.cards.quickview"){
                    jQuery.sap.log.error("objectStreamCardsTemplate cannot be 'sap.ovp.cards.quickview' when objectStreamCardsNavigationProperty is provided");
                    this.setErrorState();
                    return;
                }

                oStackFilterMapping =  this._determineFilterPropertyId(oModel, oEntitySet, oEntityType, sObjectStreamCardsNavigationProperty);
                oObjectStreamCardsSettings.entitySet = oModel.getMetaModel().getODataAssociationSetEnd(oEntityType, sObjectStreamCardsNavigationProperty).entitySet;
            } else {
                if (sObjectStreamCardsTemplate !== "sap.ovp.cards.quickview"){
                    jQuery.sap.log.error("objectStreamCardsTemplate must be 'sap.ovp.cards.quickview' when objectStreamCardsNavigationProperty is not provided");
                    this.setErrorState();
                    return;
                }
                // we are in the regular scenario (QuickView cards for collection entities)
                if (oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] &&
                    oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName &&
                    oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String) {
                    oObjectStreamCardsSettings.title = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
                } else {
                    oObjectStreamCardsSettings.title = oEntityType.name;
                }
                oObjectStreamCardsSettings.entitySet = sEntitySet;
            }



            oBindingInfo.factory = function (sId, oContext) {
                var oSettings = oObjectStreamCardsSettings, oFilters;

                if (bStackFlavorAssociation) {

                    oFilters = {
                        filters : [{
                                path : oStackFilterMapping.foreignKey,
                                operator: "EQ",
                                value1: oContext.getProperty(oStackFilterMapping.key)
                    }]};

                    oSettings = jQuery.extend(oFilters, oObjectStreamCardsSettings);
                }


                var oComponent = sap.ui.component({
                    name: oCardPropsModel.getProperty("/objectStreamCardsTemplate"),
                    componentData: {
                        model: oModel,
                        settings: oSettings
                    }
                });

                var oi18nModel = oView.getModel("@i18n");
                if (oi18nModel) {
                    oComponent.setModel(oi18nModel, "@i18n");
                }

                var oCardComp = new sap.ui.core.ComponentContainer({component: oComponent});
                /* we need to override the setBindingContext method as from some reason
                 * when calling it on the container its not set on the inner component
                 */
                oCardComp.setBindingContext = function(oContext){
                    oComponent.setBindingContext(oContext);
                };
                return oCardComp;
            };


            this.oObjectStream = new sap.ovp.ui.ObjectStream({
                title: oCardPropsModel.getObject("/category"),
                content: oBindingInfo
            });
            //this.getView().addDependent(this.oObjectStream);
            this.oObjectStream.setModel(oModel);

            // place holder card is relevant only for the regular Stack-Card flavor (not the AssociationSet flavor)
            if (!bStackFlavorAssociation) {
                //Check if we have navigate target, if there is create placeHolder card and set it
                var aNavigationFields = this.getEntityNavigationEntries();
                if (aNavigationFields.length > 0) {
                    var sAppName = aNavigationFields[0].label;
                    var oPlaceHolder = this._createPlaceHolder(sAppName);
                    var that = this;

                    oPlaceHolder.addEventDelegate({
                        onclick: function () {
                            that.doNavigation(null);
                        }
                    });

                    this.oObjectStream.setPlaceHolder(oPlaceHolder);
                }
            }


            var oListBinding = this.oObjectStream.getBinding("content");
            oListBinding.attachDataReceived(function () {
                var nCardCount = oListBinding.getCurrentContexts().length;
                oView.byId("stackSize").setText(nCardCount);
                var stackContentDomRef = this.getView().byId("stackContent").getDomRef();
                jQuery(stackContentDomRef).attr("aria-label", sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("stackCardContent", [nCardCount]));
                var stackSizeDomRef = this.getView().byId("stackSize").getDomRef();
                jQuery(stackSizeDomRef).attr("aria-label", sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("stackCard", [nCardCount]));
            }, this);
        },

        _determineFilterPropertyId : function(oModel, oEntitySet, oEntityType, sNavigationProperty) {
            var oNavigationProperty, ns = oEntityType.namespace, sRelationshipName, oAssociation;

            // find the relevant navigation property on the entity type
            for (var i = 0; i < oEntityType.navigationProperty.length; i++) {
                if (oEntityType.navigationProperty[i].name === sNavigationProperty) {
                    oNavigationProperty = oEntityType.navigationProperty[i];
                    break;
                }
            }

            // find the Association ID / object which is the navigation property relationship member
            sRelationshipName = oNavigationProperty.relationship;
            oAssociation = sap.ovp.cards.AnnotationHelper.getAssociationObject(oModel, sRelationshipName, ns);

            // find the filter value for stack card - by looking at the Association Object
            var oRefs = oAssociation.referentialConstraint, filterMapping = {};
            if (oRefs) {
                filterMapping.foreignKey = oRefs.dependent.propertyRef[0].name;
                filterMapping.key = oRefs.principal.propertyRef[0].name;
                return filterMapping;
            }
        },

        _createPlaceHolder: function (sAppName) {

            var iIcon = new sap.ui.core.Icon({
                src: "sap-icon://offsite-work",
                useIconTooltip: false,
                layoutData: new sap.m.FlexItemData({growFactor : 1, alignSelf: sap.m.FlexAlignSelf.Center})
            });

            iIcon.addStyleClass("sapOvpStackPlaceHolderIcon");

            var lbAppName = new sap.m.Label({text: sAppName});
            var strText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("ForMoreContentAppName", [sAppName]);
            var txtText = new sap.m.Text({text: strText});
            txtText.addCustomData(new sap.ovp.ui.CustomData({
                key: "role",
                value: "heading",
                writeToDom: true
            }));
            txtText.addCustomData(new sap.ovp.ui.CustomData({
                key: "aria-label",
                value: strText,
                writeToDom: true
            }));

            lbAppName.addStyleClass("sapOvpStackPlaceHolderAppName");
            txtText.addStyleClass("sapOvpStackPlaceHolderTextLine");

            var oDivVbox = new sap.m.VBox({items: [lbAppName, txtText]});
            oDivVbox.addStyleClass("sapOvpStackPlaceHolderLabelsContainer");
            oDivVbox.addCustomData(new sap.ovp.ui.CustomData({
                key: "tabindex",
                value: "0",
                writeToDom: true
            }));
            oDivVbox.addCustomData(new sap.ovp.ui.CustomData({
                key: "role",
                value: "button",
                writeToDom: true
            }));

            var oVbox = new sap.m.VBox({items: [iIcon, oDivVbox]});
            oVbox.addStyleClass("sapOvpStackPlaceHolder");
            oVbox.addEventDelegate({
                //when space or enter is pressed on Placeholder, we trigger click
                onkeydown: function (oEvent) {
                    if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                        oEvent.preventDefault();
                        oEvent.srcControl.$().click();
                    }
                }
            });
            return oVbox;
        },

        openStack: function () {
            if (this.oObjectStream){
                var oListBinding = this.oObjectStream.getBinding("content");
                if (oListBinding.getCurrentContexts().length > 0){
                    var cardWidth = this.getView().$().width();
                    this.getView().addDependent(this.oObjectStream);
                    this.oObjectStream.setModel(this.getView().getModel("@i18n"), "@i18n");
                    this.oObjectStream.open(cardWidth);
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/stack/Stack.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayout') ) {
/*!
 * ${copyright}
 */

/*global sap window*/
jQuery.sap.declare('sap.ovp.ui.DashboardLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/DashboardLayout",["jquery.sap.global", "sap/ovp/ui/DashboardLayoutModel", "sap/ovp/ui/DashboardLayoutUtil",
		"sap/ovp/ui/DashboardLayoutRearrange"
	],
	function(jQuery, DashboardLayoutModel, DashboardLayoutUtil, DashboardLayoutRearrange) {
		"use strict";

		var DashboardLayout = sap.ui.core.Control.extend("sap.ovp.ui.DashboardLayout", {

			metadata: {
				library: "sap.ovp",
				aggregations: {
					content: {
						type: "sap.ui.core.Control",
						multiple: true,
						singularName: "content"
					}
				},
				defaultAggregation: "content",
				events: {
					afterRendering: {},
					afterDragEnds: {}
				},
				properties: {
					dragAndDropRootSelector: {
						group: "Misc",
						type: "string"
					},
					dragAndDropEnabled: {
						group: "Misc",
						type: "boolean",
						defaultValue: true
					},
					debounceTime: {
						group: "Misc",
						type: "sap.ui.core/int",
						defaultValue: 150
					}
				}
			},

			renderer: {

				render: function(oRm, oControl) {

					// get viewport width depending layout data
					var ctrlWidth = oControl.$().width();

					var oLayoutData = oControl.dashboardLayoutUtil.updateLayoutData(ctrlWidth ? ctrlWidth : jQuery(window).width());
					var aCards = oControl.dashboardLayoutUtil.getCards(oLayoutData.colCount);

					var filteredItems = oControl.getContent().filter(function(item) {
						return item.getVisible();
					});

					oRm.write("<div");
					oRm.writeControlData(oControl);
					oRm.addClass("sapUshellEasyScanLayout");
					if (!sap.ui.Device.system.phone){
					    oRm.addClass("sapOvpDashboardDragAndDrop");
					}
					oRm.writeClasses();
					oRm.addStyle("margin-left", oLayoutData.marginPx + "px");
					oRm.writeStyles();
					oRm.write(">");

					oRm.write("<div class='sapUshellEasyScanLayoutInner' tabindex='0'>");

					if (aCards.length > 0) {
						var card = {};
						filteredItems.forEach(function(item) {
							card = aCards.find(function(element) {
								return element.id === this.getId().split("--")[1];
							}.bind(item));

							//re-set css values for current card
							oControl.dashboardLayoutUtil.setCardCssValues(card);

							if (!sap.ui.Device.support.touch) {
							    oRm.write("<div id='" + oControl.dashboardLayoutUtil.getCardDomId(card.id) +
									//padding: 1rem; vs. border: 0.5rem solid transparent
									"' class='easyScanLayoutItemWrapper sapOvpDashboardLayoutItem' style='top:" + card.dashboardLayout.top +
									"; left:" + card.dashboardLayout.left + "; height:" + card.dashboardLayout.height +
									"; width:" + card.dashboardLayout.width + ";'>");

							} else { //this is a workaround since UI5 do not yet provide a touch device information
							oRm.write("<div id='" + oControl.dashboardLayoutUtil.getCardDomId(card.id) +
									//padding: 1rem; vs. border: 0.5rem solid transparent
									"' class='easyScanLayoutItemWrapper sapOvpDashboardLayoutItem sapOvpDashboardLayoutItemTouch' style='top:" + card.dashboardLayout
									.top +
									"; left:" + card.dashboardLayout.left + "; height:" + card.dashboardLayout.height +
									"; width:" + card.dashboardLayout.width + ";'>");
							}

							oRm.renderControl(item);

							oRm.write("</div>");
						});
					}

					oRm.write("</div>");
					oRm.write("</div>");
				}
			},

			init: function() {
				//this.data("sap-ui-fastnavgroup", "true", true);
				this.oColumnLayoutData = {};
				this.resizeHandlerId = this.initResizeHandler();

				var oComponent = sap.ui.getCore().getComponent(this._sOwnerId);
				this.dashboardLayoutUtil = oComponent.getDashboardLayoutUtil();
				this.dashboardLayoutUtil.setLayout(this);
			},

			onBeforeRendering: function() {},

			onAfterRendering: function() {

				if (!this.getDragAndDropRootSelector()) {
					this.setDragAndDropRootSelector("#" + this.getId());
				}
				if (this.layoutDragAndDrop) {
					this.layoutDragAndDrop.destroy();
				}
				if (this.getDragAndDropEnabled()) {

					this.layoutDragAndDrop = this.dashboardLayoutUtil.getRearrange({
						//afterReplaceElements: this.afterDragAndDropHandler.bind(this),
						rootSelector: this.getDragAndDropRootSelector(),
						layout: this
					});

					this.fireAfterRendering();
				}
			},

			/** 
			 * get the DashboardLayout variants in JSON format
			 * @method getLayoutVariantsJSON
			 * @returns {Object} JSON containing the layout variants
			 */
			getLayoutDataJSON: function() {
				//JSON.stringify(...?
				return this.dashboardLayoutUtil.getDashboardLayoutModel().getLayoutVariants4Pers();
			},

			getDashboardLayoutUtil: function() {
				return this.dashboardLayoutUtil;
			},

			getDashboardLayoutModel: function() {
				return this.dashboardLayoutUtil.getDashboardLayoutModel();
			},

			getVisibleLayoutItems: function() {
				//layout items could be hidden, so we filter them and receive only visible
				var content = this.getContent();
				var filteredItems = content.filter(function(item) {
					return item.getVisible();
				});
				return filteredItems;
			},

			initResizeHandler: function() {
				var resizeHandlerTimerId;
				var debounceTime = this.getDebounceTime();
				var resizeHandlerDebounce = function(evt) {
					window.clearTimeout(resizeHandlerTimerId);
					resizeHandlerTimerId = window.setTimeout(this.oControl.resizeHandler.bind(this, evt), debounceTime);
				};

				return sap.ui.core.ResizeHandler.register(this, resizeHandlerDebounce);
			},

			resizeHandler: function(evt) {
				this.oControl.dashboardLayoutUtil.resizeLayout(evt.size.width);
			}

		});

		return DashboardLayout;

	}, /* bExport= */
	true);
}; // end of sap/ovp/ui/DashboardLayout.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.bubble.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.bubble.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.bubble.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.bubble.BubbleChart"
				}
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m","sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.bubble.BubbleChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/bubble/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.donut.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.donut.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.donut.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.donut.DonutChart"
				}
			},

			version: "1.38.10",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m","sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.donut.DonutChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/donut/Component.js
