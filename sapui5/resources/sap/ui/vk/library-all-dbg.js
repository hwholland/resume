// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.vk.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerBaseRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ContainerBaseRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ContainerBaseRenderer",function() {
	"use strict";

	/**
	 * @class ContainerBase renderer.
	 * @static
	 */
	var ContainerBaseRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ContainerBaseRenderer.render = function(oRm, oControl) {
		// console.log( "sap.ui.vk.ContainerBaseRenderer.render.....\r\n");

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiVkContainerBase");
		oRm.writeClasses(oControl);
		oRm.write(">");

		// wrapper
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-wrapper");
		oRm.addClass("sapUiVkContainerBaseWrapper");
		oRm.writeClasses();
		oRm.write(">");	
		
		this.writeContentArea(oRm, oControl);
		
		this.writeToolbarArea(oRm, oControl);
		
		oRm.write("</div>"); // end wrapper	

		oRm.write("</div>");
	};
	
	ContainerBaseRenderer.writeContentArea = function(oRm, oControl) {
		// content part
		var selectedContent = oControl.getSelectedContent();
		
		oRm.write("<div");
		oRm.addClass("sapUiVkContainerBaseContentArea");
		oRm.writeClasses();
		oRm.write(">");

		if (selectedContent !== null) {
			oRm.renderControl(selectedContent);
		} else if (oControl.getContent().length > 0) {
			selectedContent = oControl.getContent()[0];
			oRm.renderControl(selectedContent);
		}

		oRm.write("</div>");// end contentArea		
	};
	
	ContainerBaseRenderer.writeToolbarArea = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapUiVkContainerBaseToolbarArea");
		oRm.writeClasses();
		oRm.write(">");
		// toolbar
		oRm.renderControl(oControl._oToolbar);
		oRm.write("</div>");// end toolbar			
	};

	return ContainerBaseRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ContainerBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerContentRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ContainerContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ContainerContentRenderer",function() {
	"use strict";

	/*
	 * @class ContainerContent renderer. @static
	 */
	var ContainerContentRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ContainerContentRenderer.render = function(oRm, oControl) {
		//just render the embedded control as it is. The purpose is to only provide extra properties.
		oRm.renderControl(oControl.getContent());
	};

	return ContainerContentRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ContainerContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DvlException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides an exception class for DVL errors.
jQuery.sap.declare('sap.ui.vk.DvlException'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Exception'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DvlException",[
	"jquery.sap.global", "sap/ui/base/Exception"
], function(jQuery, Exception) {
	"use strict";

	/**
	 * This exception is thrown, when an error occurs in DVL API.
	 *
	 * @class
	 *
	 * @param {sap.ve.dvl.DVLRESULT} code The error code.
	 * @param {string} message The error message.
	 * @private
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.Exception
	 * @alias sap.ui.vk.DvlException
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DvlException = function(code, message) {
		this.name = "DvlException";
		this.code = code;
		this.message = message;
	};
	DvlException.prototype = jQuery.sap.newObject(Exception.prototype);

	return DvlException;
});

}; // end of sap/ui/vk/DvlException.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides default renderer for control sap.ui.vk.FlexibleControl
jQuery.sap.declare('sap.ui.vk.FlexibleControlRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * vk/FlexibleControl renderer.
	 * @namespace
	 */
	var FlexibleControlRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FlexibleControlRenderer.render = function(oRenderManager, oFlexibleControl){
		// convenience variable
		var rm = oRenderManager;

		// write the HTML into the render manager
		rm.write("<div");
		rm.writeControlData(oFlexibleControl);
		rm.addClass("sapUiFlexControl");

		if (oFlexibleControl.getWidth() && oFlexibleControl.getWidth() != '') {
			rm.addStyle("width", oFlexibleControl.getWidth());
		}
		if (oFlexibleControl.getHeight() && oFlexibleControl.getHeight() != '') {
			rm.addStyle("height", oFlexibleControl.getHeight());
		}

		rm.writeStyles();
		rm.writeClasses();
		rm.write(">"); // DIV element

		// render content
		var aContent = oFlexibleControl.getContent();
		var layout = oFlexibleControl.getLayout();

		var cellClass = "sapUiFlexCellStacked";

		if (layout == "Vertical") {
			cellClass = "sapUiFlexCellVertical";
		}

		for ( var i = 0; i < aContent.length; i++) {
			var content = aContent[i];

			rm.write("<div id=\"" + oFlexibleControl.getId() + "Content_" + i + "\" class=\"" + cellClass + "\"");

			var layoutData = content.getLayoutData();
			if (layoutData && layout != "Stacked") {
				rm.write(" style=\"");

				if (layoutData.getSize() && layoutData.getSize() != '') {
					rm.write("height: " + layoutData.getSize() + ";");
				}
				if (layoutData.getMinSize() && layoutData.getMinSize() != '') {
					rm.write("min-height: " + layoutData.getMinSize() + ";" );
				}
				if (layoutData.getMarginTop() && layoutData.getMarginTop() != '') {
					rm.write("margin-top: " + layoutData.getMarginTop() + ";" );
				}
				if (layoutData.getMarginBottom() && layoutData.getMarginBottom() != '') {
					rm.write("margin-bottom: " + layoutData.getMarginBottom() + ";" );
				}

				rm.write("\"");
			}

			rm.write(">");
			rm.renderControl(content);
			rm.write("</div>");
		}

		rm.write("</div>");
	};

	return FlexibleControlRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceMouse') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDeviceMouse.
jQuery.sap.declare('sap.ui.vk.InputDeviceMouse'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceMouse",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";

	var Mouse = EventProvider.extend("sap.ui.vk.InputDeviceMouse", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._buttons = 0;
			this._buttonFlagsValue = 0;
			this._zoomOrigin = {
				x: 0,
				y: 0
			};
			
		}
	});

	Mouse.prototype._buttonFlags = function(button, down) {
		if (down) {
			this._buttonFlagsValue |= (1 << button);
		} else {
			this._buttonFlagsValue &= ~(1 << button);
		}

		return this._buttonFlagsValue;
	};
	
	Mouse.prototype._eventToInput = function(event, buttonsOverride) {
		// Encapsulate HTML mouse event to Loco input event
		// "button" as bit mask: 1: left, 2: right, 4: middle, 8: Fourth, 16: Fifth, ...
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;
		if (buttonsOverride) {
			btn = buttonsOverride;
		}
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: 0,
			buttons: btn,
			scroll: event.wheelDelta,
			points: [],
			handled: false
		};
		var n = 0;

		switch (btn) {
			case 0: // Mouse up?
			case 1: // 1 finger pan
				n = 1;
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				break;
			case 3: // 2 fingers pan
			case 4:
			case 5: // Safari specific
				n = 2;
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				break;
			case 2: // 2 fingers zoom
				n = 2;
				input.points.push({
					x: this._zoomOrigin.x,
					y: event.pageY,
					z: 0
				});
				input.points.push({
					x: this._zoomOrigin.x,
					y: event.pageY + (this._zoomOrigin.y - event.pageY) * 2,
					z: 0
				});
				break;
			default:
				n = 0;
				break;
		}

		input.n = n;

		return input;
	};

	Mouse.prototype._onmouseup = function(event) {
		this._capturedByControl = true;
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, false);
		if (event._sapui_handledByControl) {
			return;
		}

		var input = this._eventToInput(event, this._buttons);
		this._loco.endGesture(input);

		if (btn == 2) {
			this._zoomOrigin.x = event.pageX;
			this._zoomOrigin.y = event.pageY;
		}

		var input = this._eventToInput(event);
		if (btn != 0) {
			input.handled = false;
			this._loco.beginGesture(input);
		}

		this._buttons = btn;

		if (input.handled) {
			event.preventDefault();
		}

		event._sapui_handledByControl = true;
	};

	//This method is called when we the mouseup event is fired.
	//When you hold and drag the left mouse button and release while outside
	//the area of Viewport/NativeViewport, Loco doesn't know the gesture ended.
	//This way, we attach a listener to the window so we can capture the mouseup all the time.
	//This method is fired after the regular "Mouse._prototype._onmouseup". We check if the mouseup event
	//was handled in that method. If not, than we call the _onmouseup method manually.
	//This fix is requiered because Loco gets confused when the mouseup event occurs outside
	//the Viewport/NativeViewport.
	Mouse.prototype._onmouseupWindowListener = function(event) {
		if (!this._capturedByControl) {
			this._onmouseup(event);
		}
		this._capturedByControl = false;
	};


	Mouse.prototype._onmousemove = function(event) {
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;

		if (event._sapui_handledByControl || btn == 0) {
			return;
		}

		//If it's a Mac computer, and the movement happens while the double-finger click is pressed,
		//then we turn it into a left-mouse + right-mouse button event so we can do pan gestures
		//as per requirements (requirements say that on mac, two finger click & drag performs panning).
		if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH && event.buttons === 2) {
			event.buttons = 3;
		}

		var input = this._eventToInput(event);
		this._loco.move(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Mouse.prototype._onmousedown = function(event) {
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, true);

		if (event._sapui_handledByControl) {
			return;
		}

		if (this._buttons != 0) {
			var input = this._eventToInput(event, this._buttons);
			this._loco.endGesture(input);
		}

		if (btn == 2) {
			this._zoomOrigin.x = event.pageX;
			this._zoomOrigin.y = event.pageY;
		}
		var input = this._eventToInput(event);

		input.handled = false;
		this._loco.beginGesture(input);
		this._prevButtons = btn;
		this._buttons = btn;

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Mouse.prototype._onmousewheel = function(ev) {
		var event = ev.originalEvent ? ev.originalEvent : ev;
		if (event._sapui_handledByControl || this._buttons != 0) {
			return;
		}

		this._zoomOrigin.x = event.pageX;
		this._zoomOrigin.y = event.pageY;

		var simevent = {
			pageX: event.pageX,
			pageY: event.pageY,
			buttons: 2,
			wheelDelta: event.wheelDelta
		};
		var input = this._eventToInput(simevent);
		this._loco.beginGesture(input);

		var delta = event.detail ? event.detail * (-40) : event.wheelDelta;

		simevent.pageY -= delta / 5;
		input = this._eventToInput(simevent);

		input.handled = false;
		this._loco.move(input);

		input.handled = false;
		this._loco.endGesture(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Mouse.prototype._oncontextmenu = function(event) {
		var input = this._eventToInput(event);

		this._loco.contextMenu(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Mouse.prototype.isSupported = function() {
		return true;
	};

	Mouse.prototype.enable = function(control) {
		this._buttonFlagsValue = 0;
		this._buttons = 0;
		this._mousedownProxy = this._onmousedown.bind(this);
		this._mouseupProxy = this._onmouseup.bind(this);
		this._mousemoveProxy = this._onmousemove.bind(this);
		this._mousewheelProxy = this._onmousewheel.bind(this);
		this._contextmenuProxy = this._oncontextmenu.bind(this);
		this._control = control;

		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('mousedown', this._mousedownProxy, false);
		func('mouseup', this._mouseupProxy, false);
		func('mousemove', this._mousemoveProxy, false);
		func('mousewheel', this._mousewheelProxy, false);
		func('DOMMouseScroll', this._mousewheelProxy, false);
		func("contextmenu", this._contextmenuProxy, false);
		window.document.addEventListener("mouseup", this._onmouseupWindowListener.bind(this));
	};

	Mouse.prototype.disable = function() {
		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('mousedown', this._mousedownProxy);
		func('mouseup', this._mouseupProxy);
		func('mousemove', this._mousemoveProxy);
		func('mousewheel', this._mousewheelProxy);
		func('DOMMouseScroll', this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.removeEventListener("mouseup", this._onmouseupWindowListener.bind(this));
	};

	return Mouse;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDeviceMouse.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDevicePointer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicPointer.
jQuery.sap.declare('sap.ui.vk.InputDevicePointer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDevicePointer",["jquery.sap.global", "sap/ui/base/EventProvider", "./InputDeviceMouse"], function(jQuery, EventProvider, InputDeviceMouse) {
	"use strict";

	var Pointer = EventProvider.extend("sap.ui.vk.InputDevicePointer", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._pointerIds = [];
			this._pointers = [];
			this._count = 0;
			this._points = 0;
			this._buttons = 0;
			this._mouse = new InputDeviceMouse(this._loco);
		}

	});


	Pointer.prototype._clearPointers = function() {
		this._pointerIds = [];
		this._pointers = [];
		this._count = 0;
		this._points = 0;
		this._buttons = 0;
	};

	Pointer.prototype._addPointer = function(id, _x, _y) {
		//jQuery.sap.log.debug("AddPointer[" + id + "]: " + _x + ", " + _y);

		if (this._pointerIds[id] == null) {
			this._pointerIds[id] = this._count;
		}

		var index = this._pointerIds[id];

		if (this._pointers.length <= index || this._pointers[index] == null) {
			this._count++;
		}

		this._pointers[index] = {
			x: _x,
			y: _y
		};

		return this._count;
	};

	Pointer.prototype._removePointer = function(id) {
		//jQuery.sap.log.debug("RemovePointer[" + id + "]");

		if (this._pointerIds[id] == null) {
			return this._count;
		}

		var index = this._pointerIds[id];
		this._pointerIds[id] = null;

		if (this._pointers.length > index && this._pointers[index] != null) {
			this._count--;
		}

		this._pointers[index] = null;

		return this._count;
	};

	Pointer.prototype._eventToInput = function(event) {
		// Encapsulate HTML pointer event to this._loco input event
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: this._count,
			buttons: 0,
			scroll: 0,
			points: [],
			handled: false
		};

		var tp = this._pointers;
		var l = tp.length;

		for (var i = 0; i < l; i++) {
			var ep = tp[i];

			if (ep != null) {
				input.points.push({
					x: ep.x,
					y: ep.y,
					z: 0
				});
			}
		}

		return input;
	};

	Pointer.prototype._onpointerdown = function(ev) {
		var event = ev.originalEvent ? ev.originalEvent : ev;

		if (event.pointerType != "touch" && event.pointerType != "pen") {
			this._buttons = event.buttons;
			this._mouse._onmousedown(event);
			return;
		}

		if (event.isPrimary) {
			this._clearPointers();
		}

		this._addPointer(event.pointerId, event.pageX, event.pageY);

		event.target.setPointerCapture(event.pointerId);

		var input = this._eventToInput(event);

		if (this._points != 0 && this._points != input.n) {
			this._loco.endGesture(input);
		}

		this._points = input.n;
		input.handled = false;
		this._loco.beginGesture(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		} else {
			this._removePointer(event.pointerId);
		}
	};

	Pointer.prototype._onpointerup = function(ev) {
		this._capturedByControl = true;

		var event = ev.originalEvent ? ev.originalEvent : ev;

		if (event.pointerType != "touch" && event.pointerType != "pen") {
			this._buttons = 0;
			this._mouse._onmouseup(event);
			return;
		}

		this._removePointer(event.pointerId);

		event.target.releasePointerCapture(event.pointerId);

		var input = this._eventToInput(event);

		this._loco.endGesture(input);

		if (input.n != 0 && this._points != input.n) {
			input.handled = false;
			this._loco.beginGesture(input);
		}

		this._points = input.n;

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	//This method is called when we the pointerup event is fired.
	//When you hold and drag the left mouse button and release while outside
	//the area of Viewport/NativeViewport, Loco doesn't know the gesture ended.
	//This way, we attach a listener to the window so we can capture the pointerup event all the time.
	//This method is fired after the regular "Pointer._prototype._onpointerup". We check if the pointerup event
	//was handled in that method. If not, we callthe _onpointerup method manually.
	//This fix is requiered because Loco gets confused when the pointerup event occurs outside
	//the Viewport/NativeViewport.
	Pointer.prototype._onpointerupWindowListener = function(event) {
		if (!this._capturedByControl) {
			this._onpointerup(event);
		}
		this._capturedByControl = false;
	};

	Pointer.prototype._onpointermove = function(ev) {
		if (ev.buttons !== 0) {
			var event = ev.originalEvent ? ev.originalEvent : ev;

			if (event.pointerType != "touch" && event.pointerType != "pen") {
				if (this._buttons != event.buttons) {
					this._mouse._onmousedown(event);
					this._buttons = event.buttons;
				} else {
					this._mouse._onmousemove(event);
				}
				return;
			}

			this._addPointer(event.pointerId, event.pageX, event.pageY);

			var input = this._eventToInput(event);

			if (this._points != input.n) {
				this._loco.endGesture(input);
				input.handled = false;
				this._loco.beginGesture(input);
				this._points = input.n;
			} else {
				this._loco.move(input);
			}

			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		}

	};

	Pointer.prototype.isSupported = function() {
		// Because of the Chrome 55 Pointer Events changes,
		// we need to disable the support for the pointers.
		return false;
		/*
		 * TO DO:
		 * Implement proper pointer support
		 */
	};

	Pointer.prototype.enable = function(control) {
		this._pointerIds = [];
		this._pointers = [];
		this._points = 0;
		this._count = 0;
		this._buttons = 0;
		this._mouse._buttons = 0;

		this._pointerdownProxy = this._onpointerdown.bind(this);
		this._pointerupProxy = this._onpointerup.bind(this);
		this._pointermoveProxy = this._onpointermove.bind(this);
		this._mousewheelProxy = this._mouse._onmousewheel.bind(this._mouse);
		this._contextmenuProxy = this._mouse._oncontextmenu.bind(this._mouse);
		this._control = control;
		this._mouse._control = control;

		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('pointerdown', this._pointerdownProxy, false);
		func('pointerup', this._pointerupProxy, false);
		func('pointermove', this._pointermoveProxy, false);
		func('mousewheel', this._mousewheelProxy, false);
		func('DOMMouseScroll', this._mousewheelProxy, false);
		func("contextmenu", this._contextmenuProxy, false);
		window.document.addEventListener("pointerup", this._onpointerupWindowListener.bind(this));
	};

	Pointer.prototype.disable = function() {
		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('pointerdown', this._pointerdownProxy);
		func('pointerup', this._pointerupProxy);
		func('pointermove', this._pointermoveProxy);
		func('mousewheel', this._mousewheelProxy);
		func('DOMMouseScroll', this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.removeEventListener("pointerup", this._onpointerupWindowListener.bind(this));
	};

	return Pointer;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDevicePointer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceSAPUI5') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicTouch.
jQuery.sap.declare('sap.ui.vk.InputDeviceSAPUI5'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceSAPUI5",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";

	var Touch = EventProvider.extend("sap.ui.vk.InputDeviceSAPUI5", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._points = 0;
		}
	});


	Touch.prototype._eventToInput = function(event) {
		// Encapsulate HTML touch event to this._loco input event
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: event.touches.length,
			buttons: 0,
			scroll: 0,
			points: [],
			handled: false
		};

		for (var i = 0; i < input.n; i++) {
			var et = event.touches[i];
			input.points.push({
				x: et.pageX,
				y: et.pageY,
				z: 0
			});
		}

		return input;
	};

	Touch.prototype._ontouchdown = function(event) {
		//if (event._sapui_handledByControl) {
		//	return;
		//}

		var input = this._eventToInput(event);

		if (this._points != 0 && this._points != input.n) {
			this._loco.endGesture(input);
		}

		this._points = input.n;
		input.handled = false;
		this._loco.beginGesture(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype._ontouchup = function(event) {
		//if (event._sapui_handledByControl) {
		//	return;
		//}

		var input = this._eventToInput(event);


		this._loco.endGesture(input);
		this._points = 0;

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype._ontouchmove = function(event) {
		//if (event._sapui_handledByControl) {
		//	return;
		//}

		var input = this._eventToInput(event);

		//console.log("points: " + input.n);
		if (this._points != input.n) {
			this._loco.endGesture(input);
			input.handled = false;
			this._loco.beginGesture(input);
			this._points = input.n;
		} else {
			this._loco.move(input);
		}

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype.isSupported = function() {
		return typeof window.ontouchstart !== 'undefined';
	};

	Touch.prototype.enable = function(control) {
		this._points = 0;
		this._touchdownProxy = this._ontouchdown.bind(this);
		this._touchupProxy = this._ontouchup.bind(this);
		this._touchmoveProxy = this._ontouchmove.bind(this);
		this._control = control;

		if (!this._control) {
			return;
		}
		control.attachBrowserEvent("saptouchstart", this._touchdownProxy, false);
		control.attachBrowserEvent("saptouchend", this._touchupProxy, false);
		control.attachBrowserEvent("saptouchmove", this._touchmoveProxy, false);
		control.attachBrowserEvent("touchstart", this._touchdownProxy, false);
		control.attachBrowserEvent("touchend", this._touchupProxy, false);
		control.attachBrowserEvent("touchmove", this._touchmoveProxy, false);
	};

	Touch.prototype.disable = function() {
		if (!this._control) {
			return;
		}
		this._control.detachBrowserEvent("saptouchstart", this._touchdownProxy, false);
		this._control.detachBrowserEvent("saptouchend", this._touchupProxy, false);
		this._control.detachBrowserEvent("saptouchmove", this._touchmoveProxy, false);
		this._control.detachBrowserEvent("touchstart", this._touchdownProxy, false);
		this._control.detachBrowserEvent("touchend", this._touchupProxy, false);
		this._control.detachBrowserEvent("touchmove", this._touchmoveProxy, false);
	};

	return Touch;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDeviceSAPUI5.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceTouch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicTouch.
jQuery.sap.declare('sap.ui.vk.InputDeviceTouch'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceTouch",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";

	var Touch = EventProvider.extend("sap.ui.vk.InputDeviceTouch", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._points = 0;
		}
	});


	Touch.prototype._eventToInput = function(event) {
		// Encapsulate HTML touch event to this._loco input event
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: event.touches.length,
			buttons: 0,
			scroll: 0,
			points: [],
			handled: false
		};

		for (var i = 0; i < input.n; i++) {
			var et = event.touches[i];
			input.points.push({
				x: et.pageX,
				y: et.pageY,
				z: 0
			});
		}

		return input;
	};

	Touch.prototype._ontouchdown = function(event) {
		var input = this._eventToInput(event);

		if (this._points != 0 && this._points != input.n) {
			this._loco.endGesture(input);
		}

		this._points = input.n;
		input.handled = false;
		this._loco.beginGesture(input);

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype._ontouchup = function(event) {
		var input = this._eventToInput(event);


		this._loco.endGesture(input);
		this._points = 0;

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype._ontouchmove = function(event) {
		var input = this._eventToInput(event);

		//console.log("points: " + input.n);
		if (this._points != input.n) {
			this._loco.endGesture(input);
			input.handled = false;
			this._loco.beginGesture(input);
			this._points = input.n;
		} else {
			this._loco.move(input);
		}

		if (input.handled) {
			event._sapui_handledByControl = true;
			event.preventDefault();
		}
	};

	Touch.prototype.isSupported = function() {
		return typeof window.ontouchstart !== 'undefined';
	};

	Touch.prototype.enable = function(control) {
		this._points = 0;
		this._touchdownProxy = this._ontouchdown.bind(this);
		this._touchupProxy = this._ontouchup.bind(this);
		this._touchmoveProxy = this._ontouchmove.bind(this);
		this._control = control;

		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('touchstart', this._touchdownProxy, false);
		func('touchend', this._touchupProxy, false);
		func('touchmove', this._touchmoveProxy, false);
	};

	Touch.prototype.disable = function() {
		var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func('touchstart', this._touchdownProxy);
		func('touchend', this._touchupProxy);
		func('touchmove', this._touchmoveProxy);
	};

	return Touch;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDeviceTouch.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LegendItemRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.LegendItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.StandardListItemRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LegendItemRenderer",['sap/m/StandardListItemRenderer', 'sap/ui/core/Renderer'], function(BaseItemRenderer, Renderer) {
	"use strict";

	/*
	 * @class Legend Item renderer. @static
	 */
	var LegendItemRenderer = Renderer.extend(BaseItemRenderer);


	
	LegendItemRenderer.renderLIContent = function(oRm, oControl) {
		var squareColor = oControl.getColor();
		var type = oControl.getSemanticSpotType();
		var oImg = null;
		if (squareColor) {
			oRm.write("<span");
			oRm.addClass("sapUiVkLegendItemSquare");
			oRm.addStyle("background-color", squareColor);
			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</span>");	
		}		
		if ( type ) {
			switch (type) {
				case sap.ui.vbm.SemanticType.Error:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Red.png");
					break;
				case sap.ui.vbm.SemanticType.Warning:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Orange.png");
					break;
				case sap.ui.vbm.SemanticType.Success:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Green.png");
					break;
				case sap.ui.vbm.SemanticType.Default:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Blue.png");
					break;
				case sap.ui.vbm.SemanticType.Inactive:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Grey.png");
					break;
				default:
					break;
			}
			if ( oImg ){
				oControl.addStyleClass("sapUiVkLegendItemSpotType");
				oControl.setIcon(oImg);
			}
		}		
		
		BaseItemRenderer.renderLIContent(oRm, oControl);
	};
	
	return LegendItemRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/LegendItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ListPanelRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ListPanelRenderer",function() {
	"use strict";

	/*
	 * @class ListPanel renderer. @static
	 */
	var ListPanelRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ListPanelRenderer.render = function(oRm, oControl) {
		// just render the internal Panel. The purpose is to only provide more specific properties.
		var oPanel = oControl._oPanel;
		oPanel.addStyleClass("sapUiVkListPanel");

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.write(">");
		oRm.renderControl(oPanel);
		oRm.write("</div>");

	};

	return ListPanelRenderer;

}, /* bExport= */true);
}; // end of sap/ui/vk/ListPanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelStackRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ListPanelStackRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ListPanelStackRenderer",function() {
	"use strict";

	/*
	 * @class Legend renderer. @static
	 */
	var ListPanelStackRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ListPanelStackRenderer.render = function(oRm, oControl) {
		oControl._oLayout.addStyleClass("sapUiVkListPanelStack");
		//render the internal Panel.
		oRm.renderControl(oControl._oLayout);
	};

	return ListPanelStackRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ListPanelStackRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Loco') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Loco.
jQuery.sap.declare('sap.ui.vk.Loco'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Loco",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "./InputDevicePointer", "./InputDeviceMouse", "./InputDeviceTouch"
], function(jQuery, EventProvider, InputDevicePointer, InputDeviceMouse, InputDeviceTouch) {
	"use strict";

	/**
	 * Constructor for a new Loco.
	 *
	 * @class
	 * Intercepts input event data for a SAPUI5 target, and interprets the data based on a supported set of gestures.
	 * @extends sap.ui.core.EventProvider
	 *
	 * @author SAP SE
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Loco
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Loco = EventProvider.extend("sap.ui.vk.Loco", {
		metadata: {
			publicMethods: [
			    "addHandler",
			    "removeHandler",
			    "beginGesture",
			    "move",
			    "endGesture",
			    "contextMenu"
			]
		},

		constructor: function() {
			if (Loco._instance) {
				return Loco._instance;
			}

			EventProvider.apply(this);
			/* Array of ViewportHandler object */
			this._handlers = [];
			this._gesture = false;

			/* Click, double-click simulation */
			this._touchOrigin = {
				x: 0,
				y: 0,
				z: 0
			};
			this._touchMoved = false;
			this._touchButton = 0;

			/* Tick and timer */
			this._touchStart = 0;
			this._touchEnd = 0;
			this._clickTimer = 0;
			this._isDoubleClick = false;

			Loco._instance = this;
		}
	});


	/**
	 * Cleans up, removes all handlers.
	 *
	 * @public
	 */
	Loco.prototype.destroy = function() {
		this._gesture = false;
		this._handlers = [];
	};

	/**
	 * Adds a viewport event handler from Loco.
	 *
	 * @param {handler} handler to be added.
	 *
	 * @public
	 */
	Loco.prototype.addHandler = function(handler) {
		this._handlers.push(handler);
		var viewport = handler.getViewport();

		var pointer = new InputDevicePointer(this);
		if (pointer.isSupported()) {
			pointer.enable(viewport);
			viewport._pointer = pointer;
		} else {
			var mouse = new InputDeviceMouse(this);
			if (mouse.isSupported()) {
				mouse.enable(viewport);
				viewport._mouse = mouse;
			}

			var touch = new InputDeviceTouch(this);
			if (touch.isSupported()) {
				touch.enable(viewport);
				viewport._touch = touch;
			}
		}
	};

	/**
	 * Removes a viewport event handler from Loco.
	 *
	 * @param {handler} handler to be removed.
	 *
	 * @public
	 */
	Loco.prototype.removeHandler = function(handler) {
		var h = this._handlers;
		var count = h.length;
		var viewport = handler.getViewport();

		for (var i = count - 1; i >= 0; i--) {
			if (h[i] == handler) {
				h.splice(i, 1);

				if (viewport._pointer) {
					viewport._pointer.disable();
					viewport._pointer = null;
				}

				if (viewport._touch) {
					viewport._touch.disable();
					viewport._touch = null;
				}

				if (viewport._mouse) {
					viewport._mouse.disable();
					viewport._mouse = null;
				}

				break;
			}
		}
	};

	/**
	 * @private
	 */
	Loco.prototype._processClick = function(dblclk) {
		this._clickTimer = 0;

		var event = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: 0,
			buttons: 0,
			scrolls: [],
			points: [],
			handled: false
		};
		event.x = this._touchOrigin.x;
		event.y = this._touchOrigin.y;
		event.z = this._touchOrigin.z;
		event.buttons = this._touchButton;

		var h = this._handlers;
		var count = h.length;

		for (var i = count - 1; i >= 0; i--) {
			if (dblclk) {
				var nativeViewportId = h[i]._viewport.getId();
				//We extract the parent viewer id.
				//if it exists, it has to be a string which ends in "-nativeViewport"
				var parentViewerId = /-nativeViewport$/.test(nativeViewportId) ? nativeViewportId.replace(/-nativeViewport$/, '') : null;
				//We get the parent viewer by id
				var parentViewer = sap.ui.getCore().byId(parentViewerId);
				//If the parent viewert exists, it has an overlay and also the overlay drawing is in progress,
				//then we don't send the double click event to the viewport handler.
				//We know the drawing is in progress because the mIACreateCB function is defined. If the drawing hasn't started
				//or it has already finished, that function is cleared and it becomes undefined.
				if (!parentViewer || !parentViewer.getOverlay() || !(typeof parentViewer.getOverlay().mIACreateCB === "function")) {
					h[i].doubleClick(event);
				}
			} else {
				h[i].click(event);
			}

			if (event.handled) {
				break;
			}
		}
	};

	/**
	 * @private
	 */
	Loco.prototype._processInput = function(event) {
		// Calculate action point (x, y, z) and distance (d)
		var eps = event.points;

		switch (event.n) {
			case 0:
				event.x = 0;
				event.y = 0;
				event.z = 0;
				event.d = 0;
				break;
			case 2:
				var dx = eps[0].x - eps[1].x,
					dy = eps[0].y - eps[1].y,
					dz = eps[0].z - eps[1].z;
				event.x = (eps[0].x + eps[1].x) / 2;
				event.y = (eps[0].y + eps[1].y) / 2;
				event.z = (eps[0].z + eps[1].z) / 2;
				event.d = Math.sqrt(dx * dx + dy * dy + dz * dz);
				break;
			default:
				event.x = eps[0].x;
				event.y = eps[0].y;
				event.z = eps[0].z;
				event.d = 0;
				break;
		}

		return event;
	};

	/**
	 * Signal begin of a input gesture.
	 *
	 * @param {event} JSON object including input event data.
	 *
	 * @public
	 */
	Loco.prototype.beginGesture = function(event) {
		if (this._gesture) {
			return;
		}

		if (this._clickTimer > 0) {
			clearTimeout(this._clickTimer);
			this._clickTimer = 0;
			this._isDoubleClick = true;

			if (event.n == 1 && event.buttons <= 1 && this._touchButton <= 1) {
				this._processClick(true);
			}
		}

		this._processInput(event);
		var h = this._handlers;
		var count = h.length;

		for (var i = count - 1; i >= 0; i--) {
			h[i].beginGesture(event);

			if (event.handled) {
				break;
			}
		}

		var now = new Date();
		this._touchStart = now.getTime();
		this._touchMoved = false;
		this._gesture = true;

		this._touchOrigin.x = event.x;
		this._touchOrigin.y = event.y;
		this._touchOrigin.z = event.z;
		this._touchButton = event.buttons;

		if (this._touchEnd != 0 && this._touchStart - this._touchEnd < 50) {
			this._touchMoved = true;
		}
	};

	/**
	 * Signal movement of a input gesture.
	 *
	 * @param {event} JSON object including input event data.
	 *
	 * @public
	 */
	Loco.prototype.move = function(event) {
		if (!this._gesture) {
			return;
		}

		this._processInput(event);
		var h = this._handlers;
		var count = h.length;

		for (var i = count - 1; i >= 0; i--) {
			h[i].move(event);

			if (event.handled) {
				break;
			}
		}

		var dx = this._touchOrigin.x - event.x;
		var dy = this._touchOrigin.y - event.y;
		var dz = this._touchOrigin.z - event.z;

		if ((dx * dx + dy * dy + dz * dz) > 8) {
			this._touchMoved = true;
		}
	};

	/**
	 * Signal end of a input gesture.
	 *
	 * @param {event} JSON object including input event data.
	 *
	 * @public
	 */
	Loco.prototype.endGesture = function(event) {
		if (!this._gesture) {
			return;
		}

		this._processInput(event);
		var h = this._handlers;
		var count = h.length;

		for (var i = count - 1; i >= 0; i--) {
			h[i].endGesture(event);

			if (event.handled) {
				break;
			}
		}

		var now = new Date();
		this._touchEnd = now.getTime();

		if (!this._touchMoved && !this._isDoubleClick && (this._touchEnd - this._touchStart) < 2000) {
			this._clickTimer = setTimeout(function(that) {
				that._processClick(false);
			}, 200, this);
		}

		this._isDoubleClick = false;
		this._gesture = false;
	};

	/**
	 * Signal context menu event.
	 *
	 * @param {event} JSON object including input event data
	 *
	 * @public
	 */
	Loco.prototype.contextMenu = function(event) {
		this._processInput(event);

		var h = this._handlers;
		var count = h.length;

		for (var i = count - 1; i >= 0; i--) {
			h[i].contextMenu(event);

			if (event.handled) {
				break;
			}
		}
	};

	return Loco;
}, /* bExport= */ true);

}; // end of sap/ui/vk/Loco.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.MapContainerRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.MapContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/MapContainerRenderer",[
	'./ContainerBaseRenderer', 'sap/ui/core/Renderer', 'sap/ui/Device'
], function(BaseContainerRenderer, Renderer, Device) {
	"use strict";

	/*
	 * @class MapContainer renderer. @static
	 */
	var MapContainerRenderer = Renderer.extend(BaseContainerRenderer);

	MapContainerRenderer.render = function(oRm, oControl) {
		oControl.addStyleClass("sapUiVkMapContainer");
		BaseContainerRenderer.render.apply(this, arguments);
	};

	MapContainerRenderer.writeToolbarArea = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapUiVkMapContainerOverlay");
		oRm.writeClasses();
		oRm.write(">");

		if (oControl.getShowNavbar()) {
			oRm.write("<div");
			oRm.addClass("sapUiVkMapContainerNavbarArea");
			oRm.writeClasses();
			oRm.write(">");
			// navbar
			oRm.renderControl(oControl._oNavbar);
			oRm.write("</div>");// end navbar
		}

		// list panel
		if (!Device.system.phone && oControl._shouldRenderListPanel) {
			oControl._oScrollCont.addStyleClass("sapUiVkMapContainerListPanelArea");
			oRm.renderControl(oControl._oScrollCont);
		}		

		BaseContainerRenderer.writeToolbarArea(oRm, oControl);

		oRm.write("</div>");// end map overlay
		
		if (Device.system.phone) {
			oRm.write("<div id=" + oControl.getId() + "-LPW");
			oRm.addClass("sapUiVkMapContainerLPW");
			oRm.writeClasses();
			oRm.write(">");	
			// close button
			oRm.renderControl(oControl._oMenuCloseButton);
			// list panel
			oControl._oScrollCont.addStyleClass("sapUiVkMapContainerListPanelArea");
			oRm.renderControl(oControl._oScrollCont);
			oRm.write("</div>");// end list panel container
		}
	};

	return MapContainerRenderer;

}, /* bExport= */true);
}; // end of sap/ui/vk/MapContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Messages') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides an exception class for DVL errors.
jQuery.sap.declare('sap.ui.vk.Messages'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Messages",[
	"jquery.sap.global", "sap/ui/base/ManagedObject"
], function (jQuery, ManagedObject) {
	"use strict";

	var Messages = ManagedObject.extend("sap.ui.vk.Messages", {
		metadata: {
			library: "sap.ui.vk"
		}
	});
	/**
	 * This exception is thrown, when an error occurs in DVL API.
	 *
	 * @class
	 *
	 * @param {sap.ve.dvl.DVLRESULT} code The error code.
	 * @param {string} message The error message.
	 * @private
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.Exception
	 * @alias sap.ui.vk.DvlException
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	Messages.prototype.init = function () {
		this.messages = {
			//NativeViepwort
			VIT1: {
				summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
				cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CAUSE",
				resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CHECKEXISTS_RESOLUTION",
				code: "VIT1"
			},
			VIT2: {
				summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
				cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CAUSE",
				resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CHECKEXISTS_RESOLUTION",
				code: "VIT2"
			},
			VIT3: {
				summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
				cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CAUSE",
				resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CHECKFILEFORMAT_RESOLUTION",
				code: "VIT3"
			},
			VIT4: {
				summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
				cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CAUSE",
				resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CHECKFILEFORMAT_RESOLUTION",
				code: "VIT4"
			},
			//DownloadManager
			VIT5: {
				summary : "DOWNLOADMANAGER_MSG_NOTBELOADED_SUMMARY",
				cause : "DOWNLOADMANAGER_MSG_NOTBELOADED_VALUESOURCEUNSUPPORTED_CAUSE",
				resolution : "DOWNLOADMANAGER_MSG_NOTBELOADED_VALUESOURCEUNSUPPORTED_CHECKSOURCEISURLORFILE_RESOLUTION",
				code: "VIT5"
			},
			//NodeHierarchy
			VIT6: {
				summary : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
				cause : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INVALIDQUERY_CAUSE",
				resolution : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INVALIDQUERY_SPECIFYVALUEPROPERTY_RESOLUTION",
				code : "VIT6"
			},
			VIT7: {
				summary : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
				cause : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_PREDICATENOTSPECIFIED_CAUSE",
				resolution : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_PREDICATENOTSPECIFIED_SPECIFYPREDICATE_RESOLUTION",
				code: "VIT7"
			},
			VIT8: {
				summary : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
				cause : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_CAUSE",
				resolution : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_INVALIDPREDICATE_RESOLUTION",
				code: "VIT8"
			},
			VIT9: {
				summary : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
				cause : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_CAUSE",
				resolution : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_INVALIDPREDICATE_RESOLUTION",
				code: "VIT9"
			},
			VIT10: {
				summary : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
				cause : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_NOMETADATASPECIFIED_CAUSE",
				resolution : "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_NOMETADATASPECIFIED_SPECIFYMETADATACATEGORY_RESOLUTION",
				code: "VIT10"
			},
			//Overlay
			VIT11: {
				summary : "OVERLAY_MSG_EVENTHANDLERFAILED_SUMMARY",
				cause : "OVERLAY_MSG_EVENTHANDLERFAILED_UNSUPPORTEDEVENTTYPE_CAUSE",
				resolution : "OVERLAY_MSG_EVENTHANDLERFAILED_UNSUPPORTEDEVENTTYPE_CHECKEVENTTYPE_RESOLUTION",
				code: "VIT11"
			},
			//StepNavigation
			VIT12: {
				summary : "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_SUMMARY",
				cause : "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_INCORRECTSTEPEVENTTYPE_CAUSE",
				resolution : "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_INCORRECTSTEPEVENTTYPE_CHECKSTEPEVENTTYPEVALUE_RESOLUTION",
				code: "VIT12"
			},
			//Viewer
			VIT13: {
				summary : "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_SUMMARY",
				cause : "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_NONEXISTINGORUNSUPPORTEDFILE_CAUSE",
				resolution : "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_NONEXISTINGORUNSUPPORTEDFILE_CHECKFILEEXISTSANDIFSUPPORT_RESOLUTION",
				code: "VIT13"
			},
			VIT14: {
				summary : "VIEWER_MSG_FAILEDTOBUILDSCENE_SUMMARY",
				cause : "VIEWER_MSG_FAILEDTOBUILDSCENE_COULDNOTCREATESCENE_CAUSE",
				resolution : "VIEWER_MSG_FAILEDTOBUILDSCENE_COULDNOTCREATESCENE_RELOADORSELECTANOTHERFILE_RESOLUTION",
				code: "VIT14"
			},
			VIT15: {
				summary : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_SUMMARY",
				cause : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_LOADINGMULTIPLE2DNOTSUPPORTED_CAUSE",
				resolution : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_LOADINGMULTIPLE2DNOTSUPPORTED_LOADONE2D_RESOLUTION",
				code: "VIT15"
			},
			VIT16: {
				summary : "VIEWER_MSG_NOTBELOADED_SUMMARY",
				cause : "VIEWER_MSG_NOTBELOADED_NONATIVESUPPORT_CAUSE",
				resolution : "VIEWER_MSG_NOTBELOADED_NONATIVESUPPORT_CHECKFILEFORMATSUPPORT_RESOLUTION",
				code: "VIT16"
			},
			VIT17: {
				summary : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_SUMMARY",
				cause : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOF2D3DNOTSUPPORTED_CAUSE",
				resolution : "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOF2D3DNOTSUPPORTED_MULTIPLESUPPORTFOR3DONLY_RESOLUTION",
				code: "VIT17"
			},
			//Viewport
			VIT18: {
				summary : "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_SUMMARY",
				cause : "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_CREATINGMULTIPLEVIEWPORTINSTANCES_CAUSE",
				resolution : "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_CREATINGMULTIPLEVIEWPORTINSTANCES_ONEINSTANCEOFVIEWPORTSUPPORTED_RESOLUTION",
				code: "VIT18"
			},
			VIT19: {
				summary : "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SUMMARY",
				cause : "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SPECIFIEDCAMERAPROJECTIONNOTSUPPORTED_CAUSE",
				resolution : "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SPECIFIEDCAMERAPROJECTIONNOTSUPPORTED_CHECKPROJECTIONTYPESUPPORTED_RESOLUTION",
				code: "VIT19"
			},
			VIT20: {
				summary : "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_SUMMARY",
				cause : "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_CAUSE",
				resolution : "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_RESOLUTION",
				code: "VIT20"
			},
			// Viewer
			VIT21: {
				summary: "VIEWER_MSG_FAILEDTOBUILDSCENE_SUMMARY",
				cause: "VIEWER_MSG_FAILEDTOBUILDSCENE_MISSINGPASSWORD_CAUSE",
				resolution: "VIEWER_MSG_FAILEDTOBUILDSCENE_MISSINGPASSWORD_PROVIDEPASSWORD_RESOLUTION",
				code: "VIT21"
			},
			// GraphicsCore
			VIT22: {
				summary: "GRAPHICSCORE_MSG_VDSL_NOFILEPROPERTY_SUMMARY",
				cause: "GRAPHICSCORE_MSG_VDSL_EMPTY_CAUSE",
				resolution: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_RESOLUTION",
				code: "VIT22"
			},
			VIT23: {
				summary: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_SUMMARY",
				cause: "GRAPHICSCORE_MSG_VDSL_WRONGFORMAT_CAUSE",
				resolution: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_RESOLUTION",
				code: "VIT23"
			},
			VIT24: {
				summary: "GRAPHICSCORE_MSG_VDSL_RELATIVE_IN_LOCAL_SUMMARY",
				cause: "GRAPHICSCORE_MSG_VDSL_WRONGFORMAT_CAUSE",
				resolution: "GRAPHICSCORE_MSG_VDSL_RELATIVE_IN_LOCAL_RESOLUTION",
				code: "VIT24"
			},
			VIT25: {
				summary: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_SUMMARY",
				cause: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_CAUSE",
				resolution: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_RESOLUTION",
				code: "VIT25"
			},
			VIT26: {
				summary: "VIEWPORT_UNSUPPORTED_STEP_INDEX_SUMMARY",
				cause: "VIEWPORT_UNSUPPORTED_STEP_INDEX_CAUSE",
				resolution: "VIEWPORT_UNSUPPORTED_STEP_INDEX_RESOLUTION",
				code: "VIT26"
			},
			VIT27: {
				summary: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_SUMMARY",
				cause: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_CAUSE",
				resolution: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_RESOLUTION",
				code: "VIT27"
			}
		};
	};

	return Messages;
});

}; // end of sap/ui/vk/Messages.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.NativeViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 */
	var NativeViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	NativeViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitNativeViewport");
		rm.writeClasses();
		rm.writeAttribute("tabindex", 0);
		rm.write(">");
		rm.write("</div>");

	};

	return NativeViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/NativeViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NotificationsRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.NotificationsRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NotificationsRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Notifications renderer.
	 * @namespace
	 */
	var NotificationsRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	NotificationsRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitNotifications");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(control.getAggregation("_messagePopoverToggleButton"));
		rm.write("</div>");

	};

	return NotificationsRenderer;

}, true);

}; // end of sap/ui/vk/NotificationsRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.OverlayRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/OverlayRenderer",function() {
	"use strict";

	/**
	 * @class Overlay renderer.
	 * @static
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var OverlayRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	OverlayRenderer.render = function(oRm, oControl) {
		// console.log( "sap.ui.vk.OverlayRenderer.render.....\r\n");

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiVkOverlay");
		oRm.writeClasses(oControl);
		oRm.write(">"); // span element
		oRm.write("</div>");

		// update bound data......................................................//
		var oApp;
		if ((oApp = oControl._update())) {
			oControl._load(oApp);
		}
	};

	return OverlayRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/OverlayRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ProgressIndicatorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ProgressIndicatorRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * ProgressIndicator renderer.
	 * @namespace
	 */
	var ProgressIndicatorRenderer = {};

	ProgressIndicatorRenderer.render = function(rm, oControl) {
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.addClass("sapUiVizkitProgressIndicator");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oControl.getAggregation("progressText"));
		rm.renderControl(oControl.getAggregation("progressBar"));
		rm.write("</div>");
	};

	return ProgressIndicatorRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTreeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.SceneTreeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTreeRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * SceneTree renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTreeRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	SceneTreeRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiSizeCompact");
		oRm.addClass("sapRULTSceneTree");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_tree"));
		oRm.write("</div>");

	};

	return SceneTreeRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTreeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigationRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.StepNavigationRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigationRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Step Navigation renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var StepNavigationRenderer = {};

	/**
	* Renders the HTML for the given control, using the provided
	* {@link sap.ui.core.RenderManager}.
	*
	* @param {sap.ui.core.RenderManager} rm
	*the RenderManager that can be used for writing to
	*the Render-Output-Buffer
	* @param {sap.ui.core.Control} control
	*the control to be rendered
	*/
	StepNavigationRenderer.render = function(rm, control) {
		// return immediately if control is invisible
		if (!control.getVisible()) {
		return;
		}
		
		if (control.getShowToolbar() || control.getShowThumbnails) {
			var oWidth = control.getWidth() !== "auto" ? control.getWidth() : "100%";
			var oHeight = control.getHeight() !== "auto" ? control.getHeight() : "auto";

			rm.write("<div");
			rm.addStyle("width", oWidth);
			rm.addStyle("height", oHeight);
			rm.writeControlData(control);
			rm.addClass("sapVizKitStepNavigation");
			rm.writeClasses();

			var sTooltip = control.getTooltip_AsString();
			if (sTooltip) {
				rm.writeAttributeEscaped("title", sTooltip);
			}

			if (!control.getVisible()) {
				rm.addStyle("visibility", "hidden");
			}
			rm.writeStyles();

			rm.write(">");
			rm.renderControl(control.getAggregation("layout"));
			if (control.getShowThumbnails()) {
				StepNavigationRenderer._renderScrollerDiv(rm, control);
			}
			rm.write("</div>");
		}

	};
	
	StepNavigationRenderer._renderScrollerDiv = function (rm, control) {
		rm.renderControl(control.getAggregation("thumbnailsContainer"));
	};
	
	return StepNavigationRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/StepNavigationRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ToolbarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ToolbarRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Toolbar renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ToolbarRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	ToolbarRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapVizKitToolbar");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_toolbar"));
		oRm.write("</div>");

	};

	return ToolbarRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.TransformationMatrix') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides data type sap.ui.vk.TransformationMatrix.
jQuery.sap.declare('sap.ui.vk.TransformationMatrix'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/TransformationMatrix",[
	"jquery.sap.global", "sap/ui/base/DataType"
], function(jQuery, DataType) {
	"use strict";

	/**
	 * @class
	 * Transformation matrix is an array of 12 numbers in a row major mode.
	 * @final
	 * @public
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var TransformationMatrix = DataType.createType("sap.ui.vk.TransformationMatrix", {
			isValid : function(value) {
				return TransformationMatrix.getBaseType().isValid(value) && value.length === 12;
			}
		},
		DataType.getType("float[]")
	);

	/**
	 * Parses the given string value and converts it into an array of numbers.
	 * @param {string} value a comma or white space delimited string
	 * @return {number[]} an array of 12 numbers
	 * @static
	 * @public
	 */
	TransformationMatrix.parseValue = function(value) {
		var componentType = TransformationMatrix.getComponentType();
		return value.split(/\s*,\s*|\s+/).map(componentType.parseValue.bind(componentType));
	};

	/**
	 * Converts matrix from 4x3 to 4x4.
	 * @param {number[]} matrix4x3 The matrix to convert.
	 * @return {number[]} The matrix 4x4 with [0, 0, 0, 1] in the last column.
	 * @static
	 * @public
	 */
	TransformationMatrix.convertTo4x4 = function(matrix4x3) {
		var m = matrix4x3;
		return [m[0], m[1], m[2], 0, m[3], m[4], m[5], 0, m[6], m[7], m[8], 0, m[9], m[10], m[11], 1];
	};

	/**
	 * Converts matrix from 4x4 to 4x3.
	 * @param {number[]} matrix4x4 The matrix to convert. The last column must be [0, 0, 0, 1].
	 * @return {number[]} The matrix 4x3 with the last column removed from matrix4x4.
	 * @public
	 * @static
	 */
	TransformationMatrix.convertTo4x3 = function(matrix4x4) {
		var m = matrix4x4;
		jQuery.sap.assert(m[3] === 0 && m[7] === 0 && m[11] === 0 && m[15] === 1, "The transformation matrix is invalid. The last column must be [0, 0, 0, 1].");
		return [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10], m[12], m[13], m[14]];
	};

	jQuery.sap.setObject("sap.ui.vk.TransformationMatrix", TransformationMatrix);

	return TransformationMatrix;
});

}; // end of sap/ui/vk/TransformationMatrix.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewerRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewer renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewerRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewerRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewer");
		rm.writeClasses();
		rm.addStyle("width", control.getWidth());
		rm.addStyle("height", control.getHeight());
		rm.writeStyles();

		rm.write(">");
		rm.renderControl(control.getAggregation("layout"));
		rm.renderControl(control.getAggregation("progressIndicator"));
		rm.write("</div>");
	};

	return ViewerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ViewportHandler.
jQuery.sap.declare('sap.ui.vk.ViewportHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportHandler",[
    "jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
], function (jQuery, EventProvider, ResizeHandler) {
	"use strict";

	var ViewportHandler = EventProvider.extend("sap.ui.vk.ViewportHandler", {
		metadata: {
			publicMethods: [
			    "beginGesture",
			    "move",
			    "endGesture",
			    "click",
			    "doubleClick",
			    "contextMenu",
			    "getViewport"
			]
		},
		constructor: function (Viewport) {
			this._viewport = Viewport;
			this._rect = null;
			this._evt = {
				x: 0,
				y: 0,
				z: 0,
				d: 0,
				initd: 0
			};
			this._gesture = false;
			this._viewport.attachEvent("resize", this, this._onresize);
			this._nomenu = false;
		}
	});

	ViewportHandler.prototype.destroy = function () {
		this._viewport = null;
		this._rect = null;
		this._evt = null;
		this._gesture = false;
	};

	ViewportHandler.prototype._getOffset = function (obj) {
		var rectangle = obj.getBoundingClientRect();
		var p = {
			x: rectangle.left + window.pageXOffset,
			y: rectangle.top + window.pageYOffset
		};
		return p;
	};

	ViewportHandler.prototype._inside = function (event) {
		if (this._rect == null || true) {
			var id = this._viewport.getIdForLabel();
			var domobj = document.getElementById(id);

			if (domobj == null) {
				return false;
			}

			var o = this._getOffset(domobj);
			this._rect = {
				x: o.x,
				y: o.y,
				w: domobj.offsetWidth,
				h: domobj.offsetHeight
			};
		}

		return (event.x >= this._rect.x && event.x <= this._rect.x + this._rect.w && event.y >= this._rect.y && event.y <= this._rect.y + this._rect.h);
	};

	ViewportHandler.prototype._onresize = function (event) {
		this._gesture = false;
		this._rect = null;
	};

	ViewportHandler.prototype.beginGesture = function (event) {
		if (this._inside(event) && !this._gesture) {
			this._gesture = true;

			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;
			this._evt.initd = event.d;
			this._evt.avgd = event.d;
			this._evt.avgx = 0;
			this._evt.avgy = 0;

			jQuery.sap.log.debug("Loco: beginGesture: " + x + ", " + y);
			this._viewport.queueCommand(function () {
				this._viewport.beginGesture(x, y);
			}.bind(this));

			event.handled = true;

			if (document.activeElement) {
				try {
					document.activeElement.blur();
				} catch (e) {
					// IE can have error calling blur() in fullscreen mode
				}
			}

			var domobj = document.getElementById(this._viewport.getIdForLabel());
			domobj.focus();
		}
		this._nomenu = false;
	};

	ViewportHandler.prototype.move = function (event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			var dx = x - this._evt.x;
			var dy = y - this._evt.y;
			var dd = event.d - this._evt.d;

			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;

			this._evt.avgx = this._evt.avgx * 0.99 + dx * 0.01;
			this._evt.avgy = this._evt.avgy * 0.99 + dy * 0.01;

			var z = 1.0;

			if (this._evt.initd > 0) {
				z = 1.0 + dd * (1.0 / this._evt.initd);
			} else if (event.n == 2) {
				if (event.points[0].y > event.points[1].y) {
					z = 1.0 - dd * 0.005;
					if (z < 0.333) {
						z = 0.333;
					}
				} else {
					z = 1.0 + dd * 0.005;
					if (z > 3) {
						z = 3;
					}
				}
			}

			//console.log("n: " + event.n + " Zoom factor: " + z);

			// Zoom smoothing
			if (this._evt.initd > 0) {
				var avgdist = Math.sqrt(this._evt.avgx * this._evt.avgx + this._evt.avgy * this._evt.avgy);

				jQuery.sap.log.debug("AvgDist: " + avgdist);
				if ((Math.abs(event.d - this._evt.avgd) / this._evt.avgd) < (avgdist / 10)) {
					z = 1.0;
				}
			}

			// Weighted average threshold
			this._evt.avgd = this._evt.avgd * 0.97 + event.d * 0.03;

			switch (event.n) {
				case 1:
					jQuery.sap.log.debug("Loco: Rotate: " + (dx) + ", " + (dy));

					this._viewport.queueCommand(function () {
						this._viewport.rotate(dx, dy);
					}.bind(this));
					break;
				case 2:
					jQuery.sap.log.debug("Loco: Pan: " + (dx) + ", " + (dy));
					if (z != 0 && z != 1.0) {
						jQuery.sap.log.debug("Loco: Zoom: " + (z));
					}

					this._viewport.queueCommand(function () {
						this._viewport.pan(dx, dy);

						if (dx < 10 && dy < 10 && z != 0 && z != 1.0) {
							this._viewport.zoom(z);
						}
					}.bind(this));
					break;
				default:
					break;
			}

			this._nomenu = true;
			event.handled = true;
		}
	};

	ViewportHandler.prototype.endGesture = function (event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

			jQuery.sap.log.debug("Loco: endGesture: " + x + ", " + y);

			this._viewport.queueCommand(function () {
				this._viewport.endGesture();
			}.bind(this));

			this._gesture = false;
			event.handled = true;
		}
	};

	ViewportHandler.prototype.click = function (event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: click: " + (x) + ", " + (y));

			this._viewport.queueCommand(function () {
				this._viewport.tap(x, y, false);
			}.bind(this));

			event.handled = true;
		}
	};

	ViewportHandler.prototype.doubleClick = function (event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: doubleClick: " + (x) + ", " + (y));

			this._viewport.queueCommand(function () {
				this._viewport.tap(x, y, true);
			}.bind(this));

			event.handled = true;
		}
	};

	ViewportHandler.prototype.contextMenu = function (event) {
		if (this._inside(event) || this._nomenu || event.buttons == 5) {
			this._nomenu = false;

			//jQuery.sap.log.debug("Loco: context menu")
			event.handled = true;
		}
	};

	ViewportHandler.prototype.getViewport = function () {
		return this._viewport;
	};

	return ViewportHandler;
}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewportHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewport");
		rm.writeClasses();
		rm.writeAttribute("tabindex", 0);
		rm.write(">");
		rm.write("</div>");

	};

	return ViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.ui.vk.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/library",[
	"jquery.sap.global", "./TransformationMatrix", "./DvlException"
], function(jQuery, TransformationMatrix, DvlException) {
	"use strict";

	/**
	 * SAPUI5 library with controls for displaying 3D models.
	 *
	 * @namespace
	 * @name sap.ui.vk
	 * @author SAP SE
	 * @version 1.38.15
	 * @public
	 */

	// Delegate further initialization of this library to the Core.
	sap.ui.getCore().initLibrary({
		name: "sap.ui.vk",
		dependencies: [
			"sap.ui.core"
		],
		types: [
			"sap.ui.vk.ContentResourceSourceCategory", "sap.ui.vk.TransformationMatrix"
		],
		interfaces: [],
		controls: [
			"sap.ui.vk.NativeViewport", "sap.ui.vk.Overlay", "sap.ui.vk.Viewer", "sap.ui.vk.Viewport", "sap.ui.vk.SceneTree", "sap.ui.vk.StepNavigation", "sap.ui.vk.Toolbar", 
			"sap.ui.vk.ContainerBase", "sap.ui.vk.ContainerContent", "sap.ui.vk.MapContainer", "sap.ui.vk.ListPanelStack", "sap.ui.vk.ListPanel", "sap.ui.vk.LegendItem"
		],
		elements: [
			"sap.ui.vk.OverlayArea"
		],
		noLibraryCSS: false,
		version: "1.38.15"
	});

	/**
	 * The types of APIs supported by the {@link sap.ui.vk.GraphicsCore} class.
	 *
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental since version 1.32.0. The enumeration might be deleted in the next version.
	 */
	sap.ui.vk.GraphicsCoreApi = {
		/**
		 * The legacy DVL API implemented in the com.sap.ve.dvl library (dvl.js).
		 * @public
		 */
		LegacyDvl: "LegacyDvl"
	};

	/**
	 * The categories of content resources.
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 */
	sap.ui.vk.ContentResourceSourceCategory = {
		/**
		 * The 3D content resource.
		 * @public
		 */
		"3D": "3D",
		/**
		 * The 2D content resource.
		 * @public
		 */
		"2D": "2D"
	};

	/**
	 * The map from file extensions to content resource categories.
	 * @readonly
	 * @private
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 */
	sap.ui.vk.ContentResourceSourceTypeToCategoryMap = {
		"vds": sap.ui.vk.ContentResourceSourceCategory["3D"],
		"png": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"jpg": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"gif": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"bmp": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"tiff": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"tif": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"svg": sap.ui.vk.ContentResourceSourceCategory["2D"]
	};

	var dvlComponent = "sap.ve.dvl";
	/**
	 * Utility methods used internally by the library to handle results from DVL.
	 * @private
	 */
	sap.ui.vk.dvl = {
		checkResult: function(result) {
			if (result < 0) {
				var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(result) : "";
				jQuery.sap.log.error(message, JSON.stringify({ errorCode: result }), dvlComponent);
				throw new DvlException(result, message);
			}
			return result;
		},

		getPointer: function(pointer) {
			if (pointer.indexOf("errorcode") === 0) {
				var code = parseInt(pointer.substr(15), 16) - 0x100;
				var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(code) : "";
				jQuery.sap.log.error(message, JSON.stringify({ errorCode: code }), dvlComponent);
				throw new DvlException(code, message);
			}
			return pointer;
		},

		getJSONObject: function(object) {
			if (jQuery.type(object) === "number") {
				var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(object) : "";
				jQuery.sap.log.error(message, JSON.stringify({ errorCode: object }), dvlComponent);
				throw new DvlException(object, message);
			}
			return object;
		}
	};

	sap.ui.vk.getResourceBundle = function() {
		var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
		sap.ui.vk.getResourceBundle = function() {
			return resourceBundle;
		};
		return resourceBundle;
	};

	return sap.ui.vk;
});

}; // end of sap/ui/vk/library.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.BaseNodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the BaseNodeProxy class.
jQuery.sap.declare('sap.ui.vk.BaseNodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/BaseNodeProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/Object"
], function(jQuery, library, BaseObject) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new BaseNodeProxy.
	 *
	 * @class
	 * Provides a simple, lightweight proxy object to a node in a node hierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy to which the node belongs to.
	 * @param {string} nodeId The ID of the node which we want to provide a proxy object for.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.BaseObject
	 * @implements sap.ui.base.Poolable
	 * @alias sap.ui.vk.BaseNodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var BaseNodeProxy = BaseObject.extend("sap.ui.vk.BaseNodeProxy", /** @lends sap.ui.vk.BaseNodeProxy.prototype */ {
		metadata: {
			publicMethods: [
				"getNodeId",
				"getName",
				"getNodeMetadata",
				"getHasChildren"
			]
		},
		constructor: function(nodeHierarchy, nodeId) {
			this.init(nodeHierarchy, nodeId);
		}
	});


	/**
	 * Initialize this BaseNodeProxy with its data.
	 *
	 * The <code>init</code> method is called by an object pool when the
	 * object is (re-)activated for a new caller.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object this BaseNodeProxy object belongs to.
	 * @param {string} nodeId The ID of the node for which to get BaseNodeProxy.
	 *
	 * @private
	 *
	 * @see sap.ui.base.Poolable.prototype#init
	 */
	BaseNodeProxy.prototype.init = function(nodeHierarchy, nodeId) {
		this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
		this._dvlSceneId = nodeHierarchy ? nodeHierarchy._getDvlSceneId() : null;
		this._dvlNodeId = nodeId;
	};

	/**
	 * Reset BaseNodeProxy data, needed for pooling.
	 *
	 * @private
	 *
	 * @see sap.ui.base.Poolable.prototype#reset
	 */
	BaseNodeProxy.prototype.reset = function() {
		this._dvlNodeId = null;
		this._dvlSceneId = null;
		this._dvl = null;
	};

	/**
	 * Gets the ID of the node.
	 *
	 * @returns {string} The node's ID.
	 *
	 * @public
	 */
	BaseNodeProxy.prototype.getNodeId = function() {
		return this._dvlNodeId;
	};

	/**
	 * Gets the name of the node.
	 *
	 * @returns {string} The node's name.
	 *
	 * @public
	 */
	BaseNodeProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
	};

	/**
	 * Gets the metadata of the node.
	 *
	 * @return {object} A JSON object containing the node's metadata.
	 *
	 * @public
	 */
	// NB: We cannot name the method getMetadata as there already exists sap.ui.base.Object.getMetadata method.
	BaseNodeProxy.prototype.getNodeMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneId, this._dvlNodeId)).metadata;
	};

	/**
	 * Indicates whether the node has child nodes.
	 *
	 * @returns {boolean} A value of <code>true</code> indicates that the node has child nodes, and a value of <code>false</code> indicates otherwise.
	 *
	 * @public
	 */
	BaseNodeProxy.prototype.getHasChildren = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
	};

	return BaseNodeProxy;
});

}; // end of sap/ui/vk/BaseNodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.CheckEye') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.CheckEye.
jQuery.sap.declare('sap.ui.vk.CheckEye'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.CheckBox'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/CheckEye",['jquery.sap.global', 'sap/ui/commons/CheckBox', './library'],
	function(jQuery, CheckBox, library) {
	"use strict";


	
	/**
	 * Constructor for a new CheckEye.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Provides a custom 'eye' checkbox for a Scene Tree, used to toggle the visibility of nodes in a scene.
	 * @extends sap.m.CheckBox
	 *
	 * @author SAP SE
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.CheckEye
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var CheckEye = CheckBox.extend("sap.ui.vk.CheckEye", /** @lends sap.ui.vk.CheckEye.prototype */ { metadata : {

		library : "sap.ui.vk",
		properties : {
		}
	},

	onAfterRendering: function() {
		var $this = this.$();
		$this.removeClass('sapUiCb');
		$this.removeClass('sapUiCbChk');
		$this.removeClass('sapUiCbInteractive');
		$this.removeClass('sapUiCbStd');
		$this.addClass('sapUiCheckEye');
	},

	renderer: {

	}

	});

	return CheckEye;

}, /* bExport= */ true);

}; // end of sap/ui/vk/CheckEye.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerBase') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ContainerBase.
jQuery.sap.declare('sap.ui.vk.ContainerBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContainerBase",[
	'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ui/core/Popup', 'sap/ui/Device', 'sap/m/library'
], function(jQuery, library, Control, IconPool, Popup, Device, m_library) {
	"use strict";

	/**
	 * Abstract Constructor for a new Container.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Abstract Constructor for a new Container.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ContainerBase
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContainerBase = Control.extend("sap.ui.vk.ContainerBase", /** @lends sap.ui.vk.ContainerBase.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Show fullscreen toggle button in toolbar
				 */
				"showFullScreen": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Show settings button in toolbar
				 */
				"showSettings": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Show selection button in toolbar
				 */
				"showSelection": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls whether the control is show fullscreen or embedded
				 */
				"fullScreen": {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},
				/**
				 * Title to show in toolbar
				 */
				"title": {
					type: "string",
					group: "Misc",
					defaultValue: ''
				},
				"autoAdjustHeight": {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			defaultAggregation: "content",
			aggregations: {
				/**
				 * Content Aggregation.
				 */
				content: {
					type: "sap.ui.vk.ContainerContent",
					multiple: true,
					singularName: "content"
				},
				/**
				 * Toolbar aggregation
				 */
				"toolbar": {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				}
			},
			associations: {},
			events: {
				"contentChange": {
					parameters: {
						selectedItemId: "string"
					}
				},
				"settingsPressed": {}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * default Content could be defined in application
	 * 
	 * @param {sap.ui.vk.ContainerContent} oContent the content to be visible; involves re-rendering
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.switchContent = function(oContent) {
		this.setSelectedContent(oContent);
		// fire the change event with id of the newly selected item..
		this.rerender();// invalidate();
	};

	/**
	 * update container to allow dynamic change button layout
	 * 
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.updateContainer = function() {
		this._contentChanged = true;
		this.rerender();
	};

	/**
	 * set selected content
	 * 
	 * @param {sap.ui.vk.ContainerContent} oContent the selected content; involves no re-rendering
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setSelectedContent = function(oContent) {
		this._oSelectedContent = oContent;
	};

	/**
	 * get selected content
	 * 
	 * @returns {sap.ui.vk.ContainerContent} the currently selected content container
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.getSelectedContent = function() {
		return this._oSelectedContent;
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	ContainerBase.prototype.init = function() {
		this._selectionState = "SINGLE";
		this._firstTime = true;
		this._aContentIcons = [];
		this._selectedContent = null;
		this._oSelectedContent = null;
		this._bSegmentedButtonSaveSelectState = false;
		this._oMenu = null;

		// Right side..
		var oLayoutData = new sap.m.OverflowToolbarLayoutData({
			priority: sap.m.OverflowToolbarPriority.High
		});
		var buttonType = sap.m.ButtonType.Transparent;

		// Full screen button
		this._oFullScreenButton = new sap.m.OverflowToolbarButton({
			layoutData: oLayoutData,
			type: buttonType,
			icon: "sap-icon://full-screen",
			text: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_FULLSCREEN"),
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_FULLSCREEN"),
			press: function() {
				this._bSegmentedButtonSaveSelectState = true;
				this._toggleFullScreen();
			}.bind(this)
		});

		// Settings button
		this._oSettingsButton = new sap.m.OverflowToolbarButton({
			layoutData: oLayoutData.clone(),
			type: buttonType,
			icon: "sap-icon://action-settings",
			text: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_SETTINGS"),
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_SETTINGS"),
			press: function() {
				this._bSegmentedButtonSaveSelectState = true;
				this.fireSettingsPressed();
			}.bind(this)
		});

		// Selection buttons
		this._oSelectionButtonSingle = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-single",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_SINGLE"),
			press: this._handleSelection.bind(this, "SINGLE")
		});

		this._oSelectionButtonRectangle = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-rectangle",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_RECT"),
			press: this._handleSelection.bind(this, "RECT")
		});

		this._oSelectionButtonLasso = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-lasso",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_LASSO"),
			press: this._handleSelection.bind(this, "LASSO")
		});

		this._selectionMenu = new sap.m.SegmentedButton({
			items: [
				this._oSelectionButtonSingle,
				this._oSelectionButtonRectangle,
				this._oSelectionButtonLasso
			]
		});
		// Popup for container content
		this._oPopup = new Popup({
			modal: true,
			shadow: false,
			autoClose: false
		});

		// segmentedButton for for multiple content entries
		this._oContentSegmentedButton = new sap.m.SegmentedButton({
			layoutData: oLayoutData.clone(),
			select: this._onContentButtonSelect.bind(this)
		});

		// Left side...
		// display title
		this._oContTitle = new sap.m.Label();

		// toolbar
		this._oToolbar = new sap.m.OverflowToolbar({
			// Use ToolbarDesign.Auto
			width: "auto"
		}).addStyleClass("sapUiVkContainerBaseToolbar");
		this.setAggregation("toolbar", this._oToolbar);

		this.sResizeListenerId = null;
		if (Device.system.desktop) {
			this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
		} else {
			Device.orientation.attachHandler(this._performHeightChanges, this);
			Device.resize.attachHandler(this._performHeightChanges, this);
		}

		//Adding new icons to the IconPool^M
		jQuery.sap.require("sap.ui.thirdparty.URI");
		var mapContainerIcons = [{
				name: "selection-lasso",
				unicode: "E000"
			}, {
				name: "selection-rectangle",
				unicode: "E001"
			}, {
				name: "selection-single",
				unicode: "E002"
			}],
			collectionName = "map-container",
			fontFamily = "map-container";

		mapContainerIcons.forEach(function(icon) {
			sap.ui.core.IconPool.addIcon(icon.name, collectionName, fontFamily, icon.unicode);
		});

	};

	ContainerBase.prototype.exit = function() {
		if (this._oFullScreenButton) {
			this._oFullScreenButton.destroy();
			this._oFullScreenButton = undefined;
		}
		if (this._oPopup) {
			this._oPopup.destroy();
			this._oPopup = undefined;
		}
		if (this._oContentSegmentedButton) {
			this._oContentSegmentedButton.destroy();
			this._oContentSegmentedButton = undefined;
		}
		if (this._oSelectedContent) {
			this._oSelectedContent.destroy();
			this._oSelectedContent = undefined;
		}
		if (this._oToolbar) {
			this._oToolbar.destroy();
			this._oToolbar = undefined;
		}
		if (Device.system.desktop && this.sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		} else {
			Device.orientation.detachHandler(this._performHeightChanges, this);
			Device.resize.detachHandler(this._performHeightChanges, this);
		}
	};

	/**
	 * set FullScreen - default is normal mode, but app can call this method to set the default to full screen
	 * 
	 * @param {boolean} bFullScreen Fullscreen mode on or off
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setFullScreen = function(bFullScreen) {
		if (this._firstTime) {
			// can't set the full screen and toggle since dom is not loaded yet
			return;
		}
		if (this.getFullScreen() == bFullScreen) { // check setter is overridden, if not, no need to set the property
			return;
		}
		var fullScreen = this.getProperty("fullScreen");
		if (fullScreen !== bFullScreen) {
			this._toggleFullScreen();
		}
	};

	ContainerBase.prototype.onAfterRendering = function() {
		var that = this;
		if ((this.sResizeListenerId === null) && (Device.system.desktop)) {
			this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
		}
		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			// fix the flickering issue when switch chart in full screen mode
			jQuery.sap.delayedCall(500, this, function() {
				that._performHeightChanges();
			});
		}

		this._firstTime = false;
		if (this.getSelectedContent() !== null) {
			var control = this.getSelectedContent().getContent();
			if (control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap) {
				if (this.getShowSelection()) {
					if (this._selectionState === "LASSO") {
						control.setLassoSelection(true);
					} else if (this._selectionState === "RECT") {
						control.setRectangularSelection(true);
					} else if (this._selectionState === "SINGLE") {
						control.setRectangularSelection(false);
						control.setLassoSelection(false);
					}
				}
			}
		}
	};

	ContainerBase.prototype.onBeforeRendering = function() {
		if (this._contentChanged) {
			this._contentChange();
		}
		// re-populate toolbar content according current settings		
		this._oToolbar.removeAllContent();
		this._addToolbarContent();
	};

	/**
	 * Display title
	 * 
	 * @param {string} sValue the title
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setTitle = function(sValue) {
		this._oContTitle.setText(sValue);
		this.setProperty("title", sValue, true);
	};

	/**
	 * add container content - map, table..
	 * 
	 * @param {sap.ui.vk.ContainerContent} oObject content object to add
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.addContent = function(oObject) {
		this.addAggregation("content", oObject);
		this._contentChanged = true;
	};

	/**
	 * insert container content - map, table..
	 * 
	 * @param {sap.ui.vk.ContainerContent} oObject content object to insert
	 * @param {int} iIndex index in the content aggregation where to insert the new content object
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.insertContent = function(oObject, iIndex) {
		this.insertAggregation("content", oObject, iIndex);
		this._contentChanged = true;
	};

	/**
	 * update chartcontainer content
	 */
	ContainerBase.prototype.updateContent = function() {
		this.updateAggregation("content");
		this._contentChanged = true;
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	/**
	 * Toggle normal and full screen mode
	 * 
	 * @private
	 */
	ContainerBase.prototype._toggleFullScreen = function() {
		var fullScreen = this.getProperty("fullScreen");
		var sId;
		var sHeight;
		var oContent;
		if (fullScreen) {
			this._closeFullScreen();
			this.setProperty("fullScreen", false, true);
			oContent = this.getSelectedContent().getContent();
			sId = oContent.getId();
			oContent.setWidth("100%");
			sHeight = this._contentHeight[sId];
			if (sHeight) {
				oContent.setHeight(sHeight);
			}
			this.invalidate();
		} else {
			var aObjects = this.getAggregation("content");
			this._contentHeight = {};
			if (aObjects) {
				for (var i = 0; i < aObjects.length; i++) {
					oContent = aObjects[i].getContent();
					sId = oContent.getId();
					if (jQuery.isFunction(oContent.getHeight)) {
						sHeight = oContent.getHeight();
					} else {
						sHeight = 0;
					}
					this._contentHeight[sId] = sHeight;
				}
			}
			// fix content disappear when toggle content with full screen button
			// by surpressing the invalid for the setProperty, this delay shouldn't be needed.
			this._openFullScreen(true);
			this.setProperty("fullScreen", true, true);
		}
		var sIcon = (fullScreen ? "sap-icon://full-screen" : "sap-icon://exit-full-screen");
		this._oFullScreenButton.setIcon(sIcon);
		this._oFullScreenButton.focus();
	};

	/**
	 * Open Container content with Full Screen
	 * 
	 * @param {boolean} bNeedsScroll add scrolling to full screen display
	 * @private
	 */
	ContainerBase.prototype._openFullScreen = function(bNeedsScroll) {
		if ((bNeedsScroll !== null) && (bNeedsScroll === true)) {
			this._oScrollEnablement = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-wrapper", {
				horizontal: true,
				vertical: true
			});
		}
		this.$content = this.$();
		if (this.$content) {
			this.$tempNode = jQuery("<div></div>"); // id='" + this.$content.attr("id")+"-overlay"+ "'
			this.$content.before(this.$tempNode);
			this._$overlay = jQuery("<div id='" + jQuery.sap.uid() + "'></div>");
			this._$overlay.addClass("sapUiVkContainerBaseOverlay");
			this._$overlay.append(this.$content);
			this._oPopup.setContent(this._$overlay);
		} else {
			jQuery.sap.log.warn("Overlay: content does not exist or contains more than one child");
		}
		this._oPopup.open(200, undefined, undefined, jQuery("body"));
	};

	/**
	 * Close Full Screen and return to normal mode
	 */
	ContainerBase.prototype._closeFullScreen = function() {
		if (this._oScrollEnablement !== null) {
			this._oScrollEnablement.destroy();
			this._oScrollEnablement = null;
		}
		this.$tempNode.replaceWith(this.$content);
		this._oToolbar.setDesign(sap.m.ToolbarDesign.Auto);
		this._oPopup.close();
		this._$overlay.remove();
	};

	/**
	 * Height change when toggle full and normal model mobile swap between portrait and Landscape will execute height change too
	 */
	ContainerBase.prototype._performHeightChanges = function() {
		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			var $this = this.$();
			// Only adjust height after both toolbar and content area are rendered in DOM
			if (($this.find('.sapUiVkContainerBaseToolbarArea').children()[0]) && ($this.find('.sapUiVkContainerBaseContentArea').children()[0])) {
				// var iContainerHeight = $this.height();
				// var iToolbarHeight = $this.find('.sapUiVkContainerBaseToolbarArea').children()[0].clientHeight;
				// var iToolbarBottomBorder = Math.round(parseFloat($this.find('.sapUiVkContainerBaseToolbarArea').children().css("border-bottom")));
				// var iNewHeight = iContainerHeight - iToolbarHeight - iToolbarBottomBorder;
				// var iExisitngHeight = $this.find('.sapUiVkContainerBaseContentArea').children()[0].clientHeight;
				var oinnerContent = this.getSelectedContent().getContent();
				if (oinnerContent.getDomRef().offsetWidth !== this.getDomRef().clientWidth) {
					// For table/non-vizFrame case, if width changes during resize event, force a rerender to have it fit 100% width
					this.rerender();
				}
			}
		}
	};

	/**
	 * Switch Content
	 * 
	 * @param {string} sContentId id of the content object
	 * @private
	 */
	ContainerBase.prototype._switchContent = function(sContentId) {

		var oContent = this._findContentById(sContentId);

		this.setSelectedContent(oContent);

		this.fireContentChange({
			selectedItemId: sContentId
		}); // fire the change event with id of the newly selected item..
		this.rerender();// invalidate();
	};

	/**
	 * collect all content and repopulate content segmented button
	 */
	ContainerBase.prototype._contentChange = function() {
		var aContent = this.getContent();
		// remove and detroy all buttons for old content
		this._oContentSegmentedButton.removeAllButtons();
		this._destroyButtons(this._aContentIcons);

		this._aContentIcons = [];
		if (aContent.length === 0) {
			this._oContentSegmentedButton.removeAllButtons();
			this._setDefaultOnSegmentedButton();
			this.switchContent(null);
		}
		if (aContent) {
			for (var i = 0; i < aContent.length; i++) {
				var innerContent = aContent[i].getContent();
				if (innerContent.setWidth) {
					innerContent.setWidth("100%");
				}
				var oButton = new sap.m.SegmentedButtonItem({
					icon: aContent[i].getIcon(),
					tooltip: aContent[i].getTitle(),
					key: innerContent.getId()
				});
				this._aContentIcons.push(oButton);
				this._oContentSegmentedButton.addItem(oButton);
				if (i === 0) {
					this.setSelectedContent(aContent[i]);
				}
			}
		}

		this._contentChanged = false;
	};

	ContainerBase.prototype._onContentButtonSelect = function(oEvent) {
		var sContentId = oEvent.getParameter("key");
		this._switchContent(sContentId);
	};

	/**
	 * get content to display by id
	 * 
	 * @param {string} sId id of the content object
	 * @returns {sap.ui.vk.ContainerContent} content object found for given id
	 */
	ContainerBase.prototype._findContentById = function(sId) {
		var aContent = null;
		var aObjects = this.getAggregation("content");
		if (aObjects) {
			for (var i = 0; !aContent && i < aObjects.length; i++) {
				if (aObjects[i].getContent().getId() === sId) {
					aContent = aObjects[i];
				}
			}
		}
		return aContent;
	};

	/**
	 * adjusts customizable buttons of overflow toolbar, displays content buttons
	 * @protected
	 */
	ContainerBase.prototype._addToolbarContent = function() {
		this._oToolbar.addContent(new sap.m.ToolbarSpacer()); //right align remaining content
		
		if (this._aContentIcons.length > 1) {
			this._oToolbar.addContent(this._oContentSegmentedButton);
		}

		if (this.getSelectedContent() !== null) {
			var control = this.getSelectedContent().getContent();
			if (control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap) {
				if (this.getShowSelection()) {
					this._oToolbar.addContent(this._selectionMenu);
				}
			}
		}

		if (this.getShowSettings()) {
			this._oToolbar.addContent(this._oSettingsButton);
		}
		if (!Device.system.phone && this.getShowFullScreen()) {
			this._oToolbar.addContent(this._oFullScreenButton);
		}
	};

	/**
	 * The first button inside the segmented button is only set as default if the user did not click explicitly on another button inside the segmented
	 * button
	 * 
	 * @private
	 */
	ContainerBase.prototype._setDefaultOnSegmentedButton = function() {
		if (!this._bSegmentedButtonSaveSelectState) {
			this._oContentSegmentedButton.setSelectedButton(null);
		}
		this._bSegmentedButtonSaveSelectState = false;
	};

	/**
	 * Buttons which are not needed anymore are destroyed here.
	 * 
	 * @param {array} buttons The buttons which need to be destroyed.
	 * @private
	 */
	ContainerBase.prototype._destroyButtons = function(buttons) {
		buttons.forEach(function(oButton) {
			oButton.destroy();
		});
	};

	ContainerBase.prototype._handleSelection = function(mode) {
		var control = this.getSelectedContent().getContent();
		if (control instanceof sap.ui.vbm.GeoMap) {
			if (mode == "LASSO") {
				control.setLassoSelection(true);
				this._selectionState = mode;
			} else if (mode == "RECT") {
				control.setRectangularSelection(true);
				this._selectionState = mode;
			} else if (mode === "SINGLE") {
				control.setRectangularSelection(false);
				control.setLassoSelection(false);
				this._selectionState = mode;
			}
		}

	};

	return ContainerBase;

});

}; // end of sap/ui/vk/ContainerBase.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerContent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ContainerContent.
jQuery.sap.declare('sap.ui.vk.ContainerContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContainerContent",[
	'./library', 'sap/ui/core/Control'
], function(library, Control) {
	"use strict";

	/**
	 * Constructor for a new ContainerContent.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation element for the Container Base
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ContainerContent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContainerContent = Control.extend("sap.ui.vk.ContainerContent", /** @lends sap.ui.vk.ContainerContent.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Icon to show up in the toolbar
				 */
				"icon": {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Title for the icon in the toolbar
				 */
				"title": {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {
				"content": {
					type: "sap.ui.core.Control",
					multiple: false
				}
			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// ContainerContent.prototype.init = function(){
	// // do something for initialization...
	// };
	
	ContainerContent.prototype.setContent = function( oContent ) {
		if (oContent instanceof sap.ui.vbm.GeoMap) {
			oContent.setNavcontrolVisible(false);
			oContent.setWidth("100%");
			oContent.setHeight("100%");
		}
		this.setAggregation("content", oContent);
		return this;
	};

	return ContainerContent;

});

}; // end of sap/ui/vk/ContainerContent.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContentResource') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides class sap.ui.vk.ContentResource.
jQuery.sap.declare('sap.ui.vk.ContentResource'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContentResource",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	/**
	 * Constructor for a new ContentResource.
	 *
	 * @class
	 * Specifies a resource to load.

	 * @param {string} [sId] ID of the new content resource. <code>sId</code>is generated automatically if no non-empty ID is given.
	 *                       Note: this can be omitted, regardless of whether <code>mSettings</code> will be provided or not.
	 * @param {object} [mSettings] An optional map/JSON object with initial property values, aggregated objects etc. for the new content resource.
	 * @param {object} [oScope] scope An object for resolving string-based type and formatter references in bindings.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ContentResource
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContentResource = ManagedObject.extend("sap.ui.vk.ContentResource", /** @lends sap.ui.vk.ContentResource.prototype */ {
		metadata: {
			properties: {
				/**
				 * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the content resource/file to load from.
				 * The source may be omitted if a grouping node is needed.
				 */
				source: "any",

				/**
				 * The source type of the content resource. Valid types:
				 * <ul>
				 *   <li>vds</li>
				 *   <li>png</li>
				 *   <li>jpg</li>
				 *   <li>gif</li>
				 * </ul>
				 * The source type may be omitted if this is a grouping content node.
				 */
				sourceType: "string",

				/**
				 * The unique ID of the content resource.
				 */
				sourceId: "string",

				/**
				 * The local transformation matrix of the node created for this content resource.
				 */
				localMatrix: "sap.ui.vk.TransformationMatrix",

				/**
				 * The name of the node created for this content resource.
				 */
				name: "string"
			},

			aggregations: {
				/**
				 * Child content resources.
				 */
				contentResources: "sap.ui.vk.ContentResource"
			},

			publicMethods: [
				"getNodeProxy"
			]
		},

		constructor: function(sId, mSettings, oScope) {
			ManagedObject.apply(this, arguments);
			this._nodeProxy = null;
		}
	});

	ContentResource.prototype.isTreeBinding = function(name) {
		return name === "contentResources";
	};

	ContentResource.prototype.destroy = function() {
		this._nodeProxy = null;
		ManagedObject.prototype.destroy.call(this);
	};

	ContentResource.prototype.setLocalMatrix = function(value) {
		var nodeProxy = this.getNodeProxy();
		if (nodeProxy) {
			nodeProxy.setLocalMatrix(value);
		}
		this.setProperty("localMatrix", value, true);
		return this;
	};

	/**
	 * Gets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
	 *
	 * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not set since
	 * the grouping node is not created, which means that there may be multiple top level nodes.
	 *
	 * @returns {sap.ui.vk.NodeProxy} The {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource if any, otherwise <code>null</code>.
	 * @public
	 */
	ContentResource.prototype.getNodeProxy = function() {
		return this._shadowContentResource && this._shadowContentResource.nodeProxy || null;
	};

	/**
	 * Collects content resource categories. The result is tested if the content resource hierarchy has the same category - 2D or 3D.
	 *
	 * @param {sap.ui.vk.ContentResource[]} resources The array of content resources.
	 * @returns {sap.ui.vk.ContentResourceSourceCategory[]} The array of distinct content resource categories.
	 * @static
	 * @public
	 */
	ContentResource.collectCategories = function(resources) {
		var categories = [];
		var map = {};

		function getResourceCategory(resource) {
			var sourceType = (resource.getSourceType() || "").toLowerCase();
			if (sourceType) {
				var category = sap.ui.vk.ContentResourceSourceTypeToCategoryMap[sourceType] || "unknown";
				if (!map.hasOwnProperty(category)) {
					map[category] = true;
					categories.push(category);
				}
			}
			resource.getContentResources().forEach(getResourceCategory);
		}

		resources.forEach(getResourceCategory);

		return categories;
	};

	return ContentResource;
});

}; // end of sap/ui/vk/ContentResource.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DownloadManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/* global File, sinon */

// Provides the DownloadManager class.
jQuery.sap.declare('sap.ui.vk.DownloadManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DownloadManager",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "./Messages"
], function(jQuery, library, EventProvider, Messages) {
	"use strict";

	/**
	 * Creates a new DownloadManager object.
	 *
	 * @class
	 * Provides the functionality to download multiple files from remote locations (URLs) and from local files.
	 *
	 * @param {any[]} sources An array of strings (URLs) and File objects to download.
	 * @param {int} maxParallelTasks The maximum number of downloading tasks to execute in parallel.
	 * @private
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.DownloadManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DownloadManager = EventProvider.extend("sap.ui.vk.DownloadManager", /** @lends sap.ui.vk.DownloadManager.prototype */ {
		metadata: {
			publicMethods: [
				"start",
				"attachItemSucceeded",
				"detachItemSucceeded",
				"attachItemFailed",
				"detachItemFailed",
				"attachAllItemsCompleted",
				"detachAllItemsCompleted"
			],

			events: {
				/**
				 * Item is successfully downloaded.
				 */
				itemSucceeded: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The content of source of type ArrayBuffer.
						 */
						response: {
							type: "object"
						}
					}
				},
				/**
				 * Event that is fired when the downloaded progress.
				 */
				itemProgress: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The size of data which has been downloaded so far for a particular file.
						 */
						loaded: {
							type: "number"
						},
						/**
						 * The total size of the file being currently downloaded.
						 */
						total: {
							type: "number"
						}
					}
				},

				/**
				 * Item is not downloaded due to an error.
				 */
				itemFailed: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The status of the downloading process. Type might be int or string.
						 */
						status: {
							type: "any"
						},
						statusText: {
							type: "string"
						}
					}
				},

				/**
				 * Downloading all items is completed, successfully or not.
				 */
				allItemsCompleted: {}
			}
		},
		constructor: function(sources, maxParallelTasks) {
			this._messages = new Messages();
			EventProvider.apply(this);

			this._maxParallelTasks = maxParallelTasks || 5;
			this._sourcesToProcess = sources.slice();
			this._sourcesBeingProcessed = [];
		}
	});



	/**
	 * Starts the downloading process.
	 * @returns {sap.ui.vk.DownloadManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	DownloadManager.prototype.start = function() {
		/* eslint-disable no-empty */
		while (this._pickAndDispatchTask()) {
			// A comment to avoid ESLint warnings.
		}
		/* eslint-enable no-empty */

		return this;
	};

	/**
	 * Picks and dispatches a source for downloading.
	 * @return {boolean} Returns <code>true</code> if a source is picked and dispatched, returns <code>false</code> if there are no more sources to download.
	 * @private
	 */
	DownloadManager.prototype._pickAndDispatchTask = function() {
		if (this._sourcesToProcess.length > 0 && this._sourcesBeingProcessed.length < this._maxParallelTasks) {
			var source = this._sourcesToProcess.shift();
			this._sourcesBeingProcessed.push(source);
			this._runTask(source);
			return true;
		}
		return false;
	};

	/**
	 * @param {sap.ui.core.URI|File} source The URL or File that is completed.
	 * @return {boolean} Returns <code>true</code> if it is the last task completed.
	 * @private
	 */
	DownloadManager.prototype._taskFinished = function(source) {
		var index = this._sourcesBeingProcessed.indexOf(source);
		if (index >= 0) {
			this._sourcesBeingProcessed.splice(index, 1);
		}

		return this._sourcesToProcess.length === 0 && this._sourcesBeingProcessed.length === 0;
	};

	DownloadManager.prototype._runTask = function(source) {
		var that = this;
		if (typeof source === "string") {
			// When sap.ui.core.util.MockServer is in use it loads the sinon.js library which replaces
			// the native XMLHttpRequest provided by the browser with its own implementation. That
			// implementation does not support 'arraybuffer' response type. For downloading 3D models
			// we should always use the native XMLHttpRequest object.
			var xhr = new (typeof sinon === "object" && sinon.xhr && sinon.xhr.XMLHttpRequest || XMLHttpRequest);

			xhr.onerror = function(event) {
				//onerror event caters for events such as CORS errors
				that.fireItemFailed({
					source: source,
					status: xhr.status,
					statusText: xhr.statusText
				});

				var isLast = that._taskFinished(source);
				that._pickAndDispatchTask();
				if (isLast) {
					that.fireAllItemsCompleted({});
				}
			};

			xhr.onload = function(event) {

				var isLast = that._taskFinished(source);
				that._pickAndDispatchTask();
				// When file is loaded from a Cordova container the status equals 0.
				if (xhr.status === 200 || xhr.status === 0) {
					that.fireItemSucceeded({
						source: source,
						response: xhr.response
					});
				} else {
					//onload event is also called in the case of status code 404 Not Found.
					//This is why we have to check for the right status. If the status is not
					//something that indicates success, we fire the fireItemFailed event.
					that.fireItemFailed({
						source: source,
						status: xhr.status,
						statusText: xhr.statusText
					});
				}
				if (isLast) {
					that.fireAllItemsCompleted({});
				}
			};

			xhr.onprogress = function(event) {
				that.fireItemProgress({
					source: source,
					loaded: event.loaded,
					total: event.total
				});
			};

			xhr.open("GET", source, true);
			xhr.responseType = "arraybuffer";
			xhr.send(null);
		} else if (source instanceof File) {
			var fileReader = new FileReader();

			fileReader.onload = function(event) {
				var isLast = that._taskFinished(source);
				that._pickAndDispatchTask();
				that.fireItemSucceeded({
					source: source,
					response: fileReader.result
				});
				if (isLast) {
					that.fireAllItemsCompleted({});
				}
			};

			fileReader.onprogress = function(event) {
				that.fireItemProgress({
					source: source.name,
					loaded: event.loaded,
					total: event.total
				});
			};

			fileReader.onerror = function(event) {
				var isLast = that._taskFinished(source);
				that._pickAndDispatchTask();
				that.fireItemFailed({
					source: source,
					status: fileReader.error.name,
					statusText: fileReader.error.message
				});
				if (isLast) {
					that.fireAllItemsCompleted({});
				}
			};

			fileReader.readAsArrayBuffer(source);
		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT5.summary), this._messages.messages.VIT5.code, "sap.ui.vk.DownloadManager");
		}

		return this;
	};

	DownloadManager.prototype.attachItemSucceeded = function(data, func, listener) {
		return this.attachEvent("itemSucceeded", data, func, listener);
	};

	DownloadManager.prototype.detachItemSucceeded = function(func, listener) {
		return this.detachEvent("itemSucceeded", func, listener);
	};

	DownloadManager.prototype.fireItemSucceeded = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemSucceeded", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachItemFailed = function(data, func, listener) {
		return this.attachEvent("itemFailed", data, func, listener);
	};

	DownloadManager.prototype.detachItemFailed = function(func, listener) {
		return this.detachEvent("itemFailed", func, listener);
	};

	DownloadManager.prototype.fireItemFailed = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemFailed", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachAllItemsCompleted = function(data, func, listener) {
		return this.attachEvent("allItemsCompleted", data, func, listener);
	};

	DownloadManager.prototype.detachAllItemsCompleted = function(func, listener) {
		return this.detachEvent("allItemsCompleted", func, listener);
	};

	DownloadManager.prototype.fireAllItemsCompleted = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("allItemsCompleted", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachItemProgress = function(data, func, listener) {
		return this.attachEvent("itemProgress", data, func, listener);
	};

	DownloadManager.prototype.detachItemProgress = function(func, listener) {
		return this.detachEvent("itemProgress", func, listener);
	};

	DownloadManager.prototype.fireItemProgress = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemProgress", parameters, allowPreventDefault, enableEventBubbling);
	};

	return DownloadManager;
});

}; // end of sap/ui/vk/DownloadManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControl.
jQuery.sap.declare('sap.ui.vk.FlexibleControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControl",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/EnabledPropagator', './library'],
	function(jQuery, Control, EnabledPropagator, library) {
	"use strict";

	/**
	 * Constructor for a new FlexibleControl.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the FlexibleControl contents.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.FlexibleControl
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControl = Control.extend("sap.ui.vk.FlexibleControl", /** @lends sap.ui.vk.FlexibleControl.prototype */ { metadata : {

		library : "sap.ui.vk",
		properties : {

			/**
			 * CSS width of the vertical layout.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
			height : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},

			layout: {type: "string", group: "Behavior", defaultValue : "Stacked"},
			/**
			 *
			 * If not enabled all controls inside are not enabled automatically.
			 */
			enabled : {type : "boolean", group : "Behavior", defaultValue : true}
		},
		defaultAggregation : "content",
		aggregations : {

			/**
			 * Child Controls within the layout.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		},
		designTime : true
	}});


	EnabledPropagator.call(FlexibleControl.prototype);

	return FlexibleControl;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControl.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControlLayoutData.
jQuery.sap.declare('sap.ui.vk.FlexibleControlLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlLayoutData",['jquery.sap.global', 'sap/ui/core/LayoutData', './library'],
	function(jQuery, LayoutData, library) {
	"use strict";


	/**
	 * Constructor for a new FlexibleControlLayoutData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the FlexibleControl contents.
	 * Allowed size values are numeric values ending in "px" and "%" and the
	 * special case "auto".
	 * (The CSS value "auto" is used internally to recalculate the size of the content
	 * dynamically and is not directly set as style property.)
	 * @extends sap.ui.core.LayoutData
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @since 1.22.0
	 * @experimental Since version 1.22.0.
	 * API is not yet finished and might change completely
	 * @alias sap.ui.vk.FlexibleControlLayoutData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControlLayoutData = LayoutData.extend("sap.ui.vk.FlexibleControlLayoutData", /** @lends sap.ui.vk.FlexibleControlLayoutData.prototype */ { metadata : {

		library : "sap.ui.vk",
		properties : {
			/**
			 * Sets the size of the content.
			 */
			size : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},

			/**
			 * Sets the minimum size of the content in px.
			 */
			minSize : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'},

			/**
			 * Sets the margin-bottom of the content in px.
			 */
			marginTop : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'},
			marginBottom : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'}
		}
	}});

	/*** NOTHING ***/

	return FlexibleControlLayoutData;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControlLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LayerProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the LayerProxy class.
jQuery.sap.declare('sap.ui.vk.LayerProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LayerProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new LayerProxy.
	 *
	 * @class
	 * Provides a proxy object to the layer in the node hierarchy.
	 *
	 * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple layers.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy sap.ui.vk.NodeHierarchy.createLayerProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy the layer belongs to.
	 * @param {string} layerId The layer ID.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.LayerProxy
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var LayerProxy = ManagedObject.extend("sap.ui.vk.LayerProxy", /** @lends sap.ui.vk.LayerProxy.prototype */ {
		metadata: {
			properties: {
				/**
				 * The layer ID. This property is read-only.
				 */
				layerId: "string",

				/**
				 * The layer VE IDs. This property is read-only.
				 */
				veIds: "object[]",

				/**
				 * The name of the node. This property is read-only.
				 */
				name: "string",

				/**
				 * The description of the layer. This property is read-only.
				 */
				description: "string",

				/**
				 * The node metadata. This property is read-only.
				 */
				layerMetadata: "object"
			}
		},

		constructor: function(nodeHierarchy, layerId) {
			ManagedObject.call(this);

			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneId = nodeHierarchy ? nodeHierarchy._getDvlSceneId() : null;
			this._dvlLayerId = layerId;
		}
	});

	LayerProxy.prototype.destroy = function() {
		this._dvlLayerId = null;
		this._dvlSceneId = null;
		this._dvl = null;

		ManagedObject.prototype.destroy.call(this);
	};

	LayerProxy.prototype.getLayerId = function() {
		return this._dvlLayerId;
	};

	LayerProxy.prototype.getVeIds = function() {
		return getJSONObject(this._dvl.Scene.RetrieveVEIDs(this._dvlSceneId, this._dvlLayerId));
	};

	LayerProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneId, this._dvlLayerId)).name;
	};

	LayerProxy.prototype.getDescription = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneId, this._dvlLayerId)).description;
	};

	LayerProxy.prototype.getLayerMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneId, this._dvlLayerId)).metadata;
	};

	LayerProxy.prototype.getNodes = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneId, this._dvlLayerId)).nodes;
	};

	delete LayerProxy.prototype.setDescription;
	delete LayerProxy.prototype.setLayerId;
	delete LayerProxy.prototype.setLayerMetadata;
	delete LayerProxy.prototype.setName;
	delete LayerProxy.prototype.setVeIds;

	return LayerProxy;
});

}; // end of sap/ui/vk/LayerProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LegendItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.LegendItem.
jQuery.sap.declare('sap.ui.vk.LegendItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LegendItem",[
	"./library", "sap/m/StandardListItem"
], function(library, StandardListItem) {
	"use strict";

	/**
	 * Constructor for a new LegendItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Legend item control
	 * @extends sap.m.StandardListItem
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.LegendItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var LegendItem = StandardListItem.extend("sap.ui.vk.LegendItem", /** @lends sap.ui.vk.LegendItem.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties:
			{
				/**
				 * show color square
				 */
				color: {
					type: "sap.ui.core.CSSColor",
					group: "Appearance",
					defaultValue: null
				},
				/**
				 * The semantic spot type for the legend marker.
				 */
				semanticSpotType: {
					type: "sap.ui.vbm.SemanticType",
					group: "Behavior",
					defaultValue: null
				}
			},
			aggregations: {
			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// LegendItem.prototype.init = function(){
	    // do something for initialization...

	// };

	return LegendItem;

});
}; // end of sap/ui/vk/LegendItem.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ListPanel.
jQuery.sap.declare('sap.ui.vk.ListPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ListPanel",[
	'./library', 'sap/ui/core/Control', 'sap/m/library'
], function(library, Control, m_library) {
	"use strict";

	/**
	 * Constructor for a new ListPanel.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation control for the Legend
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ListPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ListPanel = Control.extend("sap.ui.vk.ListPanel", /** @lends sap.ui.vk.ListPanel.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Header text
				 */
				"headerText": {
					type: "string",
					group: "Misc"
				},
				/**
				 * Header icon
				 */
				"headerIcon": {
					type: "sap.ui.core.URI",
					group: "Misc"
				},
				/**
				 * Expansion state
				 */
				"expanded": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Expand animation
				 */
				"expandAnimation": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Selection Mode
				 */
				"selectionMode": {
					type: "sap.m.ListMode",
					group: "Misc",
					defaultValue: sap.m.ListMode.MultiSelect
				}

			},
			aggregations: {
				/**
				 * Item aggregation
				 */
				"items": {
					type: "sap.m.ListItemBase",
					multiple: true,
					singularName: "item"
				},
				/**
				 * hidden panel aggregation needed for binding
				 */
				"panel": {
					type: "sap.m.Panel",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				/**
				 * Event is fired if the header icon is pressed
				 */
				headerIconPress: {},
				/**
				 * Event is fired if the panel is expanded of collapsed
				 */
				expand: {},
				/**
				 * Event is fired when selection is changed via user interaction inside the control.
				 */
				selectionChange: {
					parameters: {

						/**
						 * The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This
						 * parameter can be used for single-selection modes.
						 */
						listItem: {
							type: "sap.m.ListItemBase"
						},

						/**
						 * Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
						 */
						listItems: {
							type: "sap.m.ListItemBase[]"
						},

						/**
						 * Indicates whether the <code>listItem</code> parameter is selected or not.
						 */
						selected: {
							type: "boolean"
						}
					}
				},
				/**
				 * Event is fired when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
				 */
				itemPress : {
					parameters : {

						/**
						 * The item which fired the pressed event.
						 */
						listItem : {type : "sap.m.ListItemBase"},

						/**
						 * The control which caused the press event within the container.
						 */
						srcControl : {type : "sap.ui.core.Control"}
					}
				}				
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//
	
	/**
	 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
	 *
	 * @type sap.m.ListItemBase
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.getSelectedItem = function() {
		return this._oList.getSelectedItem();
	};
	
	/**
	 * Selects or deselects the given list item.
	 *
	 * @param {sap.m.ListItemBase} oListItem
	 *         The list item whose selection to be changed. This parameter is mandatory.
	 * @param {boolean} bSelect
	 *         Sets selected status of the list item. Default value is true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.setSelectedItem = function(oListItem, bSelect, bFireEvent) {
		this._oList.setSelectedItem(oListItem, bSelect, bFireEvent);
	};
	
	/**
	 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
	 *
	 * @type sap.m.ListItemBase[]
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.getSelectedItems = function() {
		return this._oList.getSelectedItems();
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//
	ListPanel.prototype.init = function() {
		// do something for initialization...
		this._oList = new sap.m.ListBase({
			mode: this.getSelectionMode(),
			itemPress: this.fireItemPress.bind(this),
			selectionChange: this.fireSelectionChange.bind(this)
		});

		this._oPanel = new sap.m.Panel({
			expandable: true,
			expanded: true,
			expandAnimation: true,
			headerToolbar: new sap.m.Toolbar({
				active: true,
				press: this._onHeaderToolbarPress.bind(this)
			}),
			content: [
				this._oList
			],
			expand: this.fireExpand.bind(this)
		});
		this._oPanel.getHeaderToolbar().addStyleClass("sapUiVkLPTb");
		this.setAggregation("panel", this._oPanel, /* bSuppressInvalidate= */ true);

		this._oHeaderIcon = null;
		this._oHeaderText = null;
		this._bHeaderToolbarChanged = true;

	};

	ListPanel.prototype.exit = function() {
		this._destroyControl(this._oList);
		this._destroyControl(this._oPanel);
		this._destroyControl(this._oHeaderIcon);
		this._destroyControl(this._oHeaderText);
	};

	ListPanel.prototype.getItems = function() {
		return this._oList.getItems();
	};

	ListPanel.prototype.addItem = function(oObject) {
		return this._oList.addItem(oObject);
	};

	ListPanel.prototype.insertItem = function(oObject, iIndex) {
		return this._oList.insertItem(oObject, iIndex);
	};

	ListPanel.prototype.removeItem = function(oObject) {
		return this._oList.removeItem(oObject);
	};

	ListPanel.prototype.removeAllItems = function() {
		return this._oList.removeAllItems();
	};

	ListPanel.prototype.setHeaderText = function(value) {
		if (!this._oHeaderText) {
			this._oHeaderText = new sap.m.Title();
		}
		this._oHeaderText.setText(value);
		this._bHeaderToolbarChanged = true;
		return this.setProperty("headerText", value);
	};

	ListPanel.prototype.getExpanded = function() {
		return this._oPanel.getExpanded();
	};

	ListPanel.prototype.setExpanded = function(value) {
		return this._oPanel.setExpanded(value);
	};

	ListPanel.prototype.getExpandAnimation = function() {
		return this._oPanel.getExpandAnimation();
	};

	ListPanel.prototype.setExpandAnimation = function(value) {
		return this._oPanel.setExpandAnimation(value);
	};

	ListPanel.prototype.setHeaderIcon = function(value) {
		if (!this._oHeaderIcon) {
			this._oHeaderIcon = new sap.m.Button({
				press: this.fireHeaderIconPress.bind(this),
				type: sap.m.ButtonType.Transparent
			});
		}
		this._oHeaderIcon.setIcon(value);
		this._bHeaderToolbarChanged = true;
		return this.setProperty("headerIcon", value);
	};

	ListPanel.prototype.setSelectionMode = function(value) {
		this._oList.setMode(value);
		return this.setProperty("selectionMode", value);
	};

	ListPanel.prototype.onBeforeRendering = function() {
		if (this._bHeaderToolbarChanged) {
			var oToolbar = this._oPanel.getHeaderToolbar();
			oToolbar.removeAllContent();
			if (this._oHeaderIcon) {
				oToolbar.addContent(this._oHeaderIcon);
			}
			if (this._oHeaderText) {
				oToolbar.addContent(this._oHeaderText);
			}
			this._bHeaderToolbarChanged = false;
		}
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	ListPanel.prototype._destroyControl = function(oControl) {
		if (oControl) {
			oControl.destroy();
			oControl = undefined;
		}
	};

	ListPanel.prototype._onHeaderToolbarPress = function(oEvent) {
		this._oPanel.setExpanded(!this._oPanel.getExpanded());
	};	

	return ListPanel;

});

}; // end of sap/ui/vk/ListPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelStack') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ListPanelStack.
jQuery.sap.declare('sap.ui.vk.ListPanelStack'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ListPanelStack",[
	"./library", "sap/ui/core/Control", "sap/ui/layout/library"
], function(library, Control, layoutLibrary) {
	"use strict";

	/**
	 * Constructor for a new ListPanelStack.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class ListPanelStack control
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ListPanelStack
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ListPanelStack = Control.extend("sap.ui.vk.ListPanelStack", /** @lends sap.ui.vk.ListPanelStack.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Control width
				 */
				"width": {
					type: "sap.ui.core.CSSSize",
					group: "Misc",
					defaultValue: "100%"
				},
				/**
				 * Expansion state
				 */
				"expanded": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Expand animation
				 */
				"expandAnimation": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Ability to collapse
				 */
				"collapsible": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {

				"content": {
					type: "sap.ui.vk.ListPanel",
					multiple: true,
					singularName: "content"
				},
				/**
				 * hidden layout aggregation needed for binding
				 */
				"layout": {
					type: "sap.ui.layout.VerticalLayout",
					multiple: false,
					visibility: "hidden"
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//
	ListPanelStack.prototype.init = function() {
		// do something for initialization...
		this._oLayout = new sap.ui.layout.VerticalLayout();
		// default expandAnimation: true
		this._oLayout.addStyleClass("sapUiVkLPSTrans");
		this.setAggregation("layout", this._oLayout, /* bSuppressInvalidate= */ true);
		this._bFirstTime = true;
	};

	ListPanelStack.prototype.exit = function() {
		if (this._oLayout) {
			this._oLayout.destroy();
			this._oLayout = undefined;
		}
	};

	ListPanelStack.prototype.getContent = function() {
		return this._oLayout.getContent();
	};

	ListPanelStack.prototype.addContent = function(oObject) {
		oObject.attachExpand(this._onContentExpand.bind(this));
		oObject.attachHeaderIconPress(this._onContentHeaderIconPress.bind(this));
		return this._oLayout.addContent(oObject);
	};

	ListPanelStack.prototype.removeContent = function(oObject) {
		return this._oLayout.removeContent(oObject);
	};

	ListPanelStack.prototype.insertContent = function(oObject, iIndex) {
		return this._oLayout.insertContent(oObject, iIndex);
	};

	ListPanelStack.prototype.removeAllContent = function() {
		return this._oLayout.removeAllContent();
	};

	ListPanelStack.prototype.getWidth = function() {
		return this._oLayout.getWidth();
	};

	ListPanelStack.prototype.setWidth = function(value) {
		this.setProperty("width", value, true);
		return this._oLayout.setWidth(value);
	};

	ListPanelStack.prototype.setExpanded = function(value) {
		if (value != this.getExpanded()) {
			if (value) {
				this._expand();
			} else {
				this._collapse();
			}
		}
		return this;
	};

	ListPanelStack.prototype.setExpandAnimation = function(value) {
		this._oLayout.removeStyleClass("sapUiVkLPSTrans");
		if (value) {
			this._oLayout.addStyleClass("sapUiVkLPSTrans");
		}
		return this.setProperty("expandAnimation", value, true);
	};

	ListPanelStack.prototype.onBeforeRendering = function() {
		if (this._bFirstTime) {
			// check expand state of all content panels to determine initial expand state for stack
			var bExpanded = false;
			var aContent = this.getContent();
			for (var i = 0; i < aContent.length; ++i) {
				if (aContent[i].getExpanded()) {
					bExpanded = true;
				}
			}
			this.setExpanded(bExpanded);
			this._bFirstTime = false;
		}
	};

	ListPanelStack.prototype.onAfterRendering = function() {
		// If the control is not expanded, then it means it's collapsed
		// so we applied the requiered width.
		if (!this.getExpanded()) {
			this._updateCollapsedLayoutWidth();
		}
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	ListPanelStack.prototype._onContentExpand = function(oEvent) {
		var expanded = false;
		var aContent = this._oLayout.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			if (aContent[i].getExpanded()) {
				expanded = true;
			}
		}
		this.setExpanded(expanded);
	};

	ListPanelStack.prototype._onContentHeaderIconPress = function(oEvent) {
		var bsetExpand = oEvent.oSource.getExpanded() ? false : true;
		oEvent.oSource.setExpanded(bsetExpand);
		var bExpand = false;
		var aContent = this._oLayout.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			if (aContent[i].getExpanded()) {
				bExpand = true;
				break;
			}
		}
		this.setExpanded(bExpand);

	};

	ListPanelStack.prototype._expand = function() {
		this._oLayout.removeStyleClass("sapUiVkLPSCollapse");
		this._oLayout.setWidth(this.getProperty("width"));
		this.setProperty("expanded", true, true);
	};

	ListPanelStack.prototype._collapse = function() {
		if (!this.getCollapsible()) {
			return;
		}

		// make sure all panels are collapsed
		var aContent = this.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			aContent[i].setExpanded(false);
		}
		// collapse the stack
		this._oLayout.addStyleClass("sapUiVkLPSCollapse");

		this._updateCollapsedLayoutWidth();

		this.setProperty("expanded", false, true);
	};

	ListPanelStack.prototype._updateCollapsedLayoutWidth = function() {
		// Checking if any ancestor of this element has the compact class;
		// we do not to apply the cozy size if the sapUiSizeCompact class
		// exists on an element which is not an ancestor.
		if (this._oLayout.$().closest(".sapUiSizeCompact").length === 0) {
			this._oLayout.setWidth("3rem");
		} else {
			this._oLayout.setWidth("2.5rem");
		}
	};

	return ListPanelStack;

});
}; // end of sap/ui/vk/ListPanelStack.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.MapContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.MapContainer.
jQuery.sap.declare('sap.ui.vk.MapContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.lib.sapvbi'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/MapContainer",[
	'jquery.sap.global', './library', 'sap/ui/vk/ContainerBase', 'sap/ui/core/IconPool', 'sap/ui/vbm/lib/sapvbi', 'sap/ui/Device'
], function(jQuery, library, ContainerBase, IconPool, sapvbi, Device) {
	"use strict";

	/**
	 * Constructor for a new MapContainer.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Abstract Constructor for a new Container.
	 * @extends sap.ui.vk.ContainerBase
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.MapContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var MapContainer = ContainerBase.extend("sap.ui.vk.MapContainer", /** @lends sap.ui.vk.MapContainer.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Show navbar
				 */
				"showNavbar": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the home button
				 */
				"showHome": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the rectangular zoom button
				 */
				"showRectangularZoom": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the zoom buttons
				 */
				"showZoom": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * List Panel aggregation
				 */
				"listPanelStack": {
					type: "sap.ui.vk.ListPanelStack",
					multiple: false
				},
				/**
				 * hidden scroll container aggregation needed for binding
				 */
				"scrollCont": {
					type: "sap.m.ScrollContainer",
					multiple: false,
					visibility: "hidden"
				} 
			},
			associations: {},
			events: {}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	MapContainer.prototype.init = function() {
		// call super init
		ContainerBase.prototype.init.apply(this, arguments);

		// create model and set the data
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			rectZoom: false
		});
		this.setModel(oModel, "rectZoom");

		// navbar
		this._oNavbar = new sap.m.Toolbar({
			// Use ToolbarDesign.Auto
			width: "auto"
		});
		// scroll container for list panel stack
		this._oScrollCont = new sap.m.ScrollContainer({
			height: "100%",
			horizontal: false,
			vertical: true,
			focusable: false
		});
		this.setAggregation("scrollCont", this._oScrollCont, /* bSuppressInvalidate= */ true);

		// create potential nabar buttons
		this._oHomeButton = new sap.m.Button({
			icon: "sap-icon://home",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_HOME"),
			press: this._onNavbarHome.bind(this)
		});
		this._oRectZoomButton = new sap.m.ToggleButton({
			icon: "sap-icon://draw-rectangle",
			type: sap.m.ButtonType.Transparent,
			pressed: '{rectZoom>/rectZoom}',
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_RECT_ZOOM")
		}).setModel(oModel, "rectZoom");
		this._oZoomInButton = new sap.m.Button({
			icon: "sap-icon://add",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_ZOOMIN"),
			press: this._onNavbarZoomIn.bind(this)
		});
		this._oZoomOutButton = new sap.m.Button({
			icon: "sap-icon://less",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_ZOOMOUT"),
			press: this._onNavbarZoomOut.bind(this)
		});

		// Menu buttons for ListPanelStack on mobile phone
		if (Device.system.phone) {
			this._oMenuOpenButton = new sap.m.Button({
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.NeverOverflow
				}),
				icon: "sap-icon://menu2",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU"),
				press: function() {
					this._bSegmentedButtonSaveSelectState = true;
					this._showListPanelStack();
				}.bind(this)
			});
			this._oMenuCloseButton = new sap.m.Button({
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://nav-back",					
				press: function() {
					this._bSegmentedButtonSaveSelectState = true;
					this._hideListPanelStack();
				}.bind(this)
			});
		}
	};

	MapContainer.prototype.exit = function() {
		if (this._oNavbar) {
			this._oNavbar.destroy();
			this._oNavbar = undefined;
		}
		if (this._oScrollCont) {
			this._oScrollCont.destroy();
			this._oScrollCont = undefined;
		}
		// call super exit
		ContainerBase.prototype.exit.apply(this, arguments);
	};

	// delegate listPanelStack aggregation to ScrollContainer content aggregation
	MapContainer.prototype.getListPanelStack = function() {
		return this._oScrollCont.getContent()[0];
	};

	MapContainer.prototype.setListPanelStack = function(oPanel) {
		if (Device.system.phone) {
			// Do not allow to collapse List Panel Stack on mobile phones, since it is rendered in a side container there
			oPanel.setCollapsible(false);
			oPanel.setWidth("100%");
		}		
		this._oScrollCont.removeAllContent();
		return this._oScrollCont.addContent(oPanel);
	};

	// ...............................................................................
	// Redefined functions
	// ...............................................................................

	MapContainer.prototype.onBeforeRendering = function() {
		// call super implementation
		ContainerBase.prototype.onBeforeRendering.apply(this, arguments);

		this._oNavbar.removeAllContent();
		// repopulate navbar buttons according current settings

		var content = this.getSelectedContent();
		if (content !== null) {
			var control = content.getContent();
			this._isInstanceGeoAnalytic = control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap;
			if (this._isInstanceGeoAnalytic) {
				if (this.getShowHome()) {
					this._oNavbar.addContent(this._oHomeButton);
				}
				if (!Device.system.phone && this.getShowRectangularZoom()) {
					this._oNavbar.addContent(this._oRectZoomButton);
				}
				if (this.getShowZoom()) {
					this._oNavbar.addContent(this._oZoomInButton);
					this._oNavbar.addContent(this._oZoomOutButton);
				}
				this._shouldRenderListPanel = true;
			} else {
				this._shouldRenderListPanel = false;
			}
		}
	};

	MapContainer.prototype.onAfterRendering = function() {
		if (Device.system.phone) {
			// append ListPanelStackWrapper to control div to be a sibling of the content wrapper
			var oListPanelWrapperDiv = document.getElementById(this.getId() + "-LPW");
			this.getDomRef().appendChild(oListPanelWrapperDiv);
		}

		// call super implementation
		ContainerBase.prototype.onAfterRendering.apply(this, arguments);
	};

	MapContainer.prototype.setSelectedContent = function(oContent) {
		var oOldControl;
		if (this._oSelectedContent) {
			if ((oOldControl = this._oSelectedContent.getContent()) instanceof sap.ui.vbm.GeoMap) {
				oOldControl.unbindProperty("rectZoom", "rectZoom>/rectZoom");
			}
		}
		// call super implementation
		ContainerBase.prototype.setSelectedContent.apply(this, arguments);

		var oNewControl = this._oSelectedContent.getContent();
		if (oNewControl instanceof sap.ui.vbm.GeoMap) {
			oNewControl.bindProperty("rectZoom", "rectZoom>/rectZoom");
		}
	};

	MapContainer.prototype._addToolbarContent = function() {
		if (Device.system.phone) {
			this._oToolbar.addContent(this._oMenuOpenButton);
		}
		// call super implemetation
		ContainerBase.prototype._addToolbarContent.apply(this, arguments);
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	MapContainer.prototype._onNavbarZoomIn = function(oEvent) {

		var control = this.getSelectedContent().getContent();
		if (control.getZoomlevel && control.setZoomlevel && control.setEnableAnimation) {
			control.setEnableAnimation(true);
			control.setZoomlevel(control.getZoomlevel() + 1);
		}
	};

	MapContainer.prototype._onNavbarZoomOut = function(oEvent) {
		var control = this.getSelectedContent().getContent();
		if (control.getZoomlevel && control.setZoomlevel && control.setEnableAnimation) {
			control.setEnableAnimation(true);
			control.setZoomlevel(control.getZoomlevel() - 1);
		}
	};

	MapContainer.prototype._onNavbarHome = function(oEvent) {
		var control = this.getSelectedContent().getContent();
		if (control.goToStartPosition) {
			control.goToStartPosition();
		}
	};

	MapContainer.prototype._showListPanelStack = function() {
		jQuery("#" + this.getId() + "-LPW").addClass("sapUiVkMapContainerLPWIn");
		jQuery("#" + this.getId() + "-wrapper").addClass("sapUiVkMapContainerMapOut");
	};

	MapContainer.prototype._hideListPanelStack = function() {
		jQuery("#" + this.getId() + "-LPW").removeClass("sapUiVkMapContainerLPWIn");
		jQuery("#" + this.getId() + "-wrapper").removeClass("sapUiVkMapContainerMapOut");
	};

	return MapContainer;

});
}; // end of sap/ui/vk/MapContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewport') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.NativeViewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewport",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler", "./Messages"
], function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler, Messages) {
	"use strict";

	/**
	 * Constructor for a new NativeViewport.
	 *
	 * @param {string} [sId] ID for the new Native Viewport control, generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Native Viewport control.
	 * @class Enables loading, pan, zoom and overlay capabilities for a subset of file formats capable of being loaded into a browser natively.
	 *
	 * <pre>
	 * viewer.loadContent(&quot;https://www.google.co.nz/images/srpr/logo11w.png&quot;, &quot;png&quot;, true);
	 * </pre>
	 *
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.38.15
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.NativeViewport
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NativeViewport = Control.extend("sap.ui.vk.NativeViewport", /** @lends sap.ui.vk.NativeViewport.prototype */
	{
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full view (best fit).
				 */
				limitZoomOut: {
					type: "boolean",
					group: "Behavior",
					defaultValue: false
				}
			},
			publicMethods: [
				"beginGesture", "endGesture", "pan", "rotate", "zoom", "tap", "queueCommand", "getViewInfo", "setViewInfo", "loadUrl"
			],
			events: {
				/**
				 * Raised when the display size of the image in the Native Viewport changes.
				 *
				 * @param {object} [oldSize] The starting size of the image.
				 * @param {object} [size] The final size of the image after the <code>resize</code> event.
				 */
				"resize": {
					parameters: {
						oldSize: "object",
						size: "object"
					}
				},
				/**
				 * Raised when the display position or magnification of the image in the Native Viewport changes.
				 *
				 * @param {object} [pan] The change in distance along the x, y-coordinates.
				 * @param {float} [zoom] The change in zoom factor.
				 */
				"move": {
					parameters: {
						pan: "object",
						zoom: "float"
					}
				}
			}
		}
	});

	NativeViewport.prototype.init = function() {
		this._messages = new Messages();
		if (Control.prototype.init) {
			Control.prototype.init(this);
		}

		this._canvas = null;
		this._canvas = document.createElement("div");
		//When we are doing the position calculations, we always assume this element is adding children
		//to its left, which is not the case in RTL mode. This is why we are setting the alignment to be "left".
		this._canvas.style.textAlign = "left";

		this._canvas.id = jQuery.sap.uid();

		this._resizeListenerId = null;

		this._viewportHandler = new ViewportHandler(this);
		this._loco = new Loco();
		this._loco.addHandler(this._viewportHandler);

		this._img = null;
		this._svg = null;
		this._svgError = null;
		this._reset();

		this._gx = 0;
		this._gy = 0;

		this._errorImageWidth = 550;
		this._errorImageHeight = 512;

		this._imageW = 0;
		this._imageH = 0;

		this._s4BestFit = 0;

		this._update = function () {};

		this._svgid = this.getId() +  "-svg";
	};

	NativeViewport.prototype.exit = function() {
		this._loco.removeHandler(this._viewportHandler);
		this._viewportHandler.destroy();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
		if (Control.prototype.exit) {
			Control.prototype.exit.apply(this);
		}
	};

	NativeViewport.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	NativeViewport.prototype.onAfterRendering = function() {
		if (this._canvas) {
			var domRef = this.getDomRef();
			domRef.appendChild(this._canvas);
			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
			this._bestFit();
			this._handleResize({
				size: {
					width: domRef.clientWidth,
					height: domRef.clientHeight
				}
			});
		}
	};

	/**
	 * @private
	 */
	NativeViewport.prototype._handleResize = function(event) {
		this.fireResize({
			oldSize: event.oldSize,
			size: event.size
		});
		this._update();
	};

	/**
	 * @private
	 */
	NativeViewport.prototype._reset = function() {
		this._x = 0;
		this._y = 0;
		this._s = 1.0;
		this._r = 0;
	};

	/**
	 * @private
	 */
	NativeViewport.prototype._updateIMG = function() {
		if (this._img != null) {
			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;
			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ")";

			this._img.style.transform = transform;
			this._img.style.webkitTransform = transform;
			this._img.style.msTransform = transform;
			this._img.style.MozTransform = transform;
			this._img.style.OTransform = transform;
		}
	};

	NativeViewport.prototype._updateSVG = function() {
		if (this._svg != null) {

			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;

			if ((this.x < 0) && (this.y < 0)) {
				x = 0;
				y = 0;
			}
			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ");";

			this._svg.setAttribute("style", "transform:" + transform +
				"webkitTransform:" + transform +
				"msTransform:" + transform +
				"MozTransform:" + transform +
				"OTransform:" + transform);
		}
	};

	NativeViewport.prototype._updateError = function() {
		if (this._svgError != null) {
			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;

			if ((this.x < 0) && (this.y < 0)) {
				x = 0;
				y = 0;
			}

			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ");";

			this._svgError.setAttribute("style", "transform:" + transform +
				"webkitTransform:" + transform +
				"msTransform:" + transform +
				"MozTransform:" + transform +
				"OTransform:" + transform);
		}
	};
	/**
	 * @private
	 */
	NativeViewport.prototype._bestFit = function() {
		if (this._canvas.children[0] && this._canvas.children[0].getBoundingClientRect().width && this._canvas.children[0].getBoundingClientRect().height) {
			//Zoom to best fit
			var widthParentChildRatio = this._canvas.clientWidth / this._canvas.children[0].getBoundingClientRect().width,
				heightParentChildRatio = this._canvas.clientHeight / this._canvas.children[0].getBoundingClientRect().height,
				scale = widthParentChildRatio < heightParentChildRatio ? widthParentChildRatio : heightParentChildRatio;
			this.zoom(scale);

			//Getting the image and nativeViewport dimensions so we can center the image
			var offsetLeft = jQuery(this._canvas.children[0]).position().left - jQuery(this._canvas).position().left,
				offsetTop = jQuery(this._canvas.children[0]).position().top - jQuery(this._canvas).position().top,
				imageWidth = this._canvas.children[0].getBoundingClientRect().width,
				imageHeight = this._canvas.children[0].getBoundingClientRect().height,
				viewportWidth = this._canvas.getBoundingClientRect().width,
				viewportHeight = this._canvas.getBoundingClientRect().height;

			//Center horizontally and vertically
			var deltaX = (viewportWidth - imageWidth) / 2 - offsetLeft,
				deltaY = (viewportHeight - imageHeight) / 2 - offsetTop;
			this.pan(deltaX, deltaY);
		}
	};

	/**
	 * Loads a image URL into Viewport.
	 *
	 * @param {string} url: The URL of the resource.
	 * @param {function} onload: onload callback, called when the resource is loaded successfully.
	 * @param {function} onerror: onerror callback, called when an error occurs during the loading process.
	 * @param {function} onprogress: onprogress callback, called during the loading process.
	 * @param {array} resourceType: an array of type of resources to load.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.loadUrl = function(url, onload, onerror, onprogress, resourceType) {

		if (/^(svg)$/.test(resourceType.toLowerCase())) {

			while (this._canvas.lastChild) {
				this._canvas.removeChild(this._canvas.lastChild);
			}
			this._reset();

			this._svg = document.createElement("object");
			this._svg.setAttribute("type","image/svg+xml");
			this._svg.setAttribute("data",url);
			this._svg.setAttribute("id", this._svgid);
			this._svg.setAttribute("class", "SVGImage");
			this._canvas.appendChild(this._svg);

			var svgCover = document.createElement("div");
			this._canvas.appendChild(svgCover);
			svgCover.style.position = "absolute";
			svgCover.style.top = 0;
			svgCover.style.left = 0;
			svgCover.style.height = "100%";
			svgCover.style.width = "100%";

			this._svg.style.visibility = "hidden";
			this._svg.onload = function() {
				setTimeout(function() {
					this._imageW = jQuery("#" + this._svgid).width();
					this._imageH = jQuery("#" + this._svgid).height();
					this._s = 1;
					this._update = this._updateSVG.bind(this);
					this._bestFit();
					onload();
				}.bind(this), 0);
			}.bind(this);

			this._svg.src = url;

			this._svg.onerror = function() {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT1.summary), this._messages.messages.VIT1.code, "sap.ui.vk.NativeViewport");
				onerror();
			}.bind(this);

			return this;

		} else if (/^(jpg|png|gif|bmp|tif|tiff)$/.test(resourceType.toLowerCase())) {
			while (this._canvas.lastChild) {
				this._canvas.removeChild(this._canvas.lastChild);
			}

			// pdf rendering
			// http://mozilla.github.io/pdf.js/web/viewer.html
			// http://stackoverflow.com/questions/15341010/render-pdf-to-single-canvas-using-pdf-js-and-imagedata
			// https://github.com/mozilla/pdf.js
			this._reset();

			this._img = new Image();
			this._img.onload = function() {
				this._imageW = this._img.width;
				this._imageH = this._img.height;

				setTimeout(function() {
					this._canvas.appendChild(this._img);
					this._update = this._updateIMG.bind(this);
					this._bestFit();
				}.bind(this), 0);

				onload();
			}.bind(this);

			this._img.onerror = function() {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT2.summary), this._messages.messages.VIT2.code, "sap.ui.vk.NativeViewport");
				onerror();
			}.bind(this);

			this._img.src = url;

			return this;

		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT3.summary), this._messages.messages.VIT3.code, "sap.ui.vk.NativeViewport");
			onerror();
		}
	};

	NativeViewport.prototype.loadFailed = function(textContent) {

		while (this._canvas.lastChild) {
			this._canvas.removeChild(this._canvas.lastChild);
		}
		this._reset();

			//We need the svg to be in a div container because SVGS
			//do not handle the offset properties properly.
			//These properties will be deprecated by the browser vendors.
			this._svgError = document.createElement("div");
			this._svgError.className = "svgErrorContainer";

			this._svgErrorElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
				this._svgErrorElement.setAttribute('width', '550px');
				this._svgErrorElement.setAttribute('height', '512px');
				this._svgErrorElement.setAttribute('viewBox', "-244 -244 512 512");
				this._svgErrorElement.setAttribute('enable-background', "new -244 -244 512 512");
				this._svgErrorElement.setAttribute("id", "SVGError");

			var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rect.setAttribute("fill","#FFFFFF");
				rect.setAttribute("x", "-244");
				rect.setAttribute("y", "-244");
				rect.setAttribute("width", "512");
				rect.setAttribute("height", "512");
				rect.setAttribute("opacity", "0.1");
				this._svgErrorElement.appendChild(rect);

			var pathCircle = document.createElementNS('http://www.w3.org/2000/svg', 'path');
				pathCircle.setAttribute("fill", "#474747");
				pathCircle.setAttribute("d", "M12.833,89.742c-70.781,0-128.366-57.584-128.366-128.366c0-70.781,57.584-128.365,128.366-128.365 s128.365,57.584,128.365,128.365C141.198,32.158,83.614,89.742,12.833,89.742z M12.833-146.989 c-59.753,0-108.366,48.612-108.366,108.365c0,59.752,48.613,108.366,108.366,108.366S121.198,21.129 121.198-38.624 C121.198-98.376,72.586-146.989,12.833-146.989z");
				pathCircle.setAttribute("opacity","0.3");
				this._svgErrorElement.appendChild(pathCircle);

			var rectExclamation = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rectExclamation.setAttribute("fill","#474747");
				rectExclamation.setAttribute("x", "-2.167");
				rectExclamation.setAttribute("y", "-120.847");
				rectExclamation.setAttribute("width", "30");
				rectExclamation.setAttribute("height", "119.447");
				rectExclamation.setAttribute("fill","#474747");
				rectExclamation.setAttribute("opacity","0.3");
				this._svgErrorElement.appendChild(rectExclamation);

			var rectExclamationCircle = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rectExclamationCircle.setAttribute("fill","#474747");
				rectExclamationCircle.setAttribute("x", "-2.167");
				rectExclamationCircle.setAttribute("y", "13.6");
				rectExclamationCircle.setAttribute("width", "30");
				rectExclamationCircle.setAttribute("height", "30");
				rectExclamationCircle.setAttribute("opacity","0.3");
				this._svgErrorElement.appendChild(rectExclamationCircle);

			var pathCircleOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'path');
				pathCircleOverlay.setAttribute("fill", "#474747");
				pathCircleOverlay.setAttribute("d", "M10.833,87.33c-70.781,0-128.366-57.584-128.366-128.365c0-70.781,57.584-128.365,128.366-128.365 s128.365,57.584,128.365,128.365C139.198,29.746,81.614,87.33,10.833,87.33z M10.833-149.4 c-59.753,0-108.366,48.612-108.366,108.365S-48.92,67.33,10.833,67.33S119.198,18.718,119.198-41.035S70.586-149.4,10.833-149.4z");
				this._svgErrorElement.appendChild(pathCircleOverlay);

			var rectExclamationOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rectExclamationOverlay.setAttribute("fill","#474747");
				rectExclamationOverlay.setAttribute("x", "-4.167");
				rectExclamationOverlay.setAttribute("y", "-123.259");
				rectExclamationOverlay.setAttribute("width", "30");
				rectExclamationOverlay.setAttribute("height", "119.447");
				rectExclamationOverlay.setAttribute("fill","#474747");
				this._svgErrorElement.appendChild(rectExclamationOverlay);

			var rectExclamationCircleOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
				rectExclamationCircleOverlay.setAttribute("fill","#474747");
				rectExclamationCircleOverlay.setAttribute("x", "-4.167");
				rectExclamationCircleOverlay.setAttribute("y", "11.188");
				rectExclamationCircleOverlay.setAttribute("width", "30");
				rectExclamationCircleOverlay.setAttribute("height", "30");
				rectExclamationCircleOverlay.setAttribute("fill","#474747");
				this._svgErrorElement.appendChild(rectExclamationCircleOverlay);

			var textOverlay = document.createElementNS('http://www.w3.org/2000/svg', 'text');
				textOverlay.setAttribute("id", "textError");
				textOverlay.setAttribute("left", "auto");
				textOverlay.setAttribute("right", "auto");
				textOverlay.setAttribute("y", "150");
				textOverlay.setAttribute("x", "10");
				textOverlay.setAttribute("display", "block");
				textOverlay.setAttribute("text-anchor", "middle");
				textOverlay.setAttribute("fill","#474747");
				textOverlay.setAttribute('style','font-family:Arial');
				textOverlay.setAttribute('font-size','32');
				textOverlay.textContent = textContent ? textContent : sap.ui.vk.getResourceBundle().getText("VIEWPORT_MESSAGEUNSUPPORTEDFILEFORMAT");
				this._svgErrorElement.appendChild(textOverlay);

				this._svgError.appendChild(this._svgErrorElement);
				this._canvas.appendChild(this._svgError);
				this._imageW = this._errorImageWidth;
				this._imageH = this._errorImageHeight;
				this._update = this._updateError.bind(this);

				setTimeout(function() {
					this._bestFit();
				}.bind(this), 0);

				setTimeout(function() {
					this._bestFit();
				}.bind(this), 0);

				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT4.summary), this._messages.messages.VIT4.code, "sap.ui.vk.NativeViewport");

				return this;
		};

	/**
	 * Marks the start of the current gesture operation.
	 *
	 * @param {int} x: x-coordinate in screen space.
	 * @param {int} y: y-coordinate in screen space.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.beginGesture = function(x, y) {
		this._gx = (x - this._canvas.clientWidth / 2 - this._x) / this._s;
		this._gy = (y - this._canvas.clientHeight / 2 - this._y) / this._s;

		return this;
	};

	/**
	 * Marks the end of the current gesture operation.
	 *
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.endGesture = function() {
		this._gx = 0;
		this._gy = 0;
		return this;
	};

	/**
	 * Performs a <code>pan</code> gesture to pan across the Viewport.
	 *
	 * @param {int} dx: The change in distance along the x-coordinate.
	 * @param {int} dy: The change in distance along the y-coordinate.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.pan = function(dx, dy) {
		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: 1.0
		});

		return this;
	};

	/**
	 * Rotates the content of the Viewport.
	 *
	 * @param {int} dx: The change in x-coordinate used to define the desired rotation.
	 * @param {int} dy: The change in y-coordinate used to define the desired rotation.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.rotate = function(dx, dy) {
		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: 1.0
		});

		return this;
	};

	/**
	 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
	 *
	 * @param {double} z: Zoom factor. A scale factor that specifies how much to zoom in or out by.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.zoom = function(z) {
		// Canvas zooming: http://stackoverflow.com/questions/3420975/html5-canvas-zooming
		var gxo = this._gx * this._s;
		var gyo = this._gy * this._s;

		// limit zoom out to a quarter of best fit if limiting is active
		var newScale = this._s * z;
		var zoomOutLimit = (this.getLimitZoomOut()) ? this._s4BestFit * 0.25 : 0;
		if (newScale > zoomOutLimit) {
			this._s = newScale;
		} else {
			z = zoomOutLimit / this._s;
			this._s = zoomOutLimit;
		}

		var gxn = this._gx * this._s;
		var gyn = this._gy * this._s;
		var dx = gxo - gxn;
		var dy = gyo - gyn;

		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: z
		});

		return this;
	};

	/**
	 * Executes a click or tap gesture.
	 *
	 * @param {int} x: The tap gesture's x-coordinate.
	 * @param {int} y: The tap gesture's y-coordinate.
	 * @param {boolean} isDoubleClick: Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code>
	 *        indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.tap = function(x, y, isDoubleClick) {
		if (isDoubleClick) {
			this._bestFit();
		}
		return this;
	};

	/**
	 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
	 *
	 * @param {function} command: The function to be executed.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.queueCommand = function(command) {
		command();
		return this;
	};

	/**
	 * Gets information about the Viewport's attributes; for example, camera.
	 *
	 * @return {object} ViewInfo object.
	 * @public
	 */
	NativeViewport.prototype.getViewInfo = function() {
		var viewInfo = {};
		viewInfo.camera = [
			this._s, 0, 0, this._s, this._x, this._y
		];

		return viewInfo;
	};

	/**
	 * Sets information about the Viewport's attributes; for example, camera.
	 *
	 * @param {object} viewInfo: ViewInfo object.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.setViewInfo = function(viewInfo) {
		var cam = viewInfo.camera;

		this._s = cam[0];
		this._x = cam[4];
		this._y = cam[5];

		this._update();

		return this;
	};

	////////////////////////////////////////////////////////////////////////
	// Keyboard handling begins.

	var rotateDelta = 2;
	var panDelta = 2;

	[
		{ key: "left",  dx: -panDelta, dy:         0 },
		{ key: "right", dx: +panDelta, dy:         0 },
		{ key: "up",    dx:         0, dy: -panDelta },
		{ key: "down",  dx:         0, dy: +panDelta }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.pan(item.dx, item.dy);
			this.endGesture();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	[
		{ key: "left",  dx: -rotateDelta, dy:            0 },
		{ key: "right", dx: +rotateDelta, dy:            0 },
		{ key: "up",    dx:            0, dy: -rotateDelta },
		{ key: "down",  dx:            0, dy: +rotateDelta }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key + "modifiers"] = function(event) {
			if (event.shiftKey && !(event.ctrlKey || event.altKey || event.metaKey)) {
				this.beginGesture(this.$().width() / 2, this.$().height() / 2);
				this.rotate(item.dx, item.dy);
				this.endGesture();
				event.preventDefault();
				event.stopPropagation();
			}
		};
	});

	[
		{ key: "minus", d: 0.98 },
		{ key: "plus",  d: 1.02 }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.zoom(item.d);
			this.endGesture();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	// Keyboard handling ends.
	////////////////////////////////////////////////////////////////////////


	return NativeViewport;

});

}; // end of sap/ui/vk/NativeViewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeProxy class.
jQuery.sap.declare('sap.ui.vk.NodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new NodeProxy.
	 *
	 * @class
	 * Provides a proxy object to the node in the node hierarchy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy} method.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy the node belongs to.
	 * @param {string} nodeId The node ID.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.NodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeProxy = ManagedObject.extend("sap.ui.vk.NodeProxy", /** @lends sap.ui.vk.NodeProxy.prototype */ {
		metadata: {
			properties: {
				/**
				 * The node ID. This property is read-only.
				 */
				nodeId: "string",

				/**
				 * The node VE IDs. This property is read-only.
				 */
				veIds: "object[]",

				/**
				 * The name of the node. This property is read-only.
				 */
				name: "string",

				/**
				 * The local transformation matrix of the node.
				 */
				localMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The world transformation matrix of the node.
				 */
				worldMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The node opacity.
				 */
				opacity: {
					type: "float",
					bindable: "bindable"
				},

				/**
				 * The tint color.<br/>
				 *
				 * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material color and tint color.
				 */
				tintColorABGR: {
					type: "int",
					bindable: "bindable"
				},

				/**
				 * The node metadata. This property is read-only.
				 */
				nodeMetadata: "object",

				/**
				 * The indicator showing if the node has child nodes. This property is read-only.
				 */
				hasChildren: "boolean",

				/**
				 * The indicator showing if the node is closed. This property is read-only.
				 */
				closed: "boolean"
			}
		},

		constructor: function(nodeHierarchy, nodeId) {
			ManagedObject.call(this);

			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneId = nodeHierarchy ? nodeHierarchy._getDvlSceneId() : null;
			this._dvlNodeId = nodeId;
		}
	});

	NodeProxy.prototype.destroy = function() {
		this._dvlNodeId = null;
		this._dvlSceneId = null;
		this._dvl = null;

		ManagedObject.prototype.destroy.call(this);
	};

	NodeProxy.prototype.getNodeId = function() {
		return this._dvlNodeId;
	};

	NodeProxy.prototype.getVeIds = function() {
		return getJSONObject(this._dvl.Scene.RetrieveVEIDs(this._dvlSceneId, this._dvlNodeId));
	};

	NodeProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
	};

	NodeProxy.prototype.getLocalMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeLocalMatrix(this._dvlSceneId, this._dvlNodeId)).matrix);
	};

	NodeProxy.prototype.setLocalMatrix = function(value) {
		this._dvl.Scene.SetNodeLocalMatrix(this._dvlSceneId, this._dvlNodeId, value && sap.ui.vk.TransformationMatrix.convertTo4x4(value));
		this.setProperty("localMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getWorldMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeWorldMatrix(this._dvlSceneId, this._dvlNodeId)).matrix);
	};

	NodeProxy.prototype.setWorldMatrix = function(value) {
		this._dvl.Scene.SetNodeWorldMatrix(this._dvlSceneId, this._dvlNodeId, value && sap.ui.vk.TransformationMatrix.convertTo4x4(value));
		this.setProperty("worldMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getOpacity = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_OPACITY)).Opacity;
	};

	NodeProxy.prototype.setOpacity = function(value) {
		this._dvl.Scene.SetNodeOpacity(this._dvlSceneId, this._dvlNodeId, value);
		this.setProperty("opacity", value, true);
		return this;
	};

	NodeProxy.prototype.getTintColorABGR = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_HIGHLIGHT_COLOR)).HighlightColor;
	};

	NodeProxy.prototype.setTintColorABGR = function(value) {
		this._dvl.Scene.SetNodeHighlightColor(this._dvlSceneId, this._dvlNodeId, value);
		this.setProperty("tintColorABGR", value, true);
		return this;
	};

	NodeProxy.prototype.getNodeMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneId, this._dvlNodeId)).metadata;
	};

	NodeProxy.prototype.getHasChildren = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
	};

	NodeProxy.prototype.getClosed = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) !== 0;
	};

	delete NodeProxy.prototype.setClosed;
	delete NodeProxy.prototype.setHasChildren;
	delete NodeProxy.prototype.setName;
	delete NodeProxy.prototype.setNodeId;
	delete NodeProxy.prototype.setNodeMetadata;
	delete NodeProxy.prototype.setVeIds;

	return NodeProxy;
});

}; // end of sap/ui/vk/NodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Notifications') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Notifications.
jQuery.sap.declare('sap.ui.vk.Notifications'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Notifications",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/model/json/JSONModel", "./Messages"
], function (jQuery, library, Control, JSONModel, Messages) {
	"use strict";

		/**
	 * Constructor for a new Notifications.
	 *
	 * @class
	 * Provides the ability to display logged console messages within your application.
	 *
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.38.15
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Notifications
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Notifications = Control.extend("sap.ui.vk.Notifications", {
		metadata: {
			library: "sap.ui.vk",
			aggregations: {
				_messagePopover: {
					type: "sap.m.MessagePopover",
					multiple: false,
					visibility: "hidden"
				},
				_messagePopoverItem: {
					type: "sap.m.MessagePopoverItem",
					multiple: false,
					visibility: "hidden"
				},
				_messagePopoverToggleButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				allMessagesCleared: {},
				messageAdded: {}
			},
			publicMethods: [
				"clearAllMessages"
			]
		}
	});

	/**
	 *.Clears the items in the Message Popover list.
	 * @param {sap.m.MessagePopover} messagePopover The Message Popover that we are removing the items from.
	 * @param {sap.m.ToggleButton} messagePopoverToggleButton The toggle button displaying the number of items listed.
	 * @returns {sap.ui.vk.Notifications} <code>this</code> to allow method chaining.
	 * @public
	 */
	Notifications.prototype.clearAllMessages = function(messagePopover, messagePopoverToggleButton) {
			messagePopover.removeAllItems();
			messagePopoverToggleButton.setText(messagePopover.getItems().length);
			this.fireAllMessagesCleared();
			messagePopover.close();
			return this;
	};

	Notifications.prototype.init = function () {
		this._messages = new Messages();
		this._listener = {};

		this._messagePopover = new sap.m.MessagePopover();
		this._messagePopover.addStyleClass("sapVizKitNotificationPopover");

		this._messagePopoverToggleButton = new sap.m.ToggleButton({
			icon: "sap-icon://message-popup",
			type: sap.m.ButtonType.Emphasized,
			tooltip:  sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVERBUTTON"),
			text: "0",
			press: function(oEvent) {
				if (oEvent.getSource().getPressed()) {
					this._messagePopover.openBy(oEvent.getSource());
				} else {
					this._messagePopover.close();
				}
			}.bind(this)
		});

		this._messagePopoverToggleButton.addStyleClass("messagePopoverButton");

		this._messagePopover.attachAfterClose(function(event) {
			this._messagePopoverToggleButton.setPressed(false);
		}.bind(this));

		var headerButton = new sap.m.Button({
			text: sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVER_CLEARBUTTON"),
			type: sap.m.ButtonType.Emphasized,
			tooltip: sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVER_CLEARBUTTON"),
			press: this.clearAllMessages.bind(this, this._messagePopover, this._messagePopoverToggleButton)
		});
		this._messagePopover.setHeaderButton(headerButton);
		this.setAggregation("_messagePopover", this._messagePopover);

		this.setAggregation("_messagePopoverToggleButton", this._messagePopoverToggleButton);
		this._listener.onLogEntry = function (event) {
			if (/^sap\.ui\.vk/.test(event.component)) {
				var mess = event.details,
					cause,
					reso,
					code;
				if (this._messages.messages[event.details]) {
					mess = sap.ui.vk.getResourceBundle().getText(this._messages.messages[event.details].summary);
					cause = sap.ui.vk.getResourceBundle().getText(this._messages.messages[event.details].cause);
					reso = sap.ui.vk.getResourceBundle().getText(this._messages.messages[event.details].resolution);
					code = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_CODE");
				}
				var component = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_COMPONENT");
				var date = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_DATE");
				var time = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_TIME");
				var level = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_LEVEL");
				var messageTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_MESSAGE");
				var causeTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_CAUSE");
				var resolutionTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_RESOLUTION");

				var description =
					"<div><b>" + component + ":</b><br>" + event.component + "</div><br>" +
					"<div><b>" + date + ":</b><br>" + event.date + "</div><br>" +
					(code ? "<div><b>" + code + ":</b><br>" + event.details + "</div><br>" : "") +
					"<div><b>" + time + ":</b><br>" + event.time.slice(0, event.time.indexOf(".")) + "</div><br>" +
					"<div><b>" + level + ":</b><br>" + event.level + "</div><br>" +
					"<div><b>" + messageTitle + ":</b><br>" + mess + "</div><br>" +
					(cause ? "<div><b>" + causeTitle + ":</b><br>" + cause + "</div><br>" : "") +
					(reso ? "<div><b>" + resolutionTitle + ":</b><br>" + reso + "</div>" : "");

				var oItem = new sap.m.MessagePopoverItem({
					markupDescription: true,
					title: event.message,
					description: description
				});
				this._messagePopover.addItem(oItem);
				this._messagePopoverToggleButton.setText(this._messagePopover.getItems().length);
				this.fireMessageAdded();
			}
		}.bind(this);

		jQuery.sap.log.addLogListener(this._listener);
	};

	Notifications.prototype.attachAllMessagesCleared = function(data, func, listener) {
		return this.attachEvent("allMessagesCleared", data, func, listener);
	};

	Notifications.prototype.detachAllMessagesCleared = function(func, listener) {
		return this.detachEvent("allMessagesCleared", func, listener);
	};

	Notifications.prototype.fireAllMessagesCleared = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("allMessagesCleared", parameters, allowPreventDefault, enableEventBubbling);
	};

	Notifications.prototype.attachMessageAdded = function(data, func, listener) {
		return this.attachEvent("messageAdded", data, func, listener);
	};

	Notifications.prototype.detachMessageAdded = function(func, listener) {
		return this.detachEvent("messageAdded", func, listener);
	};

	Notifications.prototype.fireMessageAdded = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("messageAdded", parameters, allowPreventDefault, enableEventBubbling);
	};

	return Notifications;

});

}; // end of sap/ui/vk/Notifications.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Overlay') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Overlay.
jQuery.sap.declare('sap.ui.vk.Overlay'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.lib.sapvbi'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Overlay",[
	'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/vbm/library', 'sap/ui/vbm/lib/sapvbi', './Messages'
], function(jQuery, library, Control, vbm_library, sapvbi, Messages) {
	"use strict";

	/**
	 * Constructor for a new Overlay.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Constructor for a new Overlay.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Overlay
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Overlay = Control.extend("sap.ui.vk.Overlay", /** @lends sap.ui.vk.Overlay.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				zoomOnResize: {
					type: "boolean",
					group: "Behavior",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				areas: {
					type: "sap.ui.vk.OverlayArea",
					multiple: true,
					singularName: "area"
				}
			},
			associations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				target: {
					type: "sap.ui.core.Control",
					cardinality: "0..1"

				}
			},
			events: {
				/**
				 * Raised when the Control is clicked.
				 */
				click: {
					parameters: {
						/**
						 * Client coordinate X
						 */
						clientX: {
							type: "int"
						},

						/**
						 * Client coordinate Y
						 */
						clientY: {
							type: "int"
						},

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						}
					}
				},

				/**
				 * Raised when the Control is right clicked/longPress(tap and hold).
				 */
				contextMenu: {
					parameters: {

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * Trigger the interactive creation mode to get a position or position array.
	 * 
	 * @param {boolean} bPosArray Indicator if a single position or an array is requested
	 * @param {function} callback Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in format
	 *        "x;y;0;..."
	 * @returns {boolean} Indicator whether the creation mode could be triggered successfully or not.
	 * @public
	 * @experimental Since 1.32.0 This method is experimental and might be modified or removerd in future versions.
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.getPositionInteractive = function(bPosArray, callback) {
		if (!this.mIACreateCB && callback && typeof (callback) === "function") {
			this.mIACreateCB = callback;

			var sType = "POS";
			if (bPosArray) {
				sType += "ARRAY";
			}
			// trigger interactive creation mode by defining an automation call
			var oLoad = {
				"SAPVB": {
					"Automation": {
						"Call": {
							"handler": "OBJECTCREATIONHANDLER",
							"name": "CreateObject",
							"object": "MainScene",
							"scene": "MainScene",
							"instance": "",
							"Param": {
								"name": "data",
								"#": "{" + sType + "}"
							}
						}
					}
				}
			};
			this._load(oLoad);
			return true;
		} else {
			// callback function registered -> other create still pending!
			return false;
		}
	};

	/**
	 * open the context menu
	 * 
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.openContextMenu = function(oMenu) {
		this._openContextMenu("Overlay", this, oMenu);
	};

	/**
	 * Pan and Zoom for the Overlay. The offsets <i><code>nDeltaX</code></i> and <i><code>nDeltaY</code></i> are applied to the current center
	 * position. If zooming is involved as well the offsets are applied after the zooming.
	 * 
	 * @param {int} nDeltaX the move of the center in x-direction in pixels
	 * @param {int} nDeltaY the move of the center in y-direction in pixels
	 * @param {float} fZoom the zoom factor to apply to the current state
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.setPanAndZoom = function(nDeltaX, nDeltaY, fZoom) {
		if (nDeltaX === 0 && nDeltaY === 0 && fZoom === 1) {
			return;
		}
		var scene = this.mVBIContext.GetMainScene();

		// sum up total center offset
		this.totalCenterOffset.dx += nDeltaX;
		this.totalCenterOffset.dy += nDeltaY;

		if (fZoom === 1) {
			// pan
			scene.MoveMap(nDeltaX, nDeltaY);
		} else {
			// zoom to center pos
			var canvas = scene.m_Canvas[0];
			var newLOD = canvas.m_nExactLOD + Math.log(fZoom) * Math.LOG2E;
			scene.ZoomToGeoPosition(VBI.MathLib.DegToRad([
				0.5, 0.5
			]), newLOD);
			scene.MoveMap(this.totalCenterOffset.dx, this.totalCenterOffset.dy);
		}
	};

	/**
	 * Reset the Overlay to its initial size and position.
	 * 
	 * @returns {sap.ui.vk.Overlay} This allows method chaining
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.reset = function() {
		this.totalCenterOffset.dx = this.totalCenterOffset.dy = 0;
		var scene = this.mVBIContext.GetMainScene();
		if (scene) {
			scene.ZoomToGeoPosition(VBI.MathLib.DegToRad([
				0.5, 0.5
			]), this.initialZoom);
		} // else: nothing to reset!
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	Overlay.prototype.init = function() {
		this._messages = new Messages();
		this.aLoadQueue = null; // load queue...................//

		this.oTargetDomRef = null;

		// create the vbi control
		// context.........................................//
		this.mVBIContext = new VBI.VBIContext(this);
		this.resizeID = "";
		this.resizeIDTarget = "";

		// initially set dirty state for all elements............................//
		this.bVosDirty = true;
		this.bWindowsDirty = true;
		this.bSceneDirty = true;
		this.bDataDeltaUpdate = false;

		// internal state markers
		this.bHandleDataChangeActive = false;
		this.bForceDataUpdate = false;

		this.mAddMenuItems = [];

		this.totalCenterOffset = {
			dx: 0,
			dy: 0
		};
		this.initialZoom = 10;
	};

	Overlay.prototype.exit = function() {
		if (this.mVBIContext) {
			this.mVBIContext.clear(); // clear the resources...................//
		}

		if (this.resizeID != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeID);
			this.resizeID = "";
		}
		if (this.resizeIDTarget != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeIDTarget);
			this.resizeIDTarget = "";
		}

	};

	Overlay.prototype.resize = function(event) {
		var cntrl = (this.oControl != undefined) ? this.oControl : this;

		var ctx = cntrl.mVBIContext;
		if (ctx) {
			var scene = ctx.GetMainScene();
			if (scene) {
				if (cntrl.getZoomOnResize() && event && event.oldSize.width > 0) {
					var zoomChange = Math.log(event.size.width / event.oldSize.width) * Math.LOG2E;
					scene.ZoomToGeoPosition(scene.GetCenterPos(), scene.GetCurrentZoomlevel() + zoomChange, false, true, true);
				}
				scene.resizeCanvas(event, true, true);
			}
		}
	};

	Overlay.prototype.setTarget = function(oTarget) {
		if (!oTarget) {
			return;
		}

		this.setAssociation("target", oTarget);

		this.reset();
		// adapt to target
		if (oTarget instanceof sap.m.Image) {
			// image requires asynchronous adaptation when image file is loaded
			oTarget.addDelegate({
				onAfterRendering: function(oEvent) {
					this.oTargetDomRef = oTarget.getDomRef();
					this.oTargetDomRef.addEventListener("load", jQuery.proxy(this._adaptSizeOfTarget, this));
				}.bind(this)
			});
		} else {
			// the default for arbitrary controls is synchronous adaptation
			oTarget.addDelegate({
				onAfterRendering: function(oEvent) {
					this.oTargetDomRef = oTarget.getDomRef();
					this._adaptSizeOfTarget();
				}.bind(this)
			});
		}

		// set resize Handler on target to observe its size
		if (this.resizeIDTarget != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeIDTarget);
			this.resizeIDTarget = "";
		}
		this.resizeIDTarget = sap.ui.core.ResizeHandler.register(oTarget, this._adaptSizeOfTarget.bind(this));

	};

	Overlay.prototype._adaptSizeOfTarget = function() {
		var target = this.oTargetDomRef;
		var domref = this.getDomRef();
		if (target) {
			try {
				var jTarget = jQuery(target);
				var placing = {
					top: jTarget.offset().top,
					left: jTarget.offset().left,
					width: jTarget.outerWidth(),
					height: jTarget.outerHeight()
				};
				jQuery(domref).width(placing.width).height(placing.height).css("position", "absolute");

				// TODO: find better solution
// jQuery(domref).css("top", placing.top + "px");
// jQuery(domref).css("left", placing.left + "px");
				jQuery(domref).css("top", "0px").css("left", "0px").css("visibility", "");
			} catch (e) {

				jQuery.sap.log.error(e);
			}
		} else {
			jQuery(domref).css("position", "fixed").width("0px").height("0px").css("top", "0px").css("left", "0px").css("visibility", "hidden");
		}

	};

	// ...........................................................................//
	// once Overlay control is rendered, we attach navigation bar and map it
	// self....//

	Overlay.prototype.onAfterRendering = function() {
		// when there is preserved content restore
		// it.............................//
		if (this.$oldContent.length > 0) {
			this.$().append(this.$oldContent);
		}

		this._adaptSizeOfTarget();

		// process the load
		// queue.................................................//
		if (this.aLoadQueue) {
			var nJ;
			for (nJ = 0; nJ < this.aLoadQueue.length; ++nJ) {
				this._load(this.aLoadQueue[nJ]);
			}
			this.aLoadQueue = null;
		}

		if (this.resizeID == "") {
			this.resize();
			this.resizeID = sap.ui.core.ResizeHandler.register(this, this.resize);
		}

		// do a new adjust of DOM placed
		// elements.................................//
		// the function should do nothing if nothing needs to be
		// done.............//
		var sOverlayId = this.getId();
		if (this.mVBIContext.m_Windows) {
			this.mVBIContext.m_Windows.Awake(sOverlayId);
		}

	};

	Overlay.prototype.onBeforeRendering = function() {
		// this is called before the renderer is
		// called...........................//

		this.$oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	};

	Overlay.prototype.invalidate = function(oSource) {
		// invalidate scene in any case to trigger updateScene
		this.bSceneDirty = true;
		// set the vos dirty state when the aggregations have changed
		if (oSource instanceof sap.ui.vk.OverlayArea) {
			this.bVosDirty = true;
			// if invalidate results from internal data change we allow delta update for data
			this.bDataDeltaUpdate = this.bHandleDataChangeActive;
		}

		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	Overlay.prototype._load = function(dat) {
		// when the control is not yet rendered, queue the load
		// calls.............//
		if (!this.isRendered()) {
			// create the queue and push load
			// requests.............................//
			if (!this.aLoadQueue) {
				this.aLoadQueue = [];
			}
			this.aLoadQueue.push(dat);
			return;
		}

		// do processing when running as a
		// plugin.................................//
		this._loadHtml(dat);

	};

	Overlay.prototype._loadHtml = function(data) {
		var sOverlayId = this.getId();

		var dat = null;

		// ensure that data is converted to a json
		// object.........................//
		// when this is a string, due ABAP servers sometimes sets a BOM at
		// the....//
		// beginning of the string we try to skip
		// this............................//
		if (typeof data == 'string') {
			dat = JSON.parse(data.indexOf('{') ? data.substr(data.indexOf('{')) : data);
		} else if (typeof data == 'object') {
			dat = data; // this is already an object
		}
		// return immediately when data can not be
		// interpreted....................//
		if (!dat) {
			return;
		}

		// check for data
		// binding.................................................//
		if (!dat["SAPVB"]) {
			var md;
			if (this.mVBIContext && (md = (new VBI.Adaptor(this.mVBIContext)).CreateLoadData(dat))) {
				this.loadHtml(md);
				return;
			} else {
				return; // this is no valid data..............
			}
		}

		// todo: do correct handling when change flags get
		// set....................//
		var bModifiedData = false;
		var bModifiedScenes = false;
		var bModifiedWindows = false;

		// the data can be a json
		// object..........................................//
		if (jQuery.type(dat) == 'object') {
			if (dat.SAPVB) {
				// process configuration
				// ...........................................//
				if (dat.SAPVB.Config) {
					// load the configuraiont
					// .......................................//
					this.mVBIContext.GetConfig().load(dat.SAPVB.Config, this.mVBIContext);
				}
				// process
				// resources................................................//
				if (dat.SAPVB.Resources) {
					// load the
					// resources............................................//
					this.mVBIContext.GetResources().load(dat.SAPVB.Resources, this.mVBIContext);
				}
				// process
				// datatypes................................................//
				if (dat.SAPVB.DataTypes) {
					// load the datatype
					// provider....................................//
					if (!this.mVBIContext.m_DataTypeProvider) {
						this.mVBIContext.m_DataTypeProvider = new VBI.DataTypeProvider();
					}

					this.mVBIContext.m_DataTypeProvider.load(dat.SAPVB.DataTypes, this.mVBIContext);
				}
				// process
				// datacontext..............................................//
				if (dat.SAPVB.Data) {
					// load the
					// datacontext..........................................//
					// when the datacontext is loaded, provide the datatype
					// info.....//
					if (!this.mVBIContext.m_DataProvider) {
						this.mVBIContext.m_DataProvider = new VBI.DataProvider();
					}

					this.mVBIContext.m_DataProvider.load(dat.SAPVB.Data, this.mVBIContext);
					bModifiedData = true;
				}

				// process
				// windows..................................................//
				if (dat.SAPVB.Windows) {
					if (!this.mVBIContext.m_Windows) {
						this.mVBIContext.m_Windows = new VBI.Windows();
					}
					this.mVBIContext.m_Windows.load(dat.SAPVB.Windows, this.mVBIContext);
					bModifiedWindows = true;
				}
				// process
				// actions..................................................//
				if (dat.SAPVB.Actions) {
					if (!this.mVBIContext.m_Actions) {
						this.mVBIContext.m_Actions = new VBI.Actions();
					}
					this.mVBIContext.m_Actions.load(dat.SAPVB.Actions, this.mVBIContext);
				}
				// process
				// automations..............................................//
				if (dat.SAPVB.Automation) {
					if (!this.mVBIContext.m_Automations) {
						this.mVBIContext.m_Automations = new VBI.Automations();
					}
					this.mVBIContext.m_Automations.load(dat.SAPVB.Automation, this.mVBIContext);
				}
				// context menues
				// ..................................................//
				if (dat.SAPVB.Menus) {
					if (!this.mVBIContext.m_Menus) {
						this.mVBIContext.m_Menus = new VBI.Menus();
					}
					this.mVBIContext.m_Menus.load(dat.SAPVB.Menus, this.mVBIContext);
				}

				// process
				// scenes...................................................//
				// Note: process scenes last! Since it triggers a re-rendering
				// everything should be updated before
				if (dat.SAPVB.Scenes) {
					if (!this.mVBIContext.m_SceneManager) {
						this.mVBIContext.m_SceneManager = new VBI.SceneManager();
					}
					this.mVBIContext.m_SceneManager.load(dat.SAPVB.Scenes, this.mVBIContext);
					bModifiedScenes = true;
				}

			}

			// notify framework about data
			// modifications...........................//
			if (bModifiedData) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.NotifyDataChange();
				}
			}

			// control context is loaded
			if (bModifiedScenes || bModifiedWindows) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.Awake(sOverlayId);
				}
			}

			if (bModifiedScenes || bModifiedData) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.RenderAsync();
				}
			}
		}
	};

	Overlay.prototype._openContextMenu = function(sTyp, oInst, oMenu) {
		if (oMenu && oMenu.vbi_data && oMenu.vbi_data.VBIName == "DynContextMenu") {
			if (!this.mVBIContext.m_Menus) {
				this.mVBIContext.m_Menus = new window.VBI.Menus();
			}
			// add additional menu items
			for (var nI = 0; nI < this.mAddMenuItems.length; ++nI) {
				oMenu.addItem(this.mAddMenuItems[nI]);
			}
			this.mVBIContext.m_Menus.m_menus.push(oMenu);
			this._loadHtml({
				"SAPVB": {
					"version": "2.0",
					"Automation": {
						"Call": {
							"earliest": "0",
							"handler": "CONTEXTMENUHANDLER",
							"instance": oInst.sId,
							"name": "SHOW",
							"object": sTyp,
							"refID": "CTM",
							"Param": [
								{
									"name": "x",
									"#": oInst.mClickPos[0]
								}, {
									"name": "y",
									"#": oInst.mClickPos[1]
								}, {
									"name": "scene",
									"#": "MainScene"
								}
							]
						}
					}
				}
			});
		}
		this.mAddMenuItems = [];
	};

	Overlay.prototype._update = function() {
		// set the frame
		// application..............................................//
		var oApp = {
			SAPVB: {}
		};

		// update the scene
		// data.....................................................//
		if (this.bSceneDirty) {
			this._updateScene(oApp);
		}
		this._updateWindows(oApp);

		// add non VO related actions
		if (oApp.SAPVB.Actions) {
			Array.prototype.push.apply(oApp.SAPVB.Actions.Set.Action, this._getActionArray());
		}

		// remove unnecessary sections and return application
		// JSON...................//
		return this._minimizeApp(oApp);
	};

	Overlay.prototype._minimizeApp = function(oApp) {
		// todo: calculate a hash instead of caching the json string..............//

		// remove windows section when not necessary..............................//
		var t, s;
		s = null;
		if (!this.bWindowsDirty) {
			(t = oApp) && (t = t.SAPVB) && (t = t.Windows) && (s = JSON.stringify(t)) && (s == this.mCurWindows) && (delete oApp.SAPVB.Windows) || (this.mCurWindows = s ? s : this.mCurWindows);
		} else {
			this.bWindowsDirty = false;
		}

		// remove unmodified scenes...............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.Scenes) && (s = JSON.stringify(t)) && (s == this.mCurScenes) && (delete oApp.SAPVB.Scenes) || (this.mCurScenes = s ? s : this.mCurScenes);

		// remove unmodified actions..............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.Actions) && (s = JSON.stringify(t)) && (s == this.mCurActions) && (delete oApp.SAPVB.Actions) || (this.mCurActions = s ? s : this.mCurActions);

		// remove unmodified datatypes............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.DataTypes) && (s = JSON.stringify(t)) && (s == this.mCurDataTypes) && (delete oApp.SAPVB.DataTypes) || (this.mCurDataTypes = s ? s : this.mCurDataTypes);

		// remove unmodified data.................................................//
		if (!this.bForceDataUpdate) {
			s = null;
			(t = oApp) && (t = t.SAPVB) && (t = t.Data) && (s = JSON.stringify(t)) && (s == this.mCurData) && (delete oApp.SAPVB.Data) || (this.mCurData = s ? s : this.mCurData);
		} else {
			this.bForceDataUpdate = false; // reset
		}

		return oApp;
	};

	Overlay.prototype._updateWindows = function(oApp) {
		// Main window -> needs always to be defined
		oApp.SAPVB.Windows = {
			"Set": [
				{
					"name": "Main",
					"Window": {
						"id": "Main",
						"caption": "MainWindow",
						"type": "geo",
						"refParent": "",
						"refScene": "MainScene",
						"modal": "true"
					}
				}
			]
		};
	};

	Overlay.prototype._updateScene = function(oApp) {
		var saVO = []; // visual object array in the scene..................//
		var saData = []; // data array in the data section....................//
		var saType = []; // type array in the type section ...................//
		var saAction = []; // actions...........................................//

		this._updateVOData(saVO, saData, saType, saAction);

		// check if an update of the scene is
		// necessary...........................//
		// failsafe but data has to be created
		// first..............................//
		var _saVO = JSON.stringify(saVO);
		var bMetaUpdate = true; // might be reset in else part
		if (!this.saVO) { // no prior VO data -> initial scene definition
			((((oApp.SAPVB.Scenes = {}).Set = {}).SceneGeo = {
				id: "MainScene",
				scaleVisible: "false",
				navControlVisible: "false",
				VisualFrame: {
					minLOD: 5
				},
				NavigationDisablement: {
					move: "true",
					zoom: "true"
				},
				initialZoom: this.initialZoom.toString(),
				initialStartPosition: "0.5;0.5;0"
			}).VO = saVO);
		} else if (this.bRefMapLayerStackDirty || !(this.saVO === _saVO)) {
			// prior VO data exists -> calculate delta and preserve scene
			(oApp.SAPVB.Scenes = this._getSceneVOdelta(JSON.parse(this.m_saVO), saVO));
		} else {
			bMetaUpdate = false;
		}
		this.saVO = _saVO;

		// now we should have data, data types and instance
		// information...........//
		// merge it into the
		// app..................................................//
		if (this.bDataDeltaUpdate) {
			oApp.SAPVB.Data = [];
			for (var nI = 0; nI < saData.length; ++nI) {
				oApp.SAPVB.Data.push({
					Set: {
						name: saData[nI].name,
						type: "N",
						N: saData[nI]
					}
				});
			}
		} else {
			((oApp.SAPVB.Data = {}).Set = {}).N = saData;
		}
		if (bMetaUpdate) {
			(((oApp.SAPVB.DataTypes = {}).Set = {}).N = saType);
		}
		// Update Actions always, since handler could be added or removed at any time!
		(((oApp.SAPVB.Actions = {}).Set = {}).Action = saAction);

		// reset dirty states
		this.bSceneDirty = this.bVosDirty = this.bDataDeltaUpdate = false;
	};

	Overlay.prototype._isEventRegistered = function(sAggregation, sEvent) {
		var aAggregation = this.getAggregation(sAggregation);
		if (!aAggregation) {
			return false;
		}

		for (var nJ = 0; nJ < aAggregation.length; ++nJ) {
			// get the element.....................................................//
			var oInstance = aAggregation[nJ];

			// if one registers for an event we can return........................//
			if (oInstance.hasListeners(sEvent)) {
				return true;
			}
		}
		return false;
	};

	Overlay.prototype._getTemplateBindingInfo = function(sAggregation) {
		// read binding info to check what is bound and what is static
		var oBindingInfo = this.getBindingInfo(sAggregation);
		if (oBindingInfo && oBindingInfo.template) {
			return oBindingInfo.template.mBindingInfos;
		}
	};

	Overlay.prototype._getBindInfo = function(sAggregation) {
		var oBindInfo = {};
		var oTemplateBindingInfo = this._getTemplateBindingInfo(sAggregation);

		// Note: Without Template no static properties -> all bound in the sense of VB JSON!
		oBindInfo.C = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("color") : true;
		oBindInfo.CB = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorBorder") : true;
		oBindInfo.DCH = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("deltaColorHot") : true;
		oBindInfo.CS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorSelect") : true;
		oBindInfo.CNS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorNonSelect") : true;
		oBindInfo.TT = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("tooltip") : true;
		oBindInfo.M = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("changeable") : true;

		oBindInfo.hasTemplate = (oTemplateBindingInfo) ? true : false;

		return oBindInfo;
	};

	Overlay.prototype._updateVOData = function(saVO, saData, saType, saAction) {
		var oBindInfo, oVoTemplate;

		// Overlay Area
		this.AreaBindInfo = oBindInfo = (this.AreaBindInfo) ? this.AreaBindInfo : this._getBindInfo("areas");
		oVoTemplate = (oBindInfo.hasTemplate) ? this.getBindingInfo("areas").template : null;

		// VO Def
		var oOverlayAreaDef = {
			id: "OverlayArea",
			datasource: "OverlayArea",
			type: "{00100000-2012-0004-B001-F311DE491C77}"
		};
		oOverlayAreaDef['posarray.bind'] = oOverlayAreaDef.id + ".P";
		if (oBindInfo.C) {
			oOverlayAreaDef['color.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.color = oVoTemplate.getColor();
		}
		if (oBindInfo.CB) {
			oOverlayAreaDef['colorBorder.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorBorder = oVoTemplate.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oOverlayAreaDef['hotDeltaColor.bind'] = oOverlayAreaDef.id + ".DCH";
		} else {
			oOverlayAreaDef.hotDeltaColor = oVoTemplate.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oOverlayAreaDef['colorSelect.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorSelect = oVoTemplate.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oOverlayAreaDef['colorNonSelect.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorNonSelect = oVoTemplate.getColorNonSelect();
		}
		if (!oBindInfo.M) {
			oOverlayAreaDef['VB:c'] = oVoTemplate.getChangeable();
		}
		saVO.push(oOverlayAreaDef);

		// Overlay Area Data Type
		var oOverlayAreaType = {
			name: oOverlayAreaDef.id,
			key: 'K'
		};
		// extend the object type.................................................//
		oOverlayAreaType.A = [
			{
				"name": "K", // key
				"alias": "K",
				"type": "string"
			}, {
				"name": "VB:s", // selection flag
				"alias": "VB:s",
				"type": "boolean"
			}, {
				"name": "P", // position array
				"alias": "P",
				"type": "vectorarray",
				"changeable": "true"
			}
		];
		if (oBindInfo.C) {
			oOverlayAreaType.A.push({
				"name": "C", // color
				"alias": "C",
				"type": "color"
			});
		}
		if (oBindInfo.CB) {
			oOverlayAreaType.A.push({
				"name": "CB", // color border
				"alias": "CB",
				"type": "string"
			});
		}
		if (oBindInfo.DCH) {
			oOverlayAreaType.A.push({
				"name": "DCH", // delta color hot
				"alias": "DCH",
				"type": "string"
			});
		}
		if (oBindInfo.CS) {
			oOverlayAreaType.A.push({
				"name": "CS", // color select
				"alias": "CS",
				"type": "string"
			});
		}
		if (oBindInfo.CNS) {
			oOverlayAreaType.A.push({
				"name": "CNS", // Color non select
				"alias": "CNS",
				"type": "string"
			});
		}
		if (oBindInfo.TT) {
			oOverlayAreaType.A.push({
				"name": "TT", // tooltip
				"alias": "TT",
				"type": "string"
			});
		}
		saType.push(oOverlayAreaType);

		// Overlay Area Actions
		// check if the different vo events are registered..............................//
		var id = oOverlayAreaDef.id;

		if (this._isEventRegistered("areas", "click")) {
			saAction.push({
				"id": id + "1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this._isEventRegistered("areas", "contextMenu")) {
			saAction.push({
				"id": id + "2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "ContextMenu"
			});
		}
		if (this._isEventRegistered("areas", "edgeClick")) {
			saAction.push({
				"id": id + "7",
				"name": "edgeClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "EdgeClick"
			});
		}
		// register handleMoved in any case for two way binding
		saAction.push({
			"id": id + "4",
			"name": "handleMoved",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleMoved"
		});
		// register edge and handle context menu in any case for build in functions
		saAction.push({
			"id": id + "5",
			"name": "handleContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleContextMenu"
		});
		saAction.push({
			"id": id + "8",
			"name": "edgeContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "EdgeContextMenu"
		});
		if (this._isEventRegistered("areas", "handleClick")) {
			saAction.push({
				"id": id + "6",
				"name": "handleClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "HandleClick"
			});
		}

		// Overlay Area Data
		var oOverlayAreaData = {
			name: oOverlayAreaDef.id,
			E: []
		};
		var aOverlayAreas = this.getAreas();
		for (var nK = 0; nK < aOverlayAreas.length; ++nK) {
			oOverlayAreaData.E.push(aOverlayAreas[nK].getDataElement());
		}
		saData.push(oOverlayAreaData);
	};

	Overlay.prototype._getSceneVOdelta = function(oCurrent, oNew) {
		var aVO = [];
		var aRemove = [];
		// build map of current VOs
		var oVOMap = {};
		for (var nI = 0, len = oCurrent.length; nI < len; ++nI) {
			oVOMap[oCurrent[nI].id] = oCurrent[nI];
		}
		for (var nJ = 0; nJ < oNew.length; ++nJ) {
			if (oVOMap[oNew[nJ].id]) { // VO already exists ...
				if (JSON.stringify(oNew[nJ]) != JSON.stringify(oVOMap[oNew[nJ].id])) { // ...
					// but
					// is
					// different
					aRemove.push({
						"id": oNew[nJ].id,
						"type": "VO"
					}); // remove old VO version from scene and
					aVO.push(oNew[nJ]); // add new VO version
				} // else {} // nothing to do

			} else { // new VO -> add it
				aVO.push(oNew[nJ]);
			}
			delete oVOMap[oNew[nJ].id]; // remove processed VOs from map
		}
		// remove VOs remaining on map
		for ( var id in oVOMap) {
			aRemove.push({
				"id": id,
				"type": "VO"
			});
		}
		var retVal = {
			"Merge": {
				"name": "MainScene",
				"type": "SceneGeo",
				"SceneGeo": {
					"id": "MainScene"
				}
			}
		};
		if (aRemove.length) {
			retVal.Merge.SceneGeo.Remove = aRemove;
		}
		if (aVO.length) {
			retVal.Merge.SceneGeo.VO = aVO;
		}

		return retVal;
	};

	Overlay.prototype._getActionArray = function() {
		var aActions = [];
		// subscribe for map event
		// Note: We register Action only if event are subscribed..............................//
		if (this.mEventRegistry["click"]) {
			aActions.push({
				"id": "Overlay1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this.mEventRegistry["contextMenu"]) {
			aActions.push({
				"id": "Overlay2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "ContextMenu",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		aActions.push({
			"id": "Overlay3",
			"name": "GetPosComplete",
			"refScene": "MainScene",
			"refVO": "General",
			"refEvent": "CreateComplete"
		});

		return aActions;
	};

	Overlay.prototype._handleChangedData = function(aNodes) {
		try {
			this.bHandleDataChangeActive = true;
			if (aNodes && aNodes.length) {
				for (var nI = 0, oNode; nI < aNodes.length; ++nI) {
					oNode = aNodes[nI];
					if (oNode.E && oNode.E.length) {
						for (var nJ = 0, oElement, oInst; nJ < oNode.E.length; ++nJ) {
							oElement = oNode.E[nJ];
							oInst = this._findInstance(oElement.K);
							if (oInst) {
								oInst.handleChangedData(oElement);
							}
						}
					}

				}
			}
			this.bHandleDataChangeActive = false;
		} catch (exc) {
			this.bHandleDataChangeActive = false;
			throw exc;
		}
	};

	Overlay.prototype._findInstance = function(sId) {
		var Id = (sId.indexOf(".") !== -1) ? sId.split(".")[1] : sId;
		var aAreas = this.getAreas();
		for (var nI = 0; nI < aAreas.length; ++nI) {
			var oElem = aAreas[nI];
			if (oElem.getId() === Id) {
				return oElem;
			}
		}
		return null;
	};

	Overlay.prototype._handleAggregationEvent = function(event) {
		var oElem;
		if ((oElem = this._findInstance(event.Action.instance))) {
			try {
				oElem.handleEvent(event);
			} catch (exc) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT11.summary), this._messages.messages.VIT11.code, "sap.ui.vk.Overlay");
			}
		}

	};

	// ...........................................................................//
	// diagnostics...............................................................//

	Overlay.prototype.isRendered = function() {
		return this.getDomRef() ? true : false;
	};

	// ..........................................................................//
	// Compatibility functions, needed by VBI context
	/**
	 * @private
	 */
	Overlay.prototype.fireSubmit = function(e) {
		// handle VBI submit data
		// analyze the event......................................................//
		var datEvent = JSON.parse(e.data);

		// write changed data back to aggregated elements
		if (datEvent.Data && datEvent.Data.Merge) {
			this._handleChangedData(datEvent.Data.Merge.N);
		}

		// handle actual event
		if (datEvent.Action.object === "OverlayArea") {
			// Event belongs to an aggregated object -> delegate
			this._handleAggregationEvent(datEvent);
		} else {
			// own event -> handle it
			var sActionName = datEvent.Action.name, clickPos;
			if (sActionName === "click" || sActionName === "contextMenu") {
				clickPos = [
					datEvent.Action.Params.Param[0]['#'], datEvent.Action.Params.Param[1]['#']
				];
			}
			switch (sActionName) {
				case "GetPosComplete":
					// Interactive Position gathering finished
					if (this.mIACreateCB) {
						try {
							this.mIACreateCB(datEvent.Action.Params.Param[0]['#']);
							this.mIACreateCB = null;
						} catch (exc) {
							// clear callback function in any case
							this.mIACreateCB = null;
							throw exc;
						}
					}
					break;
				case "click":
					// fire the click..................................................//
					this.fireClick({
						clientX: clickPos[0],
						clientY: clickPos[1],
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]['#']
					});
					break;
				case "contextMenu":
					// create an empty menu
					if (this.mVBIContext.m_Menus) {
						this.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
					}
					sap.ui.getCore().loadLibrary("sap.ui.unified");
					var oMenuObject = new sap.ui.unified.Menu();
					oMenuObject.vbi_data = {};
					oMenuObject.vbi_data.menuRef = "CTM";
					oMenuObject.vbi_data.VBIName = "DynContextMenu";
					// store the click pos
					this.mClickPos = clickPos;
					// fire the contextMenu..................................................//
					this.fireContextMenu({
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]['#'],
						menu: oMenuObject
					});
					break;
				default:
					break;

			}
		}
	};
	/**
	 * @private
	 */
	Overlay.prototype.fireRender = function(data) {
	};
	/**
	 * @private
	 */
	Overlay.prototype.fireMove = function(data) {
	};
	/**
	 * @private
	 */
	Overlay.prototype.fireZoom = function(data) {
	};
	/**
	 * @private
	 */
	Overlay.prototype.fireOpenWindow = function(data) {
	};
	/**
	 * @private
	 */
	Overlay.prototype.fireCloseWindow = function(data) {
	};

	return Overlay;

});

}; // end of sap/ui/vk/Overlay.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayArea') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.OverlayArea.
jQuery.sap.declare('sap.ui.vk.OverlayArea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/OverlayArea",[
	'./library', 'sap/ui/core/Element'
], function(library, Element) {
	"use strict";

	/**
	 * Constructor for a new OverlayArea.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation element for the Overlay Control
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.OverlayArea
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var OverlayArea = Element.extend("sap.ui.vk.OverlayArea", /** @lends sap.ui.vk.OverlayArea.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Unique identifier for the object. This is optional. If not provided the default identifier sId is used. However, sId is generated
				 * if template binding is used and thus it is not stable. Provide the key if the object really needs a unique and stable identifier.
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
				 */
				position: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The fill color of the OverlayArea.
				 */
				color: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 0.3)"
				},

				/**
				 * The border color of the OverlayArea.
				 */
				colorBorder: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 1.0)"
				},

				/**
				 * The select color of the OverlayArea in case selection highligthing is desired.
				 */
				colorSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
				 */
				colorNonSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(<hue shift in degree>;<lightness
				 * multiplier>;<saturation multiplier>;<opacity multiplier>)
				 */
				deltaColorHot: {
					type: "string",
					group: "Misc",
					defaultValue: 'RHLSA(0;1.3;1.0;1.0)'
				},

				/**
				 * set to true if the element is selected
				 */
				select: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Set to true if OverlayArea is changeable.
				 */
				changeable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			events: {

				/**
				 * The event is raised when there is a click action on an OverlayArea.
				 */
				click: {
					/**
					 * Client coordinate X
					 */
					clientX: {
						type: "int"
					},

					/**
					 * Client coordinate Y
					 */
					clientY: {
						type: "int"
					}
				},

				/**
				 * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
				 */
				contextMenu: {
					parameters: {

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is clicked.
				 */
				edgeClick: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is right clicked.
				 */
				edgeContextMenu: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is moved.
				 */
				handleMoved: {},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is right clicked.
				 */
				handleContextMenu: {
					parameters: {
						/**
						 * Index of the clicked handle. The numbering is zero based.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is clicked.
				 */
				handleClick: {
					/**
					 * Index of the clicked handle. The numbering is zero based.
					 */
					index: {
						type: "int"
					}
				}

			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// OverlayArea.prototype.init = function(){
	// // do something for initialization...
	// };

	/**
	 * open the context menu
	 * 
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	OverlayArea.prototype.openContextMenu = function(oMenu) {
		this.getParent().openContextMenu("OverlayArea", this, oMenu);
	};

	OverlayArea.prototype.getDataElement = function() {
		var oElement = {};
		var oBindInfo = this.getParent().AreaBindInfo;
		oElement.K = this.getId(); // Use the Id as key here, since the Event dispatching relies on the structure of the Id!

		// add the VO specific properties..................................//
		if (oBindInfo.C) {
			oElement.C = this.getColor();
		}
		if (oBindInfo.CB) {
			oElement.CB = this.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oElement.DCH = this.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oElement.CS = this.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oElement.CNS = this.getColorNonSelect();
		}
		if (oBindInfo.TT) {
			oElement.TT = this.getTooltip();
		}
		oElement['VB:s'] = this.getSelect();
		oElement.P = this.getPosition();
		if (oBindInfo.M) {
			oElement['VB:c'] = this.getChangeable();
		}
		return oElement;
	};

	OverlayArea.prototype.handleChangedData = function(oElement) {
		if (oElement.P) {
			this.setPosition(oElement.P);
		}
	};

	OverlayArea.prototype.handleEvent = function(event) {
		// construct function name from action name
		var sActionName = event.Action.name;
		var funcname = "fire" + sActionName[0].toUpperCase() + sActionName.slice(1);

		if (sActionName === "contextMenu" || sActionName === "edgeContextMenu" || sActionName === "handleContextMenu") {
			var oParent = this.getParent();
			this.mClickPos = [
				event.Action.Params.Param[0]['#'], event.Action.Params.Param[1]['#']
			];
			// create an empty menu
			if (oParent.mVBIContext.m_Menus) {
				oParent.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
			}
			
			sap.ui.getCore().loadLibrary("sap.ui.unified");
			var oMenuObject = new sap.ui.unified.Menu();
			oMenuObject.vbi_data = {};
			oMenuObject.vbi_data.menuRef = "CTM";
			oMenuObject.vbi_data.VBIName = "DynContextMenu";

			// prepare own menu items for certian events
			if (this.getChangeable()) {
				if (sActionName === "edgeContextMenu") {
					var sEdge = event.Action.Params.Param[2]['#'];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: sap.ui.vk.getResourceBundle().getText("OVL_AREA_EDGE_SPLIT"),
						select: this._handleCtxFunction.bind(this, "SPLIT", sEdge)
					}));
				} else if (sActionName === "handleContextMenu") {
					var sHandle = event.Action.Params.Param[2]['#'];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: sap.ui.vk.getResourceBundle().getText("OVL_AREA_HANDLE_REMOVE"),
						select: this._handleCtxFunction.bind(this, "REMOVE", sHandle)
					}));
				}
			}

			if (this.hasListeners(sActionName)) {
				// fire the event..................................................//
				if (sActionName === "contextMenu") {
					this.firecontextMenu({
						menu: oMenuObject
					});
				} else {
					this[funcname]({
						index: event.Action.Params.Param[2]['#'],
						menu: oMenuObject
					});
				}
			} else {
				oParent._openContextMenu(event.Action.object, this, oMenuObject);
			}

		} else {
			if (sActionName == "click") {
				this.mClickPos = event.Action.AddActionProperties.AddActionProperty[0]['#'];
				this.fireClick({
					clientX: event.Action.Params.Param[0]['#'],
					clientY: event.Action.Params.Param[1]['#']
				});
			} else if (sActionName.indexOf("Click") > -1) {
				// edgeClick or handleClick
				this[funcname]({
					index: event.Action.Params.Param[2]['#']
				});
			} else {
				this[funcname]();
			}
		}
	};

	OverlayArea.prototype.getKey = function() {
		var sKey = this.getProperty("key");
		if (!sKey) {
			// Key not given -> return Id instead
			sKey = this.getId();
		}
		return sKey;
	};

	OverlayArea.prototype._handleCtxFunction = function(sFunc, sContext) {
		var aPos = this.getPosition().split(";");
		var offset = sContext * 3;
		if (sFunc === "REMOVE") {
			// delete handle
			aPos.splice(offset, 3);
		} else if (sFunc === "SPLIT") {
			// split edge at midpoint
			var startPos = [
				aPos[offset], aPos[offset + 1]
			];
			var endPos = (offset + 3 < aPos.length) ? [
				aPos[offset + 3], aPos[offset + 4]
			] : [
				aPos[0], aPos[1]
			];
			var midPoint = [
				parseFloat(startPos[0]) + (endPos[0] - startPos[0]) / 2, parseFloat(startPos[1]) + (endPos[1] - startPos[1]) / 2
			];
			aPos.splice(offset + 3, 0, midPoint[0].toString(), midPoint[1].toString(), "0");
		}
		this.setPosition(aPos.toString().replace(/,/g, ';'));
	};

	return OverlayArea;

});

}; // end of sap/ui/vk/OverlayArea.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

//Provides control sap.ui.vk.ProgressIndicator.
jQuery.sap.declare('sap.ui.vk.ProgressIndicator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ProgressIndicator",["jquery.sap.global", "./library", "sap/ui/core/Control"],
	function(jQuery, library, Control) {
		"use strict";

		/**
		 *  Constructor for a new ProgressIndicator.
		 *
		 * @class Provides a progress indicator to show the download and rendering status of resources being loaded into a scene.
		 *
		 * @public
		 * @author SAP SE
		 * @version 1.38.15
		 * @extends sap.ui.core.Control
		 * @alias sap.ui.vk.ProgressIndicator
		 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
		 */
		var ProgressIndicator = Control.extend("sap.ui.vk.ProgressIndicator", /** @lends sap.ui.vk.ProgressIndicator.prototype */ {
			metadata: {
				library: "sap.ui.vk",

				properties: {
					/*
					 * The number of files that are currently downloaded/rendered.
					 */
					numberOfFiles: {
						type: "int",
						defaultValue: 0
					}
				},

				publicMethods: [
					"reset",
					"updateDownloadStatus",
					"updateRenderStatus"
				],

				aggregations: {
					progressBar: {
						type: "sap.m.ProgressIndicator",
						multiple: false,
						visibility: "hidden"
					},
					progressText: {
						type: "sap.m.Text",
						multiple: false,
						visibility: "hidden"
					}
				}
			}
		});

		ProgressIndicator.prototype.init = function() {
			this._progressBar = new sap.m.ProgressIndicator({
				width: "100%",
				height: "0.375em"
			});

			this.setAggregation("progressBar", this._progressBar);

			this._progressText = new sap.m.Text();
			this._progressText.addStyleClass("sapUiVizkitProgressIndicatorText");

			this.setAggregation("progressText", this._progressText);

			this.reset();
		};

		/**
		 * Resets the download and rendering properties of the progress indicator to their default values.
		 *
		 * @returns {sap.ui.vk.ProgressIndicator} <code>this</code> to allow method chaining.
		 * @public
		 */
		ProgressIndicator.prototype.reset = function() {
			this._downloadStatusByFile = {};
			this._downloadStatusTotal = 0;
			this._renderStatusFileCounter = 0;
			this._renderStatusByFile = {};
			this._renderStatusPreviousUpdate = -1;
			this._renderStatusTotal = 0;
			this.setNumberOfFiles(0);
			this._progressBar.setPercentValue(0);

			return this;
		};

		/**
		 * Updates the progress bar during the downloading phase.
		 * When multiple files are being downloaded, the progress bar updates to show the overall download progress for all the files.
		 * @param {string} fileName The name of the file which sent the download progress event.
		 * @param {number} loaded The amount of data that has been downloaded so far for this particular file.
		 * @param {number} totalFileSize The total size of the file currently being downloaded.
		 * @returns {sap.ui.vk.ProgressIndicator} <code>this</code> to allow method chaining.
		 * @public
		 */
		ProgressIndicator.prototype.updateDownloadStatus = function(fileName, loaded, totalFileSize) {
			if (!totalFileSize) {
				//If totalFileSize is 0, it means the server doesn't send the content-length response header
				//in which case we set the this_downloadStatusTotal to 50 so it can be used when calculating
				//the rendering progress.
				this._downloadStatusTotal = 50;
				//We set the progress indicator text to "Downloading..." without showing value/percentage sign
				this._progressText.setText(sap.ui.vk.getResourceBundle().getText("PROGRESS_INDICATOR_DOWNLOADING"));
			} else {
				//multiply by 100 to get percentage format;
				//divide by number of files so we can indicate the total progress of multiple files;
				//divide by 2 because there are 2 phases: download phase & rendering phase
				var singleFilePercentage = loaded / totalFileSize * 100 / this.getNumberOfFiles() / 2;

				this._downloadStatusByFile[fileName] = singleFilePercentage;

				this._downloadStatusTotal = 0;
				for (var property in this._downloadStatusByFile) {
					if (this._downloadStatusByFile.hasOwnProperty(property)) {
						this._downloadStatusTotal += this._downloadStatusByFile[property];
					}
				}

				var barPercentage = Math.floor(this._downloadStatusTotal + this._renderStatusTotal);
				this._progressBar.setPercentValue(barPercentage);
				this._progressText.setText(sap.ui.vk.getResourceBundle().getText("PROGRESS_INDICATOR_DOWNLOADING") + barPercentage + "%");

			}
			return this;
		};

		/**
		 * Updates the progress bar during the rendering phase.
		 * When multiple files have been downloaded, the progress bar updates to show the overall rendering progress for all the files.
		 * @param {number} currentPercentage A percentage showing the rendering progress of the current file or files.
		 * @returns {sap.ui.vk.ProgressIndicator} <code>this</code> to allow method chaining.
		 * @public
		 */
		ProgressIndicator.prototype.updateRenderStatus = function(currentPercentage) {
			if (currentPercentage < this._renderStatusPreviousUpdate) {
				this._renderStatusFileCounter++;
			}
			this._renderStatusPreviousUpdate = currentPercentage;
			this._renderStatusTotal = (currentPercentage + this._renderStatusFileCounter) * 100 / this.getNumberOfFiles() / 2;

			var barPercentage = Math.floor(this._downloadStatusTotal + this._renderStatusTotal);
			this._progressBar.setPercentValue(barPercentage);
			this._progressText.setText(sap.ui.vk.getResourceBundle().getText("PROGRESS_INDICATOR_RENDERING") + barPercentage + "%");
			return this;
		};

		return ProgressIndicator;

	});

}; // end of sap/ui/vk/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.SceneTree'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTree",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/table/TreeTable", "sap/ui/table/Column", "sap/ui/model/json/JSONModel", "sap/m/Title", "./CheckEye", "./NodeProxy"
], function(jQuery, library, Control, TreeTable, Column, JSONModel, Title, CheckEye, NodeProxy) {
	"use strict";

	/**
	 * Constructor for a new SceneTree.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class Provides a hierarchical view of all the nodes in a given scene in table format.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.SceneTree
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTree = Control.extend("sap.ui.vk.SceneTree", /** @lends sap.ui.vk.SceneTree.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {},
			events: {},
			associations: {
				/*viewState: { type: "sap.ui.vk.ViewState", multiple: false }*/
			},
			aggregations: {
				_tree: {
					type: "sap.ui.table.TreeTable",
					multiple: false,
					visibility: "hidden"
				}
			}
		}
	});

	var getCheckEyeTooltip = function(isVisible, sceneTree) {
		return sap.ui.vk.getResourceBundle().getText(isVisible ? "SCENETREE_VISIBILITYSTATEVISIBLE" : "SCENETREE_VISIBILITYSTATEHIDDEN");
	};

	SceneTree.prototype._createNodeForSceneTree = function(nodeName, nodeId, viewStateManager) {
		var nodeVisibility = viewStateManager.getVisibilityState(nodeId);
		return {
			name: nodeName,
			id: nodeId,
			visible: nodeVisibility,
			checkEyeTooltip: getCheckEyeTooltip(nodeVisibility, this)
		};
	};

	SceneTree.prototype.setScene = function(scene, viewStateManager) {
		if (this._nodeSelectionChangedBinding == undefined) {
			this._nodeSelectionChangedBinding = this._nodeSelectionChanged.bind(this);
			this._nodeVisibilityChangedBinding = this._nodeVisibilityChanged.bind(this);
		}
		if (this._viewStateManager) {
			this._viewStateManager.detachSelectionChanged(this._nodeSelectionChangedBinding);
			this._viewStateManager.detachSelectionChanged(this._nodeVisibilityChangedBinding);
		}

		this._scene = scene;
		this._viewStateManager = viewStateManager;

		if (this._viewStateManager) {
			this._viewStateManager.attachSelectionChanged(this._nodeSelectionChangedBinding);
			this._viewStateManager.attachVisibilityChanged(this._nodeVisibilityChangedBinding);
		}

		this.refresh();
	};

	SceneTree.prototype.init = function() {
		var currentSceneTree = this;
		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}

		var _title = new Title({
			text: sap.ui.vk.getResourceBundle().getText("SCENETREE_TITLE"),
			tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_TITLE")
		});

		_title.onAfterRendering = function() {
			var $this = this.$();
			$this.addClass('sapUiVkTitle');
		};

		this._visibilityColumnHeader = new CheckEye({
			checked: true,
			tooltip: getCheckEyeTooltip(true, currentSceneTree),
			change: function(event) {
				var isVisible = event.getParameters("checked").checked;
				this.setTooltip(getCheckEyeTooltip(isVisible, currentSceneTree));
				currentSceneTree._toggleVisibilityForAllChildren(currentSceneTree._model.getData(), isVisible);
			}
		});

		this._tree = new TreeTable({
			title: _title,
			columnHeaderHeight: 32,
			columns: [
				new Column({
					label: sap.ui.vk.getResourceBundle().getText("SCENETREE_NAME"),
					tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_NAME"),
					template: new sap.m.Text({
						text: "{name}",
						maxLines: 1,
						tooltip: "{name}"
					}),
					resizable: false
				}),
				new Column({
					label: currentSceneTree._visibilityColumnHeader,
					template: new CheckEye({
						checked: "{visible}",
						tooltip: "{checkEyeTooltip}"
					}),
					width: "2.7em",
					resizable: false,
					hAlign: "Center"
				})
				],
			selectionMode: "MultiToggle",
			selectionBehavior: "RowSelector",
			visibleRowCountMode: "Auto",
			expandFirstLevel: false,
			collapseRecursive: true,
			rowHeight: 32
		});

		this.setAggregation("_tree", this._tree, true);

		this._model = new JSONModel();
		this._tree.setModel(this._model);
		this._tree.bindRows({
			path: '/'
		});
		this._tree.attachRowSelectionChange(this._nodeSelection.bind(this));
		this._tree.getBinding("rows").attachChange(this._dataChange.bind(this));

		this._viewStateManager = null;
		this._scene = null;

		this._syncing = false;
		this._selected = {};
		this._toggled = {};
		this._vsmSelected = {};

		this._forwardTimer = 0;
		this._reverseTimer = 0;

		this._vSyncing = false;
		this._lastChangeIsExpand = false;
		this._forwardVTimer = 0;
		this._reverseVTimer = 0;
		this._scrollTimer = 0;
		this._totalNodes = null;
	};

	SceneTree.prototype.exit = function() {

	};

	SceneTree.prototype.onBeforeRendering = function() {
		this._tree.setVisible(true);
	};

	SceneTree.prototype._pathToNode = function(path, data, toReplace) {
		path = path.substr(1);
		if (data == undefined) {
			data = this._model.getData();
		}

		var node = data;
		var prev = node;
		var level = "";

		while (path.length > 0) {
			var pos = path.indexOf('/');

			if (pos >= 0) {
				level = path.substr(0, pos);
				path = path.substr(pos + 1);
			} else {
				level = path;
				path = "";
			}

			prev = node;
			node = prev[level];
		}

		if (toReplace != undefined) {
			prev[level] = toReplace;
		}

		return node;
	};

	SceneTree.prototype._indexToNodeId = function(index) {
		var context = this._tree.getContextByIndex(index);
		if (context) {
			var node = this._pathToNode(context.sPath, context.oModel.oData);
			return node.id;
		} else {
			return null;
		}
	};

	SceneTree.prototype._deselectHidden = function() {
		var vsm = this._vsmSelected;
		var vs = this._viewStateManager;
		var desel = [];
		var undodesel = {};

		for (var i = 0;; i++) {
			var id = this._indexToNodeId(i);
			if (id == null) {
				break;
			}

			if (vsm.hasOwnProperty(id)) {
				undodesel[id] = true;
			}
		}

		for (var key in vsm) {
			if (vsm.hasOwnProperty(key) && vsm[key] == true && !undodesel.hasOwnProperty(key) && key != "") {
				desel.push(key);
				vsm[key] = false;
			}
		}

		if (desel.length > 0) {
			this._syncing = true;
			vs.setSelectionState(desel, false, true);
			this._syncing = false;
		}
	};

	SceneTree.prototype._nodeSelection = function(event) {
		if (this._tree.getBinding("rows")._aSelectedContexts != undefined) {
			// If we hit this, it means TreeTable is trying to restore selection, ignore it.
			return;
		}
		if (!this._syncing) {
			if (this._forwardTimer > 0) {
				clearTimeout(this._forwardTimer);
			}

			var param = event.mParameters;
			var indices = param.rowIndices;
			var curr = this._tree.getSelectedIndices();

			if (indices.length >= 1 && curr.length == 1) {
				if (indices.indexOf(curr[0]) != -1) {
					this._deselectHidden();
				}
			}

			for (var i = 0; i < indices.length; i++) {
				var id = indices[i];

				if (this._toggled.hasOwnProperty(id)) {
					this._toggled[id] = !this._toggled[id];
				} else {
					this._toggled[id] = true;
				}

				if (!this._selected.hasOwnProperty(id)) {
					this._selected[id] = false;
				}
			}

			this._forwardTimer = setTimeout(this._resyncSelectionForward.bind(this, indices), 100);
		}
	};

	SceneTree.prototype._nodeSelectionChanged = function(event) {
		if (!this._syncing) {
			if (this._reverseTimer > 0) {
				clearTimeout(this._reverseTimer);
			}

			var sel = event.mParameters.selected;
			var desel = event.mParameters.unselected;

			for (var i = 0; i < desel.length; i++) {
				if (this._vsmSelected[desel[i]] != undefined) {
					delete this._vsmSelected[desel[i]];
				}
			}
			for (var j = 0; j < sel.length; j++) {
				this._vsmSelected[sel[j]] = true;
			}

			if (sel.length == 1) {
				this._expandToNode(sel[0], this._resyncSelectionReverse.bind(this));
			} else {
				this._reverseTimer = setTimeout(this._resyncSelectionReverse.bind(this), 100, true);
			}
		}
	};

	SceneTree.prototype._resyncSelectionForward = function(targetedNodesIndexes) {
		this._forwardTimer = 0;
		if (this._syncing) {
			return false;
		}

		this._syncing = true;

		//this for loop goes through the list of nodes which ar margked as selected,
		//finds the row that was just clicked and it applies selection to it
		//via the ViewStateManager method "setSelection"
		for (var i in this._selected) {
			if (this._selected.hasOwnProperty(i)) {
				var id = this._indexToNodeId(parseInt(i, 10));
				if (id == null || id == "") {
					continue;
				}

				var isSelected = this._selected[i]; // tree.isIndexSelected(i);

				if (this._toggled[i]) {
					isSelected = !isSelected;
				}

				//We check if the current element fron "this._selected" array is the clicked row,
				//so we can set the selection/deselection on it.
				if (targetedNodesIndexes.indexOf(parseInt(i, 10)) !== -1) {
					this._viewStateManager.setSelectionState(id, isSelected, true);

					//Sometimes, a clicked row is part of a parent which is selected which causes all its children
					//to be selected. If we deselect a particular child, we have to make sure we also deselect its parent.
					if (!isSelected) {
						var nodeHierarchy = this._viewStateManager.getNodeHierarchy();
						var ancestors = nodeHierarchy.getAncestors(id);
						//the immediat parent of a node is the last element in the ancestors array
						var parentNodeId = ancestors[ancestors.length - 1];
						//We check if the parnet is in the list of currently selected rows.
						if (this._viewStateManager._selectedNodes.has(parentNodeId)) {
							this._viewStateManager.setSelectionState(parentNodeId, false);
							//We update "this._selected" and "his._vsmSelected"
							var selectedIndices = this._tree.getSelectedIndices();
							for (var j = 0, length = selectedIndices.length; j < length; j++) {
								var index = selectedIndices[j];
								if (parentNodeId === this._indexToNodeId(index)) {
									this._selected[index] = false;
									break;
								}
							}
							this._vsmSelected[parentNodeId] = false;
						}
					}
				}
				this._selected[i] = isSelected;
				this._vsmSelected[id] = isSelected;
			}
		}

		this._toggled = {};

		this._syncing = false;
	};

	SceneTree.prototype._resyncSelectionReverse = function(bScrollToSelection) {
		this._reverseTimer = 0;
		if (this._syncing) {
			return;
		}

		this._syncing = true;
		// Slow: Tree table de-selects everything after node expand or collapse, so have to resync the selection state.
		var vs = this._viewStateManager;
		var tree = this._tree;
		var selCount = 0;
		this._selected = {};

		for (var i = 0;; i++) {
			var id = this._indexToNodeId(i);
			if (id == null || id == "") {
				break;
			}

			var sel = vs.getSelectionState(id);

			if (sel) {
				this._selected[i] = true;
				selCount++;
			}

			if (sel != tree.isIndexSelected(i)) {
				if (sel) {
					tree.addSelectionInterval(i, i);
				} else {
					tree.removeSelectionInterval(i, i);
				}
			}
		}

		this._syncing = false;
	};

	SceneTree.prototype._expandToNode = function(nodeId, callback) {

		var totalNodes = this._totalNodes;

		//we pass tree structure and an array of positions and it returns the resulting tree component
		//For example: if we pas [0, 2, 3, 2], it returns dataModel[0][2][3][2]
		var getFormattedDataModel = function(dataModel, pathInModel) {
			pathInModel.forEach(function(position) {
				dataModel = dataModel[position];
			});
			return dataModel;
		};

		// getScrollPosition - When we know the index of the row where we want to scroll,
		//we do some calculations so we position that row in the middle
		//of the table. For example if we want to scroll index 30 into view
		//and the table can fit 12 rows into the view, we will display the rows
		//starting from 24 until 36 so row number 30 is in the middle.
		var getScrollPosition = function (currentRow, rowIndex, rowCapacity) {
			var position;
			if ((rowIndex < currentRow) || (rowIndex >= (currentRow + rowCapacity))) {
				//if the relevant row index is not in the view,
				//we perform the necessary calculations.
				position = rowIndex - (rowCapacity / 2);
			} else {
				//if the relevant row is already visible,
				//we don't change anything and we return the current index.
				position = currentRow;
			}
			//We round the index so it's an integer
			//and we also make sure it's greater than 0 at all times.
			position = position > 0 ? Math.floor(position) : 0;
			return position;
		};

		//This is the method that performs the actual scrolling
		var scrollNodeIntoView = function (tree, rowIndex) {
			var rowCapacity = tree.getVisibleRowCount(),
				currentRow = tree.getFirstVisibleRow(),
				rowToScrollTo = getScrollPosition(currentRow, rowIndex, rowCapacity);
			if (rowToScrollTo !== currentRow) {
				tree.setFirstVisibleRow(rowToScrollTo);
			}
		};

		//This method takes a tree table and a node id as parameters and
		//it returns the row index for the node with that id.
		var getIndexFromNodeId = function(treeTable, nodeId) {

			var rowIndex = null,
				context;

			//we iterate over all row indexes
			for (var currentIndex = 0; currentIndex < totalNodes; currentIndex++) {
				context = treeTable.getContextByIndex(currentIndex);
				if (context) {
					var pathInModel = context.getPath().split("/");
					pathInModel.shift();
					var dataModel = context.getModel().getData();

					if (getFormattedDataModel(dataModel, pathInModel).id === nodeId) {
						//when we find the node id that we need, we save the index
						//and break out of the while loop
						rowIndex = currentIndex;
						break;
					}
				}
			}
			return rowIndex;
		};

		var nodeHierarchy = this._scene.getDefaultNodeHierarchy(),
			ancestors = nodeHierarchy.getAncestors(nodeId);

		//processAncestors removes the first ancestor from the collection,
		//it gets the row index from the tree table, it expands that row
		//and at the end, it scrolls the relevant row into view.
		var processAncestors = function (tree, ancestors) {
			setTimeout(function() {
				if (ancestors.length) {
					//retrieve the first ancestor from the collection and remove it
					var ancestorId = ancestors.shift();
					var rowIndex = getIndexFromNodeId(tree, ancestorId);
					if (rowIndex !== null) {
						tree.expand(rowIndex);
					}
				} else {
					//after we expand the last node, we scroll the selected element into view
					var scrollIndex = getIndexFromNodeId(tree, nodeId);
					if (scrollIndex !== null) {
						scrollNodeIntoView(tree, scrollIndex);
						tree.getBinding("rows").detachChange(expandHandler);
						callback();
					}
				}
			}, 70);
		};

		//expandHandler it's called after the tree table expands a row.
		//This is a way of expanding nodes recursively. We start with the
		//"oldest" ancestors and we continue down the tree to the relevant node.
		var expandHandler = function (tree, ancestors, event) {
			if (event.getParameter("reason") === "expand") {
				processAncestors(tree, ancestors);
			}
		};

		//We listen for the change event so we now when the tree.expand() method has finished
		this._tree.getBinding("rows").attachChange(expandHandler.bind(this, this._tree, ancestors));

		//start processing the ancestors:
		//get ancestor => find its index => expand that index => repeat
		processAncestors(this._tree, ancestors);

	};

	SceneTree.prototype._dataChange = function(event) {
		if (this._viewStateManager == null || this._scene == null || this._vSyncing) {
			return;
		}

		if (this._lastChangeIsExpand) {
			this._lastChangeIsExpand = false;
			return;
		}

		if (this._forwardVTimer > 0) {
			clearTimeout(this._forwardVTimer);
		}

		this._forwardVTimer = setTimeout(this._resyncVisibilityForward.bind(this), 100);
	};

	SceneTree.prototype._resyncVisibilityForward = function() {
		if (!this._vSyncing) {
			this._vSyncing = true;
			this._forwardVTimer = 0;
			this._setNodeVisibilityRecursive(this._model.getData(), this._viewStateManager);
			this._vSyncing = false;
		}
	};

	SceneTree.prototype._enumerateChildrenIntoArray = function(nodeId, list) {
		var nodeInfo = this._scene.getDefaultNodeHierarchy();
		nodeInfo.enumerateChildren(nodeId, function(pnode) {
			var id = pnode.getNodeId();
			list.push(id);
			if (pnode.getHasChildren()) {
				this._enumerateChildrenIntoArray(id, list);
			}
		});
	};

	SceneTree.prototype._setNodeVisibilityRecursive = function(node, viewStateManager) {
		if (node.id != null && viewStateManager.getVisibilityState(node.id) != node.visible) {
			//setVisbility state with a "true" value as third parameter
			//will change the visibility of a node and its children recursively.
			viewStateManager.setVisibilityState(node.id, node.visible, true);

			if (node[0] != undefined) {
				if (this._reverseVTimer > 0) {
					clearTimeout(this._reverseVTimer);
				}
				this._reverseVTimer = setTimeout(this._resyncVisibilityReverse.bind(this), 100);
			}
		} else {
			for (var i = 0; node[i] != null; i++) {
				this._setNodeVisibilityRecursive(node[i], viewStateManager);
			}
		}
	};

	SceneTree.prototype._toggleVisibilityForAllChildren = function(node, isVisible) {
		for (var i = 0; node[i] != null; i++) {
			this._viewStateManager.setVisibilityState(node[i].id, isVisible, true);
		}
	};

	SceneTree.prototype._nodeVisibilityChanged = function(event) {
		if (!this._vSyncing) {
			if (this._reverseVTimer > 0) {
				clearTimeout(this._reverseVTimer);
			}
			this._reverseVTimer = setTimeout(this._resyncVisibilityReverse.bind(this), 100);
		}
	};

	SceneTree.prototype._resyncVisibilityReverse = function() {
		if (!this._vSyncing) {
			this._vSyncing = true;
			this._forwardVTimer = 0;
			this._getNodeVisibilityRecursive(this._model.getData(), this._viewStateManager);
			this._tree.getModel().refresh(true);
			this._vSyncing = false;
		}
	};

	SceneTree.prototype._getNodeVisibilityRecursive = function(node, vsm) {
		if (node.id != null) {
			node.visible = vsm.getVisibilityState(node.id);
			//Updating the tooltip for each node
			node.checkEyeTooltip = getCheckEyeTooltip(node.visible, this);
		}

		for (var i = 0; node[i] != null; i++) {
			this._getNodeVisibilityRecursive(node[i], vsm);
		}
	};

	SceneTree.prototype.refresh = function() {
		if (this._scene == null) {
			this._model.setData([]);
			return;
		}

		var nodeHierarchy = this._scene.getDefaultNodeHierarchy();

		//building the tree model which is going to be passed to the TreeTable control.
		var tree = {};
		this._totalNodes = 0;
		var getChildrenRecursively = function(tree, nodeIds) {
			nodeIds.forEach(function(nodeId, index) {
				var node = new NodeProxy(nodeHierarchy, nodeId);
				var treeNode = this._createNodeForSceneTree(node.getName(), node.getNodeId(), this._viewStateManager);
				tree[index] = treeNode;
				node.destroy();
				this._totalNodes++;
				getChildrenRecursively.bind(this)(tree[index], nodeHierarchy.getChildren(nodeId));
			}.bind(this));
		};
		getChildrenRecursively.bind(this)(tree, nodeHierarchy.getChildren());

		//set the object that we've just build as data model for the TreeTable control
		this._model.setData(tree);
		this._tree.setModel(this._model);
		this._tree.bindRows({
			path: '/'
		});
		this._tree.getBinding("rows").attachChange(this._dataChange.bind(this));
		this._visibilityColumnHeader.setChecked(true);
		this._visibilityColumnHeader.setTooltip(getCheckEyeTooltip(true, this));
	};

	SceneTree.prototype.onAfterRendering = function() {};

	return SceneTree;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTree.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

//Provides control sap.ui.vk.StepNavigation.
jQuery.sap.declare('sap.ui.vk.StepNavigation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigation",["jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler", "sap/ui/core/Popup", "sap/ui/core/IconPool", "./Messages"],
	function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler, Popup, IconPool, Messages) {
		"use strict";

		/**
		 *  Constructor for a new StepNavigation.
		 *
		 * @class
		 * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
		 *
		 * @param {string} [sId] ID for the new control. This ID is generated automatically if no ID is provided.
		 * @param {object} [mSettings] Initial settings for the new Step Navigation control.
		 * @public
		 * @author SAP SE
		 * @version 1.38.15
		 * @extends sap.ui.core.Control
		 * @alias sap.ui.vk.StepNavigation
		 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
		 */
		var StepNavigation = Control.extend("sap.ui.vk.StepNavigation",/** @lends sap.ui.vk.StepNavigation.prototype */ {
			metadata: {
				library: "sap.ui.vk",
				properties: {
					/**
					 * Managed settings and properties for Step Navigation events.
					 */
					settings: "object",

					/**
					 * Width of the Step Navigation control.
					 */
					width: {
						type: "sap.ui.core.CSSSize",
						defaultValue: "100%"
					},

					/**
					 * Height of the Step Navigation control.
					 */
					height: {
						type: "sap.ui.core.CSSSize",
						defaultValue: "100%"
					},

					/**
					 * Indicates that the Step Navigation control should display thumbnails. 
					 * If set to <code>true</code>, then thumbnails are rendered. If set to <code>false</code>, then thumbnails are hidden.
					 */
					showThumbnails: {
						type: "boolean",
						group: "Appearance",
						defaultValue: true
					},

					/**
					 * Indicates that the Step Navigation control should display a toolbar. 
					 * If set to <code>true</code>, then the toolbar is rendered. If set to <code>false</code>, then the toolbar is hidden.
					 */
					showToolbar: {
						type: "boolean",
						group: "Appearance",
						defaultValue: true
					},

					/**
					 * Indicates that the Step Navigation control should display a popup containing information around the step that is playing. 
					 * If set to <code>true</code>, then the popup is rendered. If set to <code>false</code>, the popup is hidden.
					 */
					showStepInfo: {
						type: "boolean",
						group: "Appearance",
						defaultValue: false
					}
				},

				publicMethods: [
				"setGraphicsCore",
				"setScene",
				"playStep",
				"pauseStep",
				"playAllSteps",
				"getStep",
				"getNextStep",
				"getPreviousStep",
				"getProceduresAndSteps",
				"refresh",
				"clear"],
				associations: {},

				aggregations: {
					/**
					 * Template control for Procedure items.
					 */
					procedureItemTemplate: {
						type: "sap.ui.core.Item",
						multiple: false
					},

					/**
					 * sap.ui.core.Popup used to render step information in a popup.
					 */
					stepInfoPopup: {
						type: "sap.ui.core.Control",
						multiple: false
					},

					/**
					 * sap.m.Panel used to render the entire Step Navigation control's content.
					 */
					layout: {
						type: "sap.m.Toolbar",
						multiple: false
					},
					/**
					 * sap.m.Panel used to render a list of thumbnails for the available steps.
					 */
					thumbnailsContainer: {
						type: "sap.m.Panel",
						multiple: false
					}
				},

				events: {
					"resize": {
						parameters: {
							oldSize: "object",
							size: "object"
						}
					},

					/**
					 * Raised each time a step starts, changes, or finishes.
					 */
					"stepChanged": {
						parameters: {
							/**
							 * The ID of the rendering client that raised the event.
							 */
							clientId: "object",

							/**
							 * The type of sap.ve.dvl.DVLSTEPEVENT that has been raised; for example, DVLSTEPEVENT_FINISHED, DVLSTEPEVENT_SWITCHED, DVLSTEPEVENT_STARTED.
							 */
							type: "object",

							/**
							 * The ID of the step affected by this stepId event.
							 */
							stepId: "object"
						}
					}
				}
			}
		});
		/**
		 * Attaches or detaches the Step Navigation control to the {@link sap.ui.vk.GraphicsCore GraphicsCore} object.
		 *
		 * If the parameter <code>graphicsCore</code> is not <code>null</code>, a rendering object corresponding to the Viewport is created.
		 * If the parameter <code>graphicsCore</code> is <code>null</code>, the rendering object corresponding to the Viewport is destroyed.
		 * @param {sap.ui.vk.GraphicsCore} graphicsCore The {@link sap.ui.vk.GraphicsCore GraphicsCore} object, or <code>null</code>.
		 * @returns {sap.ui.vk.StepNavigation} <code>this</code> to allow method chaining.
		 * @public
		 */
		StepNavigation.prototype.setGraphicsCore = function(graphicsCore) {
			if (graphicsCore != this._graphicsCore) {
				this._graphicsCore = graphicsCore;
			}

			this.instanceSettings = {};

			this.oDvl = this._graphicsCore.getApi(sap.ui.vk.GraphicsCoreApi.LegacyDvl);
			this.oDvl.Client.OnStepEvent = function(clientId, type, stepId) {
				var oSettings = this.getSettings();
				this.instanceSettings.currentStepId = stepId;
				switch (type) {
					case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_FINISHED:
						oSettings.currentStepFinished = true;
						oSettings.currentStepPaused = false;
						oSettings.playAllActive = false;
						oSettings.isPlaying = false;
						this._togglePlayPause(true);
						break;
					case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_SWITCHED: //WARNING
					case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_STARTED:
						oSettings.currentStepId = stepId;
						oSettings.currentStepFinished = false;
						this._highlightStep(stepId);
						//The user may have attempted to pause the step as it changed.
						//The following attempts to honor the intent by pausing the current step
						if (oSettings.currentStepPaused) {
							this.pauseStep();
						}
						break;
					default:
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT12.summary), this._messages.messages.VIT12.code, "sap.ui.vk.StepNavigation");
				}

				this.fireStepChanged({
					clientId: clientId,
					type: type,
					stepId: stepId
				});
			}.bind(this);

			return this;
		};

		/**
		 * This method is used to check if the Graphics Core object has been set on this Step Navigation control.
		 *
		 * @returns {boolean} It returns <code>true</code> or <code>false</code>.
		 * @private
		 */
		StepNavigation.prototype.hasGraphicsCore = function() {
			if (this._graphicsCore) {
				return true;
			}
			return false;
		};

		/**
		 * Attaches a Scene object to the Step Navigation control so that it can access the Scene’s procedures and steps.
		 *
		 * @param {object} scene The Scene object to attach to the Step Navigation control.
		 * @public
		 */
		StepNavigation.prototype.setScene = function(scene) {
			this._scene = scene;
			if (this["_getStepThumbnails"]) {
				if (!this._graphicsCore) {
					this.setGraphicsCore(this._scene.getGraphicsCore());
				}

				delete this._procedures;
				var oProcedureList = this.getProcedureList();
				var oSettings = this.getSettings();
				oSettings.reset();
				oProcedureList.unbindItems();
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem()); //oProcedureList.setSelectedItem(null);

				//Destroy the step info popup if it exists
				if (oSettings.stepInfo.stepMessagePopup) {
					if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
						oSettings.stepInfo.stepMessagePopup.close();
					}
					oSettings.stepInfo.stepMessagePopup.destroy();
					oSettings.stepInfo.stepMessagePopup = null;
					this.getShowStepInfoButton().setText(sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
				}

				//Get Steps and decide whether to enable/disable controls
				var data = this._getStepThumbnails();
				this.oModel.setData(data);
				this._togglePlayPause(true);
				this._refreshControl();
			}
			this.refresh();
		};

		StepNavigation.prototype.init = function() {
			this._messages = new Messages();
			if (Control.prototype.init) {
				Control.prototype.init(this);
			}

			if (this.getSettings() == undefined) {
				this.setSettings(new this._settings());
			}
			this._graphicsCore = null;

			// Create JSON data model
			this.oModel = new sap.ui.model.json.JSONModel();
			// Create layout panel

			this._layout = new sap.m.Toolbar({
				design: sap.m.ToolbarDesign.Solid
			});

			//this._layout.addContent();
			this.setAggregation("layout", this._layout);

			if (this.getShowThumbnails()) {
				this._thumbnailsScroller = new sap.m.ScrollContainer(this.getId() + "-scroller", {
					width: "100%",
					horizontal: true,
					vertical: false,
					focusable: true
				});
				this._thumbnailsContainer = new sap.m.Panel({
					expandable: false,
					content: [
						this._thumbnailsScroller
					]
				});
				this.setAggregation("thumbnailsContainer", this._thumbnailsContainer);
			}
			//Create the play previous button
			this.playPreviousButton = new sap.m.Button(this.getId() + "-playPreviousButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://slim-arrow-left",
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PREVIOUSSTEPBUTTON"),
				visible: true,
				press: function(e) {
					var oSettings = this.getSettings();
					var prevStep = this.getPreviousStep(oSettings.currentProcedureIndex);
					if (prevStep) {
						oSettings.currentStepPaused = false;
						this.playStep(prevStep.id, true, oSettings.playAllActive);
						this._togglePlayPause(false);
					}
				}.bind(this)
			});

			// Create the play next button
			this.playNextButton = new sap.m.Button(this.getId() + "-playNextButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://slim-arrow-right",
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_NEXTSTEPBUTTON"),
				visible: true,
				press: function(e) {
					var oSettings = this.getSettings();
					var nextStep = this.getNextStep(oSettings.currentProcedureIndex);
					if (nextStep) {
						oSettings.currentStepPaused = false;
						this.playStep(nextStep.id, true, oSettings.playAllActive);
						this._togglePlayPause(false);
					}
				}.bind(this)
			});

			// Create the play next button
			this.playOptionButton = new sap.m.Button(this.getId() + "-playOptionButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://media-play",
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYBUTTON_PLAY"),
				visible: true,
				press: function(e) {
					var key = this.getPlayMenuButton().getSelectedKey(); //e.oSource.getSelectedKey();
					var oSettings = this.getSettings();
					var firstStep = null;
					switch (key) {
						case "0":
							// Play
							if (!oSettings.currentStepId) {
								firstStep = this.getNextStep(oSettings.currentProcedureIndex);
								if (firstStep) {
									oSettings.currentStepId = firstStep.id;
								} else {
									return; // If there is no first step then do nothing
								}

							}
							oSettings.playAllActive = false;
							this.playStep(oSettings.currentStepId, !oSettings.currentStepPaused, oSettings.playAllActive);
							oSettings.isPlaying = true;
							oSettings.currentStepPaused = false;
							this._togglePlayPause(false);
							break;
						case "1":
							oSettings.playAllActive = true;
							oSettings.currentStepPaused = false;
							this.playAllSteps(oSettings.currentProcedureId);
							oSettings.isPlaying = true;
							this._togglePlayPause(false);
							break;
						case "2":
							if (!oSettings.currentStepId) {
								firstStep = this.getNextStep(oSettings.currentProcedureIndex);
								if (firstStep) {
									oSettings.currentStepId = firstStep.id;
								} else {
									return; // If there is no first step then do nothing
								}
							}
							oSettings.playAllActive = true;
							var playFromBeginning = !oSettings.currentStepPaused;
							oSettings.currentStepPaused = false;
							this.playStep(oSettings.currentStepId, playFromBeginning, oSettings.playAllActive);
							oSettings.isPlaying = true;
							this._togglePlayPause(false);
							break;
						default:
							break;
					}
				}.bind(this)
			});


			// Create the procedures dropdown list
			this.procedureList = new sap.m.Select(this.getId() + "-procedureList", {
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PROCEDURESLISTHEADING"),
				selectedKey: "0",
				type: sap.m.SelectType.Default,
				enabled: true,
				width: "30%",
				autoAdjustWidth: true,
				change: function(oControlEvent) {
					// Reset the control info when they change the selected procedure
					var oProcedureList = this.getProcedureList();
					var oSettings = this.getSettings();
					oSettings.currentProcedureIndex = 0; // Set the default to the first procedure
					oSettings.currentProcedureId = this.instanceSettings.currentProcedureId = oProcedureList.getSelectedKey();
					oSettings.currentStepId = this.instanceSettings.currentStepId = null;
					for (var ip = 0; ip < this.oModel.oData.procedures.length; ip++) {
						if (this.oModel.oData.procedures[ip].id == oSettings.currentProcedureId) {
							oSettings.currentProcedureIndex = ip;
							oSettings.currentProcedure = this.oModel.oData.procedures[ip];
							break;
						}
					}

					// Destroy the step info popup if it exists
					if (oSettings.stepInfo.stepMessagePopup) {
						if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
							oSettings.stepInfo.stepMessagePopup.close();
						}
						oSettings.stepInfo.stepMessagePopup.destroy();
						oSettings.stepInfo.stepMessagePopup = null;
					}

					this._refreshItems();
				}.bind(this)
			});

			this.procedureList.addStyleClass("sapVizKitStepNavigationProcedureList");

			// Create the item template for the procedure drop down list
			this.setAggregation("procedureItemTemplate", (
				new sap.ui.core.ListItem()
				.bindProperty("text", "name")
				.bindProperty("key", "id")
				.bindProperty("tooltip", "name")));

			// Create the play menu
			this.playMenuButton = (new sap.m.Select(this.getId() + "-playMenuButtonIcon", {
				selectedKey: "0",
				type: sap.m.SelectType.Default,
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYOPTIONS"),
				enabled: true,
				autoAdjustWidth: false,
				items: [
					new sap.ui.core.ListItem({
						key: "0",
						icon: "sap-icon://media-play",
						text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAY"),
						tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAY")
					}),
					new sap.ui.core.ListItem({
						key: "1",
						icon: "sap-icon://media-play",
						text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALL"),
						tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALL")
					}),
					new sap.ui.core.ListItem({
						key: "2",
						icon: "sap-icon://media-play",
						text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING"),
						tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING")
					})]
			}));

			this.playMenuButton.addStyleClass("sapVizKitStepNavigationPlayOptionsSelect");


			// Create the pause button
			this.pauseButton = new sap.m.Button(this.getId() + "-pauseButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://media-pause",
				visible: false,
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PAUSE"),
				press: function(e) {
					var oSettings = this.getSettings();
					this.pauseStep();
					oSettings.currentStepPaused = true;
					oSettings.isPlaying = false;
					this._togglePlayPause(true);
				}.bind(this)
			});

			this.showStepInfoButton = new sap.m.ToggleButton(this.getId() + "-showStepInfoButton", {
				icon: "sap-icon://hide",
				type: sap.m.ButtonType.Transparent,
				pressed: false,
				text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
				tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
				press: function(oEvent) {
					var target = oEvent.getSource();
					if (target.getPressed()) {
						this.setShowStepInfo(true);
						target.setIcon("sap-icon://show");
						target.setTooltip(sap.ui.vk.getResourceBundle().getText("STEP_NAV_HIDESTEPDESCRIPTIONBUTTON"));
					} else {
						this.setShowStepInfo(false);
						target.setIcon("sap-icon://hide");
						target.setTooltip(sap.ui.vk.getResourceBundle().getText("STEP_NAV_SHOWSTEPDESCRIPTIONBUTTON"));
					}
				}.bind(this)
			});


			this._layout.addContent(this.playPreviousButton);
			this._layout.addContent(this.playOptionButton);
			this._layout.addContent(this.pauseButton);
			this._layout.addContent(this.playMenuButton);
			this._layout.addContent(this.procedureList);
			this._layout.addContent(this.showStepInfoButton);
			this._layout.addContent(new sap.m.ToolbarSpacer());
			this._layout.addContent(this.playNextButton);
		};

		StepNavigation.prototype.getScroller = function() {
			return this._thumbnailsScroller;
		};

		StepNavigation.prototype.getProcedureList = function() {
			var id = this.getId() + "-procedureList";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getPlayMenuButton = function() {
			var id = this.getId() + "-playMenuButtonIcon";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getPlayOptionButton = function() {
			var id = this.getId() + "-playOptionButton";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getPauseButton = function() {
			var id = this.getId() + "-pauseButton";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getPlayNextButton = function() {
			var id = this.getId() + "-playNextButton";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getPlayPreviousButton = function() {
			var id = this.getId() + "-playPreviousButton";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.getShowStepInfoButton = function() {
			var id = this.getId() + "-showStepInfoButton";
			var ht = this._layout;
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		};

		StepNavigation.prototype.exit = function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
			if (Control.prototype.exit) {
				Control.prototype.exit.apply(this);
			}
		};

		/**
		 * Control runtime settings (intended as internal/read-only).
		 * @return {object} It returns the control runtime settings.
		 * @private
		 */
		StepNavigation.prototype._settings = function() {
			return {
				enabled: false,
				toggle: {
					addCss: function(key, property, onValue, offValue) {
						if (!this.targets[key]) {
							this.targets[key] = {
								"type": "css",
								"property": property,
								"onValue": onValue,
								"offValue": offValue
							};
						}
					},

					addMethod: function(target, method, onValue, offValue, useJQuery) {
						var key = target.getId();
						if (!this.targets[key]) {
							this.targets[key] = {
								"type": "method",
								"target": target,
								"method": method,
								"onValue": onValue,
								"offValue": offValue,
								"useJQuery": useJQuery
							};
						}
					},

					targets: {}
				},

				currentProcedureIndex: 0,
				currentProcedureId: "",
				currentProcedure: null, //Managed and used by popup step info
				currentStepId: null,
				currentStep: null, //Managed and used by popup step info
				currentStepPaused: false,
				isPlaying: false,
				currentStepFinished: true,
				playAllActive: false,
				showToolbar: true,
				showThumbnails: true,
				portfolioMode: false,
				reset: function() {
					this.currentStep = null;
					this.currentProcedure = null;
					this.currentProcedureIndex = 0;
					this.currentProcedureId = "";
					this.currentStepId = null;
					this.currentStepPaused = false;
					this.currentStepFinished = true;
					this.playAllActive = false;
					this.portfolioMode = false;
				},

				stepInfo: {
					lastTop: null,
					lastLeft: null,
					stepMessagePopup: null,
					openPopup: function(popupTitle, textContent, target, placement) {

						this._customHeaderText  = this._customHeaderText || new sap.m.Text({
							width: "100%",
							textAlign: sap.ui.core.TextAlign.Center
						}).addStyleClass("sapVizKitStepNavigationPopoverTitle");
						this._customHeaderText.setText(popupTitle);
						this._customHeaderText.setTooltip(popupTitle);

						//We are creating a custom header for the popup title.
						//If the title is too long, we show only what it fits in the popup,
						//the rest is hidden using ellipsis.
						//If you hover your mouse over the truncated title, a tooltip will be displayed
						//showing the entire title.
						this._customHeader = this._customHeader || new sap.m.Bar({
							contentLeft: [
								this._customHeaderText
							]
						});

						this._textContent = this._textContent || new sap.m.Text({});
						this._textContent.addStyleClass("sapVizKitStepNavigationPopoverContent");
						this._textContent.setText(textContent);

						//If the popup hasn't been created so far,
						//we create a new instance and populate it.
						this.stepMessagePopup = this.stepMessagePopup || new sap.m.ResponsivePopover({
							placement: placement,
							showCloseButton: true,
							verticalScrolling: true,
							contentHeight: "10%",
							contentWidth: "30%",
							content: [
								this._textContent
							],
							customHeader: this._customHeader
						});
						this.stepMessagePopup.addStyleClass("sapVizKitStepNavigationPopoverStepInfo");

						this.stepMessagePopup.openBy(target);
					}
				}
			};
		};

		/**
		 * Rebuilds the content of the Step Navigation control from the current Scene.
		 * @param {object} oScene The scene object to be used.
		 * @return {boolean} Returns <code>true</code> if the content of the Step Navigation control was rebuilt successfully.
		 * @public
		 */
		StepNavigation.prototype.refresh = function(oScene) {
			jQuery.sap.log.info("StepNavigation refresh() called.");
			if (this.getVisible() && (this["_getStepThumbnails"] && this._scene != null)) {
				var oProcedureList = this.getProcedureList();
				var oSettings = this.getSettings();
				oSettings.reset();
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem());

				//Get Steps and decide whether to enable/disable controls
				var data = this._getStepThumbnails();

				//Destroy the step info popup if it exists
				if (oSettings.stepInfo.stepMessagePopup) {
					if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
						oSettings.stepInfo.stepMessagePopup.close();
					}
					oSettings.stepInfo.stepMessagePopup.destroy();
					oSettings.stepInfo.stepMessagePopup = null;
				}

				//
				this.oModel.setData(data);
				this._togglePlayPause(true);
				this._refreshControl();
			} else if (this.getVisible()) {
				this._refreshControl();
			}
			return true;
		};

		/**
		 * Clears the content of the Step Navigation control.
		 *
		 * @return {boolean} Returns <code>true</code> if the method was called successfully.
		 * @public
		 */
		StepNavigation.prototype.clear = function() {
			jQuery.sap.log.info("StepNavigation clear() called.");
			return true;
		};

		StepNavigation.prototype.onBeforeRendering = function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			//**********************************************************************
			//**** CONFIGURE THE DROP DOWN LIST OF PROCEDURES					****
			//**********************************************************************
			if (this.getShowToolbar()) {
				var oProcedureList = this.getProcedureList();
				oProcedureList.setModel(this.oModel);
				var oProcedureItemTemplate = this.getProcedureItemTemplate();
				oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
			}
		};

		StepNavigation.prototype.onAfterRendering = function() {
			if (this._canvas) {
				var domRef = this.getDomRef();
				domRef
					.appendChild(this._canvas);
				this._resizeListenerId = ResizeHandler
					.register(
						this,
						this._handleResize
						.bind(this));
				this._bestFit();
				this
					.fireResize({
						size: {
							width: domRef.clientWidth,
							height: domRef.clientHeight
						}
					});
			}

			//Events like the Toggle Step Info button are causing a re-render. The following workaround
			//ensures that the play/pause button do not get reset to incorrect defaults. This should be handled differently and will be updated in the future.
			var oSettings = this.getSettings();
			this._togglePlayPause(!oSettings.isPlaying);
			if (oSettings.currentStepId) {
				this._highlightStep(oSettings.currentStepId);
			}
		};

		/**
		 * @param {object} event The resize event object.
		 * @private
		 */
		StepNavigation.prototype._handleResize = function(event) {
			this.fireResize({
				oldSize: event.oldSize,
				size: event.size
			});
			this._update();
		};

		/**
		 * @private
		 */
		StepNavigation.prototype._reset = function() {
			this._x = 0;
			this._y = 0;
			this._s = 1.0;
			this._r = 0;
		};

		/**
		 * @private
		 */
		StepNavigation.prototype._update = function() {
			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;
			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ")";

			this._img.style.transform = transform;
			this._img.style.webkitTransform = transform;
			this._img.style.msTransform = transform;
			this._img.style.MozTransform = transform;
			this._img.style.OTransform = transform;
		};

		StepNavigation.prototype._bestFit = function() {
			this._reset();
			var sx = this._canvas.clientWidth / this._img.width;
			var sy = this._canvas.clientHeight / this._img.height;
			this._s = sx < sy ? sx : sy;
			if (this._s == 0) {
				this._s = 1.0;
			}
			this._x = 0;
			this._y = 0;
			this._update();
		};

		// This delegate is called to set focus on controls that are not rendered yet.
		var deferredFocusDelegate = {
			onAfterRendering: function(event) {
				event.srcControl.focus();
				event.srcControl.removeEventDelegate(this); // Here 'this' equals the delegate itself.
			}
		};

		/**
		 * Toggle Play/Pause button visibility.
		 * @param {boolean} pauseActive Parameter that tells whether the pause is active or not.
		 * @private
		 */
		StepNavigation.prototype._togglePlayPause = function(pauseActive) {
			this.togglePlayPauseActive = true;
			if (this.getSettings().showToolbar) {
				var playOptionButton = this.getPlayOptionButton(),
					pauseButton = this.getPauseButton();
				if (pauseActive) {
					if (sap.ui.getCore().getCurrentFocusedControlId() === pauseButton.getId()) {
						playOptionButton.addEventDelegate(deferredFocusDelegate); // Do not pass the 'oThis' parameter, so that it would be equal to the delegate itself.
					}
					pauseButton.setVisible(false);
					playOptionButton.setVisible(true);
				} else {
					if (sap.ui.getCore().getCurrentFocusedControlId() === playOptionButton.getId()) {
						pauseButton.addEventDelegate(deferredFocusDelegate); // Do not pass the 'oThis' parameter, so that it would be equal to the delegate itself.
					}
					playOptionButton.setVisible(false);
					pauseButton.setVisible(true);
				}
			}
		};

		/**
		 * Used internally to refresh and update the controls and their data.
		 *
		 * @private
		 */
		StepNavigation.prototype._refreshControl = function() {
			//var that = this;
			var oProcedureList = this.getProcedureList();
			var oProcedureItemTemplate = this.getProcedureItemTemplate();
			var oSettings = this.getSettings();

			//Destroy the step info popup if it exists
			if (oSettings.stepInfo.stepMessagePopup) {
				if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
					oSettings.stepInfo.stepMessagePopup.close();
				}
				oSettings.stepInfo.stepMessagePopup.destroy();
				oSettings.stepInfo.stepMessagePopup = null;
				this.getShowStepInfoButton().setText(sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
			}

			oProcedureList.unbindItems();
			if (this.oModel.oData.procedures.length > 0) {
				var first = this.oModel.oData.procedures[0];
				if (this.getShowToolbar()) {
					oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
					oProcedureList.selectedKey = first.id;
					oProcedureList.enabled = true;
				}
				this._refreshItems();
			} else {
				if (this.getShowToolbar()) {
					oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
					oProcedureList.enabled = false;
				}

				if (this.getShowThumbnails()) {
					var oScroller = this.getScroller();
					oScroller.destroyContent();
				}
			}
		};

		/**
		 * Refreshes the step thumbnail list items.
		 *
		 * @private
		 */
		StepNavigation.prototype._refreshItems = function() {
			var that = this;
			var steps = [];
			var oProcedureList = this.getProcedureList();
			var oSettings = that.getSettings();
			var itemLayout = new sap.m.HBox();

			//Get the procedure info
			if (!oSettings.currentProcedure) {
				oSettings.currentProcedure = that.oModel.oData.procedures[oSettings.currentProcedureIndex];
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem());
			}

			if (oSettings.currentProcedureId != '' || that.oModel.oData.procedures.length > 0) {
				if (that.getShowThumbnails()) {
					var oScroller = that.getScroller();
					//Clear the current controller layout
					oScroller.removeAllContent();
					steps = that.oModel.oData.procedures[oSettings.currentProcedureIndex].steps;
					var imagePress = function(ev) {
						oSettings.currentStepPaused = false;
						var cnt = sap.ui.getCore().byId(ev.getSource().getId());
						that.playStep(cnt.getCustomData()[0].getValue("stepId"));
						oSettings.playAllActive = false;
						that._togglePlayPause(false);
					};

					for (var i = 0; i < steps.length; i++) {
						var img = new sap.m.Image({
							alt: steps[i].name,
							src: "data:image/" + steps[i].thumbnailType + ";base64," + steps[i].thumbnailData,
							densityAware: false,
							tooltip: steps[i].name,
							press: imagePress.bind(that),
							layoutData: new sap.m.FlexItemData({
								shrinkFactor: 0
							})
						});

						img.data("stepId", steps[i].id); //Use for jQuery to change style - possibly refactor to iterate through sap.m.Image objects instead
						img.addCustomData(new sap.ui.core.CustomData({
							key: "stepId",
							value: steps[i].id
						}));
						img.addStyleClass("sapVizKitStepNavigationStepItem");
						itemLayout.addItem(img);
					}
					oScroller.addContent(itemLayout);
				}
			}
		};

		/**
		 * Calculates the distance between the Step Description button and the top of the DOCUMENT.
		 * If there is enough room, place the pop-up at the top.
		 * If there isn't, place it right under the Step Description button.
		 * @param {object} element The DOM element next to which the popup will be placed.
		 * @return {string} It returns the popup position as a string which will be passed to the popup renderer.
		 * @private
		 */
		StepNavigation.prototype._getPopupPlacement = function(element) {
			var placement = null;
			var yPos = 0;
			while (element) {
				yPos += element.offsetTop;
				element = element.offsetParent;
			}
			if (yPos > 200) {
				placement = sap.m.PlacementType.Top;
			} else {
				placement = sap.m.PlacementType.Bottom;
			}
			return placement;
		};

		/**
		 * It checks if it's necessary to scroll the container which holds
		 * the step thumbnails. We only need to scroll when the selected item is close to the margin.
		 * @param {object} item The currently active step navigation thumbnails item.
		 * @param {object} scroller The thumbnail scroller from the step navigation.
		 * @return {boolean} It returns <code>true</code> or <code>false</code> depending on whether the scrolling is necessary or not.
		 * @private
		 */
		StepNavigation.prototype._isScrollingNecessary = function(item, scroller) {
			var isNecessary;
			//if item or scroller are not defined, it means the step navigation
			//is not rendered so we don't need to do any scrolling.
			if (item && scroller) {
				var itemLeftPosition = jQuery(item).offset().left + jQuery(item).width();
				var totalWidth = jQuery(scroller).width();
				if (itemLeftPosition - jQuery(item).width() < 0) {
					//the thumbnail is too much to the left (thumbnail not fully visible)
					isNecessary = true;
				} else	if ((totalWidth - itemLeftPosition) < jQuery(item).width()) {
					//the thumbnail is too much to the right
					isNecessary = true;
				} else {
					//the thumbnail is visibile, no scrolling needed
					isNecessary = false;
				}
			} else {
				isNecessary = false;
			}
			return isNecessary;
		};

		/**
		 * It moves the scroller for the step thumbnails container
		 * so we can have the current step in sight.
		 * @param {object} item The item that we need to scroll to.
		 * @param {object} scrollableElement The thumbnail scroller from the step navigation.
		 * @private
		 */
		StepNavigation.prototype._scrollToItem = function (item, scrollableElement) {
			var properties = {},
				originalOffset = jQuery(item).offset(),
				containerScrollLeft = jQuery(scrollableElement).scrollLeft();

			properties.scrollLeft = originalOffset.left + (containerScrollLeft - jQuery(scrollableElement).offset().left);
			properties.scrollLeft -= parseInt(jQuery(item).css('marginLeft'), 10) || 0;
			properties.scrollLeft -= parseInt(jQuery(item).css('borderLeftWidth'), 10) || 0;
			//apply the scrolling effect
			jQuery(scrollableElement).animate(properties, 50);
		};

		/**
		 * Highlights a step - used to indicate that a step has recently played or is playing.
		 * @param {string} stepId The ID of the step that we want to highlight.
		 * @private
		 */
		StepNavigation.prototype._highlightStep = function(stepId) {
			var that = this;
			if (that.getVisible()) {
				var oSettings = that.getSettings();

				//Logic for connecting popup to step changed event
				var stepInfo = that.getStep(0, oSettings.currentProcedureIndex, stepId);
				if (!oSettings.currentProcedure) {
					oSettings.currentProcedure = that.oModel.oData.procedures[that.oSettings.currentProcedureIndex];
				}

				var oShowStepInfoButton = that.getShowStepInfoButton();

				//Placement refers to the Popup position in relation to the Step Description button .
				//It can be "Top" (default) or "Bottom" (in case there isn't enough room at the top.
				var placement;
				var stepDescriptionButton = document.getElementById(oShowStepInfoButton.getId());
				placement = that._getPopupPlacement(stepDescriptionButton);

				//oShowStepInfoButton.setText(title);
				if (that.getShowStepInfo()) {
					oSettings.stepInfo.openPopup.call(this, stepInfo.name, stepInfo.description, oShowStepInfoButton, placement);
				} else if (oSettings.stepInfo.stepMessagePopup && oSettings.stepInfo.stepMessagePopup.isOpen()) {
					oSettings.stepInfo.stepMessagePopup.close();
				}

				//Highlight the selected thumbnail
				if (that.getShowThumbnails()) {
					var oScroller = that.getScroller();
					var oThumbnailItems = oScroller.getContent()[0].getItems();
					for (var i = 0; i < oThumbnailItems.length; i++) {
						if (oThumbnailItems[i].getCustomData()[0].getValue("stepId") == stepId) {
							oThumbnailItems[i].addStyleClass("selected");
							if (that._isScrollingNecessary(oThumbnailItems[i].$()[0], jQuery('#' + oScroller.sId)[0])) {
								that._scrollToItem(oThumbnailItems[i].$()[0], jQuery('#' + oScroller.sId)[0]);
							}
						} else {
							oThumbnailItems[i].removeStyleClass("selected");
						}
					}
				}
			}
		};

		/**
		 * Returns the procedures list with steps for the current scene, and appends base64 data as thumbnailData and an
		 * image type as thumbnailType.
		 *
		 * @return {JSON} <this> For example:
		 * <code>{sceneId : string, hasThumbnails : boolean, "procedures" : [id:string, name: string, steps: [{id: string, name: string, thumnailData: string, thumbnailType: string}], "portfolios": [] }</code>
		 * @public
		 */
		StepNavigation.prototype.getProceduresAndSteps = function() {
			return this._getStepThumbnails();
		};

		/**
		 * Obtains the procedures and portfolios list for the current scene and appends base64 data as thumbnailData and an
		 * image type as thumbnailType.
		 *
		 * @return {JSON} procs
		 * @private
		 */
		StepNavigation.prototype._getStepThumbnails = function() {
			var that = this;
			var procs = that._retrieveProcedures();
			if (procs.sceneId != null) {
				var thumbDataRaw;
				var ending;
				var imgType;
				var step;
				var prefix;

				//Get thumbnails for procedures
				for (var prockey in procs.procedures) {
					var oProc = procs.procedures[prockey];
					for (var stepKey in oProc.steps) {
						step = oProc.steps[stepKey];
						thumbDataRaw = that.oDvl.Scene.RetrieveThumbnail(procs.sceneId, step.id);
						ending = thumbDataRaw.substring(thumbDataRaw.length - 2);

						//Check the prefix to detect whether this is a PNG or something else 
						prefix = thumbDataRaw.substring(0, 3);
						if (prefix == "iVB") {
							imgType = "png";
						} else if (prefix != "eff" && prefix != "err") { //eff is the jDVL prefix for an error code returned by the core - not valid base64
							imgType = "jpg";
						} else if (prefix == "eff" || prefix == "err") {
							// Error retrieving
							imgType = null;
							thumbDataRaw = null;
						}

						//Check the ending for padding and trim if found
						if (/,$/.test(ending) || /,,$/.test(ending)) {
							thumbDataRaw = thumbDataRaw.substring(0, thumbDataRaw.length - 4);
							ending = thumbDataRaw.substring(thumbDataRaw.length - 2);
						}

						procs.procedures[prockey].steps[stepKey].thumbnailData = thumbDataRaw;
						procs.procedures[prockey].steps[stepKey].thumbnailType = imgType;
					}
				}

				//Get thumbnails for portfolios
				for (var portkey in procs.portfolios) {
					var oPort = procs.portfolios[portkey];
					for (var portStepKey in oPort.steps) {
						step = oPort.steps[portStepKey];
						thumbDataRaw = that.oDvl.Scene.RetrieveThumbnail(procs.sceneId, step.id);
						ending = thumbDataRaw.substring(thumbDataRaw.length - 2);

						//Check the prefix to detect whether this is a PNG or something else
						prefix = thumbDataRaw.substring(0, 3);
						if (prefix == "iVB") {
							imgType = "png";
						} else if (prefix != "eff") { //eff is the jDVL prefix for an error code returned by the core - not valid base64
							imgType = "jpg";
						} else if (prefix == "eff") {
							// Error retrieving
							imgType = null;
						}

						procs.portfolios[portkey].steps[portStepKey].thumbnailData = thumbDataRaw;
						procs.portfolios[portkey].steps[portStepKey].thumbnailType = imgType;
					}
				}
				procs.hasThumbnails = true;
			}
			that._procedures = procs;
			return procs;
		};

		/**
		 * Returns or retrieves the list of procedures and portfolios for the current scene.
		 *
		 * @param {string} sceneId ID of the scene from which to retrieve procedures and portfolios.
		 * @return {JSON} procs
		 * @private
		 */
		StepNavigation.prototype._retrieveProcedures = function(sceneId) {
			var that = this;
			var procs = {};
			if (!that._procedures) {
				procs = {
					sceneId: null,
					hasThumbnails: false,
					"procedures": [],
					"portfolios": []
				};
			} else {
				procs = that._procedures;
			}

			if (that._scene && (procs.sceneId != (sceneId || that._scene._dvlSceneId))) {
				var s = sceneId || that._scene._dvlSceneId;
				if (s != null) {
					var ps = that.oDvl.Scene.RetrieveProcedures(s);
					if (ps != null) {
						procs.hasThumbnails = false;
						procs.sceneId = that._scene._dvlSceneId;
						procs.procedures = ps.procedures;
						procs.portfolios = ps.portfolios;
					} else {
						procs = {
							sceneId: null,
							hasThumbnails: false,
							"procedures": [],
							"portfolios": []
						};
					}
				}
			}

			return procs;
		};

		/**
		 * Gets a step based on a positive or negative integer, which is used as an index relative to the index of the current step.
		 * An index value of <code>0</code> can be used to retrieve the details of the current step.
		 *
		 * @param {number}
		 *          relIndex Positive or negative integer representing the number to add or subtract from the index of the
		 *          current step to return the desired step; for example, //next 1, current 0, previous -1
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @param {string} specificStepId The ID of the step that we want to retrieve.
		 * @return {JSON} step
		 * @public
		 */
		StepNavigation.prototype.getStep = function(relIndex, procedureIndex, specificStepId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			var step = null;
			if (sc != null) {
				procedureIndex = procedureIndex != null ? procedureIndex : 0;
				var curs = specificStepId ? specificStepId : that.instanceSettings.currentStepId;
				var p = that._retrieveProcedures(sc);
				var curProc = p.procedures[procedureIndex];

				// If current or next step requested with no current step requested then return first
				if (curProc && curProc.steps.length > 0) {
					step = curProc.steps[0];
				} else {
					//If curProc is false, we the function returns null; it means there are no steps.
					//If we don't do this, curProc.steps will throw an exception
					return null;
				}

				if (curs != "") {
					// Look for the current step in the specified procedure return the requested relative step
					for (var si = 0; si < curProc.steps.length; si++) {
						var _s = curProc.steps[si];
						if (_s.id == curs) {
							var x = si + relIndex;
							if (x < curProc.steps.length && x >= 0) {
								step = curProc.steps[x];
							} else {
								step = null;
							}
							break;
						}
					}
				}
			}
			return step;
		};

		/**
		 * Pauses the step that is currently playing.
		 *
		 * @return {void}
		 * @public
		 */
		StepNavigation.prototype.pauseStep = function() {
			var that = this;
			var s = that.oDvl.Settings.LastLoadedSceneId;
			if (s != null) {
				that.oDvl.Scene.PauseCurrentStep(s);
			}
		};

		/**
		 * Gets the total number of steps for a specified procedure, or for all procedures.
		 *
		 * @param {string} [procedureId] An optional ID for a procedure for which to retrieve a count.
		 * If a value for <code>procedureId</code> is specified, then get a count of the steps for the specified procedure.
		 * Otherwise, get the total number of steps in all of the procedures for the Scene.
		 * @return {number} The number of steps for the specified procedure.
		 * @private
		 */
		StepNavigation.prototype._stepCount = function(procedureId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			var stepCount = 0;
			if (sc != null) {
				var p = that._retrieveProcedures(sc);
				for (var pi = 0; pi < p.procedures.length; pi++) {
					if (p.procedures[pi].id == procedureId) {
						stepCount = p.procedures[pi].steps.length;
						break;
					} else if (procedureId == null) {
						stepCount += p.procedures[pi].steps.length;
					}
				}
			}
			return stepCount;
		};

		/**
		 * Cycles through steps and procedures for the last loaded scene (<code>lastLoadedScene</code>), and returns the step preceding the current step (currentStepId.
		 *
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @return {JSON} The step preceding the current step.
		 * @public
		 */
		StepNavigation.prototype.getPreviousStep = function(procedureIndex) {
			var that = this;
			return that.getStep(-1, procedureIndex);
		};

		/**
		 * Cycles through steps and procedures for the lastLoadedScene and returns the step that follows after the currentStepId.
		 *
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @return {JSON} The step that follows after the current step.
		 * @public
		 */
		StepNavigation.prototype.getNextStep = function(procedureIndex) {
			var that = this;
			return that.getStep(1, procedureIndex);
		};

		/**
		 * Plays the specified procedure step.
		 *
		 * @param {string} stepId The ID of the procedure step to play.
		 * @param {boolean} fromTheBeginning Default: true If <code>true</code>, tells the Viewer to play the step from the first frame.
		 * @param {boolean} continueToTheNext Default: false If <code>true</code>, tells the Viewer to play the next step in sequence.
		 * @return {void}
		 * @public
		 */
		StepNavigation.prototype.playStep = function(stepId, fromTheBeginning, continueToTheNext) {
			var that = this;
			var s = that.oDvl.Settings.LastLoadedSceneId;
			if (s != null) {
				that.instanceSettings.currentStepId = stepId;

				// call ActivateStep(sceneId, dvlid, fromTheBeginning, continueToTheNext)
				that.oDvl.Scene.ActivateStep(s, stepId, fromTheBeginning != null ? fromTheBeginning : true,
					continueToTheNext != null ? continueToTheNext : false);
			}
		};

		/**
		 * Plays all the steps in the specified procedure.
		 *
		 * @param {string} [procedureId] The ID of the procedure for which to play all steps. If <code>procedureId == null</code>, then only the first step is played.
		 * @return {void}
		 * @public
		 */
		StepNavigation.prototype.playAllSteps = function(procedureId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			if (sc != null) {
				var ps = that._retrieveProcedures(sc);
				var procedureIndex = 0;
				if (procedureId != null && ps.procedures.length > 1) {
					for (var ip = 0; ip < ps.procedures.length; ip++) {
						if (ps.procedures[ip].id == procedureId) {
							procedureIndex = ip;
							break;
						}
					}
				}

				if (ps.procedures.length > 0) {
					var s = ps.procedures[procedureIndex].steps[0];
					if (s) {
						that.instanceSettings.currentStepId = s.id;
						that.oDvl.Scene.ActivateStep(sc, s.id, true, true);
					}
				}
			}
		};


		return StepNavigation;

	});

}; // end of sap/ui/vk/StepNavigation.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.Toolbar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Toolbar",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/model/json/JSONModel"
], function(jQuery, library, Control, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new Toolbar.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Provides buttons to hide or show certain sap.ui.vk controls.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.38.15
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Toolbar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Toolbar = Control.extend("sap.ui.vk.Toolbar", /** @lends sap.ui.vk.Toolbar.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Used to set the title of the Toolbar
				 * @private
				 */
				title: {
					type: "string",
					group: "Appearance",
					defaultValue: ""
				}
			},
			events: {},
			associations: {
				/**
				 * A toolbar instance is associated with an instance of the Viewer
				 *
				 * @private
				 */
				viewer: {
					type: "sap.ui.vk.Viewer",
					cardinality: "0..1"
				}
			},
			aggregations: {
				_toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				},
				_helpButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				_stepNavigationButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_sceneTreeButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_enterFullScreenButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_exitFullScreenButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				_toolbarTitle: {
					type: "sap.m.Title",
					multiple: false,
					visibility: "hidden"
				}
			}
		}
	});

	/*
	 * It checks if the user is using iOS.
	 * The reason for this is that sometimes we need to turn off the full screen buttons
	 * because Safari iOS doesn't support the Full Screen API (see caniuse.com for support)
	 */
	Toolbar.prototype._isUsingIOS = function() {
		return (sap.ui.Device.system.tablet || sap.ui.Device.system.phone) && sap.ui.Device.os.ios;
	};

	/*
	 * Toggles the step navigation control visibility and updates its button
	 */
	Toolbar.prototype._onSceneTree = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			this.oViewer._componentsState.sceneTree.userInteractionShow = this._sceneTreeButton.getPressed();
			this.oViewer.setShowSceneTree(this.oViewer._componentsState.sceneTree.userInteractionShow);
		}
	};

	Toolbar.prototype._onStepNavigation = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			this.oViewer._componentsState.stepNavigation.userInteractionShow = this._stepNavigationButton.getPressed();
			this.oViewer.setShowStepNavigation(this.oViewer._componentsState.stepNavigation.userInteractionShow);
		}
	};

	Toolbar.prototype._onFullScreen = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			var newStateFullScreenButton = this._enterFullScreenButton.getPressed();
			this.oViewer.setEnableFullScreen(newStateFullScreenButton);
		}
	};

	Toolbar.prototype._fullScreenHandler = function(event) {
		var bFull = event.mParameters.isFullScreen;
		this._enterFullScreenButton.setPressed(bFull);

		if (bFull) {
			this._enterFullScreenButton.setIcon("sap-icon://exit-full-screen");
		} else {
			this._enterFullScreenButton.setIcon("sap-icon://full-screen");
		}
	};

	Toolbar.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}
		var _toolbarSpacer = new sap.m.ToolbarSpacer();

		var _helpButton = new sap.m.Button({
			icon: "sap-icon://sys-help",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_HELPBUTTONTOOLTIP")
		});
		this.setAggregation("_helpButton", _helpButton);

		this._stepNavigationButton = new sap.m.ToggleButton({
			icon: "sap-icon://step",
			type: sap.m.ButtonType.Transparent,
			enabled: false,
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_MENUBUTTONTOOLTIP"),
			press: this._onStepNavigation.bind(this)
		});
		this.setAggregation("_stepNavigationButton", this._stepNavigationButton);

		this._sceneTreeButton = new sap.m.ToggleButton({
			icon: "sap-icon://tree",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_MENUBUTTONTOOLTIP"),
			press: this._onSceneTree.bind(this)
		});
		this.setAggregation("_sceneTreeButton", this._sceneTreeButton);

		// If the user is using iOS, HTML5 Full Screen API is not supported,
		// so we are not creating and adding the Enter Full Screen and Exit Full Screen buttons
		// into the Viewer Toolbar.
		var toolbarContent;
		this._toolbarTitle = new sap.m.Title();
		if (!this._isUsingIOS()) {
			this._enterFullScreenButton = new sap.m.ToggleButton({
				icon: "sap-icon://full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_FULLSCREENBUTTONTOOLTIP"),
				press: this._onFullScreen.bind(this)
			});
			this.setAggregation("_enterFullScreenButton", this._enterFullScreenButton);

			var _exitFullScreenButton = new sap.m.Button({
				icon: "sap-icon://exit-full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_FULLSCREENBUTTONTOOLTIP")
			});
			this.setAggregation("_exitFullScreenButton", _exitFullScreenButton);
			toolbarContent = [
				this._toolbarTitle,
				_toolbarSpacer,
				new sap.m.ToolbarSeparator(),
				this._sceneTreeButton,
				new sap.m.ToolbarSeparator(),
				this._stepNavigationButton,
				new sap.m.ToolbarSeparator(),
				this._enterFullScreenButton
			];
		} else {
			toolbarContent = [
				this._toolbarTitle,
				_toolbarSpacer,
				new sap.m.ToolbarSeparator(),
				this._sceneTreeButton,
				new sap.m.ToolbarSeparator(),
				this._stepNavigationButton
			];
		}

		this.setAggregation("_toolbarTitle", this._toolbarTitle);

		this._toolbar = new sap.m.Toolbar({
			design: sap.m.ToolbarDesign.Solid,
			content: toolbarContent
		});

		this.setAggregation("_toolbar", this._toolbar, true);
	};

	Toolbar.prototype.exit = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer) {
			this.oViewer.detachFullScreen(this._fullScreenHandler.bind(this));
		}
	};

	Toolbar.prototype.onBeforeRendering = function() {
		this._toolbar.setVisible(true);
		this._toolbarTitle.setText(this.getTitle());
	};

	Toolbar.prototype.refresh = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		this._stepNavigationButton.setPressed(this.oViewer.getShowStepNavigation());
		this._stepNavigationButton.setEnabled(this.oViewer.getEnableStepNavigation());
		this._sceneTreeButton.setPressed(this.oViewer.getShowSceneTree());
		this._sceneTreeButton.setEnabled(this.oViewer.getEnableSceneTree());

		this.oViewer.attachFullScreen(this._fullScreenHandler.bind(this));
		return true;
	};

	Toolbar.prototype.onAfterRendering = function() {
		this.refresh();
	};

	return Toolbar;

}, /* bExport= */ true);

}; // end of sap/ui/vk/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewStateManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the ViewStateManager class.
jQuery.sap.declare('sap.ui.vk.ViewStateManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewStateManager",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	var NodeSet;
	var log = jQuery.sap.log;

	// NB: Implementation details:
	// ViewStateManager should have its own set of visible and selected nodes.
	// At the moment only one viewport per scene is supported and hence we can delegate
	// visibility and selection handling to the scene.

	/**
	 * Constructor for a new ViewStateManager.
	 *
	 * @class
	 * Manages the visibility and selection states of nodes in the scene.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created with the {@link sap.ui.vk.GraphicsCore#createViewStateManager sap.ui.vk.GraphicsCore.createViewStateManager} method,
	 * and destroyed with the {@link sap.ui.vk.GraphicsCore#destroyViewStateManager sap.ui.vk.GraphicsCore.destroyViewStateManager} method.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ViewStateManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewStateManager = ManagedObject.extend("sap.ui.vk.ViewStateManager", /** @lends sap.ui.vk.ViewStateManager.prototype */ {
		metadata: {
			publicMethods: [
				"enumerateSelection",
				"getNodeHierarchy",
				"getSelectionState",
				"getVisibilityState",
				"setSelectionState",
				"setVisibilityState"
			],

			events: {
				/**
				 * This event is fired when the visibility of the node changes.
				 */
				visibilityChanged: {
					parameters: {
						/**
						 * IDs of newly shown nodes.
						 */
						visible: {
							type: "string[]"
						},
						/**
						 * IDs of newly hidden nodes.
						 */
						hidden: {
							type: "string[]"
						}
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * IDs of newly selected nodes.
						 */
						selected: {
							type: "string[]"
						},
						/**
						 * IDs of newly unselected nodes.
						 */
						unselected: {
							type: "string[]"
						}
					},
					enableEventBubbling: true
				}
			}
		},
		constructor: function(nodeHierarchy) {
			log.debug("sap.ui.vk.ViewStateManager.constructor() called.");

			ManagedObject.apply(this);

			var scene = nodeHierarchy.getScene();
			this._nodeHierarchy = nodeHierarchy;
			this._dvlSceneId = scene._getDvlSceneId();
			this._dvl = scene.getGraphicsCore()._getDvl();
			this._dvlClientId = scene.getGraphicsCore()._getDvlClientId();
			this._dvl.Client.attachNodeVisibilityChanged(this._handleNodeVisibilityChanged, this);
			this._dvl.Client.attachNodeSelectionChanged(this._handleNodeSelectionChanged, this);
			this._selectedNodes = new NodeSet();
			this._newlyVisibleNodes = [];
			this._newlyHiddenNodes = [];
			this._visibilityTimerId = null;
			this._selectionTimerId = null;
		}
	});

	ViewStateManager.prototype.destroy = function() {
		log.debug("sap.ui.vk.ViewStateManager.destroy() called.");

		if (this._selectionTimerId) {
			jQuery.sap.clearDelayedCall(this._selectionTimerId);
			this._selectionTimerId = null;
		}
		if (this._visibilityTimerId) {
			jQuery.sap.clearDelayedCall(this._visibilityTimerId);
			this._visibilityTimerId = null;
		}
		this._newlyHiddenNodes = null;
		this._newlyVisibleNodes = null;
		this._selectedNodes = null;
		if (this._dvl) {
			this._dvl.Client.detachNodeSelectionChanged(this._handleNodeSelectionChanged, this);
			this._dvl.Client.detachNodeVisibilityChanged(this._handleNodeVisibilityChanged, this);
		}
		this._dvlClientId = null;
		this._dvlSceneId = null;
		this._dvl = null;
		this._scene = null;

		ManagedObject.prototype.destroy.apply(this);
	};

	/**
	 * Gets the NodeHierarchy object associated with this ViewStateManager object.
	 * @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManager object.
	 * @public
	 */
	ViewStateManager.prototype.getNodeHierarchy = function() {
		return this._nodeHierarchy;
	};

	/**
	 * Gets the visibility state of nodes.
	 *
	 * If a single node ID is passed to the method then a single visibility state is returned.<br/>
	 * If an array of node IDs is passed to the method then an array of visibility states is returned.
	 *
	 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
	 * @return {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getVisibilityState = function(nodeIds) {
		if (Array.isArray(nodeIds)) {
			return nodeIds.map(function(nodeId) {
				return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
			}.bind(this));
		} else {
			var nodeId = nodeIds; // The nodeIds argument is a single nodeId.
			return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
		}
	};

	/**
	 * Sets the visibility state of the nodes.
	 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
	 * @param {boolean} visible The new visibility state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @return {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setVisibilityState = function(nodeIds, visible, recursive) {
		if (!Array.isArray(nodeIds)) {
			nodeIds = [nodeIds];
		}

		var changed = jQuery.sap.unique((recursive ? this._collectNodesRecursively(nodeIds) : nodeIds)).filter(function(nodeId) {
			var isCurrentlyVisible = (sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
			return isCurrentlyVisible !== visible;
		}.bind(this));

		if (changed.length > 0) {
			changed.forEach(function(nodeId) {
				this._dvl.Scene.ChangeNodeFlags(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE,
					visible ? sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_SET : sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_CLEAR);
			}.bind(this));

			this.fireVisibilityChanged({
				visible: visible ? changed : [],
				hidden: visible ? [] : changed
			});
		}

		return this;
	};

	ViewStateManager.prototype._handleNodeVisibilityChanged = function(parameters) {
		if (parameters.clientId === this._dvlClientId && parameters.sceneId === this._dvlSceneId) {
			this[parameters.visible ? "_newlyVisibleNodes" : "_newlyHiddenNodes"].push(parameters.nodeId);
			if (!this._visibilityTimerId) {
				this._visibilityTimerId = jQuery.sap.delayedCall(0, this, function() {
					this._visibilityTimerId = null;
					this.fireVisibilityChanged({
						visible: this._newlyVisibleNodes.splice(0, this._newlyVisibleNodes.length),
						hidden: this._newlyHiddenNodes.splice(0, this._newlyHiddenNodes.length)
					});
				}.bind(this));
			}
		}
	};

	/**
	 * Enumerates IDs of the selected nodes.
	 *
	 * @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.enumerateSelection = function(callback) {
		this._selectedNodes.forEach(callback);
		return this;
	};

	/**
	 * Gets the selection state of the node.
	 *
	 * If a single node ID is passed to the method then a single selection state is returned.<br/>
	 * If an array of node IDs is passed to the method then an array of selection states is returned.
	 *
	 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
	 * @return {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getSelectionState = function(nodeIds) {
		if (Array.isArray(nodeIds)) {
			return nodeIds.map(function(nodeId) {
				return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
			}.bind(this));
		} else {
			var nodeId = nodeIds; // The nodeIds argument is a single nodeId.
			return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
		}
	};

	/**
	 * Sets the selection state of the nodes.
	 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
	 * @param {boolean} selected The new selection state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @return {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setSelectionState = function(nodeIds, selected, recursive) {
		if (!Array.isArray(nodeIds)) {
			nodeIds = [nodeIds];
		}

		var changed = jQuery.sap.unique((recursive ? this._collectNodesRecursively(nodeIds) : nodeIds)).filter(function(nodeId) {
			var isCurrentlySelected = (sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
			return isCurrentlySelected !== selected;
		}.bind(this));

		if (changed.length > 0) {
			var change = this._selectedNodes[selected ? "add" : "delete"].bind(this._selectedNodes);
			changed.forEach(function(nodeId) {
				this._dvl.Scene.ChangeNodeFlags(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED,
					selected ? sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_SET : sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_CLEAR);
				change(nodeId);
			}.bind(this));

			this.fireSelectionChanged({
				selected: selected ? changed : [],
				unselected: selected ? [] : changed
			});
		}

		return this;
	};

	ViewStateManager.prototype._handleNodeSelectionChanged = function(parameters) {
		if (parameters.clientId === this._dvlClientId && parameters.sceneId === this._dvlSceneId) {
			if (!this._selectionTimerId) {
				this._selectionTimerId = jQuery.sap.delayedCall(0, this, function() {
					this._selectionTimerId = null;
					var currentlySelectedNodes = new NodeSet(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_SELECTED).SelectedNodes);
					var newlyUnselectedNodes = [];
					this._selectedNodes.forEach(function(nodeId) {
						if (!currentlySelectedNodes.has(nodeId)) {
							newlyUnselectedNodes.push(nodeId);
						}
					});
					var newlySelectedNodes = [];
					currentlySelectedNodes.forEach(function(nodeId) {
						if (!this._selectedNodes.has(nodeId)) {
							newlySelectedNodes.push(nodeId);
						}
					}.bind(this));

					this._selectedNodes = currentlySelectedNodes;

					this.fireSelectionChanged({
						selected: newlySelectedNodes,
						unselected: newlyUnselectedNodes
					});
				});
			}
		}
	};

	ViewStateManager.prototype._collectNodesRecursively = function(nodeIds) {
		var result = [];
		var collectChildNodes = function(node) {
			var nodeId = typeof node === "string" ? node : node.getNodeId();
			result.push(nodeId);
			if ((sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
				this._nodeHierarchy.enumerateChildren(nodeId, collectChildNodes);
			}
		}.bind(this);
		nodeIds.forEach(collectChildNodes);
		return result;
	};

	NodeSet = function(array) {
		array = array || [];
		if (this._builtin) {
			if (sap.ui.Device.browser.msie) {
				this._set = new Set();
				array.forEach(this._set.add.bind(this._set));
			} else {
				this._set = new Set(array);
			}
		} else {
			this._set = array.slice();
		}
	};

	NodeSet.prototype = {
		constructor: NodeSet,

		_builtin: !!Set,

		add: function(value) {
			if (this._builtin) {
				this._set.add(value);
			} else if (this._set.indexOf() < 0) {
				this._set.push(value);
			}
			return this;
		},

		delete: function(value) {
			if (this._builtin) {
				return this._set.delete(value);
			} else {
				var index = this._set.indexOf(value);
				if (index >= 0) {
					this.splice(index, 1);
					return true;
				} else {
					return false;
				}
			}
		},

		clear: function() {
			if (this._builtin) {
				this._set.clear();
			} else {
				this._set.splice(0, this._set.length);
			}
		},

		has: function(value) {
			if (this._builtin) {
				return this._set.has(value);
			} else {
				return this._set.indexOf(value) >= 0;
			}
		},

		forEach: function(callback, thisArg) {
			this._set.forEach(callback, thisArg);
		}
	};

	return ViewStateManager;
});

}; // end of sap/ui/vk/ViewStateManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeHierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeHierarchy class.
jQuery.sap.declare('sap.ui.vk.NodeHierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ObjectPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeHierarchy",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "sap/ui/base/ObjectPool", "./BaseNodeProxy", "./NodeProxy", "./LayerProxy", "./Messages"
], function(jQuery, library, EventProvider, ObjectPool, BaseNodeProxy, NodeProxy, LayerProxy, Messages) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new NodeHierarchy.
	 *
	 * @class
	 * Provides the ability to explore a Scene object's node structure.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
	 *
	 * @param {sap.ui.vk.Scene} scene The Scene object the node hierarchy belongs to.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.NodeHierarchy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeHierarchy = EventProvider.extend("sap.ui.vk.NodeHierarchy", /** @lends sap.ui.vk.NodeHierarchy.prototype */ {
		metadata: {
			publicMethods: [
				"createNodeProxy",
				"destroyNodeProxy",
				"enumerateAncestors",
				"enumerateChildren",
				"getGraphicsCore",
				"getScene",
				"getChildren",
				"getAncestors"
			]
		},

		_baseNodeProxyPool: new ObjectPool(BaseNodeProxy),

		constructor: function(scene) {
			this._messages = new Messages();
			EventProvider.apply(this);

			this._graphicsCore = scene.getGraphicsCore();
			this._scene = scene;
			this._dvlSceneId = this._scene._getDvlSceneId();
			this._dvl = this._graphicsCore._getDvl();
			this._nodeProxies = [];
			this._layerProxies = [];

			//This is a dictionary that we use to convert query values
			//from strings to actual numbers that are passed to DVL when finding nodes.
			//The DVL method FindNodes requires integer values as parameters so it's better
			//to avoid passing "0" or "1" as arguments. Instead we can make conversions such as
			//string "equals" to the DvlEnum "sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL"
			//which is an integer.
			this._searchDictionary = {
				modeDictionary: {
					equals: function(isCaseSensitive) {
						return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL_CASE_INSENSITIVE;
					},
					contains: function(isCaseSensitive) {
						return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_SUBSTRING : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_SUBSTRING_CASE_INSENSITIVE;
					},
					startsWith: function(isCaseSensitive) {
						return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_STARTS_WITH : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_STARTS_WITH_CASE_INSENSITIVE;
					}
				}
			};
		}
	});

	NodeHierarchy.prototype.destroy = function() {
		this._layerProxies.slice().forEach(this.destroyLayerProxy, this);
		this._nodeProxies.slice().forEach(this.destroyNodeProxy, this);
		this._dvl = null;
		this._dvlSceneId = null;
		this._scene = null;
		this._graphicsCore = null;
		this._searchDictionary = null;

		EventProvider.prototype.destroy.apply(this);
	};

	/**
	 * Gets the GraphicsCore object this Scene object belongs to.
	 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object this Scene object belongs to.
	 * @public
	 */
	NodeHierarchy.prototype.getGraphicsCore = function() {
		return this._graphicsCore;
	};

	/**
	 * Gets the Scene object the node hierarchy belongs to.
	 * @returns {sap.ui.vk.Scene} The Scene object the node hierarchy belongs to.
	 * @public
	 */
	NodeHierarchy.prototype.getScene = function() {
		return this._scene;
	};

	/**
	 * Gets the DVL scene ID.
	 * @returns {string} The DVL scene ID.
	 * @private
	 */
	NodeHierarchy.prototype._getDvlSceneId = function() {
		return this._dvlSceneId;
	};

	/**
	 * Enumerates the child nodes of a particular node in the Scene object.
	 *
	 * This method gets the child nodes of a particular node, and then calls the <code>callback</code> function to which it passes the child nodes to one by one.<br/>
	 * The <code>BaseNodeProxy</code> objects passed to the <code>callback</code> fuction are temporary objects, which are reset after each call to the <code>callback</code> function.<br/>
	 *
	 * @param {string} [nodeId] The ID of a node whose child nodes we want enumerated.<br/>
	 * When <code>nodeId</code> is specified, the child nodes of this node are enumerated.<br/>
	 * When no <code>nodeId</code> is specified, only the top level nodes are enumerated.<br/>

	 * @param {function} callback A function to call when the child nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeId</code> parameter is <code>true</code>.

	 * @param {boolean} [stepIntoClosedNodes=false] Indicates whether to enumerate the child nodes if the node is <i>closed</i>. <br/>
	 * If <code>true</code>, the children of that closed node will be enumerated <br/>
	 * If <code>false</code>, the children of that node will not be enumerated<br/>

	 * @param {boolean} [passNodeId=false] Indicates whether to pass the node IDs of the child nodes, or the whole node proxy to the <code>callback</code> function. <br/>
	 * If <code>true</code>, then only the node IDs of the child nodes are passed to the <code>callback</code> function. <br/>
	 * If <code>false</code>, then the node proxies created from the child node IDs are passed to the <code>callback</code> function.

	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.enumerateChildren = function(nodeId, callback, stepIntoClosedNodes, passNodeId) {
		if (typeof nodeId === "function") {
			// The 'nodeId' parameter is omitted, let's shift the parameters to right.
			passNodeId = stepIntoClosedNodes;
			stepIntoClosedNodes = callback;
			callback = nodeId;
			nodeId = undefined;
		}

		// NB: At the moment DVL scenes support only one hierarchy, so we just enumerate top level nodes of the scene if nodeId is omitted.
		var nodeIds;
		if (nodeId) {
			// Child nodes of the node.
			if (stepIntoClosedNodes || (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
				nodeIds = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN)).ChildNodes;
			} else {
				// Do not step into closed nodes.
				nodeIds = [];
			}
		} else {
			// Top level nodes.
			nodeIds = getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN)).ChildNodes;
		}
		if (passNodeId) {
			nodeIds.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeIds.forEach(function(nodeId) {
					nodeProxy.init(this, nodeId);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	* Enumerates the ancestor nodes of a particular node in the Scene object.
	*
	* This method enumerates the ancestor nodes of a particular node, and then calls the <code>callback</code> function, to which it passes the ancestor nodes to one by one.<br/>
	* The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, they are reset after each call to the <code>callback</code> function.<br/>
	* The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
	*
	* @param {string} nodeId The ID of a node whose ancestore nodes we want enumerated.

	* @param {function} callback A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeId</code> parameter is <code>true</code>.

	* @param {boolean} [passNodeId=false] Indicates whether to pass the node IDs of the ancestore nodes, or the whole node proxy to the <code>callback</code> function.<br/>
	If <code>true</code>, then only the node IDs of the ancestor nodes are passed to the <code>callback</code> function. <br/>
	If <code>false</code>, then the node proxies of the ancestor nodes are passed to the <code>callback</code> function.

	* @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	* @public
	*
	*/
	NodeHierarchy.prototype.enumerateAncestors = function(nodeId, callback, passNodeId) {
		var nodeIds = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_PARENTS)).ParentNodes;

		if (passNodeId) {
			nodeIds.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeIds.forEach(function(nodeId) {
					nodeProxy.init(this, nodeId);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	 * Creates a node proxy object.
	 *
	 * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
	 *
	 * @param {string} nodeId The node ID for which to create a proxy object.
	 * @returns {sap.ui.vk.NodeProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createNodeProxy = function(nodeId) {
		var nodeProxy = new NodeProxy(this, nodeId);
		this._nodeProxies.push(nodeProxy);
		return nodeProxy;
	};

	/**
	 * Destroys the node proxy object.
	 *
	 * @param {sap.ui.vk.NodeProxy} nodeProxy The node proxy object.
	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyNodeProxy = function(nodeProxy) {
		var index = this._nodeProxies.indexOf(nodeProxy);
		if (index >= 0) {
			this._nodeProxies.splice(index, 1)[0].destroy();
		}
		return this;
	};

	/**
	* Returns a list of IDs belonging to the children of a particular node.
	*
	* @param {string} nodeId The node ID of the node whose children will be returned. If <code>nodeId</code> is not passed to the <code>getChildren</code> function, the IDs of the root nodes will be returned.
	* @param {boolean} [stepIntoClosedNodes=false] Indicates whether to return only the child nodes of a <i>closed</i> node or not. If <code>true</code>, then the children of that closed node  will be returned. If <code>false</code>, then the children of that <i>closed</i> node will not be returned.
	* @returns {array} A list of IDs belonging to the children of <code>nodeId</code>.
	* @public
	*/
	NodeHierarchy.prototype.getChildren = function(nodeId, stepIntoClosedNodes) {
		//if nodeId is not passed, but stepIntoClosedNodes is passed as a boolean
		if (typeof nodeId === "boolean") {
			stepIntoClosedNodes = nodeId;
			nodeId = undefined;
		}

		if (nodeId) {
			// Child nodes of the node.
			if (stepIntoClosedNodes || (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
				return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN)).ChildNodes;
			} else {
				// Do not step into closed nodes.
				return [];
			}
		} else {
			// Top level nodes.
			return getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN)).ChildNodes;
		}
	};

	/**
	* Returns a list of IDs belonging to the ancestors of a particular node.
	*
	* @param {string} nodeId The node ID of the node whose ancestors will be returned.
	* @returns {array} A list of IDs belonging to the ancestors of <code>nodeId</code>.
	* @public
	*/
	NodeHierarchy.prototype.getAncestors = function(nodeId) {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_PARENTS)).ParentNodes;
	};

	/**
	 * Searches for VE IDs, and returns a list of IDs of nodes with VE IDs matching the search.
	 * The query is run specifically against VE ID structures, which are strictly related to VDS4 models.
	 *
	 * @param {object} query JSON object containing the search parameters. <br/>
	 * The following example shows what the structure of the <code>query</code> object should look like:
	 * <pre>query = {
	 * 	source: <i>string</i> (if not specified, the query returns an empty array), <br>
	 * 	type: <i>string</i> (if not specified, the query returns an empty array), <br>
	 * 	fields: <i>field[]</i>
	 * 	}</pre>
	 * 	<br/>
	 * 	<ul>
	 * 		<li>
	 * 			<b>field.name</b><br/> A string containing the name of the VE ID.
	 * 			If no value is specified, then the query will return an empty array.<br/>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.value</b><br/> A string representing the search keyword.
	 * 			If no value is specified, it defaults to empty string.<br/>
	 * 			The following example shows a string being passed in:
	 * 			<pre>value: "Box #14"</pre>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.predicate</b><br/> Represents a search mode.
	 * 			The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	 * 			Using <code>"equals"</code> will search for IDs with names that exactly match the provided string. <br/>
	 * 			Using <code>"contains"</code> will search for IDs with names containing the provided string. <br/>
	 * 			Using <code>"startsWith"</code> will search for IDs with names starting with the provided string. <br/>
	 * 			If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	 * 			If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	 * 			If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	 * 		</li>
	 * 	</ul>
	 * @returns {string[]} A list of IDs belonging to nodes that matched the VE IDs search criteria.
	 * @public
	 */
	NodeHierarchy.prototype.findNodesById = function(query) {

		//Checking if the query id values should be case sensitive or not.
		//If they are not case sensitive, we make them all lower-case.
		if (query.fields.some(function(field) { return !field.caseSensitive; })) {
			//we clone the query object that gets passed as parameter so we don't modify the original one.
			query = jQuery.extend(true, {}, query);
			//we change all the search values to lower-case.
			query.fields.forEach(function(field) {
				if (!field.caseSensitive) {
					field.value = field.value.toLowerCase();
				}
			});
		}

		//compareValuesByPredicate compares query value for an id with the value of a ve id from the node.
		//This function compares them using the predicate from the query (equals, contains, startsWith)
		var compareValuesByPredicate = function(predicate, isCaseSensitive, veFieldValueString, queryFieldValue) {
			var matchFound;
			//if the predicate is undefined, it will default to "equals"
			predicate = predicate || "equals";
			//if the query value is undefined, we make it an empty string
			queryFieldValue = queryFieldValue || "";

			var veFieldValue = isCaseSensitive ? veFieldValueString : veFieldValueString.toLowerCase();

			switch (predicate) {
				case "equals":
					matchFound = (veFieldValue === queryFieldValue);
					break;
				case "contains":
					matchFound = (veFieldValue.indexOf(queryFieldValue) !== -1);
					break;
				case "startsWith":
					matchFound = (veFieldValue.indexOf(queryFieldValue) === 0);
					break;
				default:
					matchFound = false;
					//if the predicate is not a supported one, we show a relevant error in the console
					jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT8.summary), this._messages.messages.VIT8.code, "sap.ui.vk.NodeHierarchy");
			}
			return matchFound;
		};
		//Queries can have multiple ids in the array so we use this function to search in array of ids
		//and see if the id is missing from that list or not.
		var isQueryIdObjectMissingFromArrayOfIds = function(listOfFields, queryFieldObject) {
			return !listOfFields.some(function(veFieldObject) {
				return queryFieldObject.name === veFieldObject.name ? compareValuesByPredicate(queryFieldObject.predicate, queryFieldObject.caseSensitive, veFieldObject.value, queryFieldObject.value) : false;
			});
		};

		//The filtering function takes the query and the collection of ve ids as parameters.
		//This function throws away all the nodes that are missing query ids from their list of ve ids.
		var filteringFunction = function(query, veIds) {
			//First we check if the query source and the query type are matching.
			//Then we check if all ids from the query are found in the list of ids that each node has.
			//If at least one id is missing, that we don't need to keep that node
			//because it doesn't match the query.
			return query.source === veIds.source && query.type === veIds.type && !query.fields.some(isQueryIdObjectMissingFromArrayOfIds.bind(undefined, veIds.fields));
		};

		//We retrieve a list of all node ids.
		var allNodeIds = this.findNodesByName();

		//We filter the list of node ids and we keep only what matches the query.
		var filteredNodeIds = allNodeIds.filter(function(nodeId) {
			//We create a node proxy based on each node id.
			var nodeProxy = this.createNodeProxy(nodeId);
			//We retrieve the ve ids from each node proxy.
			var veIds = nodeProxy.getVeIds();
			//we destroy the node proxy after using it.
			this.destroyNodeProxy(nodeProxy);
			//we filter then return the nodes that match the query.
			return veIds.some(filteringFunction.bind(undefined, query));
		}.bind(this));

		return filteredNodeIds;
	};

	/**
	* Finds nodes in a scene via node name.
	*
	* @param {object} query JSON object containing the search parameters. <br/>
	* The following example shows what the structure of the <code>query</code> object should look like:
	* <pre>query = {
	* 	value: <i>string</i> | <i>string[]</i>,
	* 	predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	* 	caseSensitive: <i>true</i> | <i>false</i>
	* }</pre>
	* <br/>
	* <ul>
	* 	<li>
	* 		<b>query.value</b><br/> A string or an array of strings containing the name of a node or names of nodes.
	* 		If no value is specified, then all nodes in the scene will be returned.<br/>
	* 		The following example shows a single string being passed in:
	* 		<pre>value: "Box #14"</pre>
	* 		The following example shows an array of strings being passed in:
	* 		<pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	* 	</li>
	* 	<li>
	* 		<b>query.predicate</b><br/> Represents a search mode.
	* 		The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	* 		Using <code>"equals"</code> will search for nodes with names that exactly match the provided string or array of strings. <br/>
	* 		Using <code>"contains"</code> will search for nodes with names containing all or part of the provided string or array of strings. <br/>
	* 		Using <code>"startsWith"</code> will search for nodes with names starting with the provided string or array of strings. <br/>
	* 		If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	* 		If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	* 		If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	* 	</li>
	* </ul>
	* @returns {string[]} A list of IDs belonging to nodes that matched the search criteria.
	* @public
	*/
	NodeHierarchy.prototype.findNodesByName = function(query) {

			//searchType is in this case by name
		var searchType = sap.ve.dvl.DVLFINDNODETYPE.DVLFINDNODETYPE_NODE_NAME,
			//allSearchResults is the array that the function returns
			allSearchResults = [],
			//search mode can be  "equals", "contains", "startsWith",
			//each of these modes having a caseSensitive true or false option
			searchMode,
			searchStringsArray;

		if (query === undefined || query === null || jQuery.isEmptyObject(query)) {
			//this condition caters for the case where the query is null, undefined or empty object
			//we search for nodes that contain an empty string ("");
			searchMode = this._searchDictionary.modeDictionary.contains(false);
			searchStringsArray = [""];
		} else {
			//query object validation
			if (query.value === undefined || query.value === null || query.value === "") {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT6.summary), this._messages.messages.VIT6.code, "sap.ui.vk.NodeHierarchy");
			}

			var predicate = query.hasOwnProperty("predicate") ? query.predicate : "equals";
			if (predicate === undefined || predicate === null || predicate === "") {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT7.summary), this._messages.messages.VIT7.code, "sap.ui.vk.NodeHierarchy");
			} else if (["equals", "contains", "startsWith"].indexOf(predicate) === -1) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT8.summary), this._messages.messages.VIT8.code, "sap.ui.vk.NodeHierarchy");
			}

			searchMode = this._searchDictionary.modeDictionary[predicate](query.caseSensitive);
			//If we search for a string, we create an array having one element, the string.
			//If we search for an array of strings, we leave the array as is.
			searchStringsArray = (typeof query.value === "string") ? [query.value] : query.value;
		}

		//We multiple calls to the DVL api; one call pe search string from array of search strings.
		for (var i = 0; i < searchStringsArray.length; i++) {
			allSearchResults = allSearchResults.concat(getJSONObject(this._dvl.Scene.FindNodes(this._dvlSceneId, searchType, searchMode, searchStringsArray[i])).nodes);
		}

		//We sort the array and remove all duplicate node ids
		return jQuery.sap.unique(allSearchResults);
	};

	/**
	* Finds nodes in a scene via metadata information.
	*
	* @param {object} query JSON object containing the search parameters. <br/>
	* The following example shows what the structure of the <code>query</code> object should look like:
	* 	<pre>query = {
	* 		category: <i>string</i>,
	* 		key: <i>string</i>,
	* 		value: <i>string</i> | <i>string[]</i>,
	* 		predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	* 		caseSensitive: <i>true</i> | <i>false</i>
	* 	}</pre>
	* 	<br>
	* 	<i>NOTE: <code>query.predicate</code> and <code>query.caseSensitive</code> refer to <code>query.value</code>.</i>
	* <br/>
	* <ul>
	* 	<li>
	* 		<b>query.category</b><br/>
	* 		A string indicating the name of the metadata category.<br/>
	* 		If no value is specified for <code>query.category</code>, all nodes in the scene will be returned in the search.<br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.key</b><br/>
	* 		A string indicating the key which belongs to the metadata category specified in <code>query.category</code>.
	* 		You can only use <code>query.key</code> if <code>query.category</code> has been specified.<br/>
	* 		If no value is specified for <code>query.key</code>, then all nodes grouped under the specified category will be returned in the search.<br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.value</b><br/>
	* 		A string or an array of strings containing the value or values associated with <code>query.key</code>.
	* 		You can only use <code>query.value</code> in the search if <code>query.key</code> has been specified.<br/>
	* 		If no value is specified for <code>query.value</code>, then all nodes containing the specified key will be returned, regardless of what the value of the key is.<br/>
	* 		The following example shows a single string being passed in:
	* 		<pre>value: "Box #14"</pre>
	* 		The following example shows an array of strings being passed in:
	* 		<pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	* 	</li>
	* 	<li>
	* 		<b>query.predicate</b><br/>
	* 		Represents a search mode.
	* 		The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	* 		Using <code>"equals"</code> will search for key values that exactly match the provided string or array of strings. <br/>
	* 		Using <code>"contains"</code> will search for key values containing all or part of the provided string or array of strings. <br/>
	* 		Using <code>"startsWith"</code> will search key values starting with the provided string or array of strings. <br/>
	* 		If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	* 		If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	* 		If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	* 	</li>
	* </ul>
	* @returns {string[]} A list of IDs belonging to nodes that matched the search criteria.
	* @public
	*/
	NodeHierarchy.prototype.findNodesByMetadata = function(query) {

		//checkMetadataByPredicate is used for filtering all nodes
		//so we can keep only the ones that match the query.
		var checkMetadataByPredicate = function(metadata, category, key, values, predicate, caseSensitive) {
			if (metadata.hasOwnProperty(category)) {
				var metadataCategory = metadata[category];
				if (metadataCategory.hasOwnProperty(key)) {
					var metadataValue = metadataCategory[key];
					if (!caseSensitive) {
						metadataValue = metadataValue.toLowerCase();
					}
					return values.some(predicate.bind(undefined, metadataValue));
				}
			}
			return false;
		};

		//checkMetadataByCategory looks inside the node to see
		//if it contains the category we are querying on.
		var checkMetadataByCategory = function(metadata, category) {
			return metadata.hasOwnProperty(category);
		};

		//getFilteredResults filters the entire list of nodes
		//and returns only what matches the query.
		var getFilteredResults = function(allNodeIds, filteringFunction, category, key, values, predicate, caseSensitive) {
			//We get all nodes, get metadata from each node and manually filter it against the query.
			//initialize empty baseNodeProxy
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			//filter the whole node collection so we can keep only the nodes that match the query
			var result = allNodeIds.filter(function(nodeId) {
				//get the node with the current id
				nodeProxy.init(this, nodeId);
				//extract metadata from node
				var metadata = nodeProxy.getNodeMetadata();
				//check if the metadata matches the query
				var keepThisNode = filteringFunction(metadata, category, key, values, predicate, caseSensitive);
				//clear the data from the base node proxy
				nodeProxy.reset();
				//filter the current node
				return keepThisNode;
			}.bind(this));
			this._baseNodeProxyPool.returnObject(nodeProxy);
			return result;
		};

		//Get all nodes as a start point.
		var allNodeIds = this.findNodesByName(),
			result = [];

		if (query === undefined || query === null || jQuery.isEmptyObject(query)) {
			//If the query object is empty, we return a list of all nodes.
			result = allNodeIds;
		} else if (query.category !== null && query.category !== undefined && query.category !== "") {
			var filteringFunction,
				values,
				predicateName,
				predicate,
				caseSensitive = !!(query && query.caseSensitive);
			//We determine what filtering type to use.
			//Filtering by category only as opposed to filtering by category and key-value pairs.
			if (query.key === undefined || query.key === null) {
				//If we specify the category, but not the key-value pairs,
				//we return all nodes that have that particular category.
				filteringFunction = checkMetadataByCategory;
			} else {
				//If the category and the key are specified, but the value is omitted,
				//it is expected that we return a list of all nodes containing that category
				//and that key, no matter what the value for the key is. That's why we set the
				//value to empty string and predicate to "contains".
				values = query.value;
				predicateName = query.predicate || "equals";
				if (values === undefined || values === null) {
					values = "";
					predicateName = "contains";
				}
				//If the category and the key-value pair are specified,
				//we return the nodes that match this criteria.
				if (!Array.isArray(values)) {
					values = [values];
				}
				if (!caseSensitive) {
					values = values.map(function(value) {
						return value.toLowerCase();
					});
				}
				switch (predicateName) {
					case "equals":
						predicate = function(metadataValue, queryValue) {
							return metadataValue === queryValue;
						};
						break;
					case "contains":
						predicate = function(metadataValue, queryValue) {
							return metadataValue.indexOf(queryValue) !== -1;
						};
						break;
					case "startsWith":
						predicate = function(metadataValue, queryValue) {
							return metadataValue.indexOf(queryValue) === 0;
						};
						break;
					default:
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT9.summary), this._messages.messages.VIT9.code, "sap.ui.vk.NodeHierarchy");
				}
				filteringFunction = checkMetadataByPredicate;
			}
			//After determining what filtering function we use,
			//we pass it as an argument to getFilteredResults.
			result = getFilteredResults.bind(this)(allNodeIds, filteringFunction, query.category, query.key, values, predicate, caseSensitive);
		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT10.summary), this._messages.messages.VIT10.code, "sap.ui.vk.NodeHierarchy");
		}
		return jQuery.sap.unique(result);
	};

	/**
	 * Creates a layer proxy object.
	 *
	 * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
	 *
	 * @param {string} layerId The layer ID for which to create a proxy object.
	 * @returns {sap.ui.vk.LayerProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createLayerProxy = function(layerId) {
		var layerProxy = new LayerProxy(this, layerId);
		this._layerProxies.push(layerProxy);
		return layerProxy;
	};

	/**
	 * Destroys the layer proxy object.
	 *
	 * @param {sap.ui.vk.LayerProxy} layerProxy The layer proxy object.
	 * @returns {sap.ui.vk.LayerHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyLayerProxy = function(layerProxy) {
		var index = this._layerProxies.indexOf(layerProxy);
		if (index >= 0) {
			this._layerProxies.splice(index, 1)[0].destroy();
		}
		return this;
	};

	/**
	* Returns a list of layer IDs.
	*
	* @returns {string[]} A list of layer IDs.
	* @public
	*/
	NodeHierarchy.prototype.getLayers = function() {
		return getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_LAYERS)).Layers;
	};

	return NodeHierarchy;
});

}; // end of sap/ui/vk/NodeHierarchy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Scene') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the Scene class.
jQuery.sap.declare('sap.ui.vk.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Scene",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "./NodeHierarchy"
], function(jQuery, library, EventProvider, NodeHierarchy) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * Constructor for a new Scene.
	 *
	 * @class Provides the interface for the 3D model.
	 *
	 * The objects of this class should not be created directly. They should be created via call to {@link sap.ui.vk.GraphicsCore#buildSceneTree sap.ui.vk.GraphicsCore.buildSceneTree}.
	 *
	 * @param {sap.ui.vk.GraphicsCore} graphicsCore The GraphicsCore object the scene belongs to.
	 * @param {string} dvlSceneId The identifier of the DVL scene object.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.Scene
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Scene = EventProvider.extend("sap.ui.vk.Scene", /** @lends sap.ui.vk.Scene.prototype */ {
		metadata: {
			publicMethods: [
				"getId",
				"getGraphicsCore",
				"getDefaultNodeHierarchy"
			]
		},
		constructor: function(graphicsCore, dvlSceneId) {
			log.debug("sap.ui.vk.Scene.constructor() called.");

			EventProvider.apply(this);

			this._id = jQuery.sap.uid();
			this._graphicsCore = graphicsCore;
			this._dvlSceneId = dvlSceneId;
			this._defaultNodeHierarchy = null;
		}

	});


	Scene.prototype.destroy = function() {
		log.debug("sap.ui.vk.Scene.destroy() called.");

		if (this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy.destroy();
			this._defaultNodeHierarchy = null;
		}
		this._dvlSceneId = null;
		this._graphicsCore = null;

		EventProvider.prototype.destroy.apply(this);
	};

	/**
	 * Gets the unique ID of the Scene object.
	 * @returns {string} The unique ID of the Scene object.
	 * @public
	 */
	Scene.prototype.getId = function() {
		return this._id;
	};

	/**
	 * Gets the GraphicsCore object this Scene object belongs to.
	 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object this Scene object belongs to.
	 * @public
	 */
	Scene.prototype.getGraphicsCore = function() {
		return this._graphicsCore;
	};

	/**
	 * Gets the default node hierarchy in the Scene object.
	 * @returns {sap.ui.vk.NodeHierarchy} The default node hierarchy in the Scene object.
	 * @public
	 */
	Scene.prototype.getDefaultNodeHierarchy = function() {
		if (!this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy = new NodeHierarchy(this);
		}
		return this._defaultNodeHierarchy;
	};

	/**
	 * Gets the DVL scene ID.
	 * @returns {string} The DVL scene ID.
	 * @private
	 */
	Scene.prototype._getDvlSceneId = function() {
		return this._dvlSceneId;
	};

	return Scene;
});

}; // end of sap/ui/vk/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
/* global File */
// Provides control sap.ui.vk.Viewer.
jQuery.sap.declare('sap.ui.vk.Viewer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewer",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./Scene", "./ContentResource", "sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData",
	"./FlexibleControl", "./FlexibleControlLayoutData", "sap/ui/core/ResizeHandler", "./DvlException", "./Messages", "./ProgressIndicator", "./Notifications"
], function(jQuery, library, Control, Scene, ContentResource, Splitter, SplitterLayoutData,
	FlexibleControl, FlexibleControlLayoutData, ResizeHandler, DvlException, Messages, ProgressIndicator, Notifications) {

	"use strict";

	var log = jQuery.sap.log;

	sap.ui.lazyRequire("sap.ui.vk.NativeViewport");
	sap.ui.lazyRequire("sap.ui.vk.Overlay");
	sap.ui.lazyRequire("sap.ui.vk.SceneTree");
	sap.ui.lazyRequire("sap.ui.vk.StepNavigation");
	sap.ui.lazyRequire("sap.ui.vk.Toolbar");
	sap.ui.lazyRequire("sap.ui.vk.Viewport");

	/**
	 * Constructor for a new Viewer. Besides the settings documented below, Viewer itself supports the following special settings:
	 * <ul>
	 *   <li>
	 *     <code>runtimeSettings</code>: <i><code>object</code></i> Optional Emscripten runtime module settings. A JSON object with the
	 *     following properties:
	 *     <ul>
	 *       <li><code>totalMemory</code>: <i><code>int</code></i> (default: 128 * 1024 * 1024) size of Emscripten module memory in bytes.</li>
	 *       <li><code>logElementId</code>: <i><code>string</code></i> ID of a textarea DOM element to write the log to.</li>
	 *       <li><code>statusElementId</code>: <i><code>string</code></i> ID of a DOM element to write the status messages to.</li>
	 *     </ul>
	 *   </li>
	 *   <li>
	 *     <code>webGLContextAttributes</code>: <i><code>object</code></i> Optional WebGL context attributes. A JSON object with the following
	 *     boolean properties:
	 *     <ul>
	 *       <li><code>antialias</code>: <i><code>boolean</code></i> (default: <code>true</code>) If set to <code>true</code>, the context
	 *         will attempt to perform antialiased rendering if possible.</li>
	 *       <li><code>alpha</code>: <i><code>boolean</code></i> (default: <code>true</code>) If set to <code>true</code>, the context will
	 *         have an alpha (transparency) channel.</li>
	 *       <li><code>premultipliedAlpha</code>: <i><code>boolean</code></i> (default: <code>false</code>) If set to <code>true</code>, the
	 *         color channels in the framebuffer will be stored premultiplied by the alpha channel to improve performance.</li>
	 *     </ul>
	 *     Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
	 *   </li>
	 * </ul>
	 *
	 * @class Provides simple 3D visualization capability by connecting, configuring and presenting the essential Visualization Toolkit controls a single composite control.
	 * @param {string} [sId] ID for the new Viewer control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new Viewer control
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Viewer
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewer = Control.extend("sap.ui.vk.Viewer", /** @lends sap.ui.vk.Viewer.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			properties: {
				/**
				 * Enables or disables the Overlay control
				 */
				enableOverlay: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Disables the scene tree control Button on the menu
				 */
				enableSceneTree: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides the scene tree control
				 */
				showSceneTree: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Disables the Step Navigation Control Button on the menu
				 */
				enableStepNavigation: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Disables the Message Popover Control
				 */
				enableNotifications: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides the Step Navigation Control
				 */
				showStepNavigation: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides the Step Navigation thumbnails
				 */
				showStepNavigationThumbnails: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides Toolbar control
				 */
				enableToolbar: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Enable / disable full screen mode
				 */
				enableFullScreen: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Enable / disable progress indicator for downloading and rendering VDS files
				 */
				enableProgressIndicator: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Width of the Viewer control
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Height of the Viewer control
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * The toolbar title
				 */
				toolbarTitle: {
					type: "string",
					defaultValue: ""
				}
			},

			publicMethods: [
				"getGraphicsCore",
				"getNativeViewport",
				"getScene",
				"getViewport",
				"getViewStateManager"
			],

			aggregations: {
				/**
				 * Content resources to load and display in the Viewer control.
				 */
				contentResources: {
					type: "sap.ui.vk.ContentResource"
				},

				overlay: {
					type: "sap.ui.vk.Overlay",
					multiple: false
				},

				toolbar: {
					type: "sap.ui.vk.Toolbar",
					multiple: false,
					visibility: "hidden"
				},

				progressIndicator: {
					type: "sap.ui.vk.ProgressIndicator",
					multiple: false,
					visibility: "hidden"
				},

				viewport: {
					type: "sap.ui.vk.Viewport",
					multiple: false,
					visibility: "hidden"
				},

				nativeViewport: {
					type: "sap.ui.vk.NativeViewport",
					multiple: false,
					visibility: "hidden"
				},

				stepNavigation: {
					type: "sap.ui.vk.StepNavigation",
					multiple: false,
					visibility: "hidden"
				},

				sceneTree: {
					type: "sap.ui.vk.SceneTree",
					multiple: false,
					visibility: "hidden"
				},

				layout: {
					type: "sap.ui.vk.FlexibleControl",
					multiple: false,
					visibility: "hidden"
				},

				viewStateManager: {
					type: "sap.ui.vk.ViewStateManager",
					multiple: false,
					visibility: "hidden"
				},
				messagePopover: {
					type: "sap.ui.vk.Notifications",
					multiple: false,
					visibility: "hidden"
				}
			},

			events: {
				/**
				 * This event will be fired when any content resource or the contentResources aggregation has been changed and processed.
				 */
				contentResourceChangesProcessed: {},

				/**
				 * This event will be fired when a scene / image has been loaded into the Viewer.
				 */
				sceneLoadingSucceeded: {
					parameters: {
						/**
						 * Returns a reference to the loaded Scene.
						 */
						scene: {
							type: "sap.ui.vk.Scene"
						}
					}
				},

				/**
				 * This event will be fired when a critical error occurs during scene / image loading.
				 */
				sceneLoadingFailed: {},

				/**
				 * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
				 */
				sceneDestroying: {
					parameters: {
						/**
						 * Returns a reference to the scene to be destroyed.
						 */
						scene: {
							type: "sap.ui.vk.Scene"
						}
					}
				},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * IDs of newly selected nodes.
						 */
						selected: {
							type: "string[]"
						},
						/**
						 * IDs of newly unselected nodes.
						 */
						unselected: {
							type: "string[]"
						}
					}
				},

				/**
				 * This event is fired when viewer enters/exits full screen mode.
				 */
				fullScreen: {
					parameters: {
						/**
						 * true: entered full screen; false: exited full screen.
						 */
						isFullScreen: {
							type: "boolean"
						}
					}
				}
			},

			specialSettings: {
				/**
				 * Optional Emscripten runtime module settings. A JSON object with the following properties:
				 * <ul>
				 * <li>totalMemory {int} size of Emscripten module memory in bytes, default value: 128 MB.</li>
				 * <li>logElementId {string} ID of a textarea DOM element to write the log to.</li>
				 * <li>statusElementId {string} ID of a DOM element to write the status messages to.</li>
				 * </ul>
				 * Emscripten runtime module settings cannot be changed after the control is fully initialized.
				 */
				runtimeSettings: {
					type: "object"
				},

				/**
				 * Optional WebGL context attributes. A JSON object with the following boolean properties:
				 * <ul>
				 * <li>antialias {boolean} default value <code>true</code>. If set to <code>true</code>, the context will attempt to perform
				 * antialiased rendering if possible.</li>
				 * <li>alpha {boolean} default value <code>true</code>. If set to <code>true</code>, the context will have an alpha
				 * (transparency) channel.</li>
				 * <li>premultipliedAlpha {boolean} default value <code>false</code>. If set to <code>true</code>, the color channels in the
				 * framebuffer will be stored premultiplied by the alpha channel to improve performance.</li>
				 * </ul>
				 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported. WebGL
				 * context attributes cannot be changed after the control is fully initialized.
				 */
				webGLContextAttributes: {
					type: "object"
				}
			}
		}
	});

	Viewer.prototype.applySettings = function(settings) {
		if (settings) {
			this._runtimeSettings = settings.runtimeSettings;
			this._webGLContextAttributes = settings.webGLContextAttributes;
			delete settings.runtimeSettings;
			delete settings.webGLContextAttributes;
		}
		Control.prototype.applySettings.apply(this, arguments);

		//_componentsState stores the default state of the scene tree and step navigation.
		//It also stores the last user interaction such as show/hide.
		//These settings are used to restore states after switching between 2D and 3D.
		this._componentsState = {
			sceneTree: {
				defaultEnable: this.getEnableSceneTree(),
				userInteractionShow: this.getShowSceneTree()
			},
			stepNavigation: {
				defaultEnable: this.getEnableStepNavigation(),
				userInteractionShow: this.getShowStepNavigation()
			},
			progressIndicator: {
				defaultEnable: this.getEnableProgressIndicator()
			},
			messagePopover: {
				defaultEnable: this.getEnableNotifications()
			}
		};
		//We initialise the viewer with the both scene tree and step navigation disabled.
		this.setEnableSceneTree(false);
		this.setEnableStepNavigation(false);
	};

	Viewer.prototype.init = function() {
		this._messages = new Messages();
		this._messagePopover = new Notifications();
		this.setAggregation("messagePopover", this._messagePopover);

		this._messagePopover.attachAllMessagesCleared(function () {
			this._messagePopover.setVisible(false);
			this._updateLayout();
		}, this);

		this._messagePopover.attachMessageAdded(function () {
			this._messagePopover.setVisible(true);
			this._updateLayout();
		}, this);

		log.debug("sap.ui.vk.Viewer.init() called.");

		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}

		this._scheduleContentResourcesUpdateTimerId = null;
		this._resizeListenerId = null;
		this._busyIndicatorCounter = 0;
		this._toolbar = null;
		this._viewport = null;
		this._nativeViewport = null;
		this._stepNavigation = null;
		this._mainScene = null;
		this._sceneTree = null;
		this._overlayManager = {
			initialized: false,
			changed: false,
			control: null,
			delegate: {
				onAfterRendering: function(oEvent) {
					// manipulate DOM tree after rendering of stacked viewport
					var overlayDiv = this._overlayManager.control.getDomRef();
					if (overlayDiv && this._nativeViewport) {
						var nativeVPDiv = this._nativeViewport.getDomRef();
						if (overlayDiv.parentNode !== nativeVPDiv) {
							// do not display the content div the overlay belongs to -> otherwise it would receive all events we expect on the
							// overlay
							overlayDiv.parentNode.style.display = "none";
						}
						// make overlay a child of native viewport to get event bubbling right
						nativeVPDiv.appendChild(overlayDiv);
						// adapt overlay size to parent node
						overlayDiv.style.width = "100%";
						overlayDiv.style.height = "100%";
					}
				}.bind(this)
			},
			onNativeViewportMove: function(event) {
				var oPan = event.getParameter("pan");
				this.control.setPanAndZoom(oPan.x, oPan.y, event.getParameter("zoom"));
			}
		};

		this._updateSizeTimer = 0;
		this._fullScreenToggle = false;

		this._content = new Splitter(this.getId() + "-splitter", {
			orientation: "Horizontal"
		});

		this._stackedViewport = new FlexibleControl({
			width: "100%",
			height: "100%",
			layout: "Stacked"
		});

		this._layout = new FlexibleControl(this.getId() + "-flexibleControl", {
			width: "100%",
			height: "100%",
			layout: "Vertical"
		});

		this._stackedViewport.setLayoutData(new SplitterLayoutData({
			size: "100%",
			minSize: 160,
			resizable: true
		}));

		this._content.addContentArea(this._stackedViewport);
		this.setAggregation("layout", this._layout);

		this.setTooltip(sap.ui.vk.getResourceBundle().getText("VIEWER_TITLE"));

		if (this.getEnableProgressIndicator()) {
			this._createProgressIndicator();
		}
	};

	/**
	 * Destroys the Viewer control. All scenes will be destroyed and all Viewports will be unregistered by the Graphics Core.
	 *
	 * @private
	 */
	Viewer.prototype.exit = function() {
		log.debug("sap.ui.vk.Viewer.exit() called.");

		// Cancel the delayed call if any.
		if (this._scheduleContentResourcesUpdateTimerId) {
			jQuery.sap.clearDelayedCall(this._scheduleContentResourcesUpdateTimerId);
			this._scheduleContentResourcesUpdateTimerId = null;
		}

		// All scenes will be destroyed and all viewports will be unregistered by GraphicsCore.destroy.
		this._setMainScene(null);
		this._toolbar = null;
		this._messagePopover = null;
		this._sceneTree = null;
		this._nativeViewport = null;
		this._stepNavigation = null;
		this._viewport = null;
		this._componentsState = null;
		this._setViewStateManager(null);

		if (this._graphicsCore) {
			this._graphicsCore.destroy();
			this._graphicsCore = null;
		}

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		if (Control.prototype.exit) {
			Control.prototype.exit.apply(this);
		}
	};

	Viewer.prototype._setMainScene = function(scene) {
		if (scene) {
			if (scene !== this._mainScene) {
				this._mainScene = scene;
				this._showViewport();
				this._viewport.setScene(this._mainScene);
				this._setViewStateManager(this._graphicsCore.createViewStateManager(this._mainScene.getDefaultNodeHierarchy()));
				this._viewport.setViewStateManager(this.getViewStateManager());

				//Set the scene tree & step navigation state based on default settings and last user interaction (if any).
				if (this._componentsState.sceneTree.defaultEnable) {
					this._instantiateSceneTree();
					this._sceneTree.setScene(this._mainScene, this.getViewStateManager());
					this.setEnableSceneTree(true);
					if (this._componentsState.sceneTree.userInteractionShow) {
						this.setShowSceneTree(true);
						this._sceneTree.setVisible(true);
					} else {
						this.setShowSceneTree(false);
					}
				}
				if (this._componentsState.stepNavigation.defaultEnable) {
					this._instantiateStepNavigation();
					this._stepNavigation.setScene(this._mainScene);
					this.setEnableStepNavigation(true);
					if (this._componentsState.stepNavigation.userInteractionShow) {
						this.setShowStepNavigation(true);
						this._stepNavigation.setVisible(true);
					} else {
						this.setShowStepNavigation(false);
					}
				}
			}
			if (this._sceneTree) {
				this._sceneTree.refresh();
			}
			if (this._stepNavigation) {
				this._stepNavigation.refresh(scene);
			}
		} else {
			this._mainScene = null;
			this._setViewStateManager(null);
			if (this._viewport) {
				this._viewport.setScene(null);
			}
			if (this._sceneTree) {
				this._sceneTree.setScene(null, null);
			}
			if (this._stepNavigation) {
				this._stepNavigation.setScene(null);
			}
			this.setEnableSceneTree(false);
			this.setEnableStepNavigation(false);
		}
		return this;
	};

	Viewer.prototype._destroyMainScene = function() {
		if (this._mainScene) {
			var scene = this._mainScene;
			this.fireSceneDestroying({
				scene: scene
			});
			this._setMainScene(null);
			this._graphicsCore.destroyScene(scene);
		} else if (this._nativeViewport) {
			this.fireSceneDestroying({
				scene: null
			});
		}
		return this;
	};

	/**
	 * Gets the GraphicsCore object.
	 *
	 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object.
	 * @public
	 */
	Viewer.prototype.getGraphicsCore = function() {
		if (!this._graphicsCore) {
			jQuery.sap.require("sap.ui.vk.GraphicsCore");
			this._graphicsCore = new sap.ui.vk.GraphicsCore(this._getRuntimeSettings(), jQuery.extend({
				antialias: true,
				alpha: true,
				premultipliedAlpha: true
			}, this._getWebGLContextAttributes()));
		}
		return this._graphicsCore;
	};

	/**
	 * Gets the Scene currently loaded in the Viewer control.
	 *
	 * @returns {sap.ui.vk.Scene} The scene loaded in the control.
	 * @public
	 */
	Viewer.prototype.getScene = function() {
		return this._mainScene;
	};

	/**
	 * Gets the view state manager object used for handling visibility and selection of nodes.
	 *
	 * @returns {sap.ui.vk.ViewStateManager} The view state manager object.
	 * @public
	 */
	Viewer.prototype.getViewStateManager = function() {
		return this.getAggregation("viewStateManager");
	};

	/**
	 * Sets the view state manager object used for handling visibility and selection of nodes.
	 *
	 * @param {sap.ui.vk.ViewStateManager} viewStateManager The ViewStateManager object.
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewer.prototype._setViewStateManager = function(viewStateManager) {
		if (!this._graphicsCore) {
			return this;
		}
		if (viewStateManager === this.getViewStateManager()) {
			return this;
		}
		if (this.getViewStateManager()) {
			this._graphicsCore.destroyViewStateManager(this.getViewStateManager());
		}
		this.setAggregation("viewStateManager", viewStateManager, true);
		return this;
	};

	/**
	 * Gets the 3D viewport.
	 *
	 * @returns {sap.ui.vk.Viewport} The 3D viewport.
	 * @public
	 */
	Viewer.prototype.getViewport = function() {
		return this._viewport;
	};

	/**
	 * Gets the 2D viewport used for displaying format natively supported by the browser - 2D images etc.
	 *
	 * @returns {sap.ui.vk.NativeViewport} The 2D viewport.
	 * @public
	 */
	Viewer.prototype.getNativeViewport = function() {
		return this._nativeViewport;
	};

	/**
	 * @return {object} The Emscripten runtime settings.
	 * @private
	 */
	Viewer.prototype._getRuntimeSettings = function() {
		return this._runtimeSettings;
	};

	/**
	 * @returns {object} The webGLContextAttributes property.
	 * @private
	 */
	Viewer.prototype._getWebGLContextAttributes = function() {
		return this._webGLContextAttributes;
	};

	Viewer.prototype.getOverlay = function() {
		// overlay control is not stored in overlay aggregation, since it may be aggregated by the stavked viewport
		// therefore we keep an additional reference in the _overlayManager
		return this._overlayManager.control;
	};

	Viewer.prototype.setEnableOverlay = function(oProperty) {
		if (oProperty !== this.getProperty("enableOverlay")) {
			this.setProperty("enableOverlay", oProperty);
			this._overlayManager.changed = true;
		}
		return this;
	};

	Viewer.prototype.setEnableSceneTree = function(oProperty) {
		this.setProperty("enableSceneTree", oProperty, true);
		if (!oProperty) {
			this.setProperty("showSceneTree", false);
		}
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableNotifications = function(oProperty) {
		this.setProperty("enableNotifications", oProperty, true);
		this._messagePopover.setVisible(false);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setShowSceneTree = function(oProperty) {
		this.setProperty("showSceneTree", oProperty, true);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableStepNavigation = function(oProperty) {
		this.setProperty("enableStepNavigation", oProperty, true);
		if (!oProperty) {
			this.setProperty("showStepNavigation", false);
		}
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setShowStepNavigation = function(oProperty) {
		this.setProperty("showStepNavigation", oProperty, true);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableToolbar = function(oProperty) {
		this.setProperty("enableToolbar", oProperty, true);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableFullScreen = function(oProperty) {
		//It checks if the current document is in full screen mode
		var isInFullScreenMode = function(document) {
			return document.fullScreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement;
		};

		this.setProperty("enableFullScreen", oProperty, true);
		this._fullScreenToggle = true;

		// Fullscreen toggle
		var isFullScreenPropertyEnabled = this.getProperty("enableFullScreen");
		var bChanged = false;

		if (isFullScreenPropertyEnabled) {
			if (!isInFullScreenMode(document)) {

				if (!this._fullScreenHandler) {
					this._fullScreenHandler = function(event) {
						if (!isInFullScreenMode(document)) {
							document.removeEventListener("fullscreenchange", this._fullScreenHandler.bind(this));
							document.removeEventListener("mozfullscreenchange", this._fullScreenHandler.bind(this));
							document.removeEventListener("webkitfullscreenchange", this._fullScreenHandler.bind(this));
							document.removeEventListener("MSFullscreenChange", this._fullScreenHandler.bind(this));

							this.removeStyleClass("sapVizKitViewerFullScreen");
							this._updateSize();
							this.fireFullScreen({
								isFullScreen: false
							});
						}
					};

					document.addEventListener("fullscreenchange", this._fullScreenHandler.bind(this));
					document.addEventListener("mozfullscreenchange", this._fullScreenHandler.bind(this));
					document.addEventListener("webkitfullscreenchange", this._fullScreenHandler.bind(this));
					document.addEventListener("MSFullscreenChange", this._fullScreenHandler.bind(this));
				}

				bChanged = true;

				var bodyElement = document.getElementsByTagName("body")[0];
				if (bodyElement.requestFullScreen) {
					bodyElement.requestFullScreen();
				} else if (bodyElement.webkitRequestFullScreen) {
					bodyElement.webkitRequestFullScreen();
				} else if (bodyElement.mozRequestFullScreen) {
					bodyElement.mozRequestFullScreen();
				} else if (bodyElement.msRequestFullscreen) {
					bodyElement.msRequestFullscreen();
				} else {
					bChanged = false;
				}

				if (bChanged) {
					this.addStyleClass("sapVizKitViewerFullScreen");
				}
			}
		} else if (isInFullScreenMode(document)) {
			bChanged = true;

			if (document.cancelFullScreen) {
				document.cancelFullScreen();
			} else if (document.webkitCancelFullScreen) {
				document.webkitCancelFullScreen();
			} else if (document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if (document.msExitFullscreen) {
				document.msExitFullscreen();
			} else {
				bChanged = false;
			}

			if (bChanged) {
				this.removeStyleClass("sapVizKitViewerFullScreen");
			}
		}

		if (bChanged) {
			this._updateSize();
			this.fireFullScreen({
				isFullScreen: isFullScreenPropertyEnabled
			});
		}

		return this;
	};

	Viewer.prototype.invalidate = function(origin) {
		if (origin instanceof ContentResource) {
			this._scheduleContentResourcesUpdate();
			return;
		}
		Control.prototype.invalidate.apply(this, arguments);
	};

	Viewer.prototype._queueContentResourcesUpdateIfNeeded = function(aggregationName) {
		if (aggregationName === "contentResources") {
			this._scheduleContentResourcesUpdate();
			return true;
		}
	};

	Viewer.prototype.addAggregation = function(aggregationName, object, suppressInvalidate) {
		if (this._queueContentResourcesUpdateIfNeeded(aggregationName)) {
			suppressInvalidate = true;
		}
		return Control.prototype.addAggregation.call(this, aggregationName, object, suppressInvalidate);
	};

	Viewer.prototype.insertAggregation = function(aggregationName, object, index, suppressInvalidate) {
		if (this._queueContentResourcesUpdateIfNeeded(aggregationName)) {
			suppressInvalidate = true;
		}
		return Control.prototype.insertAggregation.call(this, aggregationName, object, index, suppressInvalidate);
	};

	Viewer.prototype.removeAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			var result = Control.prototype.removeAggregation.call(this, aggregationName, object, true);
			if (result) {
				this._scheduleContentResourcesUpdate();
			}
			return result;
		} else {
			return Control.prototype.removeAggregation.call(this, aggregationName, object, suppressInvalidate);
		}
	};

	Viewer.prototype.removeAllAggregation = function(aggregationName, suppressInvalidate) {
		if (this._queueContentResourcesUpdateIfNeeded(aggregationName)) {
			suppressInvalidate = true;
		}
		return Control.prototype.removeAllAggregation.call(this, aggregationName, suppressInvalidate);
	};

	Viewer.prototype.destroyAggregation = function(aggregationName, suppressInvalidate) {
		if (this._queueContentResourcesUpdateIfNeeded(aggregationName)) {
			suppressInvalidate = true;
		}
		return Control.prototype.destroyAggregation.call(this, aggregationName, suppressInvalidate);
	};

	/*
	 * Schedules an update of the content resource hierarchy.
	 *
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining. @private
	 */
	Viewer.prototype._scheduleContentResourcesUpdate = function() {
		if (!this._scheduleContentResourcesUpdateTimerId) {
			this._scheduleContentResourcesUpdateTimerId = jQuery.sap.delayedCall(0, this, function() {
				// The delayed call is invoked once. Reset the ID to indicate that there is no pending delayed call.
				this._scheduleContentResourcesUpdateTimerId = null;

				var that = this;

				function loadContent3D(contentResources) {
					that.setBusy(true);
					var graphicsCore = that.getGraphicsCore();
					var onDownloadProgress;
					if (that._componentsState.progressIndicator.defaultEnable) {
						that._progressIndicator.reset();
						that._progressIndicator.setNumberOfFiles(contentResources.length);
						that._progressIndicator.setVisible(true);

						graphicsCore._dvl.Client.NotifyFileLoadProgress = function(clientId, currentPercentage) {
							that._progressIndicator.updateRenderStatus(currentPercentage);
							return 1;
						};

						onDownloadProgress = function(data) {
							var fileName = data.getParameter("source");
							var downloaded = data.getParameter("loaded");
							var totalFileSize = data.getParameter("total");
							that._progressIndicator.updateDownloadStatus(fileName, downloaded, totalFileSize);
						};
					}

					graphicsCore.loadContentResourcesAsync(contentResources, function(sourcesFailedToLoad) {
						try {
							if (sourcesFailedToLoad) {
								if (that.getEnableNotifications() === false) {
									that._destroyMainScene();
									that._showNativeViewport();
									var errorLoadingFile = sap.ui.vk.getResourceBundle().getText("VIEWPORT_MESSAGEERRORLOADINGFILE");
									that._nativeViewport.loadFailed(errorLoadingFile);
								}
								log.error(sap.ui.vk.getResourceBundle().getText(that._messages.messages.VIT13.summary), that._messages.messages.VIT13.code, "sap.ui.vk.Viewer");
								that.fireSceneLoadingFailed();
							} else {
								var scene = graphicsCore.updateSceneTree(that.getScene(), contentResources);
								if (scene !== that._mainScene) {
									that._destroyMainScene();
								}
								that._setMainScene(scene);
								that.fireSceneLoadingSucceeded({
									scene: scene
								});
							}
						} catch (e) {
							var details = sap.ui.vk.getResourceBundle().getText(that._messages.messages.VIT14.summary);
							if (e instanceof DvlException) {
								details += "\ncode: " + e.code + ", message: " + e.message;
							} else if (e instanceof Error) {
								details += "\nmessage: " + e.message;
							}
							log.error(details, that._messages.messages.VIT14.code, "sap.ui.vk.Viewer");
							that._destroyMainScene();
							that.fireSceneLoadingFailed();
						} finally {
							that.fireContentResourceChangesProcessed();
							that.setBusy(false);
							that._progressIndicator.setVisible(false);
						}
					}, onDownloadProgress);
				}

				function loadContent2D(contentResources) {
					function onImageLoadingSucceeded() {
						if (that.getEnableOverlay()) {
							that._overlayManager.changed = true;
							that._showOverlay();
						}
						that.fireSceneLoadingSucceeded({
							scene: null
						});
						that.fireContentResourceChangesProcessed();
					}

					function onImageLoadingFailed() {
						that.fireSceneLoadingFailed();
						that.fireContentResourceChangesProcessed();
						if (that.getEnableNotifications() === false){
							var errorLoadingFile = sap.ui.vk.getResourceBundle().getText("VIEWPORT_MESSAGEERRORLOADINGFILE");
							that._nativeViewport.loadFailed(errorLoadingFile);
						}
					}

					that._destroyMainScene();

					if (contentResources.length === 1) {
						that._showNativeViewport();
						var resource = contentResources[0];
						var source = resource.getSource();
						if (source instanceof File) {
							var fileReader = new FileReader();
							fileReader.onload = function(event) {
								that._nativeViewport.loadUrl(fileReader.result, onImageLoadingSucceeded, onImageLoadingFailed, null, resource.getSourceType());
							};
							fileReader.readAsDataURL(source);
						} else {
							that._nativeViewport.loadUrl(source, onImageLoadingSucceeded, onImageLoadingFailed, null, resource.getSourceType());
						}
					} else {
						log.error(sap.ui.vk.getResourceBundle().getText(that._messages.messages.VIT15.summary), that._messages.messages.VIT15.code, "sap.ui.vk.Viewer");
						that.fireContentResourceChangesProcessed();
					}
				}

				var needToDestroyScene = true;
				var category;
				var categories;
				var contentResources = this.getContentResources();

				if (contentResources.length > 0) {
					// Find the category of content resources. Valid ones are 3D and 2D.
					categories = ContentResource.collectCategories(contentResources);
					if (categories.length === 0) {
						// Pure grouping content resources.
						if (this._viewport && this._viewport.getVisible()) {
							// All content resources have no sourceType. If the 3D viewport is visible
							// we assume that the content resources are 3D and we do not hide the 3D viewport;
							category = sap.ui.vk.ContentResourceSourceCategory["3D"];
							needToDestroyScene = false;
						} else if (this._nativeViewport && this._nativeViewport.getVisible()) {
							// All content resources have no sourceType. If the 2D viewport is visible
							// we assume that the content resources are 2D and we do not hide the 2D viewport;
							category = sap.ui.vk.ContentResourceSourceCategory["2D"];
							needToDestroyScene = false;
						}
					} else if (categories.length === 1) {
						category = categories[0];
						if (category === "unknown") {
							log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT16.summary), this._messages.messages.VIT16.code, "sap.ui.vk.Viewer");
							if (this._nativeViewport == null) {
								this._showNativeViewport();
							}
							if (this.getEnableNotifications() === false){
								this._nativeViewport.loadFailed();
							}
							this._showNativeViewport(false);
						} else {
							needToDestroyScene = false;
						}
					} else if (categories.length > 1) {
					log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT17.summary), this._messages.messages.VIT17.code, "sap.ui.vk.Viewer");
					}
				}

				if (needToDestroyScene) {
					this._destroyMainScene();
					this.fireContentResourceChangesProcessed();
					return;
				}

				if (category === sap.ui.vk.ContentResourceSourceCategory["3D"]) {
					loadContent3D(contentResources);
				} else if (category === sap.ui.vk.ContentResourceSourceCategory["2D"]) {
					loadContent2D(contentResources);
				}
			});
		}
		return this;
	};

	Viewer.prototype.onBeforeRendering = function() {
		if (this._fullScreenToggle) {
			this._fullScreenToggle = false;
		} else {
			this._showToolbar();
		}
		this._showOverlay();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	Viewer.prototype.onAfterRendering = function() {
		var domRef = this.getDomRef();
		this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
		this._handleResize({
			size: {
				width: domRef.clientWidth,
				height: domRef.clientHeight
			}
		});
	};

	/**
	 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
	 *
	 * @param {jQuery.Event} event The event object.
	 * @private
	 */
	Viewer.prototype._handleResize = function(event) {
		this._updateSize();
	};

	Viewer.prototype._updateSize = function() {
		if (this._updateSizeTimer) {
			clearTimeout(this._updateSizeTimer);
		}
		this._updateSizeTimer = setTimeout(this._doUpdateSize.bind(this), 100);
	};

	Viewer.prototype._doUpdateSize = function() {
		var flexId = this.getId() + "-flexibleControl";
		var layout = document.getElementById(flexId);

		if (!layout) {
			return;
		}

		layout.style.width = '100%';
		layout.style.height = '100%';

		var height = layout.clientHeight;

		var subheight = [];

		for (var i = 0; i < 4; i++) {
			subheight[i] = document.getElementById(flexId + "Content_" + i);
		}

		height -= subheight[0].clientHeight;

		for (var j = 2; j < 4; j++) {
			if (subheight[j] != null && subheight[j].style.visibility != 'hidden') {
				height -= subheight[j].clientHeight;
			}
		}

		if (subheight[1]) {
			subheight[1].style.height = height + "px";
		}

		if (this._stackedViewport) {
			this._stackedViewport.setLayoutData(new SplitterLayoutData({
				size: "100%",
				minSize: 160,
				resizable: true
			}));
		}
	};

	Viewer.prototype.isTreeBinding = function(name) {
		return name === "contentResources";
	};

	Viewer.prototype.setBusy = function(busy) {
		if (busy) {
			if (this._busyIndicatorCounter === 0) {
				this.setBusyIndicatorDelay(0);
				Control.prototype.setBusy.call(this, true);
			}
			this._busyIndicatorCounter += 1;
		} else {
			this._busyIndicatorCounter -= 1;
			if (this._busyIndicatorCounter == 0) {
				Control.prototype.setBusy.call(this, false);
			}
		}
	};

	Viewer.prototype._showToolbar = function() {
		if (!this._toolbar) {
			this._toolbar = new sap.ui.vk.Toolbar({
				title: this.getToolbarTitle()
			});
			this._toolbar.setViewer(this);
			this.setAggregation("toolbar", this._toolbar);
		}
		this._toolbar.setVisible(this.getEnableToolbar());
		this._updateLayout();
		return this;
	};


	Viewer.prototype._createProgressIndicator = function () {
		if (!this._progressIndicator) {
			this._progressIndicator = new ProgressIndicator({
				visible: false
			});
			this.setAggregation("progressIndicator", this._progressIndicator);
		} else {
			this._progressIndicator.reset();
		}
	};

	Viewer.prototype._updateLayout = function() {
		this._layout.setWidth(this.getWidth());
		this._layout.removeAllContent();
		this._layout.setHeight(this.getHeight());

		var height = this.getHeight();
		var contentHeight = [
			0, 0, 0
		];

		if (height == "auto") {
			height = 400;
		} else if (height.substr(height.length - 1) == '%') {
			height = 400;
		} else {
			height = parseInt(height, 10);
		}

		if (this._toolbar != null && this.getEnableToolbar()) {
			contentHeight[0] = 48;
		}
		if (this._stepNavigation != null && this.getShowStepNavigation()) {
			contentHeight[2] = 150;
		}

		contentHeight[1] = height - contentHeight[0] - contentHeight[2];

		if (this._toolbar != null && this.getEnableToolbar()) {
			this._toolbar.setVisible(true);
			this._toolbar.setLayoutData(new FlexibleControlLayoutData({
				size: contentHeight[0] + "px"
			}));
			this._layout.insertContent(this._toolbar, 0);
		} else if (this._toolbar != null) {
			this._toolbar.setVisible(false);
		}

		if (this._sceneTree != null && this.getShowSceneTree() && this.getEnableSceneTree()) {
			this._sceneTree.setVisible(true);
			this._sceneTree.setLayoutData(new SplitterLayoutData({
				size: "320px",
				minSize: 200,
				resizable: true
			}));
			this._content.insertContentArea(this._sceneTree, 0);
		} else if (this._sceneTree != null) {
			this._content.removeContentArea(this._sceneTree);
			this._sceneTree.setVisible(false);
		}
		this._content.setLayoutData(new FlexibleControlLayoutData({
			size: contentHeight[1] + "px"
		}));
		this._layout.addContent(this._content);

		if (this._messagePopover != null) {
			contentHeight[1] -= contentHeight[0]; //since MsgPopover = height of toolbar (48px)
		}

		if (this._stepNavigation != null && this.getShowStepNavigation() && this.getEnableStepNavigation()) {
			if (this._graphicsCore != null && !this._stepNavigation.hasGraphicsCore()) {
				this._stepNavigation.setGraphicsCore(this._graphicsCore);
			}
			this._stepNavigation.setLayoutData(new FlexibleControlLayoutData({
				size: contentHeight[2] + "px"
			}));
			this._layout.addContent(this._stepNavigation);
		}

		if (this._messagePopover !== null && this._messagePopover.getAggregation("_messagePopover").getItems().length > 0 && this.getEnableNotifications()) {
			this._messagePopover.setVisible(true);
			this._messagePopover.setLayoutData(new FlexibleControlLayoutData({
				size: contentHeight[0] + "px"
			}));
			this._layout.addContent(this._messagePopover);
		}else {
			this._content.removeContentArea(this._messagePopover);
			this._messagePopover.setVisible(false);
		}

		if (this._toolbar) {
			this._toolbar.refresh();
		}
		this._updateSize();
	};

	Viewer.prototype._instantiateSceneTree = function() {
		if (!this._sceneTree) {
			this._sceneTree = new sap.ui.vk.SceneTree();
			this.setAggregation("sceneTree", this._sceneTree);
		}
		return this;
	};

	Viewer.prototype._instantiateStepNavigation = function() {
		if (!this._stepNavigation) {
			this._stepNavigation = new sap.ui.vk.StepNavigation(this.getId() + "-stepNavigation", {
				showThumbnails: this.getShowStepNavigationThumbnails()
			});
			this.setAggregation("stepNavigation", this._stepNavigation);
		}
		return this;
	};

	Viewer.prototype._showViewport = function() {
		if (!this._viewport) {
			this._viewport = new sap.ui.vk.Viewport(this.getId() + "-viewport");
			this.setAggregation("viewport", this._viewport);
			this._viewport.setGraphicsCore(this.getGraphicsCore());
		}

		if (this._nativeViewport) {
			this._nativeViewport.setVisible(false);
		}
		this._stackedViewport.removeAllContent();
		this._stackedViewport.addContent(this._viewport);
		this._viewport.setVisible(true);

		return this;
	};

	Viewer.prototype._showNativeViewport = function() {
		if (!this._nativeViewport) {
			this._nativeViewport = new sap.ui.vk.NativeViewport(this.getId() + "-nativeViewport");
			this.setAggregation("nativeViewport", this._nativeViewport);
		}

		if (this._viewport) {
			this._viewport.setVisible(false);
		}
		this._stackedViewport.removeAllContent();
		this._stackedViewport.addContent(this._nativeViewport);
		this._nativeViewport.setVisible(true);

		return this;
	};

	Viewer.prototype._showOverlay = function() {
		var oOverlayManager = this._overlayManager;
		if (oOverlayManager.changed) {
			var oOverlay;
			if (this.getEnableOverlay()) {
				if (!oOverlayManager.initialized) {
					// overlay not yet initialized -> check if overlay is given
					if (!(oOverlay = this.getAggregation("overlay"))) {
						// no Overlay control given -> create one
						oOverlay = new sap.ui.vk.Overlay();
					}
					oOverlay.setZoomOnResize(false);
					oOverlayManager.control = oOverlay;
					oOverlayManager.initialized = true;
				} else {
					oOverlay = oOverlayManager.control;
					oOverlay.reset();
				}
				if (this._nativeViewport) {
					oOverlay.setTarget(this._nativeViewport);
					// set zoom restriction
					oOverlayManager.savedLimitZoomOutState = this._nativeViewport.getLimitZoomOut();
					this._nativeViewport.setLimitZoomOut(true);
					// register move event of native Viewport to adapt pan and zoom state
					this._nativeViewport.attachEvent("move", oOverlayManager.onNativeViewportMove, oOverlayManager);
					// add Overlay to stacked Viewport
					this._stackedViewport.addContent(oOverlay);
					this._stackedViewport.addDelegate(oOverlayManager.delegate);
				}
			} else {
				// de-register move event of native Viewport to adapt pan and zoom state
				this._nativeViewport.detachEvent("move", oOverlayManager.onNativeViewportMove, oOverlayManager);
				// remove Overlay from stacked Viewport
				this._stackedViewport.removeDelegate(oOverlayManager.delegate);
				this._stackedViewport.removeContent(oOverlayManager.control);
				// remove zoom restriction
				this._nativeViewport.setLimitZoomOut(oOverlayManager.savedLimitZoomOutState);
			}
			oOverlayManager.changed = false;
		}
	};

	return Viewer;
});

}; // end of sap/ui/vk/Viewer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.GraphicsCore') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
/* global File */
// Provides the GraphicsCore class.
jQuery.sap.declare('sap.ui.vk.GraphicsCore'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.ve.dvl'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/GraphicsCore",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "./ve/dvl", "./Scene", "./NodeHierarchy",
	"./ContentResource", "./DownloadManager", "./ViewStateManager", "./DvlException", "./Messages"
], function(jQuery, library, EventProvider, Dvl, Scene, NodeHierarchy,
	ContentResource, DownloadManager, ViewStateManager, DvlException, Messages) {
	"use strict";

	/**
	 * Gets the name of the storage in Emscripten file system to use.
	 * @param {string|File} source The source to test.
	 * @returns {string} The name of the storage in Emscripten file system to use:
	 *                   "remote" for files downloaded from remote servers,
	 *                   "local" for files loaded from the local file system.
	 */
	function getStorageName(source) {
		return source instanceof File ? "local" : "remote";
	}

	/**
	 * Gets the name of the source.
	 * @param {string|File} source The source to get the name of.
	 * @returns {string} The name of the source. If the source is string then the source itself, if the source is File then source.name.
	 */
	function getSourceName(source) {
		return source instanceof File ? source.name : source;
	}

	// The SourceDatum class is used to record information about sources used in content resource hierarchies.
	// Sources correspond to files/models downloaded from remote servers or from local file systems.
	// To optimise the usage of sources we use caching - if multiple content resources reference the same source
	// the source is not downloaded multiple times, it is downloaded only once, and is destroyed when the last content
	// resource is destroyed.
	var SourceDatum = function(source) {
		Object.defineProperties(this, {
			source: {
				value: source,
				writable: false,
				enumerable: true
			},
			_refCount: {
				value: 0,
				writable: true,
				enumerable: false
			}
		});
	};

	SourceDatum.prototype.isInUse = function() {
		return this._refCount > 0;
	};

	SourceDatum.prototype.addRef = function() {
		++this._refCount;
		return this;
	};

	SourceDatum.prototype.release = function() {
		--this._refCount;
		jQuery.sap.assert(this._refCount >= 0, "Too many calls to SourceDatum.release().");
		return this;
	};

	// The DvlSceneDatum class is used to record information about what source a DVL scene is created from
	// and whether it is a root scene. Root scenes are not shared. Non-root scenes are read only and can be
	// used as sources for cloning nodes into the root scene. It might happen that the same source is used
	// as a root scene and non-root scene, e.g. if there is a hierarchy of content resources and all content
	// resources are built from the same source, e.g. a model with just one box.
	var DvlSceneDatum = function(dvlSceneId, sourceDatum, root) {
		Object.defineProperties(this, {
			dvlSceneId: {
				value: dvlSceneId,
				writable: false,
				enumerable: true
			},
			sourceDatum: {              // This field can be null which means the DVL scene is created as empty, not from a source.
				value: sourceDatum,
				writable: false,
				enumerable: true
			},
			root: {
				value: !!root,
				writable: false,
				enumerable: true
			},
			_refCount: {
				value: 0,
				writable: true,
				enumerable: false
			}
		});
	};

	DvlSceneDatum.prototype.isInUse = function() {
		return this._refCount > 0;
	};

	DvlSceneDatum.prototype.addRef = function() {
		++this._refCount;
		return this;
	};

	DvlSceneDatum.prototype.release = function() {
		--this._refCount;
		jQuery.sap.assert(this._refCount >= 0, "Too many calls to DvlSceneDatum.release().");
		// NB: we do not release the reference to the SourceDatum object as this object can be re-used later.
		// The reference to the SoruceDatum object is released in the destroy method when this object is about to be completely dead.
		return this;
	};

	DvlSceneDatum.prototype.destroy = function() {
		// This object will not be re-used so we need to release the reference to the SourceDatum object if any.
		if (this.sourceDatum) {
			this.sourceDatum.release();
		}
	};

	var ShadowContentResource = function(contentResource, fake) {
		// nodeProxy and dvlSceneId are mutually exclusive.
		Object.defineProperties(this, {
			source: {
				value: contentResource.getSource()
			},
			sourceType: {
				value: contentResource.getSourceType()
			},
			sourceId: {
				value: contentResource.getSourceId(),
				writable: true
			},
			name: {
				value: contentResource.getName()
			},
			localMatrix: {
				value: contentResource.getLocalMatrix(),
				writable: true
			},
			children: {
				value: contentResource.getContentResources().map(function(contentResource) {
					return new ShadowContentResource(contentResource);
				})
			},
			dvlSceneDatum: {         // This field can be null which means this content resource is a pure grouping node.
				value: null,
				writable: true
			},
			nodeProxy: {             // This field is null when dvlSceneDatum.root equals true.
				value: null,
				writable: true
			},
			fake: {
				value: !!fake
			}
		});
		contentResource._shadowContentResource = this;
	};

	ShadowContentResource.prototype.destroy = function() {
		// This object will not be re-used so we need to release the reference to DvlSceneData is any.
		if (this.dvlSceneDatum) {
			this.dvlSceneDatum.release();
		}
	};

	var VkSceneDatum = function(vkScene, shadowContentResource) {
		Object.defineProperties(this, {
			vkScene: {
				value: vkScene
			},
			shadowContentResource: {
				value: shadowContentResource
			}
		});
	};

	/**
	 * Constructor for a new GraphicsCore.
	 *
	 * @class
	 * Loads the DVL library, wraps it, and makes the wrapper available for the application.
	 *
	 * Example:<br/>
	 * <pre>   var oGraphicsCore = new GraphicsCore();</pre><br/>
	 *
	 * @param {object} runtimeSettings The Emscripten runtime settings.
	 * @param {int}    runtimeSettings.totalMemory The size of Emscripten module memory in bytes.
	 * @param {string} runtimeSettings.logElementId The ID of a textarea DOM element to write the log to.
	 * @param {string} runtimeSettings.statusElementId The ID of a DOM element to write the status messages to.
	 * @param {object} webGLContextAttributes The WebGL context attributes. See {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes}.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.GraphicsCore
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var GraphicsCore = EventProvider.extend("sap.ui.vk.GraphicsCore", /** @lends sap.ui.vk.GraphicsCore.prototype */ {
		metadata: {
			publicMethods: [
				"buildSceneTree",
				"createViewStateManager",
				"destroyScene",
				"destroyViewStateManager",
				"getApi",
				"loadContentResourcesAsync",
				"showDebugInfo"
			]
		},
		constructor: function(runtimeSettings, webGLContextAttributes) {
			EventProvider.apply(this);

			var settings = jQuery.extend({}, runtimeSettings, {
				filePackagePrefixURL: jQuery.sap.getResourcePath("sap/ve") + "/"
			});
			this._dvlClientId = jQuery.sap.uid();
			this._dvl = sap.ve.dvl.createRuntime(settings);
			this._dvl.CreateCoreInstance(this._dvlClientId);
			sap.ui.vk.dvl.checkResult(this._dvl.Core.Init(this._DVLMajorVersion, this._DVLMinorVersion));

			var ui5Core = sap.ui.getCore();
			ui5Core.attachLocalizationChanged(this._onlocalizationChanged, this);
			sap.ui.vk.dvl.checkResult(this._dvl.Core.SetLocale(ui5Core.getConfiguration().getLanguageTag()));

			this._canvas = this._createRenderingCanvasAndContext(webGLContextAttributes);
			// The renderer needs to be initialised at the very beginning because it is required
			// to load geometry into GPU memory when loading models.
			this._dvl.Core.InitRenderer();

			// The list of URLs and File objects. Their content is downloaded and copied to the Emscripten file system.
			// The content of files in the Emscripten file system is read only.
			this._sourceData = [];

			// The list of records with information about what sources the DVL scenes are created from.
			// These records can be shared among multiple vkScenes.
			this._dvlSceneData = [];

			// The list of VkSceneDatum objects.
			this._vkSceneData = [];

			// The list of viewports (sap.ui.vk.Viewport).
			this._viewports = [];

			// The list of view state managers.
			this._viewStateManagers = [];

			// The centralized list of predefined error messages
			this._messages = new Messages();
		},

		// NB: Change these numbers when changing dependency on dvl.js in pom.xml.
		_DVLMajorVersion: 6,
		_DVLMinorVersion: 0
	});

	GraphicsCore.prototype.destroy = function() {
		sap.ui.getCore().detachLocalizationChanged(this._onlocalizationChanged, this);

		// GraphicsCore does not own Viewport objects, it should not destroy them, it can only reset their association with GraphicsCore.
		this._viewports.slice().forEach(function(viewport) {
			viewport.setGraphicsCore(null);
		});
		this._viewports = null;

		this._cleanupVkSceneData();
		this._vkSceneData = null;

		this._cleanupDvlSceneData();
		jQuery.sap.assert(this._dvlSceneData.length === 0, "Not all DVL scenes are destroyed when sap.ui.vk.Scene objects are destroyed.");
		this._dvlSceneData = null;

		this._cleanupSourceData();
		jQuery.sap.assert(this._sourceData.length === 0, "Not all sources are deleted.");
		this._sourceData = null;

		this._viewStateManagers.slice().forEach(this.destroyViewStateManager.bind(this));
		this._viewStateManagers = null;

		this._webGLContext = null;
		this._canvas = null;

		this._dvl.Core.DoneRenderer();

		this._dvl.Core.Release();
		this._dvl = null;

		EventProvider.prototype.destroy.apply(this);
	};

	/**
	 * Creates a canvas element for the 3D viewport and initializes the WebGL context.
	 * @param {object} webGLContextAttributes WebGL context attributes. A JSON object with the following boolean properties:
	 * <ul>
	 *   <li>antialias {boolean} default value <code>true</code>.</li>
	 *   <li>alpha {boolean} default value <code>true</code>.</li>
	 *   <li>premultipliedAlpha {boolean} default value <code>false</code>.</li>
	 * </ul>
	 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
	 * @returns {HTMLCanvasElement} The canvas element for the 3D viewport.
	 * @private
	 */
	GraphicsCore.prototype._createRenderingCanvasAndContext = function(webGLContextAttributes) {
		// _canvas is a private DOMElement used for WebGL rendering.
		// At the moment there can be only one canvas element and one viewport,
		// and the viewport uses the canvas.
		var canvas = document.createElement("canvas");
		canvas.id = jQuery.sap.uid();
		this._webGLContext = this._dvl.Core.CreateWebGLContext(canvas, webGLContextAttributes);
		return canvas;
	};

	/**
	 * Gets the canvas element used for 3D rendering.
	 * @returns {HTMLCanvasElement} The canvas element used for 3D rendering.
	 * @private
	 */
	GraphicsCore.prototype._getCanvas = function() {
		return this._canvas;
	};

	/**
	 * Gets the WebGL context used for 3D rendering.
	 * @returns {WebGLRenderingContext} The WebGL rendering context.
	 * @private
	 */
	GraphicsCore.prototype._getWebGLContext = function() {
		return this._webGLContext;
	};

	/**
	 * Gets the DVL object.
	 * @returns {DVL} The DVL object.
	 * @private
	 */
	GraphicsCore.prototype._getDvl = function() {
		return this._dvl;
	};

	/**
	 * Gets the DVL client ID used in processing notifications from DVL module.
	 * @returns {string} The DVL client ID.
	 * @private
	 */
	GraphicsCore.prototype._getDvlClientId = function() {
		return this._dvlClientId;
	};

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Source Data related methods.

	/**
	 * Returns an array of items from this._sourceData that matche the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { source }.
	 * @returns {SourceDatum[]} An array of items from this._dvlSourceData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findSourceData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._sourceData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	/**
	 * Destroys a single source.
	 * @param {SourceDatum} sourceDatum A SourceDatum object to destroy.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._destroySourceDatum = function(sourceDatum) {
		this._dvl.Core.DeleteFileByUrl(getSourceName(sourceDatum.source), getStorageName(sourceDatum.source));
		return this;
	};

	/**
	 * Cleans up unused sources.
	 *
	 * This method is called via jQuery.sap.delayedCall after multiple sources are released to collect unused objects.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._cleanupSourceData = function() {
		for (var i = this._sourceData.length - 1; i >= 0; --i) {
			var sourceDatum = this._sourceData[i];
			if (!sourceDatum.isInUse()) {
				this._sourceData.splice(i, 1);
				this._destroySourceDatum(sourceDatum);
			}
		}
		return this;
	};

	// END: Source Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: DVL Scene Data related methods.

	/**
	 * Returns an array of items from this._dvlSceneData that match the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { dvlSceneId, source, root }.
	 * @return {DvlSceneDatum[]} An array of items from this._dvlSceneData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findDvlSceneData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._dvlSceneData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	/**
	 * Destroys a single DVL scene datum object.
	 * @param {DvlSceneDatum} dvlSceneDatum A DvlSceneDatum object to destroy.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._destroyDvlSceneDatum = function(dvlSceneDatum) {
		this._dvl.Scene.Release(dvlSceneDatum.dvlSceneId);
		dvlSceneDatum.destroy();
		return this;
	};

	/**
	 * Cleans up unused DVL scene data.
	 *
	 * This method is called via jQuery.sap.delayedCall after multiple DVL scene data are released to collect unused objects.
	 * @private
	 */
	GraphicsCore.prototype._cleanupDvlSceneData = function() {
		for (var i = this._dvlSceneData.length - 1; i >= 0; --i) {
			var dvlSceneDatum = this._dvlSceneData[i];
			if (!dvlSceneDatum.isInUse()) {
				this._dvlSceneData.splice(i, 1);
				this._destroyDvlSceneDatum(dvlSceneDatum);
			}
		}
	};

	// END: DVL Scene Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: VK Scene Data related methods.

	/**
	 * Returns an array of items from this._vkSceneData that match the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { vkSceneId, etc }.
	 * @return {VkSceneDatum[]} An array of items from this._vkSceneData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findVkSceneData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._vkSceneData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	GraphicsCore.prototype._cleanupVkSceneData = function() {
		for (var i = this._vkSceneData.length - 1; i >= 0; --i) {
			this.destroyScene(this._vkSceneData[i].vkScene);
		}
	};

	// END: VK Scene Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Shadow Content Resource related methods.

	GraphicsCore.prototype._destroyShadowContentResource = function(vkScene, shadowContentResource) {
		if (shadowContentResource.children) {
			shadowContentResource.children.forEach(this._destroyShadowContentResource.bind(this, vkScene));
		}
		if (shadowContentResource.nodeProxy) {
			this._dvl.Scene.DeleteNode(vkScene._getDvlSceneId(), shadowContentResource.nodeProxy.getNodeId());
			vkScene.getDefaultNodeHierarchy().destroyNodeProxy(shadowContentResource.nodeProxy);
		}
		shadowContentResource.destroy();
	};

	// END: Shadow Content Resource related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Content Resource related methods.

	/**
	 * Loads content resources.
	 *
	 * Content resources can be downloaded from a URL or loaded from a local file.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to build the scene from.
	 * @param {function} onComplete The callback function to call when all content resources are processed.
	 *                              The callback takes one parameter <code>sourcesFailedToLoad</code> - an array of
	 *                              the 'source' attribute values that are failed to be loaded.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.loadContentResourcesAsync = function(contentResources, onComplete, onProgress) {
		var that = this;

		// Collect unique sources that are not loaded yet.
		function collectSources(contentResources) {
			var sources = [];
			contentResources.forEach(function enumerate(contentResource) {
				var source = contentResource.getSource();
				if (source && sources.indexOf(source) < 0 && that._findSourceData({ source: source }).length === 0) {
					sources.push(source);
				}
				contentResource.getContentResources().forEach(enumerate);
			});
			return sources;
		}

		var sources = collectSources(contentResources);

		// Accumulate source data in a local variable and then pass it to onComplete handler
		// otherwise the cleanup process can garbage collect them.
		var sourceData = [];

		// Asynchronously download all content resources with URLs or local files.
		if (sources.length > 0) {
			var sourcesFailedToLoad;
			var downloadManager = new DownloadManager(sources)
				.attachItemSucceeded(function(event) {
					var source = event.getParameter("source");
					var isFile = source instanceof File;
					var name = isFile ? source.name : source;
					var response = event.getParameter("response");

					//If the loaded source is a VDS4 file, we will log a message via jQuery.sap.log.
					//This message will be captured by the Viewer's Message Popover control.
					if (this._isVDS4File(response)) {
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT20.summary), this._messages.messages.VIT20.code, "sap.ui.vk.GraphicsCore");
					}

					this._dvl.Core.CreateFileFromArrayBuffer(response, name, getStorageName(source));
					sourceData.push(new SourceDatum(source));
				}, this)
				.attachAllItemsCompleted(function(event) {
					if (sourcesFailedToLoad) {
						// If anything failed then destroy all downloaded sources. This behaviour may change in future.
						sourceData.forEach(this._destroySourceDatum.bind(this));
					} else {
						// Otherwise append newly downloaded sources to the list of all downloaded sources.
						Array.prototype.push.apply(this._sourceData, sourceData);
					}
					if (onComplete) {
						onComplete(sourcesFailedToLoad);
					}
				}, this)
				.attachItemFailed(function(event) {
					sourcesFailedToLoad = sourcesFailedToLoad || [];
					sourcesFailedToLoad.push({
						source: event.getParameter("source"),
						status: event.getParameter("status"),
						statusText: event.getParameter("statusText")
					});
				}, this);
			if (onProgress) {
				downloadManager.attachItemProgress(onProgress, this);
			}
			downloadManager.start();
		} else if (onComplete) {
			// Nothing to download or everything is already downloaded.
			onComplete();
		}

		return this;
	};

	/**
	 * Merges content resources to the root scene.
	 *
	 * This is a private helper method used in methods buildSceneTree and updateSceneTree.
	 * @param {string} dvlRootSceneId The DVL ID of the root scene.
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy object.
	 * @param {string} dvlParentNodeId The DVL ID of the parent node.
	 * @param {string} dvlInsertBeforeNodeId The DVL ID of the node before which to insert the new subtree. If <code>null</code> then add at the end.
	 * @param {ShadowContentResource} shadowContentResource The content resource to merge into the root scene.
	 * @private
	 */
	GraphicsCore.prototype._mergeContentResource = function(dvlRootSceneId, nodeHierarchy, dvlParentNodeId, dvlInsertBeforeNodeId, shadowContentResource) {
		// A grouping node for the merged content resource.
		var dvlGroupingNodeId = this._dvl.Scene.CreateNode(dvlRootSceneId, dvlParentNodeId, shadowContentResource.name, dvlInsertBeforeNodeId);
		shadowContentResource.nodeProxy = nodeHierarchy.createNodeProxy(dvlGroupingNodeId);

		if (shadowContentResource.localMatrix) {
			shadowContentResource.nodeProxy.setLocalMatrix(shadowContentResource.localMatrix);
		}

		if (shadowContentResource.source) {
			var sourceDatum = this._findSourceData({ source: shadowContentResource.source })[0];
			var dvlSceneDatum = this._findDvlSceneData({ sourceDatum: sourceDatum, root: false })[0];
			if (!dvlSceneDatum) {
				// The DVL scene is not created yet.
				dvlSceneDatum = new DvlSceneDatum(sap.ui.vk.dvl.getPointer(this._dvl.Core.LoadSceneByUrl(getSourceName(sourceDatum.source), null, getStorageName(sourceDatum.source))), sourceDatum, false);
				this._dvlSceneData.push(dvlSceneDatum);
				sourceDatum.addRef();
			}
			shadowContentResource.dvlSceneDatum = dvlSceneDatum;
			dvlSceneDatum.addRef();
			// Clone top level nodes from the merged content resource under the newly created grouping node.
			this._dvl.Scene.RetrieveSceneInfo(dvlSceneDatum.dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN).ChildNodes.forEach(function(nodeId) {
				this._dvl.Scene.CreateNodeCopy(dvlRootSceneId, nodeId, dvlGroupingNodeId, sap.ve.dvl.DVLCREATENODECOPYFLAG.COPY_CHILDREN);
			}.bind(this));
		}
		// NB: pass undefined as dvlInsertBeforeNodeId to add to the end.
		shadowContentResource.children.forEach(this._mergeContentResource.bind(this, dvlRootSceneId, nodeHierarchy, dvlGroupingNodeId, /* dvlInsertBeforeNodeId = */ undefined));
	};

	/**
	 * Builds a scene tree from the hierarchy of content resources. The content resources must be already loaded.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to build the scene from.
	 * @returns {sap.ui.vk.Scene} The scene built from the content resources.
	 * @public
	 */
	GraphicsCore.prototype.buildSceneTree = function(contentResources) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return null;
		}

		var rootDvlSceneDatum;
		var rootShadowContentResource;
		var shadowContentResources = contentResources.map(function(contentResource) {
			return new ShadowContentResource(contentResource);
		});

		// Process top level content contentResources in a special way. Then process next level content contentResources recursively.
		if (shadowContentResources.length === 1) {
			rootShadowContentResource = shadowContentResources[0];
			if (rootShadowContentResource.source) {
				// If there is a single top level content resource with a URL or File then load the resource without creating
				// a grouping node and merging. Always create a new DVL scene because root DVL scenes are not shared among vkScenes.
				var sourceDatum = this._findSourceData({ source: rootShadowContentResource.source })[0];
				rootDvlSceneDatum = new DvlSceneDatum(sap.ui.vk.dvl.getPointer(this._dvl.Core.LoadSceneByUrl(getSourceName(sourceDatum.source), null, getStorageName(sourceDatum.source))), sourceDatum, true);
				sourceDatum.addRef();
			} else {
				rootDvlSceneDatum = new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true);
			}
		} else {
			// Create a fake root content resource.
			var fakeRootContentResource = new ContentResource({
				sourceType: "vds",
				sourceId: jQuery.sap.uid()
			});
			rootShadowContentResource = new ShadowContentResource(fakeRootContentResource, true);
			fakeRootContentResource.destroy();
			fakeRootContentResource = null;
			Array.prototype.push.apply(rootShadowContentResource.children, shadowContentResources);
			shadowContentResources = [rootShadowContentResource];
			// Always create a new empty scene for the root node.
			rootDvlSceneDatum = new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true);
		}
		this._dvlSceneData.push(rootDvlSceneDatum);
		rootShadowContentResource.dvlSceneDatum = rootDvlSceneDatum;
		rootDvlSceneDatum.addRef();

		var vkScene = new Scene(this, rootDvlSceneDatum.dvlSceneId);
		this._vkSceneData.push(new VkSceneDatum(vkScene, rootShadowContentResource));

		// NB: pass undefined as dvlInsertBeforeNodeId to add to the end.
		rootShadowContentResource.children.forEach(this._mergeContentResource.bind(this, rootDvlSceneDatum.dvlSceneId, vkScene.getDefaultNodeHierarchy(), /* dvlParentNodeId = */ null, /* dvlInsertBeforeNodeId = */ undefined));

		return vkScene;
	};

	/**
	 * Updates or rebuilds a scene tree from the hierarchy of content resources.
	 *
	 * The content resources must be already loaded. Some changes in the content resource hierarchy can lead to
	 * rebuilding the scene completely. In this case a new scene is created.
	 *
	 * @param {sap.ui.vk.Scene} vkScene The scene to update or null to force to create a new one.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to update or build the scene from.
	 * @returns {sap.ui.vk.Scene} The scene updated or created.
	 * @public
	 */
	GraphicsCore.prototype.updateSceneTree = function(vkScene, contentResources) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return null;
		}

		if (!vkScene) {
			return this.buildSceneTree(contentResources);
		}

		var rootShadowContentResource = this._findVkSceneData({ vkScene: vkScene })[0].shadowContentResource;
		var oldRootIsFromFile = !!rootShadowContentResource.source;
		var newRootIsFromFile = contentResources.length === 1 && !!contentResources[0].getSource();

		if (!(oldRootIsFromFile && newRootIsFromFile && rootShadowContentResource.source === contentResources[0].getSource()
				|| !oldRootIsFromFile && !newRootIsFromFile && rootShadowContentResource.fake === contentResources.length > 1)) {
			return this.buildSceneTree(contentResources);
		}

		var that = this;
		var dvlRootSceneId = vkScene._getDvlSceneId();
		var nodeHierarchy = vkScene.getDefaultNodeHierarchy();

		function update(shadowContentResources, contentResources, dvlParentNodeId) {
			// This function compares changes in properties which might lead to DVL node re-creation or deletion.
			function compare(shadowContentResource, contentResource) {
				if (!shadowContentResource && !contentResource) {
					// Both are undefined/null.
					return true;
				} else if (!!shadowContentResource ^ !!contentResource) {
					// One is undefined/null, another is not undefined/null.
					return false;
				} else {
					// Both are not undefined/null.
					return shadowContentResource.source === contentResource.getSource()
						&& shadowContentResource.sourceType === contentResource.getSourceType()
						&& shadowContentResource.name === contentResource.getName();
				}
			}

			// The mutable properties do not lead to re-creation of DVL nodes.
			function copyMutableProperties(shadowContentResource, contentResource) {
				contentResource._shadowContentResource = shadowContentResource;
				shadowContentResource.sourceId = contentResource.getSourceId();
				shadowContentResource.localMatrix = contentResource.getLocalMatrix();
				if (shadowContentResource.nodeProxy) {
					shadowContentResource.nodeProxy.setLocalMatrix(shadowContentResource.localMatrix);
				}
			}

			// Scan shadow content resources comparing them with new content resources.
			// Equal content resources are scanned recursively.
			var i = 0; // Shadow content resource index.
			var changes = jQuery.sap.arrayDiff(shadowContentResources, contentResources, compare, true);
			changes.forEach(function(change) {
				// Compare unchanged items.
				for (; i < change.index; ++i) {
					update(shadowContentResources[i].children, contentResources[i].getContentResources(), shadowContentResources[i].nodeProxy.getNodeId());
					copyMutableProperties(shadowContentResources[i], contentResources[i]);
				}
				if (change.type === "delete") {
					that._destroyShadowContentResource(vkScene, shadowContentResources[change.index]);
					shadowContentResources.splice(change.index, 1);
				} else if (change.type === "insert") {
					var nextNodeId;
					if (i < shadowContentResources.length && shadowContentResources[i].nodeProxy) {
						nextNodeId = shadowContentResources[i].nodeProxy.getNodeId();
					}
					var shadowContentResource = new ShadowContentResource(contentResources[change.index]);
					that._mergeContentResource(dvlRootSceneId, nodeHierarchy, dvlParentNodeId, nextNodeId, shadowContentResource);
					shadowContentResources.splice(change.index, 0, shadowContentResource);
					++i;
				}
			});
			// Compare remaining unchanged items.
			for (; i < shadowContentResources.length; ++i) {
				update(shadowContentResources[i].children, contentResources[i].getContentResources(), shadowContentResources[i].nodeProxy && shadowContentResources[i].nodeProxy.getNodeId());
				copyMutableProperties(shadowContentResources[i], contentResources[i]);
			}
		}

		update(rootShadowContentResource.fake ? rootShadowContentResource.children : [rootShadowContentResource], contentResources, 0);

		return vkScene;
	};

	// END: Content Resource related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Scene related methods.

	/**
	 * Destroys the scene object.
	 * @param {sap.ui.vk.Scene} vkScene The scene to destroy.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.destroyScene = function(vkScene) {
		var vkSceneDataIndex;
		for (vkSceneDataIndex = 0; vkSceneDataIndex < this._vkSceneData.length; ++vkSceneDataIndex) {
			if (this._vkSceneData[vkSceneDataIndex].vkScene === vkScene) {
				break;
			}
		}
		if (vkSceneDataIndex === this._vkSceneData.length) {
			jQuery.sap.log.warning("Scene with id '" + vkScene.getId() + "' is not created by this GraphicsCore.");
			return this;
		}
		var vkSceneData = this._vkSceneData.splice(vkSceneDataIndex, 1)[0];
		this._destroyShadowContentResource(vkScene, vkSceneData.shadowContentResource);
		vkScene.destroy();
		return this;
	};

	// END: Scene related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Viewport related methods.

	/**
	 * Registers the viewport in GraphicsCore.
	 * Viewports are registered when corresponding DVLRenderers are created.
	 * @param {sap.ui.vk.Viewport} viewport The viewport to register.
	 * @returns {boolean} <code>true</code> if <code>viewport</code> gets registered, <code>false</code> if <code>viewport</code> was already registered.
	 * @private
	 */
	GraphicsCore.prototype._registerViewport = function(viewport) {
		if (this._viewports.indexOf(viewport) >= 0) {
			return false;
		}
		this._viewports.push(viewport);
		return true;
	};

	/**
	 * Unregisters the viewport in GraphicsCore.
	 * Viewports are unregistered when corresponding DVLRenderers are destroyed.
	 * @param {sap.ui.vk.Viewport} viewport The viewport to unregister.
	 * @returns {boolean} <code>true</code> if <code>viewport</code> gets unregistered, <code>false</code> if <code>viewport</code> was already unregistered.
	 * @private
	 */
	GraphicsCore.prototype._unregisterViewport = function(viewport) {
		var index = this._viewports.indexOf(viewport);
		if (index < 0) {
			return false;
		}
		this._viewports.splice(index, 1);
		return true;
	};

	/**
	 * Gets the Viewport object count.
	 * @returns {int} The number of Viewport objects registered in GraphicsCore.
	 * @private
	 */
	GraphicsCore.prototype._getViewportCount = function() {
		return this._viewports.length;
	};

	// END: Viewport related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: View State Manager related methods.

	/**
	 * Creates a new ViewStateManager object.
	 *
	 * GraphicsCore owns the new ViewStateManager object. The object must be destroyed with the {@link #destroyViewStateManager destroyViewStateManager} method;
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object the view state manager is created for.
	 * @returns {sap.ui.vk.ViewStateManager} The newly created ViewStateManager object.
	 * @public
	 */
	GraphicsCore.prototype.createViewStateManager = function(nodeHierarchy) {
		var viewStateManager = new ViewStateManager(nodeHierarchy);
		this._viewStateManagers.push(viewStateManager);
		return viewStateManager;
	};

	/**
	 * Destroys the ViewStateManager object created with the {@link #createViewStateManager createViewStateManager} method.
	 *
	 * @param {sap.ui.vk.ViewStateManager} viewStateManager The ViewStateManagerObject to destroy.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.destroyViewStateManager = function(viewStateManager) {
		var index = this._viewStateManagers.indexOf(viewStateManager);
		if (index >= 0) {
			this._viewStateManagers.splice(index, 1)[0].destroy();
		}
		return this;
	};

	// END: View State Manager related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Utility methods.

	/**
	 * Shows or hides debug information in the viewports.
	 *
	 * @param {boolean} enable <code>true</code> to show debug information, <code>false</code> to hide debug information.
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 * @experimental since version 1.32.0. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.showDebugInfo = function(enable) {
		this._viewports.forEach(function(viewport) {
			viewport.setShowDebugInfo(enable);
		});
		return this;
	};

	/**
	 * Gets one of APIs supported by the DVL library.
	 *
	 * @param {sap.ui.vk.GraphicsCoreApi} apiId The API identifier.
	 * @returns {object} The object that implements the requested API or null if the API is not supported.
	 * @public
	 * @experimental since version 1.32.0. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.getApi = function(apiId) {
		switch (apiId) {
			case sap.ui.vk.GraphicsCoreApi.LegacyDvl:
				return this._dvl;
			default:
				return null;
		}
	};

	/**
	 * Collects and destroys unused objects and resources.
	 *
	 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 * @experimental since version 1.34.1. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.collectGarbage = function() {
		this._cleanupDvlSceneData();
		this._cleanupSourceData();
		return this;
	};

	// END: Utility methods.
	////////////////////////////////////////////////////////////////////////

	GraphicsCore.prototype._onlocalizationChanged = function(event) {
		if (event.getParameter("changes").language) {
			sap.ui.vk.dvl.checkResult(this._dvl.Core.SetLocale(sap.ui.getCore().getConfiguration().getLanguageTag()));
		}
	};

	/**
	 * Checks if the ArrayBuffer passed as an argument comes from a VDS4 file or not.
	 * @param {ArrayBuffer} arrayBuffer An array buffer that will be peeked into.
	 * @return {boolean} Returns <code>true</code> if the ArrayBuffer comes from a VDS4 file.
	 * @private
	 */
	GraphicsCore.prototype._isVDS4File = function (arrayBuffer) {
		var bufferUint8 = new Uint8Array(arrayBuffer);
		//We are reading the first 15 characters from the buffer.
		var stringToCheck = String.fromCharCode.apply(null, bufferUint8.subarray(0, 15));
		//If the string retrieved from ArrayBuffer starts with "SQLite format 3" or "ZV-", then it's a VDS4 file.
		return (jQuery.sap.startsWith(stringToCheck, "SQLite format 3") || jQuery.sap.startsWith(stringToCheck, "ZV-"));
	};


	return GraphicsCore;
});

}; // end of sap/ui/vk/GraphicsCore.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewport",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler", "./GraphicsCore", "./Messages"
], function (jQuery, library, Control, ResizeHandler, Loco, ViewportHandler, GraphicsCore, Messages) {
	"use strict";

	/**
	 * Constructor for a new Viewport.
	 *
	 * @class
	 * Provides a rendering canvas for the 3D elements of a loaded scene.
	 *
	 * @param {string} [sId] ID for the new Viewport control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Viewport control.
	 * @public
	 * @author SAP SE
	 * @version 1.38.15
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Viewport
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewport = Control.extend("sap.ui.vk.Viewport", /** @lends sap.ui.vk.Viewport.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"setGraphicsCore",
				"getGraphicsCore",
				"setScene",
				"setViewStateManager",
				"beginGesture",
				"endGesture",
				"pan",
				"rotate",
				"zoom",
				"tap",
				"queueCommand",
				"getViewInfo",
				"setViewInfo"
			],
			properties: {
				/**
				 * Shows or hides the debug info.
				 */
				showDebugInfo: "boolean"
			}
		}
	});

	Viewport.prototype.init = function () {
		this._messages = new Messages();
		if (Control.prototype.init) {
			Control.prototype.init(this);
		}

		this._graphicsCore = null;
		this._dvl = null;
		this._dvlRendererId = null;
		this._canvas = null;
		this._resizeListenerId = null;

		this._viewportHandler = new ViewportHandler(this);
		this._loco = new Loco();
		this._loco.addHandler(this._viewportHandler);

		//dictionaries for strings
		this._dictionary = {
			encodedProjectionType: {},
			decodedProjectionType: {
				perspective: sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE,
				orthographic: sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC
			},
			encodedBindingType: {},
			decodedBindingType: {
				minimum: sap.ve.dvl.DVLCAMERAFOVBINDING.MIN,
				maximum: sap.ve.dvl.DVLCAMERAFOVBINDING.MAX,
				horizontal: sap.ve.dvl.DVLCAMERAFOVBINDING.HORZ,
				vertical: sap.ve.dvl.DVLCAMERAFOVBINDING.VERT
			}
		};
		//camera projection type
		this._dictionary.encodedProjectionType[sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE] = "perspective";
		this._dictionary.encodedProjectionType[sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC] = "orthographic";
		//camera FOVBinding
		this._dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.MIN] = "minimum";
		this._dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.MAX] = "maximum";
		this._dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.HORZ] = "horizontal";
		this._dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.VERT] = "vertical";
	};

	Viewport.prototype.exit = function () {
		this._loco.removeHandler(this._viewportHandler);
		this._viewportHandler.destroy();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		this.setViewStateManager(null);
		this.setScene(null);
		this.setGraphicsCore(null);
		this._dictionary = null;
		if (Control.prototype.exit) {
			Control.prototype.exit.apply(this);
		}
	};

	/**
	 * Attaches or detaches the Viewport to the {@link sap.ui.vk.GraphicsCore GraphicsCore} object.
	 *
	 * @param {sap.ui.vk.GraphicsCore} graphicsCore The {@link sap.ui.vk.GraphicsCore GraphicsCore} object or <code>null</code>.
	 * If the <code>graphicsCore</code> parameter is not <code>null</code>, a rendering object corresponding to the Viewport is created.
	 * If the <code>graphicsCore</code> parameter is <code>null</code>, the rendering object corresponding to the Viewport is destroyed.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.setGraphicsCore = function (graphicsCore) {
		if (graphicsCore != this._graphicsCore) {
			if (graphicsCore && this._graphicsCore && this._graphicsCore._getViewportCount() > 0) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT18.summary), this._messages.messages.VIT18.code, "sap.ui.vk.Viewport");
			}

			if (this._graphicsCore) {
				if (this._graphicsCore._unregisterViewport(this)) {
					if (this._graphicsCore._getViewportCount() === 0) {
						this._dvl.Core.StopRenderLoop();
					}
				}
			}

			this._dvlRendererId = null;
			this._dvl = null;

			this._graphicsCore = graphicsCore;

			if (this._graphicsCore) {
				var shouldStartRenderLoop = this._graphicsCore._getViewportCount() === 0;
				this._dvl = this._graphicsCore._getDvl();
				this._dvlRendererId = this._dvl.Core.GetRendererPtr();
				if (sap.ui.Device.os.ios) { // set gradient opaque background for iOS platform
					this._dvl.Renderer.SetBackgroundColor(0, 0, 0, 1, 1, 1, 1, 1);
				} else { // set grey transparent background for all other platforms
					this._dvl.Renderer.SetBackgroundColor(0.5, 0.5, 0.5, 0, 0.5, 0.5, 0.5, 0);
				}
				this._setCanvas(this._graphicsCore._getCanvas());
				this._graphicsCore._registerViewport(this);
				if (shouldStartRenderLoop) {
					this._dvl.Core.StartRenderLoop();
				}
				this.setShowDebugInfo(this.getShowDebugInfo()); // Synchronise DVL internals with viewport properties.
			}
		}
		return this;
	};

	/**
	 * Gets the {@link sap.ui.vk.GraphicsCore GraphicsCore} object the Viewport is attached to.
	 * @returns {sap.ui.vk.GraphicsCore} The {@link sap.ui.vk.GraphicsCore GraphicsCore} object the Viewport is attached to, or <code>null</code>.
	 * @public
	 */
	Viewport.prototype.getGraphicsCore = function () {
		return this._graphicsCore;
	};

	/**
	 * Sets the {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element for rendering 3D content.
	 * @param {HTMLCanvasElement} canvas The {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewport.prototype._setCanvas = function (canvas) {
		// Invalidate the viewport only when it is already rendered.
		var shouldInvalidate = this.getDomRef() && this._canvas !== canvas;
		this._canvas = canvas;
		if (shouldInvalidate) {
			this.invalidate();
		}
		return this;
	};

	/**
	 * Attaches the scene to the Viewport for rendering.
	 * @param {sap.ui.vk.Scene} scene The scene to attach to the Viewport.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.setScene = function (scene) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.AttachScene(scene && scene._getDvlSceneId() || null);
			this._dvlSceneId = scene ? scene._getDvlSceneId() : null;
		}
		return this;
	};

	/**
	 * Retrieves the step index and the procedure index that can be used to store different steps since you cannot the save the dynamically generated stepId.
	 * @param {array} procedures The first argument is the procedure array where the search takes place.
	 * @param {string} stepId The second argument is the stepId for which we need to retrieve the step index and procedure index.
	 * @returns {object} An object which has to properties: <code>stepIndex</code> and <code>procedureIndex</code>.
	 * @private
	 */
	Viewport.prototype._getStepAndProcedureIndexes = function(procedures, stepId) {
		var procedureIndex = -1,
			stepIndex = -1,
			isFound = false;

		for (var i = 0; i < procedures.length; i++) {
			if (!isFound) {
				for (var j = 0; j < procedures[i].steps.length; j++) {
					if (procedures[i].steps[j].id === stepId) {
						stepIndex = j;
						procedureIndex = i;
						isFound = true;
						break;
					}
				}
			} else {
				break;
			}
		}

		return {
			stepIndex: stepIndex,
			procedureIndex: procedureIndex
		};
	};

	/**
	 * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like object.
	 * The information can then be used at a later time to restore the scene to the same camera view using the
	 * {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.<br/>
	 * @returns {object} JSON-like object which holds the current view information.
	 * @public
	 */
	Viewport.prototype.getViewInfo = function () {
		//return null if dvlSceneId is null or not set
		if (this._dvlSceneId === null || this._dvlSceneId === undefined) {
			return null;
		}

		//calculate camera rotation
		var cameraId = this._dvl.Scene.GetCurrentCamera(this._dvlSceneId),
			rotation = this._dvl.Camera.GetRotation(cameraId),
			cameraRotation = {
				yaw: rotation[0],
				pitch: rotation[1],
				roll: rotation[2]
			};

		//calculate camera position
		var cameraOrigin = this._dvl.Camera.GetOrigin(cameraId),
			cameraPosition = {
				x: cameraOrigin[0],
				y: cameraOrigin[1],
				z: cameraOrigin[2]
			};

		var viewInfo = {
			camera: {
				rotation: cameraRotation,
				position: cameraPosition,
				projectionType: this._dictionary.encodedProjectionType[this._dvl.Camera.GetProjection(cameraId)],
				bindingType: this._dictionary.encodedBindingType[this._dvl.Camera.GetFOVBinding(cameraId)]
			}
		};

		//calculating the zoom factor / field of view
		if (this._dictionary.encodedProjectionType[this._dvl.Camera.GetProjection(cameraId)] === "perspective") {
			//If the projection is "perspective", we get the Field of View.
			viewInfo.camera.fieldOfView = this._dvl.Camera.GetFOV(cameraId);
		} else if (this._dictionary.encodedProjectionType[this._dvl.Camera.GetProjection(cameraId)] === "orthographic") {
			//If the projection is "orthographic", we get the Zoom Factor.
			viewInfo.camera.zoomFactor = this._dvl.Camera.GetOrthoZoomFactor(cameraId);
		}

		//calculate step and procedure indexes and animation time
		var stepInfo = this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_STEP_INFO);
		if (stepInfo.stepId !== sap.ve.dvl.DVLID_INVALID) {
			var stepId = stepInfo.StepId,
				animationTime = stepInfo.StepTime,
				procedures = this._dvl.Scene.RetrieveProcedures(this._dvlSceneId),
				stepAndProcedureIndexes = this._getStepAndProcedureIndexes(procedures.procedures, stepId);

			viewInfo.animation = {
				animationTime: animationTime,
				stepIndex: stepAndProcedureIndexes.stepIndex,
				procedureIndex: stepAndProcedureIndexes.procedureIndex
			};
		}

		return viewInfo;
	};

	/**
	 * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo getViewInfo} method.<br/>
	 * Internally, the <code>setViewInfo</code> method activates certain steps at certain animation times,
	 * and then changes the camera position, rotation and field of view (FOV) / zoom factor.
	 * @param {object} viewInfo A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo getViewInfo} method.<br/>
	 * The structure of the <code>viewInfo</code> object is outlined as follows:<br/>
	 * <ul>
	<li>
		animation
		<ul>
		<li>animationTime</li>
		<li>stepIndex</li>
		<li>procedureIndex</li>
		</ul>
	</li>
	<li>
		camera
		<ul>
		<li>rotation
			<ul>
			<li>yaw</li>
			<li>pitch</li>
			<li>roll</li>
			</ul>
		</li>
		<li>position
			<ul>
			<li>x</li>
			<li>y</li>
			<li>z</li>
			</ul>
		</li>
		<li>
			projection
		</li>
		<li>
			bindingType
		</li>
		<li>
			fieldOfView/zoomFactor
		</li>
		</ul>
	</li>
	</ul>
	 * @public
	 */
	Viewport.prototype.setViewInfo = function (viewInfo) {
		if (viewInfo.animation) {
			var procedures = this._dvl.Scene.RetrieveProcedures(this._dvlSceneId);
			if (procedures.procedures.length > 0 && viewInfo.animation.stepIndex !== -1 && viewInfo.animation.procedureIndex !== -1) {
				//if the saved view info has steps and procedures, we use them for activating the indicated step
				if (viewInfo.animation.procedureIndex >= 0 && viewInfo.animation.procedureIndex < procedures.procedures.length) {
					if (viewInfo.animation.stepIndex >= 0 && viewInfo.animation.stepIndex < procedures.procedures[viewInfo.animation.procedureIndex].steps.length) {
						var animationTime = viewInfo.animation.animationTime || 0,
						stepId = procedures.procedures[viewInfo.animation.procedureIndex].steps[viewInfo.animation.stepIndex].id;
						this._dvl.Scene.ActivateStep(this._dvlSceneId, stepId, false, false, animationTime);
						this._dvl.Scene.PauseCurrentStep(this._dvlSceneId);
					} else {
						//Unsupported value for step index
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT26.summary), this._messages.messages.VIT26.code, "sap.ui.vk.Viewport");
					}
				} else {
					//Unsupported value for procedure index
					jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT27.summary), this._messages.messages.VIT27.code, "sap.ui.vk.Viewport");
				}
			} else {
				//if the saved info doesn't have steps, we reset the view
				this.resetView();
			}
		}
		var projectionType = this._dictionary.decodedProjectionType[viewInfo.camera.projectionType],
			//creating a new camera
			currentCamera = this._dvl.Scene.CreateCamera(this._dvlSceneId, projectionType, sap.ve.dvl.DVLID_INVALID);

		//positioning the camera in space
		this._dvl.Camera.SetOrigin(currentCamera, viewInfo.camera.position.x, viewInfo.camera.position.y, viewInfo.camera.position.z);

		var bindingType = this._dictionary.decodedBindingType[viewInfo.camera.bindingType];
		this._dvl.Camera.SetFOVBinding(currentCamera, bindingType);

		//setting the field of view / zoom factor
		switch (projectionType) {
			case this._dictionary.decodedProjectionType.perspective:
				this._dvl.Camera.SetFOV(currentCamera, viewInfo.camera.fieldOfView);
				break;
			case this._dictionary.decodedProjectionType.orthographic:
				this._dvl.Camera.SetOrthoZoomFactor(currentCamera, viewInfo.camera.zoomFactor);
				break;
			default:
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(this._messages.messages.VIT19.summary), this._messages.messages.VIT19.code, "sap.ui.vk.Viewport");
		}

		//setting the camera rotation
		this._dvl.Camera.SetRotation(currentCamera, viewInfo.camera.rotation.yaw, viewInfo.camera.rotation.pitch, viewInfo.camera.rotation.roll);
		//activating the camera
		this._dvl.Scene.ActivateCamera(this._dvlSceneId, currentCamera);
		//removing the camera that we created from the memory
		this._dvl.Scene.DeleteNode(this._dvlSceneId, currentCamera);
	};

	Viewport.prototype.onBeforeRendering = function () {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	Viewport.prototype.onAfterRendering = function () {
		if (this._canvas) {
			var domRef = this.getDomRef();
			domRef.appendChild(this._canvas);
			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
			this._handleResize({
				size: {
					width: domRef.clientWidth,
					height: domRef.clientHeight
				}
			});
		}
	};

	/**
	 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
	 * @param {jQuery.Event} event The event object.
	 * @returns {boolean} Returns <code>true</code>, unless the <code>if</code> statement inside the method is false which causes the method to return <code>undefined</code>.
	 * @private
	 */
	Viewport.prototype._handleResize = function (event) {
		if (this._dvlRendererId && this._canvas) {
			var devicePixelRatio = window.devicePixelRatio || 1;
			var drawingBufferWidth = event.size.width * devicePixelRatio;
			var drawingBufferHeight = event.size.height * devicePixelRatio;

			this._dvl.Renderer.SetDimensions(drawingBufferWidth, drawingBufferHeight);
			this._dvl.Renderer.SetOptionF(sap.ve.dvl.DVLRENDEROPTIONF.DVLRENDEROPTIONF_DPI, 96 * devicePixelRatio);
			this._canvas.width = drawingBufferWidth;
			this._canvas.height = drawingBufferHeight;
			this._canvas.style.width = event.size.width + "px";
			this._canvas.style.height = event.size.height + "px";

			return true;
		}
	};

	/**
	 * @param {object} viewStateManager Takes a viewStateManager object as parameter.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.setViewStateManager = function (viewStateManager) {
		this._viewStateManager = viewStateManager;
		return this;
	};

	////////////////////////////////////////////////////////////////////////
	// 3D Rendering handling begins.

	/**
	 * @returns {bool} It returns <code>true</code> or <code>false</code> whether the frame should be rendered or not.
	 * @experimental
	 */
	Viewport.prototype.shouldRenderFrame = function () {
		return this._dvlRendererId && this._dvl.Renderer.ShouldRenderFrame();
	};

	/**
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.renderFrame = function () {
		if (this._dvlRendererId) {
			this._dvl.Renderer.RenderFrame(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @param {array} viewMatrix The <code>viewMatrix</code> array.
	 * @param {array} projectionMatrix The projectionMatrix array.
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.renderFrameEx = function (viewMatrix, projectionMatrix) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.RenderFrameEx.apply(this, [].concat(viewMatrix, projectionMatrix), this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.resetView = function () {
		if (this._dvlRendererId) {
			this._dvl.Renderer.ResetView(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @param {string} nodeId The ID of the node to check.
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.canIsolateNode = function (nodeId) {
		if (this._dvlRendererId) {
			return this._dvl.Renderer.CanIsolateNode(nodeId, this._dvlRendererId);
		} else {
			return false;
		}
	};

	/**
	 * @param {string} nodeId The nodeId that we want to set as isolated.
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.setIsolatedNode = function (nodeId) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.SetIsolatedNode(nodeId, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @returns {string} nodeId The ID of the node that is currently set as isolated.
	 * @experimental
	 */
	Viewport.prototype.getIsolatedNode = function () {
		if (this._dvlRendererId) {
			return this._dvl.Renderer.GetIsolatedNode(this._dvlRendererId);
		} else {
			return "i0000000000000000";
		}
	};

	Viewport.prototype.setShowDebugInfo = function(value) {
		this.setProperty("showDebugInfo", value, true);
		if (this._dvlRendererId) {
			this._dvl.Renderer.SetOption(sap.ve.dvl.DVLRENDEROPTION.DVLRENDEROPTION_SHOW_DEBUG_INFO, value, this._dvlRendererId);
		}
		return this;
	};

	// 3D Rendering handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Gesture handling ends.

	/**
	 * Marks the start of the current gesture operation.
	 *
	 * @param {int} x The x-coordinate of the gesture.
	 * @param {int} y The y-coordinate of the gesture.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.beginGesture = function (x, y) {
		if (this._dvlRendererId) {
			var pixelRatio = window.devicePixelRatio || 1;
			this._dvl.Renderer.BeginGesture(x * pixelRatio, y * pixelRatio, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Marks the end of the current gesture operation.
	 *
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.endGesture = function () {
		if (this._dvlRendererId) {
			this._dvl.Renderer.EndGesture(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Performs a <code>pan</code> gesture to pan across the Viewport.
	 *
	 * @param {int} dx The change in distance along the x-coordinate.
	 * @param {int} dy The change in distance along the y-coordinate.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.pan = function (dx, dy) {
		if (this._dvlRendererId) {
			var pixelRatio = window.devicePixelRatio || 1;
			this._dvl.Renderer.Pan(dx * pixelRatio, dy * pixelRatio, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Rotates the content resource displayed on the Viewport.
	 *
	 * @param {int} dx The change in x-coordinate used to define the desired rotation.
	 * @param {int} dy The change in y-coordinate used to define the desired rotation.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.rotate = function (dx, dy) {
		if (this._dvlRendererId) {
			var pixelRatio = window.devicePixelRatio || 1;
			this._dvl.Renderer.Rotate(dx * pixelRatio, dy * pixelRatio, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
	 * @param {double} dy Zoom factor. A scale factor that specifies how much to zoom in or out by.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.zoom = function (dy) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.Zoom(dy, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Executes a click or tap gesture.
	 *
	 * @param {int} x The tap gesture's x-coordinate.
	 * @param {int} y The tap gesture's y-coordinate.
	 * @param {boolean} isDoubleClick Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code> indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.tap = function (x, y, isDoubleClick) {
		if (this._dvlRendererId) {
			var pixelRatio = window.devicePixelRatio || 1;
			this._dvl.Renderer.Tap(x * pixelRatio, y * pixelRatio, isDoubleClick, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
	 *
	 * @param {function} command The command to be executed.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.queueCommand = function (command) {
		if (this._dvlRendererId) {
			this._dvl.Renderer._queueCommand(command, this._dvlRendererId);
		}
		return this;
	};

	// Gesture handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Keyboard handling begins.

	var offscreenPosition = { x: -2, y: -2 };
	var rotateDelta = 2;
	var panDelta = 5;

	[
		{ key: "left",  dx: -rotateDelta, dy:            0 },
		{ key: "right", dx: +rotateDelta, dy:            0 },
		{ key: "up",    dx:            0, dy: -rotateDelta },
		{ key: "down",  dx:            0, dy: +rotateDelta }
	].forEach(function(item) {
		Viewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(offscreenPosition.x, offscreenPosition.y);
			this.rotate(item.dx, item.dy);
			this.endGesture();
			this.renderFrame();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	[
		{ key: "left",  dx: -panDelta, dy:         0 },
		{ key: "right", dx: +panDelta, dy:         0 },
		{ key: "up",    dx:         0, dy: -panDelta },
		{ key: "down",  dx:         0, dy: +panDelta }
	].forEach(function(item) {
		Viewport.prototype["onsap" + item.key + "modifiers"] = function(event) {
			if (event.shiftKey && !(event.ctrlKey || event.altKey || event.metaKey)) {
				this.beginGesture(offscreenPosition.x, offscreenPosition.y);
				this.pan(item.dx, item.dy);
				this.endGesture();
				this.renderFrame();
				event.preventDefault();
				event.stopPropagation();
			}
		};
	});

	[
		{ key: "minus", d: 0.98 },
		{ key: "plus",  d: 1.02 }
	].forEach(function(item) {
		Viewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.zoom(item.d);
			this.endGesture();
			this.renderFrame();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	// Keyboard handling ends.
	////////////////////////////////////////////////////////////////////////

	return Viewport;
});

}; // end of sap/ui/vk/Viewport.js
