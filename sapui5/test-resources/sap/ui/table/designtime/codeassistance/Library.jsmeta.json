{"!name":"sap.ui.table","!version":"1.17.0","!define":{"sap.ui.table.TablePersoController":{"!description":"The TablePersoController can be used to connect a table with a persistence service.","setPersoService":{"!description":"Sets a new value for property <code>persoService<\/code>.\n\nPersonalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oPersoService: Object) -> sap.ui.table.TablePersoController","parameters":{"oPersoService":"type: any, description: New value for property <code>persoService<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TablePersoController.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getPersoService":{"!description":"Gets current value of property <code>persoService<\/code>.\n\nPersonalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn() -> Object"},"getCustomDataKey":{"!description":"Gets current value of property <code>customDataKey<\/code>.\n\nBy defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.\n\nDefault value is <code>persoKey<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.ManagedObject","refresh":{"!description":"Refresh the personalizations (reloads data from service).","!static":false,"!category":"function","!type":"fn() -> jQuery.Promise"},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new TablePersoController.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAutoSave autoSave} : boolean (default: true)<\/li>\n<li>{@link #getPersoService persoService} : any<\/li>\n<li>{@link #getCustomDataKey customDataKey} : string (default: persoKey)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/table/TablePersoController","!helpDescription":"The TablePersoController can be used to connect a table with a persistence service.","getTable":{"!description":"ID of the element which is the current target of the association <code>table<\/code>, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"setTable":{"!description":"Sets the associated <code>table<\/code>.","!static":false,"!category":"function","!type":"fn(oTable: sap.ui.table.Table) -> sap.ui.table.TablePersoController","parameters":{"oTable":"type: sap.ui.table.Table, description: Id of an element which becomes the new target of this table association; alternatively, an element instance may be given"}},"getAutoSave":{"!description":"Gets current value of property <code>autoSave<\/code>.\n\nAuto save state\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"openDialog":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mSettings: Object)","parameters":{"mSettings":"type: object, description: undefined"}},"savePersonalizations":{"!description":"Saves the current personalization state.","!static":false,"!category":"function","!type":"fn() -> jQuery.Promise"},"setAutoSave":{"!description":"Sets a new value for property <code>autoSave<\/code>.\n\nAuto save state\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bAutoSave: Boolean) -> sap.ui.table.TablePersoController","parameters":{"bAutoSave":"type: boolean, description: New value for property <code>autoSave<\/code>"}},"setCustomDataKey":{"!description":"Sets a new value for property <code>customDataKey<\/code>.\n\nBy defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>persoKey<\/code>.","!static":false,"!category":"function","!type":"fn(sCustomDataKey: String) -> sap.ui.table.TablePersoController","parameters":{"sCustomDataKey":"type: string, description: New value for property <code>customDataKey<\/code>"}}},"sap.ui.table.Column_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Column"},"sap.ui.table.SharedDomRef":{"!description":"Shared DOM Reference IDs of the table.\n\nContains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.","!module":"sap/ui/table/library","!category":"static class","HorizontalScrollBar":{"!description":"The element id of the Horizontal Scroll Bar of the sap.ui.table.Table.","!category":"enum","!type":"String"},"VerticalScrollBar":{"!description":"The element id of the Vertical Scroll Bar of the sap.ui.table.Table.","!category":"enum","!type":"String"}},"sap.ui.table":{"fixedColumnCount":{"!description":"Number of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.","!category":"enum","!type":"Number"},"NavigationMode":"sap.ui.table.NavigationMode","firstVisibleRow":{"!description":"First visible row.","!category":"enum","!type":"Number"},"enableColumnFreeze":{"!description":"Flag whether to show or hide the column menu item to freeze or unfreeze a column.","!category":"enum","!type":"Boolean"},"rootLevel":{"!description":"The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.\nThis property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\nThe hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.","!category":"enum","!type":"Number"},"showOverlay":{"!description":"Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.","!category":"enum","!type":"Boolean"},"TreeTable":"sap.ui.table.TreeTable_obj","sumOnTop":{"!description":"Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.","!category":"enum","!type":"Boolean"},"expandFirstLevel":{"!description":"Flag to enable or disable expanding of first level.","!category":"enum","!type":"Boolean"},"threshold":{"!description":"The <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth\nscrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the\n<code>threshold<\/code> is 100, there will be 110 records fetched with the initial load.\nIf the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as\nthe <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.","!category":"enum","!type":"Number"},"fixedRowCount":{"!description":"Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.","!category":"enum","!type":"Number"},"enableGrouping":{"!description":"Flag to enable or disable column grouping. (experimental!)","!category":"enum","!type":"Boolean"},"useGroupMode":{"!description":"If group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)","!category":"enum","!type":"Boolean"},"autoSave":{"!description":"Auto save state","!category":"enum","!type":"Boolean"},"customDataKey":{"!description":"By defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.","!category":"enum","!type":"String"},"GroupEventType":"sap.ui.table.GroupEventType","SelectionBehavior":"sap.ui.table.SelectionBehavior","showFilterMenuEntry":{"!description":"Defines if the filter menu entry is displayed","!category":"enum","!type":"Boolean"},"collapseRecursive":{"!description":"Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel","!category":"enum","!type":"Boolean"},"filtered":{"!description":"Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>","!category":"enum","!type":"Boolean"},"numberOfExpandedLevels":{"!description":"Number of levels, which should be opened initially (on first load of data).","!category":"enum","!type":"Number"},"defaultFilterOperator":{"!description":"If this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!category":"enum","!type":"String"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"filterOperator":{"!description":"Filter operator to use when filtering this column.","!category":"enum","!type":"String"},"columnVisibilityMenuSorter":{"!description":"Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!category":"enum","!type":"Object"},"rowHeight":{"!description":"Height of a row of the Table in pixel.","!category":"enum","!type":"Number"},"!description":"Table-like controls, mainly for desktop scenarios.","VisibleRowCountMode":"sap.ui.table.VisibleRowCountMode","showNoData":{"!description":"Flag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells","!category":"enum","!type":"Boolean"},"grouped":{"!description":"Indicates if the column is grouped.","!category":"enum","!type":"Boolean"},"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!category":"enum","!type":"Boolean"},"visibleRowCount":{"!description":"Number of visible rows of the table.","!category":"enum","!type":"Number"},"columnHeaderVisible":{"!description":"Flag whether the column header is visible or not.","!category":"enum","!type":"Boolean"},"enableCellFilter":{"!description":"Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.","!category":"enum","!type":"Boolean"},"filterProperty":{"!description":"Specifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.","!category":"enum","!type":"String"},"fixedBottomRowCount":{"!description":"Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.","!category":"enum","!type":"Number"},"headerSpan":{"!description":"If this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.","!category":"enum","!type":"Object"},"sorted":{"!description":"Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>","!category":"enum","!type":"Boolean"},"autoResizable":{"!description":"Enables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>","!category":"enum","!type":"Boolean"},"!module":"sap/ui/table/library","filterValue":{"!description":"Specifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\n*something    ends with\nsomething*    starts with\n*something*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!category":"enum","!type":"String"},"!helpDescription":"Table-like controls, mainly for desktop scenarios.","flexible":{"!description":"If the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.","!category":"enum","!type":"Boolean"},"showSortMenuEntry":{"!description":"Defines if the sort menu entries are displayed","!category":"enum","!type":"Boolean"},"sortOrder":{"!description":"This property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>","!category":"enum","!type":"sap.ui.table.SortOrder"},"name":{"!description":"The name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.","!category":"enum","!type":"String"},"ColumnMenu":"sap.ui.table.ColumnMenu_obj","SharedDomRef":"sap.ui.table.SharedDomRef","Row":"sap.ui.table.Row_obj","minAutoRowCount":{"!description":"This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.","!category":"enum","!type":"Number"},"filterType":{"!description":"Type of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.","!category":"enum","!type":"Object"},"selectionMode":{"!description":"Selection mode of the Table. This property controls whether single or multiple rows can be selected and\nhow the selection can be extended. It may also influence the visual appearance.","!category":"enum","!type":"sap.ui.table.SelectionMode"},"TreeAutoExpandMode":"sap.ui.table.TreeAutoExpandMode","SelectionMode":"sap.ui.table.SelectionMode","persoService":{"!description":"Personalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>","!category":"enum","!type":"Object"},"summed":{"!description":"If defined a sum for this column is calculated","!category":"enum","!type":"Boolean"},"showIfGrouped":{"!description":"Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.","!category":"enum","!type":"Boolean"},"enableCustomFilter":{"!description":"Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.","!category":"enum","!type":"Boolean"},"hAlign":{"!description":"Horizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.","!category":"enum","!type":"sap.ui.core.HorizontalAlign"},"sortProperty":{"!description":"Specifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!category":"enum","!type":"String"},"groupHeaderProperty":{"!description":"The property name of the rows data which will be displayed as a group header if the group mode is enabled","!category":"enum","!type":"String"},"enableBusyIndicator":{"!description":"Set this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.","!category":"enum","!type":"Boolean"},"!category":"namespace","TablePersoController":"sap.ui.table.TablePersoController_obj","leadingProperty":{"!description":"Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!category":"enum","!type":"String"},"columnHeaderHeight":{"!description":"Height of the column header of the Table in pixel.","!category":"enum","!type":"Number"},"AnalyticalColumnMenu":"sap.ui.table.AnalyticalColumnMenu_obj","Column":"sap.ui.table.Column_obj","showColumnVisibilityMenu":{"!description":"Flag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.","!category":"enum","!type":"[String]"},"inResult":{"!description":"Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.","!category":"enum","!type":"Boolean"},"visibleRowCountMode":{"!description":"This defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.","!category":"enum","!type":"sap.ui.table.VisibleRowCountMode"},"dirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>If dirty the content of the Table will be overlayed.","!category":"enum","!type":"Boolean"},"enableSelectAll":{"!description":"Specifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.","!category":"enum","!type":"Boolean"},"AnalyticalTable":"sap.ui.table.AnalyticalTable_obj","autoExpandMode":{"!description":"The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode","!category":"enum","!type":"String"},"Table":"sap.ui.table.Table_obj","resizable":{"!description":"If set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)","!category":"enum","!type":"Boolean"},"editable":{"!description":"Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)","!category":"enum","!type":"Boolean"},"AnalyticalColumn":"sap.ui.table.AnalyticalColumn_obj","SortOrder":"sap.ui.table.SortOrder","selectedIndex":{"!description":"Zero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.","!category":"enum","!type":"Number"},"groupHeaderFormatter":{"!description":"If the column is grouped, this formatter is used to format the value in the group header","!category":"enum","!type":"Object"},"selectionBehavior":{"!description":"Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.","!category":"enum","!type":"sap.ui.table.SelectionBehavior"},"width":{"!description":"Width of the Table.","!category":"enum","!type":"sap.ui.core.CSSSize"},"navigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Determines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.","!category":"enum","!type":"sap.ui.table.NavigationMode"},"enableColumnReordering":{"!description":"Flag to enable or disable column reordering","!category":"enum","!type":"Boolean"}},"sap.ui.table.VisibleRowCountMode":{"!description":"VisibleRowCountMode of the table","Auto":{"!description":"The table automatically fills the height of the surrounding container.\nThe visibleRowCount property is automatically changed accordingly.\nAll rows need the same height, otherwise the auto mode doesn't always work as expected.\nThe height of all siblings within the same layout container of the table will be subtracted from the available height.\nFor performance reasons, it is recommended to add no siblings in the table's parent container.","!category":"enum","!type":"String"},"!module":"sap/ui/table/library","Interactive":{"!description":"After rendering the table has as many rows as defined in visibleRowCount property. The user is able to change the visible rows by moving a grip with the mouse. The visibleRowCount property is changed accordingly.","!category":"enum","!type":"String"},"!category":"static class","Fixed":{"!description":"The table always has as many rows as defined in the visibleRowCount property.","!category":"enum","!type":"String"}},"sap.ui.table.SelectionBehavior":{"!description":"Selection behavior of the table","RowSelector":{"!description":"Rows can only be selected on the row selector.","!category":"enum","!type":"String"},"!module":"sap/ui/table/library","!category":"static class","Row":{"!description":"Rows can be selected on the complete row.","!category":"enum","!type":"String"},"RowOnly":{"!description":"Rows can only be selected on the row (and the selector is hidden).","!category":"enum","!type":"String"}},"sap.ui.table.TreeTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TreeTable"},"sap.ui.table.SortOrder":{"!description":"Sort order of a column","Descending":{"!description":"Sort Order: descending.","!category":"enum","!type":"String"},"!module":"sap/ui/table/library","!category":"static class","Ascending":{"!description":"Sort Order: ascending.","!category":"enum","!type":"String"}},"sap.ui.table.Table_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Table"},"sap.ui.table.TablePersoController_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TablePersoController"},"sap.ui.table.Row":{"!description":"The row.","removeAllCells":{"!description":"Removes all the controls from the aggregation <code>cells<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"addCell":{"!description":"Adds some cell to the aggregation <code>cells<\/code>.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.Control) -> sap.ui.table.Row","parameters":{"oCell":"type: sap.ui.core.Control, description: the cell to add; if empty, nothing is inserted"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Row.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getIndex":{"!description":"Returns the index of the row in the table or -1 if not added to a table. This\nfunction considers the scroll position of the table and also takes fixed rows and\nfixed bottom rows into account.","!static":false,"!category":"function","!type":"fn() -> Number"},"destroyCells":{"!description":"Destroys all the cells in the aggregation <code>cells<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Row"},"!proto":"sap.ui.core.Element","!category":"class","indexOfCell":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>cells<\/code>.\nand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.Control) -> Number","parameters":{"oCell":"type: sap.ui.core.Control, description: The cell whose index is looked for"}},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new Row.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getCells cells} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/table/Row","!helpDescription":"The row.","insertCell":{"!description":"Inserts a cell into the aggregation <code>cells<\/code>.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Row","parameters":{"iIndex":"type: int, description: the <code>0<\/code>-based index the cell should be inserted at; for\n             a negative value of <code>iIndex<\/code>, the cell is inserted at position 0; for a value\n             greater than the current size of the aggregation, the cell is inserted at\n             the last position","oCell":"type: sap.ui.core.Control, description: the cell to insert; if empty, nothing is inserted"}},"removeCell":{"!description":"Removes a cell from the aggregation <code>cells<\/code>.","!static":false,"!category":"function","!type":"fn(vCell: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vCell":"type: int|string|sap.ui.core.Control, description: The cellto remove or its index or id"}},"getCells":{"!description":"Gets content of aggregation <code>cells<\/code>.\n\nThe controls for the cells.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"}},"sap.ui.table.AnalyticalTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalTable"},"sap.ui.table.AnalyticalTable":{"getAutoExpandMode":{"!description":"Gets current value of property <code>autoExpandMode<\/code>.\n\nThe kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode\n\nDefault value is <code>Bundled<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"getContextByIndex":{"!description":"Returns the context of a row by its index.","!static":false,"!category":"function","!type":"fn(iIndex: Number) -> Object","parameters":{"iIndex":"type: int, description: Index of the row to return the context from."}},"suspendUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to avoid updating the AnalyticalInfo when several column are added to the table.\nIn order to finally update the AnalyticalInfo and request data, resumeUpdateAnalyticalInfo must be called.","!static":false,"!category":"function","!type":"fn()"},"getCollapseRecursive":{"!description":"Gets current value of property <code>collapseRecursive<\/code>.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.table.Table","!category":"class","getDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>Gets current value of property <code>dirty<\/code>.\n\nIf dirty the content of the Table will be overlayed.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>Sets a new value for property <code>dirty<\/code>.\n\nIf dirty the content of the Table will be overlayed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bDirty: Boolean) -> sap.ui.table.AnalyticalTable","parameters":{"bDirty":"type: boolean, description: New value for property <code>dirty<\/code>"}},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.\nThe TreeNodes are referenced via their absolute row index.\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection.\nTo override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: The starting index of the range which will be selected.","iFromIndex":"type: int, description: The starting index of the range which will be selected."}},"setSumOnTop":{"!description":"Sets a new value for property <code>sumOnTop<\/code>.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bSumOnTop: Boolean) -> sap.ui.table.AnalyticalTable","parameters":{"bSumOnTop":"type: boolean, description: New value for property <code>sumOnTop<\/code>"}},"!constructorDescription":"Constructor for a new AnalyticalTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSumOnTop sumOnTop} : boolean (default: false)<\/li>\n<li>{@link #getNumberOfExpandedLevels numberOfExpandedLevels} : int (default: 0)<\/li>\n<li>{@link #getAutoExpandMode autoExpandMode} : string (default: Bundled)<\/li>\n<li>{@link #getColumnVisibilityMenuSorter columnVisibilityMenuSorter} : any<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getDirty dirty} : boolean<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","getNumberOfExpandedLevels":{"!description":"Gets current value of property <code>numberOfExpandedLevels<\/code>.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> Boolean","parameters":{"iRowIndex":"type: int, description: The row index for which the selection state should be retrieved"}},"clearSelection":{"!description":"Clears the complete selection (all tree table rows/nodes will lose their selection)","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (ordered ascending).\n\nPlease be aware of the following:\nDue to performance/network traffic reasons, the getSelectedIndices function returns only all indices\nof actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be\nreturned.","!static":false,"!category":"function","!type":"fn() -> [Number]"},"resumeUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to force updating the AnalyticalInfo","!static":false,"!category":"function","!type":"fn(bSuppressRefresh: Boolean, bForceChange: Boolean)","parameters":{"bSuppressRefresh":"type: boolean, description: binding shall not refresh data","bForceChange":"type: boolean, description: forces the binding to fire a change event"}},"!description":"Table which handles analytical OData backends. The AnalyticalTable only works with an AnalyticalBinding and\ncorrectly annotated OData services. Please check on the SAP Annotations for OData Version 2.0 documentation for further details.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalTable.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setNumberOfExpandedLevels":{"!description":"Sets a new value for property <code>numberOfExpandedLevels<\/code>.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iNumberOfExpandedLevels: Number) -> sap.ui.table.AnalyticalTable","parameters":{"iNumberOfExpandedLevels":"type: int, description: New value for property <code>numberOfExpandedLevels<\/code>"}},"getSumOnTop":{"!description":"Gets current value of property <code>sumOnTop<\/code>.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSelectionInterval":{"!description":"Sets the selection of the TreeTable to the given range (including boundaries).\nBeware: The previous selection will be lost/overriden. If this is not wanted, please use \"addSelectionInterval\" and\n\"removeSelectionIntervall\".","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: the end index of the selection range","iFromIndex":"type: int, description: the start index of the selection range"}},"setColumnVisibilityMenuSorter":{"!description":"Sets a new value for property <code>columnVisibilityMenuSorter<\/code>.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oColumnVisibilityMenuSorter: Object) -> sap.ui.table.AnalyticalTable","parameters":{"oColumnVisibilityMenuSorter":"type: any, description: New value for property <code>columnVisibilityMenuSorter<\/code>"}},"setSelectionMode":{"!description":"Sets the selection mode, the current selection is lost.\nSince the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionMode \"None\" is\nnot supported and must not be used.","!static":false,"!category":"function","!type":"fn(sSelectionMode: String) -> sap.ui.table.Table","parameters":{"sSelectionMode":"type: string, description: the selection mode, see sap.ui.table.SelectionMode"}},"getTotalSize":{"!description":"Returns the total size of the data entries.","!static":false,"!category":"function","!type":"fn() -> Number"},"setSelectionBehavior":{"!description":"Sets the selection behavior.\nSince the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionBehavior \"RowOnly\" is\nnot supported and must not be used.","!static":false,"!category":"function","!type":"fn(sBehavior: String) -> sap.ui.table.Table","parameters":{"sBehavior":"type: string, description: the selection behavior, see sap.ui.table.SelectionBehavior"}},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"collapseAll":{"!description":"Collapses all nodes (and lower if collapseRecursive is activated)","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected.\nTree nodes are referenced with theit absolute row index inside the tree-\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: The starting index of the range which will be deselected.","iFromIndex":"type: int, description: The starting index of the range which will be deselected."}},"selectAll":{"!description":"Selects all available nodes/rows.\n\nExplanation of the SelectAll function and what to expect from its behavior:\nAll rows/tree nodes locally stored on the client are selected.\nIn addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.\nHowever, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"setAutoExpandMode":{"!description":"Sets a new value for property <code>autoExpandMode<\/code>.\n\nThe kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Bundled<\/code>.","!static":false,"!category":"function","!type":"fn(sAutoExpandMode: String) -> sap.ui.table.AnalyticalTable","parameters":{"sAutoExpandMode":"type: string, description: New value for property <code>autoExpandMode<\/code>"}},"!module":"sap/ui/table/AnalyticalTable","!helpDescription":"Table which handles analytical OData backends. The AnalyticalTable only works with an AnalyticalBinding and\ncorrectly annotated OData services. Please check on the SAP Annotations for OData Version 2.0 documentation for further details.","getColumnVisibilityMenuSorter":{"!description":"Gets current value of property <code>columnVisibilityMenuSorter<\/code>.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!static":false,"!category":"function","!type":"fn() -> Object"},"getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the\nstart/end of a selection range, when using Shift-Click to select multiple entries at once.","!static":false,"!category":"function","!type":"fn() -> [Number]"},"setSelectedIndex":{"!description":"Overriden from Table.js base class.\nIn a TreeTable you can only select indices, which correspond to the currently visualized tree.\nInvisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not\ncorrespond to a TreeTable row.","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iRowIndex":"type: int, description: The row index which will be selected (if existing)"}}},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.table.AnalyticalColumn":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumn.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.table.Column","!category":"class","setInResult":{"!description":"Sets a new value for property <code>inResult<\/code>.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bInResult: Boolean) -> sap.ui.table.AnalyticalColumn","parameters":{"bInResult":"type: boolean, description: New value for property <code>inResult<\/code>"}},"getShowIfGrouped":{"!description":"Gets current value of property <code>showIfGrouped<\/code>.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setGroupHeaderFormatter":{"!description":"Sets a new value for property <code>groupHeaderFormatter<\/code>.\n\nIf the column is grouped, this formatter is used to format the value in the group header\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oGroupHeaderFormatter: Object) -> sap.ui.table.AnalyticalColumn","parameters":{"oGroupHeaderFormatter":"type: any, description: New value for property <code>groupHeaderFormatter<\/code>"}},"getGroupHeaderFormatter":{"!description":"Gets current value of property <code>groupHeaderFormatter<\/code>.\n\nIf the column is grouped, this formatter is used to format the value in the group header","!static":false,"!category":"function","!type":"fn() -> Object"},"getInResult":{"!description":"Gets current value of property <code>inResult<\/code>.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSummed":{"!description":"Sets a new value for property <code>summed<\/code>.\n\nIf defined a sum for this column is calculated\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bSummed: Boolean) -> sap.ui.table.AnalyticalColumn","parameters":{"bSummed":"type: boolean, description: New value for property <code>summed<\/code>"}},"getLeadingProperty":{"!description":"Gets current value of property <code>leadingProperty<\/code>.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!static":false,"!category":"function","!type":"fn() -> String"},"getSummed":{"!description":"Gets current value of property <code>summed<\/code>.\n\nIf defined a sum for this column is calculated\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new AnalyticalColumn.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLeadingProperty leadingProperty} : string<\/li>\n<li>{@link #getSummed summed} : boolean (default: false)<\/li>\n<li>{@link #getInResult inResult} : boolean (default: false)<\/li>\n<li>{@link #getShowIfGrouped showIfGrouped} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderFormatter groupHeaderFormatter} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Column#constructor sap.ui.table.Column}\ncan be used as well.","!module":"sap/ui/table/AnalyticalColumn","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","setLeadingProperty":{"!description":"Sets a new value for property <code>leadingProperty<\/code>.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sLeadingProperty: String) -> sap.ui.table.AnalyticalColumn","parameters":{"sLeadingProperty":"type: string, description: New value for property <code>leadingProperty<\/code>"}},"setShowIfGrouped":{"!description":"Sets a new value for property <code>showIfGrouped<\/code>.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowIfGrouped: Boolean) -> sap.ui.table.AnalyticalColumn","parameters":{"bShowIfGrouped":"type: boolean, description: New value for property <code>showIfGrouped<\/code>"}}},"sap.ui.table.NavigationMode":{"!description":"Navigation mode of the table","!module":"sap/ui/table/library","!category":"static class","Paginator":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.NavigationMode.Scrollbar}<br>Uses the paginator control.\nThis option must no longer be used. Using a scrollbar is the only navigation mode which is supported by\nthe <code>sap.ui.table<\/code> library. The <code>navigationMode<\/code> property has always been a visual representation. No matter which navigation mode\nis used, data fetched from an OData service is loaded page-wise.","!category":"enum","!type":"String"},"Scrollbar":{"!description":"Uses the scrollbar control.","!category":"enum","!type":"String"}},"sap.ui":{"!category":"namespace","table":"sap.ui.table"},"sap.ui.table.Row_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Row"},"sap.ui.table.AnalyticalColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumnMenu"},"sap.ui.table.GroupEventType":{"!description":"Details about the group event to distinguish between different actions associated with grouping","hideGroupedColumn":{"!description":"Show grouped column only as group header","!category":"enum","!type":"String"},"!module":"sap/ui/table/library","showGroupedColumn":{"!description":"Show grouped column also as a column, not just as group header","!category":"enum","!type":"String"},"ungroup":{"!description":"Ungroup Column","!category":"enum","!type":"String"},"!category":"static class","moveDown":{"!description":"Change the group order of the columns. Move column one position down in the group sequence","!category":"enum","!type":"String"},"ungroupAll":{"!description":"Ungroup All Columns","!category":"enum","!type":"String"},"group":{"!description":"Group Column","!category":"enum","!type":"String"},"moveUp":{"!description":"Change the group order of the columns. Move column one position up in the group sequence","!category":"enum","!type":"String"}},"sap.ui.table.Table":{"fireFirstVisibleRowChanged":{"!description":"Fires event <code>firstVisibleRowChanged<\/code> to attached listeners.","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"getEnableCellFilter":{"!description":"Gets current value of property <code>enableCellFilter<\/code>.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setFirstVisibleRow":{"!description":"Sets a new value for property <code>firstVisibleRow<\/code>.\n\nFirst visible row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iFirstVisibleRow: Number) -> sap.ui.table.Table","parameters":{"iFirstVisibleRow":"type: int, description: New value for property <code>firstVisibleRow<\/code>"}},"setVisibleRowCountMode":{"!description":"Sets a new value for property <code>visibleRowCountMode<\/code>.\n\nThis defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Fixed<\/code>.","!static":false,"!category":"function","!type":"fn(sVisibleRowCountMode: sap.ui.table.VisibleRowCountMode) -> sap.ui.table.Table","parameters":{"sVisibleRowCountMode":"type: sap.ui.table.VisibleRowCountMode, description: New value for property <code>visibleRowCountMode<\/code>"}},"attachBusyStateChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>busyStateChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the busy state of the table changes. It should only be used by composite controls.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getEnableSelectAll":{"!description":"Gets current value of property <code>enableSelectAll<\/code>.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getNoData":{"!description":"Gets content of aggregation <code>noData<\/code>.\n\nThe value for the noData aggregation can be either a string value or a control instance.\nThe control is shown, in case there is no data for the Table available. In case of a string\nvalue this will simply replace the no data text.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control | String"},"getSelectionBehavior":{"!description":"Gets current value of property <code>selectionBehavior<\/code>.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.\n\nDefault value is <code>RowSelector<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.SelectionBehavior"},"getNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Gets current value of property <code>navigationMode<\/code>.\n\nDetermines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.\n\nDefault value is <code>Scrollbar<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.NavigationMode"},"setTooltip":{"!description":"Sets a new tooltip for this object. The tooltip can either be a simple string\n(which in most cases will be rendered as the <code>title<\/code> attribute of this\nElement) or an instance of {@link sap.ui.core.TooltipBase}.\n\nIf a new tooltip is set, any previously set tooltip is deactivated.\n\nPlease note that tooltips are not rendered for the table. The tooltip property will be set\nbut it won't effect the DOM.","!static":false,"!category":"function","!type":"fn(vTooltip: String | sap.ui.core.TooltipBase) -> sap.ui.table.Table","parameters":{"vTooltip":"type: string|sap.ui.core.TooltipBase, description: undefined"}},"exportData":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mSettings: Object) -> Promise","parameters":{"mSettings":"type: object, description: settings for the new Export, see {@link sap.ui.core.util.Export} <code>constructor<\/code>"}},"attachColumnVisibility":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnVisibility<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the visibility of a table column is changed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setEnableCellFilter":{"!description":"Sets a new value for property <code>enableCellFilter<\/code>.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableCellFilter: Boolean) -> sap.ui.table.Table","parameters":{"bEnableCellFilter":"type: boolean, description: New value for property <code>enableCellFilter<\/code>"}},"destroyExtension":{"!description":"Destroys all the extension in the aggregation <code>extension<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"detachSort":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>sort<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"removeAllRows":{"!description":"Removes all the controls from the aggregation <code>rows<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.table.Row]"},"isIndexSelected":{"!description":"Returns whether the given index is selected.","!static":false,"!category":"function","!type":"fn(iIndex: Number) -> Boolean","parameters":{"iIndex":"type: int, description: Index which is checked for selection state."}},"clearSelection":{"!description":"Removes complete selection.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"getVisibleRowCount":{"!description":"Gets current value of property <code>visibleRowCount<\/code>.\n\nNumber of visible rows of the table.\n\nDefault value is <code>10<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"detachColumnFreeze":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnFreeze<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!description":"<p>\n    Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports\n    desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns\n    and rows due to the limited performance of some devices.\n<\/p>\n<p>\n    In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows.\n    When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows\n    the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed\n    columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used\n    control for column templates also has a big influence on the performance.\n<\/p>\n<p>\n    The Table control relies completely on data binding, and its supported feature set is tightly coupled to\n    the data model and binding being used.\n<\/p>","addColumn":{"!description":"Adds some column to the aggregation <code>columns<\/code>.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.table.Column) -> sap.ui.table.Table","parameters":{"oColumn":"type: sap.ui.table.Column, description: the column to add; if empty, nothing is inserted"}},"destroyRows":{"!description":"Destroys all the rows in the aggregation <code>rows<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"attachCellClick":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>cellClick<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table (experimental!).","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireBusyStateChanged":{"!description":"Fires event <code>busyStateChanged<\/code> to attached listeners.","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"destroyNoData":{"!description":"Destroys the noData in the aggregation <code>noData<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"setSelectionMode":{"!description":"Sets the selection mode. The current selection is lost.","!static":false,"!category":"function","!type":"fn(sSelectionMode: String)","parameters":{"sSelectionMode":"type: string, description: the selection mode, see sap.ui.table.SelectionMode"}},"detachCustomFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>customFilter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>filter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is filtered.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"fireCustomFilter":{"!description":"Fires event <code>customFilter<\/code> to attached listeners.","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"getFixedBottomRowCount":{"!description":"Gets current value of property <code>fixedBottomRowCount<\/code>.\n\nNumber of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setNoData":{"!description":"Sets the aggregated <code>noData<\/code>.","!static":false,"!category":"function","!type":"fn(vNoData: sap.ui.core.Control | String) -> sap.ui.table.Table","parameters":{"vNoData":"type: sap.ui.core.Control|string, description: The noData to set"}},"!module":"sap/ui/table/Table","insertColumn":{"!description":"Inserts a column into the aggregation <code>columns<\/code>.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.table.Column, iIndex: Number) -> sap.ui.table.Table","parameters":{"oColumn":"type: sap.ui.table.Column, description: the column to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the column should be inserted at; for\n             a negative value of <code>iIndex<\/code>, the column is inserted at position 0; for a value\n             greater than the current size of the aggregation, the column is inserted at\n             the last position"}},"detachFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>filter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getColumnHeaderHeight":{"!description":"Gets current value of property <code>columnHeaderHeight<\/code>.\n\nHeight of the column header of the Table in pixel.","!static":false,"!category":"function","!type":"fn() -> Number"},"setFooter":{"!description":"Sets the aggregated <code>footer<\/code>.","!static":false,"!category":"function","!type":"fn(vFooter: sap.ui.core.Control | String) -> sap.ui.table.Table","parameters":{"vFooter":"type: sap.ui.core.Control|string, description: The footer to set"}},"detachCellContextmenu":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>cellContextmenu<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"bindColumns":{"!description":"Binds aggregation <code>columns<\/code> to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a \ndetailed description of the possible properties of <code>oBindingInfo<\/code>.","!static":false,"!category":"function","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","parameters":{"oBindingInfo":"type: object, description: The binding information"}},"detachFirstVisibleRowChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>firstVisibleRowChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachFirstVisibleRowChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>firstVisibleRowChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the first visible row is changed. It should only be used by composite controls.\nThe event even is fired when setFirstVisibleRow is called programmatically.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachColumnSelect":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnSelect<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table has been selected","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireCellClick":{"!description":"Fires event <code>cellClick<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>cellControl<\/code> of type <code>sap.ui.core.Control<\/code>The control of the cell.<\/li>\n<li><code>cellDomRef<\/code> of type <code>Object<\/code>DOM reference of the clicked cell. Can be used to position the context menu.<\/li>\n<li><code>rowIndex<\/code> of type <code>int<\/code>Row index of the selected cell.<\/li>\n<li><code>columnIndex<\/code> of type <code>int<\/code>Column index of the selected cell. This is the index of visible columns and might differ from\nthe index maintained in the column aggregation.<\/li>\n<li><code>columnId<\/code> of type <code>string<\/code>Column ID of the selected cell.<\/li>\n<li><code>rowBindingContext<\/code> of type <code>sap.ui.model.Context<\/code>Row binding context of the selected cell.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"removeExtension":{"!description":"Removes a extension from the aggregation <code>extension<\/code>.","!static":false,"!category":"function","!type":"fn(vExtension: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vExtension":"type: int|string|sap.ui.core.Control, description: The extensionto remove or its index or id"}},"getContextByIndex":{"!description":"Returns the context of a row by its index. Please note that for server-based models like OData,\nthe supplied index might not have been loaded yet. If the context is not available at the client,\nthe binding will trigger a backend request and request this single context. Although this API\nlooks synchronous it may not return a context but load it and fire a change event on the binding.\n\nFor server-based models you should consider to only make this API call when the index is within\nthe currently visible scroll area.","!static":false,"!category":"function","!type":"fn(iIndex: Number) -> Object","parameters":{"iIndex":"type: int, description: Index of the row to return the context from."}},"setShowNoData":{"!description":"Sets a new value for property <code>showNoData<\/code>.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowNoData: Boolean) -> sap.ui.table.Table","parameters":{"bShowNoData":"type: boolean, description: New value for property <code>showNoData<\/code>"}},"bindRows":{"!description":"Binds aggregation <code>rows<\/code> to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a \ndetailed description of the possible properties of <code>oBindingInfo<\/code>.","!static":false,"!category":"function","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","parameters":{"oBindingInfo":"type: object, description: The binding information"}},"getGroupBy":{"!description":"ID of the element which is the current target of the association <code>groupBy<\/code>, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the Table.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"addRow":{"!description":"Adds some row to the aggregation <code>rows<\/code>.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.table.Row) -> sap.ui.table.Table","parameters":{"oRow":"type: sap.ui.table.Row, description: the row to add; if empty, nothing is inserted"}},"addSelectionInterval":{"!description":"Adds the given selection interval to the selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!static":false,"!category":"function","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","parameters":{"iIndexFrom":"type: int, description: Index from which .","iIndexTo":"type: int, description: Indices of the items that shall additionally be selected."}},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: String | sap.ui.core.Control) -> sap.ui.table.Table","parameters":{"vAriaLabelledBy":"type: string|sap.ui.core.Control, description: the ariaLabelledBy to add; if empty, nothing is inserted"}},"getShowNoData":{"!description":"Gets current value of property <code>showNoData<\/code>.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setVisibleRowCount":{"!description":"Sets a new value for property <code>visibleRowCount<\/code>.\n\nNumber of visible rows of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>10<\/code>.","!static":false,"!category":"function","!type":"fn(iVisibleRowCount: Number) -> sap.ui.table.Table","parameters":{"iVisibleRowCount":"type: int, description: New value for property <code>visibleRowCount<\/code>"}},"detachRowSelectionChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>rowSelectionChange<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setEnableSelectAll":{"!description":"Sets a new value for property <code>enableSelectAll<\/code>.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableSelectAll: Boolean) -> sap.ui.table.Table","parameters":{"bEnableSelectAll":"type: boolean, description: New value for property <code>enableSelectAll<\/code>"}},"getExtension":{"!description":"Gets content of aggregation <code>extension<\/code>.\n\nExtension section of the Table (if not set it will be hidden)","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"setFixedBottomRowCount":{"!description":"Sets a new value for property <code>fixedBottomRowCount<\/code>.\n\nNumber of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iFixedBottomRowCount: Number) -> sap.ui.table.Table","parameters":{"iFixedBottomRowCount":"type: int, description: New value for property <code>fixedBottomRowCount<\/code>"}},"getShowColumnVisibilityMenu":{"!description":"Gets current value of property <code>showColumnVisibilityMenu<\/code>.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Sets a new value for property <code>navigationMode<\/code>.\n\nDetermines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Scrollbar<\/code>.","!static":false,"!category":"function","!type":"fn(sNavigationMode: sap.ui.table.NavigationMode) -> sap.ui.table.Table","parameters":{"sNavigationMode":"type: sap.ui.table.NavigationMode, description: New value for property <code>navigationMode<\/code>"}},"attachSort":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>sort<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is sorted.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachColumnFreeze":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnFreeze<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table should be freezed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachColumnResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnResize<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is resized.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setSelectionBehavior":{"!description":"Sets a new value for property <code>selectionBehavior<\/code>.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>RowSelector<\/code>.","!static":false,"!category":"function","!type":"fn(sSelectionBehavior: sap.ui.table.SelectionBehavior) -> sap.ui.table.Table","parameters":{"sSelectionBehavior":"type: sap.ui.table.SelectionBehavior, description: New value for property <code>selectionBehavior<\/code>"}},"setColumnHeaderHeight":{"!description":"Sets a new value for property <code>columnHeaderHeight<\/code>.\n\nHeight of the column header of the Table in pixel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iColumnHeaderHeight: Number) -> sap.ui.table.Table","parameters":{"iColumnHeaderHeight":"type: int, description: New value for property <code>columnHeaderHeight<\/code>"}},"setShowColumnVisibilityMenu":{"!description":"Sets a new value for property <code>showColumnVisibilityMenu<\/code>.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowColumnVisibilityMenu: Boolean) -> sap.ui.table.Table","parameters":{"bShowColumnVisibilityMenu":"type: boolean, description: New value for property <code>showColumnVisibilityMenu<\/code>"}},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the Table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Table","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"filter":{"!description":"filter the given column by the given value","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.table.Column, sValue: String) -> sap.ui.table.Table","parameters":{"oColumn":"type: sap.ui.table.Column, description: column to be filtered","sValue":"type: string, description: filter value as string (will be converted)"}},"getFixedRowCount":{"!description":"Gets current value of property <code>fixedRowCount<\/code>.\n\nNumber of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"indexOfRow":{"!description":"Checks for the provided <code>sap.ui.table.Row<\/code> in the aggregation <code>rows<\/code>.\nand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.table.Row) -> Number","parameters":{"oRow":"type: sap.ui.table.Row, description: The row whose index is looked for"}},"removeColumn":{"!description":"Removes a column from the aggregation <code>columns<\/code>.","!static":false,"!category":"function","!type":"fn(vColumn: Number | String | sap.ui.table.Column) -> sap.ui.table.Column","parameters":{"vColumn":"type: int|string|sap.ui.table.Column, description: The columnto remove or its index or id"}},"fireGroup":{"!description":"Fires event <code>group<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>grouped column.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"insertRow":{"!description":"Inserts a row into the aggregation <code>rows<\/code>.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.table.Row, iIndex: Number) -> sap.ui.table.Table","parameters":{"oRow":"type: sap.ui.table.Row, description: the row to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the row should be inserted at; for\n             a negative value of <code>iIndex<\/code>, the row is inserted at position 0; for a value\n             greater than the current size of the aggregation, the row is inserted at\n             the last position"}},"attachRowSelectionChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>rowSelectionChange<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the row selection of the table has been changed (the event parameters can be used to determine\nselection changes - to find out the selected rows you should better use the table selection API)","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"destroyTitle":{"!description":"Destroys the title in the aggregation <code>title<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"detachColumnResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnResize<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setSelectedIndex":{"!description":"Sets a new value for property <code>selectedIndex<\/code>.\n\nZero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn(iSelectedIndex: Number) -> sap.ui.table.Table","parameters":{"iSelectedIndex":"type: int, description: New value for property <code>selectedIndex<\/code>"}},"detachColumnSelect":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnSelect<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getSortedColumns":{"!description":"gets sorted columns","!static":false,"!category":"function","!type":"fn()"},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"setShowOverlay":{"!description":"Sets a new value for property <code>showOverlay<\/code>.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowOverlay: Boolean) -> sap.ui.table.Table","parameters":{"bShowOverlay":"type: boolean, description: New value for property <code>showOverlay<\/code>"}},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setEnableColumnFreeze":{"!description":"Sets a new value for property <code>enableColumnFreeze<\/code>.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableColumnFreeze: Boolean) -> sap.ui.table.Table","parameters":{"bEnableColumnFreeze":"type: boolean, description: New value for property <code>enableColumnFreeze<\/code>"}},"setThreshold":{"!description":"Sets the threshold value, which will be added to all data requests in\ncase the Table is bound against an OData service.","!static":false,"!category":"function","!type":"fn()"},"indexOfExtension":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>extension<\/code>.\nand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oExtension: sap.ui.core.Control) -> Number","parameters":{"oExtension":"type: sap.ui.core.Control, description: The extension whose index is looked for"}},"fireSort":{"!description":"Fires event <code>sort<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>sorted column.<\/li>\n<li><code>sortOrder<\/code> of type <code>sap.ui.table.SortOrder<\/code>Sort Order<\/li>\n<li><code>columnAdded<\/code> of type <code>boolean<\/code>If column was added to sorter this is true. If new sort is started this is set to false<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"fireFilter":{"!description":"Fires event <code>filter<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>filtered column.<\/li>\n<li><code>value<\/code> of type <code>string<\/code>filter value.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\n\nControl or text of title section of the Table (if not set it will be hidden)","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control | String"},"setColumnHeaderVisible":{"!description":"Sets a new value for property <code>columnHeaderVisible<\/code>.\n\nFlag whether the column header is visible or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bColumnHeaderVisible: Boolean) -> sap.ui.table.Table","parameters":{"bColumnHeaderVisible":"type: boolean, description: New value for property <code>columnHeaderVisible<\/code>"}},"removeAllColumns":{"!description":"Removes all the controls from the aggregation <code>columns<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.table.Column]"},"getToolbar":{"!description":"Gets content of aggregation <code>toolbar<\/code>.\n\nToolbar of the Table (if not set it will be hidden)","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Toolbar"},"getFirstVisibleRow":{"!description":"Gets current value of property <code>firstVisibleRow<\/code>.\n\nFirst visible row.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEnableBusyIndicator":{"!description":"Sets a new value for property <code>enableBusyIndicator<\/code>.\n\nSet this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableBusyIndicator: Boolean) -> sap.ui.table.Table","parameters":{"bEnableBusyIndicator":"type: boolean, description: New value for property <code>enableBusyIndicator<\/code>"}},"detachColumnMove":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnMove<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"detachColumnVisibility":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnVisibility<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Table.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getFixedColumnCount":{"!description":"Gets current value of property <code>fixedColumnCount<\/code>.\n\nNumber of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getEnableColumnFreeze":{"!description":"Gets current value of property <code>enableColumnFreeze<\/code>.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!static":false,"!category":"function","!type":"fn(vTitle: sap.ui.core.Control | String) -> sap.ui.table.Table","parameters":{"vTitle":"type: sap.ui.core.Control|string, description: The title to set"}},"sort":{"!description":"sorts the given column ascending or descending","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.table.Column, oSortOrder: sap.ui.table.SortOrder, bAdd: Boolean) -> sap.ui.table.Table","parameters":{"oSortOrder":"type: sap.ui.table.SortOrder, description: sort order of the column (if undefined the default will be ascending)","oColumn":"type: sap.ui.table.Column, description: column to be sorted","bAdd":"type: Boolean, description: Set to true to add the new sort criterion to the existing sort criteria"}},"autoResizeColumn":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(iColIndex: Number)","parameters":{"iColIndex":"type: int, description: The index of the column in the list of visible columns."}},"detachBusyStateChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>busyStateChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachColumnMove":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnMove<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is moved.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"indexOfColumn":{"!description":"Checks for the provided <code>sap.ui.table.Column<\/code> in the aggregation <code>columns<\/code>.\nand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.table.Column) -> Number","parameters":{"oColumn":"type: sap.ui.table.Column, description: The column whose index is looked for"}},"getShowOverlay":{"!description":"Gets current value of property <code>showOverlay<\/code>.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"removeSelectionInterval":{"!description":"Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the \"indexTo\" value.","!static":false,"!category":"function","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","parameters":{"iIndexFrom":"type: int, description: Index from which .","iIndexTo":"type: int, description: Indices of the items that shall additionally be selected."}},"selectAll":{"!description":"Add all rows to the selection.\nPlease note that for server based models like OData the indices which are considered to be selected might not\nbe available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip\nto request this single entity.","!static":false,"!category":"function","!type":"fn()"},"setMinAutoRowCount":{"!description":"Sets a new value for property <code>minAutoRowCount<\/code>.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>5<\/code>.","!static":false,"!category":"function","!type":"fn(iMinAutoRowCount: Number) -> sap.ui.table.Table","parameters":{"iMinAutoRowCount":"type: int, description: New value for property <code>minAutoRowCount<\/code>"}},"unbindColumns":{"!description":"Unbinds aggregation <code>columns<\/code> from model data.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"!helpDescription":"<p>\n    Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports\n    desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns\n    and rows due to the limited performance of some devices.\n<\/p>\n<p>\n    In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows.\n    When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows\n    the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed\n    columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used\n    control for column templates also has a big influence on the performance.\n<\/p>\n<p>\n    The Table control relies completely on data binding, and its supported feature set is tightly coupled to\n    the data model and binding being used.\n<\/p>","attachCustomFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>customFilter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event is triggered when the custom filter item of the column menu is pressed. The column on which the event was triggered is passed as parameter.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"unbindRows":{"!description":"Unbinds aggregation <code>rows<\/code> from model data.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"getSelectedIndex":{"!description":"Gets current value of property <code>selectedIndex<\/code>.\n\nZero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.\n\nDefault value is <code>-1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setFixedRowCount":{"!description":"Sets a new value for property <code>fixedRowCount<\/code>.\n\nNumber of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.Table","parameters":{"iFixedRowCount":"type: int, description: New value for property <code>fixedRowCount<\/code>"}},"getEnableColumnReordering":{"!description":"Gets current value of property <code>enableColumnReordering<\/code>.\n\nFlag to enable or disable column reordering\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getColumnHeaderVisible":{"!description":"Gets current value of property <code>columnHeaderVisible<\/code>.\n\nFlag whether the column header is visible or not.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getRowHeight":{"!description":"Gets current value of property <code>rowHeight<\/code>.\n\nHeight of a row of the Table in pixel.","!static":false,"!category":"function","!type":"fn() -> Number"},"!proto":"sap.ui.core.Control","getSelectionMode":{"!description":"Gets current value of property <code>selectionMode<\/code>.\n\nSelection mode of the Table. This property controls whether single or multiple rows can be selected and\nhow the selection can be extended. It may also influence the visual appearance.\n\nDefault value is <code>MultiToggle<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.SelectionMode"},"detachCellClick":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>cellClick<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!category":"class","getRows":{"!description":"Gets content of aggregation <code>rows<\/code>.\n\nRows of the Table","!static":false,"!category":"function","!type":"fn() -> [sap.ui.table.Row]"},"destroyFooter":{"!description":"Destroys the footer in the aggregation <code>footer<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"insertExtension":{"!description":"Inserts a extension into the aggregation <code>extension<\/code>.","!static":false,"!category":"function","!type":"fn(oExtension: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Table","parameters":{"oExtension":"type: sap.ui.core.Control, description: the extension to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the extension should be inserted at; for\n             a negative value of <code>iIndex<\/code>, the extension is inserted at position 0; for a value\n             greater than the current size of the aggregation, the extension is inserted at\n             the last position"}},"getColumns":{"!description":"Gets content of aggregation <code>columns<\/code>.\n\nColumns of the Table","!static":false,"!category":"function","!type":"fn() -> [sap.ui.table.Column]"},"setEnableColumnReordering":{"!description":"Sets a new value for property <code>enableColumnReordering<\/code>.\n\nFlag to enable or disable column reordering\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableColumnReordering: Boolean) -> sap.ui.table.Table","parameters":{"bEnableColumnReordering":"type: boolean, description: New value for property <code>enableColumnReordering<\/code>"}},"setGroupBy":{"!description":"Sets the associated <code>groupBy<\/code>.","!static":false,"!category":"function","!type":"fn(oGroupBy: sap.ui.table.Column) -> sap.ui.table.Table","parameters":{"oGroupBy":"type: sap.ui.table.Column, description: Id of an element which becomes the new target of this groupBy association; alternatively, an element instance may be given"}},"fireColumnFreeze":{"!description":"Fires event <code>columnFreeze<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>reference to the column to freeze<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"fireColumnVisibility":{"!description":"Fires event <code>columnVisibility<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>affected column.<\/li>\n<li><code>visible<\/code> of type <code>boolean<\/code>new value of the visible property.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"!constructorDescription":"Constructor for a new Table.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getRowHeight rowHeight} : int<\/li>\n<li>{@link #getColumnHeaderHeight columnHeaderHeight} : int<\/li>\n<li>{@link #getColumnHeaderVisible columnHeaderVisible} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCount visibleRowCount} : int (default: 10)<\/li>\n<li>{@link #getFirstVisibleRow firstVisibleRow} : int (default: 0)<\/li>\n<li>{@link #getSelectionMode selectionMode} : sap.ui.table.SelectionMode (default: MultiToggle)<\/li>\n<li>{@link #getSelectionBehavior selectionBehavior} : sap.ui.table.SelectionBehavior (default: RowSelector)<\/li>\n<li>{@link #getSelectedIndex selectedIndex} : int (default: -1)<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<li>{@link #getNavigationMode navigationMode} : sap.ui.table.NavigationMode (default: Scrollbar)<\/li>\n<li>{@link #getThreshold threshold} : int (default: 100)<\/li>\n<li>{@link #getEnableColumnReordering enableColumnReordering} : boolean (default: true)<\/li>\n<li>{@link #getEnableGrouping enableGrouping} : boolean (default: false)<\/li>\n<li>{@link #getShowColumnVisibilityMenu showColumnVisibilityMenu} : boolean (default: false)<\/li>\n<li>{@link #getShowNoData showNoData} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCountMode visibleRowCountMode} : sap.ui.table.VisibleRowCountMode (default: Fixed)<\/li>\n<li>{@link #getMinAutoRowCount minAutoRowCount} : int (default: 5)<\/li>\n<li>{@link #getFixedColumnCount fixedColumnCount} : int (default: 0)<\/li>\n<li>{@link #getFixedRowCount fixedRowCount} : int (default: 0)<\/li>\n<li>{@link #getFixedBottomRowCount fixedBottomRowCount} : int (default: 0)<\/li>\n<li>{@link #getEnableColumnFreeze enableColumnFreeze} : boolean (default: false)<\/li>\n<li>{@link #getEnableCellFilter enableCellFilter} : boolean (default: false)<\/li>\n<li>{@link #getShowOverlay showOverlay} : boolean (default: false)<\/li>\n<li>{@link #getEnableSelectAll enableSelectAll} : boolean (default: true)<\/li>\n<li>{@link #getEnableCustomFilter enableCustomFilter} : boolean (default: false)<\/li>\n<li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getTitle title} : sap.ui.core.Control|string<\/li>\n<li>{@link #getFooter footer} : sap.ui.core.Control|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getExtension extension} : sap.ui.core.Control[]<\/li>\n<li>{@link #getColumns columns} : sap.ui.table.Column[] (default)<\/li>\n<li>{@link #getRows rows} : sap.ui.table.Row[]<\/li>\n<li>{@link #getNoData noData} : sap.ui.core.Control|string<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:rowSelectionChange rowSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnSelect columnSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnResize columnResize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnMove columnMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:sort sort} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:filter filter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:group group} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnVisibility columnVisibility} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellClick cellClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellContextmenu cellContextmenu} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnFreeze columnFreeze} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:customFilter customFilter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:firstVisibleRowChanged firstVisibleRowChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:busyStateChanged busyStateChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getVisibleRowCountMode":{"!description":"Gets current value of property <code>visibleRowCountMode<\/code>.\n\nThis defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.\n\nDefault value is <code>Fixed<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.VisibleRowCountMode"},"getEnableBusyIndicator":{"!description":"Gets current value of property <code>enableBusyIndicator<\/code>.\n\nSet this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireCellContextmenu":{"!description":"Fires event <code>cellContextmenu<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>cellControl<\/code> of type <code>sap.ui.core.Control<\/code>The control of the cell.<\/li>\n<li><code>cellDomRef<\/code> of type <code>Object<\/code>DOM reference of the clicked cell. Can be used to position the context menu.<\/li>\n<li><code>rowIndex<\/code> of type <code>int<\/code>Row index of the selected cell.<\/li>\n<li><code>columnIndex<\/code> of type <code>int<\/code>Column index of the selected cell. This is the index of visible columns and might differ from\nthe index maintained in the column aggregation.<\/li>\n<li><code>columnId<\/code> of type <code>string<\/code>Column ID of the selected cell.<\/li>\n<li><code>rowBindingContext<\/code> of type <code>sap.ui.model.Context<\/code>Row binding context of the selected cell.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"attachGroup":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>group<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is grouped (experimental!).","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getEnableGrouping":{"!description":"Gets current value of property <code>enableGrouping<\/code>.\n\nFlag to enable or disable column grouping. (experimental!)\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"removeRow":{"!description":"Removes a row from the aggregation <code>rows<\/code>.","!static":false,"!category":"function","!type":"fn(vRow: Number | String | sap.ui.table.Row) -> sap.ui.table.Row","parameters":{"vRow":"type: int|string|sap.ui.table.Row, description: The rowto remove or its index or id"}},"addExtension":{"!description":"Adds some extension to the aggregation <code>extension<\/code>.","!static":false,"!category":"function","!type":"fn(oExtension: sap.ui.core.Control) -> sap.ui.table.Table","parameters":{"oExtension":"type: sap.ui.core.Control, description: the extension to add; if empty, nothing is inserted"}},"getSelectedIndices":{"!description":"Zero-based indices of selected items, wrapped in an array. An empty array means \"no selection\".","!static":false,"!category":"function","!type":"fn()"},"setEnableCustomFilter":{"!description":"Sets a new value for property <code>enableCustomFilter<\/code>.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEnableCustomFilter: Boolean) -> sap.ui.table.Table","parameters":{"bEnableCustomFilter":"type: boolean, description: New value for property <code>enableCustomFilter<\/code>"}},"fireColumnMove":{"!description":"Fires event <code>columnMove<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>moved column.<\/li>\n<li><code>newPos<\/code> of type <code>int<\/code>new position of the column.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"setFixedColumnCount":{"!description":"Sets a new value for property <code>fixedColumnCount<\/code>.\n\nNumber of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn(iFixedColumnCount: Number) -> sap.ui.table.Table","parameters":{"iFixedColumnCount":"type: int, description: New value for property <code>fixedColumnCount<\/code>"}},"setRowHeight":{"!description":"Sets a new value for property <code>rowHeight<\/code>.\n\nHeight of a row of the Table in pixel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iRowHeight: Number) -> sap.ui.table.Table","parameters":{"iRowHeight":"type: int, description: New value for property <code>rowHeight<\/code>"}},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vAriaLabelledBy":"type: int|string|sap.ui.core.Control, description: The ariaLabelledByto be removed or its index or ID"}},"getFooter":{"!description":"Gets content of aggregation <code>footer<\/code>.\n\nControl or text of footer section of the Table (if not set it will be hidden)","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control | String"},"removeAllExtension":{"!description":"Removes all the controls from the aggregation <code>extension<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"destroyColumns":{"!description":"Destroys all the columns in the aggregation <code>columns<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"fireColumnSelect":{"!description":"Fires event <code>columnSelect<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>reference to the selected column<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"setSelectionInterval":{"!description":"Sets the given selection interval as selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!static":false,"!category":"function","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","parameters":{"iIndexFrom":"type: int, description: Index from which .","iIndexTo":"type: int, description: Indices of the items that shall additionally be selected."}},"getEnableCustomFilter":{"!description":"Gets current value of property <code>enableCustomFilter<\/code>.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireRowSelectionChange":{"!description":"Fires event <code>rowSelectionChange<\/code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>rowIndex<\/code> of type <code>int<\/code>row index which has been clicked so that the selection has been changed (either selected or deselected)<\/li>\n<li><code>rowContext<\/code> of type <code>object<\/code>binding context of the row which has been clicked so that selection has been changed<\/li>\n<li><code>rowIndices<\/code> of type <code>int[]<\/code>array of row indices which selection has been changed (either selected or deselected)<\/li>\n<li><code>selectAll<\/code> of type <code>boolean<\/code>indicator if \"select all\" function is used to select rows<\/li>\n<li><code>userInteraction<\/code> of type <code>boolean<\/code>indicates that the event was fired due to an explicit user interaction like clicking the row header\nor using the keyboard (SPACE or ENTER) to select a row or a range of rows.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"detachGroup":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>group<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMinAutoRowCount":{"!description":"Gets current value of property <code>minAutoRowCount<\/code>.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.\n\nDefault value is <code>5<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEditable: Boolean) -> sap.ui.table.Table","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"}},"setToolbar":{"!description":"Sets the aggregated <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.table.Table","parameters":{"oToolbar":"type: sap.ui.core.Toolbar, description: The toolbar to set"}},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation <code>toolbar<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Table"},"attachCellContextmenu":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>cellContextmenu<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getThreshold":{"!description":"Gets current value of property <code>threshold<\/code>.\n\nThe <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth\nscrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the\n<code>threshold<\/code> is 100, there will be 110 records fetched with the initial load.\nIf the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as\nthe <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.\n\nDefault value is <code>100<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"fireColumnResize":{"!description":"Fires event <code>columnResize<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>resized column.<\/li>\n<li><code>width<\/code> of type <code>sap.ui.core.CSSSize<\/code>new width of the table column as CSS Size definition.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}}},"sap.ui.table.ColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.ColumnMenu"},"sap.ui.table.ColumnMenu":{"!description":"The column menu provides all common actions that can be performed on a column.","extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.ColumnMenu.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ColumnMenu.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of\na column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>.\nTo add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of\n<code>sap.ui.unified.Menu<\/code>.","!module":"sap/ui/table/ColumnMenu","!helpDescription":"The column menu provides all common actions that can be performed on a column.","!proto":"sap.ui.unified.Menu","!category":"class"},"sap.ui.table.TreeTable":{"setGroupHeaderProperty":{"!description":"Sets a new value for property <code>groupHeaderProperty<\/code>.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sGroupHeaderProperty: String) -> sap.ui.table.TreeTable","parameters":{"sGroupHeaderProperty":"type: string, description: New value for property <code>groupHeaderProperty<\/code>"}},"expandToLevel":{"!description":"Expands all nodes starting from the root level to the given level 'iLevel'.\n\nOnly supported with ODataModel v2, when running in OperationMode.Client or OperationMode.Auto.\nFully supported for <code>sap.ui.model.ClientTreeBinding<\/code>, e.g. if you are using a <code>sap.ui.model.json.JSONModel<\/code>.\n\nPlease also see <code>sap.ui.model.odata.OperationMode<\/code>.","!static":false,"!category":"function","!type":"fn(iLevel: Number) -> sap.ui.table.TreeTable","parameters":{"iLevel":"type: int, description: the level to which the trees shall be expanded"}},"getCollapseRecursive":{"!description":"Gets current value of property <code>collapseRecursive<\/code>.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.table.Table","!category":"class","setExpandFirstLevel":{"!description":"Sets a new value for property <code>expandFirstLevel<\/code>.\n\nFlag to enable or disable expanding of first level.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bExpandFirstLevel: Boolean) -> sap.ui.table.TreeTable","parameters":{"bExpandFirstLevel":"type: boolean, description: New value for property <code>expandFirstLevel<\/code>"}},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.\nThe TreeNodes are referenced via their absolute row index.\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection.\nTo override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: The starting index of the range which will be selected.","iFromIndex":"type: int, description: The starting index of the range which will be selected."}},"setUseGroupMode":{"!description":"Sets a new value for property <code>useGroupMode<\/code>.\n\nIf group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bUseGroupMode: Boolean) -> sap.ui.table.TreeTable","parameters":{"bUseGroupMode":"type: boolean, description: New value for property <code>useGroupMode<\/code>"}},"getUseGroupMode":{"!description":"Gets current value of property <code>useGroupMode<\/code>.\n\nIf group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Constructor for a new TreeTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpandFirstLevel expandFirstLevel} : boolean (default: false)<\/li>\n<li>{@link #getUseGroupMode useGroupMode} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderProperty groupHeaderProperty} : string<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getRootLevel rootLevel} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:toggleOpenState toggleOpenState} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","attachToggleOpenState":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>toggleOpenState<\/code> event of this <code>sap.ui.table.TreeTable<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.TreeTable<\/code> itself.\n\nfired when a node has been expanded or collapsed (only available in hierachical mode)","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.TreeTable","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.TreeTable<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> Boolean","parameters":{"iRowIndex":"type: int, description: The row index for which the selection state should be retrieved"}},"clearSelection":{"!description":"Clears the complete selection (all tree table rows/nodes will lose their selection)","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (ordered ascending).\n\nPlease be aware of the following:\nDue to performance/network traffic reasons, the getSelectedIndices function returns only all indices\nof actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be\nreturned.","!static":false,"!category":"function","!type":"fn() -> [Number]"},"!description":"The TreeTable control provides a comprehensive set of features to display hierarchical data.","isExpanded":{"!description":"Returns whether the row is expanded or collapsed.","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> Boolean","parameters":{"iRowIndex":"type: int, description: index of the row to check"}},"getRootLevel":{"!description":"Gets current value of property <code>rootLevel<\/code>.\n\nThe root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.\nThis property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\nThe hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.\n\nDefault value is <code>0<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TreeTable.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getExpandFirstLevel":{"!description":"Gets current value of property <code>expandFirstLevel<\/code>.\n\nFlag to enable or disable expanding of first level.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSelectionInterval":{"!description":"Sets the selection of the TreeTable to the given range (including boundaries).\nBeware: The previous selection will be lost/overriden. If this is not wanted, please use \"addSelectionInterval\" and\n\"removeSelectionIntervall\".","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: the end index of the selection range","iFromIndex":"type: int, description: the start index of the selection range"}},"setSelectionMode":{"!description":"Sets the selection mode. The current selection is lost.","!static":false,"!category":"function","!type":"fn(sSelectionMode: String)","parameters":{"sSelectionMode":"type: string, description: the selection mode, see sap.ui.table.SelectionMode"}},"detachToggleOpenState":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>toggleOpenState<\/code> event of this <code>sap.ui.table.TreeTable<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.TreeTable","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"fireToggleOpenState":{"!description":"Fires event <code>toggleOpenState<\/code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>rowIndex<\/code> of type <code>int<\/code>index of the expanded/collapsed row<\/li>\n<li><code>rowContext<\/code> of type <code>object<\/code>binding context of the selected row<\/li>\n<li><code>expanded<\/code> of type <code>boolean<\/code>flag whether the node has been expanded or collapsed<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> sap.ui.table.TreeTable","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"collapseAll":{"!description":"Collapses all nodes (and lower if collapseRecursive is activated)","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"expand":{"!description":"expands the row for the given row index","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iRowIndex":"type: int, description: index of the row to expand"}},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected.\nTree nodes are referenced with theit absolute row index inside the tree-\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iToIndex":"type: int, description: The starting index of the range which will be deselected.","iFromIndex":"type: int, description: The starting index of the range which will be deselected."}},"selectAll":{"!description":"Selects all available nodes/rows.\n\nExplanation of the SelectAll function and what to expect from its behavior:\nAll rows/tree nodes locally stored on the client are selected.\nIn addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.\nHowever, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.TreeTable"},"!module":"sap/ui/table/TreeTable","!helpDescription":"The TreeTable control provides a comprehensive set of features to display hierarchical data.","getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the\nstart/end of a selection range, when using Shift-Click to select multiple entries at once.","!static":false,"!category":"function","!type":"fn() -> [Number]"},"setSelectedIndex":{"!description":"Overriden from Table.js base class.\nIn a TreeTable you can only select indices, which correspond to the currently visualized tree.\nInvisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not\ncorrespond to a TreeTable row.","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iRowIndex":"type: int, description: The row index which will be selected (if existing)"}},"getGroupHeaderProperty":{"!description":"Gets current value of property <code>groupHeaderProperty<\/code>.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled","!static":false,"!category":"function","!type":"fn() -> String"},"collapse":{"!description":"collapses the row for the given row index","!static":false,"!category":"function","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","parameters":{"iRowIndex":"type: int, description: index of the row to collapse"}},"setFixedRowCount":{"!description":"Setter for property <code>fixedRowCount<\/code>.\n\n<b>This property is not supportd for the TreeTable and will be ignored!<\/b>\n\nDefault value is <code>0<\/code>","!static":false,"!category":"function","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.TreeTable","parameters":{"iFixedRowCount":"type: int, description: new value for property <code>fixedRowCount<\/code>"}}},"sap.ui.table.AnalyticalColumn_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumn"},"sap.ui.table.Column":{"getShowSortMenuEntry":{"!description":"Gets current value of property <code>showSortMenuEntry<\/code>.\n\nDefines if the sort menu entries are displayed\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"attachColumnMenuOpen":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnMenuOpen<\/code> event of this <code>sap.ui.table.Column<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Column<\/code> itself.\n\nFires before the column menu is opened.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Column","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.table.Column<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getFilterProperty":{"!description":"Gets current value of property <code>filterProperty<\/code>.\n\nSpecifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.","!static":false,"!category":"function","!type":"fn() -> String"},"getLabel":{"!description":"Gets content of aggregation <code>label<\/code>.\n\nLabel of the column which is displayed in the column header. This aggregation is for the standard behavior,\nwhere you only want to display one single row header. If a string is supplied, a default label control will be\ncreated. Which control this is depends on the loaded libraries.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control | String"},"getName":{"!description":"Gets current value of property <code>name<\/code>.\n\nThe name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.","!static":false,"!category":"function","!type":"fn() -> String"},"setSortProperty":{"!description":"Sets a new value for property <code>sortProperty<\/code>.\n\nSpecifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSortProperty: String) -> sap.ui.table.Column","parameters":{"sSortProperty":"type: string, description: New value for property <code>sortProperty<\/code>"}},"setFilterType":{"!description":"Sets a new value for property <code>filterType<\/code>.\n\nType of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oFilterType: Object) -> sap.ui.table.Column","parameters":{"oFilterType":"type: any, description: New value for property <code>filterType<\/code>"}},"setFilterOperator":{"!description":"Sets a new value for property <code>filterOperator<\/code>.\n\nFilter operator to use when filtering this column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sFilterOperator: String) -> sap.ui.table.Column","parameters":{"sFilterOperator":"type: string, description: New value for property <code>filterOperator<\/code>"}},"getFilterOperator":{"!description":"Gets current value of property <code>filterOperator<\/code>.\n\nFilter operator to use when filtering this column.","!static":false,"!category":"function","!type":"fn() -> String"},"setFiltered":{"!description":"Sets a new value for property <code>filtered<\/code>.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bFiltered: Boolean) -> sap.ui.table.Column","parameters":{"bFiltered":"type: boolean, description: New value for property <code>filtered<\/code>"}},"removeAllMultiLabels":{"!description":"Removes all the controls from the aggregation <code>multiLabels<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"destroyLabel":{"!description":"Destroys the label in the aggregation <code>label<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"getSorted":{"!description":"Gets current value of property <code>sorted<\/code>.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getFlexible":{"!description":"Gets current value of property <code>flexible<\/code>.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setDefaultFilterOperator":{"!description":"Sets a new value for property <code>defaultFilterOperator<\/code>.\n\nIf this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sDefaultFilterOperator: String) -> sap.ui.table.Column","parameters":{"sDefaultFilterOperator":"type: string, description: New value for property <code>defaultFilterOperator<\/code>"}},"!description":"The column allows you to define column specific properties that will be applied when rendering the table.","setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\n\nInvisible controls are not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean) -> sap.ui.table.Column","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Column.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"toggleSort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>Toggles the sort order of the column.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\n\nInvisible controls are not rendered.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"addMultiLabel":{"!description":"Adds some multiLabel to the aggregation <code>multiLabels<\/code>.","!static":false,"!category":"function","!type":"fn(oMultiLabel: sap.ui.core.Control) -> sap.ui.table.Column","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: the multiLabel to add; if empty, nothing is inserted"}},"getHAlign":{"!description":"Gets current value of property <code>hAlign<\/code>.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.\n\nDefault value is <code>Begin<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.HorizontalAlign"},"setSortOrder":{"!description":"Sets a new value for property <code>sortOrder<\/code>.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Ascending<\/code>.","!static":false,"!category":"function","!type":"fn(sSortOrder: sap.ui.table.SortOrder) -> sap.ui.table.Column","parameters":{"sSortOrder":"type: sap.ui.table.SortOrder, description: New value for property <code>sortOrder<\/code>"}},"setGrouped":{"!description":"Sets a new value for property <code>grouped<\/code>.\n\nIndicates if the column is grouped.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bGrouped: Boolean) -> sap.ui.table.Column","parameters":{"bGrouped":"type: boolean, description: New value for property <code>grouped<\/code>"}},"destroyMenu":{"!description":"Destroys the menu in the aggregation <code>menu<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"sort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>sorts the current column ascending or descending","!static":false,"!category":"function","!type":"fn(bDescending: Boolean) -> sap.ui.table.Column","parameters":{"bDescending":"type: boolean, description: sort order of the column (if undefined the default will be ascending)"}},"setMenu":{"!description":"Sets the aggregated <code>menu<\/code>.","!static":false,"!category":"function","!type":"fn(oMenu: sap.ui.unified.Menu) -> sap.ui.table.Column","parameters":{"oMenu":"type: sap.ui.unified.Menu, description: The menu to set"}},"setShowSortMenuEntry":{"!description":"Sets a new value for property <code>showSortMenuEntry<\/code>.\n\nDefines if the sort menu entries are displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowSortMenuEntry: Boolean) -> sap.ui.table.Column","parameters":{"bShowSortMenuEntry":"type: boolean, description: New value for property <code>showSortMenuEntry<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"insertMultiLabel":{"!description":"Inserts a multiLabel into the aggregation <code>multiLabels<\/code>.","!static":false,"!category":"function","!type":"fn(oMultiLabel: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Column","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: the multiLabel to insert; if empty, nothing is inserted","iIndex":"type: int, description: the <code>0<\/code>-based index the multiLabel should be inserted at; for\n             a negative value of <code>iIndex<\/code>, the multiLabel is inserted at position 0; for a value\n             greater than the current size of the aggregation, the multiLabel is inserted at\n             the last position"}},"setTemplate":{"!description":"Sets the aggregated <code>template<\/code>.","!static":false,"!category":"function","!type":"fn(oTemplate: sap.ui.core.Control) -> sap.ui.table.Column","parameters":{"oTemplate":"type: sap.ui.core.Control, description: The template to set"}},"getMultiLabels":{"!description":"Gets content of aggregation <code>multiLabels<\/code>.\n\nLabels of the column which are displayed in the column header. Define a control for\neach header row in the table. Use this aggregation if you want to use multiple headers per column.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!module":"sap/ui/table/Column","!helpDescription":"The column allows you to define column specific properties that will be applied when rendering the table.","setFilterProperty":{"!description":"Sets a new value for property <code>filterProperty<\/code>.\n\nSpecifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sFilterProperty: String) -> sap.ui.table.Column","parameters":{"sFilterProperty":"type: string, description: New value for property <code>filterProperty<\/code>"}},"fireColumnMenuOpen":{"!description":"Fires event <code>columnMenuOpen<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>menu<\/code> of type <code>sap.ui.unified.Menu<\/code>Refence to the selected <code>menu<\/code> instance to be opened.<\/li>\n<\/ul>","!static":false,"!category":"function","!type":"fn(mArguments?: Map) -> Boolean","parameters":{"mArguments":"type: Map, description: The arguments to pass along with the event"}},"destroyTemplate":{"!description":"Destroys the template in the aggregation <code>template<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"setHeaderSpan":{"!description":"Sets a new value for property <code>headerSpan<\/code>.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn(oHeaderSpan: Object) -> sap.ui.table.Column","parameters":{"oHeaderSpan":"type: any, description: New value for property <code>headerSpan<\/code>"}},"setAutoResizable":{"!description":"Sets a new value for property <code>autoResizable<\/code>.\n\nEnables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAutoResizable: Boolean) -> sap.ui.table.Column","parameters":{"bAutoResizable":"type: boolean, description: New value for property <code>autoResizable<\/code>"}},"setFilterValue":{"!description":"Sets a new value for property <code>filterValue<\/code>.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sFilterValue: String) -> sap.ui.table.Column","parameters":{"sFilterValue":"type: string, description: New value for property <code>filterValue<\/code>"}},"indexOfMultiLabel":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>multiLabels<\/code>.\nand returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oMultiLabel: sap.ui.core.Control) -> Number","parameters":{"oMultiLabel":"type: sap.ui.core.Control, description: The multiLabel whose index is looked for"}},"setName":{"!description":"Sets a new value for property <code>name<\/code>.\n\nThe name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.table.Column","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getSortProperty":{"!description":"Gets current value of property <code>sortProperty<\/code>.\n\nSpecifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!static":false,"!category":"function","!type":"fn() -> String"},"removeMultiLabel":{"!description":"Removes a multiLabel from the aggregation <code>multiLabels<\/code>.","!static":false,"!category":"function","!type":"fn(vMultiLabel: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vMultiLabel":"type: int|string|sap.ui.core.Control, description: The multiLabelto remove or its index or id"}},"!proto":"sap.ui.core.Element","!category":"class","getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the column. Works only with px/em/rem values. Em are handled like rem values.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getResizable":{"!description":"Gets current value of property <code>resizable<\/code>.\n\nIf set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getSortOrder":{"!description":"Gets current value of property <code>sortOrder<\/code>.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nDefault value is <code>Ascending<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.SortOrder"},"!constructorDescription":"Constructor for a new Column.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getFlexible flexible} : boolean (default: true)<\/li>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getHAlign hAlign} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getSorted sorted} : boolean (default: false)<\/li>\n<li>{@link #getSortOrder sortOrder} : sap.ui.table.SortOrder (default: Ascending)<\/li>\n<li>{@link #getSortProperty sortProperty} : string<\/li>\n<li>{@link #getFiltered filtered} : boolean (default: false)<\/li>\n<li>{@link #getFilterProperty filterProperty} : string<\/li>\n<li>{@link #getFilterValue filterValue} : string<\/li>\n<li>{@link #getFilterOperator filterOperator} : string<\/li>\n<li>{@link #getDefaultFilterOperator defaultFilterOperator} : string<\/li>\n<li>{@link #getFilterType filterType} : any<\/li>\n<li>{@link #getGrouped grouped} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getShowFilterMenuEntry showFilterMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getShowSortMenuEntry showSortMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getHeaderSpan headerSpan} : any (default: 1)<\/li>\n<li>{@link #getAutoResizable autoResizable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Control|string (default)<\/li>\n<li>{@link #getMultiLabels multiLabels} : sap.ui.core.Control[]<\/li>\n<li>{@link #getTemplate template} : sap.ui.core.Control<\/li>\n<li>{@link #getMenu menu} : sap.ui.unified.Menu<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:columnMenuOpen columnMenuOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getDefaultFilterOperator":{"!description":"Gets current value of property <code>defaultFilterOperator<\/code>.\n\nIf this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!static":false,"!category":"function","!type":"fn() -> String"},"getFiltered":{"!description":"Gets current value of property <code>filtered<\/code>.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMenu":{"!description":"Gets content of aggregation <code>menu<\/code>.\n\nThe menu used by the column. By default the {@link sap.ui.table.ColumnMenu} is used.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of\na column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>.\nTo add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of\n<code>sap.ui.unified.Menu<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.unified.Menu"},"getShowFilterMenuEntry":{"!description":"Gets current value of property <code>showFilterMenuEntry<\/code>.\n\nDefines if the filter menu entry is displayed\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"shouldRender":{"!description":"Returns whether the column should be rendered or not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setFlexible":{"!description":"Sets a new value for property <code>flexible<\/code>.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bFlexible: Boolean) -> sap.ui.table.Column","parameters":{"bFlexible":"type: boolean, description: New value for property <code>flexible<\/code>"}},"destroyMultiLabels":{"!description":"Destroys all the multiLabels in the aggregation <code>multiLabels<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.table.Column"},"setShowFilterMenuEntry":{"!description":"Sets a new value for property <code>showFilterMenuEntry<\/code>.\n\nDefines if the filter menu entry is displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowFilterMenuEntry: Boolean) -> sap.ui.table.Column","parameters":{"bShowFilterMenuEntry":"type: boolean, description: New value for property <code>showFilterMenuEntry<\/code>"}},"getFilterValue":{"!description":"Gets current value of property <code>filterValue<\/code>.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!static":false,"!category":"function","!type":"fn() -> String"},"getGrouped":{"!description":"Gets current value of property <code>grouped<\/code>.\n\nIndicates if the column is grouped.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setSorted":{"!description":"Sets a new value for property <code>sorted<\/code>.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bSorted: Boolean) -> sap.ui.table.Column","parameters":{"bSorted":"type: boolean, description: New value for property <code>sorted<\/code>"}},"getTemplate":{"!description":"Gets content of aggregation <code>template<\/code>.\n\nTemplate (cell renderer) of this column. A template is decoupled from the column, which means after\nchanging the templates' properties or aggregations an explicit invalidation of the column or table is\nrequired. The default depends on the loaded libraries.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"setResizable":{"!description":"Sets a new value for property <code>resizable<\/code>.\n\nIf set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bResizable: Boolean) -> sap.ui.table.Column","parameters":{"bResizable":"type: boolean, description: New value for property <code>resizable<\/code>"}},"getFilterType":{"!description":"Gets current value of property <code>filterType<\/code>.\n\nType of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"getAutoResizable":{"!description":"Gets current value of property <code>autoResizable<\/code>.\n\nEnables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the column. Works only with px/em/rem values. Em are handled like rem values.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Column","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"getHeaderSpan":{"!description":"Gets current value of property <code>headerSpan<\/code>.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nDefault value is <code>1<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"setHAlign":{"!description":"Sets a new value for property <code>hAlign<\/code>.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Begin<\/code>.","!static":false,"!category":"function","!type":"fn(sHAlign: sap.ui.core.HorizontalAlign) -> sap.ui.table.Column","parameters":{"sHAlign":"type: sap.ui.core.HorizontalAlign, description: New value for property <code>hAlign<\/code>"}},"setLabel":{"!description":"Sets the aggregated <code>label<\/code>.","!static":false,"!category":"function","!type":"fn(vLabel: sap.ui.core.Control | String) -> sap.ui.table.Column","parameters":{"vLabel":"type: sap.ui.core.Control|string, description: The label to set"}},"detachColumnMenuOpen":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnMenuOpen<\/code> event of this <code>sap.ui.table.Column<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Column","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.table.TreeAutoExpandMode":{"!description":"Different modes for setting the auto expand mode on different tables (Analytical-, TreeTable, ...)","!module":"sap/ui/table/TreeAutoExpandMode","Sequential":{"!description":"Tree nodes will be expanded in sequence, level by level (Single requests are sent)","!category":"enum","!type":"String"},"!helpDescription":"Different modes for setting the auto expand mode on different tables (Analytical-, TreeTable, ...)","!category":"namespace","Bundled":{"!description":"If supported by a backend provider with analytical capabilities, the requests needed for an automatic node expansion are bundled.","!category":"enum","!type":"String"}},"sap.ui.table.SelectionMode":{"!description":"Selection mode of the table","!module":"sap/ui/table/library","Single":{"!description":"Select one row at a time.","!category":"enum","!type":"String"},"!category":"static class","Multi":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.SelectionMode.MultiToggle}<br>Select multiple rows at a time.","!category":"enum","!type":"String"},"None":{"!description":"No rows can be selected.","!category":"enum","!type":"String"},"MultiToggle":{"!description":"Select multiple rows at a time (toggle behavior).","!category":"enum","!type":"String"}},"sap.ui.table.AnalyticalColumnMenu":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumnMenu.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new AnalyticalColumnMenu.","!module":"sap/ui/table/AnalyticalColumnMenu","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.table.ColumnMenu","!category":"class"}}}